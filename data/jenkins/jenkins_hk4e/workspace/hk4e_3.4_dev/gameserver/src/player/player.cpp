// File: /data/jenkins/jenkins_hk4e/workspace/hk4e_3.4_dev/gameserver/src/player/player.cpp

// Line 186: range 000000001712D610-000000001712D728
void __cdecl ClientDeviceInfo::setSession(ClientDeviceInfo *const this, PlayerSessionProxyPtr *p_session_ptr)
{
  std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v2; // rax
  const proto::PacketHead *LoginPacketHead; // rdx
  std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v4; // rax
  const proto::PlayerLoginReq *LoginReq; // rax
  std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  const std::string *v7; // rax
  common::milog::MiLogStream v8; // [rsp+10h] [rbp-30h] BYREF

  if ( std::operator==<PlayerSessionProxy>(0LL, p_session_ptr) )
  {
    common::milog::MiLogStream::create(
      &v8,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "setSession",
      189);
    common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(&v8, (const char (*)[23])"session_ptr is nullptr");
    common::milog::MiLogStream::~MiLogStream(&v8);
  }
  else
  {
    v2 = std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_session_ptr);
    LoginPacketHead = PlayerSessionProxy::getLoginPacketHead(v2);
    proto::PacketHead::operator=(&this->login_packet_head_, LoginPacketHead);
    v4 = std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_session_ptr);
    LoginReq = PlayerSessionProxy::getLoginReq(v4);
    proto::PlayerLoginReq::operator=(&this->session_login_req, LoginReq);
    v6 = std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_session_ptr);
    v7 = PlayerSessionProxy::getClientIpStr[abi:cxx11](v6);
    std::string::operator=(&this->client_ip_str, v7);
  }
};

// Line 198: range 000000001712D72A-000000001712D7E9
void __cdecl ContentAuditData::toClient(const ContentAuditData *const this, proto::ContentAuditInfo *msg)
{
  proto::ContentAuditInfo::set_content(msg, &this->content);
  if ( *(_BYTE *)(((unsigned __int64)&this->submit_count >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->submit_count >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->submit_count);
  }
  proto::ContentAuditInfo::set_submit_count(msg, this->submit_count);
  if ( *(_BYTE *)(((unsigned __int64)&this->audit_state >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->audit_state >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->audit_state);
  }
  proto::ContentAuditInfo::set_audit_state(msg, (proto::AuditState)this->audit_state);
};

// Line 206: range 000000001712D7EA-000000001712D8FD
void __cdecl ContentAuditData::fromBin(ContentAuditData *const this, const proto::ContentAuditBin *bin)
{
  const std::string *v2; // rsi
  __int64 v3; // rdx
  char v4; // al
  uint32_t v5; // ecx
  char v6; // dl
  __int64 v7; // rdx
  __int64 v8; // rdx
  char v9; // al

  v2 = proto::ContentAuditBin::content[abi:cxx11](bin);
  std::string::operator=(this, v2);
  v3 = proto::ContentAuditBin::submit_time(bin);
  v4 = *(_BYTE *)(((unsigned __int64)&this->submit_time >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(v2) = v4 != 0;
    __asan_report_store4(&this->submit_time, v2, v3);
  }
  this->submit_time = v3;
  v5 = proto::ContentAuditBin::submit_count(bin);
  v6 = *(_BYTE *)(((unsigned __int64)&this->submit_count >> 3) + 0x7FFF8000);
  LOBYTE(v2) = v6 != 0;
  v7 = (v6 != 0) & (unsigned __int8)((char)((((_BYTE)this + 36) & 7) + 3) >= v6);
  if ( (_BYTE)v7 )
    __asan_report_store4(&this->submit_count, v2, v7);
  this->submit_count = v5;
  v8 = proto::ContentAuditBin::audit_state(bin);
  v9 = *(_BYTE *)(((unsigned __int64)&this->audit_state >> 3) + 0x7FFF8000);
  if ( v9 != 0 && v9 <= 3 )
  {
    LOBYTE(v2) = v9 != 0;
    __asan_report_store4(&this->audit_state, v2, v8);
  }
  this->audit_state = v8;
};

// Line 214: range 000000001712D8FE-000000001712DA03
void __cdecl ContentAuditData::toBin(const ContentAuditData *const this, proto::ContentAuditBin *bin)
{
  proto::ContentAuditBin::set_content(bin, &this->content);
  if ( *(_BYTE *)(((unsigned __int64)&this->submit_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->submit_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->submit_time);
  }
  proto::ContentAuditBin::set_submit_time(bin, this->submit_time);
  if ( *(_BYTE *)(((unsigned __int64)&this->submit_count >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->submit_count >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->submit_count);
  }
  proto::ContentAuditBin::set_submit_count(bin, this->submit_count);
  if ( *(_BYTE *)(((unsigned __int64)&this->audit_state >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->audit_state >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->audit_state);
  }
  proto::ContentAuditBin::set_audit_state(bin, this->audit_state);
};

// Line 223: range 000000001712DA04-000000001712E0B4
int32_t __cdecl Player::constructPlayer(Player *const this)
{
  common::tools::TimeUtils::Timer *v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r13
  common::milog::MiLogStream *v4; // rax
  int32_t v5; // r14d
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // r14
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // r14
  common::milog::MiLogStream *v10; // r14
  common::milog::MiLogStream *v11; // r14
  int32_t result; // eax
  int val; // [rsp+1Ch] [rbp-C4h] BYREF
  std::shared_ptr<Player> v14; // [rsp+20h] [rbp-C0h] BYREF
  std::shared_ptr<UnixTimerMgr> __r; // [rsp+30h] [rbp-B0h] BYREF
  std::enable_shared_from_this<Player> v16; // [rsp+40h] [rbp-A0h] BYREF
  common::milog::MiLogStream v17; // [rsp+50h] [rbp-90h] BYREF
  char v18[112]; // [rsp+70h] [rbp-70h] BYREF

  v1 = (common::tools::TimeUtils::Timer *)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = (common::tools::TimeUtils::Timer *)v2;
  }
  v1->start_tv_.tv_sec = 1102416563LL;
  v1->start_tv_.tv_usec = (__suseconds_t)"1 32 16 9 timer:224";
  v1[1].start_tv_.tv_sec = (__time_t)Player::constructPlayer;
  v3 = (unsigned __int64)v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202178560;
  common::tools::TimeUtils::Timer::Timer(v1 + 2);
  std::enable_shared_from_this<Player>::shared_from_this(&v16);
  common::tools::perf::make_shared<PlayerTimerMgr,std::shared_ptr<Player>>(&v14, (std::shared_ptr<Player> *)&v16);
  std::shared_ptr<PlayerTimerMgr>::operator=(&this->player_timer_mgr_ptr_, (std::shared_ptr<PlayerTimerMgr> *)&v14);
  std::shared_ptr<PlayerTimerMgr>::~shared_ptr((std::shared_ptr<PlayerTimerMgr> *const)&v14);
  std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)&v16);
  if ( std::operator==<PlayerTimerMgr>(&this->player_timer_mgr_ptr_, 0LL) )
  {
    common::milog::MiLogStream::create(
      &v17,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructPlayer",
      228);
    v4 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
           &v17,
           (const char (*)[35])"create PlayerTimerMgr failed, uid:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v4, &this->uid_);
    common::milog::MiLogStream::~MiLogStream(&v17);
    v5 = -1;
  }
  else
  {
    common::tools::perf::make_shared<UnixTimerMgr>();
    std::shared_ptr<UnixTimerMgr>::operator=(&this->unix_timer_mgr_ptr_, &__r);
    std::shared_ptr<UnixTimerMgr>::~shared_ptr(&__r);
    if ( std::operator==<UnixTimerMgr>(&this->unix_timer_mgr_ptr_, 0LL) )
    {
      common::milog::MiLogStream::create(
        &v17,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/player.cpp",
        "constructPlayer",
        235);
      v6 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
             &v17,
             (const char (*)[33])"create UnixTimerMgr failed, uid:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, &this->uid_);
      common::milog::MiLogStream::~MiLogStream(&v17);
      v5 = -1;
    }
    else
    {
      common::milog::MiLogStream::create(
        &v17,
        &common::milog::MiLogDefault::default_log_obj_,
        2u,
        "./src/player/player.cpp",
        "constructPlayer",
        239);
      v7 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
             &v17,
             (const char (*)[31])"[PERF]: create timer mgr cost:");
      val = common::tools::TimeUtils::Timer::time(v1 + 2);
      common::milog::MiLogStream::operator<<<int,(int *)0>(v7, &val);
      common::milog::MiLogStream::~MiLogStream(&v17);
      if ( !std::__shared_ptr<PlayerCoroExec,(__gnu_cxx::_Lock_policy)2>::operator bool(&this->coro_exec_ptr_)
        && (common::tools::perf::make_shared<PlayerCoroExec,unsigned int &>((unsigned int *)&v16, &this->uid_),
            std::shared_ptr<PlayerCoroExec>::operator=(&this->coro_exec_ptr_, (std::shared_ptr<PlayerCoroExec> *)&v16),
            std::shared_ptr<PlayerCoroExec>::~shared_ptr((std::shared_ptr<PlayerCoroExec> *const)&v16),
            std::operator==<PlayerCoroExec>(&this->coro_exec_ptr_, 0LL)) )
      {
        common::milog::MiLogStream::create(
          &v17,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/player.cpp",
          "constructPlayer",
          246);
        v8 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
               &v17,
               (const char (*)[28])"create corotinue exec error");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, &this->uid_);
        common::milog::MiLogStream::~MiLogStream(&v17);
        v5 = -1;
      }
      else
      {
        Player::addAllPlayerHandler(this);
        common::milog::MiLogStream::create(
          &v17,
          &common::milog::MiLogDefault::default_log_obj_,
          2u,
          "./src/player/player.cpp",
          "constructPlayer",
          252);
        v9 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
               &v17,
               (const char (*)[33])"[PERF]: add player handler cost:");
        val = common::tools::TimeUtils::Timer::time(v1 + 2);
        common::milog::MiLogStream::operator<<<int,(int *)0>(v9, &val);
        common::milog::MiLogStream::~MiLogStream(&v17);
        Player::addAllModifyDataFunc(this);
        common::milog::MiLogStream::create(
          &v17,
          &common::milog::MiLogDefault::default_log_obj_,
          2u,
          "./src/player/player.cpp",
          "constructPlayer",
          254);
        v10 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                &v17,
                (const char (*)[42])"[PERF]: add player modify data func cost:");
        val = common::tools::TimeUtils::Timer::time(v1 + 2);
        common::milog::MiLogStream::operator<<<int,(int *)0>(v10, &val);
        common::milog::MiLogStream::~MiLogStream(&v17);
        Player::constructAllPlayerComp(this);
        common::milog::MiLogStream::create(
          &v17,
          &common::milog::MiLogDefault::default_log_obj_,
          2u,
          "./src/player/player.cpp",
          "constructPlayer",
          256);
        v11 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                &v17,
                (const char (*)[36])"[PERF]: construct player comp cost:");
        val = common::tools::TimeUtils::Timer::time(v1 + 2);
        common::milog::MiLogStream::operator<<<int,(int *)0>(v11, &val);
        common::milog::MiLogStream::~MiLogStream(&v17);
        Player::updateServerErrorNotifyRateLimit(this);
        v5 = 0;
      }
    }
  }
  common::tools::TimeUtils::Timer::~Timer(v1 + 2);
  result = v5;
  if ( v18 == (char *)v1 )
  {
    *(_QWORD *)(((unsigned __int64)v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    v1->start_tv_.tv_sec = 1172321806LL;
    *(_QWORD *)(((unsigned __int64)v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 264: range 000000001712E0B6-000000001712E1A7
int32_t __cdecl Player::clearPlayer(Player *const this)
{
  std::__shared_ptr_access<PlayerTimerMgr,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v1; // rax
  UnixTimerMgr *v2; // rax
  PlayerCoroExec *v3; // rax

  Player::clearAllPlayerHandler(this);
  EcsBase<Player,PlayerCompBase,71u>::clearAllComp(&this->EcsBase<Player,PlayerCompBase,71>);
  if ( std::operator!=<PlayerTimerMgr>(&this->player_timer_mgr_ptr_, 0LL) )
  {
    v1 = std::__shared_ptr_access<PlayerTimerMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerTimerMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->player_timer_mgr_ptr_);
    PausableTimerMgr::cancel(v1);
  }
  std::__shared_ptr<PlayerTimerMgr,(__gnu_cxx::_Lock_policy)2>::reset(&this->player_timer_mgr_ptr_);
  if ( std::operator!=<UnixTimerMgr>(&this->unix_timer_mgr_ptr_, 0LL) )
  {
    v2 = std::__shared_ptr_access<UnixTimerMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<UnixTimerMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->unix_timer_mgr_ptr_);
    UnixTimerMgr::cancel(v2);
  }
  std::__shared_ptr<UnixTimerMgr,(__gnu_cxx::_Lock_policy)2>::reset(&this->unix_timer_mgr_ptr_);
  if ( std::operator!=<PlayerCoroExec>(&this->coro_exec_ptr_, 0LL) )
  {
    v3 = std::__shared_ptr_access<PlayerCoroExec,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerCoroExec,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->coro_exec_ptr_);
    PlayerCoroExec::clearPacketQueue(v3);
  }
  return 0;
};

// Line 290: range 000000001712E1A8-0000000017130781
void __cdecl Player::constructAllPlayerComp(Player *const this)
{
  uint32_t Type; // eax
  uint32_t v2; // eax
  uint32_t v3; // eax
  uint32_t v4; // eax
  uint32_t v5; // eax
  uint32_t v6; // eax
  uint32_t v7; // eax
  uint32_t v8; // eax
  uint32_t v9; // eax
  uint32_t v10; // eax
  uint32_t v11; // eax
  uint32_t v12; // eax
  uint32_t v13; // eax
  uint32_t v14; // eax
  uint32_t v15; // eax
  uint32_t v16; // eax
  uint32_t v17; // eax
  uint32_t v18; // eax
  uint32_t v19; // eax
  uint32_t v20; // eax
  uint32_t v21; // eax
  uint32_t v22; // eax
  uint32_t v23; // eax
  uint32_t v24; // eax
  uint32_t v25; // eax
  uint32_t v26; // eax
  uint32_t v27; // eax
  uint32_t v28; // eax
  uint32_t v29; // eax
  uint32_t v30; // eax
  uint32_t v31; // eax
  uint32_t v32; // eax
  uint32_t v33; // eax
  uint32_t v34; // eax
  uint32_t v35; // eax
  uint32_t v36; // eax
  uint32_t v37; // eax
  uint32_t v38; // eax
  uint32_t v39; // eax
  uint32_t v40; // eax
  uint32_t v41; // eax
  uint32_t v42; // eax
  uint32_t v43; // eax
  uint32_t v44; // eax
  uint32_t v45; // eax
  uint32_t v46; // eax
  uint32_t v47; // eax
  uint32_t v48; // eax
  uint32_t v49; // eax
  uint32_t v50; // eax
  uint32_t v51; // eax
  uint32_t v52; // eax
  uint32_t v53; // eax
  uint32_t v54; // eax
  uint32_t v55; // eax
  uint32_t v56; // eax
  uint32_t v57; // eax
  uint32_t v58; // eax
  uint32_t v59; // eax
  uint32_t v60; // eax
  uint32_t v61; // eax
  uint32_t v62; // eax
  uint32_t v63; // eax
  uint32_t v64; // eax
  uint32_t v65; // eax
  uint32_t v66; // eax
  uint32_t v67; // eax
  uint32_t v68; // eax
  uint32_t v69; // eax
  common::milog::MiLogStream v70; // [rsp+10h] [rbp-30h] BYREF

  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerEventComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      299);
    Type = PlayerEventComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, Type);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerBasicComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      300);
    v2 = PlayerBasicComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v2);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerSceneComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      301);
    v3 = PlayerSceneComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v3);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerItemComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      302);
    v4 = PlayerItemComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v4);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerAvatarComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      303);
    v5 = PlayerAvatarComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v5);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerGmComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      304);
    v6 = PlayerGmComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v6);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerQuestComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      305);
    v7 = PlayerQuestComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v7);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerTalkComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      306);
    v8 = PlayerTalkComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v8);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerShopComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      307);
    v9 = PlayerShopComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v9);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerDungeonComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      308);
    v10 = PlayerDungeonComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v10);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerBoredComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      309);
    v11 = PlayerBoredComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v11);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerMpComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      310);
    v12 = PlayerMpComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v12);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerCookComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      311);
    v13 = PlayerCookComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v13);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerMailComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      312);
    v14 = PlayerMailComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v14);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerLoginComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      313);
    v15 = PlayerLoginComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v15);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerOfflineMsgComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      314);
    v16 = PlayerOfflineMsgComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v16);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerDailyTaskComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      315);
    v17 = PlayerDailyTaskComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v17);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerRandTaskComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      316);
    v18 = PlayerRandTaskComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v18);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerGachaComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      317);
    v19 = PlayerGachaComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v19);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerGivingComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      318);
    v20 = PlayerGivingComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v20);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerForgeComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      319);
    v21 = PlayerForgeComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v21);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerInvestigationComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      320);
    v22 = PlayerInvestigationComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v22);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerActivityComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      321);
    v23 = PlayerActivityComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v23);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerWatcherComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      322);
    v24 = PlayerWatcherComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v24);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerSocialComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      323);
    v25 = PlayerSocialComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v25);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerTowerComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      324);
    v26 = PlayerTowerComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v26);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerSignInComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      325);
    v27 = PlayerSignInComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v27);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerRechargeComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      326);
    v28 = PlayerRechargeComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v28);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerBlossomComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      327);
    v29 = PlayerBlossomComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v29);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerBattlePassComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      328);
    v30 = PlayerBattlePassComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v30);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerMatchComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      329);
    v31 = PlayerMatchComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v31);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerTrialAvatarComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      330);
    v32 = PlayerTrialAvatarComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v32);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerMpPlayComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      331);
    v33 = PlayerMpPlayComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v33);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerAchievementComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      332);
    v34 = PlayerAchievementComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v34);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerCodexComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      333);
    v35 = PlayerCodexComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v35);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerPersonalLineComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      334);
    v36 = PlayerPersonalLineComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v36);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerHuntingComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      335);
    v37 = PlayerHuntingComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v37);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerAbilityGroupComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      336);
    v38 = PlayerAbilityGroupComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v38);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerReputationComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      337);
    v39 = PlayerReputationComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v39);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerWidgetComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      338);
    v40 = PlayerWidgetComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v40);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerCoopComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      339);
    v41 = PlayerCoopComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v41);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerScenePlayComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      340);
    v42 = PlayerScenePlayComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v42);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerCombineComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      341);
    v43 = PlayerCombineComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v43);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerOfferingComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      342);
    v44 = PlayerOfferingComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v44);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerReunionComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      343);
    v45 = PlayerReunionComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v45);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerRoutineComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      344);
    v46 = PlayerRoutineComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v46);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerMiracleRingComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      345);
    v47 = PlayerMiracleRingComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v47);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerMechanicusComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      346);
    v48 = PlayerMechanicusComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v48);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerOpActivityComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      347);
    v49 = PlayerOpActivityComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v49);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerDraftComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      348);
    v50 = PlayerDraftComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v50);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerGalleryComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      349);
    v51 = PlayerGalleryComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v51);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerRegionSearchComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      350);
    v52 = PlayerRegionSearchComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v52);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerHomeComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      351);
    v53 = PlayerHomeComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v53);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerOfflineOpComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      352);
    v54 = PlayerOfflineOpComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v54);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerH5ActivityComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      353);
    v55 = PlayerH5ActivityComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v55);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerExhibitionComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      354);
    v56 = PlayerExhibitionComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v56);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerVehicleComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      355);
    v57 = PlayerVehicleComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v57);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerLiveComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      356);
    v58 = PlayerLiveComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v58);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerGroupLinkComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      357);
    v59 = PlayerGroupLinkComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v59);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerFishingComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      358);
    v60 = PlayerFishingComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v60);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerFireworksComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      359);
    v61 = PlayerFireworksComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v61);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerCityComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      360);
    v62 = PlayerCityComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v62);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerCustomDungeonComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      361);
    v63 = PlayerCustomDungeonComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v63);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerUgcComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      362);
    v64 = PlayerUgcComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v64);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerRegionalPlayComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      363);
    v65 = PlayerRegionalPlayComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v65);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerShareCDComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      364);
    v66 = PlayerShareCDComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v66);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerPolygonComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      365);
    v67 = PlayerPolygonComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v67);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerAranaraCollectionComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      366);
    v68 = PlayerAranaraCollectionComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v68);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
  if ( EcsBase<Player,PlayerCompBase,71u>::addComp<PlayerGCGComp>(&this->EcsBase<Player,PlayerCompBase,71>) )
  {
    common::milog::MiLogStream::create(
      &v70,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "constructAllPlayerComp",
      367);
    v69 = PlayerGCGComp::getType();
    common::milog::MiLogStream::operator()(&v70, off_2602CF00, v69);
    common::milog::MiLogStream::~MiLogStream(&v70);
  }
};

// Line 374: range 0000000017130782-0000000017131F27
void __cdecl Player::addAllPlayerHandler(Player *const this)
{
  common::milog::MiLogStream v1; // [rsp+10h] [rbp-30h] BYREF

  if ( Player::addPlayerHandler<AvatarHandler>(this) )
  {
    common::milog::MiLogStream::create(
      &v1,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "addAllPlayerHandler",
      375);
    common::milog::MiLogStream::operator()(&v1, off_2602CF80);
    common::milog::MiLogStream::~MiLogStream(&v1);
  }
  else if ( Player::addPlayerHandler<NpcHandler>(this) )
  {
    common::milog::MiLogStream::create(
      &v1,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "addAllPlayerHandler",
      376);
    common::milog::MiLogStream::operator()(&v1, off_2602CFE0);
    common::milog::MiLogStream::~MiLogStream(&v1);
  }
  else if ( Player::addPlayerHandler<AbilityHandler>(this) )
  {
    common::milog::MiLogStream::create(
      &v1,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "addAllPlayerHandler",
      377);
    common::milog::MiLogStream::operator()(&v1, off_2602D040);
    common::milog::MiLogStream::~MiLogStream(&v1);
  }
  else if ( Player::addPlayerHandler<DungeonHandler>(this) )
  {
    common::milog::MiLogStream::create(
      &v1,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "addAllPlayerHandler",
      378);
    common::milog::MiLogStream::operator()(&v1, off_2602D0A0);
    common::milog::MiLogStream::~MiLogStream(&v1);
  }
  else if ( Player::addPlayerHandler<FightHandler>(this) )
  {
    common::milog::MiLogStream::create(
      &v1,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "addAllPlayerHandler",
      379);
    common::milog::MiLogStream::operator()(&v1, off_2602D100);
    common::milog::MiLogStream::~MiLogStream(&v1);
  }
  else if ( Player::addPlayerHandler<GadgetHandler>(this) )
  {
    common::milog::MiLogStream::create(
      &v1,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "addAllPlayerHandler",
      380);
    common::milog::MiLogStream::operator()(&v1, off_2602D160);
    common::milog::MiLogStream::~MiLogStream(&v1);
  }
  else if ( Player::addPlayerHandler<ItemHandler>(this) )
  {
    common::milog::MiLogStream::create(
      &v1,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "addAllPlayerHandler",
      381);
    common::milog::MiLogStream::operator()(&v1, off_2602D1C0);
    common::milog::MiLogStream::~MiLogStream(&v1);
  }
  else if ( Player::addPlayerHandler<MailHandler>(this) )
  {
    common::milog::MiLogStream::create(
      &v1,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "addAllPlayerHandler",
      382);
    common::milog::MiLogStream::operator()(&v1, off_2602D220);
    common::milog::MiLogStream::~MiLogStream(&v1);
  }
  else if ( Player::addPlayerHandler<PropertyHandler>(this) )
  {
    common::milog::MiLogStream::create(
      &v1,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "addAllPlayerHandler",
      383);
    common::milog::MiLogStream::operator()(&v1, off_2602D280);
    common::milog::MiLogStream::~MiLogStream(&v1);
  }
  else if ( Player::addPlayerHandler<QuestHandler>(this) )
  {
    common::milog::MiLogStream::create(
      &v1,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "addAllPlayerHandler",
      384);
    common::milog::MiLogStream::operator()(&v1, off_2602D2E0);
    common::milog::MiLogStream::~MiLogStream(&v1);
  }
  else if ( Player::addPlayerHandler<ShopHandler>(this) )
  {
    common::milog::MiLogStream::create(
      &v1,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "addAllPlayerHandler",
      385);
    common::milog::MiLogStream::operator()(&v1, off_2602D340);
    common::milog::MiLogStream::~MiLogStream(&v1);
  }
  else if ( Player::addPlayerHandler<SkillHandler>(this) )
  {
    common::milog::MiLogStream::create(
      &v1,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "addAllPlayerHandler",
      386);
    common::milog::MiLogStream::operator()(&v1, off_2602D3A0);
    common::milog::MiLogStream::~MiLogStream(&v1);
  }
  else if ( Player::addPlayerHandler<SceneHandler>(this) )
  {
    common::milog::MiLogStream::create(
      &v1,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "addAllPlayerHandler",
      387);
    common::milog::MiLogStream::operator()(&v1, off_2602D400);
    common::milog::MiLogStream::~MiLogStream(&v1);
  }
  else if ( Player::addPlayerHandler<PlayerMiscHandler>(this) )
  {
    common::milog::MiLogStream::create(
      &v1,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "addAllPlayerHandler",
      388);
    common::milog::MiLogStream::operator()(&v1, off_2602D460);
    common::milog::MiLogStream::~MiLogStream(&v1);
  }
  else if ( Player::addPlayerHandler<PlayerHandler>(this) )
  {
    common::milog::MiLogStream::create(
      &v1,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "addAllPlayerHandler",
      389);
    common::milog::MiLogStream::operator()(&v1, off_2602D4C0);
    common::milog::MiLogStream::~MiLogStream(&v1);
  }
  else if ( Player::addPlayerHandler<GachaHandler>(this) )
  {
    common::milog::MiLogStream::create(
      &v1,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "addAllPlayerHandler",
      390);
    common::milog::MiLogStream::operator()(&v1, off_2602D520);
    common::milog::MiLogStream::~MiLogStream(&v1);
  }
  else if ( Player::addPlayerHandler<MpHandler>(this) )
  {
    common::milog::MiLogStream::create(
      &v1,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "addAllPlayerHandler",
      391);
    common::milog::MiLogStream::operator()(&v1, off_2602D580);
    common::milog::MiLogStream::~MiLogStream(&v1);
  }
  else if ( Player::addPlayerHandler<InvestigationHandler>(this) )
  {
    common::milog::MiLogStream::create(
      &v1,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "addAllPlayerHandler",
      392);
    common::milog::MiLogStream::operator()(&v1, off_2602D5E0);
    common::milog::MiLogStream::~MiLogStream(&v1);
  }
  else if ( Player::addPlayerHandler<ActivityHandler>(this) )
  {
    common::milog::MiLogStream::create(
      &v1,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "addAllPlayerHandler",
      393);
    common::milog::MiLogStream::operator()(&v1, off_2602D640);
    common::milog::MiLogStream::~MiLogStream(&v1);
  }
  else if ( Player::addPlayerHandler<SocialHandler>(this) )
  {
    common::milog::MiLogStream::create(
      &v1,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "addAllPlayerHandler",
      394);
    common::milog::MiLogStream::operator()(&v1, off_2602D6A0);
    common::milog::MiLogStream::~MiLogStream(&v1);
  }
  else if ( Player::addPlayerHandler<TowerHandler>(this) )
  {
    common::milog::MiLogStream::create(
      &v1,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "addAllPlayerHandler",
      395);
    common::milog::MiLogStream::operator()(&v1, off_2602D700);
    common::milog::MiLogStream::~MiLogStream(&v1);
  }
  else if ( Player::addPlayerHandler<RechargeHandler>(this) )
  {
    common::milog::MiLogStream::create(
      &v1,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "addAllPlayerHandler",
      396);
    common::milog::MiLogStream::operator()(&v1, off_2602D760);
    common::milog::MiLogStream::~MiLogStream(&v1);
  }
  else if ( Player::addPlayerHandler<BlossomHandler>(this) )
  {
    common::milog::MiLogStream::create(
      &v1,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "addAllPlayerHandler",
      397);
    common::milog::MiLogStream::operator()(&v1, off_2602D7C0);
    common::milog::MiLogStream::~MiLogStream(&v1);
  }
  else if ( Player::addPlayerHandler<BattlePassHandler>(this) )
  {
    common::milog::MiLogStream::create(
      &v1,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "addAllPlayerHandler",
      398);
    common::milog::MiLogStream::operator()(&v1, off_2602D820);
    common::milog::MiLogStream::~MiLogStream(&v1);
  }
  else if ( Player::addPlayerHandler<MatchHandler>(this) )
  {
    common::milog::MiLogStream::create(
      &v1,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "addAllPlayerHandler",
      399);
    common::milog::MiLogStream::operator()(&v1, off_2602D880);
    common::milog::MiLogStream::~MiLogStream(&v1);
  }
  else if ( Player::addPlayerHandler<CodexHandler>(this) )
  {
    common::milog::MiLogStream::create(
      &v1,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "addAllPlayerHandler",
      400);
    common::milog::MiLogStream::operator()(&v1, off_2602D8E0);
    common::milog::MiLogStream::~MiLogStream(&v1);
  }
  else if ( Player::addPlayerHandler<AchievementHandler>(this) )
  {
    common::milog::MiLogStream::create(
      &v1,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "addAllPlayerHandler",
      401);
    common::milog::MiLogStream::operator()(&v1, off_2602D940);
    common::milog::MiLogStream::~MiLogStream(&v1);
  }
  else if ( Player::addPlayerHandler<HuntingHandler>(this) )
  {
    common::milog::MiLogStream::create(
      &v1,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "addAllPlayerHandler",
      402);
    common::milog::MiLogStream::operator()(&v1, off_2602D9A0);
    common::milog::MiLogStream::~MiLogStream(&v1);
  }
  else if ( Player::addPlayerHandler<ReputationHandler>(this) )
  {
    common::milog::MiLogStream::create(
      &v1,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "addAllPlayerHandler",
      403);
    common::milog::MiLogStream::operator()(&v1, off_2602DA00);
    common::milog::MiLogStream::~MiLogStream(&v1);
  }
  else if ( Player::addPlayerHandler<WidgetHandler>(this) )
  {
    common::milog::MiLogStream::create(
      &v1,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "addAllPlayerHandler",
      404);
    common::milog::MiLogStream::operator()(&v1, off_2602DA60);
    common::milog::MiLogStream::~MiLogStream(&v1);
  }
  else if ( Player::addPlayerHandler<CoopHandler>(this) )
  {
    common::milog::MiLogStream::create(
      &v1,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "addAllPlayerHandler",
      405);
    common::milog::MiLogStream::operator()(&v1, off_2602DAC0);
    common::milog::MiLogStream::~MiLogStream(&v1);
  }
  else if ( Player::addPlayerHandler<ScenePlayHandler>(this) )
  {
    common::milog::MiLogStream::create(
      &v1,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "addAllPlayerHandler",
      406);
    common::milog::MiLogStream::operator()(&v1, off_2602DB20);
    common::milog::MiLogStream::~MiLogStream(&v1);
  }
  else if ( Player::addPlayerHandler<OfferingHandler>(this) )
  {
    common::milog::MiLogStream::create(
      &v1,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "addAllPlayerHandler",
      407);
    common::milog::MiLogStream::operator()(&v1, off_2602DB80);
    common::milog::MiLogStream::~MiLogStream(&v1);
  }
  else if ( Player::addPlayerHandler<ReunionHandler>(this) )
  {
    common::milog::MiLogStream::create(
      &v1,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "addAllPlayerHandler",
      408);
    common::milog::MiLogStream::operator()(&v1, off_2602DBE0);
    common::milog::MiLogStream::~MiLogStream(&v1);
  }
  else if ( Player::addPlayerHandler<RoutineHandler>(this) )
  {
    common::milog::MiLogStream::create(
      &v1,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "addAllPlayerHandler",
      409);
    common::milog::MiLogStream::operator()(&v1, off_2602DC40);
    common::milog::MiLogStream::~MiLogStream(&v1);
  }
  else if ( Player::addPlayerHandler<MechanicusHandler>(this) )
  {
    common::milog::MiLogStream::create(
      &v1,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "addAllPlayerHandler",
      410);
    common::milog::MiLogStream::operator()(&v1, off_2602DCA0);
    common::milog::MiLogStream::~MiLogStream(&v1);
  }
  else if ( Player::addPlayerHandler<OpActivityHandler>(this) )
  {
    common::milog::MiLogStream::create(
      &v1,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "addAllPlayerHandler",
      411);
    common::milog::MiLogStream::operator()(&v1, off_2602DD00);
    common::milog::MiLogStream::~MiLogStream(&v1);
  }
  else if ( Player::addPlayerHandler<MiracleRingHandler>(this) )
  {
    common::milog::MiLogStream::create(
      &v1,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "addAllPlayerHandler",
      412);
    common::milog::MiLogStream::operator()(&v1, off_2602DD60);
    common::milog::MiLogStream::~MiLogStream(&v1);
  }
  else if ( Player::addPlayerHandler<DraftHandler>(this) )
  {
    common::milog::MiLogStream::create(
      &v1,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "addAllPlayerHandler",
      413);
    common::milog::MiLogStream::operator()(&v1, off_2602DDC0);
    common::milog::MiLogStream::~MiLogStream(&v1);
  }
  else if ( Player::addPlayerHandler<RegionSearchHandler>(this) )
  {
    common::milog::MiLogStream::create(
      &v1,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "addAllPlayerHandler",
      414);
    common::milog::MiLogStream::operator()(&v1, off_2602DE20);
    common::milog::MiLogStream::~MiLogStream(&v1);
  }
  else if ( Player::addPlayerHandler<PlayerHomeHandler>(this) )
  {
    common::milog::MiLogStream::create(
      &v1,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "addAllPlayerHandler",
      415);
    common::milog::MiLogStream::operator()(&v1, off_2602DE80);
    common::milog::MiLogStream::~MiLogStream(&v1);
  }
  else if ( Player::addPlayerHandler<FishingHandler>(this) )
  {
    common::milog::MiLogStream::create(
      &v1,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "addAllPlayerHandler",
      416);
    common::milog::MiLogStream::operator()(&v1, off_2602DEE0);
    common::milog::MiLogStream::~MiLogStream(&v1);
  }
  else if ( Player::addPlayerHandler<CustomDungeonHandler>(this) )
  {
    common::milog::MiLogStream::create(
      &v1,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "addAllPlayerHandler",
      417);
    common::milog::MiLogStream::operator()(&v1, off_2602DF40);
    common::milog::MiLogStream::~MiLogStream(&v1);
  }
  else if ( Player::addPlayerHandler<UgcHandler>(this) )
  {
    common::milog::MiLogStream::create(
      &v1,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "addAllPlayerHandler",
      418);
    common::milog::MiLogStream::operator()(&v1, off_2602DFA0);
    common::milog::MiLogStream::~MiLogStream(&v1);
  }
  else if ( Player::addPlayerHandler<PlayerGCGHandler>(this) )
  {
    common::milog::MiLogStream::create(
      &v1,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "addAllPlayerHandler",
      419);
    common::milog::MiLogStream::operator()(&v1, off_2602E000);
    common::milog::MiLogStream::~MiLogStream(&v1);
  }
};

// Line 424: range 0000000017131F28-0000000017131F7E
void __cdecl Player::clearAllPlayerHandler(Player *const this)
{
  std::map<unsigned int,std::function<int ()(std::shared_ptr<common::minet::Packet>)>>::clear(&this->process_packet_func_map_);
  std::unordered_map<unsigned int,std::function<int ()(std::string const&)>>::clear(&this->process_bytes_func_map_);
  std::vector<std::shared_ptr<PlayerHandlerBase>>::clear(&this->player_handler_vec_);
  std::set<unsigned int>::clear(&this->process_forward_client_set_);
};

// Line 437: range 0000000017131F80-000000001713238C
int32_t __cdecl Player::clearAndInit(Player *const this, int32_t retcode)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  PlayerDungeonComp *DungeonComp; // rax
  PlayerAvatarComp *AvatarComp; // rax
  PlayerMailComp *MailComp; // rax
  PlayerOfflineMsgComp *OfflineMsgComp; // rax
  PlayerOfflineOpComp *OfflineOpComp; // rax
  common::milog::MiLogStream *v10; // rdx
  int32_t v11; // r14d
  common::milog::MiLogStream *v12; // rdx
  common::milog::MiLogStream *v13; // rdx
  int32_t result; // eax
  common::milog::MiLogStream v15; // [rsp+10h] [rbp-B0h] BYREF
  char v16[144]; // [rsp+30h] [rbp-90h] BYREF

  v2 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 24 10 notify:441";
  *(_QWORD *)(v2 + 16) = Player::clearAndInit;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218103808;
  v4[536862722] = -202116109;
  proto::PlayerLogoutNotify::PlayerLogoutNotify((proto::PlayerLogoutNotify *const)(v2 + 32));
  proto::PlayerLogoutNotify::set_retcode((proto::PlayerLogoutNotify *const)(v2 + 32), retcode);
  Player::sendProto(this, (const google::protobuf::Message *)(v2 + 32));
  Player::logout(this, PlayerLogoutReq_Reason_GM_CLEAR);
  BlockDataMgr::clear(&this->block_data_mgr_);
  DungeonComp = Player::getDungeonComp(this);
  PlayerDungeonComp::clear(DungeonComp);
  AvatarComp = Player::getAvatarComp(this);
  PlayerAvatarComp::clear(AvatarComp);
  MailComp = Player::getMailComp(this);
  PlayerMailComp::clear(MailComp);
  OfflineMsgComp = Player::getOfflineMsgComp(this);
  PlayerOfflineMsgComp::clear(OfflineMsgComp);
  OfflineOpComp = Player::getOfflineOpComp(this);
  PlayerOfflineOpComp::clear(OfflineOpComp);
  Player::clearPlayer(this);
  Player::constructPlayer(this);
  if ( Player::init(this) )
  {
    common::milog::MiLogStream::create(
      &v15,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/player.cpp",
      "clearAndInit",
      472);
    v10 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(&v15, (const char (*)[12])"init failes");
    operator<<(v10, this);
    common::milog::MiLogStream::~MiLogStream(&v15);
    v11 = -1;
  }
  else if ( Player::start(this) )
  {
    common::milog::MiLogStream::create(
      &v15,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/player.cpp",
      "clearAndInit",
      478);
    v12 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(&v15, (const char (*)[13])"start failes");
    operator<<(v12, this);
    common::milog::MiLogStream::~MiLogStream(&v15);
    v11 = -1;
  }
  else if ( Player::login(this, 1, 0, 0, 0, 0) )
  {
    common::milog::MiLogStream::create(
      &v15,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/player.cpp",
      "clearAndInit",
      485);
    v13 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(&v15, (const char (*)[12])"login fails");
    operator<<(v13, this);
    common::milog::MiLogStream::~MiLogStream(&v15);
    v11 = -1;
  }
  else
  {
    v11 = 0;
  }
  proto::PlayerLogoutNotify::~PlayerLogoutNotify((proto::PlayerLogoutNotify *const)(v2 + 32));
  result = v11;
  if ( v16 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 494: range 000000001713238E-0000000017133520
int32_t __cdecl Player::fromBin(Player *const this, const proto::PlayerData *data)
{
  int32_t v2; // r14d
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::__shared_ptr_access<TracingMgr,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  bool v7; // al
  std::__shared_ptr<TracingMgr,(__gnu_cxx::_Lock_policy)2>::element_type *v8; // rsi
  __int64 v9; // rdx
  char v10; // al
  __int64 v11; // rdx
  char v12; // al
  const std::string *v13; // rax
  const std::string *v14; // rax
  const std::string *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // r14
  const std::string *v19; // rax
  int v20; // r15d
  bool is_proficient_player; // dl
  std::__shared_ptr<TracingMgr,(__gnu_cxx::_Lock_policy)2>::element_type *v22; // rax
  common::milog::MiLogStream *v23; // rax
  int v24; // r15d
  int v25; // r15d
  std::__shared_ptr<TracingMgr,(__gnu_cxx::_Lock_policy)2>::element_type *v26; // rax
  const std::string *v27; // rax
  common::milog::MiLogStream *v28; // rax
  int v29; // r15d
  std::__shared_ptr<PlayerCompBase,(__gnu_cxx::_Lock_policy)2>::element_type *v30; // rax
  int (**vptr_PlayerCompBase)(...); // rax
  const char *v32; // rax
  std::__shared_ptr<TracingMgr,(__gnu_cxx::_Lock_policy)2>::element_type *v33; // rax
  std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v34; // rax
  unsigned __int64 v35; // rdx
  unsigned int v36; // r14d
  uint32_t Uid; // eax
  int v38; // r15d
  _BOOL4 v39; // r15d
  std::__shared_ptr<TracingMgr,(__gnu_cxx::_Lock_policy)2>::element_type *v40; // rax
  std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v41; // rax
  unsigned __int64 v42; // rdx
  unsigned int v43; // r14d
  uint32_t v44; // eax
  int v45; // r15d
  uint32_t Now; // edi
  __int64 v47; // rdx
  common::milog::MiLogStream *v48; // rax
  common::milog::MiLogStream *v49; // rax
  common::milog::MiLogStream *v50; // rax
  int v52; // [rsp+0h] [rbp-580h]
  char *v53; // [rsp+8h] [rbp-578h]
  const proto::PlayerData *dataa; // [rsp+10h] [rbp-570h]
  Player *thisa; // [rsp+18h] [rbp-568h]
  int v56; // [rsp+20h] [rbp-560h]
  bool do_perf_span; // [rsp+27h] [rbp-559h]
  char *val; // [rsp+28h] [rbp-558h]
  int bin_str; // [rsp+30h] [rbp-550h]
  const std::string *bin_stra; // [rsp+30h] [rbp-550h]
  char ex; // [rsp+38h] [rbp-548h]
  const EcsBase<Player,PlayerCompBase,71>::CompBasePair *v62; // [rsp+48h] [rbp-538h]
  std::tuple_element<0,const std::pair<unsigned int,std::shared_ptr<PlayerCompBase> > >::type *comp_type; // [rsp+50h] [rbp-530h]
  std::tuple_element<1,const std::pair<unsigned int,std::shared_ptr<PlayerCompBase> > >::type *player_comp_ptr; // [rsp+58h] [rbp-528h]
  unsigned __int64 base_length; // [rsp+68h] [rbp-518h]
  EcsBase<Player,PlayerCompBase,71>::Iterator __for_begin; // [rsp+70h] [rbp-510h] BYREF
  EcsBase<Player,PlayerCompBase,71>::Iterator __for_end; // [rsp+80h] [rbp-500h] BYREF
  opentracing::v3::string_view operation_name; // [rsp+90h] [rbp-4F0h] BYREF
  common::milog::MiLogStream v69; // [rsp+A0h] [rbp-4E0h] BYREF
  google::protobuf::util::Status other; // [rsp+C0h] [rbp-4C0h] BYREF
  char v71[1168]; // [rsp+F0h] [rbp-490h] BYREF

  thisa = this;
  dataa = data;
  v3 = (unsigned __int64)v71;
  v53 = v71;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_5(1120LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "8 48 1 10 option:510 64 16 19 perf_span_proxy:496 96 16 19 perf_span_proxy:597 128 24 19 proto_j"
                        "son_data:506 192 32 18 operation_name:568 256 40 10 status:509 336 96 13 extra_bin:554 464 520 12 data_bin:521";
  *(_QWORD *)(v3 + 16) = Player::fromBin;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753551;
  v5[536862722] = -219021312;
  v5[536862723] = -219021312;
  v5[536862724] = -234881024;
  v5[536862725] = -218959118;
  v5[536862727] = -218959118;
  v5[536862729] = -218959360;
  v5[536862730] = 62194;
  v5[536862733] = -219021312;
  v5[536862734] = 62194;
  v5[536862750] = -218103808;
  v5[536862751] = -202116109;
  v5[536862752] = -202116109;
  v5[536862753] = -202116109;
  v5[536862754] = -202116109;
  v7 = 0;
  if ( std::operator!=<TracingMgr>(&ResourceBox::tracing_mgr_ptr, 0LL) )
  {
    v6 = std::__shared_ptr_access<TracingMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TracingMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)&ResourceBox::tracing_mgr_ptr);
    if ( TracingMgr::isPerfSpanEnabled(v6) )
      v7 = 1;
  }
  do_perf_span = v7;
  opentracing::v3::string_view::string_view(&operation_name, "Player::fromBin");
  v8 = std::__shared_ptr<TracingMgr,(__gnu_cxx::_Lock_policy)2>::get(&ResourceBox::tracing_mgr_ptr);
  PerfSpanProxy::PerfSpanProxy((PerfSpanProxy *const)(v3 + 64), v8, operation_name);
  v9 = proto::PlayerData::uid(dataa);
  v10 = *(_BYTE *)(((unsigned __int64)&this->uid_ >> 3) + 0x7FFF8000);
  if ( v10 != 0 && v10 <= 3 )
  {
    LOBYTE(v8) = v10 != 0;
    __asan_report_store4(&this->uid_, v8, v9);
  }
  this->uid_ = v9;
  v11 = proto::PlayerData::data_version(dataa);
  v12 = *(_BYTE *)(((unsigned __int64)&this->data_version_ >> 3) + 0x7FFF8000);
  if ( v12 != 0 && v12 <= 3 )
  {
    LOBYTE(v8) = v12 != 0;
    __asan_report_store4(&this->data_version_, v8, v11);
  }
  this->data_version_ = v11;
  v13 = proto::PlayerData::online_id[abi:cxx11](dataa);
  std::string::operator=(&this->online_id_, v13);
  v14 = proto::PlayerData::psn_id[abi:cxx11](dataa);
  std::string::operator=(&this->psn_id_, v14);
  proto::PlayerJsonData::PlayerJsonData((proto::PlayerJsonData *const)(v3 + 128));
  v15 = proto::PlayerData::json_data[abi:cxx11](dataa);
  if ( (unsigned __int8)std::string::empty(v15) != 1 )
  {
    google::protobuf::util::Status::Status((google::protobuf::util::Status *const)(v3 + 256));
    google::protobuf::util::JsonParseOptions::JsonParseOptions((google::protobuf::util::JsonParseOptions *const)(v3 + 48));
    proto::PlayerData::json_data[abi:cxx11](dataa);
    google::protobuf::util::JsonStringToMessage(&other, v52, (int)v71, (int)dataa, (int)this, v56, val, bin_str, ex);
    google::protobuf::util::Status::operator=((google::protobuf::util::Status *const)(v3 + 256), &other);
    google::protobuf::util::Status::~Status(&other);
    if ( !google::protobuf::util::Status::ok((const google::protobuf::util::Status *const)(v3 + 256)) )
    {
      common::milog::MiLogStream::create(
        &v69,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/player.cpp",
        "fromBin",
        514);
      v16 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
              &v69,
              (const char (*)[41])"[LOGIN] JsonStringToMessage failed, uid:");
      v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, &thisa->uid_);
      v18 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v17, (const char (*)[12])" json_data:");
      v19 = proto::PlayerData::json_data[abi:cxx11](dataa);
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v18, v19);
      common::milog::MiLogStream::~MiLogStream(&v69);
      v2 = -1;
      v20 = 0;
    }
    else
    {
      is_proficient_player = proto::PlayerJsonData::is_proficient_player((const proto::PlayerJsonData *const)(v3 + 128));
      Player::setIsJsonDataProficient(thisa, is_proficient_player);
      v20 = 1;
    }
    google::protobuf::util::Status::~Status((google::protobuf::util::Status *const)(v3 + 256));
    if ( v20 != 1 )
      goto LABEL_74;
  }
  proto::PlayerDataBin::PlayerDataBin((proto::PlayerDataBin *const)(v3 + 464));
  opentracing::v3::string_view::string_view(&operation_name, "data_bin.ParseFromString");
  v22 = std::__shared_ptr<TracingMgr,(__gnu_cxx::_Lock_policy)2>::get(&ResourceBox::tracing_mgr_ptr);
  PerfSpanProxy::PerfSpanProxy((PerfSpanProxy *const)(v3 + 96), v22, operation_name);
  bin_stra = proto::PlayerData::bin[abi:cxx11](dataa);
  if ( !common::tools::ZlibUtil::isCompressWithPad(bin_stra) )
  {
    if ( (unsigned __int8)google::protobuf::MessageLite::ParseFromString(v3 + 464, bin_stra) != 1 )
    {
      common::milog::MiLogStream::create(
        &v69,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/player.cpp",
        "fromBin",
        547);
      common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(&v69, (const char (*)[22])"ParseFromString fails");
      common::milog::MiLogStream::~MiLogStream(&v69);
      v2 = -1;
      v25 = 0;
      goto LABEL_26;
    }
LABEL_25:
    v25 = 1;
    goto LABEL_26;
  }
  common::tools::ZlibUtil::uncompressWithPad((std::string *)(v3 + 192), bin_stra);
  if ( (unsigned __int8)google::protobuf::MessageLite::ParseFromString(v3 + 464, v3 + 192) != 1 )
  {
    common::milog::MiLogStream::create(
      &v69,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "fromBin",
      533);
    v23 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
            &v69,
            (const char (*)[28])"ParseFromString fails, uid:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v23, &thisa->uid_);
    common::milog::MiLogStream::~MiLogStream(&v69);
    v2 = -1;
    v24 = 0;
  }
  else
  {
    v24 = 1;
  }
  std::string::~string((void *)(v3 + 192));
  if ( v24 == 1 )
    goto LABEL_25;
  v25 = 0;
LABEL_26:
  PerfSpanProxy::~PerfSpanProxy((PerfSpanProxy *const)(v3 + 96));
  if ( v25 == 1 )
  {
    proto::PlayerExtraBinData::PlayerExtraBinData((proto::PlayerExtraBinData *const)(v3 + 336));
    opentracing::v3::string_view::string_view(&operation_name, "extra_bin.ParseFromString");
    v26 = std::__shared_ptr<TracingMgr,(__gnu_cxx::_Lock_policy)2>::get(&ResourceBox::tracing_mgr_ptr);
    PerfSpanProxy::PerfSpanProxy((PerfSpanProxy *const)(v3 + 96), v26, operation_name);
    v27 = proto::PlayerData::extra_bin_data[abi:cxx11](dataa);
    if ( (unsigned __int8)google::protobuf::MessageLite::ParseFromString(v3 + 336, v27) != 1 )
    {
      common::milog::MiLogStream::create(
        &v69,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/player.cpp",
        "fromBin",
        560);
      v28 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
              &v69,
              (const char (*)[37])"extra_bin ParseFromString fail, uid:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v28, &thisa->uid_);
      common::milog::MiLogStream::~MiLogStream(&v69);
      v2 = -1;
      v29 = 0;
    }
    else
    {
      v29 = 1;
    }
    PerfSpanProxy::~PerfSpanProxy((PerfSpanProxy *const)(v3 + 96));
    if ( v29 == 1 )
    {
      EcsBase<Player,PlayerCompBase,71u>::begin((const EcsBase<Player,PlayerCompBase,71> *const)&__for_begin);
      EcsBase<Player,PlayerCompBase,71u>::end((const EcsBase<Player,PlayerCompBase,71> *const)&__for_end);
      while ( EcsBase<Player,PlayerCompBase,71u>::Iterator::operator!=(&__for_begin, &__for_end) )
      {
        v62 = EcsBase<Player,PlayerCompBase,71u>::Iterator::operator*(&__for_begin);
        comp_type = (std::tuple_element<0,const std::pair<unsigned int,std::shared_ptr<PlayerCompBase> > >::type *)std::get<0ul,unsigned int,std::shared_ptr<PlayerCompBase>>(v62);
        player_comp_ptr = (std::tuple_element<1,const std::pair<unsigned int,std::shared_ptr<PlayerCompBase> > >::type *)std::get<1ul,unsigned int,std::shared_ptr<PlayerCompBase>>(v62);
        std::string::basic_string(v3 + 192);
        if ( do_perf_span )
        {
          v30 = std::__shared_ptr<PlayerCompBase,(__gnu_cxx::_Lock_policy)2>::get(player_comp_ptr);
          if ( !v30 )
          {
            __asan_handle_no_return();
            __cxa_bad_typeid();
          }
          if ( *(_BYTE *)(((unsigned __int64)v30 >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          vptr_PlayerCompBase = v30->_vptr_PlayerCompBase;
          if ( *(_BYTE *)(((unsigned __int64)(vptr_PlayerCompBase - 1) >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          v32 = std::type_info::name((const std::type_info *const)*(vptr_PlayerCompBase - 1));
          std::string::operator=(v3 + 192, v32);
        }
        base_length = std::string::size(v3 + 192);
        if ( do_perf_span )
          std::string::operator+=(v3 + 192, "::fromBin");
        opentracing::v3::string_view::string_view(&operation_name, (const std::string *)(v3 + 192));
        v33 = std::__shared_ptr<TracingMgr,(__gnu_cxx::_Lock_policy)2>::get(&ResourceBox::tracing_mgr_ptr);
        PerfSpanProxy::PerfSpanProxy((PerfSpanProxy *const)(v3 + 96), v33, operation_name);
        v34 = std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false> *const)player_comp_ptr);
        if ( *(_BYTE *)(((unsigned __int64)v34 >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v35 = (unsigned __int64)(v34->_vptr_PlayerCompBase + 2);
        if ( *(_BYTE *)((v35 >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        if ( (*(unsigned int (__fastcall **)(std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, unsigned __int64))v35)(
               v34,
               v3 + 464) )
        {
          common::milog::MiLogStream::create(
            &v69,
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/player/player.cpp",
            "fromBin",
            587);
          if ( *(_BYTE *)(((unsigned __int64)comp_type >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)comp_type & 7) + 3) >= *(_BYTE *)(((unsigned __int64)comp_type >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(comp_type);
          }
          v36 = *comp_type;
          Uid = Player::getUid(thisa);
          common::milog::MiLogStream::operator()(&v69, "fromBin for uid=%u comp_type=%u failed", Uid, v36);
          common::milog::MiLogStream::~MiLogStream(&v69);
          v2 = -1;
          v38 = 0;
        }
        else
        {
          v38 = 1;
        }
        PerfSpanProxy::~PerfSpanProxy((PerfSpanProxy *const)(v3 + 96));
        if ( v38 == 1 )
        {
          if ( do_perf_span )
          {
            std::string::resize(v3 + 192, base_length);
            std::string::operator+=(v3 + 192, "::fromExtraBin");
          }
          opentracing::v3::string_view::string_view(&operation_name, (const std::string *)(v3 + 192));
          v40 = std::__shared_ptr<TracingMgr,(__gnu_cxx::_Lock_policy)2>::get(&ResourceBox::tracing_mgr_ptr);
          PerfSpanProxy::PerfSpanProxy((PerfSpanProxy *const)(v3 + 96), v40, operation_name);
          v41 = std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false> *const)player_comp_ptr);
          if ( *(_BYTE *)(((unsigned __int64)v41 >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          v42 = (unsigned __int64)(v41->_vptr_PlayerCompBase + 4);
          if ( *(_BYTE *)((v42 >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          if ( (*(unsigned int (__fastcall **)(std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, unsigned __int64))v42)(
                 v41,
                 v3 + 336) )
          {
            common::milog::MiLogStream::create(
              &v69,
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/player/player.cpp",
              "fromBin",
              601);
            if ( *(_BYTE *)(((unsigned __int64)comp_type >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)comp_type & 7) + 3) >= *(_BYTE *)(((unsigned __int64)comp_type >> 3)
                                                                          + 0x7FFF8000) )
            {
              __asan_report_load4(comp_type);
            }
            v43 = *comp_type;
            v44 = Player::getUid(thisa);
            common::milog::MiLogStream::operator()(&v69, "fromExtraBin for uid=%u comp_type=%u failed", v44, v43);
            common::milog::MiLogStream::~MiLogStream(&v69);
            v2 = -1;
            v45 = 0;
          }
          else
          {
            v45 = 1;
          }
          PerfSpanProxy::~PerfSpanProxy((PerfSpanProxy *const)(v3 + 96));
          v39 = v45 == 1;
        }
        else
        {
          v39 = 0;
        }
        std::string::~string((void *)(v3 + 192));
        if ( !v39 )
          goto LABEL_72;
        EcsBase<Player,PlayerCompBase,71u>::Iterator::operator++(&__for_begin);
      }
      Now = common::tools::TimeUtils::getNow();
      v47 = (*(_BYTE *)(((unsigned __int64)&thisa->last_from_bin_time_ >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)((((_BYTE)thisa - 28) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&thisa->last_from_bin_time_ >> 3) + 0x7FFF8000));
      if ( (_BYTE)v47 )
      {
        Now = (_DWORD)thisa + 996;
        __asan_report_store4(&thisa->last_from_bin_time_, (((_BYTE)thisa - 28) & 7u) + 3, v47);
      }
      thisa->last_from_bin_time_ = Now;
      common::milog::MiLogStream::create(
        &v69,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/player.cpp",
        "fromBin",
        609);
      v48 = common::milog::MiLogStream::operator<<<char [51],(char *[51])0>(
              &v69,
              (const char (*)[51])"[DATA_VERSION] player from bin succ, data_version:");
      v49 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v48, &thisa->data_version_);
      v50 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v49, (const char (*)[7])", uid:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v50, &thisa->uid_);
      common::milog::MiLogStream::~MiLogStream(&v69);
      v2 = 0;
    }
LABEL_72:
    proto::PlayerExtraBinData::~PlayerExtraBinData((proto::PlayerExtraBinData *const)(v3 + 336));
  }
  proto::PlayerDataBin::~PlayerDataBin((proto::PlayerDataBin *const)(v3 + 464));
LABEL_74:
  proto::PlayerJsonData::~PlayerJsonData((proto::PlayerJsonData *const)(v3 + 128));
  PerfSpanProxy::~PerfSpanProxy((PerfSpanProxy *const)(v3 + 64));
  if ( v53 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF801C) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8034) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8078) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8080) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8088) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    __asan_stack_free_5(v3, 1120LL, v53);
  }
  return v2;
};

// Line 614: range 0000000017133522-0000000017133E2B
int32_t __cdecl Player::fillPlayerDataProto(
        Player *const this,
        proto::PlayerData *data,
        proto::PlayerDataBin *data_bin,
        proto::PlayerExtraBinData *extra_bin,
        proto::PlayerBeforeLoginBinData *before_login_bin)
{
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  PlayerBasicComp *BasicComp; // rax
  uint32_t CurLoginTime; // edx
  PlayerBasicComp *v10; // rax
  uint32_t Level; // edx
  PlayerBasicComp *v12; // rax
  uint32_t Exp; // edx
  PlayerBasicComp *v14; // rax
  const std::string *v15; // rdx
  PlayerBasicComp *v16; // rax
  bool isProficientPlayer; // al
  common::milog::MiLogStream *v18; // r14
  int32_t v19; // r14d
  std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  unsigned __int64 v21; // rdx
  __int64 v22; // rcx
  std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v23; // rax
  unsigned __int64 v24; // rdx
  __int64 v25; // rcx
  uint32_t Uid; // eax
  int32_t result; // eax
  int v28; // [rsp+0h] [rbp-1D0h]
  proto::PlayerBeforeLoginBinData *before_login_binb; // [rsp+8h] [rbp-1C8h]
  int extra_bina; // [rsp+10h] [rbp-1C0h]
  proto::PlayerExtraBinData *extra_binb; // [rsp+10h] [rbp-1C0h]
  char data_bina; // [rsp+18h] [rbp-1B8h]
  proto::PlayerDataBin *data_binb; // [rsp+18h] [rbp-1B8h]
  proto::PlayerData *dataa; // [rsp+20h] [rbp-1B0h]
  Player *thisa; // [rsp+28h] [rbp-1A8h]
  std::allocator<char> __a; // [rsp+3Bh] [rbp-195h] BYREF
  unsigned int val; // [rsp+3Ch] [rbp-194h] BYREF
  Player *__for_range; // [rsp+40h] [rbp-190h]
  const std::pair<unsigned int,std::shared_ptr<PlayerCompBase> > *v40; // [rsp+48h] [rbp-188h]
  std::tuple_element<0,const std::pair<unsigned int,std::shared_ptr<PlayerCompBase> > >::type *comp_type; // [rsp+50h] [rbp-180h]
  std::tuple_element<1,const std::pair<unsigned int,std::shared_ptr<PlayerCompBase> > >::type *player_comp_ptr; // [rsp+58h] [rbp-178h]
  EcsBase<Player,PlayerCompBase,71>::Iterator __for_begin; // [rsp+60h] [rbp-170h] BYREF
  EcsBase<Player,PlayerCompBase,71>::Iterator __for_end; // [rsp+70h] [rbp-160h] BYREF
  common::milog::MiLogStream v45; // [rsp+80h] [rbp-150h] BYREF
  char v46[304]; // [rsp+A0h] [rbp-130h] BYREF

  data_bina = (char)data_bin;
  extra_bina = (int)extra_bin;
  v5 = (unsigned __int64)v46;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_2(256LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "4 32 4 11 options:627 48 24 19 proto_json_data:624 112 32 15 json_string:626 176 40 14 status_ret:631";
  *(_QWORD *)(v5 + 16) = Player::fillPlayerDataProto;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = 61956;
  v7[536862722] = -218959360;
  v7[536862723] = 62194;
  v7[536862724] = -219021312;
  v7[536862725] = 62194;
  v7[536862726] = -218103808;
  v7[536862727] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)&this->uid_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->uid_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->uid_);
  }
  proto::PlayerData::set_uid(data, this->uid_);
  BasicComp = Player::getBasicComp(this);
  CurLoginTime = PlayerBasicComp::getCurLoginTime(BasicComp);
  proto::PlayerData::set_last_login_time(data, CurLoginTime);
  v10 = Player::getBasicComp(this);
  Level = PlayerBasicComp::getLevel(v10);
  proto::PlayerData::set_level(data, Level);
  v12 = Player::getBasicComp(this);
  Exp = PlayerBasicComp::getExp(v12);
  proto::PlayerData::set_exp(data, Exp);
  v14 = Player::getBasicComp(this);
  v15 = PlayerBasicComp::getNickName[abi:cxx11](v14);
  proto::PlayerData::set_nickname(data, v15);
  if ( *(_BYTE *)(((unsigned __int64)&this->data_version_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->data_version_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->data_version_);
  }
  proto::PlayerData::set_data_version(data, this->data_version_);
  proto::PlayerData::set_online_id(data, &this->online_id_);
  proto::PlayerData::set_psn_id(data, &this->psn_id_);
  proto::PlayerJsonData::PlayerJsonData((proto::PlayerJsonData *const)(v5 + 48));
  v16 = Player::getBasicComp(this);
  isProficientPlayer = PlayerBasicComp::isProficientPlayer(v16);
  proto::PlayerJsonData::set_is_proficient_player((proto::PlayerJsonData *const)(v5 + 48), isProficientPlayer);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v5 + 112), byte_25FB4240, &__a);
  std::allocator<char>::~allocator(&__a);
  google::protobuf::util::JsonPrintOptions::JsonPrintOptions((google::protobuf::util::JsonPrintOptions *const)(v5 + 32));
  *(_BYTE *)(v5 + 32) = 1;
  *(_BYTE *)(v5 + 33) = 1;
  *(_BYTE *)(v5 + 35) = 1;
  google::protobuf::util::MessageToJsonString(
    (google::protobuf::util::Status *)(v5 + 176),
    (google::protobuf::Message *)(v5 + 48),
    v28,
    before_login_bin,
    extra_bina,
    data_bina,
    (int)data,
    this);
  if ( !google::protobuf::util::Status::ok((const google::protobuf::util::Status *const)(v5 + 176)) )
  {
    common::milog::MiLogStream::create(
      &v45,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "fillPlayerDataProto",
      634);
    v18 = common::milog::MiLogStream::operator<<<char [51],(char *[51])0>(
            &v45,
            (const char (*)[51])"player_bin_data to json_string failed player_uid: ");
    val = Player::getUid(thisa);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, &val);
    common::milog::MiLogStream::~MiLogStream(&v45);
    v19 = -1;
  }
  else
  {
    proto::PlayerData::set_json_data(dataa, (const std::string *)(v5 + 112));
    __for_range = thisa;
    EcsBase<Player,PlayerCompBase,71u>::begin((const EcsBase<Player,PlayerCompBase,71> *const)&__for_begin);
    EcsBase<Player,PlayerCompBase,71u>::end((const EcsBase<Player,PlayerCompBase,71> *const)&__for_end);
    while ( 1 )
    {
      if ( !EcsBase<Player,PlayerCompBase,71u>::Iterator::operator!=(&__for_begin, &__for_end) )
      {
        if ( Player::toBeforeLoginBin(thisa, before_login_binb) )
        {
          common::milog::MiLogStream::create(
            &v45,
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/player/player.cpp",
            "fillPlayerDataProto",
            657);
          Uid = Player::getUid(thisa);
          common::milog::MiLogStream::operator()(&v45, "toBeforeLoginBin, uid=%u", Uid);
          common::milog::MiLogStream::~MiLogStream(&v45);
          v19 = -1;
        }
        else
        {
          v19 = 0;
        }
        goto LABEL_32;
      }
      v40 = EcsBase<Player,PlayerCompBase,71u>::Iterator::operator*(&__for_begin);
      comp_type = (std::tuple_element<0,const std::pair<unsigned int,std::shared_ptr<PlayerCompBase> > >::type *)std::get<0ul,unsigned int,std::shared_ptr<PlayerCompBase>>(v40);
      player_comp_ptr = (std::tuple_element<1,const std::pair<unsigned int,std::shared_ptr<PlayerCompBase> > >::type *)std::get<1ul,unsigned int,std::shared_ptr<PlayerCompBase>>(v40);
      v20 = std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false> *const)player_comp_ptr);
      if ( *(_BYTE *)(((unsigned __int64)v20 >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v21 = (unsigned __int64)(v20->_vptr_PlayerCompBase + 3);
      if ( *(_BYTE *)((v21 >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      if ( (*(unsigned int (__fastcall **)(std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, proto::PlayerDataBin *))v21)(
             v20,
             data_binb) )
      {
        common::milog::MiLogStream::create(
          &v45,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/player.cpp",
          "fillPlayerDataProto",
          644);
        v22 = Player::getUid(thisa);
        if ( *(_BYTE *)(((unsigned __int64)comp_type >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)comp_type & 7) + 3) >= *(_BYTE *)(((unsigned __int64)comp_type >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(comp_type);
        }
        common::milog::MiLogStream::operator()(&v45, "toBin type=%u failed, uid=%u", *comp_type, v22);
        common::milog::MiLogStream::~MiLogStream(&v45);
        v19 = -1;
        goto LABEL_32;
      }
      v23 = std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false> *const)player_comp_ptr);
      if ( *(_BYTE *)(((unsigned __int64)v23 >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v24 = (unsigned __int64)(v23->_vptr_PlayerCompBase + 5);
      if ( *(_BYTE *)((v24 >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      if ( (*(unsigned int (__fastcall **)(std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, proto::PlayerExtraBinData *))v24)(
             v23,
             extra_binb) )
      {
        break;
      }
      EcsBase<Player,PlayerCompBase,71u>::Iterator::operator++(&__for_begin);
    }
    common::milog::MiLogStream::create(
      &v45,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "fillPlayerDataProto",
      649);
    v25 = Player::getUid(thisa);
    if ( *(_BYTE *)(((unsigned __int64)comp_type >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)comp_type & 7) + 3) >= *(_BYTE *)(((unsigned __int64)comp_type >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(comp_type);
    }
    common::milog::MiLogStream::operator()(&v45, "toExtraBin type=%u failed, uid=%u", *comp_type, v25);
    common::milog::MiLogStream::~MiLogStream(&v45);
    v19 = -1;
  }
LABEL_32:
  google::protobuf::util::Status::~Status((google::protobuf::util::Status *const)(v5 + 176));
  std::string::~string((void *)(v5 + 112));
  proto::PlayerJsonData::~PlayerJsonData((proto::PlayerJsonData *const)(v5 + 48));
  result = v19;
  if ( v46 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0LL;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 665: range 0000000017133E2C-000000001713415C
int32_t __cdecl Player::toBeforeLoginBin(Player *const this, proto::PlayerBeforeLoginBinData *before_login_bin)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // rbx
  PlayerQuestComp *QuestComp; // rax
  unsigned int *v6; // rax
  uint32_t *v7; // rdx
  common::milog::MiLogStream *v8; // r14
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // r14
  int32_t result; // eax
  int val; // [rsp+10h] [rbp-110h] BYREF
  uint32_t quest_res_collection_id; // [rsp+14h] [rbp-10Ch]
  std::set<unsigned int>::iterator __for_begin; // [rsp+18h] [rbp-108h] BYREF
  std::set<unsigned int>::iterator __for_end; // [rsp+20h] [rbp-100h] BYREF
  std::set<unsigned int> *__for_range; // [rsp+28h] [rbp-F8h]
  common::milog::MiLogStream v17; // [rsp+30h] [rbp-F0h] BYREF
  char v18[208]; // [rsp+50h] [rbp-D0h] BYREF

  v2 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(160LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 16 9 timer:666 80 48 35 finish_quest_res_collection_set:669";
  *(_QWORD *)(v2 + 16) = Player::toBeforeLoginBin;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61937;
  v4[536862722] = 62194;
  v4[536862724] = -202116109;
  common::tools::TimeUtils::Timer::Timer((common::tools::TimeUtils::Timer *const)(v2 + 48));
  std::set<unsigned int>::set((std::set<unsigned int> *const)(v2 + 80));
  QuestComp = Player::getQuestComp(this);
  PlayerQuestComp::getAllFinishQuestResCollection(QuestComp, (std::set<unsigned int> *)(v2 + 80));
  __for_range = (std::set<unsigned int> *)(v2 + 80);
  __for_begin._M_node = std::set<unsigned int>::begin((const std::set<unsigned int> *const)(v2 + 80))._M_node;
  __for_end._M_node = std::set<unsigned int>::end((const std::set<unsigned int> *const)(v2 + 80))._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v6 = (unsigned int *)std::_Rb_tree_const_iterator<unsigned int>::operator*(&__for_begin);
    v7 = v6;
    if ( *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v6 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v6);
    }
    quest_res_collection_id = *v7;
    proto::PlayerBeforeLoginBinData::add_finish_quest_res_collection(before_login_bin, quest_res_collection_id);
    std::_Rb_tree_const_iterator<unsigned int>::operator++(&__for_begin);
  }
  common::milog::MiLogStream::create(
    &v17,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/player/player.cpp",
    "toBeforeLoginBin",
    677);
  v8 = common::milog::MiLogStream::operator<<<char [65],(char *[65])0>(
         &v17,
         (const char (*)[65])"[BeforeLoginBin] finish construct PlayerBeforeLoginBinData. use ");
  val = common::tools::TimeUtils::Timer::time((const common::tools::TimeUtils::Timer *const)(v2 + 48));
  v9 = common::milog::MiLogStream::operator<<<int,(int *)0>(v8, &val);
  v10 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v9, (const char (*)[12])off_2602EA60);
  __for_end._M_node = (std::_Rb_tree_const_iterator<unsigned int>::_Base_ptr)std::set<unsigned int>::size((const std::set<unsigned int> *const)(v2 + 80));
  common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v10, (const unsigned __int64 *)&__for_end);
  common::milog::MiLogStream::~MiLogStream(&v17);
  std::set<unsigned int>::~set((std::set<unsigned int> *const)(v2 + 80));
  common::tools::TimeUtils::Timer::~Timer((common::tools::TimeUtils::Timer *const)(v2 + 48));
  result = 0;
  if ( v18 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 683: range 000000001713415E-000000001713485A
// local variable allocation has failed, the output may be wrong!
void __cdecl Player::monitorPlayerBin(Player *const this, const std::string *bin_str)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  uint32_t warn_bin_len; // esi
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  __int64 warn_sum_bin_len; // r14
  uint32_t LastSaveBlockBinSize; // esi
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rdx
  uint32_t *p_max_sum_bin_len; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rdx
  uint32_t *v15; // rax
  __int64 max_sum_bin_len; // r14
  uint32_t v17; // esi
  MonitorReport *v18; // r14
  MonitorReport *v19; // r14
  std::string bin_stra; // [rsp+0h] [rbp-B0h] OVERLAPPED BYREF
  common::milog::MiLogStream v21; // [rsp+20h] [rbp-90h] BYREF
  char v22[112]; // [rsp+40h] [rbp-70h] BYREF

  bin_stra._M_string_length = (std::string::size_type)this;
  bin_stra._M_dataplus._M_p = (std::string::pointer)bin_str;
  v2 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 14 config_ptr:685";
  *(_QWORD *)(v2 + 16) = Player::monitorPlayerBin;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v2 + 32));
  *((_DWORD *)&bin_stra._anon_0._M_allocated_capacity + 2) = std::string::length(bin_stra._M_dataplus._M_p);
  Player::setLastSavePlayerBinSize(
    (Player *const)bin_stra._M_string_length,
    *((uint32_t *)&bin_stra._anon_0._M_allocated_capacity + 2));
  *((_DWORD *)&bin_stra._anon_0._M_allocated_capacity + 3) = *((_DWORD *)&bin_stra._anon_0._M_allocated_capacity + 2)
                                                           + Player::getLastSaveBlockBinSize((const Player *const)bin_stra._M_string_length);
  v5 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&v5->warn_bin_len >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v5->warn_bin_len >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v5->warn_bin_len);
  }
  if ( *((_DWORD *)&bin_stra._anon_0._M_allocated_capacity + 2) > v5->warn_bin_len )
  {
    common::milog::MiLogStream::create(
      &v21,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "monitorPlayerBin",
      691);
    v6 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    if ( *(_BYTE *)(((unsigned __int64)&v6->warn_bin_len >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&v6->warn_bin_len >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&v6->warn_bin_len);
    }
    warn_bin_len = v6->warn_bin_len;
    if ( *(_BYTE *)(((bin_stra._M_string_length + 64) >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((bin_stra._M_string_length + 64) >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(bin_stra._M_string_length + 64);
    }
    common::milog::MiLogStream::operator()(
      &v21,
      "uid=%u, bin.length=%u is very long, limit=%u",
      *(unsigned int *)(bin_stra._M_string_length + 64),
      *((unsigned int *)&bin_stra._anon_0._M_allocated_capacity + 2),
      warn_bin_len);
    common::milog::MiLogStream::~MiLogStream(&v21);
  }
  v8 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&v8->warn_sum_bin_len >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v8->warn_sum_bin_len >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v8->warn_sum_bin_len);
  }
  if ( *((_DWORD *)&bin_stra._anon_0._M_allocated_capacity + 3) > v8->warn_sum_bin_len )
  {
    common::milog::MiLogStream::create(
      &v21,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "monitorPlayerBin",
      695);
    v9 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    if ( *(_BYTE *)(((unsigned __int64)&v9->warn_sum_bin_len >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&v9->warn_sum_bin_len >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&v9->warn_sum_bin_len);
    }
    warn_sum_bin_len = v9->warn_sum_bin_len;
    LastSaveBlockBinSize = Player::getLastSaveBlockBinSize((const Player *const)bin_stra._M_string_length);
    if ( *(_BYTE *)(((bin_stra._M_string_length + 64) >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((bin_stra._M_string_length + 64) >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(bin_stra._M_string_length + 64);
    }
    common::milog::MiLogStream::operator()(
      &v21,
      "uid=%u, bin.length=%u last save block length=%u bin_sum_size=%u is very long, bin_sum limit=%u",
      *(unsigned int *)(bin_stra._M_string_length + 64),
      *((unsigned int *)&bin_stra._anon_0._M_allocated_capacity + 2),
      LastSaveBlockBinSize,
      *((unsigned int *)&bin_stra._anon_0._M_allocated_capacity + 3),
      warn_sum_bin_len);
    common::milog::MiLogStream::~MiLogStream(&v21);
  }
  v12 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
  p_max_sum_bin_len = &v12->max_sum_bin_len;
  if ( *(_BYTE *)(((unsigned __int64)p_max_sum_bin_len >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)p_max_sum_bin_len & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_max_sum_bin_len >> 3)
                                                                        + 0x7FFF8000) )
  {
    __asan_report_load4(p_max_sum_bin_len);
  }
  if ( *((_DWORD *)&bin_stra._anon_0._M_allocated_capacity + 3) > v12->max_sum_bin_len )
  {
    common::milog::MiLogStream::create(
      &v21,
      &common::milog::MiLogDefault::default_log_obj_,
      6u,
      "./src/player/player.cpp",
      "monitorPlayerBin",
      700);
    v14 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    v15 = &v14->max_sum_bin_len;
    if ( *(_BYTE *)(((unsigned __int64)v15 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v15 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v15 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v15);
    }
    max_sum_bin_len = v14->max_sum_bin_len;
    v17 = Player::getLastSaveBlockBinSize((const Player *const)bin_stra._M_string_length);
    if ( *(_BYTE *)(((bin_stra._M_string_length + 64) >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((bin_stra._M_string_length + 64) >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(bin_stra._M_string_length + 64);
    }
    common::milog::MiLogStream::operator()(
      &v21,
      "uid=%u, bin.length=%u last save block length=%u bin_sum_size=%u is more than max, bin_sum max=%u",
      *(unsigned int *)(bin_stra._M_string_length + 64),
      *((unsigned int *)&bin_stra._anon_0._M_allocated_capacity + 2),
      v17,
      *((unsigned int *)&bin_stra._anon_0._M_allocated_capacity + 3),
      max_sum_bin_len);
    common::milog::MiLogStream::~MiLogStream(&v21);
  }
  v18 = std::__shared_ptr_access<MonitorReport,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<MonitorReport,(__gnu_cxx::_Lock_policy)2,false,false> *const)&ResourceBox::monitor_report_ptr);
  std::allocator<char>::allocator((char *)&bin_stra._anon_0._M_allocated_capacity + 7);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)&v21,
    byte_25FB4240,
    (const std::allocator<char> *)&bin_stra._anon_0._M_allocated_capacity + 7);
  MonitorReport::addValue(
    v18,
    MONITOR_BIN_PLAYER_SIZE,
    *((int32_t *)&bin_stra._anon_0._M_allocated_capacity + 2),
    bin_stra);
  std::string::~string(&v21);
  std::allocator<char>::~allocator((char *)&bin_stra._anon_0._M_allocated_capacity + 7);
  v19 = std::__shared_ptr_access<MonitorReport,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<MonitorReport,(__gnu_cxx::_Lock_policy)2,false,false> *const)&ResourceBox::monitor_report_ptr);
  std::allocator<char>::allocator((char *)&bin_stra._anon_0._M_allocated_capacity + 7);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)&v21,
    byte_25FB4240,
    (const std::allocator<char> *)&bin_stra._anon_0._M_allocated_capacity + 7);
  MonitorReport::addValue(
    v19,
    MONITOR_BIN_SUM_SIZE,
    *((int32_t *)&bin_stra._anon_0._M_allocated_capacity + 3),
    bin_stra);
  std::string::~string(&v21);
  std::allocator<char>::~allocator((char *)&bin_stra._anon_0._M_allocated_capacity + 7);
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v2 + 32));
  if ( v22 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 710: range 000000001713485C-0000000017134B6C
int32_t __cdecl Player::internalSaveToDb(Player *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  PlayerBasicComp *BasicComp; // rax
  google::protobuf::uint32 PlayerStatId; // eax
  proto::PlayerData *v6; // rdx
  common::milog::MiLogStream *v7; // rdx
  int32_t v8; // r14d
  int v9; // eax
  uint32_t uid; // eax
  common::milog::MiLogStream *v11; // rdx
  int32_t result; // eax
  common::milog::MiLogStream v13; // [rsp+20h] [rbp-B0h] BYREF
  char v14[144]; // [rsp+40h] [rbp-90h] BYREF
  std::pair<unsigned int,unsigned int> last_gate_session; // 0:rsi.8

  v1 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(96LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 32 7 req:711";
  *(_QWORD *)(v1 + 16) = Player::internalSaveToDb;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450888) = -202116109;
  proto::SavePlayerDataReq::SavePlayerDataReq((proto::SavePlayerDataReq *const)(v1 + 32));
  BasicComp = Player::getBasicComp(this);
  PlayerStatId = PlayerBasicComp::getPlayerStatId(BasicComp);
  proto::SavePlayerDataReq::set_save_stat_id((proto::SavePlayerDataReq *const)(v1 + 32), PlayerStatId);
  v6 = proto::SavePlayerDataReq::mutable_player_data((proto::SavePlayerDataReq *const)(v1 + 32));
  if ( Player::toBin(this, v6) )
  {
    common::milog::MiLogStream::create(
      &v13,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "internalSaveToDb",
      716);
    v7 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(&v13, (const char (*)[12])"toBin fails");
    operator<<(v7, this);
    common::milog::MiLogStream::~MiLogStream(&v13);
    v8 = -1;
  }
  else
  {
    v9 = *(unsigned __int8 *)(((unsigned __int64)&this->uid_ >> 3) + 0x7FFF8000);
    if ( (_BYTE)v9 != 0 && (char)v9 <= 3 )
      __asan_report_load4(&this->uid_);
    uid = this->uid_;
    if ( *(_BYTE *)(((unsigned __int64)&this->last_gate_session_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    last_gate_session = this->last_gate_session_;
    if ( Player::saveToDb(uid, last_gate_session, (proto::SavePlayerDataReq *)(v1 + 32)) )
    {
      common::milog::MiLogStream::create(
        &v13,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/player.cpp",
        "internalSaveToDb",
        722);
      v11 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              &v13,
              (const char (*)[27])"work thread saveToDb fails");
      operator<<(v11, this);
      common::milog::MiLogStream::~MiLogStream(&v13);
      v8 = -1;
    }
    else
    {
      v8 = 0;
    }
  }
  proto::SavePlayerDataReq::~SavePlayerDataReq((proto::SavePlayerDataReq *const)(v1 + 32));
  result = v8;
  if ( v14 == (char *)v1 )
  {
    *(_DWORD *)((v1 >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 730: range 0000000017134B6E-000000001713541E
// local variable allocation has failed, the output may be wrong!
int32_t __cdecl Player::internalAsyncSaveToDb(Player *const this)
{
  int32_t v1; // r14d
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  _BOOL4 v5; // r15d
  std::__shared_ptr_access<PlayerSaveInfoContext,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  PlayerBasicComp *BasicComp; // rax
  google::protobuf::uint32 PlayerStatId; // eax
  proto::PlayerExtraBinData *p_extra_bin; // r15
  proto::PlayerDataBin *p_data_bin; // rdx
  common::milog::MiLogStream *v11; // r14
  int v12; // r15d
  GameserverService *v13; // r15
  const std::_Placeholder<2> *v14; // r9
  const std::_Placeholder<2> *v15; // r8
  common::milog::MiLogStream *v16; // r15
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // r15
  common::milog::MiLogStream *v19; // rax
  int32_t result; // eax
  AsyncTaskFunc v21; // [rsp+0h] [rbp-1C0h]
  AsyncTaskCallbackFunc v22; // [rsp+20h] [rbp-1A0h] OVERLAPPED BYREF
  proto::PlayerData *data; // [rsp+40h] [rbp-180h]
  std::_Bind<int (*(std::_Placeholder<1>,std::_Placeholder<2>))(std::shared_ptr<common::minet::Packet>,std::any)> v24; // [rsp+50h] [rbp-170h] BYREF
  std::_Bind<int (*(std::_Placeholder<1>,std::_Placeholder<2>,std::_Placeholder<3>))(std::shared_ptr<common::minet::Packet>,std::any,int)> p___f; // [rsp+60h] [rbp-160h] BYREF
  std::shared_ptr<common::minet::Packet> v26; // [rsp+70h] [rbp-150h] BYREF
  std::any context; // [rsp+80h] [rbp-140h] BYREF
  std::function<int(std::shared_ptr<common::minet::Packet>,std::any)> v28; // [rsp+90h] [rbp-130h] BYREF
  common::milog::MiLogStream packet_ptr; // [rsp+B0h] [rbp-110h] BYREF
  char v30[240]; // [rsp+D0h] [rbp-F0h] BYREF

  v21._M_invoker = (std::function<int(std::shared_ptr<common::minet::Packet>,std::any)>::_Invoker_type)this;
  v2 = (unsigned __int64)v30;
  *(_QWORD *)&v21._M_functor._M_pod_data[8] = v30;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "4 32 16 9 timer:733 64 16 15 context_ptr:734 96 16 14 packet_ptr:754 128 24 10 notify:753";
  *(_QWORD *)(v2 + 16) = Player::internalAsyncSaveToDb;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862724] = -218103808;
  v4[536862725] = -202116109;
  common::tools::TimeUtils::Timer::Timer((common::tools::TimeUtils::Timer *const)(v2 + 32));
  common::tools::perf::make_shared<PlayerSaveInfoContext>();
  if ( std::operator==<PlayerSaveInfoContext>((const std::shared_ptr<PlayerSaveInfoContext> *)(v2 + 64), 0LL) )
  {
    common::milog::MiLogStream::create(
      &packet_ptr,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "internalAsyncSaveToDb",
      737);
    common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
      &packet_ptr,
      (const char (*)[42])"PlayerSaveInfoContext context_ptr is null");
    common::milog::MiLogStream::~MiLogStream(&packet_ptr);
    v1 = -1;
    v5 = 0;
  }
  else
  {
    v6 = std::__shared_ptr_access<PlayerSaveInfoContext,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerSaveInfoContext,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
    std::pair<unsigned int,unsigned int>::operator=(&v6->last_gate_session, &this->last_gate_session_);
    v22._M_invoker = (std::function<int(std::shared_ptr<common::minet::Packet>,std::any,int)>::_Invoker_type)std::__shared_ptr_access<PlayerSaveInfoContext,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerSaveInfoContext,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
    BasicComp = Player::getBasicComp(this);
    PlayerStatId = PlayerBasicComp::getPlayerStatId(BasicComp);
    proto::SavePlayerDataReq::set_save_stat_id((proto::SavePlayerDataReq *const)v22._M_invoker, PlayerStatId);
    data = proto::SavePlayerDataReq::mutable_player_data((proto::SavePlayerDataReq *const)v22._M_invoker);
    v21._M_manager = (std::_Function_base::_Manager_type)&std::__shared_ptr_access<PlayerSaveInfoContext,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerSaveInfoContext,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64))->before_login_bin;
    p_extra_bin = &std::__shared_ptr_access<PlayerSaveInfoContext,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerSaveInfoContext,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64))->extra_bin;
    p_data_bin = &std::__shared_ptr_access<PlayerSaveInfoContext,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerSaveInfoContext,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64))->data_bin;
    if ( Player::fillPlayerDataProto(
           this,
           data,
           p_data_bin,
           p_extra_bin,
           (proto::PlayerBeforeLoginBinData *)v21._M_manager) )
    {
      common::milog::MiLogStream::create(
        &packet_ptr,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/player.cpp",
        "internalAsyncSaveToDb",
        749);
      v11 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
              &packet_ptr,
              (const char (*)[33])"fillPlayerDataProto failed, uid:");
      *(_DWORD *)&v22._M_functor._M_pod_data[8] = Player::getUid(this);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
        v11,
        (const unsigned int *)&v22._M_functor._M_pod_data[8]);
      common::milog::MiLogStream::~MiLogStream(&packet_ptr);
      v1 = -1;
      v5 = 0;
    }
    else
    {
      proto::SysSavePlayerNotify::SysSavePlayerNotify((proto::SysSavePlayerNotify *const)(v2 + 128));
      common::minet::PacketUtils::createPacket<proto::SysSavePlayerNotify>((const proto::SysSavePlayerNotify *)(v2 + 96));
      if ( std::operator==<common::minet::Packet>(0LL, (const std::shared_ptr<common::minet::Packet> *)(v2 + 96)) )
      {
        common::milog::MiLogStream::create(
          &packet_ptr,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/player.cpp",
          "internalAsyncSaveToDb",
          757);
        common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
          &packet_ptr,
          (const char (*)[19])"createPacket fails");
        common::milog::MiLogStream::~MiLogStream(&packet_ptr);
        v1 = -1;
        v12 = 0;
      }
      else
      {
        v13 = ServiceBox::findService<GameserverService>();
        std::any::any<std::shared_ptr<PlayerSaveInfoContext> &,std::shared_ptr<PlayerSaveInfoContext>,std::any::_Manager_external<std::shared_ptr<PlayerSaveInfoContext>>,true,true>(
          &context,
          (std::shared_ptr<PlayerSaveInfoContext> *)(v2 + 64));
        std::shared_ptr<common::minet::Packet>::shared_ptr(
          &v26,
          (const std::shared_ptr<common::minet::Packet> *)(v2 + 96));
        std::bind<int (&)(std::shared_ptr<common::minet::Packet>,std::any,int),std::_Placeholder<1> const&,std::_Placeholder const&<2>,std::_Placeholder const&<3>>(
          (int (*)(std::shared_ptr<common::minet::Packet>, std::any, int))&p___f,
          (const std::_Placeholder<1> *)Player::asyncSaveToDbCallback,
          (const std::_Placeholder<2> *)&std::placeholders::_1,
          (const std::_Placeholder<3> *)&std::placeholders::_2,
          (const std::_Placeholder<1> *)&std::placeholders::_3,
          v14,
          (const std::_Placeholder<3> *)v21._M_functor._M_unused._M_object);
        std::function<int ()(std::shared_ptr<common::minet::Packet>,std::any,int)>::function<std::_Bind<int (*)(std::shared_ptr<common::minet::Packet>,std::any,int) ()(std::_Placeholder<1>,std::_Placeholder<2>,std::_Placeholder<3>)>,void,void>(
          (std::function<int(std::shared_ptr<common::minet::Packet>,std::any,int)> *const)&packet_ptr,
          &p___f);
        std::bind<int (&)(std::shared_ptr<common::minet::Packet>,std::any),std::_Placeholder<1> const&,std::_Placeholder const&<2>>(
          (int (*)(std::shared_ptr<common::minet::Packet>, std::any))&v24,
          (const std::_Placeholder<1> *)Player::asyncSaveToDb,
          (const std::_Placeholder<2> *)&std::placeholders::_1,
          (const std::_Placeholder<1> *)&std::placeholders::_2,
          v15);
        std::function<int ()(std::shared_ptr<common::minet::Packet>,std::any)>::function<std::_Bind<int (*)(std::shared_ptr<common::minet::Packet>,std::any) ()(std::_Placeholder<1>,std::_Placeholder<2>)>,void,void>(
          &v28,
          &v24);
        *(_DWORD *)&v22._M_functor._M_pod_data[12] = ServiceBase::pushAsyncTask(
                                                       v13,
                                                       v21,
                                                       v22,
                                                       (common::minet::PacketPtr)__PAIR128__(&packet_ptr, &v28),
                                                       (std::any)__PAIR128__(&context, &v26));
        std::function<int ()(std::shared_ptr<common::minet::Packet>,std::any)>::~function(&v28);
        std::function<int ()(std::shared_ptr<common::minet::Packet>,std::any,int)>::~function((std::function<int(std::shared_ptr<common::minet::Packet>,std::any,int)> *const)&packet_ptr);
        std::shared_ptr<common::minet::Packet>::~shared_ptr(&v26);
        std::any::~any(&context);
        common::milog::MiLogStream::create(
          &packet_ptr,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/player/player.cpp",
          "internalAsyncSaveToDb",
          767);
        v16 = common::milog::MiLogStream::operator<<<char [5],(char *[5])0>(&packet_ptr, (const char (*)[5])"uid:");
        *(_DWORD *)&v22._M_functor._M_pod_data[4] = Player::getUid((const Player *const)v21._M_invoker);
        v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v16,
                (const unsigned int *)&v22._M_functor._M_pod_data[4]);
        v18 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                v17,
                (const char (*)[19])" comp to Bin cost:");
        *(_DWORD *)&v22._M_functor._M_pod_data[8] = common::tools::TimeUtils::Timer::time((const common::tools::TimeUtils::Timer *const)(v2 + 32));
        v19 = common::milog::MiLogStream::operator<<<int,(int *)0>(v18, (const int *)&v22._M_functor._M_pod_data[8]);
        common::milog::MiLogStream::operator<<<char [4],(char *[4])0>(v19, (const char (*)[4])off_2602EF80);
        common::milog::MiLogStream::~MiLogStream(&packet_ptr);
        v12 = 1;
      }
      std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v2 + 96));
      proto::SysSavePlayerNotify::~SysSavePlayerNotify((proto::SysSavePlayerNotify *const)(v2 + 128));
      v5 = v12 == 1;
    }
  }
  std::shared_ptr<PlayerSaveInfoContext>::~shared_ptr((std::shared_ptr<PlayerSaveInfoContext> *const)(v2 + 64));
  common::tools::TimeUtils::Timer::~Timer((common::tools::TimeUtils::Timer *const)(v2 + 32));
  if ( v5 )
    v1 = 0;
  result = v1;
  if ( *(_QWORD *)&v21._M_functor._M_pod_data[8] == v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 779: range 0000000017135420-0000000017135C58
int32_t __cdecl Player::toBin(Player *const this, proto::PlayerData *data)
{
  int32_t v2; // r14d
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // rbx
  common::milog::MiLogStream *v6; // r14
  int v7; // r15d
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rdx
  bool *p_is_open_compress; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  char v11; // al
  unsigned int v12; // r15d
  __int64 v13; // rsi
  int32_t result; // eax
  unsigned int val; // [rsp+20h] [rbp-460h] BYREF
  uint32_t before_length; // [rsp+24h] [rbp-45Ch]
  std::string *bin_str; // [rsp+30h] [rbp-450h]
  std::string *extra_bin_str; // [rsp+38h] [rbp-448h]
  std::string *before_login_bin_str; // [rsp+40h] [rbp-440h]
  std::string v20; // [rsp+50h] [rbp-430h] BYREF
  common::milog::MiLogStream v21; // [rsp+70h] [rbp-410h] BYREF
  char v22[1008]; // [rsp+90h] [rbp-3F0h] BYREF

  v3 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(960LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 32 16 9 timer:782 64 16 14 config_ptr:804 96 40 20 before_login_bin:787 176 96 13 extra_bin:78"
                        "6 304 520 12 data_bin:785";
  *(_QWORD *)(v3 + 16) = Player::toBin;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -219021312;
  v5[536862722] = -219021312;
  v5[536862724] = -218959360;
  v5[536862725] = 62194;
  v5[536862728] = -219021312;
  v5[536862729] = 62194;
  v5[536862745] = -218103808;
  v5[536862746] = -202116109;
  v5[536862747] = -202116109;
  v5[536862748] = -202116109;
  v5[536862749] = -202116109;
  common::tools::TimeUtils::Timer::Timer((common::tools::TimeUtils::Timer *const)(v3 + 32));
  proto::PlayerDataBin::PlayerDataBin((proto::PlayerDataBin *const)(v3 + 304));
  proto::PlayerExtraBinData::PlayerExtraBinData((proto::PlayerExtraBinData *const)(v3 + 176));
  proto::PlayerBeforeLoginBinData::PlayerBeforeLoginBinData((proto::PlayerBeforeLoginBinData *const)(v3 + 96));
  if ( Player::fillPlayerDataProto(
         this,
         data,
         (proto::PlayerDataBin *)(v3 + 304),
         (proto::PlayerExtraBinData *)(v3 + 176),
         (proto::PlayerBeforeLoginBinData *)(v3 + 96)) )
  {
    common::milog::MiLogStream::create(
      &v21,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "toBin",
      791);
    v6 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
           &v21,
           (const char (*)[33])"fillPlayerDataProto failed, uid:");
    val = Player::getUid(this);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, &val);
    common::milog::MiLogStream::~MiLogStream(&v21);
    v2 = -1;
    v7 = 0;
  }
  else
  {
    bin_str = proto::PlayerData::mutable_bin[abi:cxx11](data);
    extra_bin_str = proto::PlayerData::mutable_extra_bin_data[abi:cxx11](data);
    before_login_bin_str = proto::PlayerData::mutable_before_login_bin_data[abi:cxx11](data);
    google::protobuf::MessageLite::SerializeToString((const google::protobuf::MessageLite *const)(v3 + 304), bin_str);
    google::protobuf::MessageLite::SerializeToString(
      (const google::protobuf::MessageLite *const)(v3 + 176),
      extra_bin_str);
    google::protobuf::MessageLite::SerializeToString(
      (const google::protobuf::MessageLite *const)(v3 + 96),
      before_login_bin_str);
    before_length = std::string::length(bin_str);
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)(v3 + 64));
    v8 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    p_is_open_compress = &v8->is_open_compress;
    if ( *(_BYTE *)(((unsigned __int64)p_is_open_compress >> 3) + 0x7FFF8000) != 0
      && ((unsigned __int8)p_is_open_compress & 7) >= *(_BYTE *)(((unsigned __int64)p_is_open_compress >> 3) + 0x7FFF8000) )
    {
      __asan_report_load1(p_is_open_compress);
    }
    if ( !v8->is_open_compress )
      goto LABEL_13;
    v10 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    if ( *(_BYTE *)(((unsigned __int64)&v10->min_compress_size >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&v10->min_compress_size >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&v10->min_compress_size);
    }
    if ( before_length > v10->min_compress_size )
      v11 = 1;
    else
LABEL_13:
      v11 = 0;
    if ( v11 )
    {
      common::tools::ZlibUtil::compressWithPad(&v20, bin_str, -1);
      std::string::operator=(bin_str, &v20);
      std::string::~string(&v20);
      common::milog::MiLogStream::create(
        &v21,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/player.cpp",
        "toBin",
        808);
      v12 = common::tools::TimeUtils::Timer::time((const common::tools::TimeUtils::Timer *const)(v3 + 32));
      v13 = std::string::length(bin_str);
      if ( *(_BYTE *)(((unsigned __int64)&this->uid_ >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&this->uid_ >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&this->uid_);
      }
      common::milog::MiLogStream::operator()(
        &v21,
        "uid=%u bin compress before=%u after=%lu,time_cost=%u.",
        this->uid_,
        before_length,
        v13,
        v12);
      common::milog::MiLogStream::~MiLogStream(&v21);
    }
    Player::monitorPlayerBin(this, bin_str);
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 64));
    v7 = 1;
  }
  proto::PlayerBeforeLoginBinData::~PlayerBeforeLoginBinData((proto::PlayerBeforeLoginBinData *const)(v3 + 96));
  proto::PlayerExtraBinData::~PlayerExtraBinData((proto::PlayerExtraBinData *const)(v3 + 176));
  proto::PlayerDataBin::~PlayerDataBin((proto::PlayerDataBin *const)(v3 + 304));
  common::tools::TimeUtils::Timer::~Timer((common::tools::TimeUtils::Timer *const)(v3 + 32));
  if ( v7 == 1 )
    v2 = 0;
  result = v2;
  if ( v22 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8064) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF806C) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8074) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8060) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8068) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8070) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 822: range 0000000017135C5A-0000000017136589
int32_t __cdecl Player::asyncSaveToDb(common::minet::PacketPtr *p_packet_ptr, std::any *p_context)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  std::size_t v5; // r14
  const std::type_info *v6; // rax
  const char *v7; // r14
  const std::type_info *v8; // rax
  const char *v9; // rax
  int32_t v10; // r14d
  common::milog::MiLogStream *v11; // r14
  common::milog::MiLogStream *v12; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rdx
  bool *p_is_open_compress; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  char v16; // al
  unsigned int v17; // r15d
  __int64 v18; // r14
  google::protobuf::uint32 v19; // eax
  std::__shared_ptr_access<PlayerSaveInfoContext,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // r15
  std::__shared_ptr_access<PlayerSaveInfoContext,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // r14
  uint32_t v22; // ecx
  int32_t result; // eax
  int val; // [rsp+20h] [rbp-130h] BYREF
  uint32_t before_length; // [rsp+24h] [rbp-12Ch]
  proto::SavePlayerDataReq *save_req; // [rsp+30h] [rbp-120h]
  proto::PlayerData *data; // [rsp+38h] [rbp-118h]
  proto::PlayerDataBin *data_bin; // [rsp+40h] [rbp-110h]
  proto::PlayerExtraBinData *extra_bin; // [rsp+48h] [rbp-108h]
  proto::PlayerBeforeLoginBinData *before_login_bin; // [rsp+50h] [rbp-100h]
  std::string *bin_str; // [rsp+58h] [rbp-F8h]
  std::string *extra_bin_str; // [rsp+60h] [rbp-F0h]
  std::string *before_login_bin_data_str; // [rsp+68h] [rbp-E8h]
  std::any __any; // [rsp+70h] [rbp-E0h] BYREF
  common::milog::MiLogStream v35; // [rsp+80h] [rbp-D0h] BYREF
  char v36[176]; // [rsp+A0h] [rbp-B0h] BYREF
  std::pair<unsigned int,unsigned int> last_gate_session; // 0:rsi.8

  v2 = (unsigned __int64)v36;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 32 16 9 timer:823 64 16 15 context_ptr:824 96 16 14 config_ptr:853";
  *(_QWORD *)(v2 + 16) = Player::asyncSaveToDb;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862722] = -219021312;
  v4[536862723] = -202178560;
  common::tools::TimeUtils::Timer::Timer((common::tools::TimeUtils::Timer *const)(v2 + 32));
  v5 = std::type_info::hash_code((const std::type_info *const)&`typeinfo for'std::shared_ptr<PlayerSaveInfoContext>);
  v6 = std::any::type(p_context);
  if ( v5 == std::type_info::hash_code(v6) )
  {
    std::shared_ptr<PlayerSaveInfoContext>::shared_ptr((std::shared_ptr<PlayerSaveInfoContext> *const)(v2 + 64), 0LL);
    std::any_cast<std::shared_ptr<PlayerSaveInfoContext>>(&__any);
    std::shared_ptr<PlayerSaveInfoContext>::operator=(
      (std::shared_ptr<PlayerSaveInfoContext> *const)(v2 + 64),
      (std::shared_ptr<PlayerSaveInfoContext> *)&__any);
    std::shared_ptr<PlayerSaveInfoContext>::~shared_ptr((std::shared_ptr<PlayerSaveInfoContext> *const)&__any);
    if ( std::operator==<PlayerSaveInfoContext>((const std::shared_ptr<PlayerSaveInfoContext> *)(v2 + 64), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v35,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/player.cpp",
        "asyncSaveToDb",
        827);
      common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
        &v35,
        (const char (*)[42])"PlayerSaveInfoContext context_ptr is null");
      common::milog::MiLogStream::~MiLogStream(&v35);
      v10 = -1;
    }
    else if ( std::operator==<common::minet::Packet>(p_packet_ptr, 0LL) )
    {
      common::milog::MiLogStream::create(
        &v35,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/player.cpp",
        "asyncSaveToDb",
        832);
      common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(&v35, (const char (*)[19])"packet_ptr is null");
      common::milog::MiLogStream::~MiLogStream(&v35);
      v10 = -1;
    }
    else
    {
      save_req = (proto::SavePlayerDataReq *)std::__shared_ptr_access<PlayerSaveInfoContext,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerSaveInfoContext,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
      data = proto::SavePlayerDataReq::mutable_player_data(save_req);
      data_bin = &std::__shared_ptr_access<PlayerSaveInfoContext,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerSaveInfoContext,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64))->data_bin;
      extra_bin = &std::__shared_ptr_access<PlayerSaveInfoContext,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerSaveInfoContext,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64))->extra_bin;
      before_login_bin = &std::__shared_ptr_access<PlayerSaveInfoContext,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerSaveInfoContext,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64))->before_login_bin;
      bin_str = proto::PlayerData::mutable_bin[abi:cxx11](data);
      extra_bin_str = proto::PlayerData::mutable_extra_bin_data[abi:cxx11](data);
      before_login_bin_data_str = proto::PlayerData::mutable_before_login_bin_data[abi:cxx11](data);
      google::protobuf::MessageLite::SerializeToString(data_bin, bin_str);
      google::protobuf::MessageLite::SerializeToString(extra_bin, extra_bin_str);
      google::protobuf::MessageLite::SerializeToString(before_login_bin, before_login_bin_data_str);
      common::milog::MiLogStream::create(
        &v35,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/player.cpp",
        "asyncSaveToDb",
        849);
      v11 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
              &v35,
              (const char (*)[26])"Serialize to string cost:");
      val = common::tools::TimeUtils::Timer::time((const common::tools::TimeUtils::Timer *const)(v2 + 32));
      v12 = common::milog::MiLogStream::operator<<<int,(int *)0>(v11, &val);
      common::milog::MiLogStream::operator<<<char [4],(char *[4])0>(v12, (const char (*)[4])off_2602EF80);
      common::milog::MiLogStream::~MiLogStream(&v35);
      common::tools::TimeUtils::Timer::reset((common::tools::TimeUtils::Timer *const)(v2 + 32));
      before_length = std::string::length(bin_str);
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)(v2 + 96));
      v13 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
      p_is_open_compress = &v13->is_open_compress;
      if ( *(_BYTE *)(((unsigned __int64)p_is_open_compress >> 3) + 0x7FFF8000) != 0
        && ((unsigned __int8)p_is_open_compress & 7) >= *(_BYTE *)(((unsigned __int64)p_is_open_compress >> 3)
                                                                 + 0x7FFF8000) )
      {
        __asan_report_load1(p_is_open_compress);
      }
      if ( !v13->is_open_compress )
        goto LABEL_17;
      v15 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
      if ( *(_BYTE *)(((unsigned __int64)&v15->min_compress_size >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v15->min_compress_size >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v15->min_compress_size);
      }
      if ( before_length > v15->min_compress_size )
        v16 = 1;
      else
LABEL_17:
        v16 = 0;
      if ( v16 )
      {
        common::tools::ZlibUtil::compressWithPad((std::string *)&v35, bin_str, -1);
        std::string::operator=(bin_str, &v35);
        std::string::~string(&v35);
        common::milog::MiLogStream::create(
          &v35,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/player/player.cpp",
          "asyncSaveToDb",
          857);
        v17 = common::tools::TimeUtils::Timer::time((const common::tools::TimeUtils::Timer *const)(v2 + 32));
        v18 = std::string::length(bin_str);
        v19 = proto::PlayerData::uid(data);
        common::milog::MiLogStream::operator()(
          &v35,
          "uid=%u bin compress before=%u after=%lu time_cost=%u",
          v19,
          before_length,
          v18,
          v17);
        common::milog::MiLogStream::~MiLogStream(&v35);
      }
      v20 = std::__shared_ptr_access<PlayerSaveInfoContext,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerSaveInfoContext,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
      v21 = std::__shared_ptr_access<PlayerSaveInfoContext,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerSaveInfoContext,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
      v22 = proto::PlayerData::uid(data);
      if ( *(_BYTE *)(((unsigned __int64)&v21->last_gate_session >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      last_gate_session = v21->last_gate_session;
      if ( Player::saveToDb(v22, last_gate_session, &v20->save_req) )
      {
        common::milog::MiLogStream::create(
          &v35,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/player.cpp",
          "asyncSaveToDb",
          862);
        common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
          &v35,
          (const char (*)[28])"async thread saveToDb fails");
        common::milog::MiLogStream::~MiLogStream(&v35);
        v10 = -1;
      }
      else
      {
        v10 = 0;
      }
      std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v2 + 96));
    }
    std::shared_ptr<PlayerSaveInfoContext>::~shared_ptr((std::shared_ptr<PlayerSaveInfoContext> *const)(v2 + 64));
  }
  else
  {
    common::milog::MiLogStream::create(
      &v35,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "asyncSaveToDb",
      824);
    v7 = std::type_info::name((const std::type_info *const)&`typeinfo for'std::shared_ptr<PlayerSaveInfoContext>);
    v8 = std::any::type(p_context);
    v9 = std::type_info::name(v8);
    common::milog::MiLogStream::operator()(&v35, off_2602F220, v9, v7);
    common::milog::MiLogStream::~MiLogStream(&v35);
    v10 = -1;
  }
  common::tools::TimeUtils::Timer::~Timer((common::tools::TimeUtils::Timer *const)(v2 + 32));
  result = v10;
  if ( v36 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 870: range 000000001713658A-0000000017136AD8
int32_t __cdecl Player::asyncSaveToDbCallback(
        common::minet::PacketPtr *p_packet_ptr,
        std::any *p_context,
        int32_t retcode)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  std::size_t v6; // r14
  const std::type_info *v7; // rax
  const char *v8; // rbx
  const std::type_info *v9; // rax
  const char *v10; // rax
  int32_t v11; // r14d
  GameserverService *v12; // rax
  unsigned int GameThreadLocal; // eax
  common::milog::MiLogStream *v14; // rax
  Player *v15; // rdx
  int32_t result; // eax
  std::__shared_ptr_access<PlayerSaveInfoContext,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *save_req; // [rsp+28h] [rbp-F8h]
  const proto::PlayerData *data; // [rsp+30h] [rbp-F0h]
  const std::string *bin_str; // [rsp+38h] [rbp-E8h]
  std::any __any; // [rsp+40h] [rbp-E0h] BYREF
  common::milog::MiLogStream v21; // [rsp+50h] [rbp-D0h] BYREF
  char v22[176]; // [rsp+70h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 4 7 uid:879 64 16 15 context_ptr:871 96 16 14 player_ptr:881";
  *(_QWORD *)(v3 + 16) = Player::asyncSaveToDbCallback;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -219021312;
  v5[536862723] = -202178560;
  v6 = std::type_info::hash_code((const std::type_info *const)&`typeinfo for'std::shared_ptr<PlayerSaveInfoContext>);
  v7 = std::any::type(p_context);
  if ( v6 == std::type_info::hash_code(v7) )
  {
    std::shared_ptr<PlayerSaveInfoContext>::shared_ptr((std::shared_ptr<PlayerSaveInfoContext> *const)(v3 + 64), 0LL);
    std::any_cast<std::shared_ptr<PlayerSaveInfoContext>>(&__any);
    std::shared_ptr<PlayerSaveInfoContext>::operator=(
      (std::shared_ptr<PlayerSaveInfoContext> *const)(v3 + 64),
      (std::shared_ptr<PlayerSaveInfoContext> *)&__any);
    std::shared_ptr<PlayerSaveInfoContext>::~shared_ptr((std::shared_ptr<PlayerSaveInfoContext> *const)&__any);
    if ( std::operator==<PlayerSaveInfoContext>((const std::shared_ptr<PlayerSaveInfoContext> *)(v3 + 64), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v21,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/player.cpp",
        "asyncSaveToDbCallback",
        874);
      common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
        &v21,
        (const char (*)[42])"PlayerSaveInfoContext context_ptr is null");
      common::milog::MiLogStream::~MiLogStream(&v21);
      v11 = -1;
    }
    else
    {
      save_req = std::__shared_ptr_access<PlayerSaveInfoContext,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerSaveInfoContext,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      data = proto::SavePlayerDataReq::mutable_player_data(&save_req->save_req);
      *(_DWORD *)(v3 + 48) = proto::PlayerData::uid(data);
      v12 = ServiceBox::findService<GameserverService>();
      GameThreadLocal = (unsigned int)GameserverService::getGameThreadLocal(v12);
      PlayerMgr::findOnlinePlayer((PlayerMgr *const)(v3 + 96), GameThreadLocal + 16);
      if ( std::operator==<Player>(0LL, (const std::shared_ptr<Player> *)(v3 + 96)) )
      {
        common::milog::MiLogStream::create(
          &v21,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/player/player.cpp",
          "asyncSaveToDbCallback",
          885);
        v14 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                &v21,
                (const char (*)[31])"cannot find online player,uid:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, (const unsigned int *)(v3 + 48));
        common::milog::MiLogStream::~MiLogStream(&v21);
      }
      else
      {
        bin_str = proto::PlayerData::bin[abi:cxx11](data);
        v15 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
        Player::monitorPlayerBin(v15, bin_str);
      }
      v11 = 0;
      std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v3 + 96));
    }
    std::shared_ptr<PlayerSaveInfoContext>::~shared_ptr((std::shared_ptr<PlayerSaveInfoContext> *const)(v3 + 64));
  }
  else
  {
    common::milog::MiLogStream::create(
      &v21,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "asyncSaveToDbCallback",
      871);
    v8 = std::type_info::name((const std::type_info *const)&`typeinfo for'std::shared_ptr<PlayerSaveInfoContext>);
    v9 = std::any::type(p_context);
    v10 = std::type_info::name(v9);
    common::milog::MiLogStream::operator()(&v21, off_2602F220, v10, v8);
    common::milog::MiLogStream::~MiLogStream(&v21);
    v11 = -1;
  }
  result = v11;
  if ( v22 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 897: range 0000000017136ADA-0000000017137287
int32_t __cdecl Player::init(Player *const this)
{
  int32_t v1; // r14d
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  std::__shared_ptr_access<TracingMgr,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  __int8 v6; // al
  std::__shared_ptr<TracingMgr,(__gnu_cxx::_Lock_policy)2>::element_type *v7; // rax
  PlayerBasicComp *BasicComp; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyThisLoginInfo,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // r15
  PlayerBasicComp *v10; // rax
  uint64_t PlayerStatId; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyThisLoginInfo,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rcx
  PlayerBasicComp *v13; // rax
  uint32_t Uid; // eax
  std::__shared_ptr<PlayerCompBase,(__gnu_cxx::_Lock_policy)2>::element_type *v15; // rax
  int (**vptr_PlayerCompBase)(...); // rax
  const char *v17; // rax
  std::__shared_ptr<TracingMgr,(__gnu_cxx::_Lock_policy)2>::element_type *v18; // rax
  std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // rax
  unsigned __int64 v20; // rdx
  uint32_t v21; // eax
  int v22; // r15d
  int32_t result; // eax
  std::string v24; // [rsp+0h] [rbp-1A0h]
  char *v25; // [rsp+0h] [rbp-1A0h]
  Player *thisa; // [rsp+8h] [rbp-198h]
  bool do_perf_span; // [rsp+17h] [rbp-189h]
  const EcsBase<Player,PlayerCompBase,71>::CompBasePair *v28; // [rsp+20h] [rbp-180h]
  std::tuple_element<1,const std::pair<unsigned int,std::shared_ptr<PlayerCompBase> > >::type *player_comp_ptr; // [rsp+30h] [rbp-170h]
  EcsBase<Player,PlayerCompBase,71>::Iterator __for_begin; // [rsp+40h] [rbp-160h] BYREF
  EcsBase<Player,PlayerCompBase,71>::Iterator __for_end; // [rsp+50h] [rbp-150h] BYREF
  opentracing::v3::string_view operation_name; // [rsp+60h] [rbp-140h] BYREF
  std::string v33; // [rsp+70h] [rbp-130h] BYREF
  char v34[272]; // [rsp+90h] [rbp-110h] BYREF

  v24._M_string_length = (std::string::size_type)this;
  v2 = (unsigned __int64)v34;
  v24._M_dataplus._M_p = v34;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(224LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 48 1 10 holder:902 64 16 19 perf_span_proxy:899 96 16 27 log_this_login_info_ptr:903 128 16 19"
                        " perf_span_proxy:927 160 32 18 operation_name:918";
  *(_QWORD *)(v2 + 16) = Player::init;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862724] = -219021312;
  v4[536862726] = -202116109;
  v6 = 0;
  if ( std::operator!=<TracingMgr>(&ResourceBox::tracing_mgr_ptr, 0LL) )
  {
    v5 = std::__shared_ptr_access<TracingMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TracingMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)&ResourceBox::tracing_mgr_ptr);
    if ( TracingMgr::isPerfSpanEnabled(v5) )
      v6 = 1;
  }
  v24._anon_0._M_local_buf[7] = v6;
  opentracing::v3::string_view::string_view(&operation_name, "Player::init");
  v7 = std::__shared_ptr<TracingMgr,(__gnu_cxx::_Lock_policy)2>::get(&ResourceBox::tracing_mgr_ptr);
  PerfSpanProxy::PerfSpanProxy((PerfSpanProxy *const)(v2 + 64), v7, operation_name);
  BasicComp = Player::getBasicComp(this);
  PlayerBasicComp::getNextTransNo[abi:cxx11](&v33, BasicComp);
  StatLogUtils::ContextHolder::ContextHolder((StatLogUtils::ContextHolder *const)(v2 + 48), 0x460u, v24);
  std::string::~string(&v33);
  common::tools::perf::make_shared<proto_log::PlayerLogBodyThisLoginInfo>();
  v9 = std::__shared_ptr_access<proto_log::PlayerLogBodyThisLoginInfo,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyThisLoginInfo,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
  v10 = Player::getBasicComp(thisa);
  PlayerStatId = PlayerBasicComp::getPlayerStatId(v10);
  proto_log::PlayerLogBodyThisLoginInfo::set_save_stat_id(v9, PlayerStatId);
  v12 = std::__shared_ptr_access<proto_log::PlayerLogBodyThisLoginInfo,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyThisLoginInfo,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
  if ( *(_BYTE *)(((unsigned __int64)&thisa->data_version_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&thisa->data_version_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&thisa->data_version_);
  }
  proto_log::PlayerLogBodyThisLoginInfo::set_data_version(v12, thisa->data_version_);
  v13 = Player::getBasicComp(thisa);
  PlayerBasicComp::increasePlayerStatId(v13);
  std::shared_ptr<google::protobuf::Message>::shared_ptr(
    (std::shared_ptr<google::protobuf::Message> *const)&operation_name,
    0LL);
  std::shared_ptr<google::protobuf::Message>::shared_ptr<proto_log::PlayerLogBodyThisLoginInfo,void>(
    (std::shared_ptr<google::protobuf::Message> *const)(v2 + 128),
    (const std::shared_ptr<proto_log::PlayerLogBodyThisLoginInfo> *)(v2 + 96));
  Player::printStatLog(thisa, (MessagePtr *)(v2 + 128), (MessagePtr *)&operation_name, 0xEu);
  std::shared_ptr<google::protobuf::Message>::~shared_ptr((std::shared_ptr<google::protobuf::Message> *const)(v2 + 128));
  std::shared_ptr<google::protobuf::Message>::~shared_ptr((std::shared_ptr<google::protobuf::Message> *const)&operation_name);
  if ( BlockDataMgr::init(&thisa->block_data_mgr_) )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&v33,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "init",
      912);
    Uid = Player::getUid(thisa);
    common::milog::MiLogStream::operator()(
      (common::milog::MiLogStream *const)&v33,
      "init block_data_mgr for uid=%u failed",
      Uid);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v33);
    v1 = -1;
  }
  else
  {
    EcsBase<Player,PlayerCompBase,71u>::begin((const EcsBase<Player,PlayerCompBase,71> *const)&__for_begin);
    EcsBase<Player,PlayerCompBase,71u>::end((const EcsBase<Player,PlayerCompBase,71> *const)&__for_end);
    while ( EcsBase<Player,PlayerCompBase,71u>::Iterator::operator!=(&__for_begin, &__for_end) )
    {
      v28 = EcsBase<Player,PlayerCompBase,71u>::Iterator::operator*(&__for_begin);
      std::get<0ul,unsigned int,std::shared_ptr<PlayerCompBase>>(v28);
      player_comp_ptr = (std::tuple_element<1,const std::pair<unsigned int,std::shared_ptr<PlayerCompBase> > >::type *)std::get<1ul,unsigned int,std::shared_ptr<PlayerCompBase>>(v28);
      std::string::basic_string(v2 + 160);
      if ( do_perf_span )
      {
        v15 = std::__shared_ptr<PlayerCompBase,(__gnu_cxx::_Lock_policy)2>::get(player_comp_ptr);
        if ( !v15 )
        {
          __asan_handle_no_return();
          __cxa_bad_typeid();
        }
        if ( *(_BYTE *)(((unsigned __int64)v15 >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        vptr_PlayerCompBase = v15->_vptr_PlayerCompBase;
        if ( *(_BYTE *)(((unsigned __int64)(vptr_PlayerCompBase - 1) >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v17 = std::type_info::name((const std::type_info *const)*(vptr_PlayerCompBase - 1));
        std::string::operator=(v2 + 160, v17);
        std::string::operator+=(v2 + 160, "::init");
      }
      opentracing::v3::string_view::string_view(&operation_name, (const std::string *)(v2 + 160));
      v18 = std::__shared_ptr<TracingMgr,(__gnu_cxx::_Lock_policy)2>::get(&ResourceBox::tracing_mgr_ptr);
      PerfSpanProxy::PerfSpanProxy((PerfSpanProxy *const)(v2 + 128), v18, operation_name);
      v19 = std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false> *const)player_comp_ptr);
      if ( *(_BYTE *)(((unsigned __int64)v19 >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v20 = (unsigned __int64)(v19->_vptr_PlayerCompBase + 6);
      if ( *(_BYTE *)((v20 >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      if ( (*(unsigned int (__fastcall **)(std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *))v20)(v19) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&v33,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/player.cpp",
          "init",
          932);
        v21 = Player::getUid(thisa);
        common::milog::MiLogStream::operator()((common::milog::MiLogStream *const)&v33, "init for uid=%u failed", v21);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v33);
        v1 = -1;
        v22 = 0;
      }
      else
      {
        v22 = 1;
      }
      PerfSpanProxy::~PerfSpanProxy((PerfSpanProxy *const)(v2 + 128));
      std::string::~string((void *)(v2 + 160));
      if ( v22 != 1 )
        goto LABEL_32;
      EcsBase<Player,PlayerCompBase,71u>::Iterator::operator++(&__for_begin);
    }
    v1 = 0;
  }
LABEL_32:
  std::shared_ptr<proto_log::PlayerLogBodyThisLoginInfo>::~shared_ptr((std::shared_ptr<proto_log::PlayerLogBodyThisLoginInfo> *const)(v2 + 96));
  StatLogUtils::ContextHolder::~ContextHolder((StatLogUtils::ContextHolder *const)(v2 + 48));
  PerfSpanProxy::~PerfSpanProxy((PerfSpanProxy *const)(v2 + 64));
  result = v1;
  if ( v25 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 941: range 0000000017137288-0000000017137356
bool __cdecl Player::isCoroutineDone(Player *const this)
{
  common::milog::MiLogStream *v1; // rax
  PlayerCoroExec *v3; // rax
  common::milog::MiLogStream v4; // [rsp+10h] [rbp-30h] BYREF

  if ( std::operator==<PlayerCoroExec>(&this->coro_exec_ptr_, 0LL) )
  {
    common::milog::MiLogStream::create(
      &v4,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "isCoroutineDone",
      944);
    v1 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(&v4, (const char (*)[19])"coro_ptr_ is empty");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v1, &this->uid_);
    common::milog::MiLogStream::~MiLogStream(&v4);
    return 1;
  }
  else
  {
    v3 = std::__shared_ptr_access<PlayerCoroExec,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerCoroExec,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->coro_exec_ptr_);
    return PlayerCoroExec::isDone(v3);
  }
};

// Line 953: range 0000000017137358-00000000171377F5
int32_t __cdecl Player::blockStopCoroutine(Player *const this)
{
  uint32_t *p_uid; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream *v6; // rax
  int32_t result; // eax
  PlayerCoroExec *v8; // rax
  PlayerCoroExec *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream v15; // [rsp+10h] [rbp-80h] BYREF
  char v16[96]; // [rsp+30h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 13 try_count:968";
  *(_QWORD *)(v2 + 16) = Player::blockStopCoroutine;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(char *)(((unsigned __int64)&this->is_coro_stopping_ >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&this->is_coro_stopping_);
  if ( this->is_coro_stopping_ )
  {
    common::milog::MiLogStream::create(
      &v15,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "blockStopCoroutine",
      957);
    v5 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
           &v15,
           (const char (*)[41])"blockStopCoroutine called repeated, uid:");
    p_uid = &this->uid_;
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, &this->uid_);
    common::milog::MiLogStream::~MiLogStream(&v15);
  }
  if ( *(char *)(((unsigned __int64)&this->is_coro_stopping_ >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->is_coro_stopping_, p_uid, &this->is_coro_stopping_);
  this->is_coro_stopping_ = 1;
  if ( std::operator==<PlayerCoroExec>(&this->coro_exec_ptr_, 0LL) )
  {
    common::milog::MiLogStream::create(
      &v15,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "blockStopCoroutine",
      964);
    v6 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(&v15, (const char (*)[19])"coro_ptr_ is empty");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, &this->uid_);
    common::milog::MiLogStream::~MiLogStream(&v15);
    result = -1;
  }
  else
  {
    *(_DWORD *)(v2 + 32) = 0;
    while ( 1 )
    {
      v8 = std::__shared_ptr_access<PlayerCoroExec,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerCoroExec,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->coro_exec_ptr_);
      if ( PlayerCoroExec::isDone(v8) )
        break;
      v9 = std::__shared_ptr_access<PlayerCoroExec,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerCoroExec,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->coro_exec_ptr_);
      if ( PlayerCoroExec::forceAwake(v9) )
      {
        common::milog::MiLogStream::create(
          &v15,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/player.cpp",
          "blockStopCoroutine",
          973);
        v10 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                &v15,
                (const char (*)[23])"forceAwake failed,uid:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, &this->uid_);
        common::milog::MiLogStream::~MiLogStream(&v15);
        result = -1;
        goto LABEL_19;
      }
      if ( (int)++*(_DWORD *)(v2 + 32) > 100 )
      {
        common::milog::MiLogStream::create(
          &v15,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/player.cpp",
          "blockStopCoroutine",
          979);
        v11 = common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
                &v15,
                (const char (*)[47])"blockStopCoroutine stop failed, try too much: ");
        v12 = common::milog::MiLogStream::operator<<<int,(int *)0>(v11, (const int *)(v2 + 32));
        v13 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v12, (const char (*)[6])" uid:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, &this->uid_);
        common::milog::MiLogStream::~MiLogStream(&v15);
        result = -1;
        goto LABEL_19;
      }
    }
    common::milog::MiLogStream::create(
      &v15,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/player.cpp",
      "blockStopCoroutine",
      983);
    v14 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
            &v15,
            (const char (*)[30])"blockStopCoroutine succ, uid:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, &this->uid_);
    common::milog::MiLogStream::~MiLogStream(&v15);
    result = 0;
  }
LABEL_19:
  if ( v16 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 990: range 00000000171377F6-0000000017138C00
void __cdecl Player::corotinueLoop(Player *const this)
{
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  common::milog::MiLogStream *v4; // rax
  common::milog::MiLogStream *v5; // rax
  std::__shared_ptr_access<common::minet::Coroutine,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  PlayerCoroExec *v7; // rax
  common::milog::MiLogStream *v8; // rax
  const std::shared_ptr<common::minet::Packet> *v9; // rax
  std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  uint16_t CmdId; // ax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v12; // rax
  common::milog::MiLogStream *v13; // r14
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // r14
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  GameserverService *v19; // rax
  unsigned int GameThreadLocal; // eax
  bool v21; // r14
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  int v25; // r14d
  std::__shared_ptr_access<common::minet::Coroutine,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v26; // rax
  char *v27; // rsi
  uint64_t NowMs; // rax
  PlayerQuestComp *QuestComp; // rax
  const std::shared_ptr<common::minet::Packet> *v30; // rax
  std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v31; // rax
  const char *v32; // r14
  std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v33; // rax
  uint32_t UserId; // eax
  unsigned int v35; // r14d
  __int64 v36; // rcx
  GameserverService *v37; // rax
  unsigned __int64 v38; // rdx
  GameserverService *v39; // rax
  const char *v40; // r15
  const char *v41; // r14
  std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v42; // rax
  uint32_t v43; // eax
  const char *v44; // rax
  std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v45; // rax
  uint32_t v46; // eax
  common::milog::MiLogStream *v47; // rax
  std::__shared_ptr_access<common::minet::Coroutine,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v48; // rax
  unsigned int v49; // [rsp+10h] [rbp-320h]
  uint32_t PacketQueueSize; // [rsp+14h] [rbp-31Ch]
  const char *v51; // [rsp+18h] [rbp-318h]
  std::queue<std::shared_ptr<common::minet::Packet>>::size_type v52; // [rsp+20h] [rbp-310h]
  std::allocator<char> v53; // [rsp+3Eh] [rbp-2F2h] BYREF
  std::allocator<char> __a; // [rsp+3Fh] [rbp-2F1h] BYREF
  int32_t retcode; // [rsp+40h] [rbp-2F0h]
  int32_t time_cost; // [rsp+44h] [rbp-2ECh]
  unsigned __int64 val; // [rsp+48h] [rbp-2E8h] BYREF
  std::queue<std::shared_ptr<common::minet::Packet>> *packet_queue; // [rsp+50h] [rbp-2E0h]
  const PacketCostTimeExceedLimitConfig *packet_cost_time_config; // [rsp+58h] [rbp-2D8h]
  const std::string *cmd_name; // [rsp+60h] [rbp-2D0h]
  const std::string *retcode_name; // [rsp+70h] [rbp-2C0h]
  const std::string *cmd_name_0; // [rsp+78h] [rbp-2B8h]
  common::milog::MiLogStream v63; // [rsp+80h] [rbp-2B0h] BYREF
  char v64[656]; // [rsp+A0h] [rbp-290h] BYREF

  v1 = (unsigned __int64)v64;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_4(608LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "8 48 4 7 uid:991 64 4 11 cmd_id:1074 80 16 12 coro_ptr:998 112 16 15 config_ptr:1053 144 16 15 p"
                        "acket_ptr:1071 176 16 15 packet_ptr:1029 208 32 9 func:1086 272 257 11 holder:1082";
  *(_QWORD *)(v1 + 16) = Player::corotinueLoop;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234556943;
  v3[536862722] = 61956;
  v3[536862723] = 62194;
  v3[536862724] = 62194;
  v3[536862725] = 62194;
  v3[536862726] = 62194;
  v3[536862727] = -219021312;
  v3[536862728] = 62194;
  v3[536862736] = -218038272;
  v3[536862737] = -202116109;
  v3[536862738] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)&this->uid_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->uid_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->uid_);
  }
  *(_DWORD *)(v1 + 48) = this->uid_;
  if ( std::operator==<PlayerCoroExec>(&this->coro_exec_ptr_, 0LL) )
  {
    common::milog::MiLogStream::create(
      &v63,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "corotinueLoop",
      994);
    v4 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(&v63, (const char (*)[19])"coro_ptr_ is empty");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v4, (const unsigned int *)(v1 + 48));
    common::milog::MiLogStream::~MiLogStream(&v63);
  }
  else
  {
    std::__shared_ptr_access<PlayerCoroExec,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerCoroExec,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->coro_exec_ptr_);
    PlayerCoroExec::getCoroPtr((const PlayerCoroExec *const)(v1 + 80));
    if ( std::operator==<common::minet::Coroutine>((const std::shared_ptr<common::minet::Coroutine> *)(v1 + 80), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v63,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/player.cpp",
        "corotinueLoop",
        1001);
      v5 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
             &v63,
             (const char (*)[18])"coro_ptr is empty");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, (const unsigned int *)(v1 + 48));
      common::milog::MiLogStream::~MiLogStream(&v63);
    }
    else
    {
      packet_queue = &std::__shared_ptr_access<PlayerCoroExec,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerCoroExec,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->coro_exec_ptr_)->packet_queue;
      while ( 1 )
      {
        if ( *(char *)(((unsigned __int64)&this->is_coro_stopping_ >> 3) + 0x7FFF8000) < 0 )
          __asan_report_load1(&this->is_coro_stopping_);
        if ( this->is_coro_stopping_ )
          break;
        if ( std::queue<std::shared_ptr<common::minet::Packet>>::empty(packet_queue) )
        {
          std::shared_ptr<ConfigBase>::shared_ptr((std::shared_ptr<ConfigBase> *const)(v1 + 176), 0LL);
          v6 = std::__shared_ptr_access<common::minet::Coroutine,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Coroutine,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 80));
          std::shared_ptr<ConfigBase>::operator=(&v6->config_base_ptr, (std::shared_ptr<ConfigBase> *)(v1 + 176));
          std::shared_ptr<ConfigBase>::~shared_ptr((std::shared_ptr<ConfigBase> *const)(v1 + 176));
          v7 = std::__shared_ptr_access<PlayerCoroExec,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerCoroExec,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->coro_exec_ptr_);
          if ( PlayerCoroExec::yield(v7) )
          {
            common::milog::MiLogStream::create(
              &v63,
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/player/player.cpp",
              "corotinueLoop",
              1017);
            v8 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
                   &v63,
                   (const char (*)[21])"coro_ptr yield error");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v1 + 48));
            common::milog::MiLogStream::~MiLogStream(&v63);
            break;
          }
        }
        if ( *(char *)(((unsigned __int64)&this->is_coro_stopping_ >> 3) + 0x7FFF8000) < 0 )
          __asan_report_load1(&this->is_coro_stopping_);
        if ( this->is_coro_stopping_ )
        {
          if ( !std::queue<std::shared_ptr<common::minet::Packet>>::empty(packet_queue) )
          {
            common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v1 + 144));
            while ( !std::queue<std::shared_ptr<common::minet::Packet>>::empty(packet_queue) )
            {
              v9 = std::queue<std::shared_ptr<common::minet::Packet>>::front(packet_queue);
              std::shared_ptr<common::minet::Packet>::shared_ptr(
                (std::shared_ptr<common::minet::Packet> *const)(v1 + 176),
                v9);
              std::queue<std::shared_ptr<common::minet::Packet>>::pop(packet_queue);
              v10 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 176));
              CmdId = common::minet::Packet::getCmdId(v10);
              cmd_name_0 = ProtoUtils::getCmdName[abi:cxx11](CmdId);
              v12 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v1 + 144),
                      cmd_name_0);
              common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v12, ",");
              std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v1 + 176));
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v1 + 208),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/player.cpp",
              "corotinueLoop",
              1034);
            v13 = common::milog::MiLogStream::operator<<<char [59],(char *[59])0>(
                    (common::milog::MiLogStream *const)(v1 + 208),
                    (const char (*)[59])"[LOGOUT]player packet_queue has packet before exit, size: ");
            val = std::queue<std::shared_ptr<common::minet::Packet>>::size(packet_queue);
            v14 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v13, &val);
            v15 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v14, (const char (*)[8])", cmd: ");
            common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
              (std::string *)&v63,
              (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v1 + 144));
            v16 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v15, (const std::string *)&v63);
            v17 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v16, (const char (*)[6])" uid:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(v1 + 48));
            std::string::~string(&v63);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v1 + 208));
            common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v1 + 144));
          }
          common::milog::MiLogStream::create(
            &v63,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/player/player.cpp",
            "corotinueLoop",
            1037);
          v18 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                  &v63,
                  (const char (*)[32])"[LOGOUT] coro is stopping, uid:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, (const unsigned int *)(v1 + 48));
          common::milog::MiLogStream::~MiLogStream(&v63);
        }
        else
        {
          v19 = ServiceBox::findService<GameserverService>();
          GameThreadLocal = (unsigned int)GameserverService::getGameThreadLocal(v19);
          PlayerMgr::findOnlinePlayer((PlayerMgr *const)(v1 + 176), GameThreadLocal + 16);
          v21 = std::operator==<Player>(0LL, (const std::shared_ptr<Player> *)(v1 + 176));
          std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v1 + 176));
          if ( v21 )
          {
            common::milog::MiLogStream::create(
              &v63,
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/player/player.cpp",
              "corotinueLoop",
              1043);
            v22 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                    &v63,
                    (const char (*)[31])"cannot find online player,uid:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v22, (const unsigned int *)(v1 + 48));
            common::milog::MiLogStream::~MiLogStream(&v63);
            break;
          }
          if ( std::queue<std::shared_ptr<common::minet::Packet>>::empty(packet_queue) )
          {
            common::milog::MiLogStream::create(
              &v63,
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/player/player.cpp",
              "corotinueLoop",
              1049);
            v23 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                    &v63,
                    (const char (*)[42])"packet queue is empty, should not weekup:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v23, (const unsigned int *)(v1 + 48));
            common::milog::MiLogStream::~MiLogStream(&v63);
          }
          else
          {
            ServiceBox::findService<GameserverService>();
            GameserverService::getConfigFromThreadLocal((GameserverService *const)(v1 + 112));
            if ( std::operator==<Config>(0LL, (const std::shared_ptr<Config> *)(v1 + 112)) )
            {
              common::milog::MiLogStream::create(
                &v63,
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/player/player.cpp",
                "corotinueLoop",
                1056);
              v24 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                      &v63,
                      (const char (*)[25])"config_ptr is null, uid:");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v24,
                (const unsigned int *)(v1 + 48));
              common::milog::MiLogStream::~MiLogStream(&v63);
              v25 = 0;
            }
            else
            {
              v26 = std::__shared_ptr_access<common::minet::Coroutine,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Coroutine,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 80));
              v27 = (char *)(v1 + 112);
              std::shared_ptr<ConfigBase>::operator=<Config>(
                &v26->config_base_ptr,
                (const std::shared_ptr<Config> *)(v1 + 112));
              packet_cost_time_config = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 112))->security_config.packet_cost_time_exceed_limit_config;
              if ( *(_BYTE *)(((unsigned __int64)&this->last_check_packet_cost_time_ms_ >> 3) + 0x7FFF8000) )
                __asan_report_load8();
              if ( !this->last_check_packet_cost_time_ms_ )
              {
                NowMs = common::tools::TimeUtils::getNowMs();
                if ( *(_BYTE *)(((unsigned __int64)&this->last_check_packet_cost_time_ms_ >> 3) + 0x7FFF8000) )
                  NowMs = __asan_report_store8(&this->last_check_packet_cost_time_ms_, v27);
                this->last_check_packet_cost_time_ms_ = NowMs;
                if ( *(_BYTE *)(((unsigned __int64)&this->accumulate_packet_cost_time_us_ >> 3) + 0x7FFF8000) )
                  __asan_report_store8(&this->accumulate_packet_cost_time_us_, v27);
                this->accumulate_packet_cost_time_us_ = 0LL;
              }
              QuestComp = Player::getQuestComp(this);
              PlayerQuestComp::flushQuestGroupAction(QuestComp);
              v30 = std::queue<std::shared_ptr<common::minet::Packet>>::front(packet_queue);
              std::shared_ptr<common::minet::Packet>::shared_ptr(
                (std::shared_ptr<common::minet::Packet> *const)(v1 + 144),
                v30);
              std::queue<std::shared_ptr<common::minet::Packet>>::pop(packet_queue);
              v31 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 144));
              *(_DWORD *)(v1 + 64) = common::minet::Packet::getCmdId(v31);
              cmd_name = ProtoUtils::getCmdName[abi:cxx11](*(_DWORD *)(v1 + 64));
              retcode = -1;
              time_cost = 0;
              CoroutineHelper::resetTime();
              v32 = (const char *)std::string::c_str(cmd_name);
              v33 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 144));
              UserId = common::minet::Packet::getUserId(v33);
              common::milog::MilogContextHolder::MilogContextHolder(
                (common::milog::MilogContextHolder *const)(v1 + 272),
                "uid:%u, cmd:%s",
                UserId,
                v32);
              std::shared_ptr<common::minet::Packet>::shared_ptr(
                (std::shared_ptr<common::minet::Packet> *const)(v1 + 176),
                (const std::shared_ptr<common::minet::Packet> *)(v1 + 144));
              CoroutineHelper::setContextPacketPtr((common::minet::PacketPtr *)(v1 + 176));
              std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v1 + 176));
              Player::findPacketProcessFunc((PacketFunc *)(v1 + 208), this, *(_DWORD *)(v1 + 64));
              if ( std::function<int ()(std::shared_ptr<common::minet::Packet>)>::operator bool((const std::function<int(std::shared_ptr<common::minet::Packet>)> *const)(v1 + 208)) )
              {
                std::shared_ptr<common::minet::Packet>::shared_ptr(
                  (std::shared_ptr<common::minet::Packet> *const)(v1 + 176),
                  (const std::shared_ptr<common::minet::Packet> *)(v1 + 144));
                retcode = std::function<int ()(std::shared_ptr<common::minet::Packet>)>::operator()(
                            (const std::function<int(std::shared_ptr<common::minet::Packet>)> *const)(v1 + 208),
                            (std::shared_ptr<common::minet::Packet> *)(v1 + 176));
                std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v1 + 176));
              }
              else if ( common::tools::MiscUtils::isContains<std::set<unsigned int>,unsigned int>(
                          &this->process_forward_client_set_,
                          (const unsigned int *)(v1 + 64)) )
              {
                std::shared_ptr<common::minet::Packet>::shared_ptr(
                  (std::shared_ptr<common::minet::Packet> *const)(v1 + 176),
                  (const std::shared_ptr<common::minet::Packet> *)(v1 + 144));
                retcode = Player::sendPacket(this, (common::minet::PacketPtr *)(v1 + 176));
                std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v1 + 176));
              }
              else
              {
                common::milog::MiLogStream::create(
                  &v63,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/player/player.cpp",
                  "corotinueLoop",
                  1097);
                v35 = *(_DWORD *)(v1 + 48);
                v36 = std::string::c_str(cmd_name);
                common::milog::MiLogStream::operator()(&v63, off_2602FC60, *(unsigned int *)(v1 + 64), v36, v35);
                common::milog::MiLogStream::~MiLogStream(&v63);
              }
              time_cost = CoroutineHelper::time();
              if ( *(_BYTE *)(((unsigned __int64)&this->accumulate_packet_cost_time_us_ >> 3) + 0x7FFF8000) )
                __asan_report_load8();
              this->accumulate_packet_cost_time_us_ += time_cost;
              Player::checkPacketCostTimeOnPacketEnd(this, packet_cost_time_config);
              std::function<int ()(std::shared_ptr<common::minet::Packet>)>::~function((std::function<int(std::shared_ptr<common::minet::Packet>)> *const)(v1 + 208));
              common::milog::MilogContextHolder::~MilogContextHolder((common::milog::MilogContextHolder *const)(v1 + 272));
              retcode_name = ProtoUtils::getRetcodeName[abi:cxx11](retcode);
              v52 = std::queue<std::shared_ptr<common::minet::Packet>>::size(packet_queue);
              v37 = ServiceBox::findService<GameserverService>();
              if ( *(_BYTE *)(((unsigned __int64)v37 >> 3) + 0x7FFF8000) )
                __asan_report_load8();
              v38 = (unsigned __int64)(v37->_vptr_ServiceBase + 24);
              if ( *(_BYTE *)((v38 >> 3) + 0x7FFF8000) )
                __asan_report_load8();
              (*(void (__fastcall **)(common::milog::MiLogStream *, GameserverService *))v38)(&v63, v37);
              v51 = (const char *)std::string::c_str(&v63);
              v39 = ServiceBox::findService<GameserverService>();
              PacketQueueSize = ServiceBase::getPacketQueueSize(v39);
              v40 = (const char *)std::string::c_str(retcode_name);
              v41 = (const char *)std::string::c_str(cmd_name);
              v49 = *(_DWORD *)(v1 + 64);
              v42 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 144));
              v43 = common::minet::Packet::getUserId(v42);
              common::milog::MiLog::writeLog(
                &common::milog::MiLogDefault::default_log_obj_,
                0xBu,
                "|%s|%u|%u|%s|%d|%s|%d|%u%s|%lu",
                "playerCoroutineLoop",
                v43,
                v49,
                v41,
                (unsigned int)retcode,
                v40,
                (unsigned int)time_cost,
                PacketQueueSize,
                v51,
                v52);
              std::string::~string(&v63);
              LODWORD(v41) = time_cost;
              std::allocator<char>::allocator(&__a);
              v44 = (const char *)std::string::c_str(cmd_name);
              std::string::basic_string<std::allocator<char>>((std::string *const)&v63, v44, &__a);
              std::allocator<char>::allocator(&v53);
              std::string::basic_string<std::allocator<char>>(
                (std::string *const)(v1 + 208),
                "playerCoroutineLoop",
                &v53);
              v45 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 144));
              v46 = common::minet::Packet::getUserId(v45);
              CmdReport::addCmdRecord(
                v46,
                (const std::string *)(v1 + 208),
                (const std::string *)&v63,
                (uint32_t)v41,
                1u);
              std::string::~string((void *)(v1 + 208));
              std::allocator<char>::~allocator(&v53);
              std::string::~string(&v63);
              std::allocator<char>::~allocator(&__a);
              CoroutineHelper::clearContextPacketPtr();
              std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v1 + 144));
              v25 = 1;
            }
            std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v1 + 112));
            if ( v25 != 1 )
              break;
          }
        }
      }
      common::milog::MiLogStream::create(
        &v63,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/player.cpp",
        "corotinueLoop",
        1117);
      v47 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
              &v63,
              (const char (*)[36])"[LOGOUT]player coroutine exit, uid:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v47, (const unsigned int *)(v1 + 48));
      common::milog::MiLogStream::~MiLogStream(&v63);
      std::shared_ptr<ConfigBase>::shared_ptr((std::shared_ptr<ConfigBase> *const)(v1 + 176), 0LL);
      v48 = std::__shared_ptr_access<common::minet::Coroutine,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Coroutine,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 80));
      std::shared_ptr<ConfigBase>::operator=(&v48->config_base_ptr, (std::shared_ptr<ConfigBase> *)(v1 + 176));
      std::shared_ptr<ConfigBase>::~shared_ptr((std::shared_ptr<ConfigBase> *const)(v1 + 176));
    }
    std::shared_ptr<common::minet::Coroutine>::~shared_ptr((std::shared_ptr<common::minet::Coroutine> *const)(v1 + 80));
  }
  if ( v64 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8020) = 0;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8040) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8048) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8048) = -168430091;
  }
};

// Line 1123: range 0000000017138C02-000000001713940E
int32_t __cdecl Player::start(Player *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  std::__shared_ptr<TracingMgr,(__gnu_cxx::_Lock_policy)2>::element_type *v4; // rax
  common::milog::MiLogStream *v5; // rax
  int32_t v6; // r14d
  PlayerTimerMgr *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  UnixTimerMgr *p_uid; // rdi
  common::milog::MiLogStream *v11; // rax
  std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  unsigned __int64 v13; // rdx
  uint32_t Uid; // eax
  common::milog::MiLogStream *v15; // rax
  int32_t result; // eax
  std::__shared_ptr_access<PlayerCoroExec,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // [rsp+10h] [rbp-130h]
  Player *v19; // [rsp+28h] [rbp-118h] BYREF
  Player *__for_range; // [rsp+30h] [rbp-110h]
  const std::pair<unsigned int,std::shared_ptr<PlayerCompBase> > *v21; // [rsp+38h] [rbp-108h]
  std::tuple_element<0,const std::pair<unsigned int,std::shared_ptr<PlayerCompBase> > >::type *comp_type; // [rsp+40h] [rbp-100h]
  std::tuple_element<1,const std::pair<unsigned int,std::shared_ptr<PlayerCompBase> > >::type *player_comp_ptr; // [rsp+48h] [rbp-F8h]
  EcsBase<Player,PlayerCompBase,71>::Iterator __for_begin; // [rsp+50h] [rbp-F0h] BYREF
  EcsBase<Player,PlayerCompBase,71>::Iterator __for_end; // [rsp+60h] [rbp-E0h] BYREF
  std::_Bind_helper<false,void (Player::*)(),Player*>::type p___f; // [rsp+70h] [rbp-D0h] BYREF
  std::function<void()> p_func; // [rsp+90h] [rbp-B0h] BYREF
  common::milog::MiLogStream v28; // [rsp+B0h] [rbp-90h] BYREF
  char v29[112]; // [rsp+D0h] [rbp-70h] BYREF

  v1 = (unsigned __int64)v29;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 16 20 perf_span_proxy:1124";
  *(_QWORD *)(v1 + 16) = Player::start;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202178560;
  opentracing::v3::string_view::string_view((opentracing::v3::string_view *const)&__for_end, "Player::start");
  v4 = std::__shared_ptr<TracingMgr,(__gnu_cxx::_Lock_policy)2>::get(&ResourceBox::tracing_mgr_ptr);
  PerfSpanProxy::PerfSpanProxy((PerfSpanProxy *const)(v1 + 32), v4, (opentracing::v3::string_view)__for_end);
  if ( std::operator==<PlayerTimerMgr>(0LL, &this->player_timer_mgr_ptr_) )
  {
    common::milog::MiLogStream::create(
      &v28,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "start",
      1128);
    v5 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
           &v28,
           (const char (*)[38])"player_timer_mgr_ptr is nullptr, uid:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, &this->uid_);
    common::milog::MiLogStream::~MiLogStream(&v28);
    v6 = -1;
  }
  else
  {
    v7 = std::__shared_ptr_access<PlayerTimerMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerTimerMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->player_timer_mgr_ptr_);
    if ( PlayerTimerMgr::start(v7, "./src/player/player.cpp", "start", 1132) )
    {
      common::milog::MiLogStream::create(
        &v28,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/player.cpp",
        "start",
        1134);
      v8 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
             &v28,
             (const char (*)[40])"player_timer_mgr_ptr start failed, uid:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, &this->uid_);
      common::milog::MiLogStream::~MiLogStream(&v28);
      v6 = -1;
    }
    else if ( std::operator==<UnixTimerMgr>(0LL, &this->unix_timer_mgr_ptr_) )
    {
      common::milog::MiLogStream::create(
        &v28,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/player.cpp",
        "start",
        1140);
      v9 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
             &v28,
             (const char (*)[36])"unix_timer_mgr_ptr is nullptr, uid:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, &this->uid_);
      common::milog::MiLogStream::~MiLogStream(&v28);
      v6 = -1;
    }
    else
    {
      p_uid = std::__shared_ptr_access<UnixTimerMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<UnixTimerMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->unix_timer_mgr_ptr_);
      if ( *(_BYTE *)(((unsigned __int64)&this->uid_ >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&this->uid_ >> 3) + 0x7FFF8000) <= 3 )
      {
        p_uid = (UnixTimerMgr *)&this->uid_;
        __asan_report_load4(&this->uid_);
      }
      if ( UnixTimerMgr::start(p_uid, "./src/player/player.cpp", "start", 1144, this->uid_, 0) )
      {
        common::milog::MiLogStream::create(
          &v28,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/player.cpp",
          "start",
          1146);
        v11 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
                &v28,
                (const char (*)[38])"unix_timer_mgr_ptr start failed, uid:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, &this->uid_);
        common::milog::MiLogStream::~MiLogStream(&v28);
        v6 = -1;
      }
      else
      {
        __for_range = this;
        EcsBase<Player,PlayerCompBase,71u>::begin((const EcsBase<Player,PlayerCompBase,71> *const)&__for_begin);
        EcsBase<Player,PlayerCompBase,71u>::end((const EcsBase<Player,PlayerCompBase,71> *const)&__for_end);
        while ( EcsBase<Player,PlayerCompBase,71u>::Iterator::operator!=(&__for_begin, &__for_end) )
        {
          v21 = EcsBase<Player,PlayerCompBase,71u>::Iterator::operator*(&__for_begin);
          comp_type = (std::tuple_element<0,const std::pair<unsigned int,std::shared_ptr<PlayerCompBase> > >::type *)std::get<0ul,unsigned int,std::shared_ptr<PlayerCompBase>>(v21);
          player_comp_ptr = (std::tuple_element<1,const std::pair<unsigned int,std::shared_ptr<PlayerCompBase> > >::type *)std::get<1ul,unsigned int,std::shared_ptr<PlayerCompBase>>(v21);
          v12 = std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false> *const)player_comp_ptr);
          if ( *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          v13 = (unsigned __int64)(v12->_vptr_PlayerCompBase + 7);
          if ( *(_BYTE *)((v13 >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          if ( (*(unsigned int (__fastcall **)(std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *))v13)(v12) )
          {
            common::milog::MiLogStream::create(
              &v28,
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/player/player.cpp",
              "start",
              1156);
            Uid = Player::getUid(this);
            common::milog::MiLogStream::operator()(&v28, "start for uid=%u failed", Uid);
            common::milog::MiLogStream::~MiLogStream(&v28);
            v6 = -1;
            goto LABEL_28;
          }
          EcsBase<Player,PlayerCompBase,71u>::Iterator::operator++(&__for_begin);
        }
        if ( std::operator==<PlayerCoroExec>(0LL, &this->coro_exec_ptr_) )
        {
          common::milog::MiLogStream::create(
            &v28,
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/player/player.cpp",
            "start",
            1163);
          v15 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
                  &v28,
                  (const char (*)[30])"coro_exec_ptr_ is empty, uid:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, &this->uid_);
          common::milog::MiLogStream::~MiLogStream(&v28);
          v6 = -1;
        }
        else
        {
          if ( *(_BYTE *)(((unsigned __int64)&this->uid_ >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&this->uid_ >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&this->uid_);
          }
          v17 = std::__shared_ptr_access<PlayerCoroExec,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerCoroExec,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->coro_exec_ptr_);
          std::function<void ()(void)>::function((std::function<void()> *const)&v28, 0LL);
          v19 = this;
          __for_end.ecs_base_ = (const EcsBase<Player,PlayerCompBase,71> *)Player::corotinueLoop;
          *(_QWORD *)&__for_end.type_index_ = 0LL;
          std::bind<void (Player::*)(void),Player*>(
            &p___f,
            (void (**)(Player *))&__for_end,
            &v19,
            (Player **)&__for_end);
          std::function<void ()(void)>::function<std::_Bind<void (Player::*)(void) ()(Player*)>,void,void>(
            &p_func,
            &p___f);
          PlayerCoroExec::start(v17, &p_func, (std::function<void()> *)&v28);
          std::function<void ()(void)>::~function(&p_func);
          std::function<void ()(void)>::~function((std::function<void()> *const)&v28);
          v6 = 0;
        }
      }
    }
  }
LABEL_28:
  PerfSpanProxy::~PerfSpanProxy((PerfSpanProxy *const)(v1 + 32));
  result = v6;
  if ( v29 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1182: range 0000000017139410-000000001713AA8B
__int64 __fastcall Player::login(
        Player *const this,
        bool is_new_player,
        bool is_relogin,
        __int32 target_uid,
        __int32 target_home_owner_uid,
        __int8 is_client_relogin)
{
  unsigned int v6; // r14d
  unsigned __int64 v7; // r13
  __int64 v8; // rax
  _DWORD *v9; // r12
  std::__shared_ptr_access<TracingMgr,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  bool v11; // al
  std::__shared_ptr<TracingMgr,(__gnu_cxx::_Lock_policy)2>::element_type *v12; // rax
  common::milog::MiLogStream *v13; // r15
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // r15
  PlayerBasicComp *BasicComp; // rax
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // r15
  PlayerBasicComp *v31; // rax
  uint32_t v32; // ecx
  char v33; // dl
  __int64 v34; // rsi
  __int64 v35; // rdx
  uint32_t v36; // ecx
  char v37; // dl
  __int64 v38; // rdx
  common::milog::MiLogStream *v39; // rsi
  PlayerBasicComp *v40; // r15
  const std::string *v41; // rax
  PlayerBasicComp *v42; // r15
  const std::string *v43; // rax
  PlayerSceneComp *SceneComp; // rax
  common::milog::MiLogStream *v45; // rax
  std::__shared_ptr<PlayerCompBase,(__gnu_cxx::_Lock_policy)2>::element_type *v46; // rax
  int (**vptr_PlayerCompBase)(...); // rax
  const char *v48; // rax
  std::__shared_ptr<TracingMgr,(__gnu_cxx::_Lock_policy)2>::element_type *v49; // rax
  std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v50; // rax
  unsigned __int64 v51; // rdx
  uint32_t Uid; // eax
  int v53; // r15d
  uint32_t v54; // eax
  std::__shared_ptr<TracingMgr,(__gnu_cxx::_Lock_policy)2>::element_type *v55; // rax
  __int64 v56; // rsi
  __int64 v57; // rdx
  std::__shared_ptr<TracingMgr,(__gnu_cxx::_Lock_policy)2>::element_type *v58; // rax
  PlayerSceneComp *v59; // rax
  PlayerAvatarComp *AvatarComp; // rax
  common::milog::MiLogStream *v61; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v62; // rdx
  bool *p_is_sec_channel_open; // rax
  bool is_sec_channel_open; // r14
  common::milog::MiLogStream *v65; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyLogin,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v66; // rcx
  std::__shared_ptr_access<proto_log::PlayerLogBodyLogin,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v67; // r14
  PlayerBasicComp *v68; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyLogin,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v69; // r14
  PlayerBasicComp *v70; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyLogin,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v71; // r14
  const std::string *v72; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyLogin,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v73; // r14
  const std::string *v74; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyLogin,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v75; // r14
  const std::string *v76; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyLogin,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v77; // r14
  google::protobuf::uint32 v78; // eax
  std::__shared_ptr_access<proto_log::PlayerLogBodyLogin,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v79; // r14
  google::protobuf::uint32 v80; // eax
  std::__shared_ptr_access<proto_log::PlayerLogBodyLogin,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v81; // r14
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v82; // rdx
  bool *p_is_ip_port_log_report; // rax
  bool is_ip_port_log_report; // r14
  std::__shared_ptr_access<proto_log::PlayerLogBodyLogin,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v85; // r14
  uint32_t PlayerClientPort; // eax
  std::__shared_ptr_access<proto_log::PlayerLogBodyLogin,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v87; // r14
  std::__shared_ptr_access<proto_log::PlayerLogBodyLogin,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v88; // r14
  uint32_t PlayerGatePort; // eax
  std::__shared_ptr_access<proto_log::PlayerLogBodyExtLogin,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v90; // r14
  PlayerRechargeComp *RechargeComp; // rax
  uint32_t HcoinCardProductRemainRewardDays; // eax
  std::__shared_ptr_access<proto_log::PlayerLogBodyExtLogin,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v93; // r14
  PlayerBasicComp *v94; // rax
  const std::string *v95; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyExtLogin,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v96; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyExtLogin,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v97; // r14
  PlayerBasicComp *v98; // rax
  const std::string *v99; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyExtLogin,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v100; // rax
  __int64 result; // rax
  std::string v102; // [rsp+0h] [rbp-280h]
  char *v103; // [rsp+8h] [rbp-278h]
  bool is_client_relogina; // [rsp+14h] [rbp-26Ch]
  bool do_perf_span; // [rsp+3Fh] [rbp-241h]
  unsigned int val; // [rsp+40h] [rbp-240h] BYREF
  unsigned int LastLoginPlatform; // [rsp+44h] [rbp-23Ch] BYREF
  unsigned int v110; // [rsp+48h] [rbp-238h] BYREF
  uint32_t now; // [rsp+4Ch] [rbp-234h]
  const proto::PlayerLoginReq *player_login_req; // [rsp+50h] [rbp-230h]
  Player *__for_range; // [rsp+58h] [rbp-228h]
  const std::pair<unsigned int,std::shared_ptr<PlayerCompBase> > *v114; // [rsp+60h] [rbp-220h]
  std::tuple_element<0,const std::pair<unsigned int,std::shared_ptr<PlayerCompBase> > >::type *comp_type; // [rsp+68h] [rbp-218h]
  std::tuple_element<1,const std::pair<unsigned int,std::shared_ptr<PlayerCompBase> > >::type *player_comp_ptr; // [rsp+70h] [rbp-210h]
  const PlayerCompBase *player_comp_pointer; // [rsp+78h] [rbp-208h]
  opentracing::v3::string_view operation_name; // [rsp+80h] [rbp-200h] BYREF
  common::milog::MiLogStream v119; // [rsp+90h] [rbp-1F0h] BYREF
  char v120[464]; // [rsp+B0h] [rbp-1D0h] BYREF

  *((_DWORD *)&v102._anon_0._M_allocated_capacity + 3) = target_uid;
  *((_DWORD *)&v102._anon_0._M_allocated_capacity + 2) = target_home_owner_uid;
  v102._anon_0._M_local_buf[4] = is_client_relogin;
  v7 = (unsigned __int64)v120;
  v102._M_string_length = (std::string::size_type)v120;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v8 = __asan_stack_malloc_3(416LL);
    if ( v8 )
      v7 = v8;
  }
  *(_QWORD *)v7 = 1102416563LL;
  *(_QWORD *)(v7 + 8) = "11 32 1 11 holder:1194 48 1 19 is_cross_month:1251 64 4 15 target_uid:1181 80 4 26 target_home_o"
                        "wner_uid:1181 96 16 20 perf_span_proxy:1184 128 16 17 log_body_ptr:1318 160 16 16 log_ext_ptr:13"
                        "38 192 16 20 perf_span_proxy:1240 224 24 11 notify:1282 288 32 20 check_lua_shell:1226 352 32 19"
                        " operation_name:1231";
  *(_QWORD *)(v7 + 16) = Player::login;
  v9 = (_DWORD *)(v7 >> 3);
  v9[536862720] = -235802127;
  v9[536862721] = -234753535;
  v9[536862722] = -234556924;
  v9[536862723] = -219021312;
  v9[536862724] = -219021312;
  v9[536862725] = -219021312;
  v9[536862726] = -219021312;
  v9[536862727] = -234881024;
  v9[536862728] = -218959118;
  v9[536862730] = -218959118;
  v9[536862732] = -202116109;
  *(_DWORD *)(v7 + 64) = *((_DWORD *)&v102._anon_0._M_allocated_capacity + 3);
  *(_DWORD *)(v7 + 80) = *((_DWORD *)&v102._anon_0._M_allocated_capacity + 2);
  v11 = 0;
  if ( std::operator!=<TracingMgr>(&ResourceBox::tracing_mgr_ptr, 0LL) )
  {
    v10 = std::__shared_ptr_access<TracingMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TracingMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)&ResourceBox::tracing_mgr_ptr);
    if ( TracingMgr::isPerfSpanEnabled(v10) )
      v11 = 1;
  }
  do_perf_span = v11;
  opentracing::v3::string_view::string_view(&operation_name, "Player::login");
  v12 = std::__shared_ptr<TracingMgr,(__gnu_cxx::_Lock_policy)2>::get(&ResourceBox::tracing_mgr_ptr);
  PerfSpanProxy::PerfSpanProxy((PerfSpanProxy *const)(v7 + 96), v12, operation_name);
  player_login_req = Player::getSessionLoginReq(this);
  common::milog::MiLogStream::create(
    &v119,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/player/player.cpp",
    "login",
    1189);
  v13 = common::milog::MiLogStream::operator<<<char [5],(char *[5])0>(&v119, (const char (*)[5])"uid:");
  val = Player::getUid(this);
  v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, &val);
  v15 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v14, (const char (*)[16])" is_new_player:");
  v16 = common::milog::MiLogStream::operator<<(v15, is_new_player);
  v17 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v16, (const char (*)[13])" is_relogin:");
  v18 = common::milog::MiLogStream::operator<<(v17, is_relogin);
  v19 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v18, (const char (*)[13])" target_uid:");
  v20 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, (const unsigned int *)(v7 + 64));
  v21 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
          v20,
          (const char (*)[24])" target_home_owner_uid:");
  v22 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v21, (const unsigned int *)(v7 + 80));
  v23 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(v22, (const char (*)[20])" is_client_relogin:");
  v24 = common::milog::MiLogStream::operator<<(v23, v102._anon_0._M_local_buf[4]);
  v25 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v24, (const char (*)[15])" platform_type");
  v26 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v25, &this->platform_type_);
  v27 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
          v26,
          (const char (*)[22])" last_login_platform:");
  BasicComp = Player::getBasicComp(this);
  LastLoginPlatform = PlayerBasicComp::getLastLoginPlatform(BasicComp);
  v29 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v27, &LastLoginPlatform);
  v30 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(v29, (const char (*)[20])" req.platform_type:");
  v110 = proto::PlayerLoginReq::platform_type(player_login_req);
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v30, &v110);
  common::milog::MiLogStream::~MiLogStream(&v119);
  v31 = Player::getBasicComp(this);
  PlayerBasicComp::getNextTransNo[abi:cxx11]((std::string *)&v119, v31);
  v34 = 2LL;
  StatLogUtils::ContextHolder::ContextHolder((StatLogUtils::ContextHolder *const)(v7 + 32), 2u, v102);
  std::string::~string(&v119);
  v32 = proto::PlayerLoginReq::platform_type(player_login_req);
  v33 = *(_BYTE *)(((unsigned __int64)&this->platform_type_ >> 3) + 0x7FFF8000);
  LOBYTE(v34) = v33 != 0;
  v35 = (v33 != 0) & (unsigned __int8)((char)((((_BYTE)this - 68) & 7) + 3) >= v33);
  if ( (_BYTE)v35 )
    __asan_report_store4(&this->platform_type_, v34, v35);
  this->platform_type_ = v32;
  v36 = proto::PlayerLoginReq::reg_platform(player_login_req);
  v37 = *(_BYTE *)(((unsigned __int64)&this->reg_platform_ >> 3) + 0x7FFF8000);
  LOBYTE(v34) = v37 != 0;
  v38 = (v37 != 0) & (unsigned __int8)((char)((((_BYTE)this - 68) & 7) + 3) >= v37);
  if ( (_BYTE)v38 )
    __asan_report_store4(&this->reg_platform_, v34, v38);
  this->reg_platform_ = v36;
  v39 = (common::milog::MiLogStream *)((((_BYTE)this - 68) & 7u) + 3);
  if ( *(_BYTE *)(((unsigned __int64)&this->platform_type_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->platform_type_ >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->platform_type_);
  }
  if ( TxtConfigMgr::isPsnPlatform(this->platform_type_) )
  {
    v40 = Player::getBasicComp(this);
    v41 = proto::PlayerLoginReq::online_id[abi:cxx11](player_login_req);
    std::string::basic_string(&v119, v41);
    PlayerBasicComp::setOnlineId(v40, (std::string *)&v119);
    std::string::~string(&v119);
    v42 = Player::getBasicComp(this);
    v43 = proto::PlayerLoginReq::psn_id[abi:cxx11](player_login_req);
    std::string::basic_string(&v119, v43);
    v39 = &v119;
    PlayerBasicComp::setPsnId(v42, (std::string *)&v119);
    std::string::~string(&v119);
  }
  if ( *(char *)(((unsigned __int64)&this->is_relogin_ >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->is_relogin_, v39, &this->is_relogin_);
  this->is_relogin_ = is_relogin;
  SceneComp = Player::getSceneComp(this);
  PlayerSceneComp::preLogin(SceneComp, is_relogin);
  if ( is_new_player && Player::firstLogin(this) )
  {
    common::milog::MiLogStream::create(
      &v119,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/player.cpp",
      "login",
      1213);
    v45 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v119, (const char (*)[17])"firstLogin fails");
    operator<<(v45, this);
    common::milog::MiLogStream::~MiLogStream(&v119);
    v6 = -1;
    goto LABEL_69;
  }
  Player::checkVersionAndModifyPlayerData(this);
  Player::checkInjectFix(this);
  Player::CheckLuaShellOnLogin::CheckLuaShellOnLogin(
    (Player::CheckLuaShellOnLogin *const)(v7 + 288),
    this,
    is_relogin,
    is_client_relogina);
  __for_range = this;
  EcsBase<Player,PlayerCompBase,71u>::begin((const EcsBase<Player,PlayerCompBase,71> *const)(v7 + 128));
  EcsBase<Player,PlayerCompBase,71u>::end((const EcsBase<Player,PlayerCompBase,71> *const)(v7 + 160));
  while ( EcsBase<Player,PlayerCompBase,71u>::Iterator::operator!=(
            (const EcsBase<Player,PlayerCompBase,71>::Iterator *const)(v7 + 128),
            (const EcsBase<Player,PlayerCompBase,71>::Iterator *)(v7 + 160)) )
  {
    v114 = EcsBase<Player,PlayerCompBase,71u>::Iterator::operator*((const EcsBase<Player,PlayerCompBase,71>::Iterator *const)(v7 + 128));
    comp_type = (std::tuple_element<0,const std::pair<unsigned int,std::shared_ptr<PlayerCompBase> > >::type *)std::get<0ul,unsigned int,std::shared_ptr<PlayerCompBase>>(v114);
    player_comp_ptr = (std::tuple_element<1,const std::pair<unsigned int,std::shared_ptr<PlayerCompBase> > >::type *)std::get<1ul,unsigned int,std::shared_ptr<PlayerCompBase>>(v114);
    std::string::basic_string(v7 + 352);
    if ( do_perf_span )
    {
      v46 = std::__shared_ptr<PlayerCompBase,(__gnu_cxx::_Lock_policy)2>::get(player_comp_ptr);
      player_comp_pointer = v46;
      if ( !v46 )
      {
        __asan_handle_no_return();
        __cxa_bad_typeid();
      }
      if ( *(_BYTE *)(((unsigned __int64)v46 >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      vptr_PlayerCompBase = v46->_vptr_PlayerCompBase;
      if ( *(_BYTE *)(((unsigned __int64)(vptr_PlayerCompBase - 1) >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v48 = std::type_info::name((const std::type_info *const)*(vptr_PlayerCompBase - 1));
      std::string::operator=(v7 + 352, v48);
      std::string::operator+=(v7 + 352, "::onLogin");
    }
    opentracing::v3::string_view::string_view(&operation_name, (const std::string *)(v7 + 352));
    v49 = std::__shared_ptr<TracingMgr,(__gnu_cxx::_Lock_policy)2>::get(&ResourceBox::tracing_mgr_ptr);
    PerfSpanProxy::PerfSpanProxy((PerfSpanProxy *const)(v7 + 192), v49, operation_name);
    v50 = std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false> *const)player_comp_ptr);
    if ( *(_BYTE *)(((unsigned __int64)v50 >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v51 = (unsigned __int64)(v50->_vptr_PlayerCompBase + 9);
    if ( *(_BYTE *)((v51 >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    if ( (*(unsigned int (__fastcall **)(std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, bool))v51)(
           v50,
           is_new_player) )
    {
      common::milog::MiLogStream::create(
        &v119,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/player.cpp",
        "login",
        1244);
      Uid = Player::getUid(this);
      common::milog::MiLogStream::operator()(&v119, "login failed with uid=%u", Uid);
      common::milog::MiLogStream::~MiLogStream(&v119);
      v6 = -1;
      v53 = 0;
    }
    else
    {
      v53 = 1;
    }
    PerfSpanProxy::~PerfSpanProxy((PerfSpanProxy *const)(v7 + 192));
    std::string::~string((void *)(v7 + 352));
    if ( v53 != 1 )
      goto LABEL_68;
    EcsBase<Player,PlayerCompBase,71u>::Iterator::operator++((EcsBase<Player,PlayerCompBase,71>::Iterator *const)(v7 + 128));
  }
  if ( !is_new_player && !is_relogin )
  {
    *(_BYTE *)(v7 + 48) = 0;
    v54 = common::tools::TimeUtils::getNow();
    if ( Player::checkAndSetLastRefreshTime(this, v54, (bool *)(v7 + 48)) )
    {
      opentracing::v3::string_view::string_view(&operation_name, "onLoginDailyRefresh");
      v55 = std::__shared_ptr<TracingMgr,(__gnu_cxx::_Lock_policy)2>::get(&ResourceBox::tracing_mgr_ptr);
      PerfSpanProxy::PerfSpanProxy((PerfSpanProxy *const)(v7 + 192), v55, operation_name);
      Player::onLoginDailyRefresh(this);
      PerfSpanProxy::~PerfSpanProxy((PerfSpanProxy *const)(v7 + 192));
    }
    if ( *(_BYTE *)(v7 + 48) )
      Player::onLoginMonthlyRefresh(this);
  }
  v56 = (((_BYTE)this - 60) & 7u) + 3;
  v57 = (*(_BYTE *)(((unsigned __int64)&this->login_state_ >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)((((_BYTE)this - 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->login_state_ >> 3) + 0x7FFF8000));
  if ( (_BYTE)v57 )
    __asan_report_store4(&this->login_state_, v56, v57);
  this->login_state_ = Login;
  now = common::tools::TimeUtils::getNow();
  if ( *(_BYTE *)(((unsigned __int64)&this->last_send_online_notify_time_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->last_send_online_notify_time_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->last_send_online_notify_time_, v56, &this->last_send_online_notify_time_);
  }
  this->last_send_online_notify_time_ = now;
  Player::updateLastPingTime(this);
  Player::addTimer(this);
  opentracing::v3::string_view::string_view(&operation_name, "afterLogin");
  v58 = std::__shared_ptr<TracingMgr,(__gnu_cxx::_Lock_policy)2>::get(&ResourceBox::tracing_mgr_ptr);
  PerfSpanProxy::PerfSpanProxy((PerfSpanProxy *const)(v7 + 192), v58, operation_name);
  v59 = Player::getSceneComp(this);
  PlayerSceneComp::afterLogin(v59);
  PerfSpanProxy::~PerfSpanProxy((PerfSpanProxy *const)(v7 + 192));
  AvatarComp = Player::getAvatarComp(this);
  if ( !PlayerAvatarComp::getAvatarCount(AvatarComp) )
  {
    proto::DoSetPlayerBornDataNotify::DoSetPlayerBornDataNotify((proto::DoSetPlayerBornDataNotify *const)(v7 + 224));
    Player::sendProto(this, (const google::protobuf::Message *)(v7 + 224));
    proto::DoSetPlayerBornDataNotify::~DoSetPlayerBornDataNotify((proto::DoSetPlayerBornDataNotify *const)(v7 + 224));
LABEL_54:
    if ( Player::isSegmentCrcOpen(this) )
      Player::startCheckSegmentCrc(this);
    std::string::clear(&this->security_channel_str_);
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)(v7 + 192));
    v62 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 192));
    p_is_sec_channel_open = &v62->security_config.is_sec_channel_open;
    if ( *(_BYTE *)(((unsigned __int64)p_is_sec_channel_open >> 3) + 0x7FFF8000) != 0
      && ((unsigned __int8)p_is_sec_channel_open & 7) >= *(_BYTE *)(((unsigned __int64)p_is_sec_channel_open >> 3)
                                                                  + 0x7FFF8000) )
    {
      __asan_report_load1(p_is_sec_channel_open);
    }
    is_sec_channel_open = v62->security_config.is_sec_channel_open;
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v7 + 192));
    if ( is_sec_channel_open
      && SecurityUtils::genSecurityChannelInfoOnLogin(&this->security_channel_, &this->security_channel_str_) )
    {
      common::milog::MiLogStream::create(
        &v119,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/player.cpp",
        "login",
        1310);
      v65 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
              &v119,
              (const char (*)[44])"genSecurityChannelInfoOnLogin fail, player:");
      operator<<(v65, this);
      common::milog::MiLogStream::~MiLogStream(&v119);
    }
    Player::tryNotifyPlayerStatusToSafeServer(this, Login);
    common::tools::perf::make_shared<proto_log::PlayerLogBodyLogin>();
    v66 = std::__shared_ptr_access<proto_log::PlayerLogBodyLogin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyLogin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 128));
    if ( *(_BYTE *)(((unsigned __int64)&this->platform_type_ >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)this - 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->platform_type_ >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(&this->platform_type_);
    }
    proto_log::PlayerLogBodyLogin::set_platform(v66, this->platform_type_);
    v67 = std::__shared_ptr_access<proto_log::PlayerLogBodyLogin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyLogin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 128));
    v68 = Player::getBasicComp(this);
    PlayerBasicComp::getRegisterCps[abi:cxx11]((std::string *)&v119, v68);
    proto_log::PlayerLogBodyLogin::set_register_cps(v67, (std::string *)&v119);
    std::string::~string(&v119);
    v69 = std::__shared_ptr_access<proto_log::PlayerLogBodyLogin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyLogin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 128));
    v70 = Player::getBasicComp(this);
    PlayerBasicComp::getCps[abi:cxx11]((std::string *)&v119, v70);
    proto_log::PlayerLogBodyLogin::set_cps(v69, (std::string *)&v119);
    std::string::~string(&v119);
    v71 = std::__shared_ptr_access<proto_log::PlayerLogBodyLogin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyLogin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 128));
    v72 = proto::PlayerLoginReq::device_uuid[abi:cxx11](player_login_req);
    proto_log::PlayerLogBodyLogin::set_device_uuid(v71, v72);
    v73 = std::__shared_ptr_access<proto_log::PlayerLogBodyLogin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyLogin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 128));
    v74 = proto::PlayerLoginReq::device_info[abi:cxx11](player_login_req);
    proto_log::PlayerLogBodyLogin::set_device_info(v73, v74);
    v75 = std::__shared_ptr_access<proto_log::PlayerLogBodyLogin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyLogin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 128));
    v76 = proto::PlayerLoginReq::system_version[abi:cxx11](player_login_req);
    proto_log::PlayerLogBodyLogin::set_system_info(v75, v76);
    v77 = std::__shared_ptr_access<proto_log::PlayerLogBodyLogin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyLogin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 128));
    v78 = proto::PlayerLoginReq::channel_id(player_login_req);
    proto_log::PlayerLogBodyLogin::set_channel_id(v77, v78);
    v79 = std::__shared_ptr_access<proto_log::PlayerLogBodyLogin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyLogin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 128));
    v80 = proto::PlayerLoginReq::sub_channel_id(player_login_req);
    proto_log::PlayerLogBodyLogin::set_sub_channel_id(v79, v80);
    v81 = std::__shared_ptr_access<proto_log::PlayerLogBodyLogin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyLogin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 128));
    Player::getPlayerClientIpForStatLog[abi:cxx11]((std::string *)&v119, this);
    proto_log::PlayerLogBodyLogin::set_client_ip(v81, (std::string *)&v119);
    std::string::~string(&v119);
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&operation_name);
    v82 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&operation_name);
    p_is_ip_port_log_report = &v82->is_ip_port_log_report;
    if ( *(_BYTE *)(((unsigned __int64)p_is_ip_port_log_report >> 3) + 0x7FFF8000) != 0
      && ((unsigned __int8)p_is_ip_port_log_report & 7) >= *(_BYTE *)(((unsigned __int64)p_is_ip_port_log_report >> 3)
                                                                    + 0x7FFF8000) )
    {
      __asan_report_load1(p_is_ip_port_log_report);
    }
    is_ip_port_log_report = v82->is_ip_port_log_report;
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)&operation_name);
    if ( is_ip_port_log_report )
    {
      v85 = std::__shared_ptr_access<proto_log::PlayerLogBodyLogin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyLogin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 128));
      PlayerClientPort = Player::getPlayerClientPort(this);
      proto_log::PlayerLogBodyLogin::set_client_port(v85, PlayerClientPort);
      v87 = std::__shared_ptr_access<proto_log::PlayerLogBodyLogin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyLogin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 128));
      Player::getPlayerGateIp[abi:cxx11]((std::string *)&v119, this);
      proto_log::PlayerLogBodyLogin::set_gate_ip(v87, (std::string *)&v119);
      std::string::~string(&v119);
      v88 = std::__shared_ptr_access<proto_log::PlayerLogBodyLogin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyLogin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 128));
      PlayerGatePort = Player::getPlayerGatePort(this);
      proto_log::PlayerLogBodyLogin::set_gate_port(v88, PlayerGatePort);
    }
    common::tools::perf::make_shared<proto_log::PlayerLogBodyExtLogin>();
    v90 = std::__shared_ptr_access<proto_log::PlayerLogBodyExtLogin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyExtLogin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 160));
    RechargeComp = Player::getRechargeComp(this);
    HcoinCardProductRemainRewardDays = PlayerRechargeComp::getHcoinCardProductRemainRewardDays(RechargeComp);
    proto_log::PlayerLogBodyExtLogin::set_card_product_remain_days(v90, HcoinCardProductRemainRewardDays);
    v93 = std::__shared_ptr_access<proto_log::PlayerLogBodyExtLogin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyExtLogin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 160));
    v94 = Player::getBasicComp(this);
    v95 = PlayerBasicComp::getClientAppVersion[abi:cxx11](v94);
    proto_log::PlayerLogBodyExtLogin::set_client_version(v93, v95);
    v96 = std::__shared_ptr_access<proto_log::PlayerLogBodyExtLogin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyExtLogin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 160));
    proto_log::PlayerLogBodyExtLogin::set_account_uid(v96, &this->account_uid_);
    v97 = std::__shared_ptr_access<proto_log::PlayerLogBodyExtLogin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyExtLogin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 160));
    v98 = Player::getBasicComp(this);
    v99 = PlayerBasicComp::getNickName[abi:cxx11](v98);
    proto_log::PlayerLogBodyExtLogin::set_nickname(v97, v99);
    v100 = std::__shared_ptr_access<proto_log::PlayerLogBodyExtLogin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyExtLogin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 160));
    proto_log::PlayerLogBodyExtLogin::set_is_client_relogin(v100, is_client_relogina);
    std::shared_ptr<google::protobuf::Message>::shared_ptr<proto_log::PlayerLogBodyExtLogin,void>(
      (std::shared_ptr<google::protobuf::Message> *const)&operation_name,
      (const std::shared_ptr<proto_log::PlayerLogBodyExtLogin> *)(v7 + 160));
    std::shared_ptr<google::protobuf::Message>::shared_ptr<proto_log::PlayerLogBodyLogin,void>(
      (std::shared_ptr<google::protobuf::Message> *const)(v7 + 192),
      (const std::shared_ptr<proto_log::PlayerLogBodyLogin> *)(v7 + 128));
    Player::printStatLog(this, (MessagePtr *)(v7 + 192), (MessagePtr *)&operation_name, 0xEu);
    std::shared_ptr<google::protobuf::Message>::~shared_ptr((std::shared_ptr<google::protobuf::Message> *const)(v7 + 192));
    std::shared_ptr<google::protobuf::Message>::~shared_ptr((std::shared_ptr<google::protobuf::Message> *const)&operation_name);
    v6 = 0;
    std::shared_ptr<proto_log::PlayerLogBodyExtLogin>::~shared_ptr((std::shared_ptr<proto_log::PlayerLogBodyExtLogin> *const)(v7 + 160));
    std::shared_ptr<proto_log::PlayerLogBodyLogin>::~shared_ptr((std::shared_ptr<proto_log::PlayerLogBodyLogin> *const)(v7 + 128));
    goto LABEL_68;
  }
  Player::setIsQuitMp(this, 0);
  if ( !Player::initAndBeginEnterScene(this, is_relogin, *(_DWORD *)(v7 + 64), *(_DWORD *)(v7 + 80), is_client_relogina) )
    goto LABEL_54;
  common::milog::MiLogStream::create(
    &v119,
    &common::milog::MiLogDefault::default_log_obj_,
    3u,
    "./src/player/player.cpp",
    "login",
    1293);
  v61 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
          &v119,
          (const char (*)[28])"initBeforeEnterScene failed");
  operator<<(v61, this);
  common::milog::MiLogStream::~MiLogStream(&v119);
  v6 = -1;
LABEL_68:
  Player::CheckLuaShellOnLogin::~CheckLuaShellOnLogin((Player::CheckLuaShellOnLogin *const)(v7 + 288));
LABEL_69:
  StatLogUtils::ContextHolder::~ContextHolder((StatLogUtils::ContextHolder *const)(v7 + 32));
  PerfSpanProxy::~PerfSpanProxy((PerfSpanProxy *const)(v7 + 96));
  result = v6;
  if ( v103 == (char *)v7 )
  {
    *(_QWORD *)((v7 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v7 >> 3) + 0x7FFF8020) = 0;
    *(_DWORD *)((v7 >> 3) + 0x7FFF8028) = 0;
    *(_DWORD *)((v7 >> 3) + 0x7FFF8030) = 0;
  }
  else
  {
    *(_QWORD *)v7 = 1172321806LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v7 >> 3) + 0x7FFF8030) = -168430091;
  }
  return result;
};

// Line 1351: range 000000001713AA8C-000000001713B122
int32_t __cdecl Player::firstLogin(Player *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  std::__shared_ptr<TracingMgr,(__gnu_cxx::_Lock_policy)2>::element_type *v4; // rax
  PlayerBasicComp *BasicComp; // rax
  std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  unsigned __int64 v7; // rdx
  uint32_t Uid; // eax
  int32_t v9; // r14d
  std::__shared_ptr_access<proto_log::PlayerLogBodyRegister,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // r14
  google::protobuf::uint32 v11; // eax
  std::__shared_ptr_access<proto_log::PlayerLogBodyRegister,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // r14
  PlayerBasicComp *v13; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyRegister,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // r14
  PlayerBasicComp *v15; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyRegister,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // r14
  std::__shared_ptr_access<proto_log::PlayerLogBodyRegister,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // r14
  const std::string *v18; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyRegister,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // r14
  const std::string *v20; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyRegister,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // r14
  const std::string *v22; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyRegister,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v23; // r14
  google::protobuf::uint32 v24; // eax
  std::__shared_ptr_access<proto_log::PlayerLogBodyRegister,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v25; // r14
  google::protobuf::uint32 v26; // eax
  int32_t result; // eax
  std::string v28; // [rsp+0h] [rbp-130h]
  Player *thisa; // [rsp+8h] [rbp-128h]
  const proto::PlayerLoginReq *player_login_req; // [rsp+20h] [rbp-110h]
  const EcsBase<Player,PlayerCompBase,71>::CompBasePair *v31; // [rsp+28h] [rbp-108h]
  std::tuple_element<1,const std::pair<unsigned int,std::shared_ptr<PlayerCompBase> > >::type *player_comp_ptr; // [rsp+38h] [rbp-F8h]
  EcsBase<Player,PlayerCompBase,71>::Iterator __for_begin; // [rsp+40h] [rbp-F0h] BYREF
  EcsBase<Player,PlayerCompBase,71>::Iterator __for_end; // [rsp+50h] [rbp-E0h] BYREF
  std::string value; // [rsp+60h] [rbp-D0h] BYREF
  char v36[176]; // [rsp+80h] [rbp-B0h] BYREF

  v28._M_string_length = (std::string::size_type)this;
  v1 = (unsigned __int64)v36;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "3 48 1 11 holder:1355 64 16 20 perf_span_proxy:1352 96 16 17 log_body_ptr:1368";
  *(_QWORD *)(v1 + 16) = Player::firstLogin;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862722] = -219021312;
  v3[536862723] = -202178560;
  opentracing::v3::string_view::string_view((opentracing::v3::string_view *const)&__for_end, "Player::firstLogin");
  v4 = std::__shared_ptr<TracingMgr,(__gnu_cxx::_Lock_policy)2>::get(&ResourceBox::tracing_mgr_ptr);
  PerfSpanProxy::PerfSpanProxy((PerfSpanProxy *const)(v1 + 64), v4, (opentracing::v3::string_view)__for_end);
  BasicComp = Player::getBasicComp(this);
  PlayerBasicComp::getNextTransNo[abi:cxx11](&value, BasicComp);
  StatLogUtils::ContextHolder::ContextHolder((StatLogUtils::ContextHolder *const)(v1 + 48), 1u, v28);
  std::string::~string(&value);
  EcsBase<Player,PlayerCompBase,71u>::begin((const EcsBase<Player,PlayerCompBase,71> *const)&__for_begin);
  EcsBase<Player,PlayerCompBase,71u>::end((const EcsBase<Player,PlayerCompBase,71> *const)&__for_end);
  while ( EcsBase<Player,PlayerCompBase,71u>::Iterator::operator!=(&__for_begin, &__for_end) )
  {
    v31 = EcsBase<Player,PlayerCompBase,71u>::Iterator::operator*(&__for_begin);
    std::get<0ul,unsigned int,std::shared_ptr<PlayerCompBase>>(v31);
    player_comp_ptr = (std::tuple_element<1,const std::pair<unsigned int,std::shared_ptr<PlayerCompBase> > >::type *)std::get<1ul,unsigned int,std::shared_ptr<PlayerCompBase>>(v31);
    v6 = std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false> *const)player_comp_ptr);
    if ( *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v7 = (unsigned __int64)(v6->_vptr_PlayerCompBase + 8);
    if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    if ( (*(unsigned int (__fastcall **)(std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *))v7)(v6) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&value,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/player.cpp",
        "firstLogin",
        1362);
      Uid = Player::getUid(thisa);
      common::milog::MiLogStream::operator()(
        (common::milog::MiLogStream *const)&value,
        "firstLogin failed for uid=%u",
        Uid);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&value);
      v9 = -1;
      goto LABEL_14;
    }
    EcsBase<Player,PlayerCompBase,71u>::Iterator::operator++(&__for_begin);
  }
  common::tools::perf::make_shared<proto_log::PlayerLogBodyRegister>();
  player_login_req = Player::getSessionLoginReq(thisa);
  v10 = std::__shared_ptr_access<proto_log::PlayerLogBodyRegister,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyRegister,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 96));
  v11 = proto::PlayerLoginReq::platform_type(player_login_req);
  proto_log::PlayerLogBodyRegister::set_platform(v10, v11);
  v12 = std::__shared_ptr_access<proto_log::PlayerLogBodyRegister,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyRegister,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 96));
  v13 = Player::getBasicComp(thisa);
  PlayerBasicComp::getRegisterCps[abi:cxx11](&value, v13);
  proto_log::PlayerLogBodyRegister::set_register_cps(v12, &value);
  std::string::~string(&value);
  v14 = std::__shared_ptr_access<proto_log::PlayerLogBodyRegister,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyRegister,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 96));
  v15 = Player::getBasicComp(thisa);
  PlayerBasicComp::getRegisterCps[abi:cxx11](&value, v15);
  proto_log::PlayerLogBodyRegister::set_cps(v14, &value);
  std::string::~string(&value);
  v16 = std::__shared_ptr_access<proto_log::PlayerLogBodyRegister,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyRegister,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 96));
  Player::getPlayerClientIpForStatLog[abi:cxx11](&value, thisa);
  proto_log::PlayerLogBodyRegister::set_client_ip(v16, &value);
  std::string::~string(&value);
  v17 = std::__shared_ptr_access<proto_log::PlayerLogBodyRegister,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyRegister,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 96));
  v18 = proto::PlayerLoginReq::device_uuid[abi:cxx11](player_login_req);
  proto_log::PlayerLogBodyRegister::set_device_uuid(v17, v18);
  v19 = std::__shared_ptr_access<proto_log::PlayerLogBodyRegister,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyRegister,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 96));
  v20 = proto::PlayerLoginReq::device_info[abi:cxx11](player_login_req);
  proto_log::PlayerLogBodyRegister::set_device_info(v19, v20);
  v21 = std::__shared_ptr_access<proto_log::PlayerLogBodyRegister,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyRegister,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 96));
  v22 = proto::PlayerLoginReq::system_version[abi:cxx11](player_login_req);
  proto_log::PlayerLogBodyRegister::set_system_info(v21, v22);
  v23 = std::__shared_ptr_access<proto_log::PlayerLogBodyRegister,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyRegister,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 96));
  v24 = proto::PlayerLoginReq::channel_id(player_login_req);
  proto_log::PlayerLogBodyRegister::set_channel_id(v23, v24);
  v25 = std::__shared_ptr_access<proto_log::PlayerLogBodyRegister,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyRegister,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 96));
  v26 = proto::PlayerLoginReq::sub_channel_id(player_login_req);
  proto_log::PlayerLogBodyRegister::set_sub_channel_id(v25, v26);
  std::shared_ptr<google::protobuf::Message>::shared_ptr(
    (std::shared_ptr<google::protobuf::Message> *const)&__for_end,
    0LL);
  std::shared_ptr<google::protobuf::Message>::shared_ptr<proto_log::PlayerLogBodyRegister,void>(
    (std::shared_ptr<google::protobuf::Message> *const)&__for_begin,
    (const std::shared_ptr<proto_log::PlayerLogBodyRegister> *)(v1 + 96));
  Player::printStatLog(thisa, (MessagePtr *)&__for_begin, (MessagePtr *)&__for_end, 0xEu);
  std::shared_ptr<google::protobuf::Message>::~shared_ptr((std::shared_ptr<google::protobuf::Message> *const)&__for_begin);
  std::shared_ptr<google::protobuf::Message>::~shared_ptr((std::shared_ptr<google::protobuf::Message> *const)&__for_end);
  v9 = 0;
  std::shared_ptr<proto_log::PlayerLogBodyRegister>::~shared_ptr((std::shared_ptr<proto_log::PlayerLogBodyRegister> *const)(v1 + 96));
LABEL_14:
  StatLogUtils::ContextHolder::~ContextHolder((StatLogUtils::ContextHolder *const)(v1 + 48));
  PerfSpanProxy::~PerfSpanProxy((PerfSpanProxy *const)(v1 + 64));
  result = v9;
  if ( v36 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1386: range 000000001713B124-000000001713BF23
int32_t __cdecl Player::logout(Player *const this, proto::PlayerLogoutReq::Reason reason)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  PlayerBasicComp *BasicComp; // rax
  std::__shared_ptr_access<PlayerTimerMgr,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  UnixTimerMgr *v7; // rax
  int32_t v8; // r14d
  PlayerBasicComp *v9; // rcx
  PlayerSceneComp *SceneComp; // rax
  PlayerSceneComp *v11; // rax
  std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  unsigned __int64 v13; // rdx
  GameserverService *v14; // rax
  PlayerMgr *p_player_mgr; // rdx
  GameserverService *v16; // rax
  PlayerMgr *v17; // r14
  __int64 v18; // rdx
  std::__shared_ptr_access<proto_log::PlayerLogBodyLogout,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // rcx
  std::__shared_ptr_access<proto_log::PlayerLogBodyLogout,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // r14
  PlayerBasicComp *v21; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyLogout,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v22; // r14
  PlayerBasicComp *v23; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyLogout,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v24; // r14
  std::__shared_ptr_access<proto_log::PlayerLogBodyLogout,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v25; // r14
  const std::string *v26; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyLogout,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v27; // r14
  const std::string *v28; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyLogout,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v29; // r14
  const std::string *v30; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyLogout,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v31; // rcx
  google::protobuf::uint32 v32; // eax
  std::__shared_ptr_access<proto_log::PlayerLogBodyLogout,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v33; // rcx
  std::__shared_ptr_access<proto_log::PlayerLogBodyLogout,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v34; // rcx
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v35; // rdx
  bool *p_is_ip_port_log_report; // rax
  bool is_ip_port_log_report; // r14
  std::__shared_ptr_access<proto_log::PlayerLogBodyLogout,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v38; // r14
  uint32_t PlayerClientPort; // eax
  std::__shared_ptr_access<proto_log::PlayerLogBodyLogout,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v40; // r14
  std::__shared_ptr_access<proto_log::PlayerLogBodyLogout,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v41; // r14
  uint32_t PlayerGatePort; // eax
  std::__shared_ptr_access<proto_log::PlayerLogBodyExtLogout,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v43; // r14
  PlayerRechargeComp *RechargeComp; // rax
  uint32_t HcoinCardProductRemainRewardDays; // eax
  std::__shared_ptr_access<proto_log::PlayerLogBodyExtLogout,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v46; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyExtLogout,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v47; // r14
  PlayerBasicComp *v48; // rax
  const std::string *v49; // rax
  GameserverService *v50; // r14
  int32_t result; // eax
  std::string v52; // [rsp+0h] [rbp-130h]
  proto::PlayerLogoutReq::Reason reasona; // [rsp+4h] [rbp-12Ch]
  Player *thisa; // [rsp+8h] [rbp-128h]
  uint32_t cur_time; // [rsp+10h] [rbp-120h]
  EnterSceneState enter_scene_state; // [rsp+14h] [rbp-11Ch]
  const proto::PlayerLoginReq *player_login_req; // [rsp+20h] [rbp-110h]
  const EcsBase<Player,PlayerCompBase,71>::CompBasePair *v58; // [rsp+28h] [rbp-108h]
  std::tuple_element<1,const std::pair<unsigned int,std::shared_ptr<PlayerCompBase> > >::type *player_comp_ptr; // [rsp+38h] [rbp-F8h]
  EcsBase<Player,PlayerCompBase,71>::Iterator __for_begin; // [rsp+40h] [rbp-F0h] BYREF
  EcsBase<Player,PlayerCompBase,71>::Iterator __for_end; // [rsp+50h] [rbp-E0h] BYREF
  std::string value; // [rsp+60h] [rbp-D0h] BYREF
  char v63[176]; // [rsp+80h] [rbp-B0h] BYREF

  v52._M_string_length = (std::string::size_type)this;
  HIDWORD(v52._M_dataplus._M_p) = reason;
  v2 = (unsigned __int64)v63;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 1 11 holder:1389 64 16 17 log_body_ptr:1443 96 16 16 log_ext_ptr:1463";
  *(_QWORD *)(v2 + 16) = Player::logout;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -219021312;
  v4[536862723] = -202178560;
  *(_DWORD *)v52._anon_0._M_local_buf = common::tools::TimeUtils::getNow();
  BasicComp = Player::getBasicComp(this);
  PlayerBasicComp::getNextTransNo[abi:cxx11](&value, BasicComp);
  StatLogUtils::ContextHolder::ContextHolder((StatLogUtils::ContextHolder *const)(v2 + 48), 3u, v52);
  std::string::~string(&value);
  Player::delTimer(thisa);
  if ( std::operator!=<PlayerTimerMgr>(0LL, &thisa->player_timer_mgr_ptr_) )
  {
    v6 = std::__shared_ptr_access<PlayerTimerMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerTimerMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)&thisa->player_timer_mgr_ptr_);
    PausableTimerMgr::cancel(v6);
  }
  if ( std::operator!=<UnixTimerMgr>(0LL, &thisa->unix_timer_mgr_ptr_) )
  {
    v7 = std::__shared_ptr_access<UnixTimerMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<UnixTimerMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)&thisa->unix_timer_mgr_ptr_);
    UnixTimerMgr::cancel(v7);
  }
  if ( *(_BYTE *)(((unsigned __int64)&thisa->login_state_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)thisa - 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&thisa->login_state_ >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&thisa->login_state_);
  }
  if ( thisa->login_state_ == Login )
  {
    v9 = Player::getBasicComp(thisa);
    if ( *(_BYTE *)(((unsigned __int64)&thisa->platform_type_ >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)thisa - 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&thisa->platform_type_ >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(&thisa->platform_type_);
    }
    PlayerBasicComp::setLastLoginPlatform(v9, thisa->platform_type_);
    SceneComp = Player::getSceneComp(thisa);
    enter_scene_state = PlayerSceneComp::getEnterSceneState(SceneComp);
    if ( enter_scene_state && enter_scene_state != ENTER_SCENE_POST )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&value,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/player.cpp",
        "logout",
        1416);
      common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
        (common::milog::MiLogStream *const)&value,
        (const char (*)[31])"logout reset enter_scene_state");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&value);
      v11 = Player::getSceneComp(thisa);
      PlayerSceneComp::setEnterSceneState(v11, ENTER_SCENE_NONE);
      Player::clearDestination(thisa);
    }
    EcsBase<Player,PlayerCompBase,71u>::begin((const EcsBase<Player,PlayerCompBase,71> *const)&__for_begin);
    EcsBase<Player,PlayerCompBase,71u>::end((const EcsBase<Player,PlayerCompBase,71> *const)&__for_end);
    while ( EcsBase<Player,PlayerCompBase,71u>::Iterator::operator!=(&__for_begin, &__for_end) )
    {
      v58 = EcsBase<Player,PlayerCompBase,71u>::Iterator::operator*(&__for_begin);
      std::get<0ul,unsigned int,std::shared_ptr<PlayerCompBase>>(v58);
      player_comp_ptr = (std::tuple_element<1,const std::pair<unsigned int,std::shared_ptr<PlayerCompBase> > >::type *)std::get<1ul,unsigned int,std::shared_ptr<PlayerCompBase>>(v58);
      v12 = std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false> *const)player_comp_ptr);
      if ( *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v13 = (unsigned __int64)(v12->_vptr_PlayerCompBase + 13);
      if ( *(_BYTE *)((v13 >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      (*(void (__fastcall **)(std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *))v13)(v12);
      EcsBase<Player,PlayerCompBase,71u>::Iterator::operator++(&__for_begin);
    }
    Player::tryNotifyPlayerStatusToSafeServer(thisa, Logout);
    v14 = ServiceBox::findService<GameserverService>();
    p_player_mgr = &GameserverService::getGameThreadLocal(v14)->player_mgr;
    PlayerMgr::erasePlayerVersion(p_player_mgr, thisa);
    if ( *(_BYTE *)(((unsigned __int64)&thisa->data_version_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&thisa->data_version_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&thisa->data_version_);
    }
    ++thisa->data_version_;
    v16 = ServiceBox::findService<GameserverService>();
    v17 = &GameserverService::getGameThreadLocal(v16)->player_mgr;
    std::enable_shared_from_this<Player>::shared_from_this((std::enable_shared_from_this<Player> *const)&__for_end);
    PlayerMgr::enqueueSavePlayer(v17, (PlayerPtr *)&__for_end, cur_time);
    std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)&__for_end);
    v18 = (*(_BYTE *)(((unsigned __int64)&thisa->login_state_ >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)((((_BYTE)thisa - 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&thisa->login_state_ >> 3) + 0x7FFF8000));
    if ( (_BYTE)v18 )
      __asan_report_store4(&thisa->login_state_, (((_BYTE)thisa - 60) & 7u) + 3, v18);
    thisa->login_state_ = Logout;
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&value,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/player.cpp",
      "logout",
      1440);
    if ( *(_BYTE *)(((unsigned __int64)&thisa->uid_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&thisa->uid_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&thisa->uid_);
    }
    common::milog::MiLogStream::operator()(
      (common::milog::MiLogStream *const)&value,
      "[LOGOUT] uid=%u logout, reason=%u",
      thisa->uid_,
      (unsigned int)reasona);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&value);
    common::tools::perf::make_shared<proto_log::PlayerLogBodyLogout>();
    player_login_req = Player::getSessionLoginReq(thisa);
    v19 = std::__shared_ptr_access<proto_log::PlayerLogBodyLogout,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyLogout,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
    if ( *(_BYTE *)(((unsigned __int64)&thisa->platform_type_ >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)thisa - 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&thisa->platform_type_ >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(&thisa->platform_type_);
    }
    proto_log::PlayerLogBodyLogout::set_platform(v19, thisa->platform_type_);
    v20 = std::__shared_ptr_access<proto_log::PlayerLogBodyLogout,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyLogout,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
    v21 = Player::getBasicComp(thisa);
    PlayerBasicComp::getRegisterCps[abi:cxx11](&value, v21);
    proto_log::PlayerLogBodyLogout::set_register_cps(v20, &value);
    std::string::~string(&value);
    v22 = std::__shared_ptr_access<proto_log::PlayerLogBodyLogout,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyLogout,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
    v23 = Player::getBasicComp(thisa);
    PlayerBasicComp::getCps[abi:cxx11](&value, v23);
    proto_log::PlayerLogBodyLogout::set_cps(v22, &value);
    std::string::~string(&value);
    v24 = std::__shared_ptr_access<proto_log::PlayerLogBodyLogout,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyLogout,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
    Player::getPlayerClientIpForStatLog[abi:cxx11](&value, thisa);
    proto_log::PlayerLogBodyLogout::set_client_ip(v24, &value);
    std::string::~string(&value);
    v25 = std::__shared_ptr_access<proto_log::PlayerLogBodyLogout,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyLogout,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
    v26 = proto::PlayerLoginReq::device_uuid[abi:cxx11](player_login_req);
    proto_log::PlayerLogBodyLogout::set_device_uuid(v25, v26);
    v27 = std::__shared_ptr_access<proto_log::PlayerLogBodyLogout,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyLogout,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
    v28 = proto::PlayerLoginReq::device_info[abi:cxx11](player_login_req);
    proto_log::PlayerLogBodyLogout::set_device_info(v27, v28);
    v29 = std::__shared_ptr_access<proto_log::PlayerLogBodyLogout,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyLogout,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
    v30 = proto::PlayerLoginReq::system_version[abi:cxx11](player_login_req);
    proto_log::PlayerLogBodyLogout::set_system_info(v29, v30);
    v31 = std::__shared_ptr_access<proto_log::PlayerLogBodyLogout,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyLogout,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
    if ( *(_BYTE *)(((unsigned __int64)&thisa->last_from_bin_time_ >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)thisa - 28) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&thisa->last_from_bin_time_ >> 3)
                                                           + 0x7FFF8000) )
    {
      __asan_report_load4(&thisa->last_from_bin_time_);
    }
    if ( cur_time <= thisa->last_from_bin_time_ )
      v32 = 0;
    else
      v32 = cur_time - thisa->last_from_bin_time_;
    proto_log::PlayerLogBodyLogout::set_game_time(v31, v32);
    v33 = std::__shared_ptr_access<proto_log::PlayerLogBodyLogout,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyLogout,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
    if ( *(_BYTE *)(((unsigned __int64)&thisa->channel_id_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&thisa->channel_id_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&thisa->channel_id_);
    }
    proto_log::PlayerLogBodyLogout::set_channel_id(v33, thisa->channel_id_);
    v34 = std::__shared_ptr_access<proto_log::PlayerLogBodyLogout,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyLogout,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
    if ( *(_BYTE *)(((unsigned __int64)&thisa->sub_channel_id_ >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)thisa - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&thisa->sub_channel_id_ >> 3)
                                                            + 0x7FFF8000) )
    {
      __asan_report_load4(&thisa->sub_channel_id_);
    }
    proto_log::PlayerLogBodyLogout::set_sub_channel_id(v34, thisa->sub_channel_id_);
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&__for_end);
    v35 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&__for_end);
    p_is_ip_port_log_report = &v35->is_ip_port_log_report;
    if ( *(_BYTE *)(((unsigned __int64)p_is_ip_port_log_report >> 3) + 0x7FFF8000) != 0
      && ((unsigned __int8)p_is_ip_port_log_report & 7) >= *(_BYTE *)(((unsigned __int64)p_is_ip_port_log_report >> 3)
                                                                    + 0x7FFF8000) )
    {
      __asan_report_load1(p_is_ip_port_log_report);
    }
    is_ip_port_log_report = v35->is_ip_port_log_report;
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)&__for_end);
    if ( is_ip_port_log_report )
    {
      v38 = std::__shared_ptr_access<proto_log::PlayerLogBodyLogout,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyLogout,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
      PlayerClientPort = Player::getPlayerClientPort(thisa);
      proto_log::PlayerLogBodyLogout::set_client_port(v38, PlayerClientPort);
      v40 = std::__shared_ptr_access<proto_log::PlayerLogBodyLogout,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyLogout,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
      Player::getPlayerGateIp[abi:cxx11](&value, thisa);
      proto_log::PlayerLogBodyLogout::set_gate_ip(v40, &value);
      std::string::~string(&value);
      v41 = std::__shared_ptr_access<proto_log::PlayerLogBodyLogout,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyLogout,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
      PlayerGatePort = Player::getPlayerGatePort(thisa);
      proto_log::PlayerLogBodyLogout::set_gate_port(v41, PlayerGatePort);
    }
    common::tools::perf::make_shared<proto_log::PlayerLogBodyExtLogout>();
    v43 = std::__shared_ptr_access<proto_log::PlayerLogBodyExtLogout,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyExtLogout,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
    RechargeComp = Player::getRechargeComp(thisa);
    HcoinCardProductRemainRewardDays = PlayerRechargeComp::getHcoinCardProductRemainRewardDays(RechargeComp);
    proto_log::PlayerLogBodyExtLogout::set_card_product_remain_days(v43, HcoinCardProductRemainRewardDays);
    v46 = std::__shared_ptr_access<proto_log::PlayerLogBodyExtLogout,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyExtLogout,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
    proto_log::PlayerLogBodyExtLogout::set_account_uid(v46, &thisa->account_uid_);
    v47 = std::__shared_ptr_access<proto_log::PlayerLogBodyExtLogout,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyExtLogout,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
    v48 = Player::getBasicComp(thisa);
    v49 = PlayerBasicComp::getNickName[abi:cxx11](v48);
    proto_log::PlayerLogBodyExtLogout::set_nickname(v47, v49);
    std::shared_ptr<google::protobuf::Message>::shared_ptr<proto_log::PlayerLogBodyExtLogout,void>(
      (std::shared_ptr<google::protobuf::Message> *const)&__for_end,
      (const std::shared_ptr<proto_log::PlayerLogBodyExtLogout> *)(v2 + 96));
    std::shared_ptr<google::protobuf::Message>::shared_ptr<proto_log::PlayerLogBodyLogout,void>(
      (std::shared_ptr<google::protobuf::Message> *const)&__for_begin,
      (const std::shared_ptr<proto_log::PlayerLogBodyLogout> *)(v2 + 64));
    Player::printStatLog(thisa, (MessagePtr *)&__for_begin, (MessagePtr *)&__for_end, 0xEu);
    std::shared_ptr<google::protobuf::Message>::~shared_ptr((std::shared_ptr<google::protobuf::Message> *const)&__for_begin);
    std::shared_ptr<google::protobuf::Message>::~shared_ptr((std::shared_ptr<google::protobuf::Message> *const)&__for_end);
    if ( reasona != PlayerLogoutReq_Reason_GM_CLEAR )
    {
      v50 = ServiceBox::findService<GameserverService>();
      Player::getSession((const Player *const)&__for_end);
      GameserverService::disconnectPlayerSession(v50, (PlayerSessionProxyPtr *)&__for_end);
      std::shared_ptr<PlayerSessionProxy>::~shared_ptr((std::shared_ptr<PlayerSessionProxy> *const)&__for_end);
    }
    v8 = 0;
    std::shared_ptr<proto_log::PlayerLogBodyExtLogout>::~shared_ptr((std::shared_ptr<proto_log::PlayerLogBodyExtLogout> *const)(v2 + 96));
    std::shared_ptr<proto_log::PlayerLogBodyLogout>::~shared_ptr((std::shared_ptr<proto_log::PlayerLogBodyLogout> *const)(v2 + 64));
  }
  else
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&value,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/player.cpp",
      "logout",
      1405);
    if ( *(_BYTE *)(((unsigned __int64)&thisa->uid_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&thisa->uid_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&thisa->uid_);
    }
    common::milog::MiLogStream::operator()((common::milog::MiLogStream *const)&value, off_26030800, thisa->uid_);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&value);
    v8 = -1;
  }
  StatLogUtils::ContextHolder::~ContextHolder((StatLogUtils::ContextHolder *const)(v2 + 48));
  result = v8;
  if ( v63 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1479: range 000000001713BF24-000000001713C3C4
void __fastcall Player::genAndPushLogoutReq(Player *const this, proto::PlayerLogoutReq::Reason reason)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  common::milog::MiLogStream *v5; // r14
  common::minet::Packet *v6; // r14
  uint32_t Uid; // eax
  GameserverService *v8; // r14
  common::minet::PacketPtr v9; // rdi
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // r14
  unsigned int val; // [rsp+1Ch] [rbp-144h] BYREF
  std::shared_ptr<common::minet::Packet> p_packet_ptr; // [rsp+20h] [rbp-140h] BYREF
  common::milog::MiLogStream v16; // [rsp+30h] [rbp-130h] BYREF
  char v17[272]; // [rsp+50h] [rbp-110h] BYREF

  v2 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(224LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "4 48 4 11 reason:1478 64 16 22 logout_packet_ptr:1482 96 24 15 logout_req:1480 160 24 11 notify:1493";
  *(_QWORD *)(v2 + 16) = Player::genAndPushLogoutReq;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -219021312;
  v4[536862723] = -234881024;
  v4[536862724] = -218959118;
  v4[536862725] = -218103808;
  v4[536862726] = -202116109;
  *(_DWORD *)(v2 + 48) = reason;
  proto::PlayerLogoutReq::PlayerLogoutReq((proto::PlayerLogoutReq *const)(v2 + 96));
  proto::PlayerLogoutReq::set_reason(
    (proto::PlayerLogoutReq *const)(v2 + 96),
    *(proto::PlayerLogoutReq_Reason *)(v2 + 48));
  common::minet::PacketUtils::createPacket<proto::PlayerLogoutReq>((const proto::PlayerLogoutReq *)(v2 + 64));
  if ( std::operator==<common::minet::Packet>((const std::shared_ptr<common::minet::Packet> *)(v2 + 64), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v16,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/player.cpp",
      "genAndPushLogoutReq",
      1485);
    v5 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(&v16, (const char (*)[41])off_260309A0);
    val = Player::getUid(this);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, &val);
    common::milog::MiLogStream::~MiLogStream(&v16);
  }
  else
  {
    v6 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
    Uid = Player::getUid(this);
    common::minet::Packet::setUserId(v6, Uid);
    v8 = ServiceBox::findService<GameserverService>();
    std::shared_ptr<common::minet::Packet>::shared_ptr(
      &p_packet_ptr,
      (const std::shared_ptr<common::minet::Packet> *)(v2 + 64));
    GameserverService::setPacketGameThreadIndex(v8, &p_packet_ptr);
    std::shared_ptr<common::minet::Packet>::~shared_ptr(&p_packet_ptr);
    v9._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)(v2 + 64);
    std::shared_ptr<common::minet::Packet>::shared_ptr(
      &p_packet_ptr,
      (const std::shared_ptr<common::minet::Packet> *)(v2 + 64));
    v9._M_ptr = (std::__shared_ptr<common::minet::Packet,(__gnu_cxx::_Lock_policy)2>::element_type *)&p_packet_ptr;
    ServiceBox::pushPacketToService(v9);
    std::shared_ptr<common::minet::Packet>::~shared_ptr(&p_packet_ptr);
    common::milog::MiLogStream::create(
      &v16,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/player.cpp",
      "genAndPushLogoutReq",
      1491);
    v10 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(&v16, (const char (*)[29])off_26030A00);
    v11 = common::milog::MiLogStream::operator<<<proto::PlayerLogoutReq_Reason,(proto::PlayerLogoutReq_Reason*)0>(
            v10,
            (const proto::PlayerLogoutReq_Reason *)(v2 + 48));
    v12 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v11, (const char (*)[6])" uid:");
    val = Player::getUid(this);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, &val);
    common::milog::MiLogStream::~MiLogStream(&v16);
    proto::DisconnectClientNotify::DisconnectClientNotify((proto::DisconnectClientNotify *const)(v2 + 160));
    proto::DisconnectClientNotify::set_data((proto::DisconnectClientNotify *const)(v2 + 160), 5u);
    Player::sendProto(this, (const google::protobuf::Message *)(v2 + 160));
    proto::DisconnectClientNotify::~DisconnectClientNotify((proto::DisconnectClientNotify *const)(v2 + 160));
  }
  std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v2 + 64));
  proto::PlayerLogoutReq::~PlayerLogoutReq((proto::PlayerLogoutReq *const)(v2 + 96));
  if ( v17 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = -168430091;
  }
};

// Line 1500: range 000000001713C3C6-000000001713C3F1
int32_t __cdecl Player::saveToDb(Player *const this)
{
  BlockDataMgr::checkSave(&this->block_data_mgr_);
  return Player::savePlayerDataToDB(this);
};

// Line 1507: range 000000001713C3F2-000000001713C861
int32_t __cdecl Player::savePlayerDataToDB(Player *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v4; // rdx
  bool *p_is_async_save; // rax
  common::milog::MiLogStream *v6; // rdx
  int32_t v7; // r14d
  common::milog::MiLogStream *v8; // rdx
  __int64 v9; // rsi
  __int64 v10; // rdx
  uint64_t NowMs; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  int32_t result; // eax
  common::milog::MiLogStream v16; // [rsp+10h] [rbp-90h] BYREF
  char v17[112]; // [rsp+30h] [rbp-70h] BYREF

  v1 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 16 15 config_ptr:1516";
  *(_QWORD *)(v1 + 16) = Player::savePlayerDataToDB;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)&this->login_state_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->login_state_ >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->login_state_);
  }
  if ( this->login_state_ == Login )
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->data_version_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->data_version_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&this->data_version_);
    }
    ++this->data_version_;
  }
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v1 + 32));
  v4 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
  p_is_async_save = &v4->is_async_save;
  if ( *(_BYTE *)(((unsigned __int64)p_is_async_save >> 3) + 0x7FFF8000) != 0
    && ((unsigned __int8)p_is_async_save & 7) >= *(_BYTE *)(((unsigned __int64)p_is_async_save >> 3) + 0x7FFF8000) )
  {
    __asan_report_load1(p_is_async_save);
  }
  if ( v4->is_async_save )
  {
    if ( Player::internalAsyncSaveToDb(this) )
    {
      common::milog::MiLogStream::create(
        &v16,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/player.cpp",
        "savePlayerDataToDB",
        1521);
      v6 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
             &v16,
             (const char (*)[28])"internalAsyncSaveToDb falis");
      operator<<(v6, this);
      common::milog::MiLogStream::~MiLogStream(&v16);
      v7 = -1;
      goto LABEL_22;
    }
  }
  else if ( Player::internalSaveToDb(this) )
  {
    common::milog::MiLogStream::create(
      &v16,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "savePlayerDataToDB",
      1529);
    v8 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
           &v16,
           (const char (*)[23])"internalSaveToDb falis");
    operator<<(v8, this);
    common::milog::MiLogStream::~MiLogStream(&v16);
    v7 = -1;
    goto LABEL_22;
  }
  v9 = ((_BYTE)this - 124) & 7;
  v10 = (*(_BYTE *)(((unsigned __int64)&this->is_need_save_ >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v9 >= *(_BYTE *)(((unsigned __int64)&this->is_need_save_ >> 3) + 0x7FFF8000));
  if ( (_BYTE)v10 )
    __asan_report_store1(&this->is_need_save_, v9, v10);
  this->is_need_save_ = 0;
  NowMs = common::tools::TimeUtils::getNowMs();
  if ( *(_BYTE *)(((unsigned __int64)&this->last_save_time_ms_ >> 3) + 0x7FFF8000) )
    NowMs = __asan_report_store8(&this->last_save_time_ms_, v9);
  this->last_save_time_ms_ = NowMs;
  common::milog::MiLogStream::create(
    &v16,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/player/player.cpp",
    "savePlayerDataToDB",
    1537);
  v12 = common::milog::MiLogStream::operator<<<char [53],(char *[53])0>(
          &v16,
          (const char (*)[53])"[DATA_VERSION] save to db from player, data_version:");
  v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, &this->data_version_);
  v14 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v13, (const char (*)[7])", uid:");
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, &this->uid_);
  common::milog::MiLogStream::~MiLogStream(&v16);
  v7 = 0;
LABEL_22:
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v1 + 32));
  result = v7;
  if ( v17 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1542: range 000000001713C862-000000001713D0F0
__int64 __fastcall Player::saveToDb(
        uint32_t uid,
        std::pair<unsigned int,unsigned int> gate_session,
        proto::SavePlayerDataReq *req)
{
  unsigned int v3; // r14d
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  const proto::PlayerData *v7; // rax
  const std::string *v8; // rax
  unsigned __int64 v9; // r15
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rdx
  uint32_t *p_max_bin_len; // rax
  const proto::PlayerData *v12; // rax
  google::protobuf::uint32 v13; // eax
  int v14; // r15d
  common::minet::Packet *v15; // rax
  common::minet::Packet *v16; // rcx
  common::minet::Packet *v17; // rcx
  GameserverService *v18; // r15
  common::minet::PacketPtr v19; // rdi
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // r15
  const proto::PlayerData *v23; // rax
  int v24; // r15d
  common::minet::Packet *v25; // rax
  common::minet::Packet *v26; // rcx
  common::minet::Packet *v27; // rcx
  GameserverService *v28; // r15
  unsigned __int64 v29; // rdx
  GameserverService *v30; // r15
  NetworkMgrBase *v31; // r15
  uint32_t v32; // r8d
  __int64 result; // rax
  unsigned int val; // [rsp+2Ch] [rbp-144h] BYREF
  std::shared_ptr<common::minet::Packet> p_packet_ptr; // [rsp+30h] [rbp-140h] BYREF
  common::milog::MiLogStream v37; // [rsp+40h] [rbp-130h] BYREF
  char v38[272]; // [rsp+60h] [rbp-110h] BYREF

  v4 = (unsigned __int64)v38;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(224LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "5 48 4 8 uid:1541 64 8 17 gate_session:1541 96 16 15 config_ptr:1546 128 16 15 packet_ptr:1567 1"
                        "60 32 8 rsp:1549";
  *(_QWORD *)(v4 + 16) = Player::saveToDb;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -218959360;
  v6[536862723] = -219021312;
  v6[536862724] = -219021312;
  v6[536862726] = -202116109;
  *(_DWORD *)(v4 + 48) = uid;
  *(std::pair<unsigned int,unsigned int> *)(v4 + 64) = gate_session;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v4 + 96));
  v7 = proto::SavePlayerDataReq::player_data(req);
  v8 = proto::PlayerData::bin[abi:cxx11](v7);
  v9 = std::string::length(v8);
  v10 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
  p_max_bin_len = &v10->max_bin_len;
  if ( *(_BYTE *)(((unsigned __int64)p_max_bin_len >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)p_max_bin_len & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_max_bin_len >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(p_max_bin_len);
  }
  if ( v9 <= v10->max_bin_len )
  {
    common::minet::PacketUtils::createPacket<proto::SavePlayerDataReq>((const proto::SavePlayerDataReq *)(v4 + 128));
    if ( std::operator==<common::minet::Packet>(0LL, (const std::shared_ptr<common::minet::Packet> *)(v4 + 128)) )
    {
      common::milog::MiLogStream::create(
        &v37,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/player.cpp",
        "saveToDb",
        1570);
      common::milog::MiLogStream::operator()(&v37, "create packet failed");
      common::milog::MiLogStream::~MiLogStream(&v37);
      v3 = -1;
      v24 = 0;
    }
    else
    {
      v25 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
      common::minet::Packet::setUserId(v25, *(_DWORD *)(v4 + 48));
      v26 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
      if ( *(_BYTE *)(((v4 + 68) >> 3) + 0x7FFF8000) != 0
        && (char)(((v4 - 32 + 100) & 7) + 3) >= *(_BYTE *)(((v4 + 68) >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v4 + 68);
      }
      common::minet::Packet::setUserSessionId(v26, *(_DWORD *)(v4 + 68));
      v27 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
      if ( *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) != 0
        && (char)(((v4 - 32 + 96) & 7) + 3) >= *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v4 + 64);
      }
      common::minet::Packet::setServiceAppId(v27, 2u, *(_DWORD *)(v4 + 64));
      v28 = ServiceBox::findService<GameserverService>();
      std::shared_ptr<common::minet::Packet>::shared_ptr(
        &p_packet_ptr,
        (const std::shared_ptr<common::minet::Packet> *)(v4 + 128));
      ServiceBase::setPacketSource(v28, (common::minet::PacketPtr)__PAIR128__(v29, &p_packet_ptr));
      std::shared_ptr<common::minet::Packet>::~shared_ptr(&p_packet_ptr);
      v30 = ServiceBox::findService<GameserverService>();
      std::shared_ptr<common::minet::Packet>::shared_ptr(
        &p_packet_ptr,
        (const std::shared_ptr<common::minet::Packet> *)(v4 + 128));
      GameserverService::setPacketGameThreadIndex(v30, &p_packet_ptr);
      std::shared_ptr<common::minet::Packet>::~shared_ptr(&p_packet_ptr);
      v31 = std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false> *const)&ResourceBox::network_mgr_ptr);
      std::shared_ptr<common::minet::Packet>::shared_ptr(
        &p_packet_ptr,
        (const std::shared_ptr<common::minet::Packet> *)(v4 + 128));
      NetworkMgrBase::sendPacketToTargetService(v31, (common::minet::PacketPtr)__PAIR128__(5LL, &p_packet_ptr), 0, v32);
      std::shared_ptr<common::minet::Packet>::~shared_ptr(&p_packet_ptr);
      v24 = 1;
    }
    std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v4 + 128));
    if ( v24 == 1 )
      goto LABEL_24;
  }
  else
  {
    proto::SavePlayerDataRsp::SavePlayerDataRsp((proto::SavePlayerDataRsp *const)(v4 + 160));
    proto::SavePlayerDataRsp::set_retcode((proto::SavePlayerDataRsp *const)(v4 + 160), 0);
    v12 = proto::SavePlayerDataReq::player_data(req);
    v13 = proto::PlayerData::data_version(v12);
    proto::SavePlayerDataRsp::set_data_version((proto::SavePlayerDataRsp *const)(v4 + 160), v13);
    common::minet::PacketUtils::createPacket<proto::SavePlayerDataRsp>((const proto::SavePlayerDataRsp *)(v4 + 128));
    if ( std::operator==<common::minet::Packet>(0LL, (const std::shared_ptr<common::minet::Packet> *)(v4 + 128)) )
    {
      common::milog::MiLogStream::create(
        &v37,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/player.cpp",
        "saveToDb",
        1555);
      common::milog::MiLogStream::operator()(&v37, "create packet failed");
      common::milog::MiLogStream::~MiLogStream(&v37);
      v3 = -1;
      v14 = 0;
    }
    else
    {
      v15 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
      common::minet::Packet::setUserId(v15, *(_DWORD *)(v4 + 48));
      v16 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
      if ( *(_BYTE *)(((v4 + 68) >> 3) + 0x7FFF8000) != 0
        && (char)(((v4 - 32 + 100) & 7) + 3) >= *(_BYTE *)(((v4 + 68) >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v4 + 68);
      }
      common::minet::Packet::setUserSessionId(v16, *(_DWORD *)(v4 + 68));
      v17 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
      if ( *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) != 0
        && (char)(((v4 - 32 + 96) & 7) + 3) >= *(_BYTE *)(((v4 + 64) >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v4 + 64);
      }
      common::minet::Packet::setServiceAppId(v17, 2u, *(_DWORD *)(v4 + 64));
      v18 = ServiceBox::findService<GameserverService>();
      std::shared_ptr<common::minet::Packet>::shared_ptr(
        &p_packet_ptr,
        (const std::shared_ptr<common::minet::Packet> *)(v4 + 128));
      GameserverService::setPacketGameThreadIndex(v18, &p_packet_ptr);
      std::shared_ptr<common::minet::Packet>::~shared_ptr(&p_packet_ptr);
      v19._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)(v4 + 128);
      std::shared_ptr<common::minet::Packet>::shared_ptr(
        &p_packet_ptr,
        (const std::shared_ptr<common::minet::Packet> *)(v4 + 128));
      v19._M_ptr = (std::__shared_ptr<common::minet::Packet,(__gnu_cxx::_Lock_policy)2>::element_type *)&p_packet_ptr;
      ServiceBox::pushPacketToService(v19);
      std::shared_ptr<common::minet::Packet>::~shared_ptr(&p_packet_ptr);
      common::milog::MiLogStream::create(
        &v37,
        &common::milog::MiLogDefault::default_log_obj_,
        6u,
        "./src/player/player.cpp",
        "saveToDb",
        1563);
      v20 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
              &v37,
              (const char (*)[37])"make fake SavePlayerDataRsp for uid:");
      v21 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v20, (const unsigned int *)(v4 + 48));
      v22 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v21, (const char (*)[16])", data_version:");
      v23 = proto::SavePlayerDataReq::player_data(req);
      val = proto::PlayerData::data_version(v23);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v22, &val);
      common::milog::MiLogStream::~MiLogStream(&v37);
      v14 = 1;
    }
    std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v4 + 128));
    proto::SavePlayerDataRsp::~SavePlayerDataRsp((proto::SavePlayerDataRsp *const)(v4 + 160));
    if ( v14 == 1 )
LABEL_24:
      v3 = 0;
  }
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 96));
  result = v3;
  if ( v38 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 1587: range 000000001713D0F2-000000001713D452
__int64 __fastcall Player::disconnectSession(Player *const this, uint32_t reason)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  common::milog::MiLogStream *v5; // r14
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  PlayerSessionProxy *v10; // rax
  __int64 result; // rax
  unsigned int val; // [rsp+1Ch] [rbp-F4h] BYREF
  common::milog::MiLogStream v13; // [rsp+20h] [rbp-F0h] BYREF
  char v14[208]; // [rsp+40h] [rbp-D0h] BYREF

  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(160LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 11 reason:1586 64 16 16 session_ptr:1589 96 24 11 notify:1595";
  *(_QWORD *)(v2 + 16) = Player::disconnectSession;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -219021312;
  v4[536862723] = -218103808;
  v4[536862724] = -202116109;
  *(_DWORD *)(v2 + 48) = reason;
  common::milog::MiLogStream::create(
    &v13,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/player/player.cpp",
    "disconnectSession",
    1588);
  v5 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(&v13, (const char (*)[6])"uid: ");
  val = Player::getUid(this);
  v6 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, &val);
  v7 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
         v6,
         (const char (*)[28])" disconnectSession reason: ");
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v2 + 48));
  common::milog::MiLogStream::~MiLogStream(&v13);
  Player::getSession((const Player *const)(v2 + 64));
  if ( std::operator==<PlayerSessionProxy>((const std::shared_ptr<PlayerSessionProxy> *)(v2 + 64), 0LL)
    || (v8 = std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64)),
        !PlayerSessionProxy::isConnected(v8)) )
  {
    common::milog::MiLogStream::create(
      &v13,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/player.cpp",
      "disconnectSession",
      1592);
    common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
      &v13,
      (const char (*)[47])"player is already disconnected, skip this call");
    common::milog::MiLogStream::~MiLogStream(&v13);
  }
  else
  {
    proto::DisconnectClientNotify::DisconnectClientNotify((proto::DisconnectClientNotify *const)(v2 + 96));
    proto::DisconnectClientNotify::set_data((proto::DisconnectClientNotify *const)(v2 + 96), *(_DWORD *)(v2 + 48));
    v10 = std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
    PlayerSessionProxy::sendProto<proto::DisconnectClientNotify>(
      v10,
      (const proto::DisconnectClientNotify *)(v2 + 96),
      0LL);
    Player::onPlayerDisconnect(this, *(_DWORD *)(v2 + 48));
    proto::DisconnectClientNotify::~DisconnectClientNotify((proto::DisconnectClientNotify *const)(v2 + 96));
  }
  std::shared_ptr<PlayerSessionProxy>::~shared_ptr((std::shared_ptr<PlayerSessionProxy> *const)(v2 + 64));
  result = 0LL;
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 1606: range 000000001713D454-000000001713D962
// local variable allocation has failed, the output may be wrong!
int32_t __cdecl Player::onPlayerDisconnect(Player *const this, uint32_t reason)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  PlayerBasicComp *BasicComp; // rax
  common::milog::MiLogStream *v6; // rax
  GameserverService *v7; // r14
  PlayerMpComp *MpComp; // rax
  GameserverService *v9; // rax
  PlayerMgr *p_player_mgr; // r14
  __int64 Now; // rsi
  std::__shared_ptr_access<proto_log::PlayerLogBodyPlayerDisconnect,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyPlayerDisconnect,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // r14
  PlayerBasicComp *v14; // rax
  const std::string *v15; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyPlayerDisconnect,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  int32_t result; // eax
  std::string v18; // [rsp+0h] [rbp-E0h] OVERLAPPED BYREF
  std::weak_ptr<PlayerSessionProxy> v19; // [rsp+20h] [rbp-C0h] BYREF
  common::milog::MiLogStream v20; // [rsp+30h] [rbp-B0h] BYREF
  char v21[144]; // [rsp+50h] [rbp-90h] BYREF

  v18._M_string_length = (std::string::size_type)this;
  HIDWORD(v18._M_dataplus._M_p) = reason;
  v2 = (unsigned __int64)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 1 11 holder:1614 64 16 12 log_ptr:1630";
  *(_QWORD *)(v2 + 16) = Player::onPlayerDisconnect;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -202178560;
  if ( !Player::isConnected((const Player *const)v18._M_string_length) )
  {
    common::milog::MiLogStream::create(
      &v20,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/player.cpp",
      "onPlayerDisconnect",
      1610);
    common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
      &v20,
      (const char (*)[47])"player is already disconnected, skip this call");
    common::milog::MiLogStream::~MiLogStream(&v20);
  }
  else
  {
    BasicComp = Player::getBasicComp((Player *const)v18._M_string_length);
    PlayerBasicComp::getNextTransNo[abi:cxx11]((std::string *)&v20, BasicComp);
    StatLogUtils::ContextHolder::ContextHolder((StatLogUtils::ContextHolder *const)(v2 + 48), 0x3EBu, v18);
    std::string::~string(&v20);
    common::milog::MiLogStream::create(
      &v20,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/player.cpp",
      "onPlayerDisconnect",
      1616);
    v6 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
           &v20,
           (const char (*)[30])"[LOGIN] on player disconnect:");
    operator<<(v6, (const Player *)v18._M_string_length);
    common::milog::MiLogStream::~MiLogStream(&v20);
    v7 = ServiceBox::findService<GameserverService>();
    std::weak_ptr<PlayerSessionProxy>::lock(&v19);
    GameserverService::disconnectPlayerSession(v7, (PlayerSessionProxyPtr *)&v19);
    std::shared_ptr<PlayerSessionProxy>::~shared_ptr((std::shared_ptr<PlayerSessionProxy> *const)&v19);
    std::__weak_ptr<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2>::reset((std::__weak_ptr<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2> *const)(v18._M_string_length + 80));
    Player::doOnDisconnect((Player *const)v18._M_string_length);
    MpComp = Player::getMpComp((Player *const)v18._M_string_length);
    PlayerMpComp::updateMpPlayerInfo(MpComp);
    v9 = ServiceBox::findService<GameserverService>();
    p_player_mgr = &GameserverService::getGameThreadLocal(v9)->player_mgr;
    std::enable_shared_from_this<Player>::shared_from_this((std::enable_shared_from_this<Player> *const)&v19);
    PlayerMgr::enqueueSavePlayer(p_player_mgr, (PlayerPtr *)&v19);
    std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)&v19);
    Now = (unsigned int)common::tools::TimeUtils::getNow();
    if ( *(_BYTE *)(((v18._M_string_length + 976) >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((v18._M_string_length + 976) >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_store4(v18._M_string_length + 976, Now, v18._M_string_length + 976);
    }
    *(_DWORD *)(v18._M_string_length + 976) = Now;
    common::tools::perf::make_shared<proto_log::PlayerLogBodyPlayerDisconnect>();
    v12 = std::__shared_ptr_access<proto_log::PlayerLogBodyPlayerDisconnect,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyPlayerDisconnect,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
    proto_log::PlayerLogBodyPlayerDisconnect::set_account_uid(v12, (const std::string *)(v18._M_string_length + 152));
    v13 = std::__shared_ptr_access<proto_log::PlayerLogBodyPlayerDisconnect,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyPlayerDisconnect,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
    v14 = Player::getBasicComp((Player *const)v18._M_string_length);
    v15 = PlayerBasicComp::getNickName[abi:cxx11](v14);
    proto_log::PlayerLogBodyPlayerDisconnect::set_nickname(v13, v15);
    v16 = std::__shared_ptr_access<proto_log::PlayerLogBodyPlayerDisconnect,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyPlayerDisconnect,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
    proto_log::PlayerLogBodyPlayerDisconnect::set_reason(v16, HIDWORD(v18._M_dataplus._M_p));
    std::shared_ptr<google::protobuf::Message>::shared_ptr((std::shared_ptr<google::protobuf::Message> *const)&v19, 0LL);
    std::shared_ptr<google::protobuf::Message>::shared_ptr<proto_log::PlayerLogBodyPlayerDisconnect,void>(
      (std::shared_ptr<google::protobuf::Message> *const)&v18._anon_0,
      (const std::shared_ptr<proto_log::PlayerLogBodyPlayerDisconnect> *)(v2 + 64));
    Player::printStatLog((Player *const)v18._M_string_length, (MessagePtr *)&v18._anon_0, (MessagePtr *)&v19, 0xEu);
    std::shared_ptr<google::protobuf::Message>::~shared_ptr((std::shared_ptr<google::protobuf::Message> *const)&v18._anon_0);
    std::shared_ptr<google::protobuf::Message>::~shared_ptr((std::shared_ptr<google::protobuf::Message> *const)&v19);
    std::shared_ptr<proto_log::PlayerLogBodyPlayerDisconnect>::~shared_ptr((std::shared_ptr<proto_log::PlayerLogBodyPlayerDisconnect> *const)(v2 + 64));
    StatLogUtils::ContextHolder::~ContextHolder((StatLogUtils::ContextHolder *const)(v2 + 48));
  }
  result = 0;
  if ( v21 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 1640: range 000000001713D964-000000001713DA72
void __cdecl Player::doOnDisconnect(Player *const this)
{
  std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v1; // rax
  unsigned __int64 v2; // rdx
  const EcsBase<Player,PlayerCompBase,71>::CompBasePair *v3; // [rsp+18h] [rbp-38h]
  std::tuple_element<1,const std::pair<unsigned int,std::shared_ptr<PlayerCompBase> > >::type *player_comp_ptr; // [rsp+28h] [rbp-28h]
  EcsBase<Player,PlayerCompBase,71>::Iterator __for_begin; // [rsp+30h] [rbp-20h] BYREF
  EcsBase<Player,PlayerCompBase,71>::Iterator __for_end; // [rsp+40h] [rbp-10h] BYREF

  std::unordered_map<LuaShellIndex,std::tuple<unsigned int,std::string,UnixTimer>>::clear(&this->awaiting_lua_shell_timer_map_);
  EcsBase<Player,PlayerCompBase,71u>::begin((const EcsBase<Player,PlayerCompBase,71> *const)&__for_begin);
  EcsBase<Player,PlayerCompBase,71u>::end((const EcsBase<Player,PlayerCompBase,71> *const)&__for_end);
  while ( EcsBase<Player,PlayerCompBase,71u>::Iterator::operator!=(&__for_begin, &__for_end) )
  {
    v3 = EcsBase<Player,PlayerCompBase,71u>::Iterator::operator*(&__for_begin);
    std::get<0ul,unsigned int,std::shared_ptr<PlayerCompBase>>(v3);
    player_comp_ptr = (std::tuple_element<1,const std::pair<unsigned int,std::shared_ptr<PlayerCompBase> > >::type *)std::get<1ul,unsigned int,std::shared_ptr<PlayerCompBase>>(v3);
    v1 = std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false> *const)player_comp_ptr);
    if ( *(_BYTE *)(((unsigned __int64)v1 >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v2 = (unsigned __int64)(v1->_vptr_PlayerCompBase + 11);
    if ( *(_BYTE *)((v2 >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    (*(void (__fastcall **)(std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *))v2)(v1);
    EcsBase<Player,PlayerCompBase,71u>::Iterator::operator++(&__for_begin);
  }
};

// Line 1652: range 000000001713DA74-000000001713DC0A
int32_t __cdecl Player::notifyAllData(Player *const this)
{
  common::milog::MiLogStream *v1; // rdx
  std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v2; // rax
  unsigned __int64 v3; // rdx
  const EcsBase<Player,PlayerCompBase,71>::CompBasePair *v5; // [rsp+18h] [rbp-68h]
  std::tuple_element<1,const std::pair<unsigned int,std::shared_ptr<PlayerCompBase> > >::type *player_comp_ptr; // [rsp+28h] [rbp-58h]
  EcsBase<Player,PlayerCompBase,71>::Iterator __for_begin; // [rsp+30h] [rbp-50h] BYREF
  EcsBase<Player,PlayerCompBase,71>::Iterator __for_end; // [rsp+40h] [rbp-40h] BYREF
  common::milog::MiLogStream v9; // [rsp+50h] [rbp-30h] BYREF

  if ( Player::notifyPlayerData(this) )
  {
    common::milog::MiLogStream::create(
      &v9,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/player.cpp",
      "notifyAllData",
      1655);
    v1 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
           &v9,
           (const char (*)[23])"notifyPlayerData fails");
    operator<<(v1, this);
    common::milog::MiLogStream::~MiLogStream(&v9);
  }
  EcsBase<Player,PlayerCompBase,71u>::begin((const EcsBase<Player,PlayerCompBase,71> *const)&__for_begin);
  EcsBase<Player,PlayerCompBase,71u>::end((const EcsBase<Player,PlayerCompBase,71> *const)&__for_end);
  while ( EcsBase<Player,PlayerCompBase,71u>::Iterator::operator!=(&__for_begin, &__for_end) )
  {
    v5 = EcsBase<Player,PlayerCompBase,71u>::Iterator::operator*(&__for_begin);
    std::get<0ul,unsigned int,std::shared_ptr<PlayerCompBase>>(v5);
    player_comp_ptr = (std::tuple_element<1,const std::pair<unsigned int,std::shared_ptr<PlayerCompBase> > >::type *)std::get<1ul,unsigned int,std::shared_ptr<PlayerCompBase>>(v5);
    v2 = std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false> *const)player_comp_ptr);
    if ( *(_BYTE *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v3 = (unsigned __int64)(v2->_vptr_PlayerCompBase + 10);
    if ( *(_BYTE *)((v3 >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    (*(void (__fastcall **)(std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *))v3)(v2);
    EcsBase<Player,PlayerCompBase,71u>::Iterator::operator++(&__for_begin);
  }
  return 0;
};

// Line 1669: range 000000001713DC0C-000000001713E520
int32_t __cdecl Player::notifyPlayerData(Player *const this)
{
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  common::milog::MiLogStream *v4; // r14
  common::milog::MiLogStream *v5; // rax
  int32_t v6; // r14d
  PlayerBasicComp *BasicComp; // rax
  const std::string *v8; // rax
  PlayerBasicComp *v9; // rax
  bool isFirstLoginToday; // al
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  uint32_t RegionId; // eax
  Scene *v13; // rax
  uint32_t v14; // eax
  bool IsSpringAutoUse; // al
  uint32_t SpringAutoUsePercent; // eax
  bool IsFlyable; // al
  bool IsTransferable; // al
  bool IsWeatherLocked; // al
  bool IsGameTimeLocked; // al
  uint32_t Level; // eax
  uint32_t Exp; // eax
  uint32_t Mcoin; // eax
  uint32_t WaitSubMcoin; // eax
  uint32_t Hcoin; // eax
  uint32_t WaitSubHcoin; // eax
  uint32_t Scoin; // eax
  uint32_t WaitSubScoin; // eax
  uint32_t HomeCoin; // eax
  uint32_t WaitSubHomeCoin; // eax
  proto::MpSettingType MpSettingType; // eax
  uint32_t Resin; // eax
  uint32_t WorldLevel; // eax
  uint32_t v34; // eax
  std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v35; // rax
  uint32_t AdjustCDOverTime; // eax
  data::JsonClimateType CurJsonClimateType; // eax
  uint32_t CurClimateAreaId; // eax
  data::JsonClimateType CurClimateAreaType; // eax
  uint32_t LegendaryKey; // eax
  uint32_t CurFinishedDailyTaskNum; // eax
  float MaxStamina; // xmm0_4
  float CurPersistStamina; // xmm0_4
  float CurTemporaryStamina; // xmm0_4
  float CurClimateMeter; // xmm0_4
  bool IsAutoUnlockSpecificEquip; // al
  int32_t result; // eax
  unsigned int val; // [rsp+1Ch] [rbp-1A4h] BYREF
  uint64_t now_ms; // [rsp+20h] [rbp-1A0h]
  google::protobuf::Map<unsigned int,proto::PropValue> *prop_map; // [rsp+28h] [rbp-198h]
  PlayerAvatarComp *avatar_comp; // [rsp+30h] [rbp-190h]
  PlayerBasicComp *basic_comp; // [rsp+38h] [rbp-188h]
  PlayerItemComp *item_comp; // [rsp+40h] [rbp-180h]
  PlayerSceneComp *scene_comp; // [rsp+48h] [rbp-178h]
  PlayerMpComp *mp_comp; // [rsp+50h] [rbp-170h]
  PlayerPersonalLineComp *personal_line_comp; // [rsp+58h] [rbp-168h]
  std::shared_ptr<Config> v57; // [rsp+60h] [rbp-160h] BYREF
  common::milog::MiLogStream v58; // [rsp+70h] [rbp-150h] BYREF
  char v59[304]; // [rsp+90h] [rbp-130h] BYREF

  v1 = (unsigned __int64)v59;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_2(256LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "3 32 16 21 player_world_ptr:1670 64 16 14 scene_ptr:1691 96 120 11 notify:1677";
  *(_QWORD *)(v1 + 16) = Player::notifyPlayerData;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -219021312;
  v3[536862722] = -219021312;
  v3[536862726] = -218103808;
  v3[536862727] = -202116109;
  Player::getSceneComp(this);
  PlayerSceneComp::getMyPlayerWorld((const PlayerSceneComp *const)(v1 + 32));
  if ( std::operator==<PlayerWorld>(0LL, (const std::shared_ptr<PlayerWorld> *)(v1 + 32)) )
  {
    common::milog::MiLogStream::create(
      &v58,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "notifyPlayerData",
      1673);
    v4 = common::milog::MiLogStream::operator<<<char [5],(char *[5])0>(&v58, (const char (*)[5])"uid:");
    val = Player::getUid(this);
    v5 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v4, &val);
    common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(v5, (const char (*)[24])" getMyPlayerWorld fails");
    common::milog::MiLogStream::~MiLogStream(&v58);
    v6 = -1;
  }
  else
  {
    proto::PlayerDataNotify::PlayerDataNotify((proto::PlayerDataNotify *const)(v1 + 96));
    BasicComp = Player::getBasicComp(this);
    v8 = PlayerBasicComp::getNickName[abi:cxx11](BasicComp);
    proto::PlayerDataNotify::set_nick_name((proto::PlayerDataNotify *const)(v1 + 96), v8);
    v9 = Player::getBasicComp(this);
    isFirstLoginToday = PlayerBasicComp::isFirstLoginToday(v9);
    proto::PlayerDataNotify::set_is_first_login_today((proto::PlayerDataNotify *const)(v1 + 96), isFirstLoginToday);
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v57);
    v11 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v57);
    RegionId = Config::getRegionId(v11);
    proto::PlayerDataNotify::set_region_id((proto::PlayerDataNotify *const)(v1 + 96), RegionId);
    std::shared_ptr<Config>::~shared_ptr(&v57);
    now_ms = common::tools::TimeUtils::getNowMs();
    proto::PlayerDataNotify::set_server_time((proto::PlayerDataNotify *const)(v1 + 96), now_ms);
    prop_map = proto::PlayerDataNotify::mutable_prop_map((proto::PlayerDataNotify *const)(v1 + 96));
    avatar_comp = Player::getAvatarComp(this);
    basic_comp = Player::getBasicComp(this);
    item_comp = Player::getItemComp(this);
    scene_comp = Player::getSceneComp(this);
    mp_comp = Player::getMpComp(this);
    personal_line_comp = Player::getPersonalLineComp(this);
    PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v1 + 64));
    if ( std::operator!=<Scene>((const std::shared_ptr<Scene> *)(v1 + 64), 0LL) )
    {
      v13 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 64));
      v14 = PlayerAvatarComp::getLastChangeAvatarSceneTime(avatar_comp, v13);
      appendIntPropValue(prop_map, 0x2711u, v14);
    }
    IsSpringAutoUse = PlayerAvatarComp::getIsSpringAutoUse(avatar_comp);
    appendIntPropValue(prop_map, 0x2714u, IsSpringAutoUse);
    SpringAutoUsePercent = PlayerAvatarComp::getSpringAutoUsePercent(avatar_comp);
    appendIntPropValue(prop_map, 0x2715u, SpringAutoUsePercent);
    IsFlyable = PlayerAvatarComp::getIsFlyable(avatar_comp);
    appendIntPropValue(prop_map, 0x2716u, IsFlyable);
    IsTransferable = PlayerAvatarComp::getIsTransferable(avatar_comp);
    appendIntPropValue(prop_map, 0x2719u, IsTransferable);
    IsWeatherLocked = PlayerBasicComp::getIsWeatherLocked(basic_comp);
    appendIntPropValue(prop_map, 0x2717u, IsWeatherLocked);
    IsGameTimeLocked = PlayerBasicComp::getIsGameTimeLocked(basic_comp);
    appendIntPropValue(prop_map, 0x2718u, IsGameTimeLocked);
    Level = PlayerBasicComp::getLevel(basic_comp);
    appendIntPropValue(prop_map, 0x271Du, Level);
    Exp = PlayerBasicComp::getExp(basic_comp);
    appendIntPropValue(prop_map, 0x271Eu, Exp);
    Mcoin = PlayerItemComp::getMcoin(item_comp);
    appendIntPropValue(prop_map, 0x2729u, Mcoin);
    WaitSubMcoin = PlayerItemComp::getWaitSubMcoin(item_comp);
    appendIntPropValue(prop_map, 0x272Au, WaitSubMcoin);
    Hcoin = PlayerItemComp::getHcoin(item_comp);
    appendIntPropValue(prop_map, 0x271Fu, Hcoin);
    WaitSubHcoin = PlayerItemComp::getWaitSubHcoin(item_comp);
    appendIntPropValue(prop_map, 0x2726u, WaitSubHcoin);
    Scoin = PlayerItemComp::getScoin(item_comp);
    appendIntPropValue(prop_map, 0x2720u, Scoin);
    WaitSubScoin = PlayerItemComp::getWaitSubScoin(item_comp);
    appendIntPropValue(prop_map, 0x2727u, WaitSubScoin);
    HomeCoin = PlayerItemComp::getHomeCoin(item_comp);
    appendIntPropValue(prop_map, 0x273Au, HomeCoin);
    WaitSubHomeCoin = PlayerItemComp::getWaitSubHomeCoin(item_comp);
    appendIntPropValue(prop_map, 0x273Bu, WaitSubHomeCoin);
    MpSettingType = PlayerMpComp::getMpSettingType(mp_comp);
    appendIntPropValue(prop_map, 0x2721u, MpSettingType);
    Resin = PlayerItemComp::getResin(item_comp);
    appendIntPropValue(prop_map, 0x2724u, Resin);
    WorldLevel = PlayerBasicComp::getWorldLevel(basic_comp);
    appendIntPropValue(prop_map, 0x2723u, WorldLevel);
    v34 = PlayerBasicComp::calcWorldLevelLimit(basic_comp);
    appendIntPropValue(prop_map, 0x2737u, v34);
    v35 = std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
    AdjustCDOverTime = PlayerWorld::getAdjustCDOverTime(v35);
    appendIntPropValue(prop_map, 0x2738u, AdjustCDOverTime);
    CurJsonClimateType = PlayerBasicComp::getCurJsonClimateType(basic_comp);
    appendIntPropValue(prop_map, 0x2734u, CurJsonClimateType);
    CurClimateAreaId = PlayerBasicComp::getCurClimateAreaId(basic_comp);
    appendIntPropValue(prop_map, 0x2735u, CurClimateAreaId);
    CurClimateAreaType = PlayerBasicComp::getCurClimateAreaType(basic_comp);
    appendIntPropValue(prop_map, 0x2736u, (unsigned int)CurClimateAreaType);
    LegendaryKey = PlayerItemComp::getLegendaryKey(item_comp);
    appendIntPropValue(prop_map, 0x272Bu, LegendaryKey);
    CurFinishedDailyTaskNum = PlayerPersonalLineComp::getCurFinishedDailyTaskNum(personal_line_comp);
    appendIntPropValue(prop_map, 0x2739u, CurFinishedDailyTaskNum);
    MaxStamina = PlayerBasicComp::getMaxStamina(basic_comp);
    appendHundredIntPropValue(prop_map, 0x271Au, MaxStamina);
    CurPersistStamina = PlayerBasicComp::getCurPersistStamina(basic_comp);
    appendHundredIntPropValue(prop_map, 0x271Bu, CurPersistStamina);
    CurTemporaryStamina = PlayerBasicComp::getCurTemporaryStamina(basic_comp);
    appendHundredIntPropValue(prop_map, 0x271Cu, CurTemporaryStamina);
    CurClimateMeter = PlayerBasicComp::getCurClimateMeter(basic_comp);
    appendHundredIntPropValue(prop_map, 0x2733u, CurClimateMeter);
    IsAutoUnlockSpecificEquip = PlayerBasicComp::getIsAutoUnlockSpecificEquip(basic_comp);
    appendIntPropValue(prop_map, 0x273Cu, IsAutoUnlockSpecificEquip);
    v6 = Player::sendProto(this, (const google::protobuf::Message *)(v1 + 96));
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v1 + 64));
    proto::PlayerDataNotify::~PlayerDataNotify((proto::PlayerDataNotify *const)(v1 + 96));
  }
  std::shared_ptr<PlayerWorld>::~shared_ptr((std::shared_ptr<PlayerWorld> *const)(v1 + 32));
  result = v6;
  if ( v59 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8008) = 0;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1730: range 000000001713E522-0000000017140462
__int64 __fastcall Player::initAndBeginEnterScene(
        Player *const this,
        bool is_relogin,
        uint32_t target_uid,
        uint32_t target_home_owner_uid,
        bool is_client_relogin)
{
  unsigned __int64 p_y; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  std::__shared_ptr<TracingMgr,(__gnu_cxx::_Lock_policy)2>::element_type *v8; // rax
  common::milog::MiLogStream *v9; // r14
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  unsigned int v12; // r14d
  PlayerHomeComp *HomeComp; // rax
  PlayerHomeComp *v14; // rax
  common::milog::MiLogStream *v15; // r14
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // r14
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  PlayerHomeComp *v23; // rax
  common::milog::MiLogStream *v25; // r14
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // r14
  PlayerOfflineMsgComp *OfflineMsgComp; // rax
  std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v29; // rax
  uint32_t OwnerUid; // r14d
  bool v31; // al
  Vector3 *v32; // rax
  Scene *v33; // r14
  uint32_t Uid; // eax
  common::milog::MiLogStream *v35; // r14
  common::milog::MiLogStream *v36; // rax
  common::milog::MiLogStream *v37; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v38; // rax
  common::milog::MiLogStream *v39; // rax
  common::milog::MiLogStream *v40; // rax
  int v41; // r14d
  unsigned __int64 MovePos; // rax
  unsigned __int64 MoveRot; // rax
  Scene *v44; // r14
  uint32_t v45; // eax
  std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v46; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v47; // rax
  common::milog::MiLogStream *v48; // rax
  common::milog::MiLogStream *v49; // rax
  common::milog::MiLogStream *v50; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v51; // rax
  common::milog::MiLogStream *v52; // r14
  common::milog::MiLogStream *v53; // rax
  common::milog::MiLogStream *v54; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v55; // rax
  common::milog::MiLogStream *v56; // rax
  common::milog::MiLogStream *v57; // rax
  common::milog::MiLogStream *v58; // rax
  common::milog::MiLogStream *v59; // rax
  int v60; // r14d
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v61; // rax
  int SceneType; // eax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v63; // rax
  char v64; // r14
  std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v65; // rax
  std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v66; // rax
  bool v67; // r15
  common::milog::MiLogStream *v68; // r14
  common::milog::MiLogStream *v69; // r14
  common::milog::MiLogStream *v70; // r14
  common::milog::MiLogStream *v71; // rax
  bool v72; // r14
  common::milog::MiLogStream *v73; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v74; // rax
  common::milog::MiLogStream *v75; // rax
  common::milog::MiLogStream *v76; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v77; // rax
  common::milog::MiLogStream *v78; // rax
  common::milog::MiLogStream *v79; // r14
  common::milog::MiLogStream *v80; // r14
  common::milog::MiLogStream *v81; // rax
  common::milog::MiLogStream *v82; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v83; // rax
  common::milog::MiLogStream *v84; // rax
  common::milog::MiLogStream *v85; // r14
  common::milog::MiLogStream *v86; // rax
  std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v87; // rax
  unsigned __int64 v88; // rdx
  common::milog::MiLogStream *v89; // rax
  common::milog::MiLogStream *v90; // rax
  common::milog::MiLogStream *v91; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v92; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v93; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v94; // rax
  unsigned __int64 v95; // rdx
  char v96; // al
  common::milog::MiLogStream *v97; // r14
  common::milog::MiLogStream *v98; // rax
  common::milog::MiLogStream *v99; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v100; // rax
  common::milog::MiLogStream *v101; // rax
  Scene *v102; // rax
  common::milog::MiLogStream *v103; // rax
  __int64 result; // rax
  bool is_transfer_to_safe_point; // [rsp+27h] [rbp-2B9h]
  unsigned int val; // [rsp+28h] [rbp-2B8h] BYREF
  int32_t ret; // [rsp+2Ch] [rbp-2B4h]
  uint32_t target_home_point; // [rsp+30h] [rbp-2B0h]
  int32_t ret_0; // [rsp+34h] [rbp-2ACh]
  data::SceneType scene_type; // [rsp+38h] [rbp-2A8h]
  uint32_t gcg_dungeon_id; // [rsp+3Ch] [rbp-2A4h]
  char *v115; // [rsp+40h] [rbp-2A0h] BYREF
  PlayerAvatarComp *avatar_comp; // [rsp+48h] [rbp-298h]
  PlayerSceneComp *scene_comp; // [rsp+50h] [rbp-290h]
  PlayerDungeonComp *dungeon_comp; // [rsp+58h] [rbp-288h]
  PlayerQuestComp *quest_comp; // [rsp+60h] [rbp-280h]
  PlayerGCGComp *gcg_comp; // [rsp+68h] [rbp-278h]
  std::shared_ptr<Config> v121; // [rsp+70h] [rbp-270h] BYREF
  PlayerDungeonComp v122; // [rsp+80h] [rbp-260h] BYREF

  p_y = (unsigned __int64)&v122.quit_pos_.y;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_3(512LL);
    if ( v6 )
      p_y = v6;
  }
  *(_QWORD *)p_y = 1102416563LL;
  *(_QWORD *)(p_y + 8) = "14 48 4 8 ret:1762 64 4 27 my_cur_player_scene_id:1902 80 4 15 target_uid:1729 96 4 26 target_h"
                         "ome_owner_uid:1729 112 12 13 move_pos:1822 144 12 13 move_rot:1823 176 16 20 perf_span_proxy:17"
                         "31 208 16 19 home_world_ptr:1773 240 16 21 player_world_ptr:1785 272 16 14 scene_ptr:1796 304 1"
                         "6 22 dungeon_scene_ptr:1849 336 16 19 born_scene_ptr:1803 368 24 11 notify:1752 432 48 20 player_location:1824";
  *(_QWORD *)(p_y + 16) = Player::initAndBeginEnterScene;
  v7 = (_DWORD *)(p_y >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234556943;
  v7[536862722] = -234556924;
  v7[536862723] = 61956;
  v7[536862723] = 0x4000000;
  v7[536862724] = 62194;
  v7[536862724] = 0x4000000;
  v7[536862725] = 62194;
  v7[536862726] = 62194;
  v7[536862727] = 62194;
  v7[536862728] = 62194;
  v7[536862729] = 62194;
  v7[536862730] = 62194;
  v7[536862731] = 62194;
  v7[536862732] = -218959360;
  v7[536862733] = 62194;
  v7[536862735] = -202116109;
  *(_DWORD *)(p_y + 80) = target_uid;
  *(_DWORD *)(p_y + 96) = target_home_owner_uid;
  opentracing::v3::string_view::string_view(
    (opentracing::v3::string_view *const)(p_y + 336),
    "Player::initAndBeginEnterScene");
  v8 = std::__shared_ptr<TracingMgr,(__gnu_cxx::_Lock_policy)2>::get(&ResourceBox::tracing_mgr_ptr);
  PerfSpanProxy::PerfSpanProxy((PerfSpanProxy *const)(p_y + 176), v8, *(opentracing::v3::string_view *)(p_y + 336));
  Player::notifyAllData(this);
  avatar_comp = Player::getAvatarComp(this);
  scene_comp = Player::getSceneComp(this);
  dungeon_comp = Player::getDungeonComp(this);
  quest_comp = Player::getQuestComp(this);
  gcg_comp = Player::getGCGComp(this);
  if ( *(_DWORD *)(p_y + 80) )
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->uid_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->uid_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&this->uid_);
    }
    if ( this->uid_ != *(_DWORD *)(p_y + 80) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&v122._M_weak_this._M_refcount,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/player.cpp",
        "initAndBeginEnterScene",
        1745);
      v9 = common::milog::MiLogStream::operator<<<char [55],(char *[55])0>(
             (common::milog::MiLogStream *const)&v122._M_weak_this._M_refcount,
             (const char (*)[55])"[TRANSFER] initAndBeginEnterScene joinPlayerScene uid:");
      *(_DWORD *)(p_y + 64) = Player::getUid(this);
      v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(p_y + 64));
      v11 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v10, (const char (*)[13])" target_uid:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(p_y + 80));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v122._M_weak_this._M_refcount);
      ret = PlayerSceneComp::joinPlayerScene(scene_comp, *(_DWORD *)(p_y + 80));
      if ( !ret )
      {
        v12 = 0;
        goto LABEL_103;
      }
      proto::JoinPlayerFailNotify::JoinPlayerFailNotify((proto::JoinPlayerFailNotify *const)(p_y + 368));
      proto::JoinPlayerFailNotify::set_retcode((proto::JoinPlayerFailNotify *const)(p_y + 368), ret);
      Player::sendProto(this, (const google::protobuf::Message *)(p_y + 368));
      proto::JoinPlayerFailNotify::~JoinPlayerFailNotify((proto::JoinPlayerFailNotify *const)(p_y + 368));
    }
  }
  if ( *(_DWORD *)(p_y + 96) )
  {
    HomeComp = Player::getHomeComp(this);
    target_home_point = PlayerHomeComp::getAndClearTryEnterHomePoint(HomeComp);
    v14 = Player::getHomeComp(this);
    is_transfer_to_safe_point = PlayerHomeComp::getAndClearTryEnterHomeIsTransferToSafePoint(v14);
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&v122._M_weak_this._M_refcount,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/player.cpp",
      "initAndBeginEnterScene",
      1761);
    v15 = common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(
            (common::milog::MiLogStream *const)&v122._M_weak_this._M_refcount,
            (const char (*)[49])"[HOME] initAndBeginEnterScene joinHomeScene uid:");
    *(_DWORD *)(p_y + 64) = Player::getUid(this);
    v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, (const unsigned int *)(p_y + 64));
    v17 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
            v16,
            (const char (*)[24])" target_home_owner_uid:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(p_y + 96));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v122._M_weak_this._M_refcount);
    *(_DWORD *)(p_y + 48) = PlayerSceneComp::joinHomeScene(
                              scene_comp,
                              *(_DWORD *)(p_y + 96),
                              0,
                              target_home_point,
                              is_transfer_to_safe_point);
    if ( !*(_DWORD *)(p_y + 48) )
    {
      v12 = 0;
      goto LABEL_103;
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&v122._M_weak_this._M_refcount,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/player.cpp",
      "initAndBeginEnterScene",
      1768);
    v18 = common::milog::MiLogStream::operator<<<char [57],(char *[57])0>(
            (common::milog::MiLogStream *const)&v122._M_weak_this._M_refcount,
            (const char (*)[57])"[HOME] initAndBeginEnterScene joinHomeScene failed. ret:");
    v19 = common::milog::MiLogStream::operator<<<int,(int *)0>(v18, (const int *)(p_y + 48));
    v20 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v19, (const char (*)[6])" uid:");
    *(_DWORD *)(p_y + 64) = Player::getUid(this);
    v21 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v20, (const unsigned int *)(p_y + 64));
    v22 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
            v21,
            (const char (*)[24])" target_home_owner_uid:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v22, (const unsigned int *)(p_y + 96));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v122._M_weak_this._M_refcount);
    v23 = Player::getHomeComp(this);
    PlayerHomeComp::sendJoinHomeWorldFailNotify(v23, *(_DWORD *)(p_y + 48), *(_DWORD *)(p_y + 96));
  }
  PlayerSceneComp::getCurWorld<HomeWorld>((const PlayerSceneComp *const)(p_y + 208));
  if ( !is_relogin || !std::operator!=<HomeWorld>((const std::shared_ptr<HomeWorld> *)(p_y + 208), 0LL) )
  {
LABEL_23:
    PlayerSceneComp::getCurWorld<PlayerWorld>((const PlayerSceneComp *const)(p_y + 240));
    if ( std::operator==<PlayerWorld>((const std::shared_ptr<PlayerWorld> *)(p_y + 240), 0LL) )
    {
      PlayerSceneComp::getMyPlayerWorld((const PlayerSceneComp *const)(p_y + 336));
      std::shared_ptr<PlayerWorld>::operator=(
        (std::shared_ptr<PlayerWorld> *const)(p_y + 240),
        (std::shared_ptr<PlayerWorld> *)(p_y + 336));
      std::shared_ptr<PlayerWorld>::~shared_ptr((std::shared_ptr<PlayerWorld> *const)(p_y + 336));
      if ( std::operator==<PlayerWorld>((const std::shared_ptr<PlayerWorld> *)(p_y + 240), 0LL) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&v122._M_weak_this._M_refcount,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/player.cpp",
          "initAndBeginEnterScene",
          1791);
        v27 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
                (common::milog::MiLogStream *const)&v122._M_weak_this._M_refcount,
                (const char (*)[30])"getMyPlayerWorld fails, uid: ");
        *(_DWORD *)(p_y + 64) = Player::getUid(this);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v27, (const unsigned int *)(p_y + 64));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v122._M_weak_this._M_refcount);
        v12 = -1;
LABEL_101:
        std::shared_ptr<PlayerWorld>::~shared_ptr((std::shared_ptr<PlayerWorld> *const)(p_y + 240));
        goto LABEL_102;
      }
    }
    PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(p_y + 272));
    v31 = 0;
    if ( !is_relogin )
    {
      OfflineMsgComp = Player::getOfflineMsgComp(this);
      if ( PlayerOfflineMsgComp::isSetBornScenePos(OfflineMsgComp) )
      {
        v29 = std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_y + 240));
        OwnerUid = World::getOwnerUid(v29);
        if ( OwnerUid == Player::getUid(this) )
          v31 = 1;
      }
    }
    if ( v31 )
    {
      Vector3::Vector3((Vector3 *const)(p_y + 144), 0.0, 0.0, 0.0);
      v32 = (Vector3 *)Player::getOfflineMsgComp(this);
      PlayerOfflineMsgComp::getAndClearBornScenePos((PlayerOfflineMsgComp *const)(p_y + 336), v32);
      if ( std::operator!=<Scene>((const std::shared_ptr<Scene> *)(p_y + 336), 0LL) )
      {
        ScenePlayerLocation::ScenePlayerLocation((ScenePlayerLocation *const)(p_y + 432));
        *(_QWORD *)(p_y + 432) = *(_QWORD *)(p_y + 144);
        *(_DWORD *)(p_y + 440) = *(_DWORD *)(p_y + 152);
        *(_QWORD *)(p_y + 456) = *(_QWORD *)(p_y + 144);
        *(_DWORD *)(p_y + 464) = *(_DWORD *)(p_y + 152);
        v33 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_y + 336));
        Uid = Player::getUid(this);
        Scene::setPlayerLocation(v33, Uid, (const ScenePlayerLocation *)(p_y + 432));
        std::shared_ptr<Scene>::operator=(
          (std::shared_ptr<Scene> *const)(p_y + 272),
          (const std::shared_ptr<Scene> *)(p_y + 336));
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&v122._M_weak_this._M_refcount,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/player/player.cpp",
          "initAndBeginEnterScene",
          1811);
        v35 = common::milog::MiLogStream::operator<<<char [53],(char *[53])0>(
                (common::milog::MiLogStream *const)&v122._M_weak_this._M_refcount,
                (const char (*)[53])"[EnterScene] initScene is offlineMsg Born Scene,uid:");
        *(_DWORD *)(p_y + 48) = Player::getUid(this);
        v36 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v35,
                (const unsigned int *)(p_y + 48));
        v37 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v36, (const char (*)[2])" ");
        v38 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_y + 336));
        *(_DWORD *)(p_y + 64) = Scene::getSceneId(v38);
        v39 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v37,
                (const unsigned int *)(p_y + 64));
        v40 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v39, (const char (*)[2])" ");
        operator<<(v40, (const Vector3 *)(p_y + 144));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v122._M_weak_this._M_refcount);
        v41 = 0;
      }
      else
      {
        v41 = 1;
      }
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(p_y + 336));
      if ( v41 != 1 )
        goto LABEL_83;
    }
    if ( PlayerQuestComp::isMovePosOnLogin(quest_comp) )
    {
      PlayerQuestComp::setIsMovePosOnLogin(quest_comp, 0);
      PlayerQuestComp::getMoveScene((const PlayerQuestComp *const)(p_y + 336));
      PlayerQuestComp::resetMoveSceneWtr(quest_comp);
      if ( std::operator!=<Scene>((const std::shared_ptr<Scene> *)(p_y + 336), 0LL) )
      {
        MovePos = (unsigned __int64)PlayerQuestComp::getMovePos(quest_comp);
        if ( (char)(MovePos & 7) >= *(_BYTE *)((MovePos >> 3) + 0x7FFF8000)
          && *(_BYTE *)((MovePos >> 3) + 0x7FFF8000) != 0
          || *(_BYTE *)(((MovePos + 11) >> 3) + 0x7FFF8000) != 0
          && (char)((MovePos + 11) & 7) >= *(_BYTE *)(((MovePos + 11) >> 3) + 0x7FFF8000) )
        {
          MovePos = __asan_report_load_n(MovePos, 12LL);
        }
        *(_QWORD *)(p_y + 112) = *(_QWORD *)MovePos;
        *(_DWORD *)(p_y + 120) = *(_DWORD *)(MovePos + 8);
        MoveRot = (unsigned __int64)PlayerQuestComp::getMoveRot(quest_comp);
        if ( (char)(MoveRot & 7) >= *(_BYTE *)((MoveRot >> 3) + 0x7FFF8000)
          && *(_BYTE *)((MoveRot >> 3) + 0x7FFF8000) != 0
          || *(_BYTE *)(((MoveRot + 11) >> 3) + 0x7FFF8000) != 0
          && (char)((MoveRot + 11) & 7) >= *(_BYTE *)(((MoveRot + 11) >> 3) + 0x7FFF8000) )
        {
          MoveRot = __asan_report_load_n(MoveRot, 12LL);
        }
        *(_QWORD *)(p_y + 144) = *(_QWORD *)MoveRot;
        *(_DWORD *)(p_y + 152) = *(_DWORD *)(MoveRot + 8);
        ScenePlayerLocation::ScenePlayerLocation((ScenePlayerLocation *const)(p_y + 432));
        *(_QWORD *)(p_y + 432) = *(_QWORD *)(p_y + 112);
        *(_DWORD *)(p_y + 440) = *(_DWORD *)(p_y + 120);
        *(_QWORD *)(p_y + 444) = *(_QWORD *)(p_y + 144);
        *(_DWORD *)(p_y + 452) = *(_DWORD *)(p_y + 152);
        *(_QWORD *)(p_y + 456) = *(_QWORD *)(p_y + 112);
        *(_DWORD *)(p_y + 464) = *(_DWORD *)(p_y + 120);
        *(_QWORD *)(p_y + 468) = *(_QWORD *)(p_y + 144);
        *(_DWORD *)(p_y + 476) = *(_DWORD *)(p_y + 152);
        v44 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_y + 336));
        v45 = Player::getUid(this);
        Scene::setPlayerLocation(v44, v45, (const ScenePlayerLocation *)(p_y + 432));
        std::shared_ptr<Scene>::operator=(
          (std::shared_ptr<Scene> *const)(p_y + 272),
          (const std::shared_ptr<Scene> *)(p_y + 336));
        v46 = std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_y + 240));
        LODWORD(v44) = World::getOwnerUid(v46);
        v47 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_y + 272));
        if ( (_DWORD)v44 != Scene::getOwnerUid(v47) )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&v122._M_weak_this._M_refcount,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/player.cpp",
            "initAndBeginEnterScene",
            1833);
          v48 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(
                  (common::milog::MiLogStream *const)&v122._M_weak_this._M_refcount,
                  (const char (*)[6])"uid: ");
          v49 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v48, &this->uid_);
          v50 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                  v49,
                  (const char (*)[23])" scene_ptr owner uid: ");
          v51 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_y + 272));
          *(_DWORD *)(p_y + 64) = Scene::getOwnerUid(v51);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v50, (const unsigned int *)(p_y + 64));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v122._M_weak_this._M_refcount);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&v122._M_weak_this._M_refcount,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/player/player.cpp",
          "initAndBeginEnterScene",
          1835);
        v52 = common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(
                (common::milog::MiLogStream *const)&v122._M_weak_this._M_refcount,
                (const char (*)[49])"[EnterScene] initScene is quest_move_scene, uid:");
        *(_DWORD *)(p_y + 64) = Player::getUid(this);
        v53 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v52,
                (const unsigned int *)(p_y + 64));
        v54 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v53, (const char (*)[8])" scene:");
        v55 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_y + 336));
        v56 = common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v54, v55);
        v57 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v56, (const char (*)[6])" pos:");
        v58 = operator<<(v57, (const Vector3 *)(p_y + 112));
        v59 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v58, (const char (*)[6])" rot:");
        operator<<(v59, (const Vector3 *)(p_y + 144));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v122._M_weak_this._M_refcount);
        v60 = 0;
      }
      else
      {
        v60 = 1;
      }
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(p_y + 336));
      if ( v60 != 1 )
        goto LABEL_83;
    }
    if ( !std::operator!=<Scene>((const std::shared_ptr<Scene> *)(p_y + 272), 0LL) )
    {
LABEL_75:
      *(_DWORD *)(p_y + 64) = PlayerSceneComp::getInitEnterPlayerSceneId(scene_comp);
      if ( !*(_DWORD *)(p_y + 64) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&v122._M_weak_this._M_refcount,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/player.cpp",
          "initAndBeginEnterScene",
          1905);
        v86 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                (common::milog::MiLogStream *const)&v122._M_weak_this._M_refcount,
                (const char (*)[26])off_26031900);
        operator<<(v86, this);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v122._M_weak_this._M_refcount);
        v12 = -1;
LABEL_100:
        std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(p_y + 272));
        goto LABEL_101;
      }
      v87 = std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_y + 240));
      if ( *(_BYTE *)(((unsigned __int64)v87 >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v88 = (unsigned __int64)(v87->_vptr_World + 10);
      if ( *(_BYTE *)((v88 >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      (*(void (__fastcall **)(unsigned __int64, std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, _QWORD))v88)(
        p_y + 304,
        v87,
        *(unsigned int *)(p_y + 64));
      std::shared_ptr<Scene>::operator=(
        (std::shared_ptr<Scene> *const)(p_y + 272),
        (std::shared_ptr<Scene> *)(p_y + 304));
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(p_y + 304));
      if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(p_y + 272), 0LL) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&v122._M_weak_this._M_refcount,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/player.cpp",
          "initAndBeginEnterScene",
          1911);
        v89 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
                (common::milog::MiLogStream *const)&v122._M_weak_this._M_refcount,
                (const char (*)[30])"scene_ptr is null, scene_id: ");
        v90 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v89,
                (const unsigned int *)(p_y + 64));
        operator<<(v90, this);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v122._M_weak_this._M_refcount);
        v12 = -1;
        goto LABEL_100;
      }
LABEL_83:
      if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(p_y + 272), 0LL) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&v122._M_weak_this._M_refcount,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/player.cpp",
          "initAndBeginEnterScene",
          1918);
        v91 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                (common::milog::MiLogStream *const)&v122._M_weak_this._M_refcount,
                (const char (*)[19])"scene_ptr is null.");
        operator<<(v91, this);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v122._M_weak_this._M_refcount);
        v12 = -1;
      }
      else
      {
        v92 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_y + 272));
        if ( Scene::getSceneType(v92) != SCENE_WORLD )
        {
          v93 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_y + 272));
          if ( Scene::getSceneType(v93) != SCENE_ROOM )
            goto LABEL_93;
        }
        v94 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_y + 272));
        if ( *(_BYTE *)(((unsigned __int64)v94 >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v95 = (unsigned __int64)(v94->_vptr_DescribalBase + 54);
        if ( *(_BYTE *)((v95 >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        if ( (*(unsigned int (__fastcall **)(std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *))v95)(v94) )
          v96 = 1;
        else
LABEL_93:
          v96 = 0;
        if ( !v96 )
          goto LABEL_97;
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&v122._M_weak_this._M_refcount,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/player/player.cpp",
          "initAndBeginEnterScene",
          1924);
        v97 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                (common::milog::MiLogStream *const)&v122._M_weak_this._M_refcount,
                (const char (*)[24])"scene is invalid, uid: ");
        *(_DWORD *)(p_y + 48) = Player::getUid(this);
        v98 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v97,
                (const unsigned int *)(p_y + 48));
        v99 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v98, (const char (*)[13])" ,scene_id: ");
        v100 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_y + 272));
        *(_DWORD *)(p_y + 64) = Scene::getSceneId(v100);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v99, (const unsigned int *)(p_y + 64));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v122._M_weak_this._M_refcount);
        std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_y + 240));
        PlayerWorld::getMainWorldScene((PlayerWorld *const)(p_y + 336));
        std::shared_ptr<Scene>::operator=<PlayerWorldScene>(
          (std::shared_ptr<Scene> *const)(p_y + 272),
          (std::shared_ptr<PlayerWorldScene> *)(p_y + 336));
        std::shared_ptr<PlayerWorldScene>::~shared_ptr((std::shared_ptr<PlayerWorldScene> *const)(p_y + 336));
        if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(p_y + 272), 0LL) )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&v122._M_weak_this._M_refcount,
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/player/player.cpp",
            "initAndBeginEnterScene",
            1928);
          v101 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                   (common::milog::MiLogStream *const)&v122._M_weak_this._M_refcount,
                   (const char (*)[19])"scene_ptr is null.");
          operator<<(v101, this);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v122._M_weak_this._M_refcount);
          v12 = -1;
        }
        else
        {
LABEL_97:
          v102 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_y + 272));
          if ( Player::beginEnterScene(this, v102, is_relogin, is_client_relogin) )
          {
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)&v122._M_weak_this._M_refcount,
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/player/player.cpp",
              "initAndBeginEnterScene",
              1935);
            v103 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                     (common::milog::MiLogStream *const)&v122._M_weak_this._M_refcount,
                     (const char (*)[22])"beginEnterScene fails");
            operator<<(v103, this);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v122._M_weak_this._M_refcount);
            v12 = -1;
          }
          else
          {
            v12 = 0;
          }
        }
      }
      goto LABEL_100;
    }
    v61 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_y + 272));
    SceneType = Scene::getSceneType(v61);
    scene_type = SceneType;
    if ( SceneType <= 5 )
    {
      if ( SceneType >= 4 )
      {
        std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_y + 272));
        Scene::getOwnHome((const Scene *const)(p_y + 336));
        v72 = std::operator==<Home>((const std::shared_ptr<Home> *)(p_y + 336), 0LL);
        std::shared_ptr<Home>::~shared_ptr((std::shared_ptr<Home> *const)(p_y + 336));
        if ( v72 )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&v122._M_weak_this._M_refcount,
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/player/player.cpp",
            "initAndBeginEnterScene",
            1882);
          v73 = common::milog::MiLogStream::operator<<<char [51],(char *[51])0>(
                  (common::milog::MiLogStream *const)&v122._M_weak_this._M_refcount,
                  (const char (*)[51])"[EnterScene] scene owner_home not found. scene_id:");
          v74 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_y + 272));
          val = Scene::getSceneId(v74);
          v75 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v73, &val);
          v76 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v75, (const char (*)[12])" home_uid: ");
          v77 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_y + 272));
          *(_DWORD *)(p_y + 48) = Scene::getOwnerUid(v77);
          v78 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v76,
                  (const unsigned int *)(p_y + 48));
          v79 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v78, (const char (*)[6])" uid:");
          *(_DWORD *)(p_y + 64) = Player::getUid(this);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v79, (const unsigned int *)(p_y + 64));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v122._M_weak_this._M_refcount);
          std::shared_ptr<Scene>::shared_ptr((std::shared_ptr<Scene> *const)(p_y + 336), 0LL);
          std::shared_ptr<Scene>::operator=(
            (std::shared_ptr<Scene> *const)(p_y + 272),
            (std::shared_ptr<Scene> *)(p_y + 336));
          std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(p_y + 336));
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&v122._M_weak_this._M_refcount,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/player.cpp",
          "initAndBeginEnterScene",
          1886);
        common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
          (common::milog::MiLogStream *const)&v122._M_weak_this._M_refcount,
          (const char (*)[25])"it should not come here!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v122._M_weak_this._M_refcount);
LABEL_74:
        if ( std::operator!=<Scene>((const std::shared_ptr<Scene> *)(p_y + 272), 0LL) )
          goto LABEL_83;
        goto LABEL_75;
      }
      if ( SceneType == 3 || SceneType == 1 )
        goto LABEL_74;
      if ( SceneType == 2 )
      {
        std::dynamic_pointer_cast<DungeonScene,Scene>((const std::shared_ptr<Scene> *)(p_y + 304));
        ServiceBox::findService<GameserverService>();
        GameserverService::getConfig((GameserverService *const)&v121);
        v63 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v121);
        gcg_dungeon_id = ConstValueExcelConfigMgr::getGCGDungeonId(&v63->design_config.txt_config_mgr.const_value_config_mgr);
        std::shared_ptr<Config>::~shared_ptr(&v121);
        v64 = 0;
        v67 = std::operator!=<DungeonScene>((const std::shared_ptr<DungeonScene> *)(p_y + 304), 0LL)
           && (v65 = std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_y + 304)),
               DungeonScene::getDungeonResult(v65) == DUNGEON_RESULT_NONE)
           && (!PlayerAvatarComp::isAllAvatarDead(avatar_comp) || PlayerAvatarComp::isRevivableAfterAllDead(avatar_comp))
           && (std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_y + 304)),
               Scene::getOwnPlayer((const Scene *const)(p_y + 336)),
               v64 = 1,
               std::operator!=<Player>((const std::shared_ptr<Player> *)(p_y + 336), 0LL))
           && (v66 = std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_y + 304)),
               gcg_dungeon_id != DungeonScene::getDungeonId(v66))
           || is_client_relogin && PlayerGCGComp::isInGame(gcg_comp);
        if ( v64 )
          std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(p_y + 336));
        if ( v67 )
        {
          std::shared_ptr<Scene>::operator=<DungeonScene>(
            (std::shared_ptr<Scene> *const)(p_y + 272),
            (const std::shared_ptr<DungeonScene> *)(p_y + 304));
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&v122._M_weak_this._M_refcount,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/player/player.cpp",
            "initAndBeginEnterScene",
            1863);
          v68 = common::milog::MiLogStream::operator<<<char [51],(char *[51])0>(
                  (common::milog::MiLogStream *const)&v122._M_weak_this._M_refcount,
                  (const char (*)[51])"[EnterScene] initScene is dungeon_scene_ptr, uid: ");
          *(_DWORD *)(p_y + 64) = Player::getUid(this);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v68, (const unsigned int *)(p_y + 64));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v122._M_weak_this._M_refcount);
        }
        else
        {
          PlayerDungeonComp::getQuitScene(&v122);
          std::shared_ptr<Scene>::operator=((std::shared_ptr<Scene> *const)(p_y + 272), (std::shared_ptr<Scene> *)&v122);
          std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)&v122);
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&v122._M_weak_this._M_refcount,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/player/player.cpp",
            "initAndBeginEnterScene",
            1868);
          v69 = common::milog::MiLogStream::operator<<<char [51],(char *[51])0>(
                  (common::milog::MiLogStream *const)&v122._M_weak_this._M_refcount,
                  (const char (*)[51])"[EnterScene] initScene is dungeon_quit_scene, uid:");
          *(_DWORD *)(p_y + 64) = Player::getUid(this);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v69, (const unsigned int *)(p_y + 64));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v122._M_weak_this._M_refcount);
          if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(p_y + 272), 0LL) )
          {
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)&v122._M_weak_this._M_refcount,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/player.cpp",
              "initAndBeginEnterScene",
              1871);
            v70 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                    (common::milog::MiLogStream *const)&v122._M_weak_this._M_refcount,
                    (const char (*)[25])"getQuitScenePosRot uid: ");
            *(_DWORD *)(p_y + 64) = Player::getUid(this);
            v71 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v70,
                    (const unsigned int *)(p_y + 64));
            common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
              v71,
              (const char (*)[32])" failed, using PlayerWorldScene");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v122._M_weak_this._M_refcount);
          }
        }
        std::shared_ptr<DungeonScene>::~shared_ptr((std::shared_ptr<DungeonScene> *const)(p_y + 304));
        goto LABEL_74;
      }
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&v122._M_weak_this._M_refcount,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "initAndBeginEnterScene",
      1891);
    v80 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
            (common::milog::MiLogStream *const)&v122._M_weak_this._M_refcount,
            (const char (*)[33])"[EnterScene] invalid scene_type:");
    v115 = (char *)data::enumValToStr(scene_type);
    v81 = common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v80, (const char *const *)&v115);
    v82 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v81, (const char (*)[11])" scene_id:");
    v83 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_y + 272));
    *(_DWORD *)(p_y + 48) = Scene::getSceneId(v83);
    v84 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v82, (const unsigned int *)(p_y + 48));
    v85 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v84, (const char (*)[6])" uid:");
    *(_DWORD *)(p_y + 64) = Player::getUid(this);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v85, (const unsigned int *)(p_y + 64));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v122._M_weak_this._M_refcount);
    std::shared_ptr<Scene>::shared_ptr((std::shared_ptr<Scene> *const)(p_y + 336), 0LL);
    std::shared_ptr<Scene>::operator=((std::shared_ptr<Scene> *const)(p_y + 272), (std::shared_ptr<Scene> *)(p_y + 336));
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(p_y + 336));
    goto LABEL_74;
  }
  std::shared_ptr<HomeWorld>::shared_ptr(
    (std::shared_ptr<HomeWorld> *const)(p_y + 336),
    (const std::shared_ptr<HomeWorld> *)(p_y + 208));
  ret_0 = Player::reloginInHomeWorld(this, (HomeWorldPtr *)(p_y + 336), is_relogin, is_client_relogin);
  std::shared_ptr<HomeWorld>::~shared_ptr((std::shared_ptr<HomeWorld> *const)(p_y + 336));
  if ( ret_0 )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&v122._M_weak_this._M_refcount,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/player.cpp",
      "initAndBeginEnterScene",
      1781);
    v25 = common::milog::MiLogStream::operator<<<char [5],(char *[5])0>(
            (common::milog::MiLogStream *const)&v122._M_weak_this._M_refcount,
            (const char (*)[5])"uid:");
    *(_DWORD *)(p_y + 64) = Player::getUid(this);
    v26 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v25, (const unsigned int *)(p_y + 64));
    common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
      v26,
      (const char (*)[26])" reloginInHomeWorld fails");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v122._M_weak_this._M_refcount);
    goto LABEL_23;
  }
  v12 = 0;
LABEL_102:
  std::shared_ptr<HomeWorld>::~shared_ptr((std::shared_ptr<HomeWorld> *const)(p_y + 208));
LABEL_103:
  PerfSpanProxy::~PerfSpanProxy((PerfSpanProxy *const)(p_y + 176));
  result = v12;
  if ( (PlayerDungeonComp *)&v122.quit_pos_.y == (PlayerDungeonComp *)p_y )
  {
    *(_QWORD *)((p_y >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((p_y >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((p_y >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((p_y >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((p_y >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((p_y >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((p_y >> 3) + 0x7FFF8030) = 0LL;
    *(_DWORD *)((p_y >> 3) + 0x7FFF803C) = 0;
  }
  else
  {
    *(_QWORD *)p_y = 1172321806LL;
    *(_QWORD *)((p_y >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((p_y >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((p_y >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((p_y >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((p_y >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((p_y >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((p_y >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((p_y >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1942: range 0000000017140464-000000001714130B
int32_t __cdecl Player::reloginInHomeWorld(
        Player *const this,
        HomeWorldPtr *p_home_world_ptr,
        bool is_relogin,
        bool is_client_relogin)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  int32_t v7; // r14d
  common::milog::MiLogStream *v8; // r14
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // r14
  std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  common::milog::MiLogStream *v13; // r14
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  Home *v16; // rax
  common::milog::MiLogStream *v17; // r14
  std::__shared_ptr_access<HomeModuleData,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // r14
  std::__shared_ptr_access<HomeModuleData,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  HomeModuleData *v22; // rax
  common::milog::MiLogStream *v23; // r14
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // r14
  std::__shared_ptr_access<HomeModuleData,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v28; // rax
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // r14
  std::__shared_ptr_access<HomeModuleData,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v31; // rax
  common::milog::MiLogStream *v32; // r14
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // r14
  common::milog::MiLogStream *v35; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v36; // rax
  uint32_t OwnerUid; // r14d
  std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v38; // rax
  common::milog::MiLogStream *v39; // r14
  common::milog::MiLogStream *v40; // rax
  common::milog::MiLogStream *v41; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v42; // rax
  common::milog::MiLogStream *v43; // rax
  common::milog::MiLogStream *v44; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v45; // rax
  common::milog::MiLogStream *v46; // r14
  common::milog::MiLogStream *v47; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v48; // rax
  common::milog::MiLogStream *v49; // r14
  common::milog::MiLogStream *v50; // rax
  common::milog::MiLogStream *v51; // r14
  std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v52; // rax
  common::milog::MiLogStream *v53; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v54; // rax
  common::milog::MiLogStream *v55; // r14
  common::milog::MiLogStream *v56; // rax
  common::milog::MiLogStream *v57; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v58; // rax
  common::milog::MiLogStream *v59; // rax
  Scene *v60; // rsi
  common::milog::MiLogStream *v61; // rdx
  int32_t result; // eax
  unsigned int val; // [rsp+24h] [rbp-13Ch] BYREF
  unsigned int HomeUid; // [rsp+28h] [rbp-138h] BYREF
  data::SceneType scene_type; // [rsp+2Ch] [rbp-134h]
  std::shared_ptr<HomeWorldScene> v68; // [rsp+30h] [rbp-130h] BYREF
  std::shared_ptr<HomeWorldScene> __r; // [rsp+40h] [rbp-120h] BYREF
  common::milog::MiLogStream v70; // [rsp+50h] [rbp-110h] BYREF
  char v71[240]; // [rsp+70h] [rbp-F0h] BYREF

  v4 = (unsigned __int64)v71;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(192LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "5 48 4 13 scene_id:1958 64 16 13 home_ptr:1947 96 16 14 scene_ptr:1955 128 16 19 dest_scene_ptr:"
                        "1978 160 16 20 home_module_ptr:1960";
  *(_QWORD *)(v4 + 16) = Player::reloginInHomeWorld;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -219021312;
  v6[536862723] = -219021312;
  v6[536862724] = -219021312;
  v6[536862725] = -202178560;
  if ( std::operator==<HomeWorld>(0LL, p_home_world_ptr) )
  {
    v7 = -1;
  }
  else
  {
    std::__shared_ptr_access<HomeWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<HomeWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_home_world_ptr);
    HomeWorld::getOwnHome((const HomeWorld *const)(v4 + 64));
    if ( std::operator==<Home>(0LL, (const std::shared_ptr<Home> *)(v4 + 64)) )
    {
      common::milog::MiLogStream::create(
        &v70,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/player.cpp",
        "reloginInHomeWorld",
        1950);
      common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v70, (const char (*)[17])"getOwnHome fails");
      common::milog::MiLogStream::~MiLogStream(&v70);
      v7 = -1;
    }
    else
    {
      common::milog::MiLogStream::create(
        &v70,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/player.cpp",
        "reloginInHomeWorld",
        1953);
      v8 = common::milog::MiLogStream::operator<<<char [5],(char *[5])0>(&v70, (const char (*)[5])"uid:");
      val = Player::getUid(this);
      v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, &val);
      v10 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v9, (const char (*)[15])" cur home_uid:");
      v11 = std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
      HomeUid = Home::getHomeUid(v11);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, &HomeUid);
      common::milog::MiLogStream::~MiLogStream(&v70);
      Player::getSceneComp(this);
      PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v4 + 96));
      if ( std::operator!=<Scene>((const std::shared_ptr<Scene> *)(v4 + 96), 0LL) )
      {
        v12 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
        *(_DWORD *)(v4 + 48) = Scene::getSceneId(v12);
        common::milog::MiLogStream::create(
          &v70,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/player/player.cpp",
          "reloginInHomeWorld",
          1959);
        v13 = common::milog::MiLogStream::operator<<<char [5],(char *[5])0>(&v70, (const char (*)[5])"uid:");
        HomeUid = Player::getUid(this);
        v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, &HomeUid);
        v15 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                v14,
                (const char (*)[23])" relogin use CurScene:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, (const unsigned int *)(v4 + 48));
        common::milog::MiLogStream::~MiLogStream(&v70);
        v16 = std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
        Home::getSceneComp(v16);
        HomeSceneComp::getCurHomeModuleData((HomeSceneComp *const)(v4 + 160));
        if ( std::operator!=<HomeModuleData>((const std::shared_ptr<HomeModuleData> *)(v4 + 160), 0LL) )
        {
          common::milog::MiLogStream::create(
            &v70,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/player/player.cpp",
            "reloginInHomeWorld",
            1963);
          v17 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                  &v70,
                  (const char (*)[15])"cur_module_id:");
          v18 = std::__shared_ptr_access<HomeModuleData,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<HomeModuleData,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 160));
          v19 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, &v18->module_id);
          v20 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v19, (const char (*)[13])" main_scene:");
          v21 = std::__shared_ptr_access<HomeModuleData,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<HomeModuleData,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 160));
          HomeUid = HomeModuleData::getWorldSceneId(v21);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v20, &HomeUid);
          common::milog::MiLogStream::~MiLogStream(&v70);
          v22 = std::__shared_ptr_access<HomeModuleData,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<HomeModuleData,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 160));
          if ( !HomeModuleData::findHomeSceneData(v22, *(_DWORD *)(v4 + 48)) )
          {
            common::milog::MiLogStream::create(
              &v70,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/player.cpp",
              "reloginInHomeWorld",
              1966);
            v23 = common::milog::MiLogStream::operator<<<char [5],(char *[5])0>(&v70, (const char (*)[5])"uid:");
            val = Player::getUid(this);
            v24 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v23, &val);
            v25 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                    v24,
                    (const char (*)[15])" cur scene_id:");
            v26 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v25,
                    (const unsigned int *)(v4 + 48));
            v27 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                    v26,
                    (const char (*)[12])" module_id:");
            v28 = std::__shared_ptr_access<HomeModuleData,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<HomeModuleData,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 160));
            v29 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v27, &v28->module_id);
            v30 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
                    v29,
                    (const char (*)[40])" not fit, and use cur mail world scene:");
            v31 = std::__shared_ptr_access<HomeModuleData,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<HomeModuleData,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 160));
            HomeUid = HomeModuleData::getWorldSceneId(v31);
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v30, &HomeUid);
            common::milog::MiLogStream::~MiLogStream(&v70);
            std::__shared_ptr_access<HomeWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<HomeWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_home_world_ptr);
            HomeWorld::findMainWorldScene((HomeWorld *const)&__r);
            std::shared_ptr<Scene>::operator=<HomeWorldScene>((std::shared_ptr<Scene> *const)(v4 + 96), &__r);
            std::shared_ptr<HomeWorldScene>::~shared_ptr(&__r);
          }
        }
        else
        {
          common::milog::MiLogStream::create(
            &v70,
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/player/player.cpp",
            "reloginInHomeWorld",
            1973);
          v32 = common::milog::MiLogStream::operator<<<char [5],(char *[5])0>(&v70, (const char (*)[5])"uid:");
          HomeUid = Player::getUid(this);
          v33 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v32, &HomeUid);
          common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
            v33,
            (const char (*)[28])" getCurHomeModuleData fails");
          common::milog::MiLogStream::~MiLogStream(&v70);
        }
        std::shared_ptr<HomeModuleData>::~shared_ptr((std::shared_ptr<HomeModuleData> *const)(v4 + 160));
      }
      else
      {
        Player::getSceneComp(this);
        PlayerSceneComp::getDestScene((const PlayerSceneComp *const)(v4 + 128));
        if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v4 + 128)) )
        {
          std::__shared_ptr_access<HomeWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<HomeWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_home_world_ptr);
          HomeWorld::findMainWorldScene((HomeWorld *const)&v68);
          std::dynamic_pointer_cast<Scene,HomeWorldScene>(&__r);
          std::shared_ptr<Scene>::operator=((std::shared_ptr<Scene> *const)(v4 + 96), (std::shared_ptr<Scene> *)&__r);
          std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)&__r);
          std::shared_ptr<HomeWorldScene>::~shared_ptr(&v68);
          common::milog::MiLogStream::create(
            &v70,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/player/player.cpp",
            "reloginInHomeWorld",
            1983);
          v34 = common::milog::MiLogStream::operator<<<char [5],(char *[5])0>(&v70, (const char (*)[5])"uid:");
          HomeUid = Player::getUid(this);
          v35 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v34, &HomeUid);
          common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
            v35,
            (const char (*)[27])" dest_scene_ptr is nullptr");
          common::milog::MiLogStream::~MiLogStream(&v70);
        }
        else
        {
          v36 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
          OwnerUid = Scene::getOwnerUid(v36);
          v38 = std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
          if ( OwnerUid == Home::getHomeUid(v38) )
          {
            std::shared_ptr<Scene>::operator=(
              (std::shared_ptr<Scene> *const)(v4 + 96),
              (const std::shared_ptr<Scene> *)(v4 + 128));
            common::milog::MiLogStream::create(
              &v70,
              &common::milog::MiLogDefault::default_log_obj_,
              1u,
              "./src/player/player.cpp",
              "reloginInHomeWorld",
              1994);
            v46 = common::milog::MiLogStream::operator<<<char [5],(char *[5])0>(&v70, (const char (*)[5])"uid:");
            val = Player::getUid(this);
            v47 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v46, &val);
            v44 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                    v47,
                    (const char (*)[24])" relogin use DestScene:");
            v48 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
            HomeUid = Scene::getSceneId(v48);
          }
          else
          {
            std::__shared_ptr_access<HomeWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<HomeWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_home_world_ptr);
            HomeWorld::findMainWorldScene((HomeWorld *const)(v4 + 160));
            std::dynamic_pointer_cast<Scene,HomeWorldScene>(&__r);
            std::shared_ptr<Scene>::operator=((std::shared_ptr<Scene> *const)(v4 + 96), (std::shared_ptr<Scene> *)&__r);
            std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)&__r);
            std::shared_ptr<HomeWorldScene>::~shared_ptr((std::shared_ptr<HomeWorldScene> *const)(v4 + 160));
            common::milog::MiLogStream::create(
              &v70,
              &common::milog::MiLogDefault::default_log_obj_,
              1u,
              "./src/player/player.cpp",
              "reloginInHomeWorld",
              1988);
            v39 = common::milog::MiLogStream::operator<<<char [5],(char *[5])0>(&v70, (const char (*)[5])"uid:");
            *(_DWORD *)(v4 + 48) = Player::getUid(this);
            v40 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v39,
                    (const unsigned int *)(v4 + 48));
            v41 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(
                    v40,
                    (const char (*)[13])" dest_scene:");
            v42 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
            val = Scene::getSceneId(v42);
            v43 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v41, &val);
            v44 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                    v43,
                    (const char (*)[14])" scene owner:");
            v45 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
            HomeUid = Scene::getOwnerUid(v45);
          }
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v44, &HomeUid);
          common::milog::MiLogStream::~MiLogStream(&v70);
        }
        std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v4 + 128));
      }
      if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v4 + 96)) )
      {
        common::milog::MiLogStream::create(
          &v70,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/player.cpp",
          "reloginInHomeWorld",
          1999);
        v49 = common::milog::MiLogStream::operator<<<char [5],(char *[5])0>(&v70, (const char (*)[5])"uid:");
        val = Player::getUid(this);
        v50 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v49, &val);
        v51 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v50, (const char (*)[10])off_26031EC0);
        v52 = std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
        HomeUid = Home::getHomeUid(v52);
        v53 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v51, &HomeUid);
        common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
          v53,
          (const char (*)[22])" but find scene fails");
        common::milog::MiLogStream::~MiLogStream(&v70);
        v7 = -1;
      }
      else
      {
        v54 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
        scene_type = Scene::getSceneType(v54);
        if ( scene_type == SCENE_HOME_WORLD || scene_type == SCENE_HOME_ROOM )
        {
          v60 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
          if ( Player::beginEnterScene(this, v60, is_relogin, is_client_relogin) )
          {
            common::milog::MiLogStream::create(
              &v70,
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/player/player.cpp",
              "reloginInHomeWorld",
              2011);
            v61 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                    &v70,
                    (const char (*)[22])"beginEnterScene fails");
            operator<<(v61, this);
            common::milog::MiLogStream::~MiLogStream(&v70);
            v7 = -1;
          }
          else
          {
            v7 = 0;
          }
        }
        else
        {
          common::milog::MiLogStream::create(
            &v70,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/player.cpp",
            "reloginInHomeWorld",
            2006);
          v55 = common::milog::MiLogStream::operator<<<char [5],(char *[5])0>(&v70, (const char (*)[5])"uid:");
          val = Player::getUid(this);
          v56 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v55, &val);
          v57 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v56, (const char (*)[11])" scene_id:");
          v58 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
          HomeUid = Scene::getSceneId(v58);
          v59 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v57, &HomeUid);
          common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v59, (const char (*)[14])" not in home!");
          common::milog::MiLogStream::~MiLogStream(&v70);
          v7 = -1;
        }
      }
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v4 + 96));
    }
    std::shared_ptr<Home>::~shared_ptr((std::shared_ptr<Home> *const)(v4 + 64));
  }
  result = v7;
  if ( v71 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2019: range 000000001714130C-0000000017141C2B
int32_t __cdecl Player::beginEnterScene(Player *const this, Scene *scene, bool is_relogin, bool is_client_relogin)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  int SceneType; // eax
  common::milog::MiLogStream *v8; // rbx
  int32_t v9; // r14d
  PlayerAvatarComp *AvatarComp; // rax
  PlayerAvatarComp *v11; // rax
  bool v13; // r14
  common::milog::MiLogStream *v14; // r14
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // r14
  SceneTransferGuardComp *TransferGuardComp; // rcx
  const SceneTransferGuardComp *p_uid; // rdi
  char v19; // al
  common::milog::MiLogStream *v20; // r14
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  bool v26; // r14
  common::milog::MiLogStream *v27; // r14
  int32_t result; // eax
  unsigned int Uid; // [rsp+24h] [rbp-11Ch] BYREF
  proto::EnterType enter_type; // [rsp+28h] [rbp-118h]
  data::SceneType scene_type; // [rsp+2Ch] [rbp-114h]
  char *val; // [rsp+30h] [rbp-110h] BYREF
  PlayerAvatarComp *avatar_comp; // [rsp+38h] [rbp-108h]
  std::shared_ptr<Scene> p_cur_scene_ptr; // [rsp+40h] [rbp-100h] BYREF
  common::milog::MiLogStream v38; // [rsp+50h] [rbp-F0h] BYREF
  char v39[208]; // [rsp+70h] [rbp-D0h] BYREF

  v4 = (unsigned __int64)v39;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(160LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 32 12 13 born_pos:2042 64 12 13 born_rot:2043 96 16 14 scene_ptr:2041 128 16 18 cur_scene_ptr:2045";
  *(_QWORD *)(v4 + 16) = Player::beginEnterScene;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -219020288;
  v6[536862722] = -219020288;
  v6[536862723] = -219021312;
  v6[536862724] = -202178560;
  enter_type = ENTER_SELF;
  SceneType = Scene::getSceneType(scene);
  scene_type = SceneType;
  if ( SceneType > 5 )
    goto LABEL_13;
  if ( SceneType >= 4 )
  {
    enter_type = ENTER_SELF_HOME;
  }
  else if ( SceneType == 3 || SceneType == 1 )
  {
    enter_type = ENTER_SELF;
  }
  else
  {
    if ( SceneType != 2 )
    {
LABEL_13:
      common::milog::MiLogStream::create(
        &v38,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/player.cpp",
        "beginEnterScene",
        2036);
      v8 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
             &v38,
             (const char (*)[20])"invalid scene_type:");
      val = (char *)data::enumValToStr(scene_type);
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v8, (const char *const *)&val);
      common::milog::MiLogStream::~MiLogStream(&v38);
      v9 = -1;
      goto LABEL_42;
    }
    enter_type = ENTER_DUNGEON;
  }
  avatar_comp = Player::getAvatarComp(this);
  toThisPtr<Scene>((Scene *)(v4 + 96));
  Vector3::Vector3((Vector3 *const)(v4 + 32), 0.0, 0.0, 0.0);
  Vector3::Vector3((Vector3 *const)(v4 + 64), 0.0, 0.0, 0.0);
  Player::getSceneComp(this);
  PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v4 + 128));
  if ( !std::operator!=<Scene>((const std::shared_ptr<Scene> *)(v4 + 128), 0LL)
    || Scene::getSceneType(scene) != SCENE_WORLD
    || (AvatarComp = Player::getAvatarComp(this), !PlayerAvatarComp::isAllAvatarDead(AvatarComp))
    || (v11 = Player::getAvatarComp(this), PlayerAvatarComp::isRevivableAfterAllDead(v11)) )
  {
    TransferGuardComp = Scene::getTransferGuardComp(scene);
    if ( *(_BYTE *)(((unsigned __int64)&this->uid_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->uid_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&this->uid_);
    }
    if ( !SceneTransferGuardComp::isCanSetPlayerReloginPosAndRot(TransferGuardComp, this->uid_) )
      goto LABEL_31;
    p_uid = Scene::getTransferGuardComp(scene);
    if ( *(_BYTE *)(((unsigned __int64)&this->uid_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->uid_ >> 3) + 0x7FFF8000) <= 3 )
    {
      p_uid = (const SceneTransferGuardComp *)&this->uid_;
      __asan_report_load4(&this->uid_);
    }
    if ( SceneTransferGuardComp::findPlayerPosAndRot(p_uid, this->uid_, (Vector3 *)(v4 + 32), (Vector3 *)(v4 + 64)) )
LABEL_31:
      v19 = 0;
    else
      v19 = 1;
    if ( v19 )
    {
      common::milog::MiLogStream::create(
        &v38,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/player.cpp",
        "beginEnterScene",
        2061);
      v20 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
              &v38,
              (const char (*)[42])"transfer guard set relogin pos succ, uid:");
      Uid = Player::getUid(this);
      v21 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v20, &Uid);
      v22 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v21, (const char (*)[7])", pos:");
      v23 = operator<<(v22, (const Vector3 *)(v4 + 32));
      v24 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v23, (const char (*)[7])", rot:");
      operator<<(v24, (const Vector3 *)(v4 + 64));
      common::milog::MiLogStream::~MiLogStream(&v38);
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->uid_ >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&this->uid_ >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&this->uid_);
      }
      if ( Scene::getPlayerLocation(scene, this->uid_, (Vector3 *)(v4 + 32), (Vector3 *)(v4 + 64)) )
      {
        common::milog::MiLogStream::create(
          &v38,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/player.cpp",
          "beginEnterScene",
          2067);
        v25 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                &v38,
                (const char (*)[31])"getPlayerLocation failed, uid:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v25, &this->uid_);
        common::milog::MiLogStream::~MiLogStream(&v38);
        v9 = -1;
        goto LABEL_41;
      }
    }
LABEL_38:
    std::shared_ptr<Scene>::shared_ptr(&p_cur_scene_ptr, (const std::shared_ptr<Scene> *)(v4 + 96));
    v26 = Player::beginEnterScene(
            this,
            &p_cur_scene_ptr,
            (const Vector3 *)(v4 + 32),
            (const Vector3 *)(v4 + 64),
            enter_type,
            VISION_MEET,
            is_relogin,
            is_client_relogin,
            ENTER_REASON_LOGIN) != 0;
    std::shared_ptr<Scene>::~shared_ptr(&p_cur_scene_ptr);
    if ( v26 )
    {
      common::milog::MiLogStream::create(
        &v38,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/player.cpp",
        "beginEnterScene",
        2074);
      v27 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
              &v38,
              (const char (*)[29])"beginEnterScene failed, uid:");
      Uid = Player::getUid(this);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v27, &Uid);
      common::milog::MiLogStream::~MiLogStream(&v38);
      v9 = -1;
    }
    else
    {
      v9 = 0;
    }
    goto LABEL_41;
  }
  std::shared_ptr<Scene>::shared_ptr(&p_cur_scene_ptr, (const std::shared_ptr<Scene> *)(v4 + 96));
  v13 = PlayerAvatarComp::findRebornPositionRotation(
          avatar_comp,
          0,
          &p_cur_scene_ptr,
          (Vector3 *)(v4 + 32),
          (Vector3 *)(v4 + 64)) != 0;
  std::shared_ptr<Scene>::~shared_ptr(&p_cur_scene_ptr);
  if ( !v13 )
  {
    common::milog::MiLogStream::create(
      &v38,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/player.cpp",
      "beginEnterScene",
      2056);
    v16 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
            &v38,
            (const char (*)[38])"findRebornPositionRotation succ, uid:");
    Uid = Player::getUid(this);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, &Uid);
    common::milog::MiLogStream::~MiLogStream(&v38);
    goto LABEL_38;
  }
  common::milog::MiLogStream::create(
    &v38,
    &common::milog::MiLogDefault::default_log_obj_,
    3u,
    "./src/player/player.cpp",
    "beginEnterScene",
    2053);
  v14 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
          &v38,
          (const char (*)[33])"findRebornPositionRotation uid: ");
  Uid = Player::getUid(this);
  v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, &Uid);
  common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v15, (const char (*)[8])" failed");
  common::milog::MiLogStream::~MiLogStream(&v38);
  v9 = -1;
LABEL_41:
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v4 + 128));
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v4 + 96));
LABEL_42:
  result = v9;
  if ( v39 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 2082: range 0000000017141C2C-000000001714364F
__int64 __fastcall Player::beginEnterScene(
        Player *const this,
        const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *p_dest_scene_ptr,
        const Vector3 *pos,
        const Vector3 *rot,
        proto::EnterType enter_type,
        proto::VisionType vision_type,
        bool is_relogin,
        bool is_client_relogin,
        proto::EnterReason enter_reason)
{
  unsigned int v9; // r14d
  unsigned __int64 v10; // r13
  __int64 v11; // rax
  _DWORD *v12; // r12
  common::milog::MiLogStream *v13; // r14
  SceneExcelConfigMgr *p_scene_config_mgr; // r15
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  uint32_t SceneId; // eax
  common::milog::MiLogStream *v17; // r14
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  unsigned int *v21; // rax
  unsigned int *v22; // rdx
  std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v23; // rax
  common::milog::MiLogStream *v24; // r14
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v27; // rax
  int v28; // r15d
  common::milog::MiLogStream *v29; // r14
  PlayerSceneComp *SceneComp; // rax
  bool v31; // al
  uint32_t v32; // eax
  PlayerSceneComp *v33; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v34; // rax
  uint32_t v35; // eax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v36; // rax
  uint64_t BeginTime; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v38; // rax
  uint32_t OwnerUid; // eax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v40; // rax
  unsigned __int64 v41; // rdx
  std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v42; // rax
  unsigned __int64 v43; // rdx
  google::protobuf::uint32 v44; // eax
  common::milog::MiLogStream *v45; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v46; // rax
  Scene *v47; // rax
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v48; // rax
  unsigned int *v49; // rdx
  Scene *p_uid; // rdi
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v51; // rax
  uint32_t v52; // eax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v53; // rax
  std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v54; // rax
  uint32_t DungeonId; // eax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v56; // rax
  unsigned __int64 v57; // rdx
  std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v58; // rax
  uint32_t Level; // eax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v60; // rax
  common::milog::MiLogStream *v61; // r14
  common::milog::MiLogStream *v62; // rax
  common::milog::MiLogStream *v63; // r14
  uint32_t v64; // r14d
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v65; // rax
  uint32_t v67; // eax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v68; // rax
  uint32_t v69; // eax
  Player *v70; // rax
  PlayerAvatarComp *AvatarComp; // rax
  const std::weak_ptr<Avatar> *v73; // rax
  Scene *v74; // r14
  Avatar *v75; // rax
  common::milog::MiLogStream *v76; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v77; // rax
  Scene *v78; // rax
  common::milog::MiLogStream *v79; // rax
  PlayerSceneComp *v81; // rax
  PlayerMpComp *MpComp; // rax
  DungeonScene *v83; // rax
  bool v84; // al
  PlayerMatchComp *MatchComp; // rax
  common::milog::MiLogStream *v86; // r14
  common::milog::MiLogStream *v87; // rax
  common::milog::MiLogStream *v88; // r14
  proto::EnterType v89; // eax
  const std::string *v90; // rax
  common::milog::MiLogStream *v91; // rax
  common::milog::MiLogStream *v92; // r14
  PlayerSceneComp *v93; // rax
  common::milog::MiLogStream *v94; // rax
  common::milog::MiLogStream *v95; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v96; // rax
  common::milog::MiLogStream *v97; // rax
  common::milog::MiLogStream *v98; // rax
  common::milog::MiLogStream *v99; // rax
  common::milog::MiLogStream *v100; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v101; // rax
  __int64 result; // rax
  unsigned int v108; // [rsp+50h] [rbp-350h] BYREF
  unsigned int EnterSceneToken; // [rsp+54h] [rbp-34Ch] BYREF
  unsigned int Uid; // [rsp+58h] [rbp-348h] BYREF
  unsigned int val; // [rsp+5Ch] [rbp-344h] BYREF
  unsigned int avatar_id; // [rsp+60h] [rbp-340h]
  EnterSceneState enter_scene_state; // [rsp+64h] [rbp-33Ch]
  uint32_t old_token; // [rsp+68h] [rbp-338h]
  uint32_t enter_scene_token; // [rsp+6Ch] [rbp-334h]
  data::SceneType desc_scene_type; // [rsp+70h] [rbp-330h]
  unsigned int scene_tag_id; // [rsp+74h] [rbp-32Ch]
  std::vector<unsigned int>::const_iterator __for_begin; // [rsp+78h] [rbp-328h] BYREF
  std::vector<unsigned int>::iterator __for_begin_0; // [rsp+80h] [rbp-320h] BYREF
  std::vector<unsigned int>::iterator __for_end; // [rsp+88h] [rbp-318h] BYREF
  const data::SceneExcelConfig *scene_excel_config_ptr; // [rsp+90h] [rbp-310h]
  PlayerAvatarComp *avatar_comp; // [rsp+98h] [rbp-308h]
  const std::vector<unsigned int> *__for_range; // [rsp+A0h] [rbp-300h]
  PlayerSceneComp *scene_comp; // [rsp+A8h] [rbp-2F8h]
  proto::Vector *proto_pos; // [rsp+B0h] [rbp-2F0h]
  std::vector<unsigned int> *__for_range_0; // [rsp+B8h] [rbp-2E8h]
  proto::Vector *proto_prev_pos; // [rsp+C0h] [rbp-2E0h]
  std::vector<std::weak_ptr<Avatar>> *__for_range_1; // [rsp+C8h] [rbp-2D8h]
  proto::Vector from; // [rsp+D0h] [rbp-2D0h] BYREF
  char v130[688]; // [rsp+F0h] [rbp-2B0h] BYREF

  v10 = (unsigned __int64)v130;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v11 = __asan_stack_malloc_4(640LL);
    if ( v11 )
      v10 = v11;
  }
  *(_QWORD *)v10 = 1102416563LL;
  *(_QWORD *)(v10 + 8) = "12 48 4 15 enter_type:2080 64 12 13 prev_pos:2167 96 12 13 prev_rot:2167 128 16 18 cur_scene_pt"
                         "r:2164 160 16 21 owner_player_ptr:2197 192 16 18 cur_scene_ptr:2209 224 16 15 avatar_wtr:2216 2"
                         "56 16 22 dungeon_scene_ptr:2246 288 24 21 scene_tag_id_vec:2158 352 24 15 avatar_vec:2215 416 3"
                         "2 11 notify:2200 480 120 11 notify:2130";
  *(_QWORD *)(v10 + 16) = Player::beginEnterScene;
  v12 = (_DWORD *)(v10 >> 3);
  v12[536862720] = -235802127;
  v12[536862721] = -234556943;
  v12[536862722] = -219020288;
  v12[536862723] = -219020288;
  v12[536862724] = -219021312;
  v12[536862725] = -219021312;
  v12[536862726] = -219021312;
  v12[536862727] = -219021312;
  v12[536862728] = -219021312;
  v12[536862729] = -234881024;
  v12[536862730] = -218959118;
  v12[536862731] = -234881024;
  v12[536862732] = -218959118;
  v12[536862734] = -218959118;
  v12[536862738] = -218103808;
  v12[536862739] = -202116109;
  *(_DWORD *)(v10 + 48) = enter_type;
  if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)p_dest_scene_ptr, 0LL) )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v10 + 416),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/player.cpp",
      "beginEnterScene",
      2085);
    v13 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
            (common::milog::MiLogStream *const)(v10 + 416),
            (const char (*)[27])"scene_ptr is nullptr, uid:");
    val = Player::getUid(this);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, &val);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v10 + 416));
    v9 = -1;
  }
  else
  {
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)(v10 + 256));
    p_scene_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v10 + 256))->design_config.txt_config_mgr.scene_config_mgr;
    v15 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->(p_dest_scene_ptr);
    SceneId = Scene::getSceneId(v15);
    scene_excel_config_ptr = data::SceneExcelConfigMgrBase::findSceneExcelConfig(p_scene_config_mgr, SceneId);
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v10 + 256));
    if ( scene_excel_config_ptr )
    {
      avatar_comp = Player::getAvatarComp(this);
      if ( std::vector<unsigned int>::empty(&scene_excel_config_ptr->specified_avatar_list) )
        goto LABEL_20;
      std::vector<unsigned long>::vector((std::vector<long unsigned int> *const)(v10 + 352));
      __for_range = &scene_excel_config_ptr->specified_avatar_list;
      __for_begin._M_current = std::vector<unsigned int>::begin(&scene_excel_config_ptr->specified_avatar_list)._M_current;
      __for_begin_0._M_current = (unsigned int *)std::vector<unsigned int>::end(&scene_excel_config_ptr->specified_avatar_list)._M_current;
      while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(
                &__for_begin,
                (const __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> > *)&__for_begin_0) )
      {
        v21 = (unsigned int *)__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*(&__for_begin);
        v22 = v21;
        if ( *(_BYTE *)(((unsigned __int64)v21 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v21 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v21 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v21);
        }
        avatar_id = *v22;
        PlayerAvatarComp::findFormalAvatarByAvatarId((const PlayerAvatarComp *const)(v10 + 256), (uint32_t)avatar_comp);
        if ( std::operator!=<FormalAvatar>((const std::shared_ptr<FormalAvatar> *)(v10 + 256), 0LL) )
        {
          v23 = std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FormalAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v10 + 256));
          __for_end._M_current = (unsigned int *)Avatar::getGuid(v23);
          std::vector<unsigned long>::push_back(
            (std::vector<long unsigned int> *const)(v10 + 352),
            (std::vector<long unsigned int>::value_type *)&__for_end);
        }
        std::shared_ptr<FormalAvatar>::~shared_ptr((std::shared_ptr<FormalAvatar> *const)(v10 + 256));
        __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++(&__for_begin);
      }
      if ( std::vector<unsigned long>::empty((const std::vector<long unsigned int> *const)(v10 + 352)) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v10 + 416),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/player.cpp",
          "beginEnterScene",
          2112);
        v24 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
                (common::milog::MiLogStream *const)(v10 + 416),
                (const char (*)[34])"No specified in avatar_list, uid:");
        Uid = Player::getUid(this);
        v25 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v24, &Uid);
        v26 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v25, (const char (*)[11])" scene_id:");
        v27 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->(p_dest_scene_ptr);
        val = Scene::getSceneId(v27);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v26, &val);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v10 + 416));
        v9 = -1;
        v28 = 0;
      }
      else
      {
        v28 = 1;
      }
      std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v10 + 352));
      if ( v28 == 1 )
      {
LABEL_20:
        scene_comp = Player::getSceneComp(this);
        enter_scene_state = PlayerSceneComp::getEnterSceneState(scene_comp);
        if ( enter_scene_state && enter_scene_state != ENTER_SCENE_POST )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v10 + 416),
            &common::milog::MiLogDefault::default_log_obj_,
            2u,
            "./src/player/player.cpp",
            "beginEnterScene",
            2123);
          v29 = common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
                  (common::milog::MiLogStream *const)(v10 + 416),
                  (const char (*)[47])"beginEnterScene with last one not finish, uid:");
          val = Player::getUid(this);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v29, &val);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v10 + 416));
        }
        std::shared_ptr<Scene>::shared_ptr(
          (std::shared_ptr<Scene> *const)(v10 + 256),
          (const std::shared_ptr<Scene> *)p_dest_scene_ptr);
        Player::modifyEnterTypeIfDataVersionChanged(
          this,
          (proto::EnterType *)(v10 + 48),
          (ScenePtr *)(v10 + 256),
          is_relogin,
          enter_reason);
        std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v10 + 256));
        Player::markDestination(
          this,
          (const ScenePtr *)p_dest_scene_ptr,
          pos,
          rot,
          *(proto::EnterType *)(v10 + 48),
          vision_type,
          is_relogin,
          is_client_relogin,
          enter_reason);
        proto::PlayerEnterSceneNotify::PlayerEnterSceneNotify((proto::PlayerEnterSceneNotify *const)(v10 + 480));
        SceneComp = Player::getSceneComp(this);
        old_token = PlayerSceneComp::getEnterSceneToken(SceneComp);
        v31 = !old_token || Player::getIsDataResVersionChanged(this);
        proto::PlayerEnterSceneNotify::set_is_first_login_enter_scene(
          (proto::PlayerEnterSceneNotify *const)(v10 + 480),
          v31);
        if ( old_token )
          v32 = old_token + 100;
        else
          v32 = common::milog::gettid();
        enter_scene_token = v32;
        v33 = Player::getSceneComp(this);
        PlayerSceneComp::setEnterSceneToken(v33, enter_scene_token);
        proto::PlayerEnterSceneNotify::set_enter_scene_token(
          (proto::PlayerEnterSceneNotify *const)(v10 + 480),
          enter_scene_token);
        proto::PlayerEnterSceneNotify::set_type(
          (proto::PlayerEnterSceneNotify *const)(v10 + 480),
          *(proto::EnterType *)(v10 + 48));
        v34 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->(p_dest_scene_ptr);
        v35 = Scene::getSceneId(v34);
        proto::PlayerEnterSceneNotify::set_scene_id((proto::PlayerEnterSceneNotify *const)(v10 + 480), v35);
        proto_pos = proto::PlayerEnterSceneNotify::mutable_pos((proto::PlayerEnterSceneNotify *const)(v10 + 480));
        Vector3::operator proto::Vector(&from, pos);
        proto::Vector::operator=(proto_pos, &from);
        proto::Vector::~Vector(&from);
        v36 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->(p_dest_scene_ptr);
        BeginTime = Scene::getBeginTime(v36);
        proto::PlayerEnterSceneNotify::set_scene_begin_time(
          (proto::PlayerEnterSceneNotify *const)(v10 + 480),
          BeginTime);
        v38 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->(p_dest_scene_ptr);
        OwnerUid = Scene::getOwnerUid(v38);
        proto::PlayerEnterSceneNotify::set_target_uid((proto::PlayerEnterSceneNotify *const)(v10 + 480), OwnerUid);
        proto::PlayerEnterSceneNotify::set_is_skip_ui(
          (proto::PlayerEnterSceneNotify *const)(v10 + 480),
          enter_reason == ENTER_REASON_LUA_SKIP_UI);
        proto::PlayerEnterSceneNotify::set_enter_reason((proto::PlayerEnterSceneNotify *const)(v10 + 480), enter_reason);
        v40 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->(p_dest_scene_ptr);
        if ( *(_BYTE *)(((unsigned __int64)v40 >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v41 = (unsigned __int64)(v40->_vptr_DescribalBase + 7);
        if ( *(_BYTE *)((v41 >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        (*(void (__fastcall **)(unsigned __int64, std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *))v41)(
          v10 + 256,
          v40);
        if ( std::operator!=<World>((const std::shared_ptr<World> *)(v10 + 256), 0LL) )
        {
          v42 = std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v10 + 256));
          if ( *(_BYTE *)(((unsigned __int64)v42 >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          v43 = (unsigned __int64)(v42->_vptr_World + 2);
          if ( *(_BYTE *)((v43 >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          v44 = (*(__int64 (__fastcall **)(std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *))v43)(v42);
          proto::PlayerEnterSceneNotify::set_world_type((proto::PlayerEnterSceneNotify *const)(v10 + 480), v44);
        }
        else
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v10 + 416),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/player/player.cpp",
            "beginEnterScene",
            2153);
          v45 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                  (common::milog::MiLogStream *const)(v10 + 416),
                  (const char (*)[33])off_260325A0);
          v46 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->(p_dest_scene_ptr);
          val = Scene::getSceneId(v46);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v45, &val);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v10 + 416));
        }
        std::shared_ptr<World>::~shared_ptr((std::shared_ptr<World> *const)(v10 + 256));
        v47 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->(p_dest_scene_ptr);
        Scene::getActiveSceneTagList((std::vector<unsigned int> *)(v10 + 288), v47);
        __for_range_0 = (std::vector<unsigned int> *)(v10 + 288);
        __for_begin_0._M_current = std::vector<unsigned int>::begin((std::vector<unsigned int> *const)(v10 + 288))._M_current;
        __for_end._M_current = std::vector<unsigned int>::end(__for_range_0)._M_current;
        while ( __gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(&__for_begin_0, &__for_end) )
        {
          v48 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*(&__for_begin_0);
          v49 = v48;
          if ( *(_BYTE *)(((unsigned __int64)v48 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v48 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v48 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v48);
          }
          scene_tag_id = *v49;
          proto::PlayerEnterSceneNotify::add_scene_tag_id_list(
            (proto::PlayerEnterSceneNotify *const)(v10 + 480),
            scene_tag_id);
          __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++(&__for_begin_0);
        }
        PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v10 + 128));
        if ( std::operator!=<Scene>((const std::shared_ptr<Scene> *)(v10 + 128), 0LL) )
        {
          Vector3::Vector3((Vector3 *const)(v10 + 64), 0.0, 0.0, 0.0);
          Vector3::Vector3((Vector3 *const)(v10 + 96), 0.0, 0.0, 0.0);
          p_uid = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v10 + 128));
          if ( *(_BYTE *)(((unsigned __int64)&this->uid_ >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&this->uid_ >> 3) + 0x7FFF8000) <= 3 )
          {
            p_uid = (Scene *)&this->uid_;
            __asan_report_load4(&this->uid_);
          }
          if ( !Scene::getPlayerLocation(p_uid, this->uid_, (Vector3 *)(v10 + 64), (Vector3 *)(v10 + 96)) )
          {
            v51 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v10 + 128));
            v52 = Scene::getSceneId(v51);
            proto::PlayerEnterSceneNotify::set_prev_scene_id((proto::PlayerEnterSceneNotify *const)(v10 + 480), v52);
            proto_prev_pos = proto::PlayerEnterSceneNotify::mutable_prev_pos((proto::PlayerEnterSceneNotify *const)(v10 + 480));
            Vector3::operator proto::Vector((proto::Vector *)(v10 + 416), (const Vector3 *const)(v10 + 64));
            proto::Vector::operator=(proto_prev_pos, (proto::Vector *)(v10 + 416));
            proto::Vector::~Vector((proto::Vector *const)(v10 + 416));
          }
        }
        v53 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->(p_dest_scene_ptr);
        desc_scene_type = Scene::getSceneType(v53);
        if ( desc_scene_type == SCENE_DUNGEON )
        {
          std::dynamic_pointer_cast<DungeonScene,Scene>((const std::shared_ptr<Scene> *)(v10 + 256));
          if ( std::operator!=<DungeonScene>(0LL, (const std::shared_ptr<DungeonScene> *)(v10 + 256)) )
          {
            v54 = std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v10 + 256));
            DungeonId = DungeonScene::getDungeonId(v54);
            proto::PlayerEnterSceneNotify::set_dungeon_id((proto::PlayerEnterSceneNotify *const)(v10 + 480), DungeonId);
          }
          std::shared_ptr<DungeonScene>::~shared_ptr((std::shared_ptr<DungeonScene> *const)(v10 + 256));
        }
        else if ( SceneExcelConfigMgr::isPlayerScene(desc_scene_type) )
        {
          v56 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->(p_dest_scene_ptr);
          if ( *(_BYTE *)(((unsigned __int64)v56 >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          v57 = (unsigned __int64)(v56->_vptr_DescribalBase + 8);
          if ( *(_BYTE *)((v57 >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          (*(void (__fastcall **)(unsigned __int64, std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *))v57)(
            v10 + 256,
            v56);
          if ( std::operator!=<PlayerWorld>((const std::shared_ptr<PlayerWorld> *)(v10 + 256), 0LL) )
          {
            v58 = std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v10 + 256));
            Level = PlayerWorld::getLevel(v58);
            proto::PlayerEnterSceneNotify::set_world_level((proto::PlayerEnterSceneNotify *const)(v10 + 480), Level);
          }
          std::shared_ptr<PlayerWorld>::~shared_ptr((std::shared_ptr<PlayerWorld> *const)(v10 + 256));
        }
        v60 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->(p_dest_scene_ptr);
        Scene::getSceneTransaction[abi:cxx11]((std::string *)(v10 + 416), v60);
        proto::PlayerEnterSceneNotify::set_scene_transaction(
          (proto::PlayerEnterSceneNotify *const)(v10 + 480),
          (std::string *)(v10 + 416));
        std::string::~string((void *)(v10 + 416));
        Player::sendProto(this, (const google::protobuf::Message *)(v10 + 480));
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v10 + 416),
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/player/player.cpp",
          "beginEnterScene",
          2194);
        v61 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                (common::milog::MiLogStream *const)(v10 + 416),
                (const char (*)[23])"[cd] scene begin time:");
        __for_end._M_current = (unsigned int *)proto::PlayerEnterSceneNotify::scene_begin_time((const proto::PlayerEnterSceneNotify *const)(v10 + 480));
        v62 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                v61,
                (const unsigned __int64 *)&__for_end);
        v63 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v62, (const char (*)[6])" uid:");
        val = Player::getUid(this);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v63, &val);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v10 + 416));
        std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->(p_dest_scene_ptr);
        Scene::getOwnPlayer((const Scene *const)(v10 + 160));
        if ( std::operator!=<Player>(0LL, (const std::shared_ptr<Player> *)(v10 + 160)) )
        {
          v64 = Player::getUid(this);
          v65 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v10 + 160));
          if ( v64 != Player::getUid(v65) )
          {
            proto::GuestBeginEnterSceneNotify::GuestBeginEnterSceneNotify((proto::GuestBeginEnterSceneNotify *const)(v10 + 416));
            v67 = Player::getUid(this);
            proto::GuestBeginEnterSceneNotify::set_uid((proto::GuestBeginEnterSceneNotify *const)(v10 + 416), v67);
            v68 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->(p_dest_scene_ptr);
            v69 = Scene::getSceneId(v68);
            proto::GuestBeginEnterSceneNotify::set_scene_id((proto::GuestBeginEnterSceneNotify *const)(v10 + 416), v69);
            v70 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v10 + 160));
            Player::sendProto(v70, (const google::protobuf::Message *)(v10 + 416));
            proto::GuestBeginEnterSceneNotify::~GuestBeginEnterSceneNotify((proto::GuestBeginEnterSceneNotify *const)(v10 + 416));
          }
        }
        if ( Player::getIsDataResVersionChanged(this) && (is_relogin || *(_DWORD *)(v10 + 48) == 11) )
        {
          Player::getSceneComp(this);
          PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v10 + 192));
          if ( std::operator!=<Scene>((const std::shared_ptr<Scene> *)(v10 + 192), 0LL) )
          {
            Player::disappearInCurScene(this);
            AvatarComp = Player::getAvatarComp(this);
            PlayerAvatarComp::getAllAvatarVec((std::vector<std::weak_ptr<Avatar>> *)(v10 + 352), AvatarComp);
            __for_range_1 = (std::vector<std::weak_ptr<Avatar>> *)(v10 + 352);
            __for_begin_0._M_current = (unsigned int *)std::vector<std::weak_ptr<Avatar>>::begin((std::vector<std::weak_ptr<Avatar>> *const)(v10 + 352))._M_current;
            __for_end._M_current = (unsigned int *)std::vector<std::weak_ptr<Avatar>>::end(__for_range_1)._M_current;
            while ( __gnu_cxx::operator!=<std::weak_ptr<Avatar> *,std::vector<std::weak_ptr<Avatar>>>(
                      (const __gnu_cxx::__normal_iterator<std::weak_ptr<Avatar>*,std::vector<std::weak_ptr<Avatar>> > *)&__for_begin_0,
                      (const __gnu_cxx::__normal_iterator<std::weak_ptr<Avatar>*,std::vector<std::weak_ptr<Avatar>> > *)&__for_end) )
            {
              v73 = __gnu_cxx::__normal_iterator<std::weak_ptr<Avatar> *,std::vector<std::weak_ptr<Avatar>>>::operator*((const __gnu_cxx::__normal_iterator<std::weak_ptr<Avatar>*,std::vector<std::weak_ptr<Avatar>> > *const)&__for_begin_0);
              std::weak_ptr<Avatar>::weak_ptr((std::weak_ptr<Avatar> *const)(v10 + 224), v73);
              std::weak_ptr<Avatar>::lock((const std::weak_ptr<Avatar> *const)(v10 + 256));
              if ( !std::operator==<Avatar>(0LL, (const std::shared_ptr<Avatar> *)(v10 + 256)) )
              {
                v74 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v10 + 192));
                v75 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v10 + 256));
                if ( Scene::delAvatarAndWeaponEntity(v74, v75) )
                {
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v10 + 416),
                    &common::milog::MiLogDefault::default_log_obj_,
                    3u,
                    "./src/player/player.cpp",
                    "beginEnterScene",
                    2226);
                  v76 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                          (common::milog::MiLogStream *const)(v10 + 416),
                          (const char (*)[31])"delAvatarAndWeaponEntity fails");
                  v77 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v10 + 256));
                  common::milog::MiLogStream::operator<<<Avatar,(Avatar*)0>(v76, v77);
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v10 + 416));
                }
              }
              std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v10 + 256));
              std::weak_ptr<Avatar>::~weak_ptr((std::weak_ptr<Avatar> *const)(v10 + 224));
              __gnu_cxx::__normal_iterator<std::weak_ptr<Avatar> *,std::vector<std::weak_ptr<Avatar>>>::operator++((__gnu_cxx::__normal_iterator<std::weak_ptr<Avatar>*,std::vector<std::weak_ptr<Avatar>> > *const)&__for_begin_0);
            }
            v78 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v10 + 192));
            if ( Scene::delAvatarTeamEntity(v78, this) )
            {
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v10 + 416),
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/player.cpp",
                "beginEnterScene",
                2232);
              v79 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                      (common::milog::MiLogStream *const)(v10 + 416),
                      (const char (*)[26])"delAvatarTeamEntity fails");
              operator<<(v79, this);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v10 + 416));
            }
            std::vector<std::weak_ptr<Avatar>>::~vector((std::vector<std::weak_ptr<Avatar>> *const)(v10 + 352));
          }
          std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v10 + 192));
        }
        if ( Player::getIsDataResVersionChanged(this)
          && (std::operator!=<Scene,Scene>(
                (const std::shared_ptr<Scene> *)p_dest_scene_ptr,
                (const std::shared_ptr<Scene> *)(v10 + 128))
           || is_relogin
           || *(_DWORD *)(v10 + 48) == 11) )
        {
          v81 = Player::getSceneComp(this);
          PlayerSceneComp::refreshAllSceneEntityConfig(v81);
        }
        PlayerSceneComp::setEnterSceneState(scene_comp, ENTER_SCENE_NOTIFY);
        MpComp = Player::getMpComp(this);
        PlayerMpComp::refreshMpModeAvailability(MpComp);
        std::dynamic_pointer_cast<DungeonScene,Scene>((const std::shared_ptr<Scene> *)(v10 + 256));
        v84 = 0;
        if ( std::operator!=<DungeonScene>((const std::shared_ptr<DungeonScene> *)(v10 + 256), 0LL) )
        {
          v83 = std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v10 + 256));
          if ( DungeonScene::isEnterByCharAmusementActivity(v83) )
            v84 = 1;
        }
        if ( desc_scene_type != SCENE_WORLD && !v84 )
        {
          MatchComp = Player::getMatchComp(this);
          PlayerMatchComp::cancelGeneralMatch(MatchComp);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v10 + 416),
          &common::milog::MiLogDefault::default_log_obj_,
          2u,
          "./src/player/player.cpp",
          "beginEnterScene",
          2253);
        v86 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
                (common::milog::MiLogStream *const)(v10 + 416),
                (const char (*)[34])"[EnterScene] BeginEnterScene uid:");
        v108 = Player::getUid(this);
        v87 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v86, &v108);
        v88 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v87, (const char (*)[13])" enter_type:");
        v89 = proto::PlayerEnterSceneNotify::type((const proto::PlayerEnterSceneNotify *const)(v10 + 480));
        v90 = proto::EnterType_Name[abi:cxx11](v89);
        v91 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v88, v90);
        v92 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v91, (const char (*)[8])" token:");
        v93 = Player::getSceneComp(this);
        EnterSceneToken = PlayerSceneComp::getEnterSceneToken(v93);
        v94 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v92, &EnterSceneToken);
        v95 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                v94,
                (const char (*)[16])" dest_scene_id:");
        v96 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->(p_dest_scene_ptr);
        Uid = Scene::getSceneId(v96);
        v97 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v95, &Uid);
        v98 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v97, (const char (*)[6])" pos:");
        v99 = operator<<(v98, pos);
        v100 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v99, (const char (*)[13])" target_uid:");
        v101 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->(p_dest_scene_ptr);
        val = Scene::getOwnerUid(v101);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v100, &val);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v10 + 416));
        v9 = 0;
        std::shared_ptr<DungeonScene>::~shared_ptr((std::shared_ptr<DungeonScene> *const)(v10 + 256));
        std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v10 + 160));
        std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v10 + 128));
        std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v10 + 288));
        proto::PlayerEnterSceneNotify::~PlayerEnterSceneNotify((proto::PlayerEnterSceneNotify *const)(v10 + 480));
      }
    }
    else
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v10 + 416),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/player.cpp",
        "beginEnterScene",
        2092);
      v17 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
              (common::milog::MiLogStream *const)(v10 + 416),
              (const char (*)[34])"findSceneExcelConfig failed, uid:");
      Uid = Player::getUid(this);
      v18 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, &Uid);
      v19 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v18, (const char (*)[11])" scene_id:");
      v20 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->(p_dest_scene_ptr);
      val = Scene::getSceneId(v20);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, &val);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v10 + 416));
      v9 = -1;
    }
  }
  result = v9;
  if ( v130 == (char *)v10 )
  {
    *(_QWORD *)((v10 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v10 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v10 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v10 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v10 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v10 >> 3) + 0x7FFF8028) = 0LL;
    *(_DWORD *)((v10 >> 3) + 0x7FFF8030) = 0;
    *(_DWORD *)((v10 >> 3) + 0x7FFF8038) = 0;
    *(_QWORD *)((v10 >> 3) + 0x7FFF8048) = 0LL;
  }
  else
  {
    *(_QWORD *)v10 = 1172321806LL;
    *(_QWORD *)((v10 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v10 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v10 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v10 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v10 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v10 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v10 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v10 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v10 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v10 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2260: range 0000000017143650-00000000171447B1
int32_t __cdecl Player::enterSceneReady(Player *const this, const proto::EnterSceneReadyReq *req)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  google::protobuf::uint32 v5; // r14d
  PlayerSceneComp *SceneComp; // rax
  common::milog::MiLogStream *v7; // rbx
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rbx
  PlayerSceneComp *v10; // rax
  int32_t v11; // r14d
  common::milog::MiLogStream *v12; // rbx
  common::milog::MiLogStream *v13; // r14
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  data::SceneType SceneTypeBySceneId; // eax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  common::milog::MiLogStream *v17; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // rax
  bool isNeedQuitMp; // r14
  common::milog::MiLogStream *v20; // r14
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // r14
  common::milog::MiLogStream *v23; // r14
  char v24; // r15
  bool v25; // r14
  common::milog::MiLogStream *v26; // r14
  common::milog::MiLogStream *v27; // r14
  common::milog::MiLogStream *v28; // rax
  unsigned __int64 DestPos; // rax
  unsigned __int64 DestRot; // rax
  Scene *v31; // r14
  uint32_t Uid; // eax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v33; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v34; // rax
  uint32_t SceneId; // r14d
  PlayerSceneComp *v36; // rax
  common::milog::MiLogStream *v38; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v39; // rax
  PlayerSceneComp *v40; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v41; // rax
  uint32_t v42; // eax
  common::milog::MiLogStream *v43; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v44; // rax
  uint32_t v45; // eax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v46; // r14
  uint32_t v47; // eax
  uint32_t PeerId; // eax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v49; // rax
  uint32_t HostPeerId; // eax
  PlayerSceneComp *v51; // rax
  uint32_t v52; // eax
  common::milog::MiLogStream *v53; // r14
  common::milog::MiLogStream *v54; // rax
  common::milog::MiLogStream *v55; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v56; // rax
  common::milog::MiLogStream *v57; // rax
  common::milog::MiLogStream *v58; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v59; // r15
  uint32_t v60; // eax
  common::milog::MiLogStream *v61; // rax
  common::milog::MiLogStream *v62; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v63; // rax
  int32_t result; // eax
  unsigned int v65; // [rsp+20h] [rbp-1C0h] BYREF
  unsigned int v66; // [rsp+24h] [rbp-1BCh] BYREF
  unsigned int val; // [rsp+28h] [rbp-1B8h] BYREF
  unsigned int EnterSceneToken; // [rsp+2Ch] [rbp-1B4h] BYREF
  uint32_t dest_scene_id; // [rsp+30h] [rbp-1B0h]
  int32_t ret; // [rsp+34h] [rbp-1ACh]
  PlayerSceneComp *scene_comp; // [rsp+38h] [rbp-1A8h]
  std::shared_ptr<Scene> v72; // [rsp+40h] [rbp-1A0h] BYREF
  common::milog::MiLogStream v73; // [rsp+50h] [rbp-190h] BYREF
  char v74[368]; // [rsp+70h] [rbp-170h] BYREF

  v2 = (unsigned __int64)v74;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(320LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 32 16 19 dest_scene_ptr:2274 64 16 18 cur_scene_ptr:2311 96 24 11 notify:2349 160 40 11 notify"
                        ":2360 240 48 13 location:2336";
  *(_QWORD *)(v2 + 16) = Player::enterSceneReady;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862722] = -219021312;
  v4[536862723] = -234881024;
  v4[536862724] = -218959118;
  v4[536862726] = -218959360;
  v4[536862727] = 62194;
  v4[536862729] = -202116109;
  v5 = proto::EnterSceneReadyReq::enter_scene_token(req);
  SceneComp = Player::getSceneComp(this);
  if ( v5 != PlayerSceneComp::getEnterSceneToken(SceneComp) )
  {
    common::milog::MiLogStream::create(
      &v73,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/player.cpp",
      "enterSceneReady",
      2264);
    v7 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
           &v73,
           (const char (*)[45])"[ENTER_SCENE] token not match, client_token:");
    val = proto::EnterSceneReadyReq::enter_scene_token(req);
    v8 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, &val);
    v9 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v8, (const char (*)[15])" server_token:");
    v10 = Player::getSceneComp(this);
    EnterSceneToken = PlayerSceneComp::getEnterSceneToken(v10);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, &EnterSceneToken);
    common::milog::MiLogStream::~MiLogStream(&v73);
    v11 = 521;
    goto LABEL_48;
  }
  scene_comp = Player::getSceneComp(this);
  if ( PlayerSceneComp::getEnterSceneState(scene_comp) != ENTER_SCENE_NOTIFY )
  {
    common::milog::MiLogStream::create(
      &v73,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/player.cpp",
      "enterSceneReady",
      2270);
    v12 = common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(
            &v73,
            (const char (*)[46])"EnterSceneState is not EnterSceneNotify, uid:");
    EnterSceneToken = Player::getUid(this);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, &EnterSceneToken);
    common::milog::MiLogStream::~MiLogStream(&v73);
    v11 = -1;
    goto LABEL_48;
  }
  PlayerSceneComp::getDestScene((const PlayerSceneComp *const)(v2 + 32));
  dest_scene_id = PlayerSceneComp::getDestSceneId(scene_comp);
  if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v2 + 32), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v73,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/player.cpp",
      "enterSceneReady",
      2278);
    v13 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
            &v73,
            (const char (*)[30])"DestScenePtr is nullptr, uid:");
    EnterSceneToken = Player::getUid(this);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, &EnterSceneToken);
    common::milog::MiLogStream::~MiLogStream(&v73);
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v72);
    v14 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v72);
    SceneTypeBySceneId = SceneExcelConfigMgr::getSceneTypeBySceneId(
                           &v14->design_config.txt_config_mgr.scene_config_mgr,
                           dest_scene_id);
    LOBYTE(v13) = SceneExcelConfigMgr::isHomeScene(SceneTypeBySceneId);
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)&v72);
    if ( (_BYTE)v13 )
      v11 = 554;
    else
      v11 = -1;
    goto LABEL_47;
  }
  v16 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
  if ( !Scene::getIsStarted(v16) )
  {
    common::milog::MiLogStream::create(
      &v73,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/player.cpp",
      "enterSceneReady",
      2287);
    v17 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
            &v73,
            (const char (*)[33])"dest scene is not started, uid: ");
    EnterSceneToken = Player::getUid(this);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, &EnterSceneToken);
    common::milog::MiLogStream::~MiLogStream(&v73);
    v18 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    if ( Scene::isHomeScene(v18) )
      v11 = 554;
    else
      v11 = -1;
    goto LABEL_47;
  }
  std::shared_ptr<Scene>::shared_ptr(&v72, (const std::shared_ptr<Scene> *)(v2 + 32));
  isNeedQuitMp = Player::isNeedQuitMp(this, &v72);
  std::shared_ptr<Scene>::~shared_ptr(&v72);
  if ( isNeedQuitMp )
  {
    common::milog::MiLogStream::create(
      &v73,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/player.cpp",
      "enterSceneReady",
      2298);
    v20 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(&v73, (const char (*)[14])"[WORLD] uid: ");
    EnterSceneToken = Player::getUid(this);
    v21 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v20, &EnterSceneToken);
    common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
      v21,
      (const char (*)[31])" quitMp and back to self world");
    common::milog::MiLogStream::~MiLogStream(&v73);
    Player::setIsQuitMp(this, 1);
  }
  ret = Player::preEnterScene(this, (const ScenePtr *)(v2 + 32));
  if ( !ret )
  {
    PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v2 + 64));
    if ( std::operator==<Scene,Scene>(
           (const std::shared_ptr<Scene> *)(v2 + 64),
           (const std::shared_ptr<Scene> *)(v2 + 32)) )
    {
      Player::disappearInCurScene(this);
    }
    else if ( std::operator!=<Scene>((const std::shared_ptr<Scene> *)(v2 + 64), 0LL) )
    {
      if ( Player::leaveCurScene(this) )
      {
        common::milog::MiLogStream::create(
          &v73,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/player.cpp",
          "enterSceneReady",
          2322);
        v23 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                &v73,
                (const char (*)[27])"leaveCurScene failed, uid:");
        EnterSceneToken = Player::getUid(this);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v23, &EnterSceneToken);
        common::milog::MiLogStream::~MiLogStream(&v73);
        v11 = -1;
LABEL_46:
        std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v2 + 64));
        goto LABEL_47;
      }
    }
    else
    {
      v24 = 0;
      v25 = 0;
      if ( PlayerSceneComp::getCurWorldOwnerUid(scene_comp) )
      {
        PlayerSceneComp::getCurWorld((const PlayerSceneComp *const)&v72);
        v24 = 1;
        if ( std::operator==<World>((const std::shared_ptr<World> *)&v72, 0LL) )
          v25 = 1;
      }
      if ( v24 )
        std::shared_ptr<World>::~shared_ptr((std::shared_ptr<World> *const)&v72);
      if ( v25 )
      {
        common::milog::MiLogStream::create(
          &v73,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/player.cpp",
          "enterSceneReady",
          2328);
        v26 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                &v73,
                (const char (*)[27])"leaveDestroyedWorld, uid: ");
        EnterSceneToken = Player::getUid(this);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v26, &EnterSceneToken);
        common::milog::MiLogStream::~MiLogStream(&v73);
        Player::leaveDestroyedWorld(this);
      }
    }
    if ( Player::getIsQuitMp(this) )
    {
      common::milog::MiLogStream::create(
        &v73,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/player.cpp",
        "enterSceneReady",
        2335);
      v27 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(&v73, (const char (*)[6])"uid: ");
      EnterSceneToken = Player::getUid(this);
      v28 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v27, &EnterSceneToken);
      common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
        v28,
        (const char (*)[31])" quitMp and back to self world");
      common::milog::MiLogStream::~MiLogStream(&v73);
      ScenePlayerLocation::ScenePlayerLocation((ScenePlayerLocation *const)(v2 + 240));
      DestPos = (unsigned __int64)PlayerSceneComp::getDestPos(scene_comp);
      if ( (char)(DestPos & 7) >= *(_BYTE *)((DestPos >> 3) + 0x7FFF8000)
        && *(_BYTE *)((DestPos >> 3) + 0x7FFF8000) != 0
        || *(_BYTE *)(((DestPos + 11) >> 3) + 0x7FFF8000) != 0
        && (char)((DestPos + 11) & 7) >= *(_BYTE *)(((DestPos + 11) >> 3) + 0x7FFF8000) )
      {
        DestPos = __asan_report_load_n(DestPos, 12LL);
      }
      *(_QWORD *)(v2 + 240) = *(_QWORD *)DestPos;
      *(_DWORD *)(v2 + 248) = *(_DWORD *)(DestPos + 8);
      DestRot = (unsigned __int64)PlayerSceneComp::getDestRot(scene_comp);
      if ( (char)(DestRot & 7) >= *(_BYTE *)((DestRot >> 3) + 0x7FFF8000)
        && *(_BYTE *)((DestRot >> 3) + 0x7FFF8000) != 0
        || *(_BYTE *)(((DestRot + 11) >> 3) + 0x7FFF8000) != 0
        && (char)((DestRot + 11) & 7) >= *(_BYTE *)(((DestRot + 11) >> 3) + 0x7FFF8000) )
      {
        DestRot = __asan_report_load_n(DestRot, 12LL);
      }
      *(_QWORD *)(v2 + 252) = *(_QWORD *)DestRot;
      *(_DWORD *)(v2 + 260) = *(_DWORD *)(DestRot + 8);
      *(_QWORD *)(v2 + 264) = *(_QWORD *)(v2 + 240);
      *(_DWORD *)(v2 + 272) = *(_DWORD *)(v2 + 248);
      *(_QWORD *)(v2 + 276) = *(_QWORD *)(v2 + 252);
      *(_DWORD *)(v2 + 284) = *(_DWORD *)(v2 + 260);
      v31 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
      Uid = Player::getUid(this);
      Scene::setPlayerLocation(v31, Uid, (const ScenePlayerLocation *)(v2 + 240));
      v33 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
      if ( Scene::getSceneType(v33) == SCENE_WORLD )
      {
        v34 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
        SceneId = Scene::getSceneId(v34);
        v36 = Player::getSceneComp(this);
        if ( SceneId != PlayerSceneComp::getMyCurPlayerSceneId(v36) )
        {
          common::milog::MiLogStream::create(
            &v73,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/player/player.cpp",
            "enterSceneReady",
            2345);
          v38 = common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(
                  &v73,
                  (const char (*)[49])"enterSceneReady setMyCurPlayerSceneId scene_id: ");
          v39 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
          EnterSceneToken = Scene::getSceneId(v39);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v38, &EnterSceneToken);
          common::milog::MiLogStream::~MiLogStream(&v73);
          v40 = Player::getSceneComp(this);
          v41 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
          v42 = Scene::getSceneId(v41);
          PlayerSceneComp::setMyCurPlayerSceneId(v40, v42);
        }
      }
      proto::ClientReconnectNotify::ClientReconnectNotify((proto::ClientReconnectNotify *const)(v2 + 96));
      proto::ClientReconnectNotify::set_reason(
        (proto::ClientReconnectNotify *const)(v2 + 96),
        CLIENT_RECONNNECT_QUIT_MP);
      Player::sendProto(this, (const google::protobuf::Message *)(v2 + 96));
      common::milog::MiLogStream::create(
        &v73,
        &common::milog::MiLogDefault::default_log_obj_,
        2u,
        "./src/player/player.cpp",
        "enterSceneReady",
        2352);
      v43 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
              &v73,
              (const char (*)[39])"[MP] QuitMp send ReconnectNotify, uid:");
      EnterSceneToken = Player::getUid(this);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v43, &EnterSceneToken);
      common::milog::MiLogStream::~MiLogStream(&v73);
      PlayerSceneComp::setEnterSceneState(scene_comp, ENTER_SCENE_READY);
      v11 = 0;
      proto::ClientReconnectNotify::~ClientReconnectNotify((proto::ClientReconnectNotify *const)(v2 + 96));
    }
    else
    {
      proto::EnterScenePeerNotify::EnterScenePeerNotify((proto::EnterScenePeerNotify *const)(v2 + 160));
      v44 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
      v45 = Scene::getSceneId(v44);
      proto::EnterScenePeerNotify::set_dest_scene_id((proto::EnterScenePeerNotify *const)(v2 + 160), v45);
      v46 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
      v47 = Player::getUid(this);
      PeerId = Scene::getPeerId(v46, v47);
      proto::EnterScenePeerNotify::set_peer_id((proto::EnterScenePeerNotify *const)(v2 + 160), PeerId);
      v49 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
      HostPeerId = Scene::getHostPeerId(v49);
      proto::EnterScenePeerNotify::set_host_peer_id((proto::EnterScenePeerNotify *const)(v2 + 160), HostPeerId);
      v51 = Player::getSceneComp(this);
      v52 = PlayerSceneComp::getEnterSceneToken(v51);
      proto::EnterScenePeerNotify::set_enter_scene_token((proto::EnterScenePeerNotify *const)(v2 + 160), v52);
      Player::sendProto(this, (const google::protobuf::Message *)(v2 + 160));
      PlayerSceneComp::setEnterSceneState(scene_comp, ENTER_SCENE_READY);
      common::milog::MiLogStream::create(
        &v73,
        &common::milog::MiLogDefault::default_log_obj_,
        2u,
        "./src/player/player.cpp",
        "enterSceneReady",
        2369);
      v53 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
              &v73,
              (const char (*)[34])"[EnterScene] EnterSceneReady uid:");
      v65 = Player::getUid(this);
      v54 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v53, &v65);
      v55 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v54, (const char (*)[16])" dest_scene_id:");
      v56 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
      v66 = Scene::getSceneId(v56);
      v57 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v55, &v66);
      v58 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v57, (const char (*)[10])" peer_id:");
      v59 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
      v60 = Player::getUid(this);
      val = Scene::getPeerId(v59, v60);
      v61 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v58, &val);
      v62 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v61, (const char (*)[15])" host_peer_id:");
      v63 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
      EnterSceneToken = Scene::getHostPeerId(v63);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v62, &EnterSceneToken);
      common::milog::MiLogStream::~MiLogStream(&v73);
      v11 = 0;
      proto::EnterScenePeerNotify::~EnterScenePeerNotify((proto::EnterScenePeerNotify *const)(v2 + 160));
    }
    goto LABEL_46;
  }
  Player::clearDestination(this);
  common::milog::MiLogStream::create(
    &v73,
    &common::milog::MiLogDefault::default_log_obj_,
    3u,
    "./src/player/player.cpp",
    "enterSceneReady",
    2307);
  v22 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
          &v73,
          (const char (*)[27])"preEnterScene failed, uid:");
  EnterSceneToken = Player::getUid(this);
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v22, &EnterSceneToken);
  common::milog::MiLogStream::~MiLogStream(&v73);
  v11 = ret;
LABEL_47:
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v2 + 32));
LABEL_48:
  result = v11;
  if ( v74 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8024) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2376: range 00000000171447B2-0000000017144D7C
bool __cdecl Player::isNeedQuitMp(Player *const this, ScenePtr *p_dest_scene_ptr)
{
  bool v2; // r15
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  data::SceneType SceneType; // eax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  uint32_t OwnerUid; // r14d
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rbx
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  unsigned __int64 v16; // rdx
  std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  unsigned __int64 v18; // rdx
  std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // rax
  unsigned __int64 v20; // rdx
  char v21; // al
  common::milog::MiLogStream *v22; // r14
  int v23; // r14d
  bool result; // al
  unsigned int val; // [rsp+24h] [rbp-DCh] BYREF
  PlayerSceneComp *scene_comp; // [rsp+28h] [rbp-D8h]
  common::milog::MiLogStream v27; // [rsp+30h] [rbp-D0h] BYREF
  char v28[176]; // [rsp+50h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v28;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 4 24 cur_world_owner_uid:2389 64 16 18 cur_world_ptr:2397 96 16 19 dest_world_ptr:2398";
  *(_QWORD *)(v3 + 16) = Player::isNeedQuitMp;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -219021312;
  v5[536862723] = -202178560;
  if ( std::operator==<Scene>(0LL, p_dest_scene_ptr) )
  {
    common::milog::MiLogStream::create(
      &v27,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "isNeedQuitMp",
      2379);
    common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(&v27, (const char (*)[22])"it should not happen!");
    common::milog::MiLogStream::~MiLogStream(&v27);
    v2 = 0;
    goto LABEL_40;
  }
  scene_comp = Player::getSceneComp(this);
  v6 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_dest_scene_ptr);
  SceneType = Scene::getSceneType(v6);
  if ( !SceneExcelConfigMgr::isPlayerScene(SceneType) )
    goto LABEL_39;
  v8 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_dest_scene_ptr);
  OwnerUid = Scene::getOwnerUid(v8);
  if ( OwnerUid != Player::getUid(this) )
    goto LABEL_39;
  *(_DWORD *)(v3 + 48) = PlayerSceneComp::getCurWorldOwnerUid(scene_comp);
  if ( *(_DWORD *)(v3 + 48) && Player::getUid(this) != *(_DWORD *)(v3 + 48) )
  {
    common::milog::MiLogStream::create(
      &v27,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/player.cpp",
      "isNeedQuitMp",
      2392);
    v12 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
            &v27,
            (const char (*)[21])"cur_world_owner_uid:");
    v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v3 + 48));
    v14 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
            v13,
            (const char (*)[21])" back to self world:");
    val = Player::getUid(this);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, &val);
    common::milog::MiLogStream::~MiLogStream(&v27);
    v2 = 1;
    goto LABEL_40;
  }
  PlayerSceneComp::getCurWorld((const PlayerSceneComp *const)(v3 + 64));
  v15 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_dest_scene_ptr);
  if ( *(_BYTE *)(((unsigned __int64)v15 >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  v16 = (unsigned __int64)(v15->_vptr_DescribalBase + 8);
  if ( *(_BYTE *)((v16 >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  (*(void (__fastcall **)(unsigned __int64, std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *))v16)(
    v3 + 96,
    v15);
  if ( !std::operator!=<World>((const std::shared_ptr<World> *)(v3 + 64), 0LL) )
    goto LABEL_34;
  v17 = std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
  if ( *(_BYTE *)(((unsigned __int64)v17 >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  v18 = (unsigned __int64)(v17->_vptr_World + 2);
  if ( *(_BYTE *)((v18 >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  if ( (*(unsigned int (__fastcall **)(std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *))v18)(v17) != 2
    || !std::operator!=<PlayerWorld>((const std::shared_ptr<PlayerWorld> *)(v3 + 96), 0LL) )
  {
    goto LABEL_34;
  }
  v19 = std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
  if ( *(_BYTE *)(((unsigned __int64)v19 >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  v20 = (unsigned __int64)(v19->_vptr_World + 23);
  if ( *(_BYTE *)((v20 >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  if ( (*(unsigned __int8 (__fastcall **)(std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *))v20)(v19) != 1 )
    v21 = 1;
  else
LABEL_34:
    v21 = 0;
  if ( v21 )
  {
    common::milog::MiLogStream::create(
      &v27,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/player.cpp",
      "isNeedQuitMp",
      2402);
    v22 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
            &v27,
            (const char (*)[25])"home back to self world:");
    val = Player::getUid(this);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v22, &val);
    common::milog::MiLogStream::~MiLogStream(&v27);
    v2 = 1;
    v23 = 0;
  }
  else
  {
    v23 = 1;
  }
  std::shared_ptr<PlayerWorld>::~shared_ptr((std::shared_ptr<PlayerWorld> *const)(v3 + 96));
  std::shared_ptr<World>::~shared_ptr((std::shared_ptr<World> *const)(v3 + 64));
  if ( v23 == 1 )
LABEL_39:
    v2 = 0;
LABEL_40:
  result = v2;
  if ( v28 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2410: range 0000000017144D7E-000000001714526B
void __cdecl Player::disappearInCurScene(Player *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  common::milog::MiLogStream *v4; // r14
  common::milog::MiLogStream *v5; // r14
  bool v6; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  unsigned __int64 v8; // rdx
  uint32_t v9; // r14d
  PlayerViewMgr *v10; // rax
  uint32_t Uid; // eax
  PlayerAvatarComp *AvatarComp; // rax
  PlayerVehicleComp *VehicleComp; // rax
  PlayerFishingComp *FishingComp; // rax
  unsigned int val; // [rsp+1Ch] [rbp-D4h] BYREF
  common::milog::MiLogStream v16; // [rsp+20h] [rbp-D0h] BYREF
  char v17[176]; // [rsp+40h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "3 32 16 18 cur_scene_ptr:2411 64 16 19 cur_avatar_ptr:2418 96 16 24 player_view_mgr_ptr:2430";
  *(_QWORD *)(v1 + 16) = Player::disappearInCurScene;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -219021312;
  v3[536862722] = -219021312;
  v3[536862723] = -202178560;
  Player::getSceneComp(this);
  PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v1 + 32));
  if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v1 + 32), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v16,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/player.cpp",
      "disappearInCurScene",
      2414);
    v4 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
           &v16,
           (const char (*)[38])"[EnterScene] getCurScene failed, uid:");
    val = Player::getUid(this);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v4, &val);
    common::milog::MiLogStream::~MiLogStream(&v16);
  }
  else
  {
    Player::getCurAvatar((Player *const)(v1 + 64));
    if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v1 + 64), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v16,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/player.cpp",
        "disappearInCurScene",
        2421);
      v5 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
             &v16,
             (const char (*)[39])"[EnterScene] getCurAvatar failed, uid:");
      val = Player::getUid(this);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, &val);
      common::milog::MiLogStream::~MiLogStream(&v16);
    }
    else
    {
      std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 64));
      Entity::getScene((const Entity *const)(v1 + 96));
      v6 = std::operator==<Scene,Scene>(
             (const std::shared_ptr<Scene> *)(v1 + 96),
             (const std::shared_ptr<Scene> *)(v1 + 32));
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v1 + 96));
      if ( v6 )
      {
        v7 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 64));
        if ( *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v8 = *(_QWORD *)v7->baseclass_0 + 128LL;
        if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        (*(void (__fastcall **)(std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, VisionContext *))v8)(
          v7,
          &VisionContext::miss_context);
      }
      v9 = (unsigned int)std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
      Player::getUid(this);
      Scene::findPlayerViewMgr((const Scene *const)(v1 + 96), v9);
      if ( std::operator!=<PlayerViewMgr>((const std::shared_ptr<PlayerViewMgr> *)(v1 + 96), 0LL) )
      {
        v10 = std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 96));
        PlayerViewMgr::resetPlayerViewMgr(v10);
      }
      else
      {
        common::milog::MiLogStream::create(
          &v16,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/player.cpp",
          "disappearInCurScene",
          2437);
        Uid = Player::getUid(this);
        common::milog::MiLogStream::operator()(&v16, "uid:%u view_mgr is null", Uid);
        common::milog::MiLogStream::~MiLogStream(&v16);
      }
      AvatarComp = Player::getAvatarComp(this);
      PlayerAvatarComp::clearMonsterAlertCount(AvatarComp);
      VehicleComp = Player::getVehicleComp(this);
      PlayerVehicleComp::onDisappearInCurScene(VehicleComp);
      FishingComp = Player::getFishingComp(this);
      PlayerFishingComp::exitCurFishPool(FishingComp);
      std::shared_ptr<PlayerViewMgr>::~shared_ptr((std::shared_ptr<PlayerViewMgr> *const)(v1 + 96));
    }
    std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v1 + 64));
  }
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v1 + 32));
  if ( v17 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 2449: range 000000001714526C-0000000017145725
int32_t __cdecl Player::leaveCurScene(Player *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  common::milog::MiLogStream *v4; // r14
  int32_t v5; // r14d
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  unsigned __int64 v7; // rdx
  common::milog::MiLogStream *v8; // r14
  uint32_t v9; // r14d
  PlayerViewMgr *v10; // rax
  uint32_t Uid; // eax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // r14
  unsigned __int64 v13; // rax
  void (__fastcall *v14)(std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, _QWORD); // r15
  uint32_t v15; // eax
  int32_t result; // eax
  unsigned int val; // [rsp+1Ch] [rbp-D4h] BYREF
  common::milog::MiLogStream v18; // [rsp+20h] [rbp-D0h] BYREF
  char v19[176]; // [rsp+40h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "3 32 16 18 cur_scene_ptr:2450 64 16 19 cur_avatar_ptr:2457 96 16 24 player_view_mgr_ptr:2467";
  *(_QWORD *)(v1 + 16) = Player::leaveCurScene;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -219021312;
  v3[536862722] = -219021312;
  v3[536862723] = -202178560;
  Player::getSceneComp(this);
  PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v1 + 32));
  if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v1 + 32), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v18,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/player.cpp",
      "leaveCurScene",
      2453);
    v4 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
           &v18,
           (const char (*)[38])"[EnterScene] getCurScene failed, uid:");
    val = Player::getUid(this);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v4, &val);
    common::milog::MiLogStream::~MiLogStream(&v18);
    v5 = -1;
  }
  else
  {
    Player::getCurAvatar((Player *const)(v1 + 64));
    if ( std::operator!=<Avatar>((const std::shared_ptr<Avatar> *)(v1 + 64), 0LL) )
    {
      v6 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 64));
      if ( *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v7 = *(_QWORD *)v6->baseclass_0 + 128LL;
      if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      (*(void (__fastcall **)(std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, VisionContext *))v7)(
        v6,
        &VisionContext::miss_context);
    }
    else
    {
      common::milog::MiLogStream::create(
        &v18,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/player.cpp",
        "leaveCurScene",
        2464);
      v8 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
             &v18,
             (const char (*)[39])"[EnterScene] getCurAvatar failed, uid:");
      val = Player::getUid(this);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, &val);
      common::milog::MiLogStream::~MiLogStream(&v18);
    }
    v9 = (unsigned int)std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
    Player::getUid(this);
    Scene::findPlayerViewMgr((const Scene *const)(v1 + 96), v9);
    if ( std::operator!=<PlayerViewMgr>((const std::shared_ptr<PlayerViewMgr> *)(v1 + 96), 0LL) )
    {
      v10 = std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 96));
      PlayerViewMgr::resetPlayerViewMgr(v10);
    }
    else
    {
      common::milog::MiLogStream::create(
        &v18,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/player.cpp",
        "leaveCurScene",
        2474);
      Uid = Player::getUid(this);
      common::milog::MiLogStream::operator()(&v18, "uid:%u view_mgr is null", Uid);
      common::milog::MiLogStream::~MiLogStream(&v18);
    }
    v12 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
    if ( *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v13 = (unsigned __int64)(v12->_vptr_DescribalBase + 11);
    if ( *(_BYTE *)((v13 >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v14 = *(void (__fastcall **)(std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, _QWORD))v13;
    v15 = Player::getUid(this);
    v14(v12, v15);
    v5 = 0;
    std::shared_ptr<PlayerViewMgr>::~shared_ptr((std::shared_ptr<PlayerViewMgr> *const)(v1 + 96));
    std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v1 + 64));
  }
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v1 + 32));
  result = v5;
  if ( v19 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2483: range 0000000017145726-0000000017145EE4
// local variable allocation has failed, the output may be wrong!
void __cdecl Player::leaveDestroyedWorld(Player *const this)
{
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  bool v4; // r14
  common::milog::MiLogStream *v5; // r14
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // r14
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // r14
  PlayerAvatarComp *AvatarComp; // rax
  const std::weak_ptr<Avatar> *v12; // rax
  Entity *v13; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyLeaveWorld,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyLeaveWorld,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // r14
  uint32_t CurSceneId; // eax
  std::__shared_ptr_access<proto_log::PlayerLogBodyLeaveWorld,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // r14
  const std::string *v18; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyLeaveWorld,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  uint32_t OwnerUid; // eax
  std::__shared_ptr_access<proto_log::PlayerLogBodyLeaveWorld,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v22; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v23; // rax
  uint32_t SceneId; // eax
  std::string v25; // [rsp+0h] [rbp-190h] OVERLAPPED BYREF
  std::vector<std::weak_ptr<Avatar>>::iterator __for_begin; // [rsp+20h] [rbp-170h] BYREF
  std::vector<std::weak_ptr<Avatar>>::iterator __for_end; // [rsp+28h] [rbp-168h] BYREF
  PlayerSceneComp *scene_comp; // [rsp+30h] [rbp-160h]
  std::vector<std::weak_ptr<Avatar>> *__for_range; // [rsp+38h] [rbp-158h]
  common::milog::MiLogStream v30; // [rsp+40h] [rbp-150h] BYREF
  char v31[304]; // [rsp+60h] [rbp-130h] BYREF

  v25._M_string_length = (std::string::size_type)this;
  v1 = (unsigned __int64)v31;
  v25._M_dataplus._M_p = v31;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_2(256LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "7 32 1 11 holder:2513 48 4 14 owner_uid:2486 64 16 12 log_ptr:2514 96 16 19 dest_scene_ptr:2518 "
                        "128 16 15 avatar_wtr:2502 160 16 15 avatar_ptr:2504 192 24 15 avatar_vec:2501";
  *(_QWORD *)(v1 + 16) = Player::leaveDestroyedWorld;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234556927;
  v3[536862722] = -219021312;
  v3[536862723] = -219021312;
  v3[536862724] = -219021312;
  v3[536862725] = -219021312;
  v3[536862726] = -218103808;
  v3[536862727] = -202116109;
  scene_comp = Player::getSceneComp((Player *const)v25._M_string_length);
  *(_DWORD *)(v1 + 48) = PlayerSceneComp::getCurWorldOwnerUid(scene_comp);
  PlayerSceneComp::getCurWorld((const PlayerSceneComp *const)(v1 + 160));
  v4 = std::operator!=<World>((const std::shared_ptr<World> *)(v1 + 160), 0LL) || !*(_DWORD *)(v1 + 48);
  std::shared_ptr<World>::~shared_ptr((std::shared_ptr<World> *const)(v1 + 160));
  if ( v4 )
  {
    common::milog::MiLogStream::create(
      &v30,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "leaveDestroyedWorld",
      2489);
    v5 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(&v30, (const char (*)[6])"uid: ");
    *((_DWORD *)&v25._anon_0._M_allocated_capacity + 3) = Player::getUid((const Player *const)v25._M_string_length);
    v6 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
           v5,
           (const unsigned int *)&v25._anon_0._M_allocated_capacity + 3);
    v7 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
           v6,
           (const char (*)[39])" getCurWorld() != nullptr, owner_uid: ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v1 + 48));
    common::milog::MiLogStream::~MiLogStream(&v30);
  }
  else
  {
    common::milog::MiLogStream::create(
      &v30,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/player.cpp",
      "leaveDestroyedWorld",
      2492);
    v8 = common::milog::MiLogStream::operator<<<char [70],(char *[70])0>(
           &v30,
           (const char (*)[70])"enter dest scene, but cur scene is destroied, getCurWorldOwnerUid(): ");
    *((_DWORD *)&v25._anon_0._M_allocated_capacity + 2) = PlayerSceneComp::getCurWorldOwnerUid(scene_comp);
    v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
           v8,
           (const unsigned int *)&v25._anon_0._M_allocated_capacity + 2);
    v10 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v9, (const char (*)[7])" uid: ");
    *((_DWORD *)&v25._anon_0._M_allocated_capacity + 3) = Player::getUid((const Player *const)v25._M_string_length);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
      v10,
      (const unsigned int *)&v25._anon_0._M_allocated_capacity + 3);
    common::milog::MiLogStream::~MiLogStream(&v30);
    PlayerSceneComp::playerLeaveScene(scene_comp);
    std::shared_ptr<World>::shared_ptr((std::shared_ptr<World> *const)(v1 + 160), 0LL);
    PlayerSceneComp::setCurWorld(scene_comp, (WorldPtr *)(v1 + 160));
    std::shared_ptr<World>::~shared_ptr((std::shared_ptr<World> *const)(v1 + 160));
    PlayerSceneComp::setCurWorldOwnerUid(scene_comp, 0);
    AvatarComp = Player::getAvatarComp((Player *const)v25._M_string_length);
    PlayerAvatarComp::getAllAvatarVec((std::vector<std::weak_ptr<Avatar>> *)(v1 + 192), AvatarComp);
    __for_range = (std::vector<std::weak_ptr<Avatar>> *)(v1 + 192);
    __for_begin._M_current = std::vector<std::weak_ptr<Avatar>>::begin((std::vector<std::weak_ptr<Avatar>> *const)(v1 + 192))._M_current;
    __for_end._M_current = std::vector<std::weak_ptr<Avatar>>::end(__for_range)._M_current;
    while ( __gnu_cxx::operator!=<std::weak_ptr<Avatar> *,std::vector<std::weak_ptr<Avatar>>>(&__for_begin, &__for_end) )
    {
      v12 = __gnu_cxx::__normal_iterator<std::weak_ptr<Avatar> *,std::vector<std::weak_ptr<Avatar>>>::operator*(&__for_begin);
      std::weak_ptr<Avatar>::weak_ptr((std::weak_ptr<Avatar> *const)(v1 + 128), v12);
      std::weak_ptr<Avatar>::lock((const std::weak_ptr<Avatar> *const)(v1 + 160));
      if ( !std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v1 + 160), 0LL) )
      {
        v13 = (Entity *)std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 160));
        Entity::setOnGrid(v13, 0);
      }
      std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v1 + 160));
      std::weak_ptr<Avatar>::~weak_ptr((std::weak_ptr<Avatar> *const)(v1 + 128));
      __gnu_cxx::__normal_iterator<std::weak_ptr<Avatar> *,std::vector<std::weak_ptr<Avatar>>>::operator++(&__for_begin);
    }
    std::allocator<char>::allocator((char *)&v25._anon_0._M_allocated_capacity + 7);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)&v30,
      byte_25FB4240,
      (const std::allocator<char> *)&v25._anon_0._M_allocated_capacity + 7);
    StatLogUtils::ContextHolder::ContextHolder((StatLogUtils::ContextHolder *const)(v1 + 32), 0x60Fu, v25);
    std::string::~string(&v30);
    std::allocator<char>::~allocator((char *)&v25._anon_0._M_allocated_capacity + 7);
    common::tools::perf::make_shared<proto_log::PlayerLogBodyLeaveWorld>();
    v14 = std::__shared_ptr_access<proto_log::PlayerLogBodyLeaveWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyLeaveWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 64));
    proto_log::PlayerLogBodyLeaveWorld::set_owner_uid(v14, *(_DWORD *)(v1 + 48));
    v15 = std::__shared_ptr_access<proto_log::PlayerLogBodyLeaveWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyLeaveWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 64));
    CurSceneId = PlayerSceneComp::getCurSceneId(scene_comp);
    proto_log::PlayerLogBodyLeaveWorld::set_scene_id(v15, CurSceneId);
    v17 = std::__shared_ptr_access<proto_log::PlayerLogBodyLeaveWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyLeaveWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 64));
    v18 = PlayerSceneComp::getEnterWorldTransaction[abi:cxx11](scene_comp);
    proto_log::PlayerLogBodyLeaveWorld::set_transaction(v17, v18);
    PlayerSceneComp::getDestScene((const PlayerSceneComp *const)(v1 + 96));
    if ( std::operator!=<Scene>((const std::shared_ptr<Scene> *)(v1 + 96), 0LL) )
    {
      v19 = std::__shared_ptr_access<proto_log::PlayerLogBodyLeaveWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyLeaveWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 64));
      v20 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 96));
      OwnerUid = Scene::getOwnerUid(v20);
      proto_log::PlayerLogBodyLeaveWorld::set_dest_owner_uid(v19, OwnerUid);
      v22 = std::__shared_ptr_access<proto_log::PlayerLogBodyLeaveWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyLeaveWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 64));
      v23 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 96));
      SceneId = Scene::getSceneId(v23);
      proto_log::PlayerLogBodyLeaveWorld::set_dest_scene_id(v22, SceneId);
    }
    std::shared_ptr<google::protobuf::Message>::shared_ptr(
      (std::shared_ptr<google::protobuf::Message> *const)(v1 + 160),
      0LL);
    std::shared_ptr<google::protobuf::Message>::shared_ptr<proto_log::PlayerLogBodyLeaveWorld,void>(
      (std::shared_ptr<google::protobuf::Message> *const)(v1 + 128),
      (const std::shared_ptr<proto_log::PlayerLogBodyLeaveWorld> *)(v1 + 64));
    Player::printStatLog((Player *const)v25._M_string_length, (MessagePtr *)(v1 + 128), (MessagePtr *)(v1 + 160), 0xEu);
    std::shared_ptr<google::protobuf::Message>::~shared_ptr((std::shared_ptr<google::protobuf::Message> *const)(v1 + 128));
    std::shared_ptr<google::protobuf::Message>::~shared_ptr((std::shared_ptr<google::protobuf::Message> *const)(v1 + 160));
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v1 + 96));
    std::shared_ptr<proto_log::PlayerLogBodyLeaveWorld>::~shared_ptr((std::shared_ptr<proto_log::PlayerLogBodyLeaveWorld> *const)(v1 + 64));
    StatLogUtils::ContextHolder::~ContextHolder((StatLogUtils::ContextHolder *const)(v1 + 32));
    std::vector<std::weak_ptr<Avatar>>::~vector((std::vector<std::weak_ptr<Avatar>> *const)(v1 + 192));
  }
  if ( v25._M_dataplus._M_p == (std::string::pointer)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 2528: range 0000000017145EE6-0000000017146644
int32_t __cdecl Player::preEnterScene(Player *const this, const ScenePtr *dest_scene_ptr)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  common::milog::MiLogStream *v5; // rbx
  int32_t v6; // r14d
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  unsigned __int64 v8; // rdx
  common::milog::MiLogStream *v9; // r14
  bool v10; // al
  DungeonScene *v11; // rax
  bool v12; // al
  bool v13; // al
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  unsigned __int64 v17; // rdx
  common::milog::MiLogStream *v18; // r14
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // r14
  std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  Scene *v22; // rdx
  common::milog::MiLogStream *v23; // r14
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  int32_t result; // eax
  bool is_reenter_dungeon; // [rsp+15h] [rbp-11Bh]
  bool is_need_enter_world; // [rsp+17h] [rbp-119h]
  unsigned int val; // [rsp+18h] [rbp-118h] BYREF
  int32_t ret; // [rsp+1Ch] [rbp-114h]
  common::milog::MiLogStream v31; // [rsp+20h] [rbp-110h] BYREF
  char v32[240]; // [rsp+40h] [rbp-F0h] BYREF

  v2 = (unsigned __int64)v32;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 48 4 8 ret:2559 64 16 18 cur_world_ptr:2535 96 16 19 dest_world_ptr:2536 128 16 27 dest_dungeo"
                        "n_scene_ptr:2543 160 16 26 cur_dungeon_scene_ptr:2544";
  *(_QWORD *)(v2 + 16) = Player::preEnterScene;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862724] = -219021312;
  v4[536862725] = -202178560;
  if ( std::operator==<Scene>(dest_scene_ptr, 0LL) )
  {
    common::milog::MiLogStream::create(
      &v31,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/player.cpp",
      "preEnterScene",
      2531);
    v5 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
           &v31,
           (const char (*)[40])"[EnterScene] preEnterScene failed, uid:");
    val = Player::getUid(this);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, &val);
    common::milog::MiLogStream::~MiLogStream(&v31);
    v6 = -1;
  }
  else
  {
    Player::getSceneComp(this);
    PlayerSceneComp::getCurWorld((const PlayerSceneComp *const)(v2 + 64));
    v7 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)dest_scene_ptr);
    if ( *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v8 = (unsigned __int64)(v7->_vptr_DescribalBase + 7);
    if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    (*(void (__fastcall **)(unsigned __int64, std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *))v8)(
      v2 + 96,
      v7);
    if ( std::operator==<World>((const std::shared_ptr<World> *)(v2 + 96), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v31,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/player.cpp",
        "preEnterScene",
        2539);
      v9 = common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(
             &v31,
             (const char (*)[46])"[EnterScene] dest_world_ptr is nullptr, uid: ");
      val = Player::getUid(this);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, &val);
      common::milog::MiLogStream::~MiLogStream(&v31);
      v6 = -1;
    }
    else
    {
      std::dynamic_pointer_cast<DungeonScene,Scene>((const std::shared_ptr<Scene> *)(v2 + 128));
      Player::getSceneComp(this);
      PlayerSceneComp::getCurScene<DungeonScene>((PlayerSceneComp *const)(v2 + 160));
      v10 = std::operator!=<DungeonScene>((const std::shared_ptr<DungeonScene> *)(v2 + 128), 0LL)
         && std::operator!=<DungeonScene>((const std::shared_ptr<DungeonScene> *)(v2 + 160), 0LL)
         && std::operator==<DungeonScene,DungeonScene>(
              (const std::shared_ptr<DungeonScene> *)(v2 + 128),
              (const std::shared_ptr<DungeonScene> *)(v2 + 160));
      is_reenter_dungeon = v10;
      v12 = 0;
      if ( std::operator!=<DungeonScene>((const std::shared_ptr<DungeonScene> *)(v2 + 128), 0LL) )
      {
        v11 = std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 128));
        if ( DungeonScene::isEnterByCharAmusementActivity(v11) )
          v12 = 1;
      }
      v13 = v12 && !is_reenter_dungeon;
      is_need_enter_world = v13;
      if ( !std::operator!=<World,World>(
              (const std::shared_ptr<World> *)(v2 + 64),
              (const std::shared_ptr<World> *)(v2 + 96)) )
        goto LABEL_37;
      v14 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)dest_scene_ptr);
      if ( Scene::getSceneType(v14) == SCENE_DUNGEON && !is_need_enter_world )
        goto LABEL_37;
      v16 = std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
      if ( *(_BYTE *)(((unsigned __int64)v16 >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v17 = (unsigned __int64)(v16->_vptr_World + 16);
      if ( *(_BYTE *)((v17 >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      ret = (*(__int64 (__fastcall **)(std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, Player *const))v17)(
              v16,
              this);
      if ( ret )
      {
        common::milog::MiLogStream::create(
          &v31,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/player.cpp",
          "preEnterScene",
          2554);
        v18 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(&v31, (const char (*)[6])"uid: ");
        *(_DWORD *)(v2 + 48) = Player::getUid(this);
        v19 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v18,
                (const unsigned int *)(v2 + 48));
        v20 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                v19,
                (const char (*)[32])" pre-enter world fails, owner: ");
        v21 = std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
        val = World::getOwnerUid(v21);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v20, &val);
        common::milog::MiLogStream::~MiLogStream(&v31);
        v6 = ret;
      }
      else
      {
LABEL_37:
        v22 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)dest_scene_ptr);
        *(_DWORD *)(v2 + 48) = Scene::playerPreEnter(v22, this);
        if ( *(_DWORD *)(v2 + 48) )
        {
          common::milog::MiLogStream::create(
            &v31,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/player.cpp",
            "preEnterScene",
            2562);
          v23 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
                  &v31,
                  (const char (*)[41])"[EnterScene] playerPreEnter failed, uid:");
          val = Player::getUid(this);
          v24 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v23, &val);
          v25 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v24, (const char (*)[6])" ret:");
          common::milog::MiLogStream::operator<<<int,(int *)0>(v25, (const int *)(v2 + 48));
          common::milog::MiLogStream::~MiLogStream(&v31);
          v6 = *(_DWORD *)(v2 + 48);
        }
        else
        {
          v6 = 0;
        }
      }
      std::shared_ptr<DungeonScene>::~shared_ptr((std::shared_ptr<DungeonScene> *const)(v2 + 160));
      std::shared_ptr<DungeonScene>::~shared_ptr((std::shared_ptr<DungeonScene> *const)(v2 + 128));
    }
    std::shared_ptr<World>::~shared_ptr((std::shared_ptr<World> *const)(v2 + 96));
    std::shared_ptr<World>::~shared_ptr((std::shared_ptr<World> *const)(v2 + 64));
  }
  result = v6;
  if ( v32 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2571: range 0000000017146646-0000000017146796
int32_t __cdecl Player::markDestination(
        Player *const this,
        const ScenePtr *scene_ptr,
        const Vector3 *pos,
        const Vector3 *rot,
        proto::EnterType enter_type,
        proto::VisionType vision_type,
        bool is_relogin,
        bool is_client_relogin,
        proto::EnterReason enter_reason)
{
  PlayerBasicComp *BasicComp; // rax
  PlayerSceneComp *scene_comp; // [rsp+38h] [rbp-28h]
  std::shared_ptr<Scene> p_dest_scene_ptr; // [rsp+40h] [rbp-20h] BYREF

  scene_comp = Player::getSceneComp(this);
  std::shared_ptr<Scene>::shared_ptr(&p_dest_scene_ptr, scene_ptr);
  PlayerSceneComp::setDestScene(scene_comp, &p_dest_scene_ptr);
  std::shared_ptr<Scene>::~shared_ptr(&p_dest_scene_ptr);
  PlayerSceneComp::setDestPos(scene_comp, pos);
  PlayerSceneComp::setDestRot(scene_comp, rot);
  PlayerSceneComp::setDestEnterType(scene_comp, enter_type);
  PlayerSceneComp::setDestVisionType(scene_comp, vision_type);
  PlayerSceneComp::setIsEnterRelogin(scene_comp, is_relogin);
  PlayerSceneComp::setIsClientRelogin(scene_comp, is_client_relogin);
  BasicComp = Player::getBasicComp(this);
  PlayerBasicComp::setIsInTransfer(BasicComp, 1);
  PlayerSceneComp::setIsHasTransferMarkForSpeedCheck(scene_comp, 1);
  PlayerSceneComp::setIsHasTransferMarkForSceneTimeSpeedCheck(scene_comp, 1);
  PlayerSceneComp::setDestEnterReason(scene_comp, enter_reason);
  return 0;
};

// Line 2588: range 0000000017146798-00000000171476C9
int32_t __cdecl Player::sceneInitFinish(Player *const this, const proto::SceneInitFinishReq *req)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  __int64 v5; // rsi
  __int64 v6; // rdx
  int32_t v7; // r14d
  google::protobuf::uint32 v8; // r14d
  PlayerSceneComp *SceneComp; // rax
  common::milog::MiLogStream *v10; // rbx
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rbx
  PlayerSceneComp *v13; // rax
  common::milog::MiLogStream *v14; // rbx
  unsigned __int64 DestPos; // rax
  unsigned __int64 DestRot; // rax
  common::milog::MiLogStream *v17; // r14
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // rax
  data::SceneType SceneTypeBySceneId; // eax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  common::milog::MiLogStream *v21; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v22; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v23; // rax
  unsigned __int64 v24; // rdx
  common::milog::MiLogStream *v25; // r14
  bool v26; // al
  DungeonScene *v27; // rax
  bool v28; // al
  bool v29; // al
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v30; // rax
  std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v32; // rax
  unsigned __int64 v33; // rdx
  common::milog::MiLogStream *v34; // r14
  common::milog::MiLogStream *v35; // rax
  common::milog::MiLogStream *v36; // r14
  std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v37; // rax
  std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v38; // rax
  unsigned __int64 v39; // rdx
  bool v40; // r14
  common::milog::MiLogStream *v41; // r14
  int32_t result; // eax
  bool is_enter_relogin; // [rsp+1Ch] [rbp-1A4h]
  bool is_reenter_dungeon; // [rsp+1Dh] [rbp-1A3h]
  bool is_need_enter_world; // [rsp+1Fh] [rbp-1A1h]
  unsigned int val; // [rsp+20h] [rbp-1A0h] BYREF
  unsigned int EnterSceneToken; // [rsp+24h] [rbp-19Ch] BYREF
  uint32_t dest_scene_id; // [rsp+28h] [rbp-198h]
  proto::EnterType enter_type; // [rsp+2Ch] [rbp-194h]
  proto::VisionType vision_type; // [rsp+30h] [rbp-190h]
  int32_t ret; // [rsp+34h] [rbp-18Ch]
  PlayerSceneComp *scene_comp; // [rsp+38h] [rbp-188h]
  std::shared_ptr<Scene> v53; // [rsp+40h] [rbp-180h] BYREF
  common::milog::MiLogStream v54; // [rsp+50h] [rbp-170h] BYREF
  char v55[336]; // [rsp+70h] [rbp-150h] BYREF

  v2 = (unsigned __int64)v55;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(288LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "8 32 12 13 dest_pos:2614 64 12 13 dest_rot:2615 96 16 19 dest_scene_ptr:2611 128 16 18 cur_world"
                        "_ptr:2640 160 16 19 dest_world_ptr:2641 192 16 23 definite_world_ptr:2649 224 16 27 dest_dungeon"
                        "_scene_ptr:2652 256 16 26 cur_dungeon_scene_ptr:2653";
  *(_QWORD *)(v2 + 16) = Player::sceneInitFinish;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219020288;
  v4[536862722] = -219020288;
  v4[536862723] = -219021312;
  v4[536862724] = -219021312;
  v4[536862725] = -219021312;
  v4[536862726] = -219021312;
  v4[536862727] = -219021312;
  v4[536862728] = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)&this->is_interrupt_next_transfer_ >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)this + 76) & 7) >= *(_BYTE *)(((unsigned __int64)&this->is_interrupt_next_transfer_ >> 3)
                                                      + 0x7FFF8000) )
  {
    __asan_report_load1(&this->is_interrupt_next_transfer_);
  }
  if ( !this->is_interrupt_next_transfer_ )
  {
    v8 = proto::SceneInitFinishReq::enter_scene_token(req);
    SceneComp = Player::getSceneComp(this);
    if ( v8 != PlayerSceneComp::getEnterSceneToken(SceneComp) )
    {
      common::milog::MiLogStream::create(
        &v54,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/player.cpp",
        "sceneInitFinish",
        2599);
      v10 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
              &v54,
              (const char (*)[45])"[ENTER_SCENE] token not match, client_token:");
      val = proto::SceneInitFinishReq::enter_scene_token(req);
      v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, &val);
      v12 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v11, (const char (*)[15])" server_token:");
      v13 = Player::getSceneComp(this);
      EnterSceneToken = PlayerSceneComp::getEnterSceneToken(v13);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, &EnterSceneToken);
      common::milog::MiLogStream::~MiLogStream(&v54);
      v7 = 521;
      goto LABEL_73;
    }
    scene_comp = Player::getSceneComp(this);
    if ( PlayerSceneComp::getEnterSceneState(scene_comp) != ENTER_SCENE_READY )
    {
      common::milog::MiLogStream::create(
        &v54,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/player.cpp",
        "sceneInitFinish",
        2607);
      v14 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
              &v54,
              (const char (*)[45])"EnterSceneState is not EnterSceneReady, uid:");
      EnterSceneToken = Player::getUid(this);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, &EnterSceneToken);
      common::milog::MiLogStream::~MiLogStream(&v54);
      v7 = -1;
      goto LABEL_73;
    }
    PlayerSceneComp::getDestScene((const PlayerSceneComp *const)(v2 + 96));
    dest_scene_id = PlayerSceneComp::getDestSceneId(scene_comp);
    DestPos = (unsigned __int64)PlayerSceneComp::getDestPos(scene_comp);
    if ( (char)(DestPos & 7) >= *(_BYTE *)((DestPos >> 3) + 0x7FFF8000) && *(_BYTE *)((DestPos >> 3) + 0x7FFF8000) != 0
      || *(_BYTE *)(((DestPos + 11) >> 3) + 0x7FFF8000) != 0
      && (char)((DestPos + 11) & 7) >= *(_BYTE *)(((DestPos + 11) >> 3) + 0x7FFF8000) )
    {
      DestPos = __asan_report_load_n(DestPos, 12LL);
    }
    *(_QWORD *)(v2 + 32) = *(_QWORD *)DestPos;
    *(_DWORD *)(v2 + 40) = *(_DWORD *)(DestPos + 8);
    DestRot = (unsigned __int64)PlayerSceneComp::getDestRot(scene_comp);
    if ( (char)(DestRot & 7) >= *(_BYTE *)((DestRot >> 3) + 0x7FFF8000) && *(_BYTE *)((DestRot >> 3) + 0x7FFF8000) != 0
      || *(_BYTE *)(((DestRot + 11) >> 3) + 0x7FFF8000) != 0
      && (char)((DestRot + 11) & 7) >= *(_BYTE *)(((DestRot + 11) >> 3) + 0x7FFF8000) )
    {
      DestRot = __asan_report_load_n(DestRot, 12LL);
    }
    *(_QWORD *)(v2 + 64) = *(_QWORD *)DestRot;
    *(_DWORD *)(v2 + 72) = *(_DWORD *)(DestRot + 8);
    enter_type = PlayerSceneComp::getDestEnterType(scene_comp);
    vision_type = PlayerSceneComp::getDestVisionType(scene_comp);
    is_enter_relogin = PlayerSceneComp::getIsEnterRelogin(scene_comp);
    if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v2 + 96), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v54,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/player.cpp",
        "sceneInitFinish",
        2622);
      v17 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
              &v54,
              (const char (*)[29])"getDestScenePtr failed, uid:");
      EnterSceneToken = Player::getUid(this);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, &EnterSceneToken);
      common::milog::MiLogStream::~MiLogStream(&v54);
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)&v53);
      v18 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v53);
      SceneTypeBySceneId = SceneExcelConfigMgr::getSceneTypeBySceneId(
                             &v18->design_config.txt_config_mgr.scene_config_mgr,
                             dest_scene_id);
      LOBYTE(v17) = SceneExcelConfigMgr::isHomeScene(SceneTypeBySceneId);
      std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)&v53);
      if ( (_BYTE)v17 )
        v7 = 554;
      else
        v7 = -1;
      goto LABEL_72;
    }
    v20 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
    if ( !Scene::getIsStarted(v20) )
    {
      common::milog::MiLogStream::create(
        &v54,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/player.cpp",
        "sceneInitFinish",
        2632);
      v21 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
              &v54,
              (const char (*)[33])"dest scene is not started, uid: ");
      EnterSceneToken = Player::getUid(this);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v21, &EnterSceneToken);
      common::milog::MiLogStream::~MiLogStream(&v54);
      v22 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
      if ( Scene::isHomeScene(v22) )
        v7 = 554;
      else
        v7 = -1;
      goto LABEL_72;
    }
    Player::getSceneComp(this);
    PlayerSceneComp::getCurWorld((const PlayerSceneComp *const)(v2 + 128));
    v23 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
    if ( *(_BYTE *)(((unsigned __int64)v23 >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v24 = (unsigned __int64)(v23->_vptr_DescribalBase + 7);
    if ( *(_BYTE *)((v24 >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    (*(void (__fastcall **)(unsigned __int64, std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *))v24)(
      v2 + 160,
      v23);
    if ( std::operator==<World>((const std::shared_ptr<World> *)(v2 + 160), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v54,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/player.cpp",
        "sceneInitFinish",
        2644);
      v25 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
              &v54,
              (const char (*)[33])"dest_world_ptr is nullptr, uid: ");
      EnterSceneToken = Player::getUid(this);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v25, &EnterSceneToken);
      common::milog::MiLogStream::~MiLogStream(&v54);
      v7 = -1;
LABEL_71:
      std::shared_ptr<World>::~shared_ptr((std::shared_ptr<World> *const)(v2 + 160));
      std::shared_ptr<World>::~shared_ptr((std::shared_ptr<World> *const)(v2 + 128));
LABEL_72:
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v2 + 96));
      goto LABEL_73;
    }
    std::shared_ptr<World>::shared_ptr(
      (std::shared_ptr<World> *const)(v2 + 192),
      (const std::shared_ptr<World> *)(v2 + 128));
    std::dynamic_pointer_cast<DungeonScene,Scene>((const std::shared_ptr<Scene> *)(v2 + 224));
    Player::getSceneComp(this);
    PlayerSceneComp::getCurScene<DungeonScene>((PlayerSceneComp *const)(v2 + 256));
    v26 = std::operator!=<DungeonScene>((const std::shared_ptr<DungeonScene> *)(v2 + 224), 0LL)
       && std::operator!=<DungeonScene>((const std::shared_ptr<DungeonScene> *)(v2 + 256), 0LL)
       && std::operator==<DungeonScene,DungeonScene>(
            (const std::shared_ptr<DungeonScene> *)(v2 + 224),
            (const std::shared_ptr<DungeonScene> *)(v2 + 256));
    is_reenter_dungeon = v26;
    v28 = 0;
    if ( std::operator!=<DungeonScene>((const std::shared_ptr<DungeonScene> *)(v2 + 224), 0LL) )
    {
      v27 = std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 224));
      if ( DungeonScene::isEnterByCharAmusementActivity(v27) )
        v28 = 1;
    }
    v29 = v28 && !is_reenter_dungeon;
    is_need_enter_world = v29;
    if ( std::operator!=<World,World>(
           (const std::shared_ptr<World> *)(v2 + 128),
           (const std::shared_ptr<World> *)(v2 + 160)) )
    {
      v30 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
      if ( Scene::getSceneType(v30) != SCENE_DUNGEON || is_need_enter_world )
      {
        v32 = std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 160));
        if ( *(_BYTE *)(((unsigned __int64)v32 >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v33 = (unsigned __int64)(v32->_vptr_World + 17);
        if ( *(_BYTE *)((v33 >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        ret = (*(__int64 (__fastcall **)(std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, Player *const))v33)(
                v32,
                this);
        if ( ret )
        {
          common::milog::MiLogStream::create(
            &v54,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/player.cpp",
            "sceneInitFinish",
            2664);
          v34 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(&v54, (const char (*)[6])"uid: ");
          val = Player::getUid(this);
          v35 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v34, &val);
          v36 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
                  v35,
                  (const char (*)[38])" playerEnter world fails, owner_uid: ");
          v37 = std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 160));
          EnterSceneToken = World::getOwnerUid(v37);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v36, &EnterSceneToken);
          common::milog::MiLogStream::~MiLogStream(&v54);
          v7 = ret;
LABEL_70:
          std::shared_ptr<DungeonScene>::~shared_ptr((std::shared_ptr<DungeonScene> *const)(v2 + 256));
          std::shared_ptr<DungeonScene>::~shared_ptr((std::shared_ptr<DungeonScene> *const)(v2 + 224));
          std::shared_ptr<World>::~shared_ptr((std::shared_ptr<World> *const)(v2 + 192));
          goto LABEL_71;
        }
        std::shared_ptr<World>::operator=(
          (std::shared_ptr<World> *const)(v2 + 192),
          (const std::shared_ptr<World> *)(v2 + 160));
      }
    }
    if ( *(char *)(((unsigned __int64)&this->is_relogin_ >> 3) + 0x7FFF8000) < 0 )
      __asan_report_load1(&this->is_relogin_);
    if ( this->is_relogin_ && std::operator!=<World>((const std::shared_ptr<World> *)(v2 + 192), 0LL) )
    {
      v38 = std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 192));
      if ( *(_BYTE *)(((unsigned __int64)v38 >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v39 = (unsigned __int64)(v38->_vptr_World + 21);
      if ( *(_BYTE *)((v39 >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      (*(void (__fastcall **)(std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, Player *const))v39)(
        v38,
        this);
    }
    std::shared_ptr<Scene>::shared_ptr(&v53, (const std::shared_ptr<Scene> *)(v2 + 96));
    v40 = Player::playerEnterScene(
            this,
            &v53,
            (const Vector3 *)(v2 + 32),
            (const Vector3 *)(v2 + 64),
            enter_type,
            vision_type,
            is_enter_relogin) != 0;
    std::shared_ptr<Scene>::~shared_ptr(&v53);
    if ( v40 )
    {
      common::milog::MiLogStream::create(
        &v54,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/player.cpp",
        "sceneInitFinish",
        2682);
      v41 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              &v54,
              (const char (*)[24])"enterScene failed, uid:");
      EnterSceneToken = Player::getUid(this);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v41, &EnterSceneToken);
      common::milog::MiLogStream::~MiLogStream(&v54);
      v7 = -1;
    }
    else
    {
      PlayerSceneComp::setEnterSceneState(scene_comp, ENTER_SCENE_INIT);
      v7 = 0;
    }
    goto LABEL_70;
  }
  common::milog::MiLogStream::create(
    &v54,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/player/player.cpp",
    "sceneInitFinish",
    2592);
  common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
    &v54,
    (const char (*)[35])"gm is_interrupt_next_transfer exec");
  common::milog::MiLogStream::~MiLogStream(&v54);
  v5 = ((_BYTE)this + 76) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&this->is_interrupt_next_transfer_ >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&this->is_interrupt_next_transfer_ >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_store1(&this->is_interrupt_next_transfer_, v5, v6);
  this->is_interrupt_next_transfer_ = 0;
  v7 = -1;
LABEL_73:
  result = v7;
  if ( v55 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 2692: range 00000000171476CA-00000000171480E3
int32_t __cdecl Player::playerEnterScene(
        Player *const this,
        ScenePtr *p_dest_scene_ptr,
        const Vector3 *pos,
        const Vector3 *rot,
        proto::EnterType enter_type,
        proto::VisionType vision_type,
        bool is_relogin)
{
  unsigned __int64 v7; // r13
  __int64 v8; // rax
  _DWORD *v9; // r12
  common::milog::MiLogStream *v10; // rbx
  int32_t v11; // r14d
  bool v12; // r14
  common::milog::MiLogStream *v13; // rax
  char v14; // r14
  PlayerDungeonComp *DungeonComp; // r15
  bool v16; // r15
  common::milog::MiLogStream *v17; // r14
  std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // rax
  uint32_t v19; // ecx
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // r14
  unsigned __int64 v21; // rax
  unsigned int (__fastcall *v22)(std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, Player *const, const Vector3 *, const Vector3 *, bool, unsigned __int64, unsigned __int64); // r15
  bool v23; // r14
  common::milog::MiLogStream *v24; // r14
  const std::shared_ptr<Avatar> *v25; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v26; // rax
  FightPropComp *FightPropComp; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v28; // rax
  uint64_t Guid; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v30; // rax
  google::protobuf::uint32 LifeState; // eax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v32; // rax
  BuffComp *BuffComp; // rax
  PlayerDungeonComp *v34; // rax
  PlayerSceneComp *SceneComp; // rax
  int32_t result; // eax
  bool is_reenter; // [rsp+4Bh] [rbp-1F5h]
  unsigned int val; // [rsp+4Ch] [rbp-1F4h] BYREF
  std::vector<std::shared_ptr<Avatar>>::iterator __for_begin; // [rsp+50h] [rbp-1F0h] BYREF
  std::vector<std::shared_ptr<Avatar>>::iterator __for_end; // [rsp+58h] [rbp-1E8h] BYREF
  std::vector<std::shared_ptr<Avatar>> *__for_range; // [rsp+60h] [rbp-1E0h]
  google::protobuf::RepeatedPtrField<proto::ServerBuff> *server_buff_list; // [rsp+68h] [rbp-1D8h]
  common::milog::MiLogStream v45; // [rsp+70h] [rbp-1D0h] BYREF
  char v46[432]; // [rsp+90h] [rbp-1B0h] BYREF

  v7 = (unsigned __int64)v46;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v8 = __asan_stack_malloc_3(384LL);
    if ( v8 )
      v7 = v8;
  }
  *(_QWORD *)v7 = 1102416563LL;
  *(_QWORD *)(v7 + 8) = "6 48 16 22 appear_avatar_ptr:2702 80 16 22 dungeon_scene_ptr:2709 112 16 15 avatar_ptr:2726 144 "
                        "24 23 refresh_avatar_vec:2700 208 24 27 enter_scene_avatar_vec:2701 272 80 18 change_notify:2729";
  *(_QWORD *)(v7 + 16) = Player::playerEnterScene;
  v9 = (_DWORD *)(v7 >> 3);
  v9[536862720] = -235802127;
  v9[536862721] = 61937;
  v9[536862722] = 62194;
  v9[536862723] = 62194;
  v9[536862724] = 62194;
  v9[536862725] = -218959360;
  v9[536862726] = 62194;
  v9[536862727] = -218959360;
  v9[536862728] = 62194;
  v9[536862731] = -202116109;
  if ( std::operator==<Scene>(p_dest_scene_ptr, 0LL) )
  {
    common::milog::MiLogStream::create(
      &v45,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "playerEnterScene",
      2695);
    v10 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
            &v45,
            (const char (*)[45])"[EnterScene] dest_scene_ptr is nullptr, uid:");
    val = Player::getUid(this);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, &val);
    common::milog::MiLogStream::~MiLogStream(&v45);
    v11 = -1;
  }
  else
  {
    std::vector<std::shared_ptr<Avatar>>::vector((std::vector<std::shared_ptr<Avatar>> *const)(v7 + 144));
    std::vector<std::shared_ptr<Avatar>>::vector((std::vector<std::shared_ptr<Avatar>> *const)(v7 + 208));
    *(_QWORD *)(v7 + 48) = 0LL;
    *(_QWORD *)(v7 + 56) = 0LL;
    std::shared_ptr<Scene>::shared_ptr((std::shared_ptr<Scene> *const)(v7 + 112), p_dest_scene_ptr);
    v12 = Player::initEnterSceneAvatar(
            this,
            (ScenePtr *)(v7 + 112),
            (std::vector<std::shared_ptr<Avatar>> *)(v7 + 208),
            (AvatarPtr *)(v7 + 48),
            (std::vector<std::shared_ptr<Avatar>> *)(v7 + 144)) != 0;
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v7 + 112));
    if ( v12 )
    {
      common::milog::MiLogStream::create(
        &v45,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/player.cpp",
        "playerEnterScene",
        2705);
      v13 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              &v45,
              (const char (*)[27])"initEnterSceneAvatar fails");
      operator<<(v13, this);
      common::milog::MiLogStream::~MiLogStream(&v45);
      v11 = -1;
    }
    else
    {
      std::dynamic_pointer_cast<DungeonScene,Scene>((const std::shared_ptr<Scene> *)(v7 + 80));
      v14 = 0;
      v16 = 0;
      if ( std::operator!=<DungeonScene>((const std::shared_ptr<DungeonScene> *)(v7 + 80), 0LL) )
      {
        DungeonComp = Player::getDungeonComp(this);
        std::shared_ptr<DungeonScene>::shared_ptr(
          (std::shared_ptr<DungeonScene> *const)(v7 + 112),
          (const std::shared_ptr<DungeonScene> *)(v7 + 80));
        v14 = 1;
        if ( PlayerDungeonComp::trySubDungeonTicket(DungeonComp, (DungeonScenePtr *)(v7 + 112)) )
          v16 = 1;
      }
      if ( v14 )
        std::shared_ptr<DungeonScene>::~shared_ptr((std::shared_ptr<DungeonScene> *const)(v7 + 112));
      if ( v16 )
      {
        common::milog::MiLogStream::create(
          &v45,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/player.cpp",
          "playerEnterScene",
          2713);
        v17 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
                &v45,
                (const char (*)[39])"trySubDungeonTicket fails, dungeon_id:");
        v18 = std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 80));
        val = DungeonScene::getDungeonId(v18);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, &val);
        common::milog::MiLogStream::~MiLogStream(&v45);
        v11 = 1125;
      }
      else
      {
        v19 = (unsigned int)std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_dest_scene_ptr);
        if ( *(_BYTE *)(((unsigned __int64)&this->uid_ >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&this->uid_ >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&this->uid_);
        }
        Scene::findPlayer((const Scene *const)(v7 + 112), v19);
        is_reenter = std::operator!=<Player>(0LL, (const std::shared_ptr<Player> *)(v7 + 112));
        std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v7 + 112));
        v20 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_dest_scene_ptr);
        if ( *(_BYTE *)(((unsigned __int64)v20 >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v21 = (unsigned __int64)(v20->_vptr_DescribalBase + 10);
        if ( *(_BYTE *)((v21 >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v22 = *(unsigned int (__fastcall **)(std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, Player *const, const Vector3 *, const Vector3 *, bool, unsigned __int64, unsigned __int64))v21;
        std::shared_ptr<Avatar>::shared_ptr(
          (std::shared_ptr<Avatar> *const)(v7 + 112),
          (const std::shared_ptr<Avatar> *)(v7 + 48));
        v23 = v22(v20, this, pos, rot, is_relogin, v7 + 208, v7 + 112) != 0;
        std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v7 + 112));
        if ( v23 )
        {
          common::milog::MiLogStream::create(
            &v45,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/player.cpp",
            "playerEnterScene",
            2720);
          v24 = common::milog::MiLogStream::operator<<<char [54],(char *[54])0>(
                  &v45,
                  (const char (*)[54])"[EnterScene] dest_scene_ptr->playerEnter failed, uid:");
          val = Player::getUid(this);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v24, &val);
          common::milog::MiLogStream::~MiLogStream(&v45);
          v11 = -1;
        }
        else
        {
          std::shared_ptr<Scene>::shared_ptr((std::shared_ptr<Scene> *const)(v7 + 112), p_dest_scene_ptr);
          Player::onEnterScene(this, (ScenePtr *)(v7 + 112), is_reenter);
          std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v7 + 112));
          __for_range = (std::vector<std::shared_ptr<Avatar>> *)(v7 + 144);
          __for_begin._M_current = std::vector<std::shared_ptr<Avatar>>::begin((std::vector<std::shared_ptr<Avatar>> *const)(v7 + 144))._M_current;
          __for_end._M_current = std::vector<std::shared_ptr<Avatar>>::end((std::vector<std::shared_ptr<Avatar>> *const)(v7 + 144))._M_current;
          while ( __gnu_cxx::operator!=<std::shared_ptr<Avatar> *,std::vector<std::shared_ptr<Avatar>>>(
                    &__for_begin,
                    &__for_end) )
          {
            v25 = __gnu_cxx::__normal_iterator<std::shared_ptr<Avatar> *,std::vector<std::shared_ptr<Avatar>>>::operator*(&__for_begin);
            std::shared_ptr<Avatar>::shared_ptr((std::shared_ptr<Avatar> *const)(v7 + 112), v25);
            v26 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 112));
            FightPropComp = Creature::getFightPropComp(v26);
            FightPropComp::notifyProp(FightPropComp, FIGHT_PROP_CUR_HP);
            proto::AvatarLifeStateChangeNotify::AvatarLifeStateChangeNotify((proto::AvatarLifeStateChangeNotify *const)(v7 + 272));
            v28 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 112));
            Guid = Avatar::getGuid(v28);
            proto::AvatarLifeStateChangeNotify::set_avatar_guid(
              (proto::AvatarLifeStateChangeNotify *const)(v7 + 272),
              Guid);
            v30 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 112));
            LifeState = Creature::getLifeState(v30);
            proto::AvatarLifeStateChangeNotify::set_life_state(
              (proto::AvatarLifeStateChangeNotify *const)(v7 + 272),
              LifeState);
            server_buff_list = proto::AvatarLifeStateChangeNotify::mutable_server_buff_list((proto::AvatarLifeStateChangeNotify *const)(v7 + 272));
            v32 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 112));
            BuffComp = Avatar::getBuffComp(v32);
            BuffComp::toClient(BuffComp, server_buff_list);
            Player::sendProto(this, (const google::protobuf::Message *)(v7 + 272));
            proto::AvatarLifeStateChangeNotify::~AvatarLifeStateChangeNotify((proto::AvatarLifeStateChangeNotify *const)(v7 + 272));
            std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v7 + 112));
            __gnu_cxx::__normal_iterator<std::shared_ptr<Avatar> *,std::vector<std::shared_ptr<Avatar>>>::operator++(&__for_begin);
          }
          v34 = Player::getDungeonComp(this);
          PlayerDungeonComp::updateLastDungeonId(v34);
          SceneComp = Player::getSceneComp(this);
          PlayerSceneComp::notifyAllMarkPoint(SceneComp);
          v11 = 0;
        }
      }
      std::shared_ptr<DungeonScene>::~shared_ptr((std::shared_ptr<DungeonScene> *const)(v7 + 80));
    }
    std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v7 + 48));
    std::vector<std::shared_ptr<Avatar>>::~vector((std::vector<std::shared_ptr<Avatar>> *const)(v7 + 208));
    std::vector<std::shared_ptr<Avatar>>::~vector((std::vector<std::shared_ptr<Avatar>> *const)(v7 + 144));
  }
  result = v11;
  if ( v46 == (char *)v7 )
  {
    *(_QWORD *)((v7 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v7 >> 3) + 0x7FFF8020) = 0;
    *(_DWORD *)((v7 >> 3) + 0x7FFF802C) = 0;
  }
  else
  {
    *(_QWORD *)v7 = 1172321806LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2746: range 00000000171480E4-0000000017148FAE
int32_t __cdecl Player::enterSceneDone(Player *const this, const proto::EnterSceneDoneReq *req)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  google::protobuf::uint32 v5; // r14d
  PlayerSceneComp *SceneComp; // rax
  common::milog::MiLogStream *v7; // rbx
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rbx
  PlayerSceneComp *v10; // rax
  int32_t v11; // r14d
  common::milog::MiLogStream *v12; // rbx
  common::milog::MiLogStream *v13; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  common::milog::MiLogStream *v15; // r14
  unsigned __int64 DestPos; // rax
  unsigned __int64 DestRot; // rax
  __int64 v18; // rsi
  common::milog::MiLogStream *v19; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  common::milog::MiLogStream *v21; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rdx
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v25; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v26; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v27; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v28; // rax
  unsigned __int64 v29; // rdx
  Entity *v30; // rax
  Avatar *v31; // rax
  Avatar *v32; // rax
  Avatar *v33; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v34; // r14
  unsigned __int64 v35; // rax
  unsigned int (__fastcall *v36)(std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, VisionContext *); // r15
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v37; // rax
  common::milog::MiLogStream *v38; // r14
  uint32_t v39; // r14d
  common::milog::MiLogStream *v40; // r14
  PlayerViewMgr *v41; // rax
  Scene *v42; // rax
  SceneBlockGroupComp *BlockGroupComp; // rdx
  Scene *v44; // rax
  SceneBlockGroupComp *v45; // rax
  Scene *v46; // rax
  SceneBlockGroupComp *v47; // rax
  unsigned __int64 v48; // rdx
  char v49; // al
  google::protobuf::uint32 v50; // eax
  common::milog::MiLogStream *v51; // r14
  int32_t result; // eax
  unsigned int val; // [rsp+2Ch] [rbp-174h] BYREF
  unsigned int Uid; // [rsp+30h] [rbp-170h] BYREF
  proto::VisionType vision_type; // [rsp+34h] [rbp-16Ch]
  PlayerSceneComp *scene_comp; // [rsp+38h] [rbp-168h]
  VisionContext v58; // [rsp+44h] [rbp-15Ch] BYREF
  common::milog::MiLogStream v59; // [rsp+50h] [rbp-150h] BYREF
  char v60[304]; // [rsp+70h] [rbp-130h] BYREF

  v2 = (unsigned __int64)v60;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(256LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "6 32 12 13 dest_pos:2773 64 12 13 dest_rot:2774 96 16 18 cur_scene_ptr:2758 128 16 19 cur_avatar"
                        "_ptr:2779 160 16 24 player_view_mgr_ptr:2808 192 32 8 rsp:2832";
  *(_QWORD *)(v2 + 16) = Player::enterSceneDone;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219020288;
  v4[536862722] = -219020288;
  v4[536862723] = -219021312;
  v4[536862724] = -219021312;
  v4[536862725] = -219021312;
  v4[536862727] = -202116109;
  v5 = proto::EnterSceneDoneReq::enter_scene_token(req);
  SceneComp = Player::getSceneComp(this);
  if ( v5 == PlayerSceneComp::getEnterSceneToken(SceneComp) )
  {
    scene_comp = Player::getSceneComp(this);
    if ( PlayerSceneComp::getEnterSceneState(scene_comp) == ENTER_SCENE_INIT )
    {
      PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v2 + 96));
      if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v2 + 96), 0LL) )
      {
        common::milog::MiLogStream::create(
          &v59,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/player.cpp",
          "enterSceneDone",
          2761);
        v13 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                &v59,
                (const char (*)[29])"getCurScene is nullptr, uid:");
        Uid = Player::getUid(this);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, &Uid);
        common::milog::MiLogStream::~MiLogStream(&v59);
        v11 = -1;
      }
      else
      {
        v14 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
        if ( !Scene::getIsStarted(v14) )
        {
          common::milog::MiLogStream::create(
            &v59,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/player.cpp",
            "enterSceneDone",
            2767);
          v15 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(&v59, (const char (*)[32])off_26033CE0);
          Uid = Player::getUid(this);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, &Uid);
          common::milog::MiLogStream::~MiLogStream(&v59);
          v11 = -1;
        }
        else
        {
          vision_type = PlayerSceneComp::getDestVisionType(scene_comp);
          DestPos = (unsigned __int64)PlayerSceneComp::getDestPos(scene_comp);
          if ( (char)(DestPos & 7) >= *(_BYTE *)((DestPos >> 3) + 0x7FFF8000)
            && *(_BYTE *)((DestPos >> 3) + 0x7FFF8000) != 0
            || *(_BYTE *)(((DestPos + 11) >> 3) + 0x7FFF8000) != 0
            && (char)((DestPos + 11) & 7) >= *(_BYTE *)(((DestPos + 11) >> 3) + 0x7FFF8000) )
          {
            DestPos = __asan_report_load_n(DestPos, 12LL);
          }
          *(_QWORD *)(v2 + 32) = *(_QWORD *)DestPos;
          *(_DWORD *)(v2 + 40) = *(_DWORD *)(DestPos + 8);
          DestRot = (unsigned __int64)PlayerSceneComp::getDestRot(scene_comp);
          v18 = ((_DWORD)DestRot + 11) & 7;
          if ( (char)(DestRot & 7) >= *(_BYTE *)((DestRot >> 3) + 0x7FFF8000)
            && *(_BYTE *)((DestRot >> 3) + 0x7FFF8000) != 0
            || *(_BYTE *)(((DestRot + 11) >> 3) + 0x7FFF8000) != 0
            && (char)((DestRot + 11) & 7) >= *(_BYTE *)(((DestRot + 11) >> 3) + 0x7FFF8000) )
          {
            v18 = 12LL;
            DestRot = __asan_report_load_n(DestRot, 12LL);
          }
          *(_QWORD *)(v2 + 64) = *(_QWORD *)DestRot;
          *(_DWORD *)(v2 + 72) = *(_DWORD *)(DestRot + 8);
          if ( *(char *)(((unsigned __int64)&this->is_relogin_ >> 3) + 0x7FFF8000) < 0 )
            __asan_report_store1(&this->is_relogin_, v18, &this->is_relogin_);
          this->is_relogin_ = 0;
          Player::getCurAvatar((Player *const)(v2 + 128));
          if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v2 + 128), 0LL) )
          {
            common::milog::MiLogStream::create(
              &v59,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/player.cpp",
              "enterSceneDone",
              2782);
            v19 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
                    &v59,
                    (const char (*)[39])"[EnterScene] getCurAvatar failed, uid:");
            Uid = Player::getUid(this);
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, &Uid);
            common::milog::MiLogStream::~MiLogStream(&v59);
            v11 = -1;
          }
          else
          {
            v20 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 128));
            if ( Creature::getLifeState(v20) == LIFE_DEAD )
            {
              common::milog::MiLogStream::create(
                &v59,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/player.cpp",
                "enterSceneDone",
                2788);
              v21 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                      &v59,
                      (const char (*)[32])off_26033D20);
              v22 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 128));
              v23 = common::milog::MiLogStream::operator<<<Avatar,(Avatar*)0>(v21, v22);
              v24 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v23, (const char (*)[9])" player:");
              operator<<(v24, this);
              common::milog::MiLogStream::~MiLogStream(&v59);
              v25 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 128));
              Creature::setLifeState(v25, LIFE_ALIVE);
              v26 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 128));
              if ( Creature::getCurHp(v26) == 0.0 )
              {
                v27 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 128));
                Creature::setCurHp(v27, 1.0, 0);
              }
            }
            v28 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 128));
            if ( *(_BYTE *)(((unsigned __int64)v28 >> 3) + 0x7FFF8000) )
              __asan_report_load8();
            v29 = *(_QWORD *)v28->baseclass_0 + 80LL;
            if ( *(_BYTE *)((v29 >> 3) + 0x7FFF8000) )
              __asan_report_load8();
            (*(void (__fastcall **)(std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, unsigned __int64))v29)(
              v28,
              v2 + 32);
            v30 = (Entity *)std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 128));
            Entity::setRotation(v30, (const Vector3 *)(v2 + 64));
            v31 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 128));
            Avatar::setLastValidPos(v31, (const Vector3 *)(v2 + 32));
            v32 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 128));
            Avatar::setLastValidRot(v32, (const Vector3 *)(v2 + 64));
            v33 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 128));
            Avatar::clearSpeed(v33);
            v34 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
            if ( *(_BYTE *)(((unsigned __int64)v34 >> 3) + 0x7FFF8000) )
              __asan_report_load8();
            v35 = (unsigned __int64)(v34->_vptr_DescribalBase + 13);
            if ( *(_BYTE *)((v35 >> 3) + 0x7FFF8000) )
              __asan_report_load8();
            v36 = *(unsigned int (__fastcall **)(std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, VisionContext *))v35;
            VisionContext::VisionContext(&v58, vision_type);
            v37 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 128));
            if ( v36(v34, v37, &v58) )
            {
              common::milog::MiLogStream::create(
                &v59,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/player.cpp",
                "enterSceneDone",
                2804);
              v38 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
                      &v59,
                      (const char (*)[39])"[EnterScene] entityAppear failed, uid:");
              Uid = Player::getUid(this);
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v38, &Uid);
              common::milog::MiLogStream::~MiLogStream(&v59);
              v11 = -1;
            }
            else
            {
              v39 = (unsigned int)std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
              Player::getUid(this);
              Scene::findPlayerViewMgr((const Scene *const)(v2 + 160), v39);
              if ( std::operator==<PlayerViewMgr>((const std::shared_ptr<PlayerViewMgr> *)(v2 + 160), 0LL) )
              {
                common::milog::MiLogStream::create(
                  &v59,
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/player/player.cpp",
                  "enterSceneDone",
                  2811);
                v40 = common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
                        &v59,
                        (const char (*)[47])"[EnterScene] player_view_mgr_ptr is null, uid:");
                Uid = Player::getUid(this);
                common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v40, &Uid);
                common::milog::MiLogStream::~MiLogStream(&v59);
                v11 = -1;
              }
              else
              {
                v41 = std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerViewMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 160));
                PlayerViewMgr::notifyEyePointState(v41);
                PlayerSceneComp::setEnterSceneState(scene_comp, ENTER_SCENE_DONE);
                PlayerSceneComp::notifyCurrentWeather(scene_comp);
                v42 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
                BlockGroupComp = Scene::getBlockGroupComp(v42);
                if ( SceneBlockGroupComp::notifyGroupSuiteToClient(BlockGroupComp, this) )
                {
                  common::milog::MiLogStream::create(
                    &v59,
                    &common::milog::MiLogDefault::default_log_obj_,
                    3u,
                    "./src/player/player.cpp",
                    "enterSceneDone",
                    2822);
                  common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                    &v59,
                    (const char (*)[32])"notifyGroupSuiteToClient failed");
                  common::milog::MiLogStream::~MiLogStream(&v59);
                }
                v44 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
                v45 = Scene::getBlockGroupComp(v44);
                if ( !SceneBlockGroupComp::getIsNeedReloadGroup(v45) )
                  goto LABEL_44;
                v46 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
                v47 = Scene::getBlockGroupComp(v46);
                if ( *(_BYTE *)(((unsigned __int64)v47 >> 3) + 0x7FFF8000) )
                  __asan_report_load8();
                v48 = (unsigned __int64)(v47->_vptr_SceneCompBase + 36);
                if ( *(_BYTE *)((v48 >> 3) + 0x7FFF8000) )
                  __asan_report_load8();
                if ( (*(unsigned int (__fastcall **)(SceneBlockGroupComp *))v48)(v47) )
                  v49 = 1;
                else
LABEL_44:
                  v49 = 0;
                if ( v49 )
                {
                  common::milog::MiLogStream::create(
                    &v59,
                    &common::milog::MiLogDefault::default_log_obj_,
                    3u,
                    "./src/player/player.cpp",
                    "enterSceneDone",
                    2828);
                  common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
                    &v59,
                    (const char (*)[35])"enterSceneDone reloadGroups failed");
                  common::milog::MiLogStream::~MiLogStream(&v59);
                }
                proto::EnterSceneDoneRsp::EnterSceneDoneRsp((proto::EnterSceneDoneRsp *const)(v2 + 192));
                proto::EnterSceneDoneRsp::set_retcode((proto::EnterSceneDoneRsp *const)(v2 + 192), 0);
                v50 = proto::EnterSceneDoneReq::enter_scene_token(req);
                proto::EnterSceneDoneRsp::set_enter_scene_token((proto::EnterSceneDoneRsp *const)(v2 + 192), v50);
                Player::sendProto(this, (const google::protobuf::Message *)(v2 + 192));
                common::milog::MiLogStream::create(
                  &v59,
                  &common::milog::MiLogDefault::default_log_obj_,
                  2u,
                  "./src/player/player.cpp",
                  "enterSceneDone",
                  2837);
                v51 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
                        &v59,
                        (const char (*)[39])"[EnterScene] enterSceneDone succ, uid:");
                Uid = Player::getUid(this);
                common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v51, &Uid);
                common::milog::MiLogStream::~MiLogStream(&v59);
                v11 = 0;
                proto::EnterSceneDoneRsp::~EnterSceneDoneRsp((proto::EnterSceneDoneRsp *const)(v2 + 192));
              }
              std::shared_ptr<PlayerViewMgr>::~shared_ptr((std::shared_ptr<PlayerViewMgr> *const)(v2 + 160));
            }
          }
          std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v2 + 128));
        }
      }
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v2 + 96));
    }
    else
    {
      common::milog::MiLogStream::create(
        &v59,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/player.cpp",
        "enterSceneDone",
        2755);
      v12 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
              &v59,
              (const char (*)[44])"EnterSceneState is not EnterSceneInit, uid:");
      Uid = Player::getUid(this);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, &Uid);
      common::milog::MiLogStream::~MiLogStream(&v59);
      v11 = -1;
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v59,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/player.cpp",
      "enterSceneDone",
      2749);
    v7 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
           &v59,
           (const char (*)[45])"[ENTER_SCENE] token not match, client_token:");
    val = proto::EnterSceneDoneReq::enter_scene_token(req);
    v8 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, &val);
    v9 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v8, (const char (*)[15])" server_token:");
    v10 = Player::getSceneComp(this);
    Uid = PlayerSceneComp::getEnterSceneToken(v10);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, &Uid);
    common::milog::MiLogStream::~MiLogStream(&v59);
    v11 = 521;
  }
  result = v11;
  if ( v60 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2842: range 0000000017148FB0-0000000017149B45
int32_t __cdecl Player::postEnterScene(Player *const this, const proto::PostEnterSceneReq *req)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  google::protobuf::uint32 v5; // r14d
  PlayerSceneComp *SceneComp; // rax
  common::milog::MiLogStream *v7; // r14
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // r14
  PlayerSceneComp *v10; // rax
  int32_t v11; // r14d
  common::milog::MiLogStream *v12; // r14
  common::milog::MiLogStream *v13; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  common::milog::MiLogStream *v15; // r14
  PlayerBasicComp *BasicComp; // rax
  PlayerMpComp *MpComp; // rax
  common::milog::MiLogStream *v18; // r14
  PlayerQuestComp *QuestComp; // rax
  PlayerAvatarComp *AvatarComp; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  Player *v23; // rax
  PlayerEventComp *EventComp; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v25; // rax
  unsigned __int64 v26; // rdx
  void (__fastcall *v27)(std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, _QWORD); // r8
  Scene *v28; // rax
  SceneMultistagePlayComp *MultistagePlayComp; // rdx
  Scene *v30; // rax
  SceneGalleryComp *GalleryComp; // rdx
  Scene *v32; // rax
  SceneTransferGuardComp *TransferGuardComp; // rdx
  google::protobuf::uint32 v34; // eax
  PlayerQuestComp *v35; // rax
  uint32_t Uid; // r14d
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v37; // rax
  uint32_t v39; // eax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v40; // rax
  uint32_t SceneId; // eax
  Player *v42; // rax
  World *v43; // rdx
  int32_t result; // eax
  unsigned int val; // [rsp+14h] [rbp-17Ch] BYREF
  unsigned int __args_0; // [rsp+18h] [rbp-178h] BYREF
  proto::EnterType last_enter_type; // [rsp+1Ch] [rbp-174h]
  PlayerSceneComp *scene_comp; // [rsp+20h] [rbp-170h]
  PlayerAvatarComp *avatar_comp; // [rsp+28h] [rbp-168h]
  std::shared_ptr<PlayerEnterSceneEvent> __r; // [rsp+30h] [rbp-160h] BYREF
  char v51[336]; // [rsp+40h] [rbp-150h] BYREF

  v2 = (unsigned __int64)v51;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(288LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "6 32 16 18 cur_scene_ptr:2854 64 16 21 owner_player_ptr:2891 96 16 14 event_ptr:2895 128 16 18 c"
                        "ur_world_ptr:2930 160 32 8 rsp:2912 224 32 11 notify:2923";
  *(_QWORD *)(v2 + 16) = Player::postEnterScene;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862724] = -219021312;
  v4[536862726] = -218959118;
  v4[536862728] = -202116109;
  v5 = proto::PostEnterSceneReq::enter_scene_token(req);
  SceneComp = Player::getSceneComp(this);
  if ( v5 == PlayerSceneComp::getEnterSceneToken(SceneComp) )
  {
    scene_comp = Player::getSceneComp(this);
    if ( PlayerSceneComp::getEnterSceneState(scene_comp) == ENTER_SCENE_DONE )
    {
      PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v2 + 32));
      if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v2 + 32), 0LL) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 224),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/player.cpp",
          "postEnterScene",
          2857);
        v13 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                (common::milog::MiLogStream *const)(v2 + 224),
                (const char (*)[29])"getCurScene is nullptr, uid:");
        __args_0 = Player::getUid(this);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, &__args_0);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 224));
        v11 = -1;
      }
      else
      {
        v14 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
        if ( !Scene::getIsStarted(v14) )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 224),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/player.cpp",
            "postEnterScene",
            2863);
          v15 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                  (common::milog::MiLogStream *const)(v2 + 224),
                  (const char (*)[32])off_26033CE0);
          __args_0 = Player::getUid(this);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, &__args_0);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 224));
          v11 = -1;
        }
        else
        {
          last_enter_type = PlayerSceneComp::getDestEnterType(scene_comp);
          Player::clearDestination(this);
          PlayerSceneComp::setEnterSceneState(scene_comp, ENTER_SCENE_POST);
          BasicComp = Player::getBasicComp(this);
          PlayerBasicComp::setIsInTransfer(BasicComp, 0);
          MpComp = Player::getMpComp(this);
          PlayerMpComp::refreshMpModeAvailability(MpComp);
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 224),
            &common::milog::MiLogDefault::default_log_obj_,
            2u,
            "./src/player/player.cpp",
            "postEnterScene",
            2877);
          v18 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
                  (common::milog::MiLogStream *const)(v2 + 224),
                  (const char (*)[39])"[EnterScene] postEnterScene succ, uid:");
          __args_0 = Player::getUid(this);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, &__args_0);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 224));
          QuestComp = Player::getQuestComp(this);
          PlayerQuestComp::tryNotifyAllBeginChapter(QuestComp);
          AvatarComp = Player::getAvatarComp(this);
          PlayerAvatarComp::tryNotifyUnfinishedCombatEndList(AvatarComp);
          avatar_comp = Player::getAvatarComp(this);
          if ( PlayerAvatarComp::getIsAllDieEnterScene(avatar_comp) )
          {
            PlayerAvatarComp::setIsAllDieEnterScene(avatar_comp, 0);
            PlayerAvatarComp::dieInvincible(avatar_comp);
          }
          std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
          Scene::getOwnPlayer((const Scene *const)(v2 + 64));
          if ( std::operator!=<Player>((const std::shared_ptr<Player> *)(v2 + 64), 0LL) )
          {
            __args_0 = Player::getUid(this);
            v21 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
            val = Scene::getSceneId(v21);
            common::tools::perf::make_shared<PlayerEnterSceneEvent,unsigned int,unsigned int>(
              (unsigned int *)&__r,
              &val,
              &__args_0,
              &val);
            std::shared_ptr<BaseEvent>::shared_ptr<PlayerEnterSceneEvent,void>(
              (std::shared_ptr<BaseEvent> *const)(v2 + 96),
              &__r);
            std::shared_ptr<PlayerEnterSceneEvent>::~shared_ptr(&__r);
            if ( std::operator!=<BaseEvent>((const std::shared_ptr<BaseEvent> *)(v2 + 96), 0LL)
              && std::operator!=<Player>((const std::shared_ptr<Player> *)(v2 + 64), 0LL) )
            {
              v23 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
              EventComp = Player::getEventComp(v23);
              std::shared_ptr<BaseEvent>::shared_ptr(
                (std::shared_ptr<BaseEvent> *const)(v2 + 128),
                (const std::shared_ptr<BaseEvent> *)(v2 + 96));
              PlayerEventComp::notifyEvent(EventComp, (BaseEventPtr *)(v2 + 128));
              std::shared_ptr<BaseEvent>::~shared_ptr((std::shared_ptr<BaseEvent> *const)(v2 + 128));
            }
            std::shared_ptr<BaseEvent>::~shared_ptr((std::shared_ptr<BaseEvent> *const)(v2 + 96));
          }
          std::shared_ptr<Scene>::shared_ptr(
            (std::shared_ptr<Scene> *const)(v2 + 128),
            (const std::shared_ptr<Scene> *)(v2 + 32));
          Player::triggerEnterSceneEvent(this, (ScenePtr *)(v2 + 128), last_enter_type);
          std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v2 + 128));
          v25 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
          if ( *(_BYTE *)(((unsigned __int64)v25 >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          v26 = (unsigned __int64)(v25->_vptr_DescribalBase + 60);
          if ( *(_BYTE *)((v26 >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          v27 = *(void (__fastcall **)(std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, _QWORD))v26;
          if ( *(_BYTE *)(((unsigned __int64)&this->uid_ >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&this->uid_ >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&this->uid_);
          }
          v27(v25, this->uid_);
          v28 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
          MultistagePlayComp = Scene::getMultistagePlayComp(v28);
          SceneMultistagePlayComp::onPostEnterScene(MultistagePlayComp, this);
          v30 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
          GalleryComp = Scene::getGalleryComp(v30);
          SceneGalleryComp::onPlayerPostEnterScene(GalleryComp, this);
          v32 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
          TransferGuardComp = Scene::getTransferGuardComp(v32);
          SceneTransferGuardComp::onPlayerPostEnterScene(TransferGuardComp, this);
          proto::PostEnterSceneRsp::PostEnterSceneRsp((proto::PostEnterSceneRsp *const)(v2 + 160));
          proto::PostEnterSceneRsp::set_retcode((proto::PostEnterSceneRsp *const)(v2 + 160), 0);
          v34 = proto::PostEnterSceneReq::enter_scene_token(req);
          proto::PostEnterSceneRsp::set_enter_scene_token((proto::PostEnterSceneRsp *const)(v2 + 160), v34);
          Player::sendProto(this, (const google::protobuf::Message *)(v2 + 160));
          v35 = Player::getQuestComp(this);
          PlayerQuestComp::checkLeaveSceneRange(v35);
          if ( std::operator!=<Player>(0LL, (const std::shared_ptr<Player> *)(v2 + 64)) )
          {
            Uid = Player::getUid(this);
            v37 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
            if ( Uid != Player::getUid(v37) )
            {
              proto::GuestPostEnterSceneNotify::GuestPostEnterSceneNotify((proto::GuestPostEnterSceneNotify *const)(v2 + 224));
              v39 = Player::getUid(this);
              proto::GuestPostEnterSceneNotify::set_uid((proto::GuestPostEnterSceneNotify *const)(v2 + 224), v39);
              v40 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
              SceneId = Scene::getSceneId(v40);
              proto::GuestPostEnterSceneNotify::set_scene_id(
                (proto::GuestPostEnterSceneNotify *const)(v2 + 224),
                SceneId);
              v42 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
              Player::sendProto(v42, (const google::protobuf::Message *)(v2 + 224));
              proto::GuestPostEnterSceneNotify::~GuestPostEnterSceneNotify((proto::GuestPostEnterSceneNotify *const)(v2 + 224));
            }
          }
          PlayerSceneComp::getCurWorld((const PlayerSceneComp *const)(v2 + 128));
          if ( std::operator!=<World>(0LL, (const std::shared_ptr<World> *)(v2 + 128)) )
          {
            v43 = std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 128));
            World::notifySubChatChannel(v43, this);
          }
          v11 = 0;
          std::shared_ptr<World>::~shared_ptr((std::shared_ptr<World> *const)(v2 + 128));
          proto::PostEnterSceneRsp::~PostEnterSceneRsp((proto::PostEnterSceneRsp *const)(v2 + 160));
          std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v2 + 64));
        }
      }
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v2 + 32));
    }
    else
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 224),
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/player.cpp",
        "postEnterScene",
        2851);
      v12 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
              (common::milog::MiLogStream *const)(v2 + 224),
              (const char (*)[44])"EnterSceneState is not EnterSceneDone, uid:");
      __args_0 = Player::getUid(this);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, &__args_0);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 224));
      v11 = -1;
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 224),
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/player.cpp",
      "postEnterScene",
      2845);
    v7 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
           (common::milog::MiLogStream *const)(v2 + 224),
           (const char (*)[45])"[ENTER_SCENE] token not match, client_token:");
    val = proto::PostEnterSceneReq::enter_scene_token(req);
    v8 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, &val);
    v9 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v8, (const char (*)[15])" server_token:");
    v10 = Player::getSceneComp(this);
    __args_0 = PlayerSceneComp::getEnterSceneToken(v10);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, &__args_0);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 224));
    v11 = 521;
  }
  result = v11;
  if ( v51 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 2939: range 0000000017149B46-000000001714DB53
int32_t __cdecl Player::initEnterSceneAvatar(
        Player *const this,
        ScenePtr *p_dest_scene_ptr,
        std::vector<std::shared_ptr<Avatar>> *enter_scene_avatar_vec,
        AvatarPtr *appear_avatar_ptr,
        std::vector<std::shared_ptr<Avatar>> *refresh_avatar_vec)
{
  int32_t v5; // r13d
  __m128i v6; // xmm0
  unsigned __int64 v7; // r14
  __int64 v8; // rax
  _DWORD *v9; // r12
  common::milog::MiLogStream *v10; // r13
  SceneExcelConfigMgr *p_scene_config_mgr; // r15
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  uint32_t SceneId; // eax
  common::milog::MiLogStream *v14; // r13
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // r13
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  PlayerBasicComp *BasicComp; // rax
  unsigned int *v19; // rax
  unsigned int *v20; // rdx
  std::vector<std::shared_ptr<Avatar>>::size_type v21; // rcx
  common::milog::MiLogStream *v22; // r13
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // r13
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v25; // rax
  const std::shared_ptr<Avatar> *v26; // rdx
  DungeonScene *v27; // rax
  DungeonSceneTeam *DungeonSceneTeam; // rax
  DungeonScene *v30; // rax
  DungeonSceneTeam *v31; // r15
  uint32_t Uid; // eax
  common::milog::MiLogStream *v33; // r13
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // r13
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v36; // rax
  int v37; // r15d
  __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> >::reference v38; // rax
  common::milog::MiLogStream *v39; // rax
  common::milog::MiLogStream *v40; // rax
  common::milog::MiLogStream *v41; // r15
  common::milog::MiLogStream *v42; // r13
  common::milog::MiLogStream *v43; // rax
  common::milog::MiLogStream *v44; // r13
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v45; // rax
  std::shared_ptr<Avatar> *M_current; // r15
  std::vector<std::shared_ptr<Avatar>>::iterator v47; // rax
  const std::shared_ptr<Avatar> *v49; // rdx
  int v50; // r15d
  PlayerTowerComp *TowerComp; // r15
  PlayerTowerComp *v52; // r15
  common::milog::MiLogStream *v53; // rax
  common::milog::MiLogStream *v54; // rax
  common::milog::MiLogStream *v55; // rdx
  PlayerTrialAvatarComp *TrialAvatarComp; // r15
  PlayerTrialAvatarComp *v57; // r15
  common::milog::MiLogStream *v58; // rax
  common::milog::MiLogStream *v59; // rax
  common::milog::MiLogStream *v60; // rdx
  std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v61; // rax
  const std::function<int(DungeonScene&,std::vector<std::shared_ptr<Avatar>>&,std::shared_ptr<Avatar>&)> *DungeonInitEnterSceneAvatarCallback; // rax
  std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v64; // rax
  DungeonScene *v65; // rax
  common::milog::MiLogStream *v66; // rax
  common::milog::MiLogStream *v67; // rax
  common::milog::MiLogStream *v68; // rdx
  DungeonScene *v69; // rax
  std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v71; // rax
  unsigned __int64 n; // rax
  __int64 v73; // rdi
  uint32_t ActivityComp; // eax
  int v75; // r15d
  SumoActivity *v76; // r15
  DungeonScene *v77; // rax
  int v79; // r15d
  RoguelikeDungeonActivity *v80; // rax
  bool v81; // r15
  DungeonScene *v82; // rax
  int v84; // r15d
  PotionActivity *v85; // r15
  DungeonScene *v86; // rax
  int v88; // r15d
  CrystalLinkActivity *v89; // r15
  DungeonScene *v90; // rax
  int v92; // r15d
  RogueDiaryActivity *v93; // rax
  RogueDiaryRuntimeMgr *RuntimeMgr; // r15
  DungeonScene *v95; // rax
  int v97; // r15d
  std::__shared_ptr_access<InstableSprayActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v98; // r15
  DungeonScene *v99; // rax
  int v101; // r15d
  std::__shared_ptr_access<MuqadasPotionActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v102; // r15
  DungeonScene *v103; // rax
  int v105; // r15d
  FungusFighterActivity *v106; // r15
  DungeonScene *v107; // rax
  int v109; // r15d
  std::__shared_ptr_access<CharAmusementActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v110; // r15
  DungeonScene *v111; // rax
  int v113; // r15d
  BrickBreakerActivity *v114; // r15
  DungeonScene *v115; // rax
  int v117; // r15d
  std::__shared_ptr_access<DuelHeartActivity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v118; // r15
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v119; // rax
  unsigned __int64 v120; // rdx
  std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v121; // rax
  unsigned __int64 v122; // rdx
  char v123; // al
  char v124; // r15
  uint32_t v125; // eax
  PlayerMpComp *MpComp; // rax
  std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v127; // r15
  uint32_t v128; // eax
  const std::vector<long unsigned int> *QuestLockTeamAvatarGuidVec; // rax
  const std::vector<long unsigned int> *v130; // rax
  const std::vector<long unsigned int> *LockTeamAvatarGuidVec; // rax
  const std::vector<long unsigned int> *v132; // rax
  char v133; // r15
  uint32_t v134; // eax
  std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v135; // r15
  uint32_t v136; // eax
  __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> >::reference v137; // rax
  common::milog::MiLogStream *v138; // rax
  common::milog::MiLogStream *v139; // rax
  common::milog::MiLogStream *v140; // r15
  common::milog::MiLogStream *v141; // r13
  int v142; // r15d
  __int64 LastCurAvatarGuid; // rax
  std::shared_ptr<Avatar> *v144; // r15
  std::vector<std::shared_ptr<Avatar>>::iterator v145; // rax
  std::shared_ptr<Avatar> *v147; // r15
  std::vector<std::shared_ptr<Avatar>>::iterator v148; // rax
  const std::shared_ptr<Avatar> *v150; // rdx
  std::shared_ptr<Avatar> *v151; // r13
  std::shared_ptr<Avatar> *v152; // rcx
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v154; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v155; // rax
  const std::shared_ptr<Avatar> *v156; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v157; // rax
  int v158; // r13d
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v159; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v160; // rax
  proto::PlayerDieType DieType; // eax
  const std::shared_ptr<Avatar> *v162; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v163; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v164; // rax
  Avatar *v165; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v166; // rax
  const std::shared_ptr<Avatar> *v167; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v168; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v169; // rax
  const std::shared_ptr<Avatar> *v170; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v171; // rax
  Avatar *v172; // rax
  Avatar *v173; // rax
  std::shared_ptr<Avatar> *v174; // r13
  std::shared_ptr<Avatar> *v175; // rcx
  const std::shared_ptr<Avatar> *v176; // rdx
  std::shared_ptr<Avatar> *v177; // r13
  std::shared_ptr<Avatar> *v178; // rcx
  int32_t result; // eax
  std::string v181; // [rsp+0h] [rbp-340h]
  SceneTeam *v182; // [rsp+10h] [rbp-330h]
  bool v183; // [rsp+10h] [rbp-330h]
  SceneTeam *v184; // [rsp+10h] [rbp-330h]
  bool v185; // [rsp+10h] [rbp-330h]
  bool is_use_cur_avatar_team_with_temp_avatar; // [rsp+42h] [rbp-2FEh]
  bool is_in_persistent_dungeon; // [rsp+43h] [rbp-2FDh]
  unsigned int val; // [rsp+44h] [rbp-2FCh] BYREF
  proto::ChangHpReason reason; // [rsp+48h] [rbp-2F8h]
  unsigned int avatar_id; // [rsp+4Ch] [rbp-2F4h]
  float revive_hp_percent; // [rsp+50h] [rbp-2F0h]
  float sub_hp_percent; // [rsp+54h] [rbp-2ECh]
  float cur_stamina; // [rsp+58h] [rbp-2E8h]
  float max_stamina; // [rsp+5Ch] [rbp-2E4h]
  float min_stamina; // [rsp+60h] [rbp-2E0h]
  float add_stamina; // [rsp+64h] [rbp-2DCh]
  std::vector<unsigned int>::const_iterator __for_begin; // [rsp+68h] [rbp-2D8h] BYREF
  std::vector<unsigned int>::const_iterator __for_end; // [rsp+70h] [rbp-2D0h] BYREF
  const data::SceneExcelConfig *scene_excel_config_ptr; // [rsp+78h] [rbp-2C8h]
  PlayerAvatarComp *avatar_comp; // [rsp+80h] [rbp-2C0h]
  std::vector<long unsigned int> *__for_range_1; // [rsp+88h] [rbp-2B8h]
  AvatarTeam *avatar_team_ptr; // [rsp+90h] [rbp-2B0h]
  RogueLikeDungeonRuntimeMgr *runtime_mgr; // [rsp+98h] [rbp-2A8h]
  const DungeonInitEnterSceneAvatarCallback *init_enter_scene_avatar; // [rsp+A0h] [rbp-2A0h]
  std::vector<long unsigned int> *__for_range_0; // [rsp+A8h] [rbp-298h]
  const std::vector<unsigned int> *__for_range; // [rsp+B0h] [rbp-290h]
  std::vector<std::shared_ptr<Avatar>> *__for_range_2; // [rsp+B8h] [rbp-288h]
  std::vector<std::shared_ptr<Avatar>> *__for_range_3; // [rsp+C0h] [rbp-280h]
  std::vector<std::shared_ptr<Avatar>> *__for_range_4; // [rsp+C8h] [rbp-278h]
  std::vector<std::shared_ptr<Avatar>> *__for_range_5; // [rsp+D0h] [rbp-270h]
  PlayerBasicComp *basic_comp; // [rsp+D8h] [rbp-268h]
  std::shared_ptr<Avatar> __r; // [rsp+E0h] [rbp-260h] BYREF
  std::vector<long unsigned int> __x; // [rsp+F0h] [rbp-250h] BYREF
  StaminaChangeParam param; // [rsp+110h] [rbp-230h] BYREF
  common::milog::MiLogStream v218; // [rsp+130h] [rbp-210h] BYREF
  char v219[496]; // [rsp+150h] [rbp-1F0h] BYREF

  *(&v181._anon_0._M_allocated_capacity + 1) = (std::string::size_type)refresh_avatar_vec;
  v7 = (unsigned __int64)v219;
  v181._M_string_length = (std::string::size_type)v219;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v8 = __asan_stack_malloc_3(448LL);
    if ( v8 )
      v7 = v8;
  }
  *(_QWORD *)v7 = 1102416563LL;
  *(_QWORD *)(v7 + 8) = "11 32 1 11 holder:2954 48 4 8 ret:3022 64 8 16 avatar_guid:3239 96 16 15 config_ptr:2940 128 16 "
                        "27 dest_dungeon_scene_ptr:2984 160 16 19 scene_team_ptr:3215 192 16 22 formal_avatar_ptr:2962 22"
                        "4 16 15 avatar_ptr:3351 256 20 20 dungeon_context:3056 320 24 13 cur_team:3212 384 24 28 allow_p"
                        "layer_avatar_vec:2988";
  *(_QWORD *)(v7 + 16) = Player::initEnterSceneAvatar;
  v9 = (_DWORD *)(v7 >> 3);
  v9[536862720] = -235802127;
  v9[536862721] = -234556927;
  v9[536862722] = -218959360;
  v9[536862723] = -219021312;
  v9[536862724] = -219021312;
  v9[536862725] = -219021312;
  v9[536862726] = -219021312;
  v9[536862727] = -219021312;
  v9[536862728] = -234618880;
  v9[536862729] = -218959118;
  v9[536862730] = -234881024;
  v9[536862731] = -218959118;
  v9[536862732] = -218103808;
  v9[536862733] = -202116109;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v7 + 96));
  if ( std::operator==<Scene>(p_dest_scene_ptr, 0LL) )
  {
    common::milog::MiLogStream::create(
      &v218,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/player.cpp",
      "initEnterSceneAvatar",
      2943);
    v10 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
            &v218,
            (const char (*)[32])"dest_scene_ptr is nullptr, uid:");
    *(_DWORD *)(v7 + 48) = Player::getUid(this);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v7 + 48));
    common::milog::MiLogStream::~MiLogStream(&v218);
    v5 = -1;
    goto LABEL_314;
  }
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v7 + 224));
  p_scene_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 224))->design_config.txt_config_mgr.scene_config_mgr;
  v12 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_dest_scene_ptr);
  SceneId = Scene::getSceneId(v12);
  scene_excel_config_ptr = data::SceneExcelConfigMgrBase::findSceneExcelConfig(p_scene_config_mgr, SceneId);
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v7 + 224));
  if ( !scene_excel_config_ptr )
  {
    common::milog::MiLogStream::create(
      &v218,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/player.cpp",
      "initEnterSceneAvatar",
      2950);
    v14 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
            &v218,
            (const char (*)[34])"findSceneExcelConfig failed, uid:");
    val = Player::getUid(this);
    v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, &val);
    v16 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v15, (const char (*)[11])" scene_id:");
    v17 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_dest_scene_ptr);
    *(_DWORD *)(v7 + 48) = Scene::getSceneId(v17);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, (const unsigned int *)(v7 + 48));
    common::milog::MiLogStream::~MiLogStream(&v218);
    v5 = -1;
    goto LABEL_314;
  }
  BasicComp = Player::getBasicComp(this);
  PlayerBasicComp::getNextTransNo[abi:cxx11]((std::string *)&v218, BasicComp);
  StatLogUtils::ContextHolder::ContextHolder((StatLogUtils::ContextHolder *const)(v7 + 32), 0x45Au, v181);
  std::string::~string(&v218);
  avatar_comp = Player::getAvatarComp(this);
  if ( std::vector<unsigned int>::empty(&scene_excel_config_ptr->specified_avatar_list) )
  {
    std::dynamic_pointer_cast<DungeonScene,Scene>((const std::shared_ptr<Scene> *)(v7 + 128));
    if ( std::operator!=<DungeonScene>((const std::shared_ptr<DungeonScene> *)(v7 + 128), 0LL) )
    {
      v27 = std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 128));
      DungeonSceneTeam = DungeonScene::getDungeonSceneTeam(v27);
      if ( DungeonSceneTeam::isEnterByCandidateTeam(DungeonSceneTeam) )
      {
        v30 = std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 128));
        v31 = DungeonScene::getDungeonSceneTeam(v30);
        Uid = Player::getUid(this);
        DungeonSceneTeam::findCandidateTeamAvatarVec((std::vector<long unsigned int> *)(v7 + 384), v31, Uid);
        if ( std::vector<unsigned long>::empty((const std::vector<long unsigned int> *const)(v7 + 384)) )
        {
          common::milog::MiLogStream::create(
            &v218,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/player.cpp",
            "initEnterSceneAvatar",
            2991);
          v33 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
                  &v218,
                  (const char (*)[38])"allow player avatar empty player_uid:");
          val = Player::getUid(this);
          v34 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v33, &val);
          v35 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v34, (const char (*)[11])" scene_id:");
          v36 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_dest_scene_ptr);
          *(_DWORD *)(v7 + 48) = Scene::getSceneId(v36);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v35, (const unsigned int *)(v7 + 48));
          common::milog::MiLogStream::~MiLogStream(&v218);
          v5 = -1;
          v37 = 0;
        }
        else
        {
          __for_range_0 = (std::vector<long unsigned int> *)(v7 + 384);
          __for_begin._M_current = (const unsigned int *)std::vector<unsigned long>::begin((std::vector<long unsigned int> *const)(v7 + 384))._M_current;
          __for_end._M_current = (const unsigned int *)std::vector<unsigned long>::end((std::vector<long unsigned int> *const)(v7 + 384))._M_current;
          while ( __gnu_cxx::operator!=<unsigned long *,std::vector<unsigned long>>(
                    (const __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *)&__for_begin,
                    (const __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *)&__for_end) )
          {
            v38 = __gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator*((const __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *const)&__for_begin);
            if ( *(_BYTE *)(((unsigned __int64)v38 >> 3) + 0x7FFF8000) )
              *(double *)v6.m128i_i64 = __asan_report_load8();
            *(_QWORD *)(v7 + 64) = *v38;
            PlayerAvatarComp::findAvatar(
              (const PlayerAvatarComp *const)(v7 + 224),
              (uint64_t)avatar_comp,
              *(_QWORD *)(v7 + 64));
            if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v7 + 224), 0LL) )
            {
              common::milog::MiLogStream::create(
                &v218,
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/player/player.cpp",
                "initEnterSceneAvatar",
                3000);
              v39 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                      &v218,
                      (const char (*)[32])"findAvatar failed, avatar_guid:");
              v40 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                      v39,
                      (const unsigned __int64 *)(v7 + 64));
              v41 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v40, (const char (*)[6])" uid:");
              *(_DWORD *)(v7 + 48) = Player::getUid(this);
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v41,
                (const unsigned int *)(v7 + 48));
              common::milog::MiLogStream::~MiLogStream(&v218);
            }
            else
            {
              std::vector<std::shared_ptr<Avatar>>::push_back(
                enter_scene_avatar_vec,
                (const std::vector<std::shared_ptr<Avatar>>::value_type *)(v7 + 224));
            }
            std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v7 + 224));
            __gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator++((__gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *const)&__for_begin);
          }
          if ( std::vector<std::shared_ptr<Avatar>>::empty(enter_scene_avatar_vec) )
          {
            common::milog::MiLogStream::create(
              &v218,
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/player/player.cpp",
              "initEnterSceneAvatar",
              3007);
            v42 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
                    &v218,
                    (const char (*)[38])"enter_scene_avatar_vec is empty, uid:");
            val = Player::getUid(this);
            v43 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v42, &val);
            v44 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                    v43,
                    (const char (*)[12])" scene_id: ");
            v45 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_dest_scene_ptr);
            *(_DWORD *)(v7 + 48) = Scene::getSceneId(v45);
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v44, (const unsigned int *)(v7 + 48));
            common::milog::MiLogStream::~MiLogStream(&v218);
            v5 = -1;
            v37 = 0;
          }
          else
          {
            PlayerAvatarComp::getCurAvatar((const PlayerAvatarComp *const)(v7 + 224));
            if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v7 + 224), 0LL)
              || (__for_end._M_current = (const unsigned int *)std::vector<std::shared_ptr<Avatar>>::end(enter_scene_avatar_vec)._M_current,
                  M_current = std::vector<std::shared_ptr<Avatar>>::end(enter_scene_avatar_vec)._M_current,
                  v47._M_current = std::vector<std::shared_ptr<Avatar>>::begin(enter_scene_avatar_vec)._M_current,
                  __for_begin._M_current = (const unsigned int *)std::find<__gnu_cxx::__normal_iterator<std::shared_ptr<Avatar> *,std::vector<std::shared_ptr<Avatar>>>,std::shared_ptr<Avatar>>(
                                                                   v47,
                                                                   (__gnu_cxx::__normal_iterator<std::shared_ptr<Avatar>*,std::vector<std::shared_ptr<Avatar>> >)M_current,
                                                                   (const std::shared_ptr<Avatar> *)(v7 + 224))._M_current,
                  __gnu_cxx::operator==<std::shared_ptr<Avatar> *,std::vector<std::shared_ptr<Avatar>>>(
                    (const __gnu_cxx::__normal_iterator<std::shared_ptr<Avatar>*,std::vector<std::shared_ptr<Avatar>> > *)&__for_begin,
                    (const __gnu_cxx::__normal_iterator<std::shared_ptr<Avatar>*,std::vector<std::shared_ptr<Avatar>> > *)&__for_end)) )
            {
              v49 = std::vector<std::shared_ptr<Avatar>>::operator[](enter_scene_avatar_vec, 0LL);
              std::shared_ptr<Avatar>::operator=(appear_avatar_ptr, v49);
            }
            else
            {
              std::shared_ptr<Avatar>::operator=(appear_avatar_ptr, (const std::shared_ptr<Avatar> *)(v7 + 224));
            }
            std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v7 + 224));
            v37 = 1;
          }
        }
        std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v7 + 384));
        if ( v37 != 1 )
        {
          v50 = 0;
          goto LABEL_263;
        }
        goto LABEL_262;
      }
    }
    TowerComp = Player::getTowerComp(this);
    std::shared_ptr<Scene>::shared_ptr((std::shared_ptr<Scene> *const)(v7 + 224), p_dest_scene_ptr);
    LOBYTE(TowerComp) = PlayerTowerComp::isNeedSetTeamByTower(TowerComp, (ScenePtr *)(v7 + 224));
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v7 + 224));
    if ( (_BYTE)TowerComp )
    {
      v52 = Player::getTowerComp(this);
      std::shared_ptr<Scene>::shared_ptr((std::shared_ptr<Scene> *const)(v7 + 224), p_dest_scene_ptr);
      *(_DWORD *)(v7 + 48) = PlayerTowerComp::initEnterSceneAvatarByTower(
                               v52,
                               (ScenePtr *)(v7 + 224),
                               enter_scene_avatar_vec,
                               appear_avatar_ptr);
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v7 + 224));
      if ( *(_DWORD *)(v7 + 48) )
      {
        common::milog::MiLogStream::create(
          &v218,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/player.cpp",
          "initEnterSceneAvatar",
          3025);
        v53 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
                &v218,
                (const char (*)[39])"initEnterSceneAvatarByTower fail, ret:");
        v54 = common::milog::MiLogStream::operator<<<int,(int *)0>(v53, (const int *)(v7 + 48));
        v55 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v54, (const char (*)[9])" player:");
        operator<<(v55, this);
        common::milog::MiLogStream::~MiLogStream(&v218);
        v5 = *(_DWORD *)(v7 + 48);
        v50 = 0;
        goto LABEL_263;
      }
      goto LABEL_262;
    }
    TrialAvatarComp = Player::getTrialAvatarComp(this);
    std::shared_ptr<Scene>::shared_ptr((std::shared_ptr<Scene> *const)(v7 + 224), p_dest_scene_ptr);
    LOBYTE(TrialAvatarComp) = PlayerTrialAvatarComp::isTrialAvatarDungeon(TrialAvatarComp, (ScenePtr *)(v7 + 224));
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v7 + 224));
    if ( (_BYTE)TrialAvatarComp )
    {
      v57 = Player::getTrialAvatarComp(this);
      std::shared_ptr<Scene>::shared_ptr((std::shared_ptr<Scene> *const)(v7 + 224), p_dest_scene_ptr);
      *(_DWORD *)(v7 + 48) = PlayerTrialAvatarComp::initEnterSceneAvatar(
                               v57,
                               enter_scene_avatar_vec,
                               appear_avatar_ptr,
                               (ScenePtr *)(v7 + 224));
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v7 + 224));
      if ( *(_DWORD *)(v7 + 48) )
      {
        common::milog::MiLogStream::create(
          &v218,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/player.cpp",
          "initEnterSceneAvatar",
          3034);
        v58 = common::milog::MiLogStream::operator<<<char [53],(char *[53])0>(
                &v218,
                (const char (*)[53])"initEnterSceneAvatar by trial avatar comp fail, ret:");
        v59 = common::milog::MiLogStream::operator<<<int,(int *)0>(v58, (const int *)(v7 + 48));
        v60 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v59, (const char (*)[9])" player:");
        operator<<(v60, this);
        common::milog::MiLogStream::~MiLogStream(&v218);
        v5 = *(_DWORD *)(v7 + 48);
        v50 = 0;
        goto LABEL_263;
      }
      goto LABEL_262;
    }
    if ( std::operator!=<DungeonScene>((const std::shared_ptr<DungeonScene> *)(v7 + 128), 0LL) )
    {
      v61 = std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 128));
      DungeonInitEnterSceneAvatarCallback = DungeonScene::getDungeonInitEnterSceneAvatarCallback(v61);
      if ( std::function<int ()(DungeonScene &,std::vector<std::shared_ptr<Avatar>> &,std::shared_ptr<Avatar>&)>::operator bool(DungeonInitEnterSceneAvatarCallback) )
      {
        v64 = std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 128));
        init_enter_scene_avatar = DungeonScene::getDungeonInitEnterSceneAvatarCallback(v64);
        v65 = std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 128));
        *(_DWORD *)(v7 + 48) = std::function<int ()(DungeonScene &,std::vector<std::shared_ptr<Avatar>> &,std::shared_ptr<Avatar>&)>::operator()(
                                 init_enter_scene_avatar,
                                 v65,
                                 enter_scene_avatar_vec,
                                 appear_avatar_ptr);
        if ( *(_DWORD *)(v7 + 48) )
        {
          common::milog::MiLogStream::create(
            &v218,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/player.cpp",
            "initEnterSceneAvatar",
            3044);
          v66 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
                  &v218,
                  (const char (*)[44])"init_enter_scene_avatar_callback fail, ret:");
          v67 = common::milog::MiLogStream::operator<<<int,(int *)0>(v66, (const int *)(v7 + 48));
          v68 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v67, (const char (*)[9])" player:");
          operator<<(v68, this);
          common::milog::MiLogStream::~MiLogStream(&v218);
          v5 = *(_DWORD *)(v7 + 48);
          v50 = 0;
          goto LABEL_263;
        }
        goto LABEL_262;
      }
    }
    if ( std::operator!=<DungeonScene>((const std::shared_ptr<DungeonScene> *)(v7 + 128), 0LL)
      && (v69 = std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 128)),
          DungeonScene::isEnterBySumoActivity(v69)) )
    {
      v71 = std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 128));
      DungeonScene::getDungeonExtraData<SumoDungeonContext>((std::optional<SumoDungeonContext> *)(v7 + 384), v71);
      if ( !std::optional<SumoDungeonContext>::has_value((const std::optional<SumoDungeonContext> *const)(v7 + 384)) )
      {
        common::milog::MiLogStream::create(
          &v218,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/player.cpp",
          "initEnterSceneAvatar",
          3053);
        common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
          &v218,
          (const char (*)[34])"Sumo dungeon context has no value");
        common::milog::MiLogStream::~MiLogStream(&v218);
        v5 = -1;
LABEL_78:
        v50 = 0;
        goto LABEL_263;
      }
      n = (unsigned __int64)std::optional<SumoDungeonContext>::value((std::optional<SumoDungeonContext> *const)(v7 + 384));
      if ( (char)(n & 7) >= *(_BYTE *)((n >> 3) + 0x7FFF8000) && *(_BYTE *)((n >> 3) + 0x7FFF8000) != 0
        || *(_BYTE *)(((n + 19) >> 3) + 0x7FFF8000) != 0
        && (char)((n + 19) & 7) >= *(_BYTE *)(((n + 19) >> 3) + 0x7FFF8000) )
      {
        n = __asan_report_load_n(n, 20LL);
      }
      v73 = *(_QWORD *)(n + 8);
      *(_QWORD *)(v7 + 256) = *(_QWORD *)n;
      *(_QWORD *)(v7 + 264) = v73;
      *(_DWORD *)(v7 + 272) = *(_DWORD *)(n + 16);
      ActivityComp = (unsigned int)Player::getActivityComp(this);
      PlayerActivityComp::findActivity<SumoActivity>((PlayerActivityComp *const)(v7 + 192), ActivityComp);
      if ( std::operator==<SumoActivity>((const std::shared_ptr<SumoActivity> *)(v7 + 192), 0LL) )
      {
        common::milog::MiLogStream::create(
          &v218,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/player.cpp",
          "initEnterSceneAvatar",
          3060);
        common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
          &v218,
          (const char (*)[24])"sumo activity not found");
        common::milog::MiLogStream::~MiLogStream(&v218);
        v5 = -1;
        v75 = 0;
      }
      else
      {
        v76 = std::__shared_ptr_access<SumoActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SumoActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 192));
        std::shared_ptr<Scene>::shared_ptr((std::shared_ptr<Scene> *const)(v7 + 224), p_dest_scene_ptr);
        LOBYTE(v76) = SumoActivity::initSumoEnterSceneAvatar(
                        v76,
                        (ScenePtr *)(v7 + 224),
                        enter_scene_avatar_vec,
                        appear_avatar_ptr) != 0;
        std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v7 + 224));
        if ( (_BYTE)v76 )
        {
          common::milog::MiLogStream::create(
            &v218,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/player.cpp",
            "initEnterSceneAvatar",
            3065);
          common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
            &v218,
            (const char (*)[39])"[SUMO] initSumoEnterSceneAvatar failed");
          common::milog::MiLogStream::~MiLogStream(&v218);
          v5 = -1;
          v75 = 0;
        }
        else
        {
          v75 = 1;
        }
      }
      std::shared_ptr<SumoActivity>::~shared_ptr((std::shared_ptr<SumoActivity> *const)(v7 + 192));
      if ( v75 != 1 )
        goto LABEL_78;
    }
    else if ( std::operator!=<DungeonScene>((const std::shared_ptr<DungeonScene> *)(v7 + 128), 0LL)
           && (v77 = std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 128)),
               DungeonScene::isEnterByRoguelikeActivity(v77)) )
    {
      Player::getActivityComp(this);
      PlayerActivityComp::findOpenningActivity<RoguelikeDungeonActivity>((PlayerActivityComp *const)(v7 + 192));
      if ( std::operator==<RoguelikeDungeonActivity>(0LL, (const std::shared_ptr<RoguelikeDungeonActivity> *)(v7 + 192)) )
      {
        common::milog::MiLogStream::create(
          &v218,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/player.cpp",
          "initEnterSceneAvatar",
          3074);
        common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
          &v218,
          (const char (*)[34])"roguelike_activity_ptr is nullptr");
        common::milog::MiLogStream::~MiLogStream(&v218);
        v5 = -1;
        v79 = 0;
      }
      else
      {
        v80 = std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<RoguelikeDungeonActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 192));
        runtime_mgr = RoguelikeDungeonActivity::getRogueDungeonRuntimeMgr(v80);
        std::shared_ptr<Scene>::shared_ptr((std::shared_ptr<Scene> *const)(v7 + 224), p_dest_scene_ptr);
        v81 = RogueLikeDungeonRuntimeMgr::initEnterSceneAvatar(
                runtime_mgr,
                (ScenePtr *)(v7 + 224),
                enter_scene_avatar_vec,
                appear_avatar_ptr) != 0;
        std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v7 + 224));
        if ( v81 )
        {
          common::milog::MiLogStream::create(
            &v218,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/player.cpp",
            "initEnterSceneAvatar",
            3080);
          common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
            &v218,
            (const char (*)[36])"[ROGUE] initEnterSceneAvatar failed");
          common::milog::MiLogStream::~MiLogStream(&v218);
          v5 = -1;
          v79 = 0;
        }
        else
        {
          v79 = 1;
        }
      }
      std::shared_ptr<RoguelikeDungeonActivity>::~shared_ptr((std::shared_ptr<RoguelikeDungeonActivity> *const)(v7 + 192));
      if ( v79 != 1 )
      {
        v50 = 0;
        goto LABEL_263;
      }
    }
    else if ( std::operator!=<DungeonScene>((const std::shared_ptr<DungeonScene> *)(v7 + 128), 0LL)
           && (v82 = std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 128)),
               DungeonScene::isEnterByPotionActivity(v82)) )
    {
      Player::getActivityComp(this);
      PlayerActivityComp::findOpenningActivity<PotionActivity>((PlayerActivityComp *const)(v7 + 192));
      if ( std::operator==<PotionActivity>(0LL, (const std::shared_ptr<PotionActivity> *)(v7 + 192)) )
      {
        common::milog::MiLogStream::create(
          &v218,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/player.cpp",
          "initEnterSceneAvatar",
          3089);
        common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
          &v218,
          (const char (*)[31])"potion_activity_ptr is nullptr");
        common::milog::MiLogStream::~MiLogStream(&v218);
        v5 = -1;
        v84 = 0;
      }
      else
      {
        v85 = std::__shared_ptr_access<PotionActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PotionActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 192));
        std::shared_ptr<Scene>::shared_ptr((std::shared_ptr<Scene> *const)(v7 + 224), p_dest_scene_ptr);
        LOBYTE(v85) = PotionActivity::initPotionEnterSceneAvatar(
                        v85,
                        (ScenePtr *)(v7 + 224),
                        enter_scene_avatar_vec,
                        appear_avatar_ptr) != 0;
        std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v7 + 224));
        if ( (_BYTE)v85 )
        {
          common::milog::MiLogStream::create(
            &v218,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/player.cpp",
            "initEnterSceneAvatar",
            3094);
          common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
            &v218,
            (const char (*)[43])"[POTION] initPotionEnterSceneAvatar failed");
          common::milog::MiLogStream::~MiLogStream(&v218);
          v5 = -1;
          v84 = 0;
        }
        else
        {
          v84 = 1;
        }
      }
      std::shared_ptr<PotionActivity>::~shared_ptr((std::shared_ptr<PotionActivity> *const)(v7 + 192));
      if ( v84 != 1 )
      {
        v50 = 0;
        goto LABEL_263;
      }
    }
    else if ( std::operator!=<DungeonScene>((const std::shared_ptr<DungeonScene> *)(v7 + 128), 0LL)
           && (v86 = std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 128)),
               DungeonScene::isEnterByCrystalLinkActivity(v86)) )
    {
      Player::getActivityComp(this);
      PlayerActivityComp::findOpenningActivity<CrystalLinkActivity>((PlayerActivityComp *const)(v7 + 192));
      if ( std::operator==<CrystalLinkActivity>(0LL, (const std::shared_ptr<CrystalLinkActivity> *)(v7 + 192)) )
      {
        common::milog::MiLogStream::create(
          &v218,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/player.cpp",
          "initEnterSceneAvatar",
          3103);
        common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
          &v218,
          (const char (*)[37])"crystal_link_activity_ptr is nullptr");
        common::milog::MiLogStream::~MiLogStream(&v218);
        v5 = -1;
        v88 = 0;
      }
      else
      {
        v89 = std::__shared_ptr_access<CrystalLinkActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<CrystalLinkActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 192));
        std::shared_ptr<Scene>::shared_ptr((std::shared_ptr<Scene> *const)(v7 + 224), p_dest_scene_ptr);
        LOBYTE(v89) = CrystalLinkActivity::initCrystalLinkEnterSceneAvatar(
                        v89,
                        (ScenePtr *)(v7 + 224),
                        enter_scene_avatar_vec,
                        appear_avatar_ptr) != 0;
        std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v7 + 224));
        if ( (_BYTE)v89 )
        {
          common::milog::MiLogStream::create(
            &v218,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/player.cpp",
            "initEnterSceneAvatar",
            3108);
          common::milog::MiLogStream::operator<<<char [54],(char *[54])0>(
            &v218,
            (const char (*)[54])"[CRYSTAL_LINK] initCrystalLinkEnterSceneAvatar failed");
          common::milog::MiLogStream::~MiLogStream(&v218);
          v5 = -1;
          v88 = 0;
        }
        else
        {
          v88 = 1;
        }
      }
      std::shared_ptr<CrystalLinkActivity>::~shared_ptr((std::shared_ptr<CrystalLinkActivity> *const)(v7 + 192));
      if ( v88 != 1 )
      {
        v50 = 0;
        goto LABEL_263;
      }
    }
    else if ( std::operator!=<DungeonScene>((const std::shared_ptr<DungeonScene> *)(v7 + 128), 0LL)
           && (v90 = std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 128)),
               DungeonScene::isEnterByRogueDiaryActivity(v90)) )
    {
      Player::getActivityComp(this);
      PlayerActivityComp::findOpenningActivity<RogueDiaryActivity>((PlayerActivityComp *const)(v7 + 192));
      if ( std::operator==<RogueDiaryActivity>(0LL, (const std::shared_ptr<RogueDiaryActivity> *)(v7 + 192)) )
      {
        common::milog::MiLogStream::create(
          &v218,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/player.cpp",
          "initEnterSceneAvatar",
          3117);
        common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
          &v218,
          (const char (*)[36])"rogue_diary_activity_ptr is nullptr");
        common::milog::MiLogStream::~MiLogStream(&v218);
        v5 = -1;
        v92 = 0;
      }
      else
      {
        v93 = std::__shared_ptr_access<RogueDiaryActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<RogueDiaryActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 192));
        RuntimeMgr = RogueDiaryActivity::getRuntimeMgr(v93);
        std::shared_ptr<Scene>::shared_ptr((std::shared_ptr<Scene> *const)(v7 + 224), p_dest_scene_ptr);
        LOBYTE(RuntimeMgr) = RogueDiaryRuntimeMgr::initEnterSceneAvatar(
                               RuntimeMgr,
                               (ScenePtr *)(v7 + 224),
                               enter_scene_avatar_vec,
                               appear_avatar_ptr,
                               *((std::vector<std::shared_ptr<Avatar>> **)&v181._anon_0._M_allocated_capacity + 1)) != 0;
        std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v7 + 224));
        if ( (_BYTE)RuntimeMgr )
        {
          common::milog::MiLogStream::create(
            &v218,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/player.cpp",
            "initEnterSceneAvatar",
            3122);
          common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
            &v218,
            (const char (*)[41])"[RogueDiary] initEnterSceneAvatar failed");
          common::milog::MiLogStream::~MiLogStream(&v218);
          v5 = -1;
          v92 = 0;
        }
        else
        {
          v92 = 1;
        }
      }
      std::shared_ptr<RogueDiaryActivity>::~shared_ptr((std::shared_ptr<RogueDiaryActivity> *const)(v7 + 192));
      if ( v92 != 1 )
      {
        v50 = 0;
        goto LABEL_263;
      }
    }
    else if ( std::operator!=<DungeonScene>((const std::shared_ptr<DungeonScene> *)(v7 + 128), 0LL)
           && (v95 = std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 128)),
               DungeonScene::isEnterByInstableSprayActivity(v95)) )
    {
      Player::getActivityComp(this);
      PlayerActivityComp::findOpenningActivity<InstableSprayActivity>((PlayerActivityComp *const)(v7 + 192));
      if ( std::operator==<InstableSprayActivity>(0LL, (const std::shared_ptr<InstableSprayActivity> *)(v7 + 192)) )
      {
        common::milog::MiLogStream::create(
          &v218,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/player.cpp",
          "initEnterSceneAvatar",
          3131);
        common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
          &v218,
          (const char (*)[34])"instable_spray_activity not found");
        common::milog::MiLogStream::~MiLogStream(&v218);
        v5 = -1;
        v97 = 0;
      }
      else
      {
        v98 = std::__shared_ptr_access<InstableSprayActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<InstableSprayActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 192));
        std::shared_ptr<Scene>::shared_ptr((std::shared_ptr<Scene> *const)(v7 + 224), p_dest_scene_ptr);
        LOBYTE(v98) = InstableSprayActivity::initEnterSceneAvatar(
                        v98,
                        (ScenePtr *)(v7 + 224),
                        enter_scene_avatar_vec,
                        appear_avatar_ptr) != 0;
        std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v7 + 224));
        if ( (_BYTE)v98 )
        {
          common::milog::MiLogStream::create(
            &v218,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/player.cpp",
            "initEnterSceneAvatar",
            3136);
          common::milog::MiLogStream::operator<<<char [52],(char *[52])0>(
            &v218,
            (const char (*)[52])"instable_spray_activity initEnterSceneAvatar failed");
          common::milog::MiLogStream::~MiLogStream(&v218);
          v5 = -1;
          v97 = 0;
        }
        else
        {
          v97 = 1;
        }
      }
      std::shared_ptr<InstableSprayActivity>::~shared_ptr((std::shared_ptr<InstableSprayActivity> *const)(v7 + 192));
      if ( v97 != 1 )
      {
        v50 = 0;
        goto LABEL_263;
      }
    }
    else if ( std::operator!=<DungeonScene>((const std::shared_ptr<DungeonScene> *)(v7 + 128), 0LL)
           && (v99 = std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 128)),
               DungeonScene::isEnterByMuqadasPotionActivity(v99)) )
    {
      Player::getActivityComp(this);
      PlayerActivityComp::findOpenningActivity<MuqadasPotionActivity>((PlayerActivityComp *const)(v7 + 192));
      if ( std::operator==<MuqadasPotionActivity>(0LL, (const std::shared_ptr<MuqadasPotionActivity> *)(v7 + 192)) )
      {
        common::milog::MiLogStream::create(
          &v218,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/player.cpp",
          "initEnterSceneAvatar",
          3145);
        common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
          &v218,
          (const char (*)[34])"muqadas_potion_activity not found");
        common::milog::MiLogStream::~MiLogStream(&v218);
        v5 = -1;
        v101 = 0;
      }
      else
      {
        v102 = std::__shared_ptr_access<MuqadasPotionActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<MuqadasPotionActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 192));
        std::shared_ptr<Scene>::shared_ptr((std::shared_ptr<Scene> *const)(v7 + 224), p_dest_scene_ptr);
        LOBYTE(v102) = MuqadasPotionActivity::initEnterSceneAvatar(
                         v102,
                         (ScenePtr *)(v7 + 224),
                         enter_scene_avatar_vec,
                         appear_avatar_ptr) != 0;
        std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v7 + 224));
        if ( (_BYTE)v102 )
        {
          common::milog::MiLogStream::create(
            &v218,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/player.cpp",
            "initEnterSceneAvatar",
            3150);
          common::milog::MiLogStream::operator<<<char [52],(char *[52])0>(
            &v218,
            (const char (*)[52])"muqadas_potion_activity initEnterSceneAvatar failed");
          common::milog::MiLogStream::~MiLogStream(&v218);
          v5 = -1;
          v101 = 0;
        }
        else
        {
          v101 = 1;
        }
      }
      std::shared_ptr<MuqadasPotionActivity>::~shared_ptr((std::shared_ptr<MuqadasPotionActivity> *const)(v7 + 192));
      if ( v101 != 1 )
      {
        v50 = 0;
        goto LABEL_263;
      }
    }
    else if ( std::operator!=<DungeonScene>((const std::shared_ptr<DungeonScene> *)(v7 + 128), 0LL)
           && (v103 = std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 128)),
               DungeonScene::isEnterByFungusFighterActivity(v103)) )
    {
      Player::getActivityComp(this);
      PlayerActivityComp::findOpenningActivity<FungusFighterActivity>((PlayerActivityComp *const)(v7 + 192));
      if ( std::operator==<FungusFighterActivity>(0LL, (const std::shared_ptr<FungusFighterActivity> *)(v7 + 192)) )
      {
        common::milog::MiLogStream::create(
          &v218,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/player.cpp",
          "initEnterSceneAvatar",
          3159);
        common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
          &v218,
          (const char (*)[32])"FungusFighterActivity not found");
        common::milog::MiLogStream::~MiLogStream(&v218);
        v5 = -1;
        v105 = 0;
      }
      else
      {
        v106 = std::__shared_ptr_access<FungusFighterActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FungusFighterActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 192));
        std::shared_ptr<Scene>::shared_ptr((std::shared_ptr<Scene> *const)(v7 + 224), p_dest_scene_ptr);
        LOBYTE(v106) = FungusFighterActivity::initEnterSceneAvatar(
                         v106,
                         (ScenePtr *)(v7 + 224),
                         enter_scene_avatar_vec,
                         appear_avatar_ptr) != 0;
        std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v7 + 224));
        if ( (_BYTE)v106 )
        {
          common::milog::MiLogStream::create(
            &v218,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/player.cpp",
            "initEnterSceneAvatar",
            3164);
          common::milog::MiLogStream::operator<<<char [50],(char *[50])0>(
            &v218,
            (const char (*)[50])"FungusFighterActivity initEnterSceneAvatar failed");
          common::milog::MiLogStream::~MiLogStream(&v218);
          v5 = -1;
          v105 = 0;
        }
        else
        {
          v105 = 1;
        }
      }
      std::shared_ptr<FungusFighterActivity>::~shared_ptr((std::shared_ptr<FungusFighterActivity> *const)(v7 + 192));
      if ( v105 != 1 )
      {
        v50 = 0;
        goto LABEL_263;
      }
    }
    else if ( std::operator!=<DungeonScene>((const std::shared_ptr<DungeonScene> *)(v7 + 128), 0LL)
           && (v107 = std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 128)),
               DungeonScene::isEnterByCharAmusementActivity(v107)) )
    {
      Player::getActivityComp(this);
      PlayerActivityComp::findOpenningActivity<CharAmusementActivity>((PlayerActivityComp *const)(v7 + 192));
      if ( std::operator==<CharAmusementActivity>(0LL, (const std::shared_ptr<CharAmusementActivity> *)(v7 + 192)) )
      {
        common::milog::MiLogStream::create(
          &v218,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/player.cpp",
          "initEnterSceneAvatar",
          3173);
        common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
          &v218,
          (const char (*)[32])"CharAmusementActivity not found");
        common::milog::MiLogStream::~MiLogStream(&v218);
        v5 = -1;
        v109 = 0;
      }
      else
      {
        v110 = std::__shared_ptr_access<CharAmusementActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<CharAmusementActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 192));
        std::shared_ptr<Scene>::shared_ptr((std::shared_ptr<Scene> *const)(v7 + 224), p_dest_scene_ptr);
        LOBYTE(v110) = CharAmusementActivity::initEnterSceneAvatar(
                         v110,
                         (ScenePtr *)(v7 + 224),
                         enter_scene_avatar_vec,
                         appear_avatar_ptr) != 0;
        std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v7 + 224));
        if ( (_BYTE)v110 )
        {
          common::milog::MiLogStream::create(
            &v218,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/player.cpp",
            "initEnterSceneAvatar",
            3178);
          common::milog::MiLogStream::operator<<<char [50],(char *[50])0>(
            &v218,
            (const char (*)[50])"CharAmusementActivity initEnterSceneAvatar failed");
          common::milog::MiLogStream::~MiLogStream(&v218);
          v5 = -1;
          v109 = 0;
        }
        else
        {
          v109 = 1;
        }
      }
      std::shared_ptr<CharAmusementActivity>::~shared_ptr((std::shared_ptr<CharAmusementActivity> *const)(v7 + 192));
      if ( v109 != 1 )
      {
        v50 = 0;
        goto LABEL_263;
      }
    }
    else if ( std::operator!=<DungeonScene>((const std::shared_ptr<DungeonScene> *)(v7 + 128), 0LL)
           && (v111 = std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 128)),
               DungeonScene::isEnterByBrickBreakerActivity(v111)) )
    {
      Player::getActivityComp(this);
      PlayerActivityComp::findOpenningActivity<BrickBreakerActivity>((PlayerActivityComp *const)(v7 + 192));
      if ( std::operator==<BrickBreakerActivity>(0LL, (const std::shared_ptr<BrickBreakerActivity> *)(v7 + 192)) )
      {
        common::milog::MiLogStream::create(
          &v218,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/player.cpp",
          "initEnterSceneAvatar",
          3187);
        common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
          &v218,
          (const char (*)[31])"BrickBreakerActivity not found");
        common::milog::MiLogStream::~MiLogStream(&v218);
        v5 = -1;
        v113 = 0;
      }
      else
      {
        v114 = std::__shared_ptr_access<BrickBreakerActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BrickBreakerActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 192));
        std::shared_ptr<Scene>::shared_ptr((std::shared_ptr<Scene> *const)(v7 + 224), p_dest_scene_ptr);
        LOBYTE(v114) = BrickBreakerActivity::initEnterSceneAvatar(
                         v114,
                         (ScenePtr *)(v7 + 224),
                         enter_scene_avatar_vec,
                         appear_avatar_ptr) != 0;
        std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v7 + 224));
        if ( (_BYTE)v114 )
        {
          common::milog::MiLogStream::create(
            &v218,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/player.cpp",
            "initEnterSceneAvatar",
            3192);
          common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(
            &v218,
            (const char (*)[49])"BrickBreakerActivity initEnterSceneAvatar failed");
          common::milog::MiLogStream::~MiLogStream(&v218);
          v5 = -1;
          v113 = 0;
        }
        else
        {
          v113 = 1;
        }
      }
      std::shared_ptr<BrickBreakerActivity>::~shared_ptr((std::shared_ptr<BrickBreakerActivity> *const)(v7 + 192));
      if ( v113 != 1 )
      {
        v50 = 0;
        goto LABEL_263;
      }
    }
    else if ( std::operator!=<DungeonScene>((const std::shared_ptr<DungeonScene> *)(v7 + 128), 0LL)
           && (v115 = std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 128)),
               DungeonScene::isEnterByDuelHeartActivity(v115)) )
    {
      Player::getActivityComp(this);
      PlayerActivityComp::findOpenningActivity<DuelHeartActivity>((PlayerActivityComp *const)(v7 + 192));
      if ( std::operator==<DuelHeartActivity>(0LL, (const std::shared_ptr<DuelHeartActivity> *)(v7 + 192)) )
      {
        common::milog::MiLogStream::create(
          &v218,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/player.cpp",
          "initEnterSceneAvatar",
          3201);
        common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
          &v218,
          (const char (*)[28])"DuelHeartActivity not found");
        common::milog::MiLogStream::~MiLogStream(&v218);
        v5 = -1;
        v117 = 0;
      }
      else
      {
        v118 = std::__shared_ptr_access<DuelHeartActivity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DuelHeartActivity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 192));
        std::shared_ptr<Scene>::shared_ptr((std::shared_ptr<Scene> *const)(v7 + 224), p_dest_scene_ptr);
        LOBYTE(v118) = DuelHeartActivity::initEnterSceneAvatar(
                         v118,
                         (ScenePtr *)(v7 + 224),
                         enter_scene_avatar_vec,
                         appear_avatar_ptr) != 0;
        std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v7 + 224));
        if ( (_BYTE)v118 )
        {
          common::milog::MiLogStream::create(
            &v218,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/player.cpp",
            "initEnterSceneAvatar",
            3206);
          common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(
            &v218,
            (const char (*)[46])"DuelHeartActivity initEnterSceneAvatar failed");
          common::milog::MiLogStream::~MiLogStream(&v218);
          v5 = -1;
          v117 = 0;
        }
        else
        {
          v117 = 1;
        }
      }
      std::shared_ptr<DuelHeartActivity>::~shared_ptr((std::shared_ptr<DuelHeartActivity> *const)(v7 + 192));
      if ( v117 != 1 )
      {
        v50 = 0;
        goto LABEL_263;
      }
    }
    else
    {
      PlayerAvatarComp::getCurAvatarTeamWithTempAvatar((std::vector<long unsigned int> *)(v7 + 320), avatar_comp);
      is_use_cur_avatar_team_with_temp_avatar = 1;
      v119 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_dest_scene_ptr);
      if ( *(_BYTE *)(((unsigned __int64)v119 >> 3) + 0x7FFF8000) )
        *(double *)v6.m128i_i64 = __asan_report_load8();
      v120 = (unsigned __int64)(v119->_vptr_DescribalBase + 35);
      if ( *(_BYTE *)((v120 >> 3) + 0x7FFF8000) )
        *(double *)v6.m128i_i64 = __asan_report_load8();
      (*(void (__fastcall **)(unsigned __int64, std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *))v120)(
        v7 + 160,
        v119);
      if ( !std::operator!=<DungeonScene>(0LL, (const std::shared_ptr<DungeonScene> *)(v7 + 128)) )
        goto LABEL_210;
      v121 = std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 128));
      if ( *(_BYTE *)(((unsigned __int64)v121 >> 3) + 0x7FFF8000) )
        *(double *)v6.m128i_i64 = __asan_report_load8();
      v122 = *(_QWORD *)v121->baseclass_0 + 504LL;
      if ( *(_BYTE *)((v122 >> 3) + 0x7FFF8000) )
        *(double *)v6.m128i_i64 = __asan_report_load8();
      if ( (*(unsigned __int8 (__fastcall **)(std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *))v122)(v121) )
        v123 = 1;
      else
LABEL_210:
        v123 = 0;
      is_in_persistent_dungeon = v123;
      v124 = 0;
      v183 = 0;
      if ( std::operator!=<SceneTeam>(0LL, (const std::shared_ptr<SceneTeam> *)(v7 + 160)) )
      {
        v182 = std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 160));
        v125 = Player::getUid(this);
        SceneTeam::getAvatarGuidVec((std::vector<long unsigned int> *)(v7 + 384), v182, v125);
        v124 = 1;
        if ( !std::vector<unsigned long>::empty((const std::vector<long unsigned int> *const)(v7 + 384)) )
        {
          MpComp = Player::getMpComp(this);
          if ( PlayerMpComp::isInMpMode(MpComp) )
            v183 = 1;
        }
      }
      if ( v124 )
        std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v7 + 384));
      if ( v183 )
      {
        v127 = std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 160));
        v128 = Player::getUid(this);
        SceneTeam::getAvatarGuidVec(&__x, v127, v128);
        std::vector<unsigned long>::operator=((std::vector<long unsigned int> *const)(v7 + 320), &__x);
        std::vector<unsigned long>::~vector(&__x);
        is_use_cur_avatar_team_with_temp_avatar = 0;
      }
      else
      {
        QuestLockTeamAvatarGuidVec = PlayerAvatarComp::getQuestLockTeamAvatarGuidVec(avatar_comp);
        if ( !std::vector<unsigned long>::empty(QuestLockTeamAvatarGuidVec) )
        {
          v130 = PlayerAvatarComp::getQuestLockTeamAvatarGuidVec(avatar_comp);
          std::vector<unsigned long>::operator=((std::vector<long unsigned int> *const)(v7 + 320), v130);
          is_use_cur_avatar_team_with_temp_avatar = 0;
        }
        else
        {
          LockTeamAvatarGuidVec = PlayerAvatarComp::getLockTeamAvatarGuidVec(avatar_comp);
          if ( !std::vector<unsigned long>::empty(LockTeamAvatarGuidVec) )
          {
            v132 = PlayerAvatarComp::getLockTeamAvatarGuidVec(avatar_comp);
            std::vector<unsigned long>::operator=((std::vector<long unsigned int> *const)(v7 + 320), v132);
            is_use_cur_avatar_team_with_temp_avatar = 0;
          }
          else
          {
            v133 = 0;
            v185 = 0;
            if ( std::operator!=<SceneTeam>(0LL, (const std::shared_ptr<SceneTeam> *)(v7 + 160)) )
            {
              v184 = std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 160));
              v134 = Player::getUid(this);
              SceneTeam::getAvatarGuidVec((std::vector<long unsigned int> *)(v7 + 384), v184, v134);
              v133 = 1;
              if ( !std::vector<unsigned long>::empty((const std::vector<long unsigned int> *const)(v7 + 384))
                && is_in_persistent_dungeon )
              {
                v185 = 1;
              }
            }
            if ( v133 )
              std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v7 + 384));
            if ( v185 )
            {
              v135 = std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 160));
              v136 = Player::getUid(this);
              SceneTeam::getAvatarGuidVec((std::vector<long unsigned int> *)(v7 + 384), v135, v136);
              std::vector<unsigned long>::operator=(
                (std::vector<long unsigned int> *const)(v7 + 320),
                (std::vector<long unsigned int> *)(v7 + 384));
              std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v7 + 384));
              is_use_cur_avatar_team_with_temp_avatar = 0;
            }
          }
        }
      }
      __for_range_1 = (std::vector<long unsigned int> *)(v7 + 320);
      __for_begin._M_current = (const unsigned int *)std::vector<unsigned long>::begin((std::vector<long unsigned int> *const)(v7 + 320))._M_current;
      __for_end._M_current = (const unsigned int *)std::vector<unsigned long>::end((std::vector<long unsigned int> *const)(v7 + 320))._M_current;
      while ( __gnu_cxx::operator!=<unsigned long *,std::vector<unsigned long>>(
                (const __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *)&__for_begin,
                (const __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *)&__for_end) )
      {
        v137 = __gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator*((const __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *const)&__for_begin);
        if ( *(_BYTE *)(((unsigned __int64)v137 >> 3) + 0x7FFF8000) )
          *(double *)v6.m128i_i64 = __asan_report_load8();
        *(_QWORD *)(v7 + 64) = *v137;
        PlayerAvatarComp::findAvatar(
          (const PlayerAvatarComp *const)(v7 + 224),
          (uint64_t)avatar_comp,
          *(_QWORD *)(v7 + 64));
        if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v7 + 224), 0LL) )
        {
          common::milog::MiLogStream::create(
            &v218,
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/player/player.cpp",
            "initEnterSceneAvatar",
            3244);
          v138 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                   &v218,
                   (const char (*)[32])"findAvatar failed, avatar_guid:");
          v139 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                   v138,
                   (const unsigned __int64 *)(v7 + 64));
          v140 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v139, (const char (*)[6])" uid:");
          *(_DWORD *)(v7 + 48) = Player::getUid(this);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v140, (const unsigned int *)(v7 + 48));
          common::milog::MiLogStream::~MiLogStream(&v218);
        }
        else
        {
          std::vector<std::shared_ptr<Avatar>>::push_back(
            enter_scene_avatar_vec,
            (const std::vector<std::shared_ptr<Avatar>>::value_type *)(v7 + 224));
        }
        std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v7 + 224));
        __gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator++((__gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> > *const)&__for_begin);
      }
      if ( std::vector<std::shared_ptr<Avatar>>::empty(enter_scene_avatar_vec) )
      {
        common::milog::MiLogStream::create(
          &v218,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/player.cpp",
          "initEnterSceneAvatar",
          3251);
        v141 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
                 &v218,
                 (const char (*)[38])"enter_scene_avatar_vec is empty, uid:");
        *(_DWORD *)(v7 + 48) = Player::getUid(this);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v141, (const unsigned int *)(v7 + 48));
        common::milog::MiLogStream::~MiLogStream(&v218);
        v5 = -1;
        v142 = 0;
      }
      else
      {
        PlayerAvatarComp::getCurAvatar((const PlayerAvatarComp *const)(v7 + 192));
        std::shared_ptr<Avatar>::shared_ptr((std::shared_ptr<Avatar> *const)(v7 + 224), 0LL);
        avatar_team_ptr = PlayerAvatarComp::findCurAvatarTeam(avatar_comp);
        if ( avatar_team_ptr && is_use_cur_avatar_team_with_temp_avatar )
        {
          LastCurAvatarGuid = AvatarTeam::getLastCurAvatarGuid(avatar_team_ptr);
          PlayerAvatarComp::findAvatar((const PlayerAvatarComp *const)&__r, (uint64_t)avatar_comp, LastCurAvatarGuid);
          std::shared_ptr<Avatar>::operator=((std::shared_ptr<Avatar> *const)(v7 + 224), &__r);
          std::shared_ptr<Avatar>::~shared_ptr(&__r);
        }
        if ( std::operator!=<Avatar>((const std::shared_ptr<Avatar> *)(v7 + 192), 0LL)
          && (__for_end._M_current = (const unsigned int *)std::vector<std::shared_ptr<Avatar>>::end(enter_scene_avatar_vec)._M_current,
              v144 = std::vector<std::shared_ptr<Avatar>>::end(enter_scene_avatar_vec)._M_current,
              v145._M_current = std::vector<std::shared_ptr<Avatar>>::begin(enter_scene_avatar_vec)._M_current,
              __for_begin._M_current = (const unsigned int *)std::find<__gnu_cxx::__normal_iterator<std::shared_ptr<Avatar> *,std::vector<std::shared_ptr<Avatar>>>,std::shared_ptr<Avatar>>(
                                                               v145,
                                                               (__gnu_cxx::__normal_iterator<std::shared_ptr<Avatar>*,std::vector<std::shared_ptr<Avatar>> >)v144,
                                                               (const std::shared_ptr<Avatar> *)(v7 + 192))._M_current,
              __gnu_cxx::operator!=<std::shared_ptr<Avatar> *,std::vector<std::shared_ptr<Avatar>>>(
                (const __gnu_cxx::__normal_iterator<std::shared_ptr<Avatar>*,std::vector<std::shared_ptr<Avatar>> > *)&__for_begin,
                (const __gnu_cxx::__normal_iterator<std::shared_ptr<Avatar>*,std::vector<std::shared_ptr<Avatar>> > *)&__for_end)) )
        {
          std::shared_ptr<Avatar>::operator=(appear_avatar_ptr, (const std::shared_ptr<Avatar> *)(v7 + 192));
        }
        else if ( std::operator!=<Avatar>((const std::shared_ptr<Avatar> *)(v7 + 224), 0LL)
               && (__for_end._M_current = (const unsigned int *)std::vector<std::shared_ptr<Avatar>>::end(enter_scene_avatar_vec)._M_current,
                   v147 = std::vector<std::shared_ptr<Avatar>>::end(enter_scene_avatar_vec)._M_current,
                   v148._M_current = std::vector<std::shared_ptr<Avatar>>::begin(enter_scene_avatar_vec)._M_current,
                   __for_begin._M_current = (const unsigned int *)std::find<__gnu_cxx::__normal_iterator<std::shared_ptr<Avatar> *,std::vector<std::shared_ptr<Avatar>>>,std::shared_ptr<Avatar>>(
                                                                    v148,
                                                                    (__gnu_cxx::__normal_iterator<std::shared_ptr<Avatar>*,std::vector<std::shared_ptr<Avatar>> >)v147,
                                                                    (const std::shared_ptr<Avatar> *)(v7 + 224))._M_current,
                   __gnu_cxx::operator!=<std::shared_ptr<Avatar> *,std::vector<std::shared_ptr<Avatar>>>(
                     (const __gnu_cxx::__normal_iterator<std::shared_ptr<Avatar>*,std::vector<std::shared_ptr<Avatar>> > *)&__for_begin,
                     (const __gnu_cxx::__normal_iterator<std::shared_ptr<Avatar>*,std::vector<std::shared_ptr<Avatar>> > *)&__for_end)) )
        {
          std::shared_ptr<Avatar>::operator=(appear_avatar_ptr, (const std::shared_ptr<Avatar> *)(v7 + 224));
        }
        else
        {
          v150 = std::vector<std::shared_ptr<Avatar>>::operator[](enter_scene_avatar_vec, 0LL);
          std::shared_ptr<Avatar>::operator=(appear_avatar_ptr, v150);
        }
        std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v7 + 224));
        std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v7 + 192));
        v142 = 1;
      }
      std::shared_ptr<SceneTeam>::~shared_ptr((std::shared_ptr<SceneTeam> *const)(v7 + 160));
      std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v7 + 320));
      if ( v142 != 1 )
      {
        v50 = 0;
        goto LABEL_263;
      }
    }
LABEL_262:
    v50 = 1;
LABEL_263:
    std::shared_ptr<DungeonScene>::~shared_ptr((std::shared_ptr<DungeonScene> *const)(v7 + 128));
    if ( v50 != 1 )
      goto LABEL_313;
LABEL_264:
    if ( std::operator==<Avatar>(appear_avatar_ptr, 0LL)
      || std::vector<std::shared_ptr<Avatar>>::empty(enter_scene_avatar_vec)
      || (__for_end._M_current = (const unsigned int *)std::vector<std::shared_ptr<Avatar>>::end(enter_scene_avatar_vec)._M_current,
          v151 = std::vector<std::shared_ptr<Avatar>>::end(enter_scene_avatar_vec)._M_current,
          v152 = std::vector<std::shared_ptr<Avatar>>::begin(enter_scene_avatar_vec)._M_current,
          __for_begin._M_current = (const unsigned int *)std::find<__gnu_cxx::__normal_iterator<std::shared_ptr<Avatar> *,std::vector<std::shared_ptr<Avatar>>>,std::shared_ptr<Avatar>>(
                                                           (__gnu_cxx::__normal_iterator<std::shared_ptr<Avatar>*,std::vector<std::shared_ptr<Avatar>> >)v152,
                                                           (__gnu_cxx::__normal_iterator<std::shared_ptr<Avatar>*,std::vector<std::shared_ptr<Avatar>> >)v151,
                                                           appear_avatar_ptr)._M_current,
          __gnu_cxx::operator==<std::shared_ptr<Avatar> *,std::vector<std::shared_ptr<Avatar>>>(
            (const __gnu_cxx::__normal_iterator<std::shared_ptr<Avatar>*,std::vector<std::shared_ptr<Avatar>> > *)&__for_begin,
            (const __gnu_cxx::__normal_iterator<std::shared_ptr<Avatar>*,std::vector<std::shared_ptr<Avatar>> > *)&__for_end)) )
    {
      common::milog::MiLogStream::create(
        &v218,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/player.cpp",
        "initEnterSceneAvatar",
        3286);
      common::milog::MiLogStream::operator<<<char [57],(char *[57])0>(
        &v218,
        (const char (*)[57])"[EnterScene] appear_avatar_ptr is nullptr or not in team");
      common::milog::MiLogStream::~MiLogStream(&v218);
      v5 = -1;
    }
    else
    {
      v154 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)appear_avatar_ptr);
      if ( Creature::getLifeState(v154) == LIFE_ALIVE )
      {
        v5 = 0;
      }
      else
      {
        ServiceBox::findService<GameserverService>();
        GameserverService::getConfig((GameserverService *const)(v7 + 192));
        v155 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 192));
        revive_hp_percent = (float)(int)ConstValueExcelConfigMgr::getHurtReviveHpPercent(&v155->design_config.txt_config_mgr.const_value_config_mgr);
        std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v7 + 192));
        __for_range_2 = enter_scene_avatar_vec;
        __for_begin._M_current = (const unsigned int *)std::vector<std::shared_ptr<Avatar>>::begin(enter_scene_avatar_vec)._M_current;
        __for_end._M_current = (const unsigned int *)std::vector<std::shared_ptr<Avatar>>::end(__for_range_2)._M_current;
        while ( __gnu_cxx::operator!=<std::shared_ptr<Avatar> *,std::vector<std::shared_ptr<Avatar>>>(
                  (const __gnu_cxx::__normal_iterator<std::shared_ptr<Avatar>*,std::vector<std::shared_ptr<Avatar>> > *)&__for_begin,
                  (const __gnu_cxx::__normal_iterator<std::shared_ptr<Avatar>*,std::vector<std::shared_ptr<Avatar>> > *)&__for_end) )
        {
          v156 = __gnu_cxx::__normal_iterator<std::shared_ptr<Avatar> *,std::vector<std::shared_ptr<Avatar>>>::operator*((const __gnu_cxx::__normal_iterator<std::shared_ptr<Avatar>*,std::vector<std::shared_ptr<Avatar>> > *const)&__for_begin);
          std::shared_ptr<Avatar>::shared_ptr((std::shared_ptr<Avatar> *const)(v7 + 224), v156);
          v157 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 224));
          if ( Creature::getLifeState(v157) == LIFE_ALIVE )
          {
            std::shared_ptr<Avatar>::operator=(appear_avatar_ptr, (const std::shared_ptr<Avatar> *)(v7 + 224));
            v158 = 0;
          }
          else
          {
            v158 = 1;
          }
          std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v7 + 224));
          if ( v158 != 1 )
            break;
          __gnu_cxx::__normal_iterator<std::shared_ptr<Avatar> *,std::vector<std::shared_ptr<Avatar>>>::operator++((__gnu_cxx::__normal_iterator<std::shared_ptr<Avatar>*,std::vector<std::shared_ptr<Avatar>> > *const)&__for_begin);
        }
        v159 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)appear_avatar_ptr);
        if ( Creature::getLifeState(v159) != LIFE_ALIVE )
        {
          ServiceBox::findService<GameserverService>();
          GameserverService::getConfig((GameserverService *const)(v7 + 224));
          v160 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 224));
          *(float *)v6.m128i_i32 = ConstValueExcelConfigMgr::getNoHurtDieSubHpPercent(&v160->design_config.txt_config_mgr.const_value_config_mgr);
          LODWORD(sub_hp_percent) = _mm_cvtsi128_si32(v6);
          std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v7 + 224));
          reason = CHANGE_HP_NONE;
          DieType = PlayerAvatarComp::getDieType(avatar_comp);
          if ( DieType == PLAYER_DIE_DRAWN )
          {
            reason = CHANGE_HP_SUB_DRAWN;
          }
          else if ( DieType == PLAYER_DIE_ABYSS )
          {
            reason = CHANGE_HP_SUB_ABYSS;
          }
          __for_range_3 = enter_scene_avatar_vec;
          __for_begin._M_current = (const unsigned int *)std::vector<std::shared_ptr<Avatar>>::begin(enter_scene_avatar_vec)._M_current;
          __for_end._M_current = (const unsigned int *)std::vector<std::shared_ptr<Avatar>>::end(__for_range_3)._M_current;
          while ( __gnu_cxx::operator!=<std::shared_ptr<Avatar> *,std::vector<std::shared_ptr<Avatar>>>(
                    (const __gnu_cxx::__normal_iterator<std::shared_ptr<Avatar>*,std::vector<std::shared_ptr<Avatar>> > *)&__for_begin,
                    (const __gnu_cxx::__normal_iterator<std::shared_ptr<Avatar>*,std::vector<std::shared_ptr<Avatar>> > *)&__for_end) )
          {
            v162 = __gnu_cxx::__normal_iterator<std::shared_ptr<Avatar> *,std::vector<std::shared_ptr<Avatar>>>::operator*((const __gnu_cxx::__normal_iterator<std::shared_ptr<Avatar>*,std::vector<std::shared_ptr<Avatar>> > *const)&__for_begin);
            std::shared_ptr<Avatar>::shared_ptr((std::shared_ptr<Avatar> *const)(v7 + 224), v162);
            v163 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 224));
            v6 = (__m128i)_mm_xor_ps((__m128)LODWORD(sub_hp_percent), (__m128)0x80000000);
            Creature::changeCurHpPercent(v163, *(float *)v6.m128i_i32, reason, 0);
            v164 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 224));
            if ( Creature::getCurHp(v164) > 0.0099999998 )
            {
              v165 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 224));
              Avatar::setLifeAlive(v165, 0x65u, 0LL, 0);
            }
            std::vector<std::shared_ptr<Avatar>>::push_back(
              *((std::vector<std::shared_ptr<Avatar>> *const *)&v181._anon_0._M_allocated_capacity + 1),
              (const std::vector<std::shared_ptr<Avatar>>::value_type *)(v7 + 224));
            std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v7 + 224));
            __gnu_cxx::__normal_iterator<std::shared_ptr<Avatar> *,std::vector<std::shared_ptr<Avatar>>>::operator++((__gnu_cxx::__normal_iterator<std::shared_ptr<Avatar>*,std::vector<std::shared_ptr<Avatar>> > *const)&__for_begin);
          }
          v166 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)appear_avatar_ptr);
          if ( Creature::getLifeState(v166) != LIFE_ALIVE )
          {
            __for_range_4 = enter_scene_avatar_vec;
            __for_begin._M_current = (const unsigned int *)std::vector<std::shared_ptr<Avatar>>::begin(enter_scene_avatar_vec)._M_current;
            __for_end._M_current = (const unsigned int *)std::vector<std::shared_ptr<Avatar>>::end(__for_range_4)._M_current;
            while ( __gnu_cxx::operator!=<std::shared_ptr<Avatar> *,std::vector<std::shared_ptr<Avatar>>>(
                      (const __gnu_cxx::__normal_iterator<std::shared_ptr<Avatar>*,std::vector<std::shared_ptr<Avatar>> > *)&__for_begin,
                      (const __gnu_cxx::__normal_iterator<std::shared_ptr<Avatar>*,std::vector<std::shared_ptr<Avatar>> > *)&__for_end) )
            {
              v167 = __gnu_cxx::__normal_iterator<std::shared_ptr<Avatar> *,std::vector<std::shared_ptr<Avatar>>>::operator*((const __gnu_cxx::__normal_iterator<std::shared_ptr<Avatar>*,std::vector<std::shared_ptr<Avatar>> > *const)&__for_begin);
              std::shared_ptr<Avatar>::shared_ptr((std::shared_ptr<Avatar> *const)(v7 + 224), v167);
              v168 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 224));
              if ( Creature::getLifeState(v168) == LIFE_ALIVE )
                std::shared_ptr<Avatar>::operator=(appear_avatar_ptr, (const std::shared_ptr<Avatar> *)(v7 + 224));
              std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v7 + 224));
              __gnu_cxx::__normal_iterator<std::shared_ptr<Avatar> *,std::vector<std::shared_ptr<Avatar>>>::operator++((__gnu_cxx::__normal_iterator<std::shared_ptr<Avatar>*,std::vector<std::shared_ptr<Avatar>> > *const)&__for_begin);
            }
            v169 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)appear_avatar_ptr);
            if ( Creature::getLifeState(v169) != LIFE_ALIVE )
            {
              __for_range_5 = enter_scene_avatar_vec;
              __for_begin._M_current = (const unsigned int *)std::vector<std::shared_ptr<Avatar>>::begin(enter_scene_avatar_vec)._M_current;
              __for_end._M_current = (const unsigned int *)std::vector<std::shared_ptr<Avatar>>::end(__for_range_5)._M_current;
              while ( __gnu_cxx::operator!=<std::shared_ptr<Avatar> *,std::vector<std::shared_ptr<Avatar>>>(
                        (const __gnu_cxx::__normal_iterator<std::shared_ptr<Avatar>*,std::vector<std::shared_ptr<Avatar>> > *)&__for_begin,
                        (const __gnu_cxx::__normal_iterator<std::shared_ptr<Avatar>*,std::vector<std::shared_ptr<Avatar>> > *)&__for_end) )
              {
                v170 = __gnu_cxx::__normal_iterator<std::shared_ptr<Avatar> *,std::vector<std::shared_ptr<Avatar>>>::operator*((const __gnu_cxx::__normal_iterator<std::shared_ptr<Avatar>*,std::vector<std::shared_ptr<Avatar>> > *const)&__for_begin);
                std::shared_ptr<Avatar>::shared_ptr((std::shared_ptr<Avatar> *const)(v7 + 224), v170);
                v171 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 224));
                v6 = _mm_cvtsi32_si128(LODWORD(revive_hp_percent));
                Creature::setCurHpPercent(v171, *(float *)v6.m128i_i32, CHANGE_HP_ADD_REVIVE, 0);
                v172 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 224));
                Avatar::clearSpeed(v172);
                v173 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 224));
                Avatar::setLifeAlive(v173, 0x66u, 0LL, 0);
                std::vector<std::shared_ptr<Avatar>>::push_back(
                  *((std::vector<std::shared_ptr<Avatar>> *const *)&v181._anon_0._M_allocated_capacity + 1),
                  (const std::vector<std::shared_ptr<Avatar>>::value_type *)(v7 + 224));
                std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v7 + 224));
                __gnu_cxx::__normal_iterator<std::shared_ptr<Avatar> *,std::vector<std::shared_ptr<Avatar>>>::operator++((__gnu_cxx::__normal_iterator<std::shared_ptr<Avatar>*,std::vector<std::shared_ptr<Avatar>> > *const)&__for_begin);
              }
              PlayerAvatarComp::setIsAllDieEnterScene(avatar_comp, 1);
              __for_end._M_current = (const unsigned int *)std::vector<std::shared_ptr<Avatar>>::end(enter_scene_avatar_vec)._M_current;
              v174 = std::vector<std::shared_ptr<Avatar>>::end(enter_scene_avatar_vec)._M_current;
              v175 = std::vector<std::shared_ptr<Avatar>>::begin(enter_scene_avatar_vec)._M_current;
              __for_begin._M_current = (const unsigned int *)std::find<__gnu_cxx::__normal_iterator<std::shared_ptr<Avatar> *,std::vector<std::shared_ptr<Avatar>>>,std::shared_ptr<Avatar>>(
                                                               (__gnu_cxx::__normal_iterator<std::shared_ptr<Avatar>*,std::vector<std::shared_ptr<Avatar>> >)v175,
                                                               (__gnu_cxx::__normal_iterator<std::shared_ptr<Avatar>*,std::vector<std::shared_ptr<Avatar>> >)v174,
                                                               appear_avatar_ptr)._M_current;
              if ( __gnu_cxx::operator==<std::shared_ptr<Avatar> *,std::vector<std::shared_ptr<Avatar>>>(
                     (const __gnu_cxx::__normal_iterator<std::shared_ptr<Avatar>*,std::vector<std::shared_ptr<Avatar>> > *)&__for_begin,
                     (const __gnu_cxx::__normal_iterator<std::shared_ptr<Avatar>*,std::vector<std::shared_ptr<Avatar>> > *)&__for_end) )
              {
                v176 = std::vector<std::shared_ptr<Avatar>>::operator[](enter_scene_avatar_vec, 0LL);
                std::shared_ptr<Avatar>::operator=(appear_avatar_ptr, v176);
              }
            }
          }
        }
        if ( std::operator==<Avatar>(appear_avatar_ptr, 0LL)
          || std::vector<std::shared_ptr<Avatar>>::empty(enter_scene_avatar_vec)
          || (__for_end._M_current = (const unsigned int *)std::vector<std::shared_ptr<Avatar>>::end(enter_scene_avatar_vec)._M_current,
              v177 = std::vector<std::shared_ptr<Avatar>>::end(enter_scene_avatar_vec)._M_current,
              v178 = std::vector<std::shared_ptr<Avatar>>::begin(enter_scene_avatar_vec)._M_current,
              __for_begin._M_current = (const unsigned int *)std::find<__gnu_cxx::__normal_iterator<std::shared_ptr<Avatar> *,std::vector<std::shared_ptr<Avatar>>>,std::shared_ptr<Avatar>>(
                                                               (__gnu_cxx::__normal_iterator<std::shared_ptr<Avatar>*,std::vector<std::shared_ptr<Avatar>> >)v178,
                                                               (__gnu_cxx::__normal_iterator<std::shared_ptr<Avatar>*,std::vector<std::shared_ptr<Avatar>> >)v177,
                                                               appear_avatar_ptr)._M_current,
              __gnu_cxx::operator==<std::shared_ptr<Avatar> *,std::vector<std::shared_ptr<Avatar>>>(
                (const __gnu_cxx::__normal_iterator<std::shared_ptr<Avatar>*,std::vector<std::shared_ptr<Avatar>> > *)&__for_begin,
                (const __gnu_cxx::__normal_iterator<std::shared_ptr<Avatar>*,std::vector<std::shared_ptr<Avatar>> > *)&__for_end)) )
        {
          common::milog::MiLogStream::create(
            &v218,
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/player/player.cpp",
            "initEnterSceneAvatar",
            3370);
          common::milog::MiLogStream::operator<<<char [57],(char *[57])0>(
            &v218,
            (const char (*)[57])"[EnterScene] appear_avatar_ptr is nullptr or not in team");
          common::milog::MiLogStream::~MiLogStream(&v218);
          v5 = -1;
        }
        else
        {
          basic_comp = Player::getBasicComp(this);
          *(float *)v6.m128i_i32 = PlayerBasicComp::getCurStamina(basic_comp);
          cur_stamina = COERCE_FLOAT(_mm_cvtsi128_si32(v6));
          *(float *)v6.m128i_i32 = PlayerBasicComp::getMaxStamina(basic_comp);
          max_stamina = COERCE_FLOAT(_mm_cvtsi128_si32(v6));
          min_stamina = (float)(max_stamina * revive_hp_percent) / 100.0;
          if ( min_stamina > cur_stamina )
          {
            add_stamina = min_stamina - cur_stamina;
            param.type = 8;
            memset(&param.motion_state, 0, 24);
            PlayerBasicComp::changeCurStamina(basic_comp, min_stamina - cur_stamina, (unsigned __int64)&param, 1);
          }
          v5 = 0;
        }
      }
    }
    goto LABEL_313;
  }
  __for_range = &scene_excel_config_ptr->specified_avatar_list;
  __for_begin._M_current = std::vector<unsigned int>::begin(&scene_excel_config_ptr->specified_avatar_list)._M_current;
  __for_end._M_current = std::vector<unsigned int>::end(&scene_excel_config_ptr->specified_avatar_list)._M_current;
  while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(&__for_begin, &__for_end) )
  {
    v19 = (unsigned int *)__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*(&__for_begin);
    v20 = v19;
    if ( *(_BYTE *)(((unsigned __int64)v19 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v19 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v19 >> 3) + 0x7FFF8000) )
    {
      *(double *)v6.m128i_i64 = __asan_report_load4(v19);
    }
    avatar_id = *v20;
    PlayerAvatarComp::findFormalAvatarByAvatarId((const PlayerAvatarComp *const)(v7 + 192), (uint32_t)avatar_comp);
    if ( std::operator!=<FormalAvatar>((const std::shared_ptr<FormalAvatar> *)(v7 + 192), 0LL) )
    {
      std::shared_ptr<Avatar>::shared_ptr<FormalAvatar,void>(
        (std::shared_ptr<Avatar> *const)(v7 + 224),
        (const std::shared_ptr<FormalAvatar> *)(v7 + 192));
      std::vector<std::shared_ptr<Avatar>>::push_back(
        enter_scene_avatar_vec,
        (std::vector<std::shared_ptr<Avatar>>::value_type *)(v7 + 224));
      std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v7 + 224));
    }
    std::shared_ptr<FormalAvatar>::~shared_ptr((std::shared_ptr<FormalAvatar> *const)(v7 + 192));
    __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++(&__for_begin);
  }
  v21 = std::vector<std::shared_ptr<Avatar>>::size(enter_scene_avatar_vec);
  if ( *(_BYTE *)(((unsigned __int64)&scene_excel_config_ptr->max_specified_avatar_num >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&scene_excel_config_ptr->max_specified_avatar_num >> 3) + 0x7FFF8000) <= 3 )
  {
    *(double *)v6.m128i_i64 = __asan_report_load4(&scene_excel_config_ptr->max_specified_avatar_num);
  }
  if ( v21 > scene_excel_config_ptr->max_specified_avatar_num )
    std::vector<std::shared_ptr<Avatar>>::resize(
      enter_scene_avatar_vec,
      scene_excel_config_ptr->max_specified_avatar_num);
  if ( !std::vector<std::shared_ptr<Avatar>>::empty(enter_scene_avatar_vec) )
  {
    v26 = std::vector<std::shared_ptr<Avatar>>::operator[](enter_scene_avatar_vec, 0LL);
    std::shared_ptr<Avatar>::operator=(appear_avatar_ptr, v26);
    goto LABEL_264;
  }
  common::milog::MiLogStream::create(
    &v218,
    &common::milog::MiLogDefault::default_log_obj_,
    3u,
    "./src/player/player.cpp",
    "initEnterSceneAvatar",
    2976);
  v22 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
          &v218,
          (const char (*)[34])"No specified in avatar_list, uid:");
  val = Player::getUid(this);
  v23 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v22, &val);
  v24 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v23, (const char (*)[11])" scene_id:");
  v25 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_dest_scene_ptr);
  *(_DWORD *)(v7 + 48) = Scene::getSceneId(v25);
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v24, (const unsigned int *)(v7 + 48));
  common::milog::MiLogStream::~MiLogStream(&v218);
  v5 = -1;
LABEL_313:
  StatLogUtils::ContextHolder::~ContextHolder((StatLogUtils::ContextHolder *const)(v7 + 32));
LABEL_314:
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v7 + 96));
  result = v5;
  if ( v181._M_string_length == v7 )
  {
    *(_QWORD *)((v7 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8030) = 0LL;
  }
  else
  {
    *(_QWORD *)v7 = 1172321806LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3387: range 000000001714DB54-000000001714DC4B
int32_t __cdecl Player::clearDestination(Player *const this)
{
  PlayerSceneComp *scene_comp; // [rsp+18h] [rbp-28h]
  std::shared_ptr<Scene> p_dest_scene_ptr; // [rsp+20h] [rbp-20h] BYREF

  scene_comp = Player::getSceneComp(this);
  std::shared_ptr<Scene>::shared_ptr(&p_dest_scene_ptr, 0LL);
  PlayerSceneComp::setDestScene(scene_comp, &p_dest_scene_ptr);
  std::shared_ptr<Scene>::~shared_ptr(&p_dest_scene_ptr);
  PlayerSceneComp::setDestPos(scene_comp, &Vector3::zero);
  PlayerSceneComp::setDestRot(scene_comp, &Vector3::zero);
  PlayerSceneComp::setDestEnterType(scene_comp, ENTER_NONE);
  PlayerSceneComp::setDestVisionType(scene_comp, VISION_NONE);
  PlayerSceneComp::setIsEnterRelogin(scene_comp, 0);
  PlayerSceneComp::setIsClientRelogin(scene_comp, 0);
  PlayerSceneComp::setDestEnterReason(scene_comp, ENTER_REASON_NONE);
  return 0;
};

// Line 3401: range 000000001714DC4C-000000001714E61F
void __fastcall Player::triggerEnterSceneEvent(Player *const this, ScenePtr *p_scene_ptr, proto::EnterType enter_type)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rbx
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  PlayerEventComp *EventComp; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  bool v10; // r14
  int v11; // r14d
  PlayerEventComp *v12; // r14
  std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  PlayerEventComp *v14; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  PlayerEventComp *v16; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  PlayerEventComp *v18; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // rax
  PlayerEventComp *v20; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v22; // rax
  uint32_t HomeUid; // ecx
  char v24; // al
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v25; // rax
  PlayerEventComp *v26; // r14
  PlayerWatcherComp *WatcherComp; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v28; // rax
  uint32_t SceneId; // eax
  unsigned int val; // [rsp+28h] [rbp-108h] BYREF
  data::SceneType scene_type; // [rsp+2Ch] [rbp-104h]
  std::shared_ptr<PostEnterSceneEvent> __r; // [rsp+30h] [rbp-100h] BYREF
  common::milog::MiLogStream v34; // [rsp+40h] [rbp-F0h] BYREF
  char v35[208]; // [rsp+60h] [rbp-D0h] BYREF

  v3 = (unsigned __int64)v35;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(160LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 48 4 15 enter_type:3400 64 16 14 event_ptr:3408 96 16 22 dungeon_scene_ptr:3419 128 16 13 home_ptr:3445";
  *(_QWORD *)(v3 + 16) = Player::triggerEnterSceneEvent;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -219021312;
  v5[536862723] = -219021312;
  v5[536862724] = -202178560;
  *(_DWORD *)(v3 + 48) = enter_type;
  if ( std::operator==<Scene>(p_scene_ptr, 0LL) )
  {
    common::milog::MiLogStream::create(
      &v34,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/player.cpp",
      "triggerEnterSceneEvent",
      3404);
    v6 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
           &v34,
           (const char (*)[36])"triggerEnterSceneEvent failed, uid:");
    val = Player::getUid(this);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, &val);
    common::milog::MiLogStream::~MiLogStream(&v34);
    goto LABEL_35;
  }
  v7 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_scene_ptr);
  val = Scene::getSceneId(v7);
  common::tools::perf::make_shared<PostEnterSceneEvent,unsigned int,proto::EnterType &>(
    (unsigned int *)&__r,
    (proto::EnterType *)&val,
    (unsigned int *)(v3 + 48),
    (proto::EnterType *)&val);
  std::shared_ptr<BaseEvent>::shared_ptr<PostEnterSceneEvent,void>((std::shared_ptr<BaseEvent> *const)(v3 + 64), &__r);
  std::shared_ptr<PostEnterSceneEvent>::~shared_ptr(&__r);
  if ( std::operator!=<BaseEvent>((const std::shared_ptr<BaseEvent> *)(v3 + 64), 0LL) )
  {
    EventComp = Player::getEventComp(this);
    std::shared_ptr<BaseEvent>::shared_ptr(
      (std::shared_ptr<BaseEvent> *const)&__r,
      (const std::shared_ptr<BaseEvent> *)(v3 + 64));
    PlayerEventComp::notifyEvent(EventComp, (BaseEventPtr *)&__r);
    std::shared_ptr<BaseEvent>::~shared_ptr((std::shared_ptr<BaseEvent> *const)&__r);
  }
  v9 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_scene_ptr);
  scene_type = Scene::getSceneType(v9);
  std::enable_shared_from_this<Player>::shared_from_this((std::enable_shared_from_this<Player> *const)(v3 + 96));
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_scene_ptr);
  Scene::getOwnPlayer((const Scene *const)&__r);
  v10 = std::operator==<Player,Player>(
          (const std::shared_ptr<Player> *)&__r,
          (const std::shared_ptr<Player> *)(v3 + 96));
  std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)&__r);
  std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v3 + 96));
  if ( !v10 )
    goto LABEL_21;
  if ( scene_type != SCENE_DUNGEON )
  {
    switch ( scene_type )
    {
      case SCENE_WORLD:
        v14 = Player::getEventComp(this);
        v15 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_scene_ptr);
        val = Scene::getSceneId(v15);
        common::tools::perf::make_shared<EnterMyWorldEvent,unsigned int>((unsigned int *)(v3 + 128), &val);
        std::shared_ptr<BaseEvent>::shared_ptr<EnterMyWorldEvent,void>(
          (std::shared_ptr<BaseEvent> *const)&__r,
          (std::shared_ptr<EnterMyWorldEvent> *)(v3 + 128));
        PlayerEventComp::notifyEvent(v14, (BaseEventPtr *)&__r);
        std::shared_ptr<BaseEvent>::~shared_ptr((std::shared_ptr<BaseEvent> *const)&__r);
        std::shared_ptr<EnterMyWorldEvent>::~shared_ptr((std::shared_ptr<EnterMyWorldEvent> *const)(v3 + 128));
        v16 = Player::getEventComp(this);
        v17 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_scene_ptr);
        val = Scene::getSceneId(v17);
        common::tools::perf::make_shared<EnterMyWorldSceneEvent,unsigned int>((unsigned int *)(v3 + 128), &val);
        std::shared_ptr<BaseEvent>::shared_ptr<EnterMyWorldSceneEvent,void>(
          (std::shared_ptr<BaseEvent> *const)&__r,
          (std::shared_ptr<EnterMyWorldSceneEvent> *)(v3 + 128));
        PlayerEventComp::notifyEvent(v16, (BaseEventPtr *)&__r);
        std::shared_ptr<BaseEvent>::~shared_ptr((std::shared_ptr<BaseEvent> *const)&__r);
        std::shared_ptr<EnterMyWorldSceneEvent>::~shared_ptr((std::shared_ptr<EnterMyWorldSceneEvent> *const)(v3 + 128));
        break;
      case SCENE_ROOM:
        v18 = Player::getEventComp(this);
        v19 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_scene_ptr);
        val = Scene::getSceneId(v19);
        common::tools::perf::make_shared<EnterRoomEvent,unsigned int>((unsigned int *)(v3 + 128), &val);
        std::shared_ptr<BaseEvent>::shared_ptr<EnterRoomEvent,void>(
          (std::shared_ptr<BaseEvent> *const)&__r,
          (std::shared_ptr<EnterRoomEvent> *)(v3 + 128));
        PlayerEventComp::notifyEvent(v18, (BaseEventPtr *)&__r);
        std::shared_ptr<BaseEvent>::~shared_ptr((std::shared_ptr<BaseEvent> *const)&__r);
        std::shared_ptr<EnterRoomEvent>::~shared_ptr((std::shared_ptr<EnterRoomEvent> *const)(v3 + 128));
        break;
      case SCENE_HOME_ROOM:
        v20 = Player::getEventComp(this);
        v21 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_scene_ptr);
        val = Scene::getSceneId(v21);
        common::tools::perf::make_shared<EnterHomeRoomEvent,unsigned int>((unsigned int *)(v3 + 128), &val);
        std::shared_ptr<BaseEvent>::shared_ptr<EnterHomeRoomEvent,void>(
          (std::shared_ptr<BaseEvent> *const)&__r,
          (std::shared_ptr<EnterHomeRoomEvent> *)(v3 + 128));
        PlayerEventComp::notifyEvent(v20, (BaseEventPtr *)&__r);
        std::shared_ptr<BaseEvent>::~shared_ptr((std::shared_ptr<BaseEvent> *const)&__r);
        std::shared_ptr<EnterHomeRoomEvent>::~shared_ptr((std::shared_ptr<EnterHomeRoomEvent> *const)(v3 + 128));
        break;
    }
    goto LABEL_21;
  }
  std::dynamic_pointer_cast<DungeonScene,Scene>((const std::shared_ptr<Scene> *)(v3 + 96));
  if ( std::operator==<DungeonScene>((const std::shared_ptr<DungeonScene> *)(v3 + 96), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v34,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/player.cpp",
      "triggerEnterSceneEvent",
      3422);
    common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
      &v34,
      (const char (*)[41])"dynamic_pointer_cast DungeonScene failed");
    common::milog::MiLogStream::~MiLogStream(&v34);
    v11 = 0;
  }
  else
  {
    v12 = Player::getEventComp(this);
    v13 = std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
    val = DungeonScene::getDungeonId(v13);
    common::tools::perf::make_shared<EnterDungeonEvent,unsigned int,proto::EnterType &>(
      (unsigned int *)(v3 + 128),
      (proto::EnterType *)&val,
      (unsigned int *)(v3 + 48),
      (proto::EnterType *)&val);
    std::shared_ptr<BaseEvent>::shared_ptr<EnterDungeonEvent,void>(
      (std::shared_ptr<BaseEvent> *const)&__r,
      (std::shared_ptr<EnterDungeonEvent> *)(v3 + 128));
    PlayerEventComp::notifyEvent(v12, (BaseEventPtr *)&__r);
    std::shared_ptr<BaseEvent>::~shared_ptr((std::shared_ptr<BaseEvent> *const)&__r);
    std::shared_ptr<EnterDungeonEvent>::~shared_ptr((std::shared_ptr<EnterDungeonEvent> *const)(v3 + 128));
    v11 = 1;
  }
  std::shared_ptr<DungeonScene>::~shared_ptr((std::shared_ptr<DungeonScene> *const)(v3 + 96));
  if ( v11 == 1 )
  {
LABEL_21:
    std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_scene_ptr);
    Scene::getOwnHome((const Scene *const)(v3 + 128));
    if ( !std::operator!=<Home>((const std::shared_ptr<Home> *)(v3 + 128), 0LL) )
      goto LABEL_26;
    v22 = std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Home,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
    HomeUid = Home::getHomeUid(v22);
    if ( *(_BYTE *)(((unsigned __int64)&this->uid_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->uid_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&this->uid_);
    }
    if ( HomeUid == this->uid_ )
      v24 = 1;
    else
LABEL_26:
      v24 = 0;
    if ( v24 )
    {
      if ( scene_type == SCENE_HOME_WORLD )
      {
        v25 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_scene_ptr);
        val = Scene::getSceneId(v25);
        common::tools::perf::make_shared<EnterMyHomeWorldEvent,unsigned int>((unsigned int *)&__r, &val);
        std::shared_ptr<BaseEvent>::operator=<EnterMyHomeWorldEvent>(
          (std::shared_ptr<BaseEvent> *const)(v3 + 64),
          (std::shared_ptr<EnterMyHomeWorldEvent> *)&__r);
        std::shared_ptr<EnterMyHomeWorldEvent>::~shared_ptr((std::shared_ptr<EnterMyHomeWorldEvent> *const)&__r);
        if ( std::operator!=<BaseEvent>((const std::shared_ptr<BaseEvent> *)(v3 + 64), 0LL) )
        {
          v26 = Player::getEventComp(this);
          std::shared_ptr<BaseEvent>::shared_ptr(
            (std::shared_ptr<BaseEvent> *const)&__r,
            (const std::shared_ptr<BaseEvent> *)(v3 + 64));
          PlayerEventComp::notifyEvent(v26, (BaseEventPtr *)&__r);
          std::shared_ptr<BaseEvent>::~shared_ptr((std::shared_ptr<BaseEvent> *const)&__r);
        }
      }
    }
    if ( scene_type == SCENE_HOME_ROOM )
    {
      WatcherComp = Player::getWatcherComp(this);
      v28 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_scene_ptr);
      SceneId = Scene::getSceneId(v28);
      PlayerWatcherComp::triggerHomeEnterRoom(WatcherComp, SceneId);
    }
    std::shared_ptr<Home>::~shared_ptr((std::shared_ptr<Home> *const)(v3 + 128));
  }
  std::shared_ptr<BaseEvent>::~shared_ptr((std::shared_ptr<BaseEvent> *const)(v3 + 64));
LABEL_35:
  if ( v35 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 3464: range 000000001714E75E-000000001714EEF6
int32_t __cdecl Player::notifyPlayerEnterSceneInfo(Player *const this)
{
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  common::milog::MiLogStream *v4; // rax
  int32_t v5; // r14d
  common::milog::MiLogStream *v6; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  uint32_t EntityId; // eax
  PlayerSceneComp *SceneComp; // rax
  uint32_t EnterSceneToken; // eax
  PlayerAvatarComp *AvatarComp; // r14
  common::milog::MiLogStream *v12; // rdx
  AvatarTeamEntity *v13; // rax
  common::milog::MiLogStream *v14; // r14
  std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  MPLevelEntity *v16; // r14
  proto::MPLevelEntityInfo *v17; // rax
  int32_t result; // eax
  Player *val; // [rsp+18h] [rbp-188h] BYREF
  PlayerAvatarComp *avatar_comp; // [rsp+20h] [rbp-180h]
  proto::TeamEnterSceneInfo *team_enter_info; // [rsp+28h] [rbp-178h]
  common::milog::MiLogStream v22; // [rsp+30h] [rbp-170h] BYREF
  char v23[336]; // [rsp+50h] [rbp-150h] BYREF

  v1 = (unsigned __int64)v23;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_3(288LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "5 48 16 19 cur_avatar_ptr:3465 80 16 14 scene_ptr:3471 112 16 20 team_entity_ptr:3491 144 16 24 "
                        "mp_level_entity_ptr:3504 176 72 11 notify:3478";
  *(_QWORD *)(v1 + 16) = Player::notifyPlayerEnterSceneInfo;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = 61937;
  v3[536862722] = 62194;
  v3[536862723] = 62194;
  v3[536862724] = 62194;
  v3[536862725] = 62194;
  v3[536862727] = -218103808;
  v3[536862728] = -202116109;
  Player::getCurAvatar((Player *const)(v1 + 48));
  if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v1 + 48), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v22,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "notifyPlayerEnterSceneInfo",
      3468);
    v4 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
           &v22,
           (const char (*)[23])"cur_avatar_ptr is null");
    val = this;
    common::milog::MiLogStream::operator<<<Player *,(Player **)0>(v4, &val);
    common::milog::MiLogStream::~MiLogStream(&v22);
    v5 = -1;
  }
  else
  {
    Player::getSceneComp(this);
    PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v1 + 80));
    if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v1 + 80), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v22,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/player.cpp",
        "notifyPlayerEnterSceneInfo",
        3474);
      v6 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(&v22, (const char (*)[22])off_26035000);
      val = this;
      common::milog::MiLogStream::operator<<<Player *,(Player **)0>(v6, &val);
      common::milog::MiLogStream::~MiLogStream(&v22);
      v5 = -1;
    }
    else
    {
      avatar_comp = Player::getAvatarComp(this);
      proto::PlayerEnterSceneInfoNotify::PlayerEnterSceneInfoNotify((proto::PlayerEnterSceneInfoNotify *const)(v1 + 176));
      v7 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 48));
      EntityId = Entity::getEntityId((const Entity *const)v7);
      proto::PlayerEnterSceneInfoNotify::set_cur_avatar_entity_id(
        (proto::PlayerEnterSceneInfoNotify *const)(v1 + 176),
        EntityId);
      SceneComp = Player::getSceneComp(this);
      EnterSceneToken = PlayerSceneComp::getEnterSceneToken(SceneComp);
      proto::PlayerEnterSceneInfoNotify::set_enter_scene_token(
        (proto::PlayerEnterSceneInfoNotify *const)(v1 + 176),
        EnterSceneToken);
      AvatarComp = Player::getAvatarComp(this);
      std::function<ForeachPolicy ()(Avatar &)>::function<Player::notifyPlayerEnterSceneInfo(void)::{lambda(Avatar &)#1},void,void>(
        (std::function<ForeachPolicy(Avatar&)> *const)&v22,
        (Player::notifyPlayerEnterSceneInfo::<lambda(Avatar&)>)(v1 + 176));
      PlayerAvatarComp::foreachMyAvatarInSceneTeam(AvatarComp, (std::function<ForeachPolicy(Avatar&)> *)&v22);
      std::function<ForeachPolicy ()(Avatar &)>::~function((std::function<ForeachPolicy(Avatar&)> *const)&v22);
      PlayerAvatarComp::getTeamEntity((const PlayerAvatarComp *const)(v1 + 112));
      if ( std::operator==<AvatarTeamEntity>((const std::shared_ptr<AvatarTeamEntity> *)(v1 + 112), 0LL) )
      {
        common::milog::MiLogStream::create(
          &v22,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/player.cpp",
          "notifyPlayerEnterSceneInfo",
          3494);
        v12 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                &v22,
                (const char (*)[24])"team_entity_ptr is null");
        operator<<(v12, this);
        common::milog::MiLogStream::~MiLogStream(&v22);
        v5 = -1;
      }
      else
      {
        team_enter_info = proto::PlayerEnterSceneInfoNotify::mutable_team_enter_info((proto::PlayerEnterSceneInfoNotify *const)(v1 + 176));
        v13 = std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 112));
        if ( AvatarTeamEntity::toClient(v13, team_enter_info) )
        {
          common::milog::MiLogStream::create(
            &v22,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/player.cpp",
            "notifyPlayerEnterSceneInfo",
            3500);
          v14 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                  &v22,
                  (const char (*)[15])"toClient fails");
          v15 = std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<AvatarTeamEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 112));
          common::milog::MiLogStream::operator<<<AvatarTeamEntity,(AvatarTeamEntity*)0>(v14, v15);
          common::milog::MiLogStream::~MiLogStream(&v22);
          v5 = -1;
        }
        else
        {
          std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 80));
          Scene::getOrCreateMPLevelEntity((Scene *const)(v1 + 144));
          if ( std::operator==<MPLevelEntity>(0LL, (const std::shared_ptr<MPLevelEntity> *)(v1 + 144)) )
          {
            common::milog::MiLogStream::create(
              &v22,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/player.cpp",
              "notifyPlayerEnterSceneInfo",
              3507);
            common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
              &v22,
              (const char (*)[30])"create mp level entity failed");
            common::milog::MiLogStream::~MiLogStream(&v22);
            v5 = -1;
          }
          else
          {
            v16 = std::__shared_ptr_access<MPLevelEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<MPLevelEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 144));
            v17 = proto::PlayerEnterSceneInfoNotify::mutable_mp_level_entity_info((proto::PlayerEnterSceneInfoNotify *const)(v1 + 176));
            if ( MPLevelEntity::toClient(v16, v17) )
            {
              common::milog::MiLogStream::create(
                &v22,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/player/player.cpp",
                "notifyPlayerEnterSceneInfo",
                3512);
              common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                &v22,
                (const char (*)[33])"mp level entity to client failed");
              common::milog::MiLogStream::~MiLogStream(&v22);
              v5 = -1;
            }
            else
            {
              Player::sendProto(this, (const google::protobuf::Message *)(v1 + 176));
              v5 = 0;
            }
          }
          std::shared_ptr<MPLevelEntity>::~shared_ptr((std::shared_ptr<MPLevelEntity> *const)(v1 + 144));
        }
      }
      std::shared_ptr<AvatarTeamEntity>::~shared_ptr((std::shared_ptr<AvatarTeamEntity> *const)(v1 + 112));
      proto::PlayerEnterSceneInfoNotify::~PlayerEnterSceneInfoNotify((proto::PlayerEnterSceneInfoNotify *const)(v1 + 176));
    }
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v1 + 80));
  }
  std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v1 + 48));
  result = v5;
  if ( v23 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF801C) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 3481: range 000000001714E620-000000001714E75C
ForeachPolicy __cdecl Player::notifyPlayerEnterSceneInfo(void)::{lambda(Avatar &)#1}::operator()(
        const Player::notifyPlayerEnterSceneInfo::<lambda(Avatar&)> *const __closure,
        Avatar *avatar)
{
  unsigned __int64 v2; // rax
  common::milog::MiLogStream *v3; // rdx
  proto::AvatarEnterSceneInfo *avatar_enter_info; // [rsp+18h] [rbp-38h]
  common::milog::MiLogStream v6; // [rsp+20h] [rbp-30h] BYREF

  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  avatar_enter_info = proto::PlayerEnterSceneInfoNotify::add_avatar_enter_info(__closure->__notify);
  if ( *(_BYTE *)(((unsigned __int64)avatar >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  v2 = *(_QWORD *)avatar->baseclass_0 + 464LL;
  if ( *(_BYTE *)((v2 >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  if ( !(*(unsigned int (__fastcall **)(Avatar *, proto::AvatarEnterSceneInfo *))v2)(avatar, avatar_enter_info) )
    return 0;
  common::milog::MiLogStream::create(
    &v6,
    &common::milog::MiLogDefault::default_log_obj_,
    3u,
    "./src/player/player.cpp",
    "operator()",
    3486);
  v3 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v6, (const char (*)[15])"toClient fails");
  common::milog::MiLogStream::operator<<<Avatar,(Avatar*)0>(v3, avatar);
  common::milog::MiLogStream::~MiLogStream(&v6);
  return 1;
};

// Line 3520: range 000000001714EEF7-000000001714EF55
common::milog::MiLogStream *__cdecl operator<<(common::milog::MiLogStream *stream, const Player *player)
{
  common::milog::MiLogStream *v2; // rbx
  common::milog::MiLogStream *v3; // rax
  unsigned int val[5]; // [rsp+1Ch] [rbp-14h] BYREF

  v2 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(stream, (const char (*)[6])"[uid:");
  val[0] = Player::getUid(player);
  v3 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v2, val);
  common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v3, (const char (*)[2])"]");
  return stream;
};

// Line 3527: range 000000001714EF56-000000001714F54E
int32_t __cdecl Player::sendProto(Player *const this, const google::protobuf::Message *proto)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  void (__fastcall **v5)(std::string *, const google::protobuf::Message *); // rax
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rbx
  void (__fastcall **v9)(std::string *, const google::protobuf::Message *); // rax
  int32_t v10; // r14d
  std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // r14
  PlayerSessionProxy *v16; // r14
  common::milog::MiLogStream *v17; // rax
  int32_t result; // eax
  unsigned int val; // [rsp+1Ch] [rbp-104h] BYREF
  std::shared_ptr<common::minet::Packet> p_packet_ptr; // [rsp+20h] [rbp-100h] BYREF
  common::milog::MiLogStream v21; // [rsp+30h] [rbp-F0h] BYREF
  std::string cmd_name; // [rsp+50h] [rbp-D0h] BYREF
  char v23[176]; // [rsp+70h] [rbp-B0h] BYREF

  v2 = (unsigned __int64)v23;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 11 cmd_id:3528 64 16 16 session_ptr:3534 96 16 15 packet_ptr:3541";
  *(_QWORD *)(v2 + 16) = Player::sendProto;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -219021312;
  v4[536862723] = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)proto >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  v5 = (void (__fastcall **)(std::string *, const google::protobuf::Message *))(proto->_vptr_MessageLite + 2);
  if ( *(_BYTE *)(((unsigned __int64)v5 >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  (*v5)(&cmd_name, proto);
  *(_DWORD *)(v2 + 48) = ProtoUtils::getCmdId(&cmd_name);
  std::string::~string(&cmd_name);
  if ( *(_DWORD *)(v2 + 48) )
  {
    Player::getSession((const Player *const)(v2 + 64));
    if ( std::operator==<PlayerSessionProxy>((const std::shared_ptr<PlayerSessionProxy> *)(v2 + 64), 0LL)
      || (v11 = std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64)),
          !PlayerSessionProxy::isConnected(v11)) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&cmd_name,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/player.cpp",
        "sendProto",
        3537);
      v13 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
              (common::milog::MiLogStream *const)&cmd_name,
              (const char (*)[30])"session_ptr is null, cmd_id: ");
      v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v2 + 48));
      v15 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v14, (const char (*)[7])" uid: ");
      val = Player::getUid(this);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, &val);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&cmd_name);
      v10 = -1;
    }
    else
    {
      common::minet::PacketUtils::createPacket(*(_DWORD *)(v2 + 48), proto);
      if ( std::operator==<common::minet::Packet>((const std::shared_ptr<common::minet::Packet> *)(v2 + 96), 0LL) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&cmd_name,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/player.cpp",
          "sendProto",
          3544);
        common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
          (common::milog::MiLogStream *const)&cmd_name,
          (const char (*)[19])"createPacket fails");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&cmd_name);
        v10 = -1;
      }
      else
      {
        v16 = std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
        std::shared_ptr<common::minet::Packet>::shared_ptr(
          &p_packet_ptr,
          (const std::shared_ptr<common::minet::Packet> *)(v2 + 96));
        LOBYTE(v16) = PlayerSessionProxy::sendPacket(v16, &p_packet_ptr) != 0;
        std::shared_ptr<common::minet::Packet>::~shared_ptr(&p_packet_ptr);
        if ( (_BYTE)v16 )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&cmd_name,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/player.cpp",
            "sendProto",
            3549);
          v17 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
                  (common::milog::MiLogStream *const)&cmd_name,
                  (const char (*)[41])"[NETWORK][ECS]sendPacket fails, cmd_id: ");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(v2 + 48));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&cmd_name);
          v10 = -1;
        }
        else
        {
          v10 = 0;
        }
      }
      std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v2 + 96));
    }
    std::shared_ptr<PlayerSessionProxy>::~shared_ptr((std::shared_ptr<PlayerSessionProxy> *const)(v2 + 64));
  }
  else
  {
    common::milog::MiLogStream::create(
      &v21,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "sendProto",
      3531);
    v6 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
           &v21,
           (const char (*)[22])"getCmdId failed, uid:");
    v7 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, &this->uid_);
    v8 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v7, (const char (*)[11])" cmd_name:");
    if ( *(_BYTE *)(((unsigned __int64)proto >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v9 = (void (__fastcall **)(std::string *, const google::protobuf::Message *))(proto->_vptr_MessageLite + 2);
    if ( *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    (*v9)(&cmd_name, proto);
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, &cmd_name);
    std::string::~string(&cmd_name);
    common::milog::MiLogStream::~MiLogStream(&v21);
    v10 = -1;
  }
  result = v10;
  if ( v23 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3556: range 000000001714F550-000000001714FDCC
int32_t __cdecl Player::sendMessage(
        Player *const this,
        common::minet::ConstMessagePtr *p_msg_ptr,
        const jaegertracing::SpanContext *sc_ptr)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  std::__shared_ptr_access<const google::protobuf::Message,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  unsigned __int64 v8; // rdx
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // r14
  std::__shared_ptr_access<const google::protobuf::Message,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  unsigned __int64 v13; // rdx
  std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // r14
  TracingMgr *v19; // rcx
  common::minet::Packet *v20; // r14
  PlayerSessionProxy *v21; // r14
  std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  int32_t result; // eax
  unsigned int val; // [rsp+2Ch] [rbp-124h] BYREF
  std::shared_ptr<common::minet::Packet> msg_ptr; // [rsp+30h] [rbp-120h] BYREF
  common::milog::MiLogStream v30; // [rsp+40h] [rbp-110h] BYREF
  char v31[240]; // [rsp+60h] [rbp-F0h] BYREF

  v3 = (unsigned __int64)v31;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 48 4 11 cmd_id:3562 64 16 16 session_ptr:3568 96 16 15 packet_ptr:3575 128 32 23 truncate_debug_str:3590";
  *(_QWORD *)(v3 + 16) = Player::sendMessage;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -219021312;
  v5[536862723] = -219021312;
  v5[536862725] = -202116109;
  if ( std::operator==<google::protobuf::Message const>(p_msg_ptr, 0LL) )
  {
    common::milog::MiLogStream::create(
      &v30,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/player.cpp",
      "sendMessage",
      3559);
    common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(&v30, (const char (*)[19])"msg_ptr is nullptr");
    common::milog::MiLogStream::~MiLogStream(&v30);
    v6 = -1;
  }
  else
  {
    v7 = std::__shared_ptr_access<google::protobuf::Message const,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<const google::protobuf::Message,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_msg_ptr);
    if ( *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v8 = (unsigned __int64)(v7->_vptr_MessageLite + 2);
    if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    (*(void (__fastcall **)(common::milog::MiLogStream *, std::__shared_ptr_access<const google::protobuf::Message,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *))v8)(
      &v30,
      v7);
    *(_DWORD *)(v3 + 48) = ProtoUtils::getCmdId((const std::string *)&v30);
    std::string::~string(&v30);
    if ( *(_DWORD *)(v3 + 48) )
    {
      Player::getSession((const Player *const)(v3 + 64));
      if ( std::operator==<PlayerSessionProxy>((const std::shared_ptr<PlayerSessionProxy> *)(v3 + 64), 0LL)
        || (v14 = std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64)),
            !PlayerSessionProxy::isConnected(v14)) )
      {
        common::milog::MiLogStream::create(
          &v30,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/player/player.cpp",
          "sendMessage",
          3571);
        v16 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
                &v30,
                (const char (*)[30])"session_ptr is null, cmd_id: ");
        v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v16,
                (const unsigned int *)(v3 + 48));
        v18 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v17, (const char (*)[7])" uid: ");
        val = Player::getUid(this);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, &val);
        common::milog::MiLogStream::~MiLogStream(&v30);
        v6 = -1;
      }
      else
      {
        std::shared_ptr<google::protobuf::Message const>::shared_ptr(
          (std::shared_ptr<const google::protobuf::Message> *const)&msg_ptr,
          p_msg_ptr);
        common::minet::PacketUtils::createPacket(
          v3 + 96,
          (common::minet::ConstMessagePtr)__PAIR128__(&msg_ptr, *(unsigned int *)(v3 + 48)));
        std::shared_ptr<google::protobuf::Message const>::~shared_ptr((std::shared_ptr<const google::protobuf::Message> *const)&msg_ptr);
        if ( std::operator==<common::minet::Packet>((const std::shared_ptr<common::minet::Packet> *)(v3 + 96), 0LL) )
        {
          common::milog::MiLogStream::create(
            &v30,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/player.cpp",
            "sendMessage",
            3578);
          common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
            &v30,
            (const char (*)[19])"createPacket fails");
          common::milog::MiLogStream::~MiLogStream(&v30);
          v6 = -1;
        }
        else
        {
          if ( sc_ptr )
          {
            std::string::basic_string(v3 + 128);
            v19 = std::__shared_ptr_access<TracingMgr,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TracingMgr,(__gnu_cxx::_Lock_policy)2,false,false> *const)&ResourceBox::tracing_mgr_ptr);
            TracingMgr::inject(v19, sc_ptr, (std::string *)(v3 + 128));
            v20 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
            std::string::basic_string(&v30, v3 + 128);
            common::minet::Packet::setSpanContextStr(v20, (std::string *)&v30);
            std::string::~string(&v30);
            std::string::~string((void *)(v3 + 128));
          }
          v21 = std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
          std::shared_ptr<common::minet::Packet>::shared_ptr(
            &msg_ptr,
            (const std::shared_ptr<common::minet::Packet> *)(v3 + 96));
          LOBYTE(v21) = PlayerSessionProxy::sendPacket(v21, &msg_ptr) != 0;
          std::shared_ptr<common::minet::Packet>::~shared_ptr(&msg_ptr);
          if ( (_BYTE)v21 )
          {
            v22 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
            common::minet::Packet::getProtoDebugString[abi:cxx11]((std::string *)(v3 + 128), v22);
            if ( (unsigned __int64)std::string::size(v3 + 128) > 0x1388 )
            {
              std::string::substr(&v30, v3 + 128, 0LL, 5000LL);
              std::string::operator=(v3 + 128, &v30);
              std::string::~string(&v30);
            }
            common::milog::MiLogStream::create(
              &v30,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/player.cpp",
              "sendMessage",
              3595);
            v23 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
                    &v30,
                    (const char (*)[41])"[NETWORK][ECS]sendPacket fails, cmd_id: ");
            v24 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v23,
                    (const unsigned int *)(v3 + 48));
            v25 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
                    v24,
                    (const char (*)[21])" truncate_debug_str:");
            common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v25, (const std::string *)(v3 + 128));
            common::milog::MiLogStream::~MiLogStream(&v30);
            v6 = -1;
            std::string::~string((void *)(v3 + 128));
          }
          else
          {
            v6 = 0;
          }
        }
        std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v3 + 96));
      }
      std::shared_ptr<PlayerSessionProxy>::~shared_ptr((std::shared_ptr<PlayerSessionProxy> *const)(v3 + 64));
    }
    else
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 128),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/player.cpp",
        "sendMessage",
        3565);
      v9 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
             (common::milog::MiLogStream *const)(v3 + 128),
             (const char (*)[22])"getCmdId failed, uid:");
      v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, &this->uid_);
      v11 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v10, (const char (*)[11])" cmd_name:");
      v12 = std::__shared_ptr_access<google::protobuf::Message const,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<const google::protobuf::Message,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_msg_ptr);
      if ( *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v13 = (unsigned __int64)(v12->_vptr_MessageLite + 2);
      if ( *(_BYTE *)((v13 >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      (*(void (__fastcall **)(common::milog::MiLogStream *, std::__shared_ptr_access<const google::protobuf::Message,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *))v13)(
        &v30,
        v12);
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v11, (const std::string *)&v30);
      std::string::~string(&v30);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 128));
      v6 = -1;
    }
  }
  result = v6;
  if ( v31 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3603: range 000000001714FDCE-0000000017150138
int32_t __cdecl Player::sendPacket(Player *const this, common::minet::PacketPtr *p_packet_ptr)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  common::minet::Packet *v5; // rcx
  std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  common::milog::MiLogStream *v8; // r14
  std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // r14
  int32_t v12; // r14d
  PlayerSessionProxy *v13; // r14
  int32_t result; // eax
  unsigned __int16 val; // [rsp+1Ah] [rbp-A6h] BYREF
  unsigned int Uid; // [rsp+1Ch] [rbp-A4h] BYREF
  std::shared_ptr<common::minet::Packet> v17; // [rsp+20h] [rbp-A0h] BYREF
  common::milog::MiLogStream v18; // [rsp+30h] [rbp-90h] BYREF
  char v19[112]; // [rsp+50h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 16 session_ptr:3605";
  *(_QWORD *)(v2 + 16) = Player::sendPacket;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  v5 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_packet_ptr);
  if ( *(_BYTE *)(((unsigned __int64)&this->uid_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->uid_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->uid_);
  }
  common::minet::Packet::setUserId(v5, this->uid_);
  Player::getSession((const Player *const)(v2 + 32));
  if ( std::operator==<PlayerSessionProxy>((const std::shared_ptr<PlayerSessionProxy> *)(v2 + 32), 0LL)
    || (v6 = std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32)),
        !PlayerSessionProxy::isConnected(v6)) )
  {
    common::milog::MiLogStream::create(
      &v18,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/player.cpp",
      "sendPacket",
      3608);
    v8 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
           &v18,
           (const char (*)[30])"session_ptr is null, cmd_id: ");
    v9 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_packet_ptr);
    val = common::minet::Packet::getCmdId(v9);
    v10 = common::milog::MiLogStream::operator<<<unsigned short,(unsigned short *)0>(v8, &val);
    v11 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v10, (const char (*)[7])" uid: ");
    Uid = Player::getUid(this);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, &Uid);
    common::milog::MiLogStream::~MiLogStream(&v18);
    v12 = -1;
  }
  else
  {
    v13 = std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    std::shared_ptr<common::minet::Packet>::shared_ptr(&v17, p_packet_ptr);
    LOBYTE(v13) = PlayerSessionProxy::sendPacket(v13, &v17) != 0;
    std::shared_ptr<common::minet::Packet>::~shared_ptr(&v17);
    if ( (_BYTE)v13 )
    {
      common::milog::MiLogStream::create(
        &v18,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/player.cpp",
        "sendPacket",
        3613);
      common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v18, (const char (*)[17])"sendPacket fails");
      common::milog::MiLogStream::~MiLogStream(&v18);
      v12 = -1;
    }
    else
    {
      v12 = 0;
    }
  }
  std::shared_ptr<PlayerSessionProxy>::~shared_ptr((std::shared_ptr<PlayerSessionProxy> *const)(v2 + 32));
  result = v12;
  if ( v19 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3621: range 000000001715013A-000000001715036E
int32_t __cdecl Player::addTimer(Player *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  common::tools::MiTimer *p_s_timer; // rdi
  char v5; // al
  common::milog::MiLogStream *v6; // rdx
  int32_t v7; // r14d
  int32_t result; // eax
  common::milog::MiLogStream v10; // [rsp+10h] [rbp-90h] BYREF
  char v11[112]; // [rsp+30h] [rbp-70h] BYREF

  v1 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 16 15 player_ptr:3622";
  *(_QWORD *)(v1 + 16) = Player::addTimer;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202178560;
  std::enable_shared_from_this<Player>::shared_from_this((std::enable_shared_from_this<Player> *const)(v1 + 32));
  if ( common::tools::MiTimer::isActive(&this->s_timer_) )
    goto LABEL_9;
  p_s_timer = &this->s_timer_;
  if ( *(_BYTE *)(((unsigned __int64)&this->uid_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->uid_ >> 3) + 0x7FFF8000) <= 3 )
  {
    p_s_timer = (common::tools::MiTimer *)&this->uid_;
    __asan_report_load4(&this->uid_);
  }
  if ( common::tools::MiTimer::startS(p_s_timer, 1u, 1, "./src/player/player.cpp", "addTimer", 3623, this->uid_, 0) )
    v5 = 1;
  else
LABEL_9:
    v5 = 0;
  if ( v5 )
  {
    common::milog::MiLogStream::create(
      &v10,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/player.cpp",
      "addTimer",
      3625);
    v6 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v10, (const char (*)[15])"addTimer fails");
    operator<<(v6, this);
    common::milog::MiLogStream::~MiLogStream(&v10);
    v7 = -1;
  }
  else
  {
    v7 = 0;
  }
  std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v1 + 32));
  result = v7;
  if ( v11 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3633: range 0000000017150370-0000000017150394
int32_t __cdecl Player::delTimer(Player *const this)
{
  common::tools::MiTimer::cancel(&this->s_timer_);
  return 0;
};

// Line 3639: range 0000000017150396-0000000017150903
const data::LuaShellConfig *__fastcall Player::findSuitableLuaShellConfig(
        const Player *const this,
        LuaShellIndex luashell_index)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  const data::DbLuaShellConfigMgr *p_lua_shell_mgr; // rdi
  uint32_t platform_type; // ecx
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  const data::LuaShellConfig *result; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  const data::LuaShellConfig *lua_shell_config_ptr; // [rsp+18h] [rbp-B8h]
  std::shared_ptr<Config> v28; // [rsp+20h] [rbp-B0h] BYREF
  common::milog::MiLogStream v29; // [rsp+30h] [rbp-A0h] BYREF
  char v30[128]; // [rsp+50h] [rbp-80h] BYREF
  LuaShellIndex v31; // 0:rsi.8
  LuaShellIndex v32; // 0:rsi.8

  v2 = (unsigned __int64)v30;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 32 4 7 id:3640 48 4 12 last_id:3647 64 8 19 luashell_index:3638";
  *(_QWORD *)(v2 + 16) = Player::findSuitableLuaShellConfig;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = -202116352;
  *(LuaShellIndex *)(v2 + 64) = luashell_index;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v28);
  p_lua_shell_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v28)->design_config.db_config_mgr.db_local_config_mgr.lua_shell_mgr;
  if ( *(_BYTE *)(((unsigned __int64)&this->platform_type_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->platform_type_ >> 3) + 0x7FFF8000) )
  {
    p_lua_shell_mgr = (const data::DbLuaShellConfigMgr *)&this->platform_type_;
    __asan_report_load4(&this->platform_type_);
  }
  platform_type = this->platform_type_;
  if ( *(_BYTE *)(((unsigned __int64)&this->uid_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->uid_ >> 3) + 0x7FFF8000) <= 3 )
  {
    p_lua_shell_mgr = (const data::DbLuaShellConfigMgr *)&this->uid_;
    __asan_report_load4(&this->uid_);
  }
  v31 = *(LuaShellIndex *)(v2 + 64);
  *(_DWORD *)(v2 + 32) = data::DbLuaShellConfigMgr::getPlayerMatchedId(p_lua_shell_mgr, v31, this->uid_, platform_type);
  std::shared_ptr<Config>::~shared_ptr(&v28);
  if ( *(_DWORD *)(v2 + 32) )
  {
    *(_DWORD *)(v2 + 48) = common::tools::MiscUtils::findMapWithDefaultValue<std::unordered_map<LuaShellIndex,unsigned int>>(
                             &this->last_lua_shell_send_id_map_,
                             (const std::unordered_map<LuaShellIndex,unsigned int>::key_type *)(v2 + 64),
                             0);
    if ( *(_DWORD *)(v2 + 32) == *(_DWORD *)(v2 + 48) )
    {
      common::milog::MiLogStream::create(
        &v29,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/player.cpp",
        "findSuitableLuaShellConfig",
        3650);
      v13 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
              &v29,
              (const char (*)[32])"[LUASHELL] skip luashell_index:");
      v14 = operator<<(v13, (const LuaShellIndex *)(v2 + 64));
      v15 = common::milog::MiLogStream::operator<<<char [5],(char *[5])0>(v14, (const char (*)[5])" id:");
      v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, (const unsigned int *)(v2 + 32));
      v17 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v16, (const char (*)[10])" last_id:");
      v18 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(v2 + 48));
      v19 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v18, (const char (*)[9])" player:");
      operator<<(v19, this);
      common::milog::MiLogStream::~MiLogStream(&v29);
      result = 0LL;
    }
    else
    {
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)&v28);
      v20 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v28);
      v32 = *(LuaShellIndex *)(v2 + 64);
      lua_shell_config_ptr = data::DbLuaShellConfigMgr::findLuaShellConfig(
                               &v20->design_config.db_config_mgr.db_local_config_mgr.lua_shell_mgr,
                               v32,
                               *(_DWORD *)(v2 + 32));
      std::shared_ptr<Config>::~shared_ptr(&v28);
      if ( lua_shell_config_ptr )
      {
        result = lua_shell_config_ptr;
      }
      else
      {
        common::milog::MiLogStream::create(
          &v29,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/player.cpp",
          "findSuitableLuaShellConfig",
          3657);
        v21 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
                &v29,
                (const char (*)[41])"findLuaShellConfig fail, luashell_index:");
        v22 = operator<<(v21, (const LuaShellIndex *)(v2 + 64));
        v23 = common::milog::MiLogStream::operator<<<char [5],(char *[5])0>(v22, (const char (*)[5])" id:");
        v24 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v23,
                (const unsigned int *)(v2 + 32));
        v25 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v24, (const char (*)[9])" player:");
        operator<<(v25, this);
        common::milog::MiLogStream::~MiLogStream(&v29);
        result = 0LL;
      }
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v29,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/player.cpp",
      "findSuitableLuaShellConfig",
      3643);
    v7 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
           &v29,
           (const char (*)[35])"no luashell found. luashell_index:");
    v8 = operator<<(v7, (const LuaShellIndex *)(v2 + 64));
    v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v8, (const char (*)[16])" platform_type:");
    v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, &this->platform_type_);
    v11 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v10, (const char (*)[9])" player:");
    operator<<(v11, this);
    common::milog::MiLogStream::~MiLogStream(&v29);
    result = 0LL;
  }
  if ( v30 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 3665: range 0000000017150904-0000000017150B9A
int32_t __cdecl Player::getInjectFixContent(Player *const this, uint32_t *cur_send_id, std::string *inject_fix)
{
  const data::DbInjectFixConfigMgr *p_inject_fix_config_mgr; // rdi
  uint32_t last_inject_fix_send_id; // ecx
  uint32_t platform_type; // edx
  common::milog::MiLogStream *v6; // rdx
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  uint32_t v9; // ecx
  std::shared_ptr<Config> v13; // [rsp+20h] [rbp-40h] BYREF
  common::milog::MiLogStream v14; // [rsp+30h] [rbp-30h] BYREF

  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v13);
  p_inject_fix_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v13)->design_config.db_config_mgr.db_local_config_mgr.inject_fix_config_mgr;
  if ( *(_BYTE *)(((unsigned __int64)&this->last_inject_fix_send_id_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 108) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->last_inject_fix_send_id_ >> 3)
                                                         + 0x7FFF8000) )
  {
    p_inject_fix_config_mgr = (const data::DbInjectFixConfigMgr *)&this->last_inject_fix_send_id_;
    __asan_report_load4(&this->last_inject_fix_send_id_);
  }
  last_inject_fix_send_id = this->last_inject_fix_send_id_;
  if ( *(_BYTE *)(((unsigned __int64)&this->platform_type_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->platform_type_ >> 3) + 0x7FFF8000) )
  {
    p_inject_fix_config_mgr = (const data::DbInjectFixConfigMgr *)&this->platform_type_;
    __asan_report_load4(&this->platform_type_);
  }
  platform_type = this->platform_type_;
  if ( *(_BYTE *)(((unsigned __int64)&this->uid_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->uid_ >> 3) + 0x7FFF8000) <= 3 )
  {
    p_inject_fix_config_mgr = (const data::DbInjectFixConfigMgr *)&this->uid_;
    __asan_report_load4(&this->uid_);
  }
  data::DbInjectFixConfigMgr::getPlayerSendInfo(
    p_inject_fix_config_mgr,
    this->uid_,
    platform_type,
    last_inject_fix_send_id,
    cur_send_id,
    inject_fix);
  std::shared_ptr<Config>::~shared_ptr(&v13);
  common::milog::MiLogStream::create(
    &v14,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/player/player.cpp",
    "getInjectFixContent",
    3667);
  v6 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
         &v14,
         (const char (*)[34])"[INJECT_FIX] getInjectFix cur_id:");
  v7 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, cur_send_id);
  v8 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
         v7,
         (const char (*)[27])" last_inject_fix_send_id_:");
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, &this->last_inject_fix_send_id_);
  common::milog::MiLogStream::~MiLogStream(&v14);
  if ( *(_BYTE *)(((unsigned __int64)cur_send_id >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)cur_send_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)cur_send_id >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(cur_send_id);
  }
  if ( !*cur_send_id )
    return -1;
  v9 = *cur_send_id;
  if ( *(_BYTE *)(((unsigned __int64)&this->last_inject_fix_send_id_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 108) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->last_inject_fix_send_id_ >> 3)
                                                         + 0x7FFF8000) )
  {
    __asan_report_load4(&this->last_inject_fix_send_id_);
  }
  if ( v9 == this->last_inject_fix_send_id_ )
    return -1;
  else
    return 0;
};

// Line 3679: range 0000000017150B9C-0000000017150E0B
void __cdecl Player::checkLuaShell(Player *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  uint32_t Now; // edi
  __int64 v5; // rdx
  __gnu_cxx::__normal_iterator<const LuaShellIndex*,std::vector<LuaShellIndex> >::reference v6; // rax
  _QWORD *v7; // rdx
  std::vector<LuaShellIndex>::const_iterator __for_begin; // [rsp+10h] [rbp-90h] BYREF
  std::vector<LuaShellIndex>::const_iterator __for_end; // [rsp+18h] [rbp-88h] BYREF
  const std::vector<LuaShellIndex> *__for_range; // [rsp+20h] [rbp-80h]
  const data::LuaShellConfig *lua_shell_config_ptr; // [rsp+28h] [rbp-78h]
  std::shared_ptr<Config> v13; // [rsp+30h] [rbp-70h] BYREF
  char v14[96]; // [rsp+40h] [rbp-60h] BYREF
  LuaShellIndex v15; // 0:rsi.8

  v1 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 8 19 luashell_index:3682";
  *(_QWORD *)(v1 + 16) = Player::checkLuaShell;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202116352;
  Now = common::tools::TimeUtils::getNow();
  v5 = (*(_BYTE *)(((unsigned __int64)&this->last_lua_shell_check_time_ >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)((((_BYTE)this - 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->last_lua_shell_check_time_ >> 3) + 0x7FFF8000));
  if ( (_BYTE)v5 )
  {
    Now = (_DWORD)this + 1012;
    __asan_report_store4(&this->last_lua_shell_check_time_, (((_BYTE)this - 12) & 7u) + 3, v5);
  }
  this->last_lua_shell_check_time_ = Now;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v13);
  __for_range = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v13)->design_config.db_config_mgr.db_local_config_mgr.lua_shell_mgr.luashell_index_vec;
  std::shared_ptr<Config>::~shared_ptr(&v13);
  __for_begin._M_current = std::vector<LuaShellIndex>::begin(__for_range)._M_current;
  __for_end._M_current = std::vector<LuaShellIndex>::end(__for_range)._M_current;
  while ( __gnu_cxx::operator!=<LuaShellIndex const*,std::vector<LuaShellIndex>>(&__for_begin, &__for_end) )
  {
    v6 = __gnu_cxx::__normal_iterator<LuaShellIndex const*,std::vector<LuaShellIndex>>::operator*(&__for_begin);
    v7 = v6;
    if ( ((unsigned __int8)v6 & 7) >= *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000)
      && *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000) != 0
      || *(_BYTE *)((((unsigned __int64)&v6->channel + 3) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v6 + 7) & 7) >= *(_BYTE *)((((unsigned __int64)&v6->channel + 3) >> 3) + 0x7FFF8000) )
    {
      __asan_report_load_n(v6, 8LL);
    }
    *(_QWORD *)(v1 + 32) = *v7;
    if ( *(_DWORD *)(v1 + 32) != 3 )
    {
      v15 = *(LuaShellIndex *)(v1 + 32);
      lua_shell_config_ptr = Player::findSuitableLuaShellConfig(this, v15);
      if ( lua_shell_config_ptr )
        Player::sendLuaShellAndRecord(this, lua_shell_config_ptr);
    }
    __gnu_cxx::__normal_iterator<LuaShellIndex const*,std::vector<LuaShellIndex>>::operator++(&__for_begin);
  }
  if ( v14 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 3698: range 0000000017151246-00000000171522CE
void __cdecl Player::sendLuaShellAndRecord(Player *const this, const data::LuaShellConfig *lua_shell_config)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  uint32_t protocol_type; // eax
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rdx
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rdx
  uint32_t id; // r14d
  char *v14; // rsi
  std::unordered_map<LuaShellIndex,unsigned int>::mapped_type *v15; // rax
  uint32_t *v16; // rdx
  char v17; // cl
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rdx
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rdx
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rdx
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rdx
  std::remove_reference<Player::sendLuaShellAndRecord(const data::LuaShellConfig&)::<lambda(uint64_t)>&>::type *v28; // rax
  unsigned int *v29; // r8
  std::string *v30; // r9
  const std::piecewise_construct_t *v31; // r8
  std::tuple<LuaShellIndex&> *v32; // r9
  std::tuple_element<1,std::pair<std::__detail::_Node_iterator<std::pair<const LuaShellIndex,std::tuple<unsigned int,std::string,UnixTimer> >,false,false>,bool> >::type *v33; // rax
  common::milog::MiLogStream *v35; // rax
  common::milog::MiLogStream *v36; // rax
  common::milog::MiLogStream *v37; // rax
  common::milog::MiLogStream *v38; // rax
  common::milog::MiLogStream *v39; // rax
  common::milog::MiLogStream *v40; // rax
  common::milog::MiLogStream *v41; // rdx
  std::__detail::_Node_iterator<std::pair<const LuaShellIndex,std::tuple<unsigned int,std::string,UnixTimer> >,false,false>::pointer v42; // rax
  int (**p_uid)(...); // rdi
  unsigned __int64 v44; // rax
  unsigned int (__fastcall *v45)(int (**)(...), _QWORD, _QWORD, const char *, const char *, __int64, _QWORD, _QWORD); // r10
  common::milog::MiLogStream *v46; // rax
  common::milog::MiLogStream *v47; // rax
  common::milog::MiLogStream *v48; // rdx
  common::milog::MiLogStream *v49; // rax
  common::milog::MiLogStream *v50; // rax
  common::milog::MiLogStream *v51; // rax
  common::milog::MiLogStream *v52; // rax
  common::milog::MiLogStream *v53; // rax
  common::milog::MiLogStream *v54; // rax
  common::milog::MiLogStream *v55; // rax
  common::milog::MiLogStream *v56; // rax
  common::milog::MiLogStream *v57; // rdx
  std::tuple<unsigned int&,std::string&,Player::sendLuaShellAndRecord(const data::LuaShellConfig&)::<lambda(uint64_t)>&&> *lua_shell_configb; // [rsp+0h] [rbp-270h]
  bool is_kick; // [rsp+17h] [rbp-259h]
  signed int use_type; // [rsp+18h] [rbp-258h]
  uint32_t uid; // [rsp+1Ch] [rbp-254h]
  LuaShellIndex M_cur; // [rsp+20h] [rbp-250h] BYREF
  proto::WindSeedClientNotify_AreaNotify *area_ptr; // [rsp+28h] [rbp-248h]
  const LuaShellSecurityConfig *lua_shell_security_config; // [rsp+30h] [rbp-240h]
  std::tuple_element<0,std::pair<std::__detail::_Node_iterator<std::pair<const LuaShellIndex,std::tuple<unsigned int,std::string,UnixTimer> >,false,false>,bool> >::type *iter; // [rsp+38h] [rbp-238h]
  std::tuple_element<1,std::pair<std::__detail::_Node_iterator<std::pair<const LuaShellIndex,std::tuple<unsigned int,std::string,UnixTimer> >,false,false>,bool> >::type *inserted; // [rsp+40h] [rbp-230h]
  UnixTimer *timer; // [rsp+48h] [rbp-228h]
  std::pair<std::__detail::_Node_iterator<std::pair<const LuaShellIndex,std::tuple<unsigned int,std::string,UnixTimer> >,false,false>,bool> __in; // [rsp+50h] [rbp-220h] BYREF
  std::tuple<unsigned int&,std::string&,Player::sendLuaShellAndRecord(const data::LuaShellConfig&)::<lambda(uint64_t)>&&> v71; // [rsp+60h] [rbp-210h] BYREF
  char v72[496]; // [rsp+80h] [rbp-1F0h] BYREF

  v2 = (unsigned __int64)v72;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(448LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "8 48 4 7 id:3756 64 4 20 timeout_seconds:3786 80 8 19 luashell_index:3700 112 16 15 player_wtr:3"
                        "754 144 32 12 key_str:3745 208 32 11 notify:3717 272 40 11 notify:3707 352 64 20 on_wait_timeout:3758";
  *(_QWORD *)(v2 + 16) = Player::sendLuaShellAndRecord;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = 61956;
  v4[536862722] = -234881024;
  v4[536862723] = 62194;
  v4[536862724] = 62194;
  v4[536862725] = -219021312;
  v4[536862726] = 62194;
  v4[536862727] = -219021312;
  v4[536862728] = 62194;
  v4[536862729] = -234881024;
  v4[536862730] = -218959118;
  v4[536862733] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)&lua_shell_config->use_type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)lua_shell_config - 92) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&lua_shell_config->use_type >> 3)
                                                                    + 0x7FFF8000) )
  {
    __asan_report_load4(&lua_shell_config->use_type);
  }
  use_type = lua_shell_config->use_type;
  *(_DWORD *)(v2 + 80) = 0;
  *(_DWORD *)(v2 + 84) = 0;
  *(_DWORD *)(v2 + 80) = lua_shell_config->use_type;
  if ( *(_BYTE *)(((unsigned __int64)&lua_shell_config->channel >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&lua_shell_config->channel >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&lua_shell_config->channel);
  }
  *(_DWORD *)(v2 + 84) = lua_shell_config->channel;
  if ( *(_BYTE *)(((unsigned __int64)&lua_shell_config->protocol_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&lua_shell_config->protocol_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&lua_shell_config->protocol_type);
  }
  protocol_type = lua_shell_config->protocol_type;
  if ( protocol_type )
  {
    if ( protocol_type != 1 )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 208),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/player.cpp",
        "sendLuaShellAndRecord",
        3726);
      v6 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
             (common::milog::MiLogStream *const)(v2 + 208),
             (const char (*)[23])"unknown protocol_type:");
      v7 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, &lua_shell_config->protocol_type);
      v8 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v7, (const char (*)[17])" luashell_index:");
      v9 = operator<<(v8, (const LuaShellIndex *)(v2 + 80));
      v10 = common::milog::MiLogStream::operator<<<char [5],(char *[5])0>(v9, (const char (*)[5])" id:");
      v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, &lua_shell_config->id);
      v12 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v11, (const char (*)[9])" player:");
      operator<<(v12, this);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 208));
      goto LABEL_59;
    }
    proto::WindSeedClientNotify::WindSeedClientNotify((proto::WindSeedClientNotify *const)(v2 + 208));
    area_ptr = proto::WindSeedClientNotify::mutable_area_notify((proto::WindSeedClientNotify *const)(v2 + 208));
    if ( *(_BYTE *)(((unsigned __int64)lua_shell_config >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)lua_shell_config >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(lua_shell_config);
    }
    proto::WindSeedClientNotify_AreaNotify::set_area_id(area_ptr, lua_shell_config->id);
    proto::WindSeedClientNotify_AreaNotify::set_area_code(area_ptr, &lua_shell_config->lua_shell);
    proto::WindSeedClientNotify_AreaNotify::set_area_type(area_ptr, use_type);
    Player::sendProto(this, (const google::protobuf::Message *)(v2 + 208));
    proto::WindSeedClientNotify::~WindSeedClientNotify((proto::WindSeedClientNotify *const)(v2 + 208));
  }
  else
  {
    proto::PlayerLuaShellNotify::PlayerLuaShellNotify((proto::PlayerLuaShellNotify *const)(v2 + 272));
    if ( *(_BYTE *)(((unsigned __int64)lua_shell_config >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)lua_shell_config >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(lua_shell_config);
    }
    proto::PlayerLuaShellNotify::set_id((proto::PlayerLuaShellNotify *const)(v2 + 272), lua_shell_config->id);
    proto::PlayerLuaShellNotify::set_lua_shell(
      (proto::PlayerLuaShellNotify *const)(v2 + 272),
      &lua_shell_config->lua_shell);
    proto::PlayerLuaShellNotify::set_use_type((proto::PlayerLuaShellNotify *const)(v2 + 272), use_type);
    proto::PlayerLuaShellNotify::set_shell_type(
      (proto::PlayerLuaShellNotify *const)(v2 + 272),
      (proto::LuaShellType)use_type);
    Player::sendProto(this, (const google::protobuf::Message *)(v2 + 272));
    proto::PlayerLuaShellNotify::~PlayerLuaShellNotify((proto::PlayerLuaShellNotify *const)(v2 + 272));
  }
  if ( *(_BYTE *)(((unsigned __int64)lua_shell_config >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)lua_shell_config >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(lua_shell_config);
  }
  id = lua_shell_config->id;
  v14 = (char *)(v2 + 80);
  v15 = std::unordered_map<LuaShellIndex,unsigned int>::operator[](
          &this->last_lua_shell_send_id_map_,
          (const std::unordered_map<LuaShellIndex,unsigned int>::key_type *)(v2 + 80));
  v16 = v15;
  v17 = *(_BYTE *)(((unsigned __int64)v15 >> 3) + 0x7FFF8000);
  if ( v17 != 0 && (char)(((unsigned __int8)v15 & 7) + 3) >= v17 )
  {
    LOBYTE(v14) = v17 != 0;
    __asan_report_store4(v15, v14, v15);
  }
  *v16 = id;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&__in);
  lua_shell_security_config = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&__in)->security_config.lua_shell_security_config;
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)&__in);
  if ( *(_BYTE *)(((unsigned __int64)lua_shell_security_config >> 3) + 0x7FFF8000) != 0
    && ((unsigned __int8)lua_shell_security_config & 7) >= *(_BYTE *)(((unsigned __int64)lua_shell_security_config >> 3)
                                                                    + 0x7FFF8000) )
  {
    __asan_report_load1(lua_shell_security_config);
  }
  if ( !lua_shell_security_config->is_check_timeout_open )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 208),
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/player.cpp",
      "sendLuaShellAndRecord",
      3737);
    v18 = common::milog::MiLogStream::operator<<<char [53],(char *[53])0>(
            (common::milog::MiLogStream *const)(v2 + 208),
            (const char (*)[53])off_26035B60);
    v19 = operator<<(v18, (const LuaShellIndex *)(v2 + 80));
    v20 = common::milog::MiLogStream::operator<<<char [5],(char *[5])0>(v19, (const char (*)[5])" id:");
    v21 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v20, &lua_shell_config->id);
    v22 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v21, (const char (*)[9])" player:");
    operator<<(v22, this);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 208));
  }
  else
  {
    if ( *(char *)(((unsigned __int64)&lua_shell_config->is_check_client_report >> 3) + 0x7FFF8000) < 0 )
      __asan_report_load1(&lua_shell_config->is_check_client_report);
    if ( lua_shell_config->is_check_client_report )
    {
      std::string::basic_string(v2 + 144, &lua_shell_config->check_json_key_str);
      if ( (unsigned __int8)std::string::empty(v2 + 144) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 208),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/player.cpp",
          "sendLuaShellAndRecord",
          3748);
        v23 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 208),
                (const char (*)[16])"luashell_index:");
        v24 = operator<<(v23, (const LuaShellIndex *)(v2 + 80));
        v25 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v24, (const char (*)[15])" lua_shell_id:");
        v26 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v25, &lua_shell_config->id);
        v27 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
                v26,
                (const char (*)[38])" check_json_key_str is empty. player:");
        operator<<(v27, this);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 208));
      }
      else
      {
        std::unordered_map<LuaShellIndex,std::tuple<unsigned int,std::string,UnixTimer>>::erase(
          &this->awaiting_lua_shell_timer_map_,
          (const std::unordered_map<LuaShellIndex,std::tuple<unsigned int,std::string,UnixTimer>>::key_type *)(v2 + 80));
        std::enable_shared_from_this<Player>::weak_from_this((std::enable_shared_from_this<Player> *const)(v2 + 112));
        if ( *(_BYTE *)(((unsigned __int64)&this->uid_ >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&this->uid_ >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&this->uid_);
        }
        uid = this->uid_;
        if ( *(_BYTE *)(((unsigned __int64)lua_shell_config >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)lua_shell_config >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(lua_shell_config);
        }
        *(_DWORD *)(v2 + 48) = lua_shell_config->id;
        if ( *(_BYTE *)(((unsigned __int64)&lua_shell_config->is_kick >> 3) + 0x7FFF8000) != 0
          && (((unsigned __int8)lua_shell_config - 87) & 7) >= *(_BYTE *)(((unsigned __int64)&lua_shell_config->is_kick >> 3)
                                                                        + 0x7FFF8000) )
        {
          __asan_report_load1(&lua_shell_config->is_kick);
        }
        is_kick = lua_shell_config->is_kick;
        std::weak_ptr<Player>::weak_ptr(
          (std::weak_ptr<Player> *const)(v2 + 352),
          (const std::weak_ptr<Player> *)(v2 + 112));
        *(_DWORD *)(v2 + 368) = uid;
        *(_DWORD *)(v2 + 372) = use_type;
        *(_DWORD *)(v2 + 376) = *(_DWORD *)(v2 + 48);
        *(_BYTE *)(v2 + 380) = is_kick;
        std::string::basic_string(v2 + 384, v2 + 144);
        v28 = std::move<Player::sendLuaShellAndRecord(data::LuaShellConfig const&)::{lambda(unsigned long)#1} &>((Player::sendLuaShellAndRecord::<lambda(uint64_t)> *)(v2 + 352));
        std::forward_as_tuple<unsigned int &,std::string &,Player::sendLuaShellAndRecord(data::LuaShellConfig const&)::{lambda(unsigned long)#1}>(
          &v71,
          (unsigned int *)(v2 + 48),
          (std::string *)(v2 + 144),
          v28,
          v29,
          v30,
          (Player::sendLuaShellAndRecord::<lambda(uint64_t)> *)lua_shell_config);
        std::forward_as_tuple<LuaShellIndex &>(&M_cur, (LuaShellIndex *)(v2 + 80));
        __in = std::unordered_map<LuaShellIndex,std::tuple<unsigned int,std::string,UnixTimer>>::emplace<std::piecewise_construct_t const&,std::tuple<LuaShellIndex&>,std::tuple<unsigned int &,std::string&,Player::sendLuaShellAndRecord(data::LuaShellConfig const&)::{lambda(unsigned long)#1} &&>>(
                 &this->awaiting_lua_shell_timer_map_,
                 &std::piecewise_construct,
                 (std::tuple<LuaShellIndex&> *)&M_cur,
                 &v71,
                 v31,
                 v32,
                 lua_shell_configb);
        iter = std::get<0ul,std::__detail::_Node_iterator<std::pair<LuaShellIndex const,std::tuple<unsigned int,std::string,UnixTimer>>,false,false>,bool>(&__in);
        v33 = std::get<1ul,std::__detail::_Node_iterator<std::pair<LuaShellIndex const,std::tuple<unsigned int,std::string,UnixTimer>>,false,false>,bool>(&__in);
        inserted = v33;
        if ( *(_BYTE *)(((unsigned __int64)v33 >> 3) + 0x7FFF8000) != 0
          && ((unsigned __int8)v33 & 7) >= *(_BYTE *)(((unsigned __int64)v33 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load1(v33);
        }
        if ( !*inserted
          || (M_cur = (LuaShellIndex)std::unordered_map<LuaShellIndex,std::tuple<unsigned int,std::string,UnixTimer>>::end(&this->awaiting_lua_shell_timer_map_)._M_cur,
              std::__detail::operator==<std::pair<LuaShellIndex const,std::tuple<unsigned int,std::string,UnixTimer>>,false>(
                iter,
                (const std::__detail::_Node_iterator_base<std::pair<const LuaShellIndex,std::tuple<unsigned int,std::string,UnixTimer> >,false> *)&M_cur)) )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 208),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/player/player.cpp",
            "sendLuaShellAndRecord",
            3782);
          v35 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
                  (common::milog::MiLogStream *const)(v2 + 208),
                  (const char (*)[35])"insert timer fail, luashell_index:");
          v36 = operator<<(v35, (const LuaShellIndex *)(v2 + 80));
          v37 = common::milog::MiLogStream::operator<<<char [5],(char *[5])0>(v36, (const char (*)[5])" id:");
          v38 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v37,
                  (const unsigned int *)(v2 + 48));
          v39 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v38, (const char (*)[11])" json_key:");
          v40 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                  v39,
                  (const std::string *)(v2 + 144));
          v41 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v40, (const char (*)[9])" player:");
          operator<<(v41, this);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 208));
        }
        else
        {
          v42 = std::__detail::_Node_iterator<std::pair<LuaShellIndex const,std::tuple<unsigned int,std::string,UnixTimer>>,false,false>::operator->(iter);
          timer = std::get<2ul,unsigned int,std::string,UnixTimer>(&v42->second);
          if ( *(_BYTE *)(((unsigned __int64)&lua_shell_security_config->lua_shell_timeout_seconds >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)lua_shell_security_config + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&lua_shell_security_config->lua_shell_timeout_seconds >> 3)
                                                                                    + 0x7FFF8000) )
          {
            __asan_report_load4(&lua_shell_security_config->lua_shell_timeout_seconds);
          }
          *(_DWORD *)(v2 + 64) = lua_shell_security_config->lua_shell_timeout_seconds;
          p_uid = (int (**)(...))timer;
          if ( *(_BYTE *)(((unsigned __int64)timer >> 3) + 0x7FFF8000) )
          {
            p_uid = (int (**)(...))timer;
            __asan_report_load8();
          }
          v44 = (unsigned __int64)(timer->_vptr_MiTimer + 2);
          if ( *(_BYTE *)((v44 >> 3) + 0x7FFF8000) )
          {
            p_uid = timer->_vptr_MiTimer + 2;
            __asan_report_load8();
          }
          v45 = *(unsigned int (__fastcall **)(int (**)(...), _QWORD, _QWORD, const char *, const char *, __int64, _QWORD, _QWORD))v44;
          if ( *(_BYTE *)(((unsigned __int64)&this->uid_ >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&this->uid_ >> 3) + 0x7FFF8000) <= 3 )
          {
            p_uid = (int (**)(...))&this->uid_;
            __asan_report_load4(&this->uid_);
          }
          if ( v45(
                 p_uid,
                 *(unsigned int *)(v2 + 64),
                 0LL,
                 "./src/player/player.cpp",
                 "sendLuaShellAndRecord",
                 3787LL,
                 this->uid_,
                 0LL) )
          {
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 208),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/player.cpp",
              "sendLuaShellAndRecord",
              3789);
            v46 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
                    (common::milog::MiLogStream *const)(v2 + 208),
                    (const char (*)[30])"startS fail, timeout_seconds:");
            v47 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v46,
                    (const unsigned int *)(v2 + 64));
            v48 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v47, (const char (*)[9])" player:");
            operator<<(v48, this);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 208));
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 208),
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/player/player.cpp",
            "sendLuaShellAndRecord",
            3791);
          v49 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
                  (common::milog::MiLogStream *const)(v2 + 208),
                  (const char (*)[39])off_26035D80);
          v50 = operator<<(v49, (const LuaShellIndex *)(v2 + 80));
          v51 = common::milog::MiLogStream::operator<<<char [5],(char *[5])0>(v50, (const char (*)[5])" id:");
          v52 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v51,
                  (const unsigned int *)(v2 + 48));
          v53 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v52, (const char (*)[11])" json_key:");
          v54 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                  v53,
                  (const std::string *)(v2 + 144));
          v55 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                  v54,
                  (const char (*)[18])" timeout_seconds:");
          v56 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v55,
                  (const unsigned int *)(v2 + 64));
          v57 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v56, (const char (*)[9])" player:");
          operator<<(v57, this);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 208));
        }
        Player::sendLuaShellAndRecord(data::LuaShellConfig const&)::{lambda(unsigned long)#1}::~LuaShellConfig((Player::sendLuaShellAndRecord::<lambda(uint64_t)> *const)(v2 + 352));
        std::weak_ptr<Player>::~weak_ptr((std::weak_ptr<Player> *const)(v2 + 112));
      }
      std::string::~string((void *)(v2 + 144));
    }
  }
LABEL_59:
  if ( v72 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8034) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 3758: range 00000000171FA520-00000000171FA74F
void __cdecl Player::sendLuaShellAndRecord(data::LuaShellConfig const&)::{lambda(unsigned long)#1}::LuaShellConfig(
        Player::sendLuaShellAndRecord::<lambda(uint64_t)> *const this,
        Player::sendLuaShellAndRecord::<lambda(uint64_t)> *a2)
{
  uint32_t uid; // ecx
  char v3; // al
  __int64 v4; // rsi
  uint32_t use_type; // ecx
  char v6; // dl
  __int64 v7; // rdx
  uint32_t id; // ecx
  char v9; // al
  __int64 v10; // rsi
  bool is_kick; // cl
  char v12; // dl
  __int64 v13; // rdx
  Player::sendLuaShellAndRecord::<lambda(uint64_t)> *v14; // [rsp+0h] [rbp-10h]

  v14 = a2;
  std::weak_ptr<Player>::weak_ptr(&this->__player_wtr, &a2->__player_wtr);
  if ( *(_BYTE *)(((unsigned __int64)&v14->__uid >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v14->__uid >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->__uid);
  }
  uid = a2->__uid;
  v3 = *(_BYTE *)(((unsigned __int64)&this->__uid >> 3) + 0x7FFF8000);
  if ( v3 != 0 && v3 <= 3 )
  {
    LOBYTE(a2) = v3 != 0;
    __asan_report_store4(&this->__uid, a2, &this->__uid);
  }
  this->__uid = uid;
  v4 = (((_BYTE)v14 + 20) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&v14->__use_type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v14 + 20) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v14->__use_type >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v14->__use_type);
  }
  use_type = v14->__use_type;
  v6 = *(_BYTE *)(((unsigned __int64)&this->__use_type >> 3) + 0x7FFF8000);
  LOBYTE(v4) = v6 != 0;
  v7 = (v6 != 0) & (unsigned __int8)((char)((((_BYTE)this + 20) & 7) + 3) >= v6);
  if ( (_BYTE)v7 )
    __asan_report_store4(&this->__use_type, v4, v7);
  this->__use_type = use_type;
  if ( *(_BYTE *)(((unsigned __int64)&v14->__id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v14->__id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v14->__id);
  }
  id = v14->__id;
  v9 = *(_BYTE *)(((unsigned __int64)&this->__id >> 3) + 0x7FFF8000);
  if ( v9 != 0 && v9 <= 3 )
  {
    LOBYTE(v4) = v9 != 0;
    __asan_report_store4(&this->__id, v4, &this->__id);
  }
  this->__id = id;
  v10 = ((_BYTE)v14 + 28) & 7;
  if ( *(_BYTE *)(((unsigned __int64)&v14->__is_kick >> 3) + 0x7FFF8000) != 0
    && (char)v10 >= *(_BYTE *)(((unsigned __int64)&v14->__is_kick >> 3) + 0x7FFF8000) )
  {
    __asan_report_load1(&v14->__is_kick);
  }
  is_kick = v14->__is_kick;
  v12 = *(_BYTE *)(((unsigned __int64)&this->__is_kick >> 3) + 0x7FFF8000);
  LOBYTE(v10) = v12 != 0;
  v13 = (v12 != 0) & (unsigned __int8)((((unsigned __int8)this + 28) & 7) >= v12);
  if ( (_BYTE)v13 )
    __asan_report_store1(&this->__is_kick, v10, v13);
  this->__is_kick = is_kick;
  std::string::basic_string(&this->__key_str, &v14->__key_str);
};

// Line 3758: range 00000000171FAB2C-00000000171FAD7E
void __cdecl Player::sendLuaShellAndRecord(data::LuaShellConfig const&)::{lambda(unsigned long)#1}::LuaShellConfig(
        Player::sendLuaShellAndRecord::<lambda(uint64_t)> *const this,
        const Player::sendLuaShellAndRecord::<lambda(uint64_t)> *a2)
{
  uint32_t uid; // ecx
  char v3; // al
  __int64 v4; // rsi
  uint32_t use_type; // ecx
  char v6; // dl
  __int64 v7; // rdx
  uint32_t id; // ecx
  char v9; // al
  __int64 v10; // rsi
  bool is_kick; // cl
  char v12; // dl
  __int64 v13; // rdx
  const Player::sendLuaShellAndRecord::<lambda(uint64_t)> *v14; // [rsp+0h] [rbp-20h]

  v14 = a2;
  std::weak_ptr<Player>::weak_ptr(&this->__player_wtr, &a2->__player_wtr);
  if ( *(_BYTE *)(((unsigned __int64)&v14->__uid >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v14->__uid >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->__uid);
  }
  uid = a2->__uid;
  v3 = *(_BYTE *)(((unsigned __int64)&this->__uid >> 3) + 0x7FFF8000);
  if ( v3 != 0 && v3 <= 3 )
  {
    LOBYTE(a2) = v3 != 0;
    __asan_report_store4(&this->__uid, a2, &this->__uid);
  }
  this->__uid = uid;
  v4 = (((_BYTE)v14 + 20) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&v14->__use_type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v14 + 20) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v14->__use_type >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v14->__use_type);
  }
  use_type = v14->__use_type;
  v6 = *(_BYTE *)(((unsigned __int64)&this->__use_type >> 3) + 0x7FFF8000);
  LOBYTE(v4) = v6 != 0;
  v7 = (v6 != 0) & (unsigned __int8)((char)((((_BYTE)this + 20) & 7) + 3) >= v6);
  if ( (_BYTE)v7 )
    __asan_report_store4(&this->__use_type, v4, v7);
  this->__use_type = use_type;
  if ( *(_BYTE *)(((unsigned __int64)&v14->__id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v14->__id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v14->__id);
  }
  id = v14->__id;
  v9 = *(_BYTE *)(((unsigned __int64)&this->__id >> 3) + 0x7FFF8000);
  if ( v9 != 0 && v9 <= 3 )
  {
    LOBYTE(v4) = v9 != 0;
    __asan_report_store4(&this->__id, v4, &this->__id);
  }
  this->__id = id;
  v10 = ((_BYTE)v14 + 28) & 7;
  if ( *(_BYTE *)(((unsigned __int64)&v14->__is_kick >> 3) + 0x7FFF8000) != 0
    && (char)v10 >= *(_BYTE *)(((unsigned __int64)&v14->__is_kick >> 3) + 0x7FFF8000) )
  {
    __asan_report_load1(&v14->__is_kick);
  }
  is_kick = v14->__is_kick;
  v12 = *(_BYTE *)(((unsigned __int64)&this->__is_kick >> 3) + 0x7FFF8000);
  LOBYTE(v10) = v12 != 0;
  v13 = (v12 != 0) & (unsigned __int8)((((unsigned __int8)this + 28) & 7) >= v12);
  if ( (_BYTE)v13 )
    __asan_report_store1(&this->__is_kick, v10, v13);
  this->__is_kick = is_kick;
  std::string::basic_string(&this->__key_str, &v14->__key_str);
};

// Line 3758: range 0000000017150E0C-0000000017151219
void __cdecl Player::sendLuaShellAndRecord(data::LuaShellConfig const&)::{lambda(unsigned long)#1}::operator()(
        const Player::sendLuaShellAndRecord::<lambda(uint64_t)> *const __closure,
        uint64_t timestamp)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  common::milog::MiLogStream *v5; // rax
  std::__shared_ptr_access<proto_log::AntiCheatBodyLuaShellClientNotifyTimeout,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rcx
  std::__shared_ptr_access<proto_log::AntiCheatBodyLuaShellClientNotifyTimeout,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rcx
  std::__shared_ptr_access<proto_log::AntiCheatBodyLuaShellClientNotifyTimeout,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rcx
  std::__shared_ptr_access<proto_log::AntiCheatBodyLuaShellClientNotifyTimeout,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  Player *v10; // r14
  Player *v11; // rax
  std::shared_ptr<google::protobuf::Message> p_body_ptr; // [rsp+10h] [rbp-C0h] BYREF
  common::milog::MiLogStream v13; // [rsp+20h] [rbp-B0h] BYREF
  char v14[144]; // [rsp+40h] [rbp-90h] BYREF

  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 16 15 player_ptr:3760 64 16 12 log_ptr:3766";
  *(_QWORD *)(v2 + 16) = Player::sendLuaShellAndRecord(data::LuaShellConfig const&)::{lambda(unsigned long)#1}::operator();
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862722] = -202178560;
  std::weak_ptr<Player>::lock((const std::weak_ptr<Player> *const)(v2 + 32));
  if ( std::operator==<Player>(0LL, (const std::shared_ptr<Player> *)(v2 + 32)) )
  {
    common::milog::MiLogStream::create(
      &v13,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/player.cpp",
      "operator()",
      3763);
    v5 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
           &v13,
           (const char (*)[21])"player is null, uid:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, &__closure->__uid);
    common::milog::MiLogStream::~MiLogStream(&v13);
  }
  else
  {
    common::tools::perf::make_shared<proto_log::AntiCheatBodyLuaShellClientNotifyTimeout>();
    v6 = std::__shared_ptr_access<proto_log::AntiCheatBodyLuaShellClientNotifyTimeout,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyLuaShellClientNotifyTimeout,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
    if ( *(_BYTE *)(((unsigned __int64)&__closure->__use_type >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)__closure + 20) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&__closure->__use_type >> 3)
                                                               + 0x7FFF8000) )
    {
      __asan_report_load4(&__closure->__use_type);
    }
    proto_log::AntiCheatBodyLuaShellClientNotifyTimeout::set_use_type(v6, __closure->__use_type);
    v7 = std::__shared_ptr_access<proto_log::AntiCheatBodyLuaShellClientNotifyTimeout,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyLuaShellClientNotifyTimeout,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
    if ( *(_BYTE *)(((unsigned __int64)&__closure->__id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&__closure->__id >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&__closure->__id);
    }
    proto_log::AntiCheatBodyLuaShellClientNotifyTimeout::set_lua_shell_id(v7, __closure->__id);
    v8 = std::__shared_ptr_access<proto_log::AntiCheatBodyLuaShellClientNotifyTimeout,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyLuaShellClientNotifyTimeout,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
    if ( *(_BYTE *)(((unsigned __int64)&__closure->__is_kick >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)__closure + 28) & 7) >= *(_BYTE *)(((unsigned __int64)&__closure->__is_kick >> 3)
                                                             + 0x7FFF8000) )
    {
      __asan_report_load1(&__closure->__is_kick);
    }
    proto_log::AntiCheatBodyLuaShellClientNotifyTimeout::set_is_kick(v8, __closure->__is_kick);
    v9 = std::__shared_ptr_access<proto_log::AntiCheatBodyLuaShellClientNotifyTimeout,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyLuaShellClientNotifyTimeout,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
    proto_log::AntiCheatBodyLuaShellClientNotifyTimeout::set_check_json_key(v9, &__closure->__key_str);
    v10 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    std::shared_ptr<google::protobuf::Message>::shared_ptr<proto_log::AntiCheatBodyLuaShellClientNotifyTimeout,void>(
      &p_body_ptr,
      (const std::shared_ptr<proto_log::AntiCheatBodyLuaShellClientNotifyTimeout> *)(v2 + 64));
    Player::printAntiCheatLog(v10, ANTI_CHEAT_ACTION_LUA_SHELL_CLIENT_NOTIFY_TIMEOUT, &p_body_ptr);
    std::shared_ptr<google::protobuf::Message>::~shared_ptr(&p_body_ptr);
    if ( *(_BYTE *)(((unsigned __int64)&__closure->__is_kick >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)__closure + 28) & 7) >= *(_BYTE *)(((unsigned __int64)&__closure->__is_kick >> 3)
                                                             + 0x7FFF8000) )
    {
      __asan_report_load1(&__closure->__is_kick);
    }
    if ( __closure->__is_kick )
    {
      v11 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
      Player::disconnectSession(v11, 0x10u);
    }
    std::shared_ptr<proto_log::AntiCheatBodyLuaShellClientNotifyTimeout>::~shared_ptr((std::shared_ptr<proto_log::AntiCheatBodyLuaShellClientNotifyTimeout> *const)(v2 + 64));
  }
  std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v2 + 32));
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 3758: range 000000001715121A-0000000017151244
void __cdecl Player::sendLuaShellAndRecord(data::LuaShellConfig const&)::{lambda(unsigned long)#1}::~LuaShellConfig(
        Player::sendLuaShellAndRecord::<lambda(uint64_t)> *const this)
{
  std::string::~string(&this->__key_str);
  std::weak_ptr<Player>::~weak_ptr(&this->__player_wtr);
};

// Line 3796: range 00000000171522F6-0000000017152BCC
void __cdecl Player::checkAwaitingLuaShell(Player *const this, const std::string *report_value)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  unsigned __int64 v5; // rax
  size_t v6; // rax
  size_t v7; // r14
  unsigned __int64 v9; // rax
  uint8_t *v10; // rdx
  unsigned __int64 v11; // rax
  uint8_t *v12; // rdx
  unsigned __int8 *M_current; // r14
  std::vector<unsigned char>::iterator v14; // rax
  std::vector<unsigned char>::size_type v15; // rax
  __gnu_cxx::__normal_iterator<unsigned char*,std::vector<unsigned char> >::reference v16; // rax
  uint8_t *v17; // rdx
  __gnu_cxx::__normal_iterator<char*,std::string > v18; // r14
  __gnu_cxx::__normal_iterator<char*,std::string > v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rdx
  std::__detail::_Node_iterator<std::pair<const LuaShellIndex,std::tuple<unsigned int,std::string,UnixTimer> >,false,false>::pointer v23; // rax
  std::__tuple_element_t_136 *v24; // rax
  _DWORD *v25; // rdx
  std::__detail::_Node_iterator<std::pair<const LuaShellIndex,std::tuple<unsigned int,std::string,UnixTimer> >,false,false>::pointer v26; // rax
  std::__tuple_element_t_135 *v27; // rax
  bool v28; // r14
  common::milog::MiLogStream *v29; // r14
  std::__detail::_Node_iterator<std::pair<const LuaShellIndex,std::tuple<unsigned int,std::string,UnixTimer> >,false,false>::pointer v30; // rax
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rax
  common::milog::MiLogStream *v36; // rdx
  std::vector<unsigned char>::value_type __x; // [rsp+13h] [rbp-1EDh] BYREF
  uint8_t ch_0; // [rsp+14h] [rbp-1ECh]
  uint8_t byte; // [rsp+15h] [rbp-1EBh]
  uint8_t b1; // [rsp+16h] [rbp-1EAh]
  uint8_t b2; // [rsp+17h] [rbp-1E9h]
  std::vector<unsigned char>::iterator __for_end; // [rsp+18h] [rbp-1E8h] BYREF
  size_t i; // [rsp+20h] [rbp-1E0h]
  std::vector<unsigned char> *__for_range; // [rsp+28h] [rbp-1D8h]
  std::string __lhs; // [rsp+30h] [rbp-1D0h] BYREF
  std::string v46; // [rsp+50h] [rbp-1B0h] BYREF
  std::string __rhs; // [rsp+70h] [rbp-190h] BYREF
  common::milog::MiLogStream v48; // [rsp+90h] [rbp-170h] BYREF
  char v49[336]; // [rsp+B0h] [rbp-150h] BYREF

  v2 = (unsigned __int64)v49;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(288LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "6 32 1 13 from_hex:3801 48 4 7 id:3826 64 8 9 iter:3824 96 24 10 bytes:3805 160 32 13 json_str:3"
                        "815 224 32 17 json_key_str:3827";
  *(_QWORD *)(v2 + 16) = Player::checkAwaitingLuaShell;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556927;
  v4[536862722] = -218959360;
  v4[536862723] = -234881024;
  v4[536862724] = -218959118;
  v4[536862726] = -218959118;
  v4[536862728] = -202116109;
  if ( !std::unordered_map<LuaShellIndex,std::tuple<unsigned int,std::string,UnixTimer>>::empty(&this->awaiting_lua_shell_timer_map_) )
  {
    std::vector<unsigned char>::vector((std::vector<unsigned char> *const)(v2 + 96));
    v5 = std::string::size(report_value);
    std::vector<unsigned char>::reserve((std::vector<unsigned char> *const)(v2 + 96), v5 >> 1);
    for ( i = 0LL; ; i += 2LL )
    {
      v6 = std::string::size(report_value);
      if ( i >= v6 )
        break;
      v7 = i + 1;
      if ( v7 >= std::string::size(report_value) )
        break;
      v9 = std::string::operator[](report_value, i);
      v10 = (uint8_t *)v9;
      if ( *(_BYTE *)((v9 >> 3) + 0x7FFF8000) != 0 && (char)(v9 & 7) >= *(_BYTE *)((v9 >> 3) + 0x7FFF8000) )
        __asan_report_load1(v9);
      b1 = Player::checkAwaitingLuaShell(std::string const&)::{lambda(unsigned char)#1}::operator()(
             (const Player::checkAwaitingLuaShell::<lambda(uint8_t)> *const)(v2 + 32),
             *v10);
      v11 = std::string::operator[](report_value, i + 1);
      v12 = (uint8_t *)v11;
      if ( *(_BYTE *)((v11 >> 3) + 0x7FFF8000) != 0 && (char)(v11 & 7) >= *(_BYTE *)((v11 >> 3) + 0x7FFF8000) )
        __asan_report_load1(v11);
      b2 = Player::checkAwaitingLuaShell(std::string const&)::{lambda(unsigned char)#1}::operator()(
             (const Player::checkAwaitingLuaShell::<lambda(uint8_t)> *const)(v2 + 32),
             *v12);
      __x = (16 * b1) | b2;
      std::vector<unsigned char>::push_back((std::vector<unsigned char> *const)(v2 + 96), &__x);
    }
    ch_0 = -93;
    M_current = std::vector<unsigned char>::end((std::vector<unsigned char> *const)(v2 + 96))._M_current;
    v14._M_current = std::vector<unsigned char>::begin((std::vector<unsigned char> *const)(v2 + 96))._M_current;
    std::reverse<__gnu_cxx::__normal_iterator<unsigned char *,std::vector<unsigned char>>>(
      v14,
      (__gnu_cxx::__normal_iterator<unsigned char*,std::vector<unsigned char> >)M_current);
    std::string::basic_string(v2 + 160);
    v15 = std::vector<unsigned char>::size((const std::vector<unsigned char> *const)(v2 + 96));
    std::string::reserve(v2 + 160, v15);
    __for_range = (std::vector<unsigned char> *)(v2 + 96);
    *(std::vector<unsigned char>::iterator *)(v2 + 64) = std::vector<unsigned char>::begin((std::vector<unsigned char> *const)(v2 + 96));
    __for_end._M_current = std::vector<unsigned char>::end(__for_range)._M_current;
    while ( __gnu_cxx::operator!=<unsigned char *,std::vector<unsigned char>>(
              (const __gnu_cxx::__normal_iterator<unsigned char*,std::vector<unsigned char> > *)(v2 + 64),
              &__for_end) )
    {
      v16 = __gnu_cxx::__normal_iterator<unsigned char *,std::vector<unsigned char>>::operator*((const __gnu_cxx::__normal_iterator<unsigned char*,std::vector<unsigned char> > *const)(v2 + 64));
      v17 = v16;
      if ( *(_BYTE *)(((unsigned __int64)v16 >> 3) + 0x7FFF8000) != 0
        && ((unsigned __int8)v16 & 7) >= *(_BYTE *)(((unsigned __int64)v16 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load1(v16);
      }
      byte = *v17;
      ch_0 ^= byte;
      std::string::push_back(v2 + 160, (unsigned int)(char)ch_0);
      __gnu_cxx::__normal_iterator<unsigned char *,std::vector<unsigned char>>::operator++((__gnu_cxx::__normal_iterator<unsigned char*,std::vector<unsigned char> > *const)(v2 + 64));
    }
    v18._M_current = (char *)std::string::end(v2 + 160);
    v19._M_current = (char *)std::string::begin(v2 + 160);
    std::reverse<__gnu_cxx::__normal_iterator<char *,std::string>>(v19, v18);
    common::milog::MiLogStream::create(
      &v48,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/player.cpp",
      "checkAwaitingLuaShell",
      3823);
    v20 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(&v48, (const char (*)[10])"json_str:");
    v21 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v20, (const std::string *)(v2 + 160));
    v22 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v21, (const char (*)[9])" player:");
    operator<<(v22, this);
    common::milog::MiLogStream::~MiLogStream(&v48);
    *(std::unordered_map<LuaShellIndex,std::tuple<unsigned int,std::string,UnixTimer>>::iterator *)(v2 + 64) = std::unordered_map<LuaShellIndex,std::tuple<unsigned int,std::string,UnixTimer>>::begin(&this->awaiting_lua_shell_timer_map_);
    while ( 1 )
    {
      __for_end._M_current = (unsigned __int8 *)std::unordered_map<LuaShellIndex,std::tuple<unsigned int,std::string,UnixTimer>>::end(&this->awaiting_lua_shell_timer_map_)._M_cur;
      if ( !std::__detail::operator!=<std::pair<LuaShellIndex const,std::tuple<unsigned int,std::string,UnixTimer>>,false>(
              (const std::__detail::_Node_iterator_base<std::pair<const LuaShellIndex,std::tuple<unsigned int,std::string,UnixTimer> >,false> *)(v2 + 64),
              (const std::__detail::_Node_iterator_base<std::pair<const LuaShellIndex,std::tuple<unsigned int,std::string,UnixTimer> >,false> *)&__for_end) )
        break;
      v23 = std::__detail::_Node_iterator<std::pair<LuaShellIndex const,std::tuple<unsigned int,std::string,UnixTimer>>,false,false>::operator->((const std::__detail::_Node_iterator<std::pair<const LuaShellIndex,std::tuple<unsigned int,std::string,UnixTimer> >,false,false> *const)(v2 + 64));
      v24 = std::get<0ul,unsigned int,std::string,UnixTimer>(&v23->second);
      v25 = v24;
      if ( *(_BYTE *)(((unsigned __int64)v24 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v24 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v24 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v24);
      }
      *(_DWORD *)(v2 + 48) = *v25;
      v26 = std::__detail::_Node_iterator<std::pair<LuaShellIndex const,std::tuple<unsigned int,std::string,UnixTimer>>,false,false>::operator->((const std::__detail::_Node_iterator<std::pair<const LuaShellIndex,std::tuple<unsigned int,std::string,UnixTimer> >,false,false> *const)(v2 + 64));
      v27 = std::get<1ul,unsigned int,std::string,UnixTimer>(&v26->second);
      std::string::basic_string(v2 + 224, v27);
      std::literals::string_literals::operator"" s[abi:cxx11](&__rhs, "\":", 2uLL);
      std::literals::string_literals::operator"" s[abi:cxx11](&__lhs, "\"", 1uLL);
      std::operator+<char>(&v46, &__lhs, (const std::string *)(v2 + 224));
      std::operator+<char>((std::string *)&v48, &v46, &__rhs);
      v28 = std::string::find(v2 + 160, &v48, 0LL) != -1;
      std::string::~string(&v48);
      std::string::~string(&v46);
      std::string::~string(&__lhs);
      std::string::~string(&__rhs);
      if ( v28 )
      {
        common::milog::MiLogStream::create(
          &v48,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/player/player.cpp",
          "checkAwaitingLuaShell",
          3830);
        v29 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                &v48,
                (const char (*)[42])"remove waiting lua_shell, luashell_index:");
        v30 = std::__detail::_Node_iterator<std::pair<LuaShellIndex const,std::tuple<unsigned int,std::string,UnixTimer>>,false,false>::operator->((const std::__detail::_Node_iterator<std::pair<const LuaShellIndex,std::tuple<unsigned int,std::string,UnixTimer> >,false,false> *const)(v2 + 64));
        v31 = operator<<(v29, &v30->first);
        v32 = common::milog::MiLogStream::operator<<<char [5],(char *[5])0>(v31, (const char (*)[5])" id:");
        v33 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v32,
                (const unsigned int *)(v2 + 48));
        v34 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v33, (const char (*)[11])" json_key:");
        v35 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v34, (const std::string *)(v2 + 224));
        v36 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v35, (const char (*)[9])" player:");
        operator<<(v36, this);
        common::milog::MiLogStream::~MiLogStream(&v48);
        *(std::unordered_map<LuaShellIndex,std::tuple<unsigned int,std::string,UnixTimer>>::iterator *)(v2 + 64) = std::unordered_map<LuaShellIndex,std::tuple<unsigned int,std::string,UnixTimer>>::erase(&this->awaiting_lua_shell_timer_map_, *(std::unordered_map<LuaShellIndex,std::tuple<unsigned int,std::string,UnixTimer>>::iterator *)(v2 + 64));
      }
      else
      {
        std::__detail::_Node_iterator<std::pair<LuaShellIndex const,std::tuple<unsigned int,std::string,UnixTimer>>,false,false>::operator++((std::__detail::_Node_iterator<std::pair<const LuaShellIndex,std::tuple<unsigned int,std::string,UnixTimer> >,false,false> *const)(v2 + 64));
      }
      std::string::~string((void *)(v2 + 224));
    }
    std::string::~string((void *)(v2 + 160));
    std::vector<unsigned char>::~vector((std::vector<unsigned char> *const)(v2 + 96));
  }
  if ( v49 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = -168430091;
  }
};

// Line 3801: range 00000000171522D0-00000000171522F4
uint8_t __cdecl Player::checkAwaitingLuaShell(std::string const&)::{lambda(unsigned char)#1}::operator()(
        const Player::checkAwaitingLuaShell::<lambda(uint8_t)> *const __closure,
        uint8_t ch_0)
{
  if ( ch_0 <= 0x40u )
    return ch_0 - 48;
  else
    return ch_0 - 55;
};

// Line 3841: range 0000000017152BCE-0000000017152E34
void __cdecl Player::checkInjectFix(Player *const this)
{
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  __int64 Now; // rsi
  char v5[240]; // [rsp+20h] [rbp-F0h] BYREF

  v1 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_2(192LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "3 48 4 16 cur_send_id:3845 64 32 15 inject_fix:3846 128 32 11 notify:3851";
  *(_QWORD *)(v1 + 16) = Player::checkInjectFix;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234556943;
  v3[536862723] = -218959118;
  v3[536862725] = -202116109;
  Now = (unsigned int)common::tools::TimeUtils::getNow();
  if ( *(_BYTE *)(((unsigned __int64)&this->last_inject_fix_check_time_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->last_inject_fix_check_time_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->last_inject_fix_check_time_, Now, &this->last_inject_fix_check_time_);
  }
  this->last_inject_fix_check_time_ = Now;
  *(_DWORD *)(v1 + 48) = 0;
  std::string::basic_string(v1 + 64);
  if ( !Player::getInjectFixContent(this, (uint32_t *)(v1 + 48), (std::string *)(v1 + 64)) )
  {
    proto::PlayerInjectFixNotify::PlayerInjectFixNotify((proto::PlayerInjectFixNotify *const)(v1 + 128));
    proto::PlayerInjectFixNotify::set_id((proto::PlayerInjectFixNotify *const)(v1 + 128), *(_DWORD *)(v1 + 48));
    proto::PlayerInjectFixNotify::set_inject_fix(
      (proto::PlayerInjectFixNotify *const)(v1 + 128),
      (const std::string *)(v1 + 64));
    Player::sendProto(this, (const google::protobuf::Message *)(v1 + 128));
    Player::setLastInjectFixSendId(this, *(_DWORD *)(v1 + 48));
    proto::PlayerInjectFixNotify::~PlayerInjectFixNotify((proto::PlayerInjectFixNotify *const)(v1 + 128));
  }
  std::string::~string((void *)(v1 + 64));
  if ( v5 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 3861: range 0000000017152E36-00000000171531A8
bool __cdecl Player::isSegmentCrcOpen(const Player *const this)
{
  DbDeployConfigMgr *p_db_deploy_config_mgr; // rbx
  uint32_t v3; // r12d
  const std::string *v4; // rax
  common::milog::MiLogStream *v5; // rbx
  const std::string *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rbx
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rbx
  const std::string *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rbx
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  unsigned int val; // [rsp+14h] [rbp-5Ch] BYREF
  const SecurityConfig *security_config; // [rsp+18h] [rbp-58h]
  const proto::PlayerLoginReq *login_req; // [rsp+20h] [rbp-50h]
  const data::DbAntiCheatClientChannelIdConfig *config_ptr; // [rsp+28h] [rbp-48h]
  std::shared_ptr<Config> v21; // [rsp+30h] [rbp-40h] BYREF
  common::milog::MiLogStream v22; // [rsp+40h] [rbp-30h] BYREF

  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v21);
  security_config = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v21)->security_config;
  std::shared_ptr<Config>::~shared_ptr(&v21);
  if ( *(_BYTE *)(((unsigned __int64)&security_config->is_segment_crc_open >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)security_config + 100) & 7) >= *(_BYTE *)(((unsigned __int64)&security_config->is_segment_crc_open >> 3)
                                                                  + 0x7FFF8000) )
  {
    __asan_report_load1(&security_config->is_segment_crc_open);
  }
  if ( !security_config->is_segment_crc_open )
    return 0;
  login_req = Player::getSessionLoginReq(this);
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v21);
  p_db_deploy_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v21)->design_config.db_config_mgr.db_deploy_config_mgr;
  v3 = proto::PlayerLoginReq::channel_id(login_req);
  v4 = proto::PlayerLoginReq::checksum_client_version[abi:cxx11](login_req);
  config_ptr = DbDeployConfigMgr::findDbAntiCheatClientChannelIdConfig(p_db_deploy_config_mgr, v4, v3);
  std::shared_ptr<Config>::~shared_ptr(&v21);
  if ( config_ptr )
  {
    if ( !proto::AntiCheatConfig::is_segment_crc_valid(&config_ptr->anti_cheat_config) )
    {
      common::milog::MiLogStream::create(
        &v22,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/player.cpp",
        "isSegmentCrcOpen",
        3882);
      v11 = common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(
              &v22,
              (const char (*)[49])"skip segment crc check. checksum_client_version:");
      v12 = proto::PlayerLoginReq::checksum_client_version[abi:cxx11](login_req);
      v13 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v11, v12);
      v14 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v13, (const char (*)[13])" channel_id:");
      val = proto::PlayerLoginReq::channel_id(login_req);
      v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, &val);
      v16 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v15, (const char (*)[6])" uid:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, &this->uid_);
      common::milog::MiLogStream::~MiLogStream(&v22);
      return 0;
    }
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&security_config->is_checksum_version_not_found_segment_crc_default_open >> 3)
                  + 0x7FFF8000) != 0
      && (((unsigned __int8)security_config + 101) & 7) >= *(_BYTE *)(((unsigned __int64)&security_config->is_checksum_version_not_found_segment_crc_default_open >> 3)
                                                                    + 0x7FFF8000) )
    {
      __asan_report_load1(&security_config->is_checksum_version_not_found_segment_crc_default_open);
    }
    if ( !security_config->is_checksum_version_not_found_segment_crc_default_open )
    {
      common::milog::MiLogStream::create(
        &v22,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/player.cpp",
        "isSegmentCrcOpen",
        3876);
      v5 = common::milog::MiLogStream::operator<<<char [68],(char *[68])0>(
             &v22,
             (const char (*)[68])"findDbAntiCheatClientChannelIdConfig fail, checksum_client_version:");
      v6 = proto::PlayerLoginReq::checksum_client_version[abi:cxx11](login_req);
      v7 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v5, v6);
      v8 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v7, (const char (*)[13])" channel_id:");
      val = proto::PlayerLoginReq::channel_id(login_req);
      v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, &val);
      v10 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v9, (const char (*)[6])" uid:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, &this->uid_);
      common::milog::MiLogStream::~MiLogStream(&v22);
      return 0;
    }
  }
  return Player::getIsInCrcSuspicousList(this);
};

// Line 3891: range 00000000171531AA-0000000017153A7F
void __cdecl Player::startCheckSegmentCrc(Player *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rdx
  const proto::PlayerLoginReq *SessionLoginReq; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rdx
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rdx
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rdx
  SegmentCRCNode *v28; // rax
  uint32_t Offset; // eax
  SegmentCRCNode *v30; // rax
  uint32_t Size; // eax
  const google::protobuf::RepeatedPtrField<proto::SegmentInfo> *v32; // rax
  std::vector<std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree> >>::iterator __for_begin; // [rsp+18h] [rbp-188h] BYREF
  std::vector<std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree> >>::iterator __for_end; // [rsp+20h] [rbp-180h] BYREF
  std::unordered_map<unsigned int,std::unordered_map<std::string,std::vector<std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree> >>>> *platform_segment_crc_map; // [rsp+28h] [rbp-178h]
  ClientVersionSegmentCrcTreeMap *client_version_map; // [rsp+30h] [rbp-170h]
  const std::string *client_version_str; // [rsp+38h] [rbp-168h]
  std::vector<std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree> >> *__for_range; // [rsp+40h] [rbp-160h]
  std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree> > *__t; // [rsp+48h] [rbp-158h]
  std::tuple_element<0,std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree> > >::type *crc_module_index; // [rsp+50h] [rbp-150h]
  std::tuple_element<0,std::tuple<unsigned int,std::shared_ptr<SegmentCRCTree> > >::type *crc_module_type; // [rsp+58h] [rbp-148h]
  std::tuple_element<0,std::tuple<std::shared_ptr<SegmentCRCTree> > >::type *crc_tree_ptr; // [rsp+60h] [rbp-140h]
  proto::SegmentInfo *info; // [rsp+68h] [rbp-138h]
  common::milog::MiLogStream v44; // [rsp+70h] [rbp-130h] BYREF
  char v45[272]; // [rsp+90h] [rbp-110h] BYREF

  v2 = (unsigned __int64)v45;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(224LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "4 48 8 22 platform_map_iter:3895 80 8 28 client_version_map_iter:3904 112 16 13 root_ptr:3919 14"
                        "4 48 11 notify:3911";
  *(_QWORD *)(v2 + 16) = Player::startCheckSegmentCrc;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61937;
  v4[536862721] = -234881024;
  v4[536862722] = 62194;
  v4[536862722] = -234881024;
  v4[536862723] = 62194;
  v4[536862724] = 62194;
  v4[536862726] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)&this->segment_crc_interact_count_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->segment_crc_interact_count_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->segment_crc_interact_count_, v1, &this->segment_crc_interact_count_);
  }
  this->segment_crc_interact_count_ = 0;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v2 + 112));
  platform_segment_crc_map = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 112))->security_config.platform_segment_crc_map;
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v2 + 112));
  *(std::unordered_map<unsigned int,std::unordered_map<std::string,std::vector<std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree> >>>>::iterator *)(v2 + 48) = std::unordered_map<unsigned int,std::unordered_map<std::string,std::vector<std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree>>>>>::find(platform_segment_crc_map, &this->platform_type_);
  __for_end._M_current = (std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree> > *)std::unordered_map<unsigned int,std::unordered_map<std::string,std::vector<std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree>>>>>::end(platform_segment_crc_map)._M_cur;
  if ( std::__detail::operator==<std::pair<unsigned int const,std::unordered_map<std::string,std::vector<std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree>>>>>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::unordered_map<std::string,std::vector<std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree> >>> >,false> *)(v2 + 48),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::unordered_map<std::string,std::vector<std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree> >>> >,false> *)&__for_end) )
  {
    common::milog::MiLogStream::create(
      &v44,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/player.cpp",
      "startCheckSegmentCrc",
      3898);
    v5 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
           &v44,
           (const char (*)[36])"no segment crc config for platform:");
    v6 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, &this->platform_type_);
    v7 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v6, (const char (*)[9])" player:");
    operator<<(v7, this);
    common::milog::MiLogStream::~MiLogStream(&v44);
  }
  else
  {
    client_version_map = &std::__detail::_Node_iterator<std::pair<unsigned int const,std::unordered_map<std::string,std::vector<std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree>>>>>,false,false>::operator->((const std::__detail::_Node_iterator<std::pair<unsigned int const,std::unordered_map<std::string,std::vector<std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree> >>> >,false,false> *const)(v2 + 48))->second;
    SessionLoginReq = Player::getSessionLoginReq(this);
    client_version_str = proto::PlayerLoginReq::checksum_client_version[abi:cxx11](SessionLoginReq);
    *(std::unordered_map<std::string,std::vector<std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree> >>>::iterator *)(v2 + 80) = std::unordered_map<std::string,std::vector<std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree>>>>::find(client_version_map, client_version_str);
    __for_end._M_current = (std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree> > *)std::unordered_map<std::string,std::vector<std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree>>>>::end(client_version_map)._M_cur;
    if ( std::__detail::operator==<std::pair<std::string const,std::vector<std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree>>>>,true>(
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::vector<std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree> >> >,true> *)(v2 + 80),
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::vector<std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree> >> >,true> *)&__for_end) )
    {
      common::milog::MiLogStream::create(
        &v44,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/player.cpp",
        "startCheckSegmentCrc",
        3907);
      v9 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
             &v44,
             (const char (*)[36])"no segment crc config for platform:");
      v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, &this->platform_type_);
      v11 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v10, (const char (*)[17])" client_version:");
      v12 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v11, client_version_str);
      v13 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v12, (const char (*)[9])" player:");
      operator<<(v13, this);
      common::milog::MiLogStream::~MiLogStream(&v44);
    }
    else
    {
      proto::CheckSegmentCRCNotify::CheckSegmentCRCNotify((proto::CheckSegmentCRCNotify *const)(v2 + 144));
      __for_range = &std::__detail::_Node_iterator<std::pair<std::string const,std::vector<std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree>>>>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,std::vector<std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree> >> >,false,true> *const)(v2 + 80))->second;
      __for_begin._M_current = std::vector<std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree>>>::begin(__for_range)._M_current;
      __for_end._M_current = std::vector<std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree>>>::end(__for_range)._M_current;
      while ( __gnu_cxx::operator!=<std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree>> *,std::vector<std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree>>>>(
                &__for_begin,
                &__for_end) )
      {
        __t = __gnu_cxx::__normal_iterator<std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree>> *,std::vector<std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree>>>>::operator*(&__for_begin);
        crc_module_index = std::get<0ul,unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree>>(__t);
        crc_module_type = std::get<1ul,unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree>>(__t);
        crc_tree_ptr = std::get<2ul,unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree>>(__t);
        if ( std::operator==<SegmentCRCTree>(crc_tree_ptr, 0LL) )
        {
          common::milog::MiLogStream::create(
            &v44,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/player/player.cpp",
            "startCheckSegmentCrc",
            3916);
          v14 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                  &v44,
                  (const char (*)[31])"tree is null, crc_module_type:");
          v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, crc_module_type);
          v16 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v15, (const char (*)[11])" platform:");
          v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, &this->platform_type_);
          v18 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                  v17,
                  (const char (*)[17])" client_version:");
          v19 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v18, client_version_str);
          v20 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v19, (const char (*)[9])" player:");
          operator<<(v20, this);
          common::milog::MiLogStream::~MiLogStream(&v44);
        }
        else
        {
          std::__shared_ptr_access<SegmentCRCTree,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SegmentCRCTree,(__gnu_cxx::_Lock_policy)2,false,false> *const)crc_tree_ptr);
          SegmentCRCTree::getRoot((SegmentCRCTree *const)(v2 + 112));
          if ( std::operator==<SegmentCRCNode>((const std::shared_ptr<SegmentCRCNode> *)(v2 + 112), 0LL) )
          {
            common::milog::MiLogStream::create(
              &v44,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/player.cpp",
              "startCheckSegmentCrc",
              3922);
            v21 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                    &v44,
                    (const char (*)[31])"root is null, crc_module_type:");
            v22 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v21, crc_module_type);
            v23 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v22, (const char (*)[11])" platform:");
            v24 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v23, &this->platform_type_);
            v25 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                    v24,
                    (const char (*)[17])" client_version:");
            v26 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v25, client_version_str);
            v27 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v26, (const char (*)[9])" player:");
            operator<<(v27, this);
            common::milog::MiLogStream::~MiLogStream(&v44);
          }
          else
          {
            info = proto::CheckSegmentCRCNotify::add_info_list((proto::CheckSegmentCRCNotify *const)(v2 + 144));
            if ( *(_BYTE *)(((unsigned __int64)crc_module_index >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)crc_module_index & 7) + 3) >= *(_BYTE *)(((unsigned __int64)crc_module_index >> 3)
                                                                                 + 0x7FFF8000) )
            {
              __asan_report_load4(crc_module_index);
            }
            proto::SegmentInfo::set_module(info, *crc_module_index);
            v28 = std::__shared_ptr_access<SegmentCRCNode,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SegmentCRCNode,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 112));
            Offset = SegmentCRCNode::getOffset(v28);
            proto::SegmentInfo::set_offset(info, Offset);
            v30 = std::__shared_ptr_access<SegmentCRCNode,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SegmentCRCNode,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 112));
            Size = SegmentCRCNode::getSize(v30);
            proto::SegmentInfo::set_size(info, Size);
          }
          std::shared_ptr<SegmentCRCNode>::~shared_ptr((std::shared_ptr<SegmentCRCNode> *const)(v2 + 112));
        }
        __gnu_cxx::__normal_iterator<std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree>> *,std::vector<std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree>>>>::operator++(&__for_begin);
      }
      v32 = proto::CheckSegmentCRCNotify::info_list((const proto::CheckSegmentCRCNotify *const)(v2 + 144));
      if ( google::protobuf::RepeatedPtrField<proto::SegmentInfo>::size(v32) > 0 )
        Player::sendProto(this, (const google::protobuf::Message *)(v2 + 144));
      proto::CheckSegmentCRCNotify::~CheckSegmentCRCNotify((proto::CheckSegmentCRCNotify *const)(v2 + 144));
    }
  }
  if ( v45 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = -168430091;
  }
};

// Line 3938: range 0000000017153A80-0000000017153DD1
int32_t __cdecl Player::checkAndUpdateSegmentCrcCount(Player *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v4; // rax
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rdx
  int32_t result; // eax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rdx
  std::shared_ptr<Config> v14; // [rsp+10h] [rbp-90h] BYREF
  common::milog::MiLogStream v15; // [rsp+20h] [rbp-80h] BYREF
  char v16[96]; // [rsp+40h] [rbp-60h] BYREF

  v1 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 4 35 segment_crc_max_interact_count:3939";
  *(_QWORD *)(v1 + 16) = Player::checkAndUpdateSegmentCrcCount;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202116348;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v14);
  v4 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v14);
  if ( *(_BYTE *)(((unsigned __int64)&v4->security_config.segment_crc_max_interact_count >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v4->security_config.segment_crc_max_interact_count >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v4->security_config.segment_crc_max_interact_count);
  }
  *(_DWORD *)(v1 + 32) = v4->security_config.segment_crc_max_interact_count;
  std::shared_ptr<Config>::~shared_ptr(&v14);
  if ( *(_BYTE *)(((unsigned __int64)&this->segment_crc_interact_count_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->segment_crc_interact_count_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->segment_crc_interact_count_);
  }
  if ( this->segment_crc_interact_count_ <= *(_DWORD *)(v1 + 32) )
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->segment_crc_interact_count_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->segment_crc_interact_count_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&this->segment_crc_interact_count_);
    }
    ++this->segment_crc_interact_count_;
    common::milog::MiLogStream::create(
      &v15,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/player.cpp",
      "checkAndUpdateSegmentCrcCount",
      3946);
    v11 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
            &v15,
            (const char (*)[28])"segment_crc_interact_count:");
    v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
            v11,
            &this->segment_crc_interact_count_);
    v13 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v12, (const char (*)[9])" player:");
    operator<<(v13, this);
    common::milog::MiLogStream::~MiLogStream(&v15);
    result = 0;
  }
  else
  {
    common::milog::MiLogStream::create(
      &v15,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/player.cpp",
      "checkAndUpdateSegmentCrcCount",
      3942);
    v5 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
           &v15,
           (const char (*)[28])"segment_crc_interact_count:");
    v6 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, &this->segment_crc_interact_count_);
    v7 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(v6, (const char (*)[21])" max_interact_count:");
    v8 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v1 + 32));
    v9 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v8, (const char (*)[9])" player:");
    operator<<(v9, this);
    common::milog::MiLogStream::~MiLogStream(&v15);
    result = -1;
  }
  if ( v16 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3952: range 0000000017153DD2-0000000017154381
// local variable allocation has failed, the output may be wrong!
SegmentCRCTreePtr __cdecl Player::findModuleSegmentCrcTree(
        const Player *const this,
        uint32_t crc_module_index,
        uint32_t *crc_module_type)
{
  uint32_t *v3; // rcx
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rdx
  SegmentCRCTreePtr result; // rax
  const proto::PlayerLoginReq *SessionLoginReq; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rdx
  __int64 v17; // rsi
  std::tuple_element<1,const std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree> > >::type v18; // ecx
  char v19; // dl
  __int64 v20; // rdx
  uint32_t *crc_module_typea; // [rsp+0h] [rbp-120h]
  uint32_t crc_module_indexa; // [rsp+Ch] [rbp-114h]
  std::vector<std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree> >>::iterator __for_begin; // [rsp+20h] [rbp-100h] BYREF
  std::vector<std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree> >>::iterator __for_end; // [rsp+28h] [rbp-F8h] BYREF
  std::unordered_map<unsigned int,std::unordered_map<std::string,std::vector<std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree> >>>> *platform_segment_crc_map; // [rsp+30h] [rbp-F0h]
  ClientVersionSegmentCrcTreeMap *client_version_map; // [rsp+38h] [rbp-E8h]
  const std::string *client_version_str; // [rsp+40h] [rbp-E0h]
  std::vector<std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree> >> *__for_range; // [rsp+48h] [rbp-D8h]
  const std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree> > *v29; // [rsp+50h] [rbp-D0h]
  std::tuple_element<0,const std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree> > >::type *config_crc_module_index; // [rsp+58h] [rbp-C8h]
  std::tuple_element<1,const std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree> > >::type *config_crc_module_type; // [rsp+60h] [rbp-C0h]
  std::tuple_element<2,const std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree> > >::type *tree_ptr; // [rsp+68h] [rbp-B8h]
  std::shared_ptr<Config> v33; // [rsp+70h] [rbp-B0h] BYREF
  common::milog::MiLogStream v34; // [rsp+80h] [rbp-A0h] BYREF
  char v35[128]; // [rsp+A0h] [rbp-80h] BYREF

  crc_module_indexa = (unsigned int)crc_module_type;
  crc_module_typea = v3;
  v4 = (unsigned __int64)v35;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(96LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "2 32 8 22 platform_map_iter:3954 64 8 16 config_iter:3962";
  *(_QWORD *)(v4 + 16) = Player::findModuleSegmentCrcTree;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -218959360;
  v6[536862722] = -202116352;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v33);
  platform_segment_crc_map = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v33)->security_config.platform_segment_crc_map;
  std::shared_ptr<Config>::~shared_ptr(&v33);
  *(std::unordered_map<unsigned int,std::unordered_map<std::string,std::vector<std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree> >>>>::iterator *)(v4 + 32) = std::unordered_map<unsigned int,std::unordered_map<std::string,std::vector<std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree>>>>>::find(platform_segment_crc_map, (const std::unordered_map<unsigned int,std::unordered_map<std::string,std::vector<std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree> >>>>::key_type *)(*(_QWORD *)&crc_module_index + 188LL));
  __for_end._M_current = (std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree> > *)std::unordered_map<unsigned int,std::unordered_map<std::string,std::vector<std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree>>>>>::end(platform_segment_crc_map)._M_cur;
  if ( std::__detail::operator==<std::pair<unsigned int const,std::unordered_map<std::string,std::vector<std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree>>>>>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::unordered_map<std::string,std::vector<std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree> >>> >,false> *)(v4 + 32),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::unordered_map<std::string,std::vector<std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree> >>> >,false> *)&__for_end) )
  {
    common::milog::MiLogStream::create(
      &v34,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/player.cpp",
      "findModuleSegmentCrcTree",
      3957);
    v7 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
           &v34,
           (const char (*)[36])"no segment crc config for platform:");
    v8 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
           v7,
           (const unsigned int *)(*(_QWORD *)&crc_module_index + 188LL));
    v9 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v8, (const char (*)[9])" player:");
    operator<<(v9, *(const Player **)&crc_module_index);
    common::milog::MiLogStream::~MiLogStream(&v34);
    std::shared_ptr<SegmentCRCTree>::shared_ptr((std::shared_ptr<SegmentCRCTree> *const)this, 0LL);
  }
  else
  {
    client_version_map = &std::__detail::_Node_iterator<std::pair<unsigned int const,std::unordered_map<std::string,std::vector<std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree>>>>>,false,false>::operator->((const std::__detail::_Node_iterator<std::pair<unsigned int const,std::unordered_map<std::string,std::vector<std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree> >>> >,false,false> *const)(v4 + 32))->second;
    SessionLoginReq = Player::getSessionLoginReq(*(const Player *const *)&crc_module_index);
    client_version_str = proto::PlayerLoginReq::checksum_client_version[abi:cxx11](SessionLoginReq);
    *(std::unordered_map<std::string,std::vector<std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree> >>>::iterator *)(v4 + 64) = std::unordered_map<std::string,std::vector<std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree>>>>::find(client_version_map, client_version_str);
    __for_end._M_current = (std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree> > *)std::unordered_map<std::string,std::vector<std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree>>>>::end(client_version_map)._M_cur;
    if ( std::__detail::operator==<std::pair<std::string const,std::vector<std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree>>>>,true>(
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::vector<std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree> >> >,true> *)(v4 + 64),
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::vector<std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree> >> >,true> *)&__for_end) )
    {
      common::milog::MiLogStream::create(
        &v34,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/player.cpp",
        "findModuleSegmentCrcTree",
        3965);
      v12 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
              &v34,
              (const char (*)[36])"no segment crc config for platform:");
      v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v12,
              (const unsigned int *)(*(_QWORD *)&crc_module_index + 188LL));
      v14 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v13, (const char (*)[17])" client_version:");
      v15 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v14, client_version_str);
      v16 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v15, (const char (*)[9])" player:");
      operator<<(v16, *(const Player **)&crc_module_index);
      common::milog::MiLogStream::~MiLogStream(&v34);
      std::shared_ptr<SegmentCRCTree>::shared_ptr((std::shared_ptr<SegmentCRCTree> *const)this, 0LL);
    }
    else
    {
      __for_range = &std::__detail::_Node_iterator<std::pair<std::string const,std::vector<std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree>>>>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,std::vector<std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree> >> >,false,true> *const)(v4 + 64))->second;
      __for_begin._M_current = std::vector<std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree>>>::begin(__for_range)._M_current;
      __for_end._M_current = std::vector<std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree>>>::end(__for_range)._M_current;
      while ( 1 )
      {
        if ( !__gnu_cxx::operator!=<std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree>> *,std::vector<std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree>>>>(
                &__for_begin,
                &__for_end) )
        {
          std::shared_ptr<SegmentCRCTree>::shared_ptr((std::shared_ptr<SegmentCRCTree> *const)this, 0LL);
          goto LABEL_20;
        }
        v29 = __gnu_cxx::__normal_iterator<std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree>> *,std::vector<std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree>>>>::operator*(&__for_begin);
        config_crc_module_index = (std::tuple_element<0,const std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree> > >::type *)std::get<0ul,unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree>>(v29);
        config_crc_module_type = (std::tuple_element<1,const std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree> > >::type *)std::get<1ul,unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree>>(v29);
        tree_ptr = (std::tuple_element<2,const std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree> > >::type *)std::get<2ul,unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree>>(v29);
        if ( *(_BYTE *)(((unsigned __int64)config_crc_module_index >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)config_crc_module_index & 7) + 3) >= *(_BYTE *)(((unsigned __int64)config_crc_module_index >> 3)
                                                                                    + 0x7FFF8000) )
        {
          __asan_report_load4(config_crc_module_index);
        }
        if ( crc_module_indexa == *config_crc_module_index )
          break;
        __gnu_cxx::__normal_iterator<std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree>> *,std::vector<std::tuple<unsigned int,unsigned int,std::shared_ptr<SegmentCRCTree>>>>::operator++(&__for_begin);
      }
      v17 = ((unsigned __int8)config_crc_module_type & 7u) + 3;
      if ( *(_BYTE *)(((unsigned __int64)config_crc_module_type >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)config_crc_module_type & 7) + 3) >= *(_BYTE *)(((unsigned __int64)config_crc_module_type >> 3)
                                                                                 + 0x7FFF8000) )
      {
        __asan_report_load4(config_crc_module_type);
      }
      v18 = *config_crc_module_type;
      v19 = *(_BYTE *)(((unsigned __int64)crc_module_typea >> 3) + 0x7FFF8000);
      LOBYTE(v17) = v19 != 0;
      v20 = (v19 != 0) & (unsigned __int8)((char)(((unsigned __int8)crc_module_typea & 7) + 3) >= v19);
      if ( (_BYTE)v20 )
        __asan_report_store4(crc_module_typea, v17, v20);
      *crc_module_typea = v18;
      std::shared_ptr<SegmentCRCTree>::shared_ptr((std::shared_ptr<SegmentCRCTree> *const)this, tree_ptr);
    }
  }
LABEL_20:
  if ( v35 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = -168430091;
  }
  result._M_ptr = (std::__shared_ptr<SegmentCRCTree,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 3980: range 0000000017154382-0000000017154A5A
void __cdecl Player::tryNotifyPlayerStatusToSafeServer(Player *const this, Player::LoginState login_state)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  bool isSafeServerNotifyClosed; // r14
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rcx
  google::protobuf::uint32 SecurityPlatformTypeByPlatformType; // eax
  const std::string *v9; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rcx
  google::protobuf::uint32 v11; // eax
  const std::string *v12; // rax
  Config *config; // [rsp+10h] [rbp-110h]
  std::shared_ptr<Config> v14; // [rsp+20h] [rbp-100h] BYREF
  std::string value; // [rsp+30h] [rbp-F0h] BYREF
  char v16[208]; // [rsp+50h] [rbp-D0h] BYREF

  v2 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(160LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 16 15 config_ptr:3985 64 56 11 notify:4012";
  *(_QWORD *)(v2 + 16) = Player::tryNotifyPlayerStatusToSafeServer;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862723] = -218103808;
  v4[536862724] = -202116109;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v14);
  v5 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v14);
  isSafeServerNotifyClosed = FeatureSwitchMgr::isSafeServerNotifyClosed(&v5->feature_switch_mgr);
  std::shared_ptr<Config>::~shared_ptr(&v14);
  if ( !isSafeServerNotifyClosed )
  {
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)(v2 + 32));
    if ( !std::operator==<Config>(0LL, (const std::shared_ptr<Config> *)(v2 + 32)) )
    {
      config = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
      if ( *(char *)(((unsigned __int64)&config->security_config.safe_server_config >> 3) + 0x7FFF8000) < 0 )
        __asan_report_load1(&config->security_config.safe_server_config);
      if ( config->security_config.safe_server_config.connection_status_notify_config.is_enable )
      {
        if ( login_state == Login )
        {
          proto_security::GameLoginNotifyRequest::GameLoginNotifyRequest((proto_security::GameLoginNotifyRequest *const)(v2 + 64));
          if ( *(_BYTE *)(((unsigned __int64)&this->uid_ >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&this->uid_ >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&this->uid_);
          }
          proto_security::GameLoginNotifyRequest::set_uid(
            (proto_security::GameLoginNotifyRequest *const)(v2 + 64),
            this->uid_);
          if ( *(_BYTE *)(((unsigned __int64)&this->account_type_ >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&this->account_type_ >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&this->account_type_);
          }
          proto_security::GameLoginNotifyRequest::set_account_type(
            (proto_security::GameLoginNotifyRequest *const)(v2 + 64),
            this->account_type_);
          proto_security::GameLoginNotifyRequest::set_account(
            (proto_security::GameLoginNotifyRequest *const)(v2 + 64),
            &this->account_uid_);
          ServiceBox::findService<GameserverService>();
          GameserverService::getConfig((GameserverService *const)&v14);
          v7 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v14);
          if ( *(_BYTE *)(((unsigned __int64)&this->platform_type_ >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)this - 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->platform_type_ >> 3)
                                                                + 0x7FFF8000) )
          {
            __asan_report_load4(&this->platform_type_);
          }
          SecurityPlatformTypeByPlatformType = Config::getSecurityPlatformTypeByPlatformType(v7, this->platform_type_);
          proto_security::GameLoginNotifyRequest::set_platform(
            (proto_security::GameLoginNotifyRequest *const)(v2 + 64),
            SecurityPlatformTypeByPlatformType);
          std::shared_ptr<Config>::~shared_ptr(&v14);
          v9 = ConfigBase::getRegionName[abi:cxx11](config);
          proto_security::GameLoginNotifyRequest::set_region(
            (proto_security::GameLoginNotifyRequest *const)(v2 + 64),
            v9);
          Config::findRegionGameBiz[abi:cxx11](&value, config);
          proto_security::GameLoginNotifyRequest::set_biz_game(
            (proto_security::GameLoginNotifyRequest *const)(v2 + 64),
            &value);
          std::string::~string(&value);
          PlayerMgr::asyncSendNotifyToSafeServer(
            &config->security_config.safe_server_config.connection_status_notify_config.login_uri,
            (const google::protobuf::Message *)(v2 + 64));
          proto_security::GameLoginNotifyRequest::~GameLoginNotifyRequest((proto_security::GameLoginNotifyRequest *const)(v2 + 64));
        }
        else if ( login_state == Logout )
        {
          proto_security::GameLogoutNotifyRequest::GameLogoutNotifyRequest((proto_security::GameLogoutNotifyRequest *const)(v2 + 64));
          if ( *(_BYTE *)(((unsigned __int64)&this->uid_ >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&this->uid_ >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&this->uid_);
          }
          proto_security::GameLogoutNotifyRequest::set_uid(
            (proto_security::GameLogoutNotifyRequest *const)(v2 + 64),
            this->uid_);
          if ( *(_BYTE *)(((unsigned __int64)&this->account_type_ >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&this->account_type_ >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&this->account_type_);
          }
          proto_security::GameLogoutNotifyRequest::set_account_type(
            (proto_security::GameLogoutNotifyRequest *const)(v2 + 64),
            this->account_type_);
          proto_security::GameLogoutNotifyRequest::set_account(
            (proto_security::GameLogoutNotifyRequest *const)(v2 + 64),
            &this->account_uid_);
          ServiceBox::findService<GameserverService>();
          GameserverService::getConfig((GameserverService *const)&v14);
          v10 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v14);
          if ( *(_BYTE *)(((unsigned __int64)&this->platform_type_ >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)this - 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->platform_type_ >> 3)
                                                                + 0x7FFF8000) )
          {
            __asan_report_load4(&this->platform_type_);
          }
          v11 = Config::getSecurityPlatformTypeByPlatformType(v10, this->platform_type_);
          proto_security::GameLogoutNotifyRequest::set_platform(
            (proto_security::GameLogoutNotifyRequest *const)(v2 + 64),
            v11);
          std::shared_ptr<Config>::~shared_ptr(&v14);
          v12 = ConfigBase::getRegionName[abi:cxx11](config);
          proto_security::GameLogoutNotifyRequest::set_region(
            (proto_security::GameLogoutNotifyRequest *const)(v2 + 64),
            v12);
          Config::findRegionGameBiz[abi:cxx11](&value, config);
          proto_security::GameLogoutNotifyRequest::set_biz_game(
            (proto_security::GameLogoutNotifyRequest *const)(v2 + 64),
            &value);
          std::string::~string(&value);
          PlayerMgr::asyncSendNotifyToSafeServer(
            &config->security_config.safe_server_config.connection_status_notify_config.logout_uri,
            (const google::protobuf::Message *)(v2 + 64));
          proto_security::GameLogoutNotifyRequest::~GameLogoutNotifyRequest((proto_security::GameLogoutNotifyRequest *const)(v2 + 64));
        }
      }
    }
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v2 + 32));
  }
  if ( v16 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF800C) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 4027: range 0000000017154A5C-0000000017154FB9
void __cdecl Player::CheckLuaShellOnLogin::CheckLuaShellOnLogin(
        Player::CheckLuaShellOnLogin *const this,
        Player *player,
        bool is_relogin,
        bool is_client_relogin)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  __gnu_cxx::__normal_iterator<const LuaShellIndex*,std::vector<LuaShellIndex> >::reference v7; // rax
  _QWORD *v8; // rdx
  const unsigned int *v9; // r8
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rcx
  std::vector<LuaShellIndex>::const_iterator __for_begin; // [rsp+20h] [rbp-B0h] BYREF
  std::vector<LuaShellIndex>::const_iterator __for_end; // [rsp+28h] [rbp-A8h] BYREF
  const std::vector<LuaShellIndex> *__for_range; // [rsp+30h] [rbp-A0h]
  const data::LuaShellConfig *lua_shell_config_ptr; // [rsp+38h] [rbp-98h]
  std::shared_ptr<Config> v23; // [rsp+40h] [rbp-90h] BYREF
  common::milog::MiLogStream v24; // [rsp+50h] [rbp-80h] BYREF
  char v25[96]; // [rsp+70h] [rbp-60h] BYREF
  LuaShellIndex v26; // 0:rsi.8

  v4 = (unsigned __int64)v25;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 19 luashell_index:4037";
  *(_QWORD *)(v4 + 16) = Player::CheckLuaShellOnLogin::CheckLuaShellOnLogin;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, player);
  this->player_ = player;
  std::vector<std::pair<LuaShellIndex,unsigned int>>::vector(&this->destruct_send_luashell_vec_);
  if ( is_relogin && !is_client_relogin )
  {
    if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    std::unordered_map<LuaShellIndex,unsigned int>::clear(&this->player_->last_lua_shell_send_id_map_);
    if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    std::unordered_map<LuaShellIndex,std::tuple<unsigned int,std::string,UnixTimer>>::clear(&this->player_->awaiting_lua_shell_timer_map_);
  }
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v23);
  __for_range = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v23)->design_config.db_config_mgr.db_local_config_mgr.lua_shell_mgr.luashell_index_vec;
  std::shared_ptr<Config>::~shared_ptr(&v23);
  __for_begin._M_current = std::vector<LuaShellIndex>::begin(__for_range)._M_current;
  __for_end._M_current = std::vector<LuaShellIndex>::end(__for_range)._M_current;
  while ( __gnu_cxx::operator!=<LuaShellIndex const*,std::vector<LuaShellIndex>>(&__for_begin, &__for_end) )
  {
    v7 = __gnu_cxx::__normal_iterator<LuaShellIndex const*,std::vector<LuaShellIndex>>::operator*(&__for_begin);
    v8 = v7;
    if ( ((unsigned __int8)v7 & 7) >= *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000)
      && *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) != 0
      || *(_BYTE *)((((unsigned __int64)&v7->channel + 3) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v7 + 7) & 7) >= *(_BYTE *)((((unsigned __int64)&v7->channel + 3) >> 3) + 0x7FFF8000) )
    {
      __asan_report_load_n(v7, 8LL);
    }
    *(_QWORD *)(v4 + 32) = *v8;
    if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v26 = *(LuaShellIndex *)(v4 + 32);
    lua_shell_config_ptr = Player::findSuitableLuaShellConfig(this->player_, v26);
    if ( lua_shell_config_ptr )
    {
      if ( *(_BYTE *)(((unsigned __int64)&lua_shell_config_ptr->protocol_type >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&lua_shell_config_ptr->protocol_type >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&lua_shell_config_ptr->protocol_type);
      }
      if ( lua_shell_config_ptr->protocol_type )
      {
        if ( *(_BYTE *)(((unsigned __int64)&lua_shell_config_ptr->protocol_type >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&lua_shell_config_ptr->protocol_type >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&lua_shell_config_ptr->protocol_type);
        }
        if ( lua_shell_config_ptr->protocol_type == 1 )
        {
          std::vector<std::pair<LuaShellIndex,unsigned int>>::emplace_back<LuaShellIndex&,unsigned int const&>(
            &this->destruct_send_luashell_vec_,
            (LuaShellIndex *)(v4 + 32),
            &lua_shell_config_ptr->id,
            (LuaShellIndex *)&this->destruct_send_luashell_vec_,
            v9);
        }
        else
        {
          common::milog::MiLogStream::create(
            &v24,
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/player/player.cpp",
            "CheckLuaShellOnLogin",
            4057);
          v10 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                  &v24,
                  (const char (*)[23])"unknown protocol_type:");
          v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v10,
                  &lua_shell_config_ptr->protocol_type);
          v12 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                  v11,
                  (const char (*)[17])" luashell_index:");
          v13 = operator<<(v12, (const LuaShellIndex *)(v4 + 32));
          v14 = common::milog::MiLogStream::operator<<<char [5],(char *[5])0>(v13, (const char (*)[5])" id:");
          v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, &lua_shell_config_ptr->id);
          v16 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v15, (const char (*)[9])" player:");
          if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          operator<<(v16, this->player_);
          common::milog::MiLogStream::~MiLogStream(&v24);
        }
      }
      else
      {
        if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        Player::sendLuaShellAndRecord(this->player_, lua_shell_config_ptr);
      }
    }
    __gnu_cxx::__normal_iterator<LuaShellIndex const*,std::vector<LuaShellIndex>>::operator++(&__for_begin);
  }
  if ( v25 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 4063: range 0000000017154FBA-00000000171552D8
void __cdecl Player::CheckLuaShellOnLogin::~CheckLuaShellOnLogin(Player::CheckLuaShellOnLogin *const this)
{
  std::pair<LuaShellIndex,unsigned int> *n; // rax
  const data::DbLuaShellConfigMgr *p_lua_shell_mgr; // rdi
  std::tuple_element<1,std::pair<LuaShellIndex,unsigned int> >::type v3; // esi
  uint32_t v4; // edx
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rcx
  std::vector<std::pair<LuaShellIndex,unsigned int>>::iterator __for_begin; // [rsp+10h] [rbp-70h] BYREF
  std::vector<std::pair<LuaShellIndex,unsigned int>>::iterator __for_end; // [rsp+18h] [rbp-68h] BYREF
  std::vector<std::pair<LuaShellIndex,unsigned int>> *__for_range; // [rsp+20h] [rbp-60h]
  std::tuple_element<0,std::pair<LuaShellIndex,unsigned int> >::type *luashell_index; // [rsp+28h] [rbp-58h]
  std::tuple_element<1,std::pair<LuaShellIndex,unsigned int> >::type *id; // [rsp+30h] [rbp-50h]
  const data::LuaShellConfig *lua_shell_config_ptr; // [rsp+38h] [rbp-48h]
  std::pair<LuaShellIndex,unsigned int> __in; // [rsp+44h] [rbp-3Ch] BYREF
  std::shared_ptr<Config> v18; // [rsp+50h] [rbp-30h] BYREF
  common::milog::MiLogStream v19; // [rsp+60h] [rbp-20h] BYREF
  LuaShellIndex v20; // 0:rsi.8

  __for_range = &this->destruct_send_luashell_vec_;
  __for_begin._M_current = std::vector<std::pair<LuaShellIndex,unsigned int>>::begin(&this->destruct_send_luashell_vec_)._M_current;
  __for_end._M_current = std::vector<std::pair<LuaShellIndex,unsigned int>>::end(&this->destruct_send_luashell_vec_)._M_current;
  while ( __gnu_cxx::operator!=<std::pair<LuaShellIndex,unsigned int> *,std::vector<std::pair<LuaShellIndex,unsigned int>>>(
            &__for_begin,
            &__for_end) )
  {
    n = __gnu_cxx::__normal_iterator<std::pair<LuaShellIndex,unsigned int> *,std::vector<std::pair<LuaShellIndex,unsigned int>>>::operator*(&__for_begin);
    if ( ((unsigned __int8)n & 7) >= *(_BYTE *)(((unsigned __int64)n >> 3) + 0x7FFF8000)
      && *(_BYTE *)(((unsigned __int64)n >> 3) + 0x7FFF8000) != 0
      || *(_BYTE *)((((unsigned __int64)&n->second + 3) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)n + 11) & 7) >= *(_BYTE *)((((unsigned __int64)&n->second + 3) >> 3) + 0x7FFF8000) )
    {
      n = (std::pair<LuaShellIndex,unsigned int> *)__asan_report_load_n(n, 12LL);
    }
    __in = *n;
    luashell_index = std::get<0ul,LuaShellIndex,unsigned int>(&__in);
    id = std::get<1ul,LuaShellIndex,unsigned int>(&__in);
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v18);
    p_lua_shell_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v18)->design_config.db_config_mgr.db_local_config_mgr.lua_shell_mgr;
    if ( *(_BYTE *)(((unsigned __int64)id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)id >> 3) + 0x7FFF8000) )
    {
      p_lua_shell_mgr = (const data::DbLuaShellConfigMgr *)id;
      __asan_report_load4(id);
    }
    v3 = *id;
    if ( ((unsigned __int8)luashell_index & 7) >= *(_BYTE *)(((unsigned __int64)luashell_index >> 3) + 0x7FFF8000)
      && *(_BYTE *)(((unsigned __int64)luashell_index >> 3) + 0x7FFF8000) != 0
      || *(_BYTE *)((((unsigned __int64)&luashell_index->channel + 3) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)luashell_index + 7) & 7) >= *(_BYTE *)((((unsigned __int64)&luashell_index->channel + 3) >> 3)
                                                                 + 0x7FFF8000) )
    {
      v3 = 8;
      p_lua_shell_mgr = (const data::DbLuaShellConfigMgr *)luashell_index;
      __asan_report_load_n(luashell_index, 8LL);
    }
    v4 = v3;
    v20 = *luashell_index;
    lua_shell_config_ptr = data::DbLuaShellConfigMgr::findLuaShellConfig(p_lua_shell_mgr, v20, v4);
    std::shared_ptr<Config>::~shared_ptr(&v18);
    if ( lua_shell_config_ptr )
    {
      if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      Player::sendLuaShellAndRecord(this->player_, lua_shell_config_ptr);
    }
    else
    {
      common::milog::MiLogStream::create(
        &v19,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/player.cpp",
        "~CheckLuaShellOnLogin",
        4071);
      v5 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
             &v19,
             (const char (*)[41])"findLuaShellConfig fail, luashell_index:");
      v6 = operator<<(v5, luashell_index);
      v7 = common::milog::MiLogStream::operator<<<char [5],(char *[5])0>(v6, (const char (*)[5])" id:");
      v8 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, id);
      v9 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v8, (const char (*)[9])" player:");
      if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      operator<<(v9, this->player_);
      common::milog::MiLogStream::~MiLogStream(&v19);
    }
    __gnu_cxx::__normal_iterator<std::pair<LuaShellIndex,unsigned int> *,std::vector<std::pair<LuaShellIndex,unsigned int>>>::operator++(&__for_begin);
  }
  std::vector<std::pair<LuaShellIndex,unsigned int>>::~vector(&this->destruct_send_luashell_vec_);
};

// Line 4080: range 00000000171552DA-000000001715629E
void __cdecl Player::onTimer(Player *const this, uint64_t now_ms)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  PlayerBasicComp *BasicComp; // rax
  common::milog::MiLogStream *v6; // rdx
  unsigned __int64 uid; // rsi
  GameserverService *v8; // rax
  PlayerMgr *p_player_mgr; // r15
  uint32_t v10; // r14d
  uint64_t last_save_time_ms; // r14
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  GameserverService *v13; // rax
  PlayerMgr *v14; // r14
  char v15; // al
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  GameserverService *v19; // r14
  bool isSubAccount; // r15
  uint32_t PlatformType; // ecx
  PlayerSceneComp *SceneComp; // rax
  uint32_t v23; // ecx
  char v24; // al
  PlayerBlossomComp *BlossomComp; // rax
  PlayerDailyTaskComp *DailyTaskComp; // rax
  PlayerRoutineComp *RoutineComp; // rax
  PlayerSceneComp *v28; // rax
  int v29; // eax
  uint32_t disconnect_time; // r14d
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v31; // rax
  char v32; // al
  common::minet::Packet *v33; // rcx
  GameserverService *v34; // r14
  common::minet::PacketPtr v35; // rdi
  common::milog::MiLogStream *v36; // r14
  common::milog::MiLogStream *v37; // rax
  common::milog::MiLogStream *v38; // rdx
  std::string v39; // [rsp+0h] [rbp-190h]
  char *v40; // [rsp+0h] [rbp-190h]
  uint64_t now_msa; // [rsp+10h] [rbp-180h]
  Player *thisa; // [rsp+18h] [rbp-178h]
  int begin_time; // [rsp+2Ch] [rbp-164h]
  std::enable_shared_from_this<Player> v44; // [rsp+30h] [rbp-160h] BYREF
  common::milog::MiLogStream v45; // [rsp+40h] [rbp-150h] BYREF
  std::string val; // [rsp+60h] [rbp-130h] BYREF
  char v47[272]; // [rsp+80h] [rbp-110h] BYREF

  *(&v39._anon_0._M_allocated_capacity + 1) = (std::string::size_type)this;
  v39._anon_0._M_allocated_capacity = now_ms;
  v2 = (unsigned __int64)v47;
  v39._M_dataplus._M_p = v47;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(224LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "6 32 1 11 holder:4083 48 4 8 now:4084 64 16 10 timer:4081 96 16 15 config_ptr:4085 128 16 15 pac"
                        "ket_ptr:4164 160 24 8 req:4162";
  *(_QWORD *)(v2 + 16) = Player::onTimer;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556927;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862724] = -219021312;
  v4[536862725] = -218103808;
  v4[536862726] = -202116109;
  common::tools::TimeUtils::Timer::Timer((common::tools::TimeUtils::Timer *const)(v2 + 64));
  common::tools::TimeUtils::Timer::reset((common::tools::TimeUtils::Timer *const)(v2 + 64));
  BasicComp = Player::getBasicComp(this);
  PlayerBasicComp::getNextTransNo[abi:cxx11](&val, BasicComp);
  StatLogUtils::ContextHolder::ContextHolder((StatLogUtils::ContextHolder *const)(v2 + 32), 0x44Du, v39);
  std::string::~string(&val);
  *(_DWORD *)(v2 + 48) = common::tools::TimeUtils::getNow();
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v2 + 96));
  if ( std::operator==<Config>((const std::shared_ptr<Config> *)(v2 + 96), 0LL) )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&val,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/player.cpp",
      "onTimer",
      4088);
    v6 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
           (common::milog::MiLogStream *const)&val,
           (const char (*)[17])off_26036700);
    operator<<(v6, thisa);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&val);
  }
  else if ( Player::isConnected(thisa) )
  {
    Player::writePositionLog(thisa, *(_DWORD *)(v2 + 48), 0);
    uid = ((_BYTE)thisa - 124) & 7;
    if ( *(_BYTE *)(((unsigned __int64)&thisa->is_need_save_ >> 3) + 0x7FFF8000) != 0
      && (char)uid >= *(_BYTE *)(((unsigned __int64)&thisa->is_need_save_ >> 3) + 0x7FFF8000) )
    {
      __asan_report_load1(&thisa->is_need_save_);
    }
    if ( thisa->is_need_save_ )
    {
      v8 = ServiceBox::findService<GameserverService>();
      p_player_mgr = &GameserverService::getGameThreadLocal(v8)->player_mgr;
      v10 = *(_DWORD *)(v2 + 48);
      std::enable_shared_from_this<Player>::shared_from_this(&v44);
      uid = (unsigned __int64)&v44;
      PlayerMgr::enqueueSavePlayer(p_player_mgr, (PlayerPtr *)&v44, v10);
      std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)&v44);
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&thisa->last_save_time_ms_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      last_save_time_ms = thisa->last_save_time_ms_;
      v12 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
      if ( *(_BYTE *)(((unsigned __int64)&v12->timer_save_time_interval >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v12->timer_save_time_interval >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v12->timer_save_time_interval);
      }
      if ( now_msa > last_save_time_ms + 1000 * v12->timer_save_time_interval )
      {
        v13 = ServiceBox::findService<GameserverService>();
        v14 = &GameserverService::getGameThreadLocal(v13)->player_mgr;
        std::enable_shared_from_this<Player>::shared_from_this(&v44);
        uid = (unsigned __int64)&v44;
        PlayerMgr::enqueueSavePlayer(v14, (PlayerPtr *)&v44);
        std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)&v44);
        if ( *(_BYTE *)(((unsigned __int64)&thisa->last_save_time_ms_ >> 3) + 0x7FFF8000) )
          __asan_report_store8(&thisa->last_save_time_ms_, &v44);
        thisa->last_save_time_ms_ = now_msa;
      }
    }
    if ( Player::isEditorClient(thisa) )
      goto LABEL_26;
    if ( *(_BYTE *)(((unsigned __int64)&thisa->last_recv_ping_time_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&thisa->last_recv_ping_time_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&thisa->last_recv_ping_time_);
    }
    if ( thisa->last_recv_ping_time_
      && thisa->last_recv_ping_time_ < *(_DWORD *)(v2 + 48)
      && *(_DWORD *)(v2 + 48) - thisa->last_recv_ping_time_ > 0x78 )
    {
      v15 = 1;
    }
    else
    {
LABEL_26:
      v15 = 0;
    }
    if ( v15 )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&val,
        &common::milog::MiLogDefault::default_log_obj_,
        2u,
        "./src/player/player.cpp",
        "onTimer",
        4107);
      v16 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
              (common::milog::MiLogStream *const)&val,
              (const char (*)[36])"Ping timeout, last_recv_ping_time_ ");
      v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, &thisa->last_recv_ping_time_);
      v18 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v17, (const char (*)[7])" now: ");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, (const unsigned int *)(v2 + 48));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&val);
      uid = 10LL;
      Player::disconnectSession(thisa, 0xAu);
    }
    if ( *(_BYTE *)(((unsigned __int64)&thisa->last_send_online_notify_time_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&thisa->last_send_online_notify_time_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&thisa->last_send_online_notify_time_);
    }
    if ( thisa->last_send_online_notify_time_ < *(_DWORD *)(v2 + 48)
      && *(_DWORD *)(v2 + 48) - thisa->last_send_online_notify_time_ > 0x12C )
    {
      thisa->last_send_online_notify_time_ = *(_DWORD *)(v2 + 48);
      v19 = ServiceBox::findService<GameserverService>();
      isSubAccount = Player::isSubAccount(thisa);
      PlatformType = Player::getPlatformType(thisa);
      if ( *(_BYTE *)(((unsigned __int64)&thisa->uid_ >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&thisa->uid_ >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&thisa->uid_);
      }
      uid = thisa->uid_;
      GameserverService::updatePlayerOnlineStatus(
        v19,
        uid,
        PlayerOnlineStatusInfo_StatusType_ONLINE,
        PlatformType,
        isSubAccount,
        &thisa->country_code_);
    }
    if ( *(_BYTE *)(((unsigned __int64)&thisa->last_unexpected_pos_time_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&thisa->last_unexpected_pos_time_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&thisa->last_unexpected_pos_time_);
    }
    if ( thisa->last_unexpected_pos_time_ + 15 < *(_DWORD *)(v2 + 48) )
    {
      SceneComp = Player::getSceneComp(thisa);
      PlayerSceneComp::checkUnexpectedPos(SceneComp);
      v23 = *(_DWORD *)(v2 + 48);
      v24 = *(_BYTE *)(((unsigned __int64)&thisa->last_unexpected_pos_time_ >> 3) + 0x7FFF8000);
      if ( v24 != 0 && v24 <= 3 )
      {
        LOBYTE(uid) = v24 != 0;
        __asan_report_store4(&thisa->last_unexpected_pos_time_, uid, &thisa->last_unexpected_pos_time_);
      }
      thisa->last_unexpected_pos_time_ = v23;
    }
    if ( *(_BYTE *)(((unsigned __int64)&thisa->last_lua_shell_check_time_ >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)thisa - 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&thisa->last_lua_shell_check_time_ >> 3)
                                                           + 0x7FFF8000) )
    {
      __asan_report_load4(&thisa->last_lua_shell_check_time_);
    }
    if ( thisa->last_lua_shell_check_time_ + 60 < *(_DWORD *)(v2 + 48) )
      Player::checkLuaShell(thisa);
    if ( *(_BYTE *)(((unsigned __int64)&thisa->last_inject_fix_check_time_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&thisa->last_inject_fix_check_time_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&thisa->last_inject_fix_check_time_);
    }
    if ( thisa->last_inject_fix_check_time_ + 60 < *(_DWORD *)(v2 + 48) )
      Player::checkInjectFix(thisa);
    if ( *(_BYTE *)(((unsigned __int64)&thisa->last_blossom_check_time_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&thisa->last_blossom_check_time_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&thisa->last_blossom_check_time_);
    }
    if ( thisa->last_blossom_check_time_ + 60 < *(_DWORD *)(v2 + 48) )
    {
      thisa->last_blossom_check_time_ = *(_DWORD *)(v2 + 48);
      BlossomComp = Player::getBlossomComp(thisa);
      PlayerBlossomComp::tryRefresh(BlossomComp, 1);
    }
    if ( *(_BYTE *)(((unsigned __int64)&thisa->last_check_daily_task_unreg_group_time_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&thisa->last_check_daily_task_unreg_group_time_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&thisa->last_check_daily_task_unreg_group_time_);
    }
    if ( thisa->last_check_daily_task_unreg_group_time_ + 60 < *(_DWORD *)(v2 + 48) )
    {
      thisa->last_check_daily_task_unreg_group_time_ = *(_DWORD *)(v2 + 48);
      DailyTaskComp = Player::getDailyTaskComp(thisa);
      PlayerDailyTaskComp::tryUnregisterGroups(DailyTaskComp, 1);
      RoutineComp = Player::getRoutineComp(thisa);
      PlayerRoutineComp::tryUnregisterGroups(RoutineComp);
    }
    if ( *(_BYTE *)(((unsigned __int64)&thisa->last_check_force_silent_reload_group_time_ >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)thisa - 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&thisa->last_check_force_silent_reload_group_time_ >> 3)
                                                           + 0x7FFF8000) )
    {
      __asan_report_load4(&thisa->last_check_force_silent_reload_group_time_);
    }
    if ( thisa->last_check_force_silent_reload_group_time_ + 10 < *(_DWORD *)(v2 + 48) )
    {
      thisa->last_check_force_silent_reload_group_time_ = *(_DWORD *)(v2 + 48);
      begin_time = common::tools::TimeUtils::Timer::time((const common::tools::TimeUtils::Timer *const)(v2 + 64));
      v28 = Player::getSceneComp(thisa);
      PlayerSceneComp::checkSilentUpdate(v28);
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&val,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/player.cpp",
        "onTimer",
        4154);
      v29 = common::tools::TimeUtils::Timer::time((const common::tools::TimeUtils::Timer *const)(v2 + 64));
      common::milog::MiLogStream::operator()(
        (common::milog::MiLogStream *const)&val,
        "[FY] checkSilentUpdate cost [%u] us.",
        (unsigned int)(v29 - begin_time));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&val);
    }
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&thisa->disconnect_time_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&thisa->disconnect_time_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&thisa->disconnect_time_);
    }
    if ( !thisa->disconnect_time_ )
      goto LABEL_69;
    disconnect_time = thisa->disconnect_time_;
    v31 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
    if ( *(_BYTE *)(((unsigned __int64)&v31->time_wait_reconnect >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&v31->time_wait_reconnect >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&v31->time_wait_reconnect);
    }
    if ( disconnect_time + v31->time_wait_reconnect <= *(_DWORD *)(v2 + 48) )
      v32 = 1;
    else
LABEL_69:
      v32 = 0;
    if ( v32 )
    {
      proto::PlayerLogoutReq::PlayerLogoutReq((proto::PlayerLogoutReq *const)(v2 + 160));
      proto::PlayerLogoutReq::set_reason((proto::PlayerLogoutReq *const)(v2 + 160), PlayerLogoutReq_Reason_DISCONNECT);
      common::minet::PacketUtils::createPacket<proto::PlayerLogoutReq>((const proto::PlayerLogoutReq *)(v2 + 128));
      if ( std::operator==<common::minet::Packet>(0LL, (const std::shared_ptr<common::minet::Packet> *)(v2 + 128)) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&val,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/player/player.cpp",
          "onTimer",
          4167);
        common::milog::MiLogStream::operator()((common::milog::MiLogStream *const)&val, "create packet failed");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&val);
      }
      else
      {
        v33 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 128));
        if ( *(_BYTE *)(((unsigned __int64)&thisa->uid_ >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&thisa->uid_ >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&thisa->uid_);
        }
        common::minet::Packet::setUserId(v33, thisa->uid_);
        v34 = ServiceBox::findService<GameserverService>();
        std::shared_ptr<common::minet::Packet>::shared_ptr(
          (std::shared_ptr<common::minet::Packet> *const)&v44,
          (const std::shared_ptr<common::minet::Packet> *)(v2 + 128));
        GameserverService::setPacketGameThreadIndex(v34, (common::minet::PacketPtr *)&v44);
        std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)&v44);
        v35._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)(v2 + 128);
        std::shared_ptr<common::minet::Packet>::shared_ptr(
          (std::shared_ptr<common::minet::Packet> *const)&v44,
          (const std::shared_ptr<common::minet::Packet> *)(v2 + 128));
        v35._M_ptr = (std::__shared_ptr<common::minet::Packet,(__gnu_cxx::_Lock_policy)2>::element_type *)&v44;
        ServiceBox::pushPacketToService(v35);
        std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)&v44);
        common::milog::MiLogStream::create(
          &v45,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/player/player.cpp",
          "onTimer",
          4175);
        v36 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
                &v45,
                (const char (*)[34])"[LOGOUT] player is disconnect at:");
        if ( *(_BYTE *)(((unsigned __int64)&thisa->disconnect_time_ >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&thisa->disconnect_time_ >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&thisa->disconnect_time_);
        }
        common::tools::TimeUtils::getStrByTime[abi:cxx11](&val, thisa->disconnect_time_);
        v37 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v36, &val);
        v38 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                v37,
                (const char (*)[18])", call logout now");
        operator<<(v38, thisa);
        std::string::~string(&val);
        common::milog::MiLogStream::~MiLogStream(&v45);
      }
      std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v2 + 128));
      proto::PlayerLogoutReq::~PlayerLogoutReq((proto::PlayerLogoutReq *const)(v2 + 160));
    }
  }
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v2 + 96));
  StatLogUtils::ContextHolder::~ContextHolder((StatLogUtils::ContextHolder *const)(v2 + 32));
  common::tools::TimeUtils::Timer::~Timer((common::tools::TimeUtils::Timer *const)(v2 + 64));
  if ( v40 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = -168430091;
  }
};

// Line 4182: range 00000000171562A0-0000000017156677
std::pair<int,std::vector<unsigned int> > *__cdecl Player::checkMpModeAvailability(
        std::pair<int,std::vector<unsigned int> > *retstr,
        const Player *const this)
{
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v2; // rax
  bool v3; // bl
  std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v4; // rax
  unsigned __int64 v5; // rdx
  int v6; // ebx
  proto::Retcode __x; // [rsp+1Ch] [rbp-A4h] BYREF
  const Player *__for_range; // [rsp+20h] [rbp-A0h]
  const std::pair<unsigned int,std::shared_ptr<PlayerCompBase> > *v10; // [rsp+28h] [rbp-98h]
  std::tuple_element<0,const std::pair<unsigned int,std::shared_ptr<PlayerCompBase> > >::type *comp_type; // [rsp+30h] [rbp-90h]
  std::tuple_element<1,const std::pair<unsigned int,std::shared_ptr<PlayerCompBase> > >::type *player_comp_ptr; // [rsp+38h] [rbp-88h]
  std::tuple_element<0,std::pair<int,std::vector<unsigned int> > >::type *ret; // [rsp+40h] [rbp-80h]
  std::tuple_element<1,std::pair<int,std::vector<unsigned int> > >::type *vec; // [rsp+48h] [rbp-78h]
  EcsBase<Player,PlayerCompBase,71>::Iterator __for_begin; // [rsp+50h] [rbp-70h] BYREF
  EcsBase<Player,PlayerCompBase,71>::Iterator __for_end; // [rsp+60h] [rbp-60h] BYREF
  std::vector<unsigned int> __y; // [rsp+70h] [rbp-50h] BYREF
  std::pair<int,std::vector<unsigned int> > __in; // [rsp+90h] [rbp-30h] BYREF

  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&__for_end);
  v2 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&__for_end);
  v3 = !ConstValueExcelConfigMgr::getIsMpOpen(&v2->design_config.txt_config_mgr.const_value_config_mgr);
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)&__for_end);
  if ( v3 )
  {
    memset(&__y, 0, sizeof(__y));
    std::vector<unsigned int>::vector(&__y);
    __x = RET_MP_MODE_NOT_AVAILABLE;
    std::make_pair<proto::Retcode,std::vector<unsigned int>>(
      (std::pair<proto::Retcode,std::vector<unsigned int> > *)&__in,
      &__x,
      &__y);
    std::pair<int,std::vector<unsigned int>>::pair<proto::Retcode,std::vector<unsigned int>,true>(
      retstr,
      (std::pair<proto::Retcode,std::vector<unsigned int> > *)&__in);
    std::pair<proto::Retcode,std::vector<unsigned int>>::~pair((std::pair<proto::Retcode,std::vector<unsigned int> > *const)&__in);
    std::vector<unsigned int>::~vector(&__y);
  }
  else
  {
    __for_range = this;
    EcsBase<Player,PlayerCompBase,71u>::begin((const EcsBase<Player,PlayerCompBase,71> *const)&__for_begin);
    EcsBase<Player,PlayerCompBase,71u>::end((const EcsBase<Player,PlayerCompBase,71> *const)&__for_end);
    while ( EcsBase<Player,PlayerCompBase,71u>::Iterator::operator!=(&__for_begin, &__for_end) )
    {
      v10 = EcsBase<Player,PlayerCompBase,71u>::Iterator::operator*(&__for_begin);
      comp_type = (std::tuple_element<0,const std::pair<unsigned int,std::shared_ptr<PlayerCompBase> > >::type *)std::get<0ul,unsigned int,std::shared_ptr<PlayerCompBase>>(v10);
      player_comp_ptr = (std::tuple_element<1,const std::pair<unsigned int,std::shared_ptr<PlayerCompBase> > >::type *)std::get<1ul,unsigned int,std::shared_ptr<PlayerCompBase>>(v10);
      v4 = std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false> *const)player_comp_ptr);
      if ( *(_BYTE *)(((unsigned __int64)v4 >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v5 = (unsigned __int64)(v4->_vptr_PlayerCompBase + 14);
      if ( *(_BYTE *)((v5 >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      (*(void (__fastcall **)(std::pair<int,std::vector<unsigned int> > *, std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *))v5)(
        &__in,
        v4);
      ret = std::get<0ul,int,std::vector<unsigned int>>(&__in);
      vec = std::get<1ul,int,std::vector<unsigned int>>(&__in);
      if ( *(_BYTE *)(((unsigned __int64)ret >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)ret & 7) + 3) >= *(_BYTE *)(((unsigned __int64)ret >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(ret);
      }
      if ( *ret )
      {
        if ( *(char *)(((unsigned __int64)retstr >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)((((unsigned __int64)&retstr->second._M_impl._M_end_of_storage + 7) >> 3) + 0x7FFF8000) != 0
          && (((unsigned __int8)retstr + 31) & 7) >= *(_BYTE *)((((unsigned __int64)&retstr->second._M_impl._M_end_of_storage
                                                                + 7) >> 3)
                                                              + 0x7FFF8000) )
        {
          __asan_report_store_n(retstr, 32LL);
        }
        std::make_pair<int &,std::vector<unsigned int> &>(retstr, ret, vec);
        v6 = 0;
      }
      else
      {
        v6 = 1;
      }
      std::pair<int,std::vector<unsigned int>>::~pair(&__in);
      if ( v6 != 1 )
        return retstr;
      EcsBase<Player,PlayerCompBase,71u>::Iterator::operator++(&__for_begin);
    }
    memset(&__y, 0, sizeof(__y));
    std::vector<unsigned int>::vector(&__y);
    __x = RET_SUCC;
    std::make_pair<proto::Retcode,std::vector<unsigned int>>(
      (std::pair<proto::Retcode,std::vector<unsigned int> > *)&__in,
      &__x,
      &__y);
    std::pair<int,std::vector<unsigned int>>::pair<proto::Retcode,std::vector<unsigned int>,true>(
      retstr,
      (std::pair<proto::Retcode,std::vector<unsigned int> > *)&__in);
    std::pair<proto::Retcode,std::vector<unsigned int>>::~pair((std::pair<proto::Retcode,std::vector<unsigned int> > *const)&__in);
    std::vector<unsigned int>::~vector(&__y);
  }
  return retstr;
};

// Line 4201: range 0000000017156678-00000000171566AC
bool __cdecl Player::checkAndSetLastRefreshTime(Player *const this, uint32_t now, bool *is_cross_month)
{
  PlayerBasicComp *BasicComp; // rax

  BasicComp = Player::getBasicComp(this);
  return PlayerBasicComp::checkAndSetLastRefreshTime(BasicComp, now, is_cross_month);
};

// Line 4207: range 00000000171566AE-000000001715682E
void __cdecl Player::onDailyRefresh(Player *const this)
{
  std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v1; // rax
  unsigned __int64 v2; // rdx
  common::milog::MiLogStream *v3; // rax
  const EcsBase<Player,PlayerCompBase,71>::CompBasePair *v4; // [rsp+18h] [rbp-68h]
  std::tuple_element<1,const std::pair<unsigned int,std::shared_ptr<PlayerCompBase> > >::type *player_comp_ptr; // [rsp+28h] [rbp-58h]
  EcsBase<Player,PlayerCompBase,71>::Iterator __for_begin; // [rsp+30h] [rbp-50h] BYREF
  EcsBase<Player,PlayerCompBase,71>::Iterator __for_end; // [rsp+40h] [rbp-40h] BYREF
  common::milog::MiLogStream v8; // [rsp+50h] [rbp-30h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::begin((const EcsBase<Player,PlayerCompBase,71> *const)&__for_begin);
  EcsBase<Player,PlayerCompBase,71u>::end((const EcsBase<Player,PlayerCompBase,71> *const)&__for_end);
  while ( EcsBase<Player,PlayerCompBase,71u>::Iterator::operator!=(&__for_begin, &__for_end) )
  {
    v4 = EcsBase<Player,PlayerCompBase,71u>::Iterator::operator*(&__for_begin);
    std::get<0ul,unsigned int,std::shared_ptr<PlayerCompBase>>(v4);
    player_comp_ptr = (std::tuple_element<1,const std::pair<unsigned int,std::shared_ptr<PlayerCompBase> > >::type *)std::get<1ul,unsigned int,std::shared_ptr<PlayerCompBase>>(v4);
    v1 = std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false> *const)player_comp_ptr);
    if ( *(_BYTE *)(((unsigned __int64)v1 >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v2 = (unsigned __int64)(v1->_vptr_PlayerCompBase + 15);
    if ( *(_BYTE *)((v2 >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    (*(void (__fastcall **)(std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *))v2)(v1);
    EcsBase<Player,PlayerCompBase,71u>::Iterator::operator++(&__for_begin);
  }
  common::milog::MiLogStream::create(
    &v8,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/player/player.cpp",
    "onDailyRefresh",
    4213);
  v3 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
         &v8,
         (const char (*)[27])"player daily refresh, uid:");
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v3, &this->uid_);
  common::milog::MiLogStream::~MiLogStream(&v8);
};

// Line 4217: range 0000000017156830-00000000171569B0
void __cdecl Player::onLoginDailyRefresh(Player *const this)
{
  std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v1; // rax
  unsigned __int64 v2; // rdx
  common::milog::MiLogStream *v3; // rax
  const EcsBase<Player,PlayerCompBase,71>::CompBasePair *v4; // [rsp+18h] [rbp-68h]
  std::tuple_element<1,const std::pair<unsigned int,std::shared_ptr<PlayerCompBase> > >::type *player_comp_ptr; // [rsp+28h] [rbp-58h]
  EcsBase<Player,PlayerCompBase,71>::Iterator __for_begin; // [rsp+30h] [rbp-50h] BYREF
  EcsBase<Player,PlayerCompBase,71>::Iterator __for_end; // [rsp+40h] [rbp-40h] BYREF
  common::milog::MiLogStream v8; // [rsp+50h] [rbp-30h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::begin((const EcsBase<Player,PlayerCompBase,71> *const)&__for_begin);
  EcsBase<Player,PlayerCompBase,71u>::end((const EcsBase<Player,PlayerCompBase,71> *const)&__for_end);
  while ( EcsBase<Player,PlayerCompBase,71u>::Iterator::operator!=(&__for_begin, &__for_end) )
  {
    v4 = EcsBase<Player,PlayerCompBase,71u>::Iterator::operator*(&__for_begin);
    std::get<0ul,unsigned int,std::shared_ptr<PlayerCompBase>>(v4);
    player_comp_ptr = (std::tuple_element<1,const std::pair<unsigned int,std::shared_ptr<PlayerCompBase> > >::type *)std::get<1ul,unsigned int,std::shared_ptr<PlayerCompBase>>(v4);
    v1 = std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false> *const)player_comp_ptr);
    if ( *(_BYTE *)(((unsigned __int64)v1 >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v2 = (unsigned __int64)(v1->_vptr_PlayerCompBase + 16);
    if ( *(_BYTE *)((v2 >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    (*(void (__fastcall **)(std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *))v2)(v1);
    EcsBase<Player,PlayerCompBase,71u>::Iterator::operator++(&__for_begin);
  }
  common::milog::MiLogStream::create(
    &v8,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/player/player.cpp",
    "onLoginDailyRefresh",
    4222);
  v3 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
         &v8,
         (const char (*)[33])"player login daily refresh, uid:");
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v3, &this->uid_);
  common::milog::MiLogStream::~MiLogStream(&v8);
};

// Line 4226: range 00000000171569B2-0000000017156B35
void __cdecl Player::onMonthlyRefresh(Player *const this)
{
  std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v1; // rax
  unsigned __int64 v2; // rdx
  common::milog::MiLogStream *v3; // rax
  const EcsBase<Player,PlayerCompBase,71>::CompBasePair *v4; // [rsp+18h] [rbp-68h]
  std::tuple_element<1,const std::pair<unsigned int,std::shared_ptr<PlayerCompBase> > >::type *player_comp_ptr; // [rsp+28h] [rbp-58h]
  EcsBase<Player,PlayerCompBase,71>::Iterator __for_begin; // [rsp+30h] [rbp-50h] BYREF
  EcsBase<Player,PlayerCompBase,71>::Iterator __for_end; // [rsp+40h] [rbp-40h] BYREF
  common::milog::MiLogStream v8; // [rsp+50h] [rbp-30h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::begin((const EcsBase<Player,PlayerCompBase,71> *const)&__for_begin);
  EcsBase<Player,PlayerCompBase,71u>::end((const EcsBase<Player,PlayerCompBase,71> *const)&__for_end);
  while ( EcsBase<Player,PlayerCompBase,71u>::Iterator::operator!=(&__for_begin, &__for_end) )
  {
    v4 = EcsBase<Player,PlayerCompBase,71u>::Iterator::operator*(&__for_begin);
    std::get<0ul,unsigned int,std::shared_ptr<PlayerCompBase>>(v4);
    player_comp_ptr = (std::tuple_element<1,const std::pair<unsigned int,std::shared_ptr<PlayerCompBase> > >::type *)std::get<1ul,unsigned int,std::shared_ptr<PlayerCompBase>>(v4);
    v1 = std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false> *const)player_comp_ptr);
    if ( *(_BYTE *)(((unsigned __int64)v1 >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v2 = (unsigned __int64)(v1->_vptr_PlayerCompBase + 17);
    if ( *(_BYTE *)((v2 >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    (*(void (__fastcall **)(std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *))v2)(v1);
    EcsBase<Player,PlayerCompBase,71u>::Iterator::operator++(&__for_begin);
  }
  common::milog::MiLogStream::create(
    &v8,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/player/player.cpp",
    "onMonthlyRefresh",
    4231);
  v3 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
         &v8,
         (const char (*)[29])"player monthly refresh, uid:");
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v3, &this->uid_);
  common::milog::MiLogStream::~MiLogStream(&v8);
};

// Line 4235: range 0000000017156B36-0000000017156CB9
void __cdecl Player::onLoginMonthlyRefresh(Player *const this)
{
  std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v1; // rax
  unsigned __int64 v2; // rdx
  common::milog::MiLogStream *v3; // rax
  const EcsBase<Player,PlayerCompBase,71>::CompBasePair *v4; // [rsp+18h] [rbp-68h]
  std::tuple_element<1,const std::pair<unsigned int,std::shared_ptr<PlayerCompBase> > >::type *player_comp_ptr; // [rsp+28h] [rbp-58h]
  EcsBase<Player,PlayerCompBase,71>::Iterator __for_begin; // [rsp+30h] [rbp-50h] BYREF
  EcsBase<Player,PlayerCompBase,71>::Iterator __for_end; // [rsp+40h] [rbp-40h] BYREF
  common::milog::MiLogStream v8; // [rsp+50h] [rbp-30h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::begin((const EcsBase<Player,PlayerCompBase,71> *const)&__for_begin);
  EcsBase<Player,PlayerCompBase,71u>::end((const EcsBase<Player,PlayerCompBase,71> *const)&__for_end);
  while ( EcsBase<Player,PlayerCompBase,71u>::Iterator::operator!=(&__for_begin, &__for_end) )
  {
    v4 = EcsBase<Player,PlayerCompBase,71u>::Iterator::operator*(&__for_begin);
    std::get<0ul,unsigned int,std::shared_ptr<PlayerCompBase>>(v4);
    player_comp_ptr = (std::tuple_element<1,const std::pair<unsigned int,std::shared_ptr<PlayerCompBase> > >::type *)std::get<1ul,unsigned int,std::shared_ptr<PlayerCompBase>>(v4);
    v1 = std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false> *const)player_comp_ptr);
    if ( *(_BYTE *)(((unsigned __int64)v1 >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v2 = (unsigned __int64)(v1->_vptr_PlayerCompBase + 18);
    if ( *(_BYTE *)((v2 >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    (*(void (__fastcall **)(std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *))v2)(v1);
    EcsBase<Player,PlayerCompBase,71u>::Iterator::operator++(&__for_begin);
  }
  common::milog::MiLogStream::create(
    &v8,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/player/player.cpp",
    "onLoginMonthlyRefresh",
    4240);
  v3 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
         &v8,
         (const char (*)[35])"player login monthly refresh, uid:");
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v3, &this->uid_);
  common::milog::MiLogStream::~MiLogStream(&v8);
};

// Line 4244: range 0000000017156CBA-0000000017156D15
bool __cdecl Player::isPsnPlatform(const Player *const this)
{
  if ( *(_BYTE *)(((unsigned __int64)&this->platform_type_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->platform_type_ >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->platform_type_);
  }
  return TxtConfigMgr::isPsnPlatform(this->platform_type_);
};

// Line 4249: range 0000000017156D16-0000000017156D71
uint32_t __cdecl Player::getPlatformFlag(const Player *const this)
{
  if ( *(_BYTE *)(((unsigned __int64)&this->platform_type_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->platform_type_ >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->platform_type_);
  }
  return TxtConfigMgr::getPlatformFlag(this->platform_type_);
};

// Line 4255: range 0000000017156D72-0000000017156D93
float __cdecl Player::getCurStamina(Player *const this)
{
  PlayerBasicComp *BasicComp; // rax

  BasicComp = Player::getBasicComp(this);
  return PlayerBasicComp::getCurStamina(BasicComp);
};

// Line 4261: range 0000000017156D94-0000000017156F24
int32_t __cdecl Player::notifyPlayerProp(Player *const this, const proto::PropValue *prop_value)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  int32_t v5; // r14d
  int32_t result; // eax
  std::allocator<proto::PropValue> __a; // [rsp+1Fh] [rbp-91h] BYREF
  char v8[144]; // [rsp+20h] [rbp-90h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 24 13 prop_vec:4262";
  *(_QWORD *)(v2 + 16) = Player::notifyPlayerProp;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218103808;
  v4[536862722] = -202116109;
  std::allocator<proto::PropValue>::allocator(&__a);
  std::vector<proto::PropValue>::vector((std::vector<proto::PropValue> *const)(v2 + 32), 1uLL, prop_value, &__a);
  std::allocator<proto::PropValue>::~allocator(&__a);
  v5 = Player::notifyPlayerPropList(this, (const std::vector<proto::PropValue> *)(v2 + 32));
  std::vector<proto::PropValue>::~vector((std::vector<proto::PropValue> *const)(v2 + 32));
  result = v5;
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 4268: range 0000000017156F26-0000000017156F96
int32_t __cdecl Player::notifyPlayerIntProp(Player *const this, data::PropType prop_type, int64_t value)
{
  int32_t v3; // ebx
  proto::PropValue prop_value; // [rsp+20h] [rbp-40h] BYREF

  buildIntProp(&prop_value, prop_type, value);
  v3 = Player::notifyPlayerProp(this, &prop_value);
  proto::PropValue::~PropValue(&prop_value);
  return v3;
};

// Line 4274: range 0000000017156F98-00000000171571B8
int32_t __cdecl Player::notifyPlayerPropList(Player *const this, const std::vector<proto::PropValue> *prop_vec)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  proto::PropValue *v5; // rax
  int32_t v6; // r14d
  int32_t result; // eax
  google::protobuf::Map<unsigned int,proto::PropValue>::key_type key; // [rsp+14h] [rbp-FCh] BYREF
  std::vector<proto::PropValue>::const_iterator __for_begin; // [rsp+18h] [rbp-F8h] BYREF
  std::vector<proto::PropValue>::const_iterator __for_end; // [rsp+20h] [rbp-F0h] BYREF
  google::protobuf::Map<unsigned int,proto::PropValue> *proto_prop_map; // [rsp+28h] [rbp-E8h]
  const std::vector<proto::PropValue> *__for_range; // [rsp+30h] [rbp-E0h]
  const proto::PropValue *prop_value; // [rsp+38h] [rbp-D8h]
  char v14[208]; // [rsp+40h] [rbp-D0h] BYREF

  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(160LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 96 11 notify:4275";
  *(_QWORD *)(v2 + 16) = Player::notifyPlayerPropList;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450896) = -202116109;
  proto::PlayerPropNotify::PlayerPropNotify((proto::PlayerPropNotify *const)(v2 + 32));
  proto_prop_map = proto::PlayerPropNotify::mutable_prop_map((proto::PlayerPropNotify *const)(v2 + 32));
  __for_range = prop_vec;
  __for_begin._M_current = std::vector<proto::PropValue>::begin(prop_vec)._M_current;
  __for_end._M_current = std::vector<proto::PropValue>::end(prop_vec)._M_current;
  while ( __gnu_cxx::operator!=<proto::PropValue const*,std::vector<proto::PropValue>>(&__for_begin, &__for_end) )
  {
    prop_value = __gnu_cxx::__normal_iterator<proto::PropValue const*,std::vector<proto::PropValue>>::operator*(&__for_begin);
    key = proto::PropValue::type(prop_value);
    v5 = google::protobuf::Map<unsigned int,proto::PropValue>::operator[](proto_prop_map, &key);
    proto::PropValue::operator=(v5, prop_value);
    __gnu_cxx::__normal_iterator<proto::PropValue const*,std::vector<proto::PropValue>>::operator++(&__for_begin);
  }
  v6 = Player::sendProto(this, (const google::protobuf::Message *)(v2 + 32));
  proto::PlayerPropNotify::~PlayerPropNotify((proto::PlayerPropNotify *const)(v2 + 32));
  result = v6;
  if ( v14 == (char *)v2 )
  {
    *(_DWORD *)((v2 >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 4286: range 00000000171571BA-00000000171573D2
int32_t __cdecl Player::notifyPlayerPropChange(
        Player *const this,
        data::PropType prop_type,
        float old_value,
        float cur_value,
        proto::PropChangeReason reason)
{
  unsigned __int64 v5; // rbx
  __int64 v6; // rax
  _DWORD *v7; // r13
  int32_t v9; // r14d
  int32_t result; // eax
  char v12[176]; // [rsp+20h] [rbp-B0h] BYREF

  v5 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_1(128LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "1 48 40 11 notify:4291";
  *(_QWORD *)(v5 + 16) = Player::notifyPlayerPropChange;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = 61937;
  v7[536862722] = -218103808;
  v7[536862723] = -202116109;
  if ( reason == PROP_CHANGE_NONE || !proto::PropChangeReason_IsValid(reason) || old_value == cur_value )
  {
    v9 = 0;
  }
  else
  {
    proto::PlayerPropChangeReasonNotify::PlayerPropChangeReasonNotify((proto::PlayerPropChangeReasonNotify *const)(v5 + 48));
    proto::PlayerPropChangeReasonNotify::set_prop_type((proto::PlayerPropChangeReasonNotify *const)(v5 + 48), prop_type);
    proto::PlayerPropChangeReasonNotify::set_old_value((proto::PlayerPropChangeReasonNotify *const)(v5 + 48), old_value);
    proto::PlayerPropChangeReasonNotify::set_cur_value((proto::PlayerPropChangeReasonNotify *const)(v5 + 48), cur_value);
    proto::PlayerPropChangeReasonNotify::set_reason((proto::PlayerPropChangeReasonNotify *const)(v5 + 48), reason);
    v9 = Player::sendProto(this, (const google::protobuf::Message *)(v5 + 48));
    proto::PlayerPropChangeReasonNotify::~PlayerPropChangeReasonNotify((proto::PlayerPropChangeReasonNotify *const)(v5 + 48));
  }
  result = v9;
  if ( v12 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4301: range 00000000171573D4-00000000171574F5
proto::ScenePlayerInfo *__cdecl Player::getScenePlayerInfo(proto::ScenePlayerInfo *retstr, Player *const this)
{
  PlayerSceneComp *SceneComp; // rax
  uint32_t PeerId; // edx
  PlayerBasicComp *BasicComp; // rax
  const std::string *v5; // rdx
  PlayerSceneComp *v6; // rax
  uint32_t CurSceneId; // edx
  PlayerMpComp *MpComp; // rbx
  proto::OnlinePlayerInfo *v9; // rax

  proto::ScenePlayerInfo::ScenePlayerInfo(retstr);
  if ( *(_BYTE *)(((unsigned __int64)&this->uid_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->uid_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->uid_);
  }
  proto::ScenePlayerInfo::set_uid(retstr, this->uid_);
  SceneComp = Player::getSceneComp(this);
  PeerId = PlayerSceneComp::getPeerId(SceneComp);
  proto::ScenePlayerInfo::set_peer_id(retstr, PeerId);
  BasicComp = Player::getBasicComp(this);
  v5 = PlayerBasicComp::getNickName[abi:cxx11](BasicComp);
  proto::ScenePlayerInfo::set_name(retstr, v5);
  v6 = Player::getSceneComp(this);
  CurSceneId = PlayerSceneComp::getCurSceneId(v6);
  proto::ScenePlayerInfo::set_scene_id(retstr, CurSceneId);
  MpComp = Player::getMpComp(this);
  v9 = proto::ScenePlayerInfo::mutable_online_player_info(retstr);
  PlayerMpComp::fillOnlinePlayerInfo(MpComp, v9);
  return retstr;
};

// Line 4313: range 00000000171574F6-000000001715782D
// local variable allocation has failed, the output may be wrong!
void __cdecl Player::writePositionLog(Player *const this, uint32_t now, bool force)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  PlayerBasicComp *BasicComp; // rax
  __int64 v8; // rdx
  std::string forcea; // [rsp+0h] [rbp-E0h] OVERLAPPED BYREF
  std::shared_ptr<google::protobuf::Message> p_body_ext_ptr; // [rsp+20h] [rbp-C0h] BYREF
  std::string v11; // [rsp+30h] [rbp-B0h] BYREF
  char v12[144]; // [rsp+50h] [rbp-90h] BYREF

  forcea._M_string_length = (std::string::size_type)this;
  HIDWORD(forcea._M_dataplus._M_p) = now;
  LOBYTE(forcea._M_dataplus._M_p) = force;
  v3 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 1 11 holder:4322 64 16 15 avatar_ptr:4316";
  *(_QWORD *)(v3 + 16) = Player::writePositionLog;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753551;
  v5[536862722] = -202178560;
  if ( *(_BYTE *)(((forcea._M_string_length + 972) >> 3) + 0x7FFF8000) != 0
    && (char)(((LOBYTE(forcea._M_string_length) - 52) & 7) + 3) >= *(_BYTE *)(((forcea._M_string_length + 972) >> 3)
                                                                            + 0x7FFF8000) )
  {
    __asan_report_load4(forcea._M_string_length + 972);
  }
  if ( HIDWORD(forcea._M_dataplus._M_p) >= *(_DWORD *)(forcea._M_string_length + 972) + 30 )
  {
    Player::getCurAvatar((Player *const)(v3 + 64));
    if ( !std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v3 + 64), 0LL) )
    {
      v6 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      if ( Entity::isOnScene((const Entity *const)v6) )
      {
        BasicComp = Player::getBasicComp((Player *const)forcea._M_string_length);
        PlayerBasicComp::getNextTransNo[abi:cxx11](&v11, BasicComp);
        StatLogUtils::ContextHolder::ContextHolder((StatLogUtils::ContextHolder *const)(v3 + 48), 0x44Eu, forcea);
        std::string::~string(&v11);
        std::shared_ptr<google::protobuf::Message>::shared_ptr(&p_body_ext_ptr, 0LL);
        std::shared_ptr<google::protobuf::Message>::shared_ptr(
          (std::shared_ptr<google::protobuf::Message> *const)&forcea._anon_0,
          0LL);
        Player::printStatLog(
          (Player *const)forcea._M_string_length,
          (MessagePtr *)&forcea._anon_0,
          &p_body_ext_ptr,
          0xEu);
        std::shared_ptr<google::protobuf::Message>::~shared_ptr((std::shared_ptr<google::protobuf::Message> *const)&forcea._anon_0);
        std::shared_ptr<google::protobuf::Message>::~shared_ptr(&p_body_ext_ptr);
        v8 = (*(_BYTE *)(((forcea._M_string_length + 972) >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)(((LOBYTE(forcea._M_string_length) - 52) & 7) + 3) >= *(_BYTE *)(((forcea._M_string_length + 972) >> 3) + 0x7FFF8000));
        if ( (_BYTE)v8 )
          __asan_report_store4(forcea._M_string_length + 972, ((LOBYTE(forcea._M_string_length) - 52) & 7u) + 3, v8);
        *(_DWORD *)(forcea._M_string_length + 972) = HIDWORD(forcea._M_dataplus._M_p);
        StatLogUtils::ContextHolder::~ContextHolder((StatLogUtils::ContextHolder *const)(v3 + 48));
      }
    }
    std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 64));
  }
  if ( v12 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 4329: range 000000001715782E-0000000017157F55
void __cdecl Player::setSession(Player *const this, PlayerSessionProxyPtr *p_session_ptr, bool is_relogin)
{
  GameserverService *v3; // rax
  PlayerMgr *p_player_mgr; // rdx
  std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  const std::string *v6; // rax
  std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  std::pair<unsigned int,unsigned int> *p_p; // rsi
  std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  __int64 ChannelId; // rdx
  char v12; // al
  std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  uint32_t SubChannelId; // ecx
  char v15; // dl
  __int64 v16; // rdx
  std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  __int64 AccountType; // rdx
  char v19; // al
  std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  std::string *v21; // rsi
  std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v22; // rax
  unsigned int v23; // eax
  __int64 v24; // rdx
  char v25; // al
  std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v26; // rax
  __int64 GmUid; // rdx
  char v28; // al
  PlayerBasicComp *BasicComp; // rbx
  std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v30; // rax
  std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v31; // rax
  uint32_t ClientToken; // ecx
  char v33; // dl
  const proto::PlayerLoginReq *LoginReq; // rsi
  __int64 v35; // rdx
  PlayerBasicComp *v36; // rcx
  std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v37; // rax
  uint32_t PlatformType; // ecx
  char v39; // dl
  __int64 v40; // rdx
  std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v41; // rax
  uint32_t Tag; // ecx
  char v43; // dl
  __int64 v44; // rdx
  GameserverService *v45; // rax
  PlayerMgr *v46; // rdx
  common::milog::MiLogStream *v47; // rax
  common::milog::MiLogStream *v48; // rax
  common::milog::MiLogStream *v49; // rax
  common::milog::MiLogStream *v50; // rax
  common::milog::MiLogStream *v51; // rax
  common::milog::MiLogStream *v52; // rax
  common::milog::MiLogStream *v53; // rax
  common::milog::MiLogStream *v54; // rax
  common::milog::MiLogStream *v55; // rax
  common::milog::MiLogStream *v56; // rax
  common::milog::MiLogStream *v57; // rax
  common::milog::MiLogStream *v58; // rax
  common::milog::MiLogStream *v59; // rbx
  std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v60; // rax
  common::milog::MiLogStream *v61; // rax
  common::milog::MiLogStream *v62; // rax
  common::milog::MiLogStream *v63; // rax
  common::milog::MiLogStream *v64; // rbx
  PlayerBasicComp *v65; // rax
  unsigned int __x; // [rsp+20h] [rbp-50h] BYREF
  unsigned int __y; // [rsp+24h] [rbp-4Ch] BYREF
  std::pair<unsigned int,unsigned int> __p; // [rsp+28h] [rbp-48h] BYREF
  std::shared_ptr<PlayerSessionProxy> v71; // [rsp+30h] [rbp-40h] BYREF
  std::string v72; // [rsp+40h] [rbp-30h] BYREF

  v3 = ServiceBox::findService<GameserverService>();
  p_player_mgr = &GameserverService::getGameThreadLocal(v3)->player_mgr;
  PlayerMgr::erasePlayerVersion(p_player_mgr, this);
  std::weak_ptr<PlayerSessionProxy>::operator=<PlayerSessionProxy>(&this->session_wtr_, p_session_ptr);
  if ( std::operator!=<PlayerSessionProxy>(0LL, p_session_ptr) )
  {
    v5 = std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_session_ptr);
    v6 = PlayerSessionProxy::getAccountToken[abi:cxx11](v5);
    std::string::operator=(&this->account_token_, v6);
    v7 = std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_session_ptr);
    __y = PlayerSessionProxy::getGateserverSessionId(v7);
    v8 = std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_session_ptr);
    __x = PlayerSessionProxy::getGateserverId(v8);
    __p = std::make_pair<unsigned int,unsigned int>(&__x, &__y);
    p_p = &__p;
    std::pair<unsigned int,unsigned int>::operator=(&this->last_gate_session_, &__p);
    v10 = std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_session_ptr);
    ChannelId = PlayerSessionProxy::getChannelId(v10);
    v12 = *(_BYTE *)(((unsigned __int64)&this->channel_id_ >> 3) + 0x7FFF8000);
    if ( v12 != 0 && v12 <= 3 )
    {
      LOBYTE(p_p) = v12 != 0;
      __asan_report_store4(&this->channel_id_, p_p, ChannelId);
    }
    this->channel_id_ = ChannelId;
    v13 = std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_session_ptr);
    SubChannelId = PlayerSessionProxy::getSubChannelId(v13);
    v15 = *(_BYTE *)(((unsigned __int64)&this->sub_channel_id_ >> 3) + 0x7FFF8000);
    LOBYTE(p_p) = v15 != 0;
    v16 = (v15 != 0) & (unsigned __int8)((char)((((_BYTE)this - 116) & 7) + 3) >= v15);
    if ( (_BYTE)v16 )
      __asan_report_store4(&this->sub_channel_id_, p_p, v16);
    this->sub_channel_id_ = SubChannelId;
    v17 = std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_session_ptr);
    AccountType = PlayerSessionProxy::getAccountType(v17);
    v19 = *(_BYTE *)(((unsigned __int64)&this->account_type_ >> 3) + 0x7FFF8000);
    if ( v19 != 0 && v19 <= 3 )
    {
      LOBYTE(p_p) = v19 != 0;
      __asan_report_store4(&this->account_type_, p_p, AccountType);
    }
    this->account_type_ = AccountType;
    v20 = std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_session_ptr);
    PlayerSessionProxy::getAccountUid[abi:cxx11](&v72, v20);
    v21 = &v72;
    std::string::operator=(&this->account_uid_, &v72);
    std::string::~string(&v72);
    v22 = std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_session_ptr);
    LOBYTE(v23) = PlayerSessionProxy::isGuest(v22);
    v24 = v23;
    v25 = *(_BYTE *)(((unsigned __int64)&this->is_guest_ >> 3) + 0x7FFF8000);
    if ( v25 < 0 )
    {
      LOBYTE(v21) = v25 != 0;
      __asan_report_store1(&this->is_guest_, v21, v24);
    }
    this->is_guest_ = v24;
    v26 = std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_session_ptr);
    GmUid = PlayerSessionProxy::getGmUid(v26);
    v28 = *(_BYTE *)(((unsigned __int64)&this->gm_uid_ >> 3) + 0x7FFF8000);
    if ( v28 != 0 && v28 <= 3 )
    {
      LOBYTE(v21) = v28 != 0;
      __asan_report_store4(&this->gm_uid_, v21, GmUid);
    }
    this->gm_uid_ = GmUid;
    BasicComp = Player::getBasicComp(this);
    v30 = std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_session_ptr);
    LoginReq = PlayerSessionProxy::getLoginReq(v30);
    PlayerBasicComp::setClientInfo(BasicComp, LoginReq);
    v31 = std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_session_ptr);
    ClientToken = PlayerSessionProxy::getClientToken(v31);
    v33 = *(_BYTE *)(((unsigned __int64)&this->client_token_ >> 3) + 0x7FFF8000);
    LOBYTE(LoginReq) = v33 != 0;
    v35 = (v33 != 0) & (unsigned __int8)((char)((((_BYTE)this + 116) & 7) + 3) >= v33);
    if ( (_BYTE)v35 )
      __asan_report_store4(&this->client_token_, LoginReq, v35);
    this->client_token_ = ClientToken;
    if ( is_relogin )
    {
      v36 = Player::getBasicComp(this);
      if ( *(_BYTE *)(((unsigned __int64)&this->platform_type_ >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)this - 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->platform_type_ >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(&this->platform_type_);
      }
      LoginReq = (const proto::PlayerLoginReq *)this->platform_type_;
      PlayerBasicComp::setLastLoginPlatform(v36, (uint32_t)LoginReq);
    }
    v37 = std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_session_ptr);
    PlatformType = PlayerSessionProxy::getPlatformType(v37);
    v39 = *(_BYTE *)(((unsigned __int64)&this->platform_type_ >> 3) + 0x7FFF8000);
    LOBYTE(LoginReq) = v39 != 0;
    v40 = (v39 != 0) & (unsigned __int8)((char)((((_BYTE)this - 68) & 7) + 3) >= v39);
    if ( (_BYTE)v40 )
      __asan_report_store4(&this->platform_type_, LoginReq, v40);
    this->platform_type_ = PlatformType;
    v41 = std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_session_ptr);
    Tag = PlayerSessionProxy::getTag(v41);
    v43 = *(_BYTE *)(((unsigned __int64)&this->tag_ >> 3) + 0x7FFF8000);
    LOBYTE(LoginReq) = v43 != 0;
    v44 = (v43 != 0) & (unsigned __int8)((char)((((_BYTE)this - 60) & 7) + 3) >= v43);
    if ( (_BYTE)v44 )
      __asan_report_store4(&this->tag_, LoginReq, v44);
    this->tag_ = Tag;
    std::shared_ptr<PlayerSessionProxy>::shared_ptr(&v71, p_session_ptr);
    ClientDeviceInfo::setSession(&this->client_device_info_, &v71);
    std::shared_ptr<PlayerSessionProxy>::~shared_ptr(&v71);
    v45 = ServiceBox::findService<GameserverService>();
    v46 = &GameserverService::getGameThreadLocal(v45)->player_mgr;
    PlayerMgr::addPlayerVersion(v46, this);
    if ( *(_BYTE *)(((unsigned __int64)&this->disconnect_time_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->disconnect_time_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_store4(&this->disconnect_time_, this, &this->disconnect_time_);
    }
    this->disconnect_time_ = 0;
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&v72,
      &common::milog::MiLogDefault::default_log_obj_,
      2u,
      "./src/player/player.cpp",
      "setSession",
      4361);
    v47 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(
            (common::milog::MiLogStream *const)&v72,
            (const char (*)[6])"uid: ");
    v48 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v47, &this->uid_);
    v49 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v48, (const char (*)[18])" account_token_: ");
    v50 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v49, &this->account_token_);
    v51 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v50, (const char (*)[16])" account_type: ");
    v52 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v51, &this->account_type_);
    v53 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v52, (const char (*)[13])" channel_id:");
    v54 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v53, &this->channel_id_);
    v55 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v54, (const char (*)[17])" sub_channel_id:");
    v56 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v55, &this->sub_channel_id_);
    v57 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v56, (const char (*)[16])" account_uid_: ");
    v58 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v57, &this->account_uid_);
    v59 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v58, (const char (*)[10])" gm_uid: ");
    v60 = std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_session_ptr);
    __x = PlayerSessionProxy::getGmUid(v60);
    v61 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v59, &__x);
    v62 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v61, (const char (*)[13])" is_relogin:");
    v63 = common::milog::MiLogStream::operator<<(v62, is_relogin);
    v64 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
            v63,
            (const char (*)[22])" last_login_platform:");
    v65 = Player::getBasicComp(this);
    __y = PlayerBasicComp::getLastLoginPlatform(v65);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v64, &__y);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v72);
  }
};

// Line 4370: range 0000000017157F56-0000000017158063
bool __cdecl Player::isConnected(const Player *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  bool isConnected; // r14
  std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  bool result; // al
  char v7[112]; // [rsp+10h] [rbp-70h] BYREF

  v1 = (unsigned __int64)v7;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 16 16 session_ptr:4371";
  *(_QWORD *)(v1 + 16) = Player::isConnected;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202178560;
  Player::getSession((const Player *const)(v1 + 32));
  if ( std::operator==<PlayerSessionProxy>((const std::shared_ptr<PlayerSessionProxy> *)(v1 + 32), 0LL) )
  {
    isConnected = 0;
  }
  else
  {
    v5 = std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
    isConnected = PlayerSessionProxy::isConnected(v5);
  }
  std::shared_ptr<PlayerSessionProxy>::~shared_ptr((std::shared_ptr<PlayerSessionProxy> *const)(v1 + 32));
  result = isConnected;
  if ( v7 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4381: range 0000000017158064-0000000017158085
bool __cdecl Player::isEditorClient(const Player *const this)
{
  const proto::PlayerLoginReq *SessionLoginReq; // rax

  SessionLoginReq = Player::getSessionLoginReq(this);
  return proto::PlayerLoginReq::is_editor(SessionLoginReq);
};

// Line 4386: range 0000000017158086-000000001715822F
uint32_t __cdecl Player::getGateserverId(const Player *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  _DWORD *v3; // r12
  const proto::PacketHead *LoginPakcetHead; // rax
  google::protobuf::Map<unsigned int,unsigned int>::const_pointer v5; // rdx
  unsigned int *p_second; // rax
  uint32_t result; // eax
  google::protobuf::Map<unsigned int,unsigned int>::key_type key; // [rsp+14h] [rbp-ACh] BYREF
  const google::protobuf::Map<unsigned int,unsigned int> *app_id_map; // [rsp+18h] [rbp-A8h]
  google::protobuf::Map<unsigned int,unsigned int>::const_iterator b; // [rsp+20h] [rbp-A0h] BYREF
  char v11[128]; // [rsp+40h] [rbp-80h] BYREF

  v1 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(96LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 24 9 iter:4388";
  *(_QWORD *)(v1 + 16) = Player::getGateserverId;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -218103808;
  v3[536862722] = -202116109;
  LoginPakcetHead = Player::getLoginPakcetHead(this);
  app_id_map = proto::PacketHead::service_app_id_map(LoginPakcetHead);
  key = 2;
  google::protobuf::Map<unsigned int,unsigned int>::find(
    (google::protobuf::Map<unsigned int,unsigned int>::const_iterator *)(v1 + 32),
    app_id_map,
    &key);
  google::protobuf::Map<unsigned int,unsigned int>::end(&b, app_id_map);
  if ( google::protobuf::operator!=(
         (const google::protobuf::Map<unsigned int,unsigned int>::const_iterator *)(v1 + 32),
         &b) )
  {
    v5 = google::protobuf::Map<unsigned int,unsigned int>::const_iterator::operator->((const google::protobuf::Map<unsigned int,unsigned int>::const_iterator *const)(v1 + 32));
    p_second = &v5->second;
    if ( *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)p_second & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_second >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(p_second);
    }
    result = v5->second;
  }
  else
  {
    result = 0;
  }
  if ( v11 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 4398: range 0000000017158230-000000001715848D
std::string *__cdecl Player::getPlayerClientIp[abi:cxx11](std::string *retstr, const Player *const this)
{
  common::milog::MiLogStream *v2; // rdx
  common::milog::MiLogStream *v3; // rax
  common::milog::MiLogStream *v4; // rbx
  uint32_t v5; // eax
  std::allocator<char> __a; // [rsp+13h] [rbp-5Dh] BYREF
  uint32_t tmp_ip; // [rsp+14h] [rbp-5Ch]
  const proto::PlayerLoginReq *player_login_req; // [rsp+18h] [rbp-58h]
  common::milog::MiLogStream v10; // [rsp+20h] [rbp-50h] BYREF
  std::string val; // [rsp+40h] [rbp-30h] BYREF

  player_login_req = Player::getSessionLoginReq(this);
  if ( *(_BYTE *)(((unsigned __int64)&this->platform_type_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->platform_type_ >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->platform_type_);
  }
  if ( TxtConfigMgr::isCloudPlatform(this->platform_type_) )
  {
    if ( proto::PlayerLoginReq::cloud_client_ip(player_login_req) )
    {
      v5 = proto::PlayerLoginReq::cloud_client_ip(player_login_req);
      tmp_ip = htonl(v5);
      if ( *(char *)(((unsigned __int64)retstr >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)((((unsigned __int64)&retstr->_anon_0._M_allocated_capacity + 15) >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)retstr + 31) & 7) >= *(_BYTE *)((((unsigned __int64)&retstr->_anon_0._M_allocated_capacity
                                                              + 15) >> 3)
                                                            + 0x7FFF8000) )
      {
        __asan_report_store_n(retstr, 32LL);
      }
      common::tools::NetUtils::inetNtoa[abi:cxx11](retstr, tmp_ip);
    }
    else
    {
      common::milog::MiLogStream::create(
        &v10,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/player/player.cpp",
        "getPlayerClientIp",
        4406);
      v2 = common::milog::MiLogStream::operator<<<char [53],(char *[53])0>(
             &v10,
             (const char (*)[53])"platform_type and cloud_client_ip not match! player:");
      v3 = operator<<(v2, this);
      v4 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v3, (const char (*)[12])" login_req:");
      google::protobuf::Message::ShortDebugString[abi:cxx11](&val, &player_login_req->google::protobuf::Message);
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v4, &val);
      std::string::~string(&val);
      common::milog::MiLogStream::~MiLogStream(&v10);
      std::allocator<char>::allocator(&__a);
      std::string::basic_string<std::allocator<char>>(retstr, byte_25FB4240, &__a);
      std::allocator<char>::~allocator(&__a);
    }
  }
  else
  {
    std::string::basic_string(retstr, &this->client_device_info_.client_ip_str);
  }
  return retstr;
};

// Line 4419: range 000000001715848E-0000000017158588
std::string *__cdecl Player::getPlayerClientIpForStatLog[abi:cxx11](std::string *retstr, const Player *const this)
{
  if ( *(_BYTE *)(((unsigned __int64)&this->platform_type_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->platform_type_ >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->platform_type_);
  }
  if ( TxtConfigMgr::isThirdPartyCloudPlatform(this->platform_type_) )
  {
    std::string::basic_string(retstr, &this->client_device_info_.client_ip_str);
  }
  else
  {
    if ( *(char *)(((unsigned __int64)retstr >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&retstr->_anon_0._M_allocated_capacity + 15) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)retstr + 31) & 7) >= *(_BYTE *)((((unsigned __int64)&retstr->_anon_0._M_allocated_capacity
                                                            + 15) >> 3)
                                                          + 0x7FFF8000) )
    {
      __asan_report_store_n(retstr, 32LL);
    }
    Player::getPlayerClientIp[abi:cxx11](retstr, this);
  }
  return retstr;
};

// Line 4430: range 000000001715858A-00000000171585AB
uint32_t __cdecl Player::getPlayerClientPort(const Player *const this)
{
  const proto::PlayerLoginReq *SessionLoginReq; // rax

  SessionLoginReq = Player::getSessionLoginReq(this);
  return proto::PlayerLoginReq::client_port(SessionLoginReq);
};

// Line 4436: range 00000000171585AC-00000000171588D1
std::string *__cdecl Player::getPlayerGateIp[abi:cxx11](std::string *retstr, const Player *const this)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  GameserverApp *v5; // r14
  uint32_t GateserverId; // eax
  GameserverApp *v7; // rax
  common::milog::MiLogStream *v8; // rax
  ServerConfig *v9; // rax
  uint32_t inner_ip; // esi
  std::allocator<char> __a; // [rsp+1Fh] [rbp-111h] BYREF
  common::milog::MiLogStream v13; // [rsp+20h] [rbp-110h] BYREF
  char v14[240]; // [rsp+40h] [rbp-F0h] BYREF

  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 4 12 host_id:4437 64 96 22 server_config_opt:4438";
  *(_QWORD *)(v2 + 16) = Player::getPlayerGateIp[abi:cxx11];
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862725] = -202116109;
  v5 = Singleton<GameserverApp>::instance();
  GateserverId = Player::getGateserverId(this);
  *(_DWORD *)(v2 + 48) = AppBase::getHostId((AppBase *const)v5, GateserverId);
  v7 = Singleton<GameserverApp>::instance();
  AppBase::findServerConfig((std::optional<ServerConfig> *)(v2 + 64), (AppBase *const)v7, *(_DWORD *)(v2 + 48));
  if ( !std::optional<ServerConfig>::has_value((const std::optional<ServerConfig> *const)(v2 + 64)) )
  {
    common::milog::MiLogStream::create(
      &v13,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "getPlayerGateIp",
      4441);
    v8 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
           &v13,
           (const char (*)[37])"cannot find server_config , host_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v2 + 48));
    common::milog::MiLogStream::~MiLogStream(&v13);
    std::allocator<char>::allocator(&__a);
    std::string::basic_string<std::allocator<char>>(retstr, byte_25FB4240, &__a);
    std::allocator<char>::~allocator(&__a);
  }
  else
  {
    v9 = std::optional<ServerConfig>::operator->((std::optional<ServerConfig> *const)(v2 + 64));
    if ( *(_BYTE *)(((unsigned __int64)&v9->inner_ip >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&v9->inner_ip >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&v9->inner_ip);
    }
    inner_ip = v9->inner_ip;
    if ( *(char *)(((unsigned __int64)retstr >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&retstr->_anon_0._M_allocated_capacity + 15) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)retstr + 31) & 7) >= *(_BYTE *)((((unsigned __int64)&retstr->_anon_0._M_allocated_capacity
                                                            + 15) >> 3)
                                                          + 0x7FFF8000) )
    {
      inner_ip = 32;
      __asan_report_store_n(retstr, 32LL);
    }
    common::tools::NetUtils::inetNtoa[abi:cxx11](retstr, inner_ip);
  }
  std::optional<ServerConfig>::~optional((std::optional<ServerConfig> *const)(v2 + 64));
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return retstr;
};

// Line 4450: range 00000000171588D2-000000001715897B
// local variable allocation has failed, the output may be wrong!
uint32_t __cdecl Player::getPlayerGatePort(const Player *const this)
{
  GameserverApp *v1; // rbx
  uint32_t GateserverId; // eax
  std::string v4; // [rsp+0h] [rbp-50h] OVERLAPPED BYREF
  std::string v5; // [rsp+20h] [rbp-30h] BYREF

  v4._M_string_length = (std::string::size_type)this;
  v1 = Singleton<GameserverApp>::instance();
  std::allocator<char>::allocator((char *)&v4._anon_0._M_allocated_capacity + 15);
  std::string::basic_string<std::allocator<char>>(
    &v5,
    "port_player",
    (const std::allocator<char> *)&v4._anon_0._M_allocated_capacity + 15);
  GateserverId = Player::getGateserverId(this);
  LODWORD(v1) = AppBase::findAppPort((AppBase *const)v1, GateserverId, v4);
  std::string::~string(&v5);
  std::allocator<char>::~allocator((char *)&v4._anon_0._M_allocated_capacity + 15);
  return (unsigned int)v1;
};

// Line 4456: range 000000001715897C-0000000017158DDC
bool __cdecl Player::isAuthorityOf(Player *const this, Creature *creature)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  Creature *v5; // rdx
  unsigned __int64 v6; // rax
  Creature *v7; // rdx
  unsigned __int64 v8; // rax
  Creature *v9; // rdx
  unsigned __int64 v10; // rax
  char v11; // r14
  char v12; // r15
  Creature *v13; // rdx
  unsigned __int64 v14; // rax
  int v15; // r14d
  uint32_t AuthorityPeerId; // r13d
  bool result; // al
  char v18; // [rsp+Eh] [rbp-B2h]
  bool v19; // [rsp+Fh] [rbp-B1h]
  PlayerSceneComp *scene_comp; // [rsp+28h] [rbp-98h]
  std::shared_ptr<Player> __a; // [rsp+30h] [rbp-90h] BYREF
  std::shared_ptr<Player> __b; // [rsp+40h] [rbp-80h] BYREF
  char v23[112]; // [rsp+50h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v23;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 22 weapon_gadget_ptr:4463";
  *(_QWORD *)(v2 + 16) = Player::isAuthorityOf;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  v5 = creature;
  if ( *(_BYTE *)(((unsigned __int64)creature >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  v6 = *(_QWORD *)creature->baseclass_0 + 24LL;
  if ( *(_BYTE *)((v6 >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  if ( (*(unsigned int (__fastcall **)(Creature *))v6)(v5) == 1 )
  {
    toThisPtr<Player>((Player *)&__b);
    v7 = creature;
    if ( *(_BYTE *)(((unsigned __int64)creature >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v8 = *(_QWORD *)creature->baseclass_0 + 152LL;
    if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    (*(void (__fastcall **)(std::shared_ptr<Player> *, Creature *))v8)(&__a, v7);
    v19 = std::operator==<Player,Player>(&__a, &__b);
    std::shared_ptr<Player>::~shared_ptr(&__a);
    std::shared_ptr<Player>::~shared_ptr(&__b);
  }
  else
  {
    v9 = creature;
    if ( *(_BYTE *)(((unsigned __int64)creature >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v10 = *(_QWORD *)creature->baseclass_0 + 24LL;
    if ( *(_BYTE *)((v10 >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    if ( (*(unsigned int (__fastcall **)(Creature *))v10)(v9) != 6 )
      goto LABEL_35;
    toPtr<WeaponGadget,Creature>((Creature *)(v2 + 32));
    v11 = 0;
    v12 = 0;
    if ( !std::operator!=<WeaponGadget>((const std::shared_ptr<WeaponGadget> *)(v2 + 32), 0LL) )
      goto LABEL_26;
    toThisPtr<Player>((Player *)&__b);
    v11 = 1;
    v13 = creature;
    if ( *(_BYTE *)(((unsigned __int64)creature >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v14 = *(_QWORD *)creature->baseclass_0 + 152LL;
    if ( *(_BYTE *)((v14 >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    (*(void (__fastcall **)(std::shared_ptr<Player> *, Creature *))v14)(&__a, v13);
    v12 = 1;
    if ( std::operator==<Player,Player>(&__a, &__b) )
      v18 = 1;
    else
LABEL_26:
      v18 = 0;
    if ( v12 )
      std::shared_ptr<Player>::~shared_ptr(&__a);
    if ( v11 )
      std::shared_ptr<Player>::~shared_ptr(&__b);
    if ( v18 )
    {
      v19 = 1;
      v15 = 0;
    }
    else
    {
      v15 = 1;
    }
    std::shared_ptr<WeaponGadget>::~shared_ptr((std::shared_ptr<WeaponGadget> *const)(v2 + 32));
    if ( v15 == 1 )
    {
LABEL_35:
      scene_comp = Player::getSceneComp(this);
      AuthorityPeerId = Creature::getAuthorityPeerId(creature);
      v19 = AuthorityPeerId == PlayerSceneComp::getPeerId(scene_comp);
    }
  }
  result = v19;
  if ( v23 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4475: range 0000000017158DDE-0000000017159160
int32_t __cdecl Player::printStatLog(
        Player *const this,
        MessagePtr *p_body_ptr,
        MessagePtr *p_body_ext_ptr,
        uint32_t log_level)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  proto_log::PlayerLogHead *v7; // rdx
  int32_t v8; // r14d
  proto_log::PlayerLogHeadExt *v9; // rdx
  GameserverService *v10; // rax
  int32_t result; // eax
  StatLogMgr *stat_log_mgr_ptr; // [rsp+28h] [rbp-118h]
  common::milog::MiLogStream v15; // [rsp+30h] [rbp-110h] BYREF
  char v16[240]; // [rsp+50h] [rbp-F0h] BYREF

  v4 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(192LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 32 16 13 head_ptr:4477 64 16 17 head_ext_ptr:4484 96 64 13 stat_log:4491";
  *(_QWORD *)(v4 + 16) = Player::printStatLog;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -219021312;
  v6[536862722] = -219021312;
  v6[536862725] = -202116109;
  common::tools::perf::make_shared<proto_log::PlayerLogHead>();
  v7 = std::__shared_ptr_access<proto_log::PlayerLogHead,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<proto_log::PlayerLogHead,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
  if ( Player::initLogHead(this, v7) )
  {
    v8 = -1;
  }
  else
  {
    common::tools::perf::make_shared<proto_log::PlayerLogHeadExt>();
    v9 = std::__shared_ptr_access<proto_log::PlayerLogHeadExt,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<proto_log::PlayerLogHeadExt,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
    if ( Player::initLogHeadExt(this, v9) )
    {
      v8 = -1;
    }
    else
    {
      *(_QWORD *)(v4 + 96) = 0LL;
      *(_QWORD *)(v4 + 104) = 0LL;
      *(_QWORD *)(v4 + 112) = 0LL;
      *(_QWORD *)(v4 + 120) = 0LL;
      *(_QWORD *)(v4 + 128) = 0LL;
      *(_QWORD *)(v4 + 136) = 0LL;
      *(_QWORD *)(v4 + 144) = 0LL;
      *(_QWORD *)(v4 + 152) = 0LL;
      std::shared_ptr<google::protobuf::Message>::operator=<proto_log::PlayerLogHead>(
        (std::shared_ptr<google::protobuf::Message> *const)(v4 + 96),
        (const std::shared_ptr<proto_log::PlayerLogHead> *)(v4 + 32));
      std::shared_ptr<google::protobuf::Message>::operator=<proto_log::PlayerLogHeadExt>(
        (std::shared_ptr<google::protobuf::Message> *const)(v4 + 112),
        (const std::shared_ptr<proto_log::PlayerLogHeadExt> *)(v4 + 64));
      std::shared_ptr<google::protobuf::Message>::operator=(
        (std::shared_ptr<google::protobuf::Message> *const)(v4 + 128),
        p_body_ptr);
      std::shared_ptr<google::protobuf::Message>::operator=(
        (std::shared_ptr<google::protobuf::Message> *const)(v4 + 144),
        p_body_ext_ptr);
      v10 = ServiceBox::findService<GameserverService>();
      stat_log_mgr_ptr = ServiceBase::findStatLogMgr(v10, log_level);
      if ( stat_log_mgr_ptr )
      {
        StatLogMgr::pushStatLog(stat_log_mgr_ptr, (const StatLog *)(v4 + 96));
        v8 = 0;
      }
      else
      {
        common::milog::MiLogStream::create(
          &v15,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/player.cpp",
          "printStatLog",
          4500);
        common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(&v15, (const char (*)[20])"findStatLogMgr fail");
        common::milog::MiLogStream::~MiLogStream(&v15);
        v8 = -1;
      }
      StatLog::~StatLog((StatLog *const)(v4 + 96));
    }
    std::shared_ptr<proto_log::PlayerLogHeadExt>::~shared_ptr((std::shared_ptr<proto_log::PlayerLogHeadExt> *const)(v4 + 64));
  }
  std::shared_ptr<proto_log::PlayerLogHead>::~shared_ptr((std::shared_ptr<proto_log::PlayerLogHead> *const)(v4 + 32));
  result = v8;
  if ( v16 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4510: range 0000000017159162-0000000017159713
int32_t __cdecl Player::initLogHead(Player *const this, proto_log::PlayerLogHead *head)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  int32_t result; // eax
  time_t v7; // rax
  uint32_t Uid; // edx
  const std::string *v9; // rdx
  const std::string *v10; // rdx
  PlayerBasicComp *BasicComp; // rax
  uint32_t Level; // edx
  PlayerRechargeComp *RechargeComp; // rax
  google::protobuf::uint64 VipPoint; // rdx
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  const std::string *v16; // rdx
  PlayerItemComp *ItemComp; // rax
  int64_t RealLeftHcoin; // rdx
  PlayerItemComp *v19; // rax
  int64_t RealLeftScoin; // rdx
  PlayerItemComp *v21; // rax
  int64_t AllPlatRealLeftMcoin; // rdx
  uint32_t AccountType; // edx
  std::string *trans_no; // [rsp+18h] [rbp-B8h]
  std::shared_ptr<Config> v25; // [rsp+20h] [rbp-B0h] BYREF
  common::milog::MiLogStream v26; // [rsp+30h] [rbp-A0h] BYREF
  char v27[128]; // [rsp+50h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v27;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 4 14 action_id:4512 64 4 18 sub_action_id:4512";
  *(_QWORD *)(v2 + 16) = Player::initLogHead;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -202116348;
  *(_DWORD *)(v2 + 48) = 0;
  *(_DWORD *)(v2 + 64) = 0;
  trans_no = proto_log::PlayerLogHead::mutable_trans_no[abi:cxx11](head);
  if ( StatLogUtils::getContextData((uint32_t *)(v2 + 48), (uint32_t *)(v2 + 64), trans_no) )
  {
    result = -1;
  }
  else if ( !*(_DWORD *)(v2 + 48) || !proto_log::PlayerActionType_IsValid(*(_DWORD *)(v2 + 48)) )
  {
    common::milog::MiLogStream::create(
      &v26,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "initLogHead",
      4522);
    common::milog::MiLogStream::operator()(&v26, "invalid action_id=%u", *(unsigned int *)(v2 + 48));
    common::milog::MiLogStream::~MiLogStream(&v26);
    result = -1;
  }
  else if ( !proto_log::PlayerActionType_IsValid(*(_DWORD *)(v2 + 64)) )
  {
    common::milog::MiLogStream::create(
      &v26,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "initLogHead",
      4527);
    common::milog::MiLogStream::operator()(&v26, "invalid sub_action_id=%u", *(unsigned int *)(v2 + 64));
    common::milog::MiLogStream::~MiLogStream(&v26);
    result = -1;
  }
  else
  {
    v7 = time(0LL);
    common::tools::TimeUtils::getStrByTime[abi:cxx11]((std::string *)&v26, v7);
    proto_log::PlayerLogHead::set_time(head, (std::string *)&v26);
    std::string::~string(&v26);
    Uid = Player::getUid(this);
    proto_log::PlayerLogHead::set_uid(head, Uid);
    proto_log::PlayerLogHead::set_action_id(head, *(_DWORD *)(v2 + 48));
    proto_log::PlayerLogHead::set_sub_action_id(head, *(_DWORD *)(v2 + 64));
    v9 = proto_log::PlayerActionType_Name[abi:cxx11]((proto_log::PlayerActionType)*(_DWORD *)(v2 + 48));
    proto_log::PlayerLogHead::set_action_name(head, v9);
    v10 = proto_log::PlayerActionType_Name[abi:cxx11]((proto_log::PlayerActionType)*(_DWORD *)(v2 + 64));
    proto_log::PlayerLogHead::set_sub_action_name(head, v10);
    BasicComp = Player::getBasicComp(this);
    Level = PlayerBasicComp::getLevel(BasicComp);
    proto_log::PlayerLogHead::set_level(head, Level);
    RechargeComp = Player::getRechargeComp(this);
    VipPoint = PlayerRechargeComp::getVipPoint(RechargeComp);
    proto_log::PlayerLogHead::set_vip_point(head, VipPoint);
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v25);
    v15 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v25);
    v16 = ConfigBase::getRegionName[abi:cxx11](v15);
    proto_log::PlayerLogHead::set_region_name(head, v16);
    std::shared_ptr<Config>::~shared_ptr(&v25);
    proto_log::PlayerLogHead::set_game_version(head, off_260370E0);
    ItemComp = Player::getItemComp(this);
    RealLeftHcoin = PlayerItemComp::getRealLeftHcoin(ItemComp);
    proto_log::PlayerLogHead::set_coin_1(head, RealLeftHcoin);
    v19 = Player::getItemComp(this);
    RealLeftScoin = PlayerItemComp::getRealLeftScoin(v19);
    proto_log::PlayerLogHead::set_coin_2(head, RealLeftScoin);
    v21 = Player::getItemComp(this);
    AllPlatRealLeftMcoin = PlayerItemComp::getAllPlatRealLeftMcoin(v21);
    proto_log::PlayerLogHead::set_coin_3(head, AllPlatRealLeftMcoin);
    AccountType = Player::getAccountType(this);
    proto_log::PlayerLogHead::set_account_type(head, AccountType);
    if ( *(_BYTE *)(((unsigned __int64)&this->tag_ >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)this - 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->tag_ >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(&this->tag_);
    }
    proto_log::PlayerLogHead::set_tag(head, this->tag_);
    common::tools::RandomUtils::generateUuid[abi:cxx11]((std::string *)&v26);
    proto_log::PlayerLogHead::set_uuid(head, (std::string *)&v26);
    std::string::~string(&v26);
    result = 0;
  }
  if ( v27 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 4558: range 0000000017159714-0000000017159987
int32_t __cdecl Player::printAntiCheatLog(
        Player *const this,
        proto_log::AntiCheatActionType action_type,
        MessagePtr *p_body_ptr)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  proto_log::AntiCheatLogHead *v6; // rdx
  int32_t v7; // r14d
  StatLogUtils::MessagePtr v8; // rdx
  StatLogUtils::MessagePtr v9; // rdi
  std::string *v10; // r8
  bool v11; // r14
  __int64 v12; // rax
  int32_t result; // eax
  std::shared_ptr<google::protobuf::Message> head_ptr; // [rsp+20h] [rbp-D0h] BYREF
  std::shared_ptr<google::protobuf::Message> body_ptr; // [rsp+30h] [rbp-C0h] BYREF
  char v17[176]; // [rsp+40h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 32 16 13 head_ptr:4559 64 32 12 log_str:4565";
  *(_QWORD *)(v3 + 16) = Player::printAntiCheatLog;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -219021312;
  v5[536862723] = -202116109;
  common::tools::perf::make_shared<proto_log::AntiCheatLogHead>();
  v6 = std::__shared_ptr_access<proto_log::AntiCheatLogHead,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<proto_log::AntiCheatLogHead,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
  if ( Player::initAntiCheatLogHead(this, action_type, v6) )
  {
    v7 = -1;
  }
  else
  {
    std::string::basic_string(v3 + 64);
    std::shared_ptr<google::protobuf::Message>::shared_ptr(&body_ptr, p_body_ptr);
    std::shared_ptr<google::protobuf::Message>::shared_ptr<proto_log::AntiCheatLogHead,void>(
      &head_ptr,
      (const std::shared_ptr<proto_log::AntiCheatLogHead> *)(v3 + 32));
    v8._M_ptr = (std::__shared_ptr<google::protobuf::Message,(__gnu_cxx::_Lock_policy)2>::element_type *)(v3 + 64);
    v8._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)&body_ptr;
    v9._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)&body_ptr;
    v9._M_ptr = (std::__shared_ptr<google::protobuf::Message,(__gnu_cxx::_Lock_policy)2>::element_type *)&head_ptr;
    v11 = StatLogUtils::parseToString(v9, v8, v10) != 0;
    std::shared_ptr<google::protobuf::Message>::~shared_ptr(&head_ptr);
    std::shared_ptr<google::protobuf::Message>::~shared_ptr(&body_ptr);
    if ( v11 )
    {
      v7 = -1;
    }
    else
    {
      v12 = std::string::c_str(v3 + 64);
      common::milog::MiLog::writeLog(&common::milog::MiLogDefault::default_log_obj_, 0x15u, off_26037160, v12);
      v7 = 0;
    }
    std::string::~string((void *)(v3 + 64));
  }
  std::shared_ptr<proto_log::AntiCheatLogHead>::~shared_ptr((std::shared_ptr<proto_log::AntiCheatLogHead> *const)(v3 + 32));
  result = v7;
  if ( v17 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF800C) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4577: range 0000000017159A30-0000000017159EF6
int32_t __cdecl Player::initAntiCheatLogHead(
        Player *const this,
        proto_log::AntiCheatActionType action_type,
        proto_log::AntiCheatLogHead *anticheat_head)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r13
  int32_t result; // eax
  time_t v8; // rax
  uint32_t Uid; // edx
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  const std::string *v11; // rdx
  PlayerBasicComp *BasicComp; // rax
  uint32_t Level; // edx
  PlayerRechargeComp *RechargeComp; // rax
  google::protobuf::uint64 VipPoint; // rdx
  PlayerMpComp *MpComp; // rax
  bool v17; // dl
  PlayerMpComp *v18; // rax
  PlayerSceneComp *SceneComp; // rax
  uint32_t CurSceneId; // edx
  std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // [rsp+10h] [rbp-C0h]
  common::milog::MiLogStream v23; // [rsp+40h] [rbp-90h] BYREF
  char v24[112]; // [rsp+60h] [rbp-70h] BYREF

  v3 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 16 14 world_ptr:4600";
  *(_QWORD *)(v3 + 16) = Player::initAntiCheatLogHead;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202178560;
  if ( action_type == ANTI_CHEAT_ACTION_NONE || !proto_log::AntiCheatActionType_IsValid(action_type) )
  {
    common::milog::MiLogStream::create(
      &v23,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "initAntiCheatLogHead",
      4582);
    common::milog::MiLogStream::operator()(&v23, "invalid action_id=%u", (unsigned int)action_type);
    common::milog::MiLogStream::~MiLogStream(&v23);
    result = -1;
  }
  else
  {
    v8 = time(0LL);
    common::tools::TimeUtils::getStrByTime[abi:cxx11]((std::string *)&v23, v8);
    proto_log::AntiCheatLogHead::set_time(anticheat_head, (std::string *)&v23);
    std::string::~string(&v23);
    Uid = Player::getUid(this);
    proto_log::AntiCheatLogHead::set_uid(anticheat_head, Uid);
    proto_log::AntiCheatLogHead::set_action_id(anticheat_head, action_type);
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)(v3 + 32));
    v10 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
    v11 = ConfigBase::getRegionName[abi:cxx11](v10);
    proto_log::AntiCheatLogHead::set_region_name(anticheat_head, v11);
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 32));
    proto_log::AntiCheatLogHead::set_game_version(anticheat_head, off_260370E0);
    BasicComp = Player::getBasicComp(this);
    Level = PlayerBasicComp::getLevel(BasicComp);
    proto_log::AntiCheatLogHead::set_level(anticheat_head, Level);
    RechargeComp = Player::getRechargeComp(this);
    VipPoint = PlayerRechargeComp::getVipPoint(RechargeComp);
    proto_log::AntiCheatLogHead::set_vip_point(anticheat_head, VipPoint);
    MpComp = Player::getMpComp(this);
    v17 = PlayerMpComp::isInMpMode(MpComp);
    proto_log::AntiCheatLogHead::set_is_in_mp(anticheat_head, v17);
    v18 = Player::getMpComp(this);
    if ( PlayerMpComp::isInMpMode(v18) )
    {
      Player::getSceneComp(this);
      PlayerSceneComp::getCurWorld((const PlayerSceneComp *const)(v3 + 32));
      if ( std::operator!=<World>((const std::shared_ptr<World> *)(v3 + 32), 0LL) )
      {
        v21 = std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<World,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
        std::function<ForeachPolicy ()(Player &)>::function<Player::initAntiCheatLogHead(proto_log::AntiCheatActionType,proto_log::AntiCheatLogHead &)::{lambda(Player &)#1},void,void>(
          (std::function<ForeachPolicy(Player&)> *const)&v23,
          (Player::initAntiCheatLogHead::<lambda(Player&)>)__PAIR128__(
                                                             (unsigned __int64)anticheat_head,
                                                             (unsigned __int64)this));
        World::foreachPlayer(v21, (std::function<ForeachPolicy(Player&)> *)&v23);
        std::function<ForeachPolicy ()(Player &)>::~function((std::function<ForeachPolicy(Player&)> *const)&v23);
      }
      std::shared_ptr<World>::~shared_ptr((std::shared_ptr<World> *const)(v3 + 32));
    }
    SceneComp = Player::getSceneComp(this);
    CurSceneId = PlayerSceneComp::getCurSceneId(SceneComp);
    proto_log::AntiCheatLogHead::set_scene_id(anticheat_head, CurSceneId);
    if ( *(_BYTE *)(((unsigned __int64)&this->tag_ >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)this - 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->tag_ >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(&this->tag_);
    }
    proto_log::AntiCheatLogHead::set_tag(anticheat_head, this->tag_);
    result = 0;
  }
  if ( v24 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4603: range 0000000017159988-0000000017159A2E
ForeachPolicy __cdecl Player::initAntiCheatLogHead(proto_log::AntiCheatActionType,proto_log::AntiCheatLogHead &)::{lambda(Player&)#1}::operator()(
        const Player::initAntiCheatLogHead::<lambda(Player&)> *const __closure,
        Player *player)
{
  uint32_t Uid; // ebx
  proto_log::AntiCheatLogHead *anticheat_head; // rbx
  uint32_t v4; // eax

  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  Uid = Player::getUid(__closure->__this);
  if ( Uid != Player::getUid(player) )
  {
    if ( *(_BYTE *)(((unsigned __int64)&__closure->__anticheat_head >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    anticheat_head = __closure->__anticheat_head;
    v4 = Player::getUid(player);
    proto_log::AntiCheatLogHead::add_mp_teammate_list(anticheat_head, v4);
  }
  return 0;
};

// Line 4620: range 0000000017159EF8-000000001715A0AF
int32_t __cdecl Player::initAntiCheatLogHeadWithoutPlayerData(
        proto_log::AntiCheatActionType action_type,
        uint32_t uid,
        proto_log::AntiCheatLogHead *anticheat_head)
{
  time_t v5; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  const std::string *v7; // rdx
  std::shared_ptr<Config> v9; // [rsp+20h] [rbp-40h] BYREF
  common::milog::MiLogStream v10; // [rsp+30h] [rbp-30h] BYREF

  if ( action_type == ANTI_CHEAT_ACTION_NONE || !proto_log::AntiCheatActionType_IsValid(action_type) )
  {
    common::milog::MiLogStream::create(
      &v10,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "initAntiCheatLogHeadWithoutPlayerData",
      4625);
    common::milog::MiLogStream::operator()(&v10, "invalid action_id=%u", (unsigned int)action_type);
    common::milog::MiLogStream::~MiLogStream(&v10);
    return -1;
  }
  else
  {
    v5 = time(0LL);
    common::tools::TimeUtils::getStrByTime[abi:cxx11]((std::string *)&v10, v5);
    proto_log::AntiCheatLogHead::set_time(anticheat_head, (std::string *)&v10);
    std::string::~string(&v10);
    proto_log::AntiCheatLogHead::set_uid(anticheat_head, uid);
    proto_log::AntiCheatLogHead::set_action_id(anticheat_head, action_type);
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v9);
    v6 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v9);
    v7 = ConfigBase::getRegionName[abi:cxx11](v6);
    proto_log::AntiCheatLogHead::set_region_name(anticheat_head, v7);
    std::shared_ptr<Config>::~shared_ptr(&v9);
    proto_log::AntiCheatLogHead::set_game_version(anticheat_head, off_260370E0);
    return 0;
  }
};

// Line 4642: range 000000001715A0B0-000000001715A3BF
int32_t __cdecl Player::printAntiCheatLogWithoutPlayerData(
        proto_log::AntiCheatActionType action_type,
        uint32_t uid,
        MessagePtr *p_body_ptr)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  proto_log::AntiCheatLogHead *v6; // rax
  int32_t v7; // r14d
  uint32_t v8; // eax
  proto_log::AntiCheatLogHead *v9; // r14
  std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  uint32_t Tag; // eax
  StatLogUtils::MessagePtr v12; // rdx
  StatLogUtils::MessagePtr v13; // rdi
  std::string *v14; // r8
  bool v15; // r14
  __int64 v16; // rax
  int32_t result; // eax
  std::shared_ptr<google::protobuf::Message> head_ptr; // [rsp+10h] [rbp-F0h] BYREF
  std::shared_ptr<google::protobuf::Message> body_ptr; // [rsp+20h] [rbp-E0h] BYREF
  char v21[208]; // [rsp+30h] [rbp-D0h] BYREF

  v3 = (unsigned __int64)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(160LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 16 13 head_ptr:4643 64 16 16 session_ptr:4649 96 32 12 log_str:4655";
  *(_QWORD *)(v3 + 16) = Player::printAntiCheatLogWithoutPlayerData;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -219021312;
  v5[536862722] = -219021312;
  v5[536862724] = -202116109;
  common::tools::perf::make_shared<proto_log::AntiCheatLogHead>();
  v6 = std::__shared_ptr_access<proto_log::AntiCheatLogHead,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<proto_log::AntiCheatLogHead,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
  if ( Player::initAntiCheatLogHeadWithoutPlayerData(action_type, uid, v6) )
  {
    v7 = -1;
  }
  else
  {
    v8 = (unsigned int)ServiceBox::findService<GameserverService>();
    GameserverService::findPlayerSession((GameserverService *const)(v3 + 64), v8);
    if ( std::operator!=<PlayerSessionProxy>((const std::shared_ptr<PlayerSessionProxy> *)(v3 + 64), 0LL) )
    {
      v9 = std::__shared_ptr_access<proto_log::AntiCheatLogHead,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatLogHead,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
      v10 = std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      Tag = PlayerSessionProxy::getTag(v10);
      proto_log::AntiCheatLogHead::set_tag(v9, Tag);
    }
    std::string::basic_string(v3 + 96);
    std::shared_ptr<google::protobuf::Message>::shared_ptr(&body_ptr, p_body_ptr);
    std::shared_ptr<google::protobuf::Message>::shared_ptr<proto_log::AntiCheatLogHead,void>(
      &head_ptr,
      (const std::shared_ptr<proto_log::AntiCheatLogHead> *)(v3 + 32));
    v12._M_ptr = (std::__shared_ptr<google::protobuf::Message,(__gnu_cxx::_Lock_policy)2>::element_type *)(v3 + 96);
    v12._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)&body_ptr;
    v13._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)&body_ptr;
    v13._M_ptr = (std::__shared_ptr<google::protobuf::Message,(__gnu_cxx::_Lock_policy)2>::element_type *)&head_ptr;
    v15 = StatLogUtils::parseToString(v13, v12, v14) != 0;
    std::shared_ptr<google::protobuf::Message>::~shared_ptr(&head_ptr);
    std::shared_ptr<google::protobuf::Message>::~shared_ptr(&body_ptr);
    if ( v15 )
    {
      v7 = -1;
    }
    else
    {
      v16 = std::string::c_str(v3 + 96);
      common::milog::MiLog::writeLog(&common::milog::MiLogDefault::default_log_obj_, 0x15u, off_26037160, v16);
      v7 = 0;
    }
    std::string::~string((void *)(v3 + 96));
    std::shared_ptr<PlayerSessionProxy>::~shared_ptr((std::shared_ptr<PlayerSessionProxy> *const)(v3 + 64));
  }
  std::shared_ptr<proto_log::AntiCheatLogHead>::~shared_ptr((std::shared_ptr<proto_log::AntiCheatLogHead> *const)(v3 + 32));
  result = v7;
  if ( v21 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 4668: range 000000001715A3C0-000000001715A506
void __cdecl Player::printForbidLoginAntiCheatLog(uint32_t uid, uint32_t forbid_login_reason)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  std::__shared_ptr_access<proto_log::AntiCheatBodyForbidLogin,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  std::shared_ptr<google::protobuf::Message> p_body_ptr; // [rsp+10h] [rbp-70h] BYREF
  char v7[96]; // [rsp+20h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v7;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 12 log_ptr:4669";
  *(_QWORD *)(v2 + 16) = Player::printForbidLoginAntiCheatLog;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  common::tools::perf::make_shared<proto_log::AntiCheatBodyForbidLogin>();
  v5 = std::__shared_ptr_access<proto_log::AntiCheatBodyForbidLogin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyForbidLogin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
  proto_log::AntiCheatBodyForbidLogin::set_reason(v5, forbid_login_reason);
  std::shared_ptr<google::protobuf::Message>::shared_ptr<proto_log::AntiCheatBodyForbidLogin,void>(
    &p_body_ptr,
    (const std::shared_ptr<proto_log::AntiCheatBodyForbidLogin> *)(v2 + 32));
  Player::printAntiCheatLogWithoutPlayerData(ANTI_CHEAT_ACTION_FORBID_LOGIN, uid, &p_body_ptr);
  std::shared_ptr<google::protobuf::Message>::~shared_ptr(&p_body_ptr);
  std::shared_ptr<proto_log::AntiCheatBodyForbidLogin>::~shared_ptr((std::shared_ptr<proto_log::AntiCheatBodyForbidLogin> *const)(v2 + 32));
  if ( v7 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 4676: range 000000001715A508-000000001715A5BC
int32_t __cdecl Player::notifyGMServerLog(
        Player *const this,
        proto::ServerLogType type,
        proto::ServerLogLevel level,
        const std::string *server_log)
{
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v4; // rdx
  bool *p_is_gm_talk_open; // rax
  bool v6; // bl
  std::shared_ptr<Config> v10[2]; // [rsp+20h] [rbp-20h] BYREF

  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)v10);
  v4 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)v10);
  p_is_gm_talk_open = &v4->is_gm_talk_open;
  if ( *(_BYTE *)(((unsigned __int64)p_is_gm_talk_open >> 3) + 0x7FFF8000) != 0
    && ((unsigned __int8)p_is_gm_talk_open & 7) >= *(_BYTE *)(((unsigned __int64)p_is_gm_talk_open >> 3) + 0x7FFF8000) )
  {
    __asan_report_load1(p_is_gm_talk_open);
  }
  v6 = !v4->is_gm_talk_open;
  std::shared_ptr<Config>::~shared_ptr(v10);
  if ( v6 )
    return 0;
  else
    return Player::notifyServerLog(this, type, level, server_log);
};

// Line 4685: range 000000001715A5BE-000000001715A75C
int32_t __cdecl Player::notifyServerLog(
        Player *const this,
        proto::ServerLogType type,
        proto::ServerLogLevel level,
        const std::string *server_log)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  _DWORD *v6; // r13
  int32_t v7; // r14d
  int32_t result; // eax
  char v11[176]; // [rsp+20h] [rbp-B0h] BYREF

  v4 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(128LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 48 40 11 notify:4687";
  *(_QWORD *)(v4 + 16) = Player::notifyServerLog;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = 61937;
  v6[536862722] = -218103808;
  v6[536862723] = -202116109;
  proto::ServerLogNotify::ServerLogNotify((proto::ServerLogNotify *const)(v4 + 48));
  proto::ServerLogNotify::set_log_type((proto::ServerLogNotify *const)(v4 + 48), type);
  proto::ServerLogNotify::set_log_level((proto::ServerLogNotify *const)(v4 + 48), level);
  proto::ServerLogNotify::set_server_log((proto::ServerLogNotify *const)(v4 + 48), server_log);
  v7 = Player::sendProto(this, (const google::protobuf::Message *)(v4 + 48));
  proto::ServerLogNotify::~ServerLogNotify((proto::ServerLogNotify *const)(v4 + 48));
  result = v7;
  if ( v11 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4699: range 000000001715A75E-000000001715B504
int32_t __cdecl Player::initLogHeadExt(Player *const this, proto_log::PlayerLogHeadExt *head_ext)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  unsigned __int64 Position; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  uint32_t v10; // ecx
  unsigned __int64 n; // rax
  PlayerSceneComp *SceneComp; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  uint32_t v14; // eax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  bool v16; // r14
  common::milog::MiLogStream *v17; // rdx
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  Scene *p_uid; // rdi
  std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v22; // rax
  std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v23; // rax
  PlayerBasicComp *BasicComp; // rax
  PlayerBasicComp *v25; // rax
  uint32_t OnlineTime; // edx
  PlayerBasicComp *v27; // rax
  uint32_t CurLoginTime; // edx
  PlayerSceneComp *v29; // rax
  uint32_t CurrentWeatherType; // edx
  PlayerBasicComp *v31; // rax
  google::protobuf::uint32 v32; // edx
  PlayerMpComp *MpComp; // rax
  _BOOL4 v34; // edx
  PlayerSceneComp *v35; // rax
  uint32_t Level1AreaId; // edx
  PlayerSceneComp *v37; // rax
  uint32_t Level2AreaId; // edx
  PlayerItemComp *ItemComp; // rax
  uint32_t WaitSubHcoin; // edx
  PlayerItemComp *v41; // rax
  uint32_t WaitSubScoin; // edx
  PlayerBasicComp *v43; // rax
  uint32_t v44; // edx
  PlayerItemComp *v45; // r14
  uint32_t PCMPlatformType; // eax
  int64_t RealLeftMcoin; // rdx
  PlayerItemComp *v48; // r14
  uint32_t PsnPlatformType; // eax
  int64_t v50; // rdx
  PlayerItemComp *v51; // rax
  uint32_t AllPlatWaitSubMcoin; // edx
  PlayerItemComp *v53; // r14
  uint32_t v54; // eax
  uint32_t WaitSubMcoin; // edx
  PlayerItemComp *v56; // r14
  uint32_t v57; // eax
  uint32_t v58; // edx
  PlayerBasicComp *v59; // rax
  uint64_t PlayerStatId; // rdx
  int32_t result; // eax
  google::protobuf::uint32 avatar_id; // [rsp+18h] [rbp-168h]
  google::protobuf::uint32 world_owner_uid; // [rsp+1Ch] [rbp-164h]
  google::protobuf::uint32 world_level; // [rsp+20h] [rbp-160h]
  google::protobuf::uint32 cur_world_level; // [rsp+24h] [rbp-15Ch]
  const SceneScriptConfig *scene_script_config_ptr; // [rsp+28h] [rbp-158h]
  common::milog::MiLogStream v68; // [rsp+30h] [rbp-150h] BYREF
  char v69[304]; // [rsp+50h] [rbp-130h] BYREF

  v2 = (unsigned __int64)v69;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(256LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "7 48 4 13 scene_id:4701 64 12 8 pos:4703 96 12 8 rot:4754 128 16 15 avatar_ptr:4707 160 16 14 sc"
                        "ene_ptr:4714 192 16 14 world_ptr:4760 224 16 18 cur_world_ptr:4765";
  *(_QWORD *)(v2 + 16) = Player::initLogHeadExt;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -219020288;
  v4[536862723] = -219020288;
  v4[536862724] = -219021312;
  v4[536862725] = -219021312;
  v4[536862726] = -219021312;
  v4[536862727] = -202178560;
  avatar_id = 0;
  *(_DWORD *)(v2 + 48) = 0;
  Vector3::Vector3((Vector3 *const)(v2 + 64), 0.0, 0.0, 0.0);
  world_level = 0;
  cur_world_level = 0;
  Player::getCurAvatar((Player *const)(v2 + 128));
  if ( std::operator!=<Avatar>(0LL, (const std::shared_ptr<Avatar> *)(v2 + 128)) )
  {
    v5 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 128));
    avatar_id = Avatar::getAvatarId(v5);
    v6 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 128));
    Position = (unsigned __int64)Entity::getPosition((const Entity *const)v6);
    if ( (char)(Position & 7) >= *(_BYTE *)((Position >> 3) + 0x7FFF8000)
      && *(_BYTE *)((Position >> 3) + 0x7FFF8000) != 0
      || *(_BYTE *)(((Position + 11) >> 3) + 0x7FFF8000) != 0
      && (char)((Position + 11) & 7) >= *(_BYTE *)(((Position + 11) >> 3) + 0x7FFF8000) )
    {
      Position = __asan_report_load_n(Position, 12LL);
    }
    *(_QWORD *)(v2 + 64) = *(_QWORD *)Position;
    *(_DWORD *)(v2 + 72) = *(_DWORD *)(Position + 8);
  }
  Player::getSceneComp(this);
  PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v2 + 160));
  if ( std::operator!=<Scene>(0LL, (const std::shared_ptr<Scene> *)(v2 + 160)) )
  {
    v8 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 160));
    *(_DWORD *)(v2 + 48) = Scene::getSceneId(v8);
    v9 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 160));
    world_owner_uid = Scene::getOwnerUid(v9);
    if ( std::operator==<Avatar>(0LL, (const std::shared_ptr<Avatar> *)(v2 + 128)) )
    {
      v10 = (unsigned int)std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 160));
      if ( *(_BYTE *)(((unsigned __int64)&this->uid_ >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&this->uid_ >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&this->uid_);
      }
      Scene::getPlayerLocation((Scene *const)(v2 + 224), v10);
      if ( std::operator!=<ScenePlayerLocation>(0LL, (const std::shared_ptr<ScenePlayerLocation> *)(v2 + 224)) )
      {
        n = (unsigned __int64)std::__shared_ptr_access<ScenePlayerLocation,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ScenePlayerLocation,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 224));
        if ( (char)(n & 7) >= *(_BYTE *)((n >> 3) + 0x7FFF8000) && *(_BYTE *)((n >> 3) + 0x7FFF8000) != 0
          || *(_BYTE *)(((n + 11) >> 3) + 0x7FFF8000) != 0
          && (char)((n + 11) & 7) >= *(_BYTE *)(((n + 11) >> 3) + 0x7FFF8000) )
        {
          n = __asan_report_load_n(n, 12LL);
        }
        *(_QWORD *)(v2 + 64) = *(_QWORD *)n;
        *(_DWORD *)(v2 + 72) = *(_DWORD *)(n + 8);
      }
      std::shared_ptr<ScenePlayerLocation>::~shared_ptr((std::shared_ptr<ScenePlayerLocation> *const)(v2 + 224));
    }
  }
  else
  {
    SceneComp = Player::getSceneComp(this);
    *(_DWORD *)(v2 + 48) = PlayerSceneComp::getMyPrevSceneId(SceneComp);
    if ( !*(_DWORD *)(v2 + 48) )
    {
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)(v2 + 224));
      v13 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 224));
      *(_DWORD *)(v2 + 48) = TxtConfigMgr::getDefaultWorldMainSceneId(&v13->design_config.txt_config_mgr);
      std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v2 + 224));
    }
    v14 = (unsigned int)Player::getSceneComp(this);
    PlayerSceneComp::findScene((const PlayerSceneComp *const)(v2 + 192), v14);
    if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v2 + 192)) )
    {
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)(v2 + 224));
      v15 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 224));
      v16 = TxtConfigMgr::getDefaultWorldMainSceneId(&v15->design_config.txt_config_mgr) != *(_DWORD *)(v2 + 48);
      std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v2 + 224));
      if ( v16 )
      {
        common::milog::MiLogStream::create(
          &v68,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/player/player.cpp",
          "initLogHeadExt",
          4744);
        v17 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                &v68,
                (const char (*)[23])"scene id != 3, player:");
        v18 = operator<<(v17, this);
        v19 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v18, (const char (*)[13])", scene_id: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, (const unsigned int *)(v2 + 48));
        common::milog::MiLogStream::~MiLogStream(&v68);
      }
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)(v2 + 224));
      v20 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 224));
      scene_script_config_ptr = LuaConfigMgr::findSceneScriptConfig(
                                  &v20->design_config.lua_config_mgr,
                                  *(_DWORD *)(v2 + 48));
      std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v2 + 224));
      if ( scene_script_config_ptr )
      {
        if ( (((unsigned __int8)scene_script_config_ptr - 52) & 7) >= *(_BYTE *)(((unsigned __int64)&scene_script_config_ptr->born_pos >> 3)
                                                                               + 0x7FFF8000)
          && *(_BYTE *)(((unsigned __int64)&scene_script_config_ptr->born_pos >> 3) + 0x7FFF8000) != 0
          || *(_BYTE *)((((unsigned __int64)&scene_script_config_ptr->born_pos.z + 3) >> 3) + 0x7FFF8000) != 0
          && (((unsigned __int8)scene_script_config_ptr - 41) & 7) >= *(_BYTE *)((((unsigned __int64)&scene_script_config_ptr->born_pos.z
                                                                                 + 3) >> 3)
                                                                               + 0x7FFF8000) )
        {
          __asan_report_load_n(&scene_script_config_ptr->born_pos, 12LL);
        }
        *(_QWORD *)(v2 + 64) = *(_QWORD *)&scene_script_config_ptr->born_pos.x;
        *(float *)(v2 + 72) = scene_script_config_ptr->born_pos.z;
      }
    }
    else
    {
      Vector3::Vector3((Vector3 *const)(v2 + 96), 0.0, 0.0, 0.0);
      p_uid = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 192));
      if ( *(_BYTE *)(((unsigned __int64)&this->uid_ >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&this->uid_ >> 3) + 0x7FFF8000) <= 3 )
      {
        p_uid = (Scene *)&this->uid_;
        __asan_report_load4(&this->uid_);
      }
      Scene::getPlayerLocation(p_uid, this->uid_, (Vector3 *)(v2 + 64), (Vector3 *)(v2 + 96));
    }
    if ( *(_BYTE *)(((unsigned __int64)&this->uid_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->uid_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&this->uid_);
    }
    world_owner_uid = this->uid_;
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v2 + 192));
  }
  Player::getSceneComp(this);
  PlayerSceneComp::getMyPlayerWorld((const PlayerSceneComp *const)(v2 + 192));
  if ( std::operator!=<PlayerWorld>(0LL, (const std::shared_ptr<PlayerWorld> *)(v2 + 192)) )
  {
    v22 = std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 192));
    world_level = PlayerWorld::getLevel(v22);
  }
  Player::getSceneComp(this);
  PlayerSceneComp::getCurWorld<PlayerWorld>((const PlayerSceneComp *const)(v2 + 224));
  if ( std::operator!=<PlayerWorld>(0LL, (const std::shared_ptr<PlayerWorld> *)(v2 + 224)) )
  {
    v23 = std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 224));
    cur_world_level = PlayerWorld::getLevel(v23);
  }
  BasicComp = Player::getBasicComp(this);
  PlayerBasicComp::increasePlayerStatId(BasicComp);
  proto_log::PlayerLogHeadExt::set_avatar_id(head_ext, avatar_id);
  proto_log::PlayerLogHeadExt::set_scene_id(head_ext, *(_DWORD *)(v2 + 48));
  proto_log::PlayerLogHeadExt::set_world_owner_uid(head_ext, world_owner_uid);
  proto_log::PlayerLogHeadExt::set_x_coordinate(head_ext, (int)*(float *)(v2 + 64));
  proto_log::PlayerLogHeadExt::set_y_coordinate(head_ext, (int)*(float *)(v2 + 68));
  proto_log::PlayerLogHeadExt::set_z_coordinate(head_ext, (int)*(float *)(v2 + 72));
  v25 = Player::getBasicComp(this);
  OnlineTime = PlayerBasicComp::getOnlineTime(v25);
  proto_log::PlayerLogHeadExt::set_player_time(head_ext, OnlineTime);
  v27 = Player::getBasicComp(this);
  CurLoginTime = PlayerBasicComp::getCurLoginTime(v27);
  proto_log::PlayerLogHeadExt::set_login_time(head_ext, CurLoginTime);
  if ( *(_BYTE *)(((unsigned __int64)&this->platform_type_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->platform_type_ >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->platform_type_);
  }
  proto_log::PlayerLogHeadExt::set_platform_type(head_ext, this->platform_type_);
  v29 = Player::getSceneComp(this);
  CurrentWeatherType = PlayerSceneComp::getCurrentWeatherType(v29);
  proto_log::PlayerLogHeadExt::set_weather(head_ext, CurrentWeatherType);
  v31 = Player::getBasicComp(this);
  v32 = PlayerBasicComp::getPlayerTimeMs(v31) / 0x3E8;
  proto_log::PlayerLogHeadExt::set_unpaused_time(head_ext, v32);
  MpComp = Player::getMpComp(this);
  v34 = PlayerMpComp::isInMpMode(MpComp);
  proto_log::PlayerLogHeadExt::set_is_in_mp(head_ext, v34);
  v35 = Player::getSceneComp(this);
  Level1AreaId = PlayerSceneComp::getLevel1AreaId(v35);
  proto_log::PlayerLogHeadExt::set_level1_area_id(head_ext, Level1AreaId);
  v37 = Player::getSceneComp(this);
  Level2AreaId = PlayerSceneComp::getLevel2AreaId(v37);
  proto_log::PlayerLogHeadExt::set_level2_area_id(head_ext, Level2AreaId);
  ItemComp = Player::getItemComp(this);
  WaitSubHcoin = PlayerItemComp::getWaitSubHcoin(ItemComp);
  proto_log::PlayerLogHeadExt::set_wait_sub_hcoin(head_ext, WaitSubHcoin);
  v41 = Player::getItemComp(this);
  WaitSubScoin = PlayerItemComp::getWaitSubScoin(v41);
  proto_log::PlayerLogHeadExt::set_wait_sub_scoin(head_ext, WaitSubScoin);
  if ( *(_BYTE *)(((unsigned __int64)&this->gm_uid_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->gm_uid_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->gm_uid_);
  }
  proto_log::PlayerLogHeadExt::set_gm_uid(head_ext, this->gm_uid_);
  proto_log::PlayerLogHeadExt::set_world_level(head_ext, world_level);
  proto_log::PlayerLogHeadExt::set_cur_world_level(head_ext, cur_world_level);
  proto_log::PlayerLogHeadExt::set_country_code(head_ext, &this->country_code_);
  v43 = Player::getBasicComp(this);
  v44 = PlayerBasicComp::calcWorldLevelLimit(v43);
  proto_log::PlayerLogHeadExt::set_world_level_limit(head_ext, v44);
  v45 = Player::getItemComp(this);
  PCMPlatformType = TxtConfigMgr::getPCMPlatformType();
  RealLeftMcoin = PlayerItemComp::getRealLeftMcoin(v45, PCMPlatformType);
  proto_log::PlayerLogHeadExt::set_pcm_coin_3(head_ext, RealLeftMcoin);
  v48 = Player::getItemComp(this);
  PsnPlatformType = TxtConfigMgr::getPsnPlatformType();
  v50 = PlayerItemComp::getRealLeftMcoin(v48, PsnPlatformType);
  proto_log::PlayerLogHeadExt::set_psn_coin_3(head_ext, v50);
  v51 = Player::getItemComp(this);
  AllPlatWaitSubMcoin = PlayerItemComp::getAllPlatWaitSubMcoin(v51);
  proto_log::PlayerLogHeadExt::set_wait_sub_mcoin(head_ext, AllPlatWaitSubMcoin);
  v53 = Player::getItemComp(this);
  v54 = TxtConfigMgr::getPCMPlatformType();
  WaitSubMcoin = PlayerItemComp::getWaitSubMcoin(v53, v54);
  proto_log::PlayerLogHeadExt::set_pcm_wait_sub_mcoin(head_ext, WaitSubMcoin);
  v56 = Player::getItemComp(this);
  v57 = TxtConfigMgr::getPsnPlatformType();
  v58 = PlayerItemComp::getWaitSubMcoin(v56, v57);
  proto_log::PlayerLogHeadExt::set_psn_wait_sub_mcoin(head_ext, v58);
  v59 = Player::getBasicComp(this);
  PlayerStatId = PlayerBasicComp::getPlayerStatId(v59);
  proto_log::PlayerLogHeadExt::set_player_stat_id(head_ext, PlayerStatId);
  std::shared_ptr<PlayerWorld>::~shared_ptr((std::shared_ptr<PlayerWorld> *const)(v2 + 224));
  std::shared_ptr<PlayerWorld>::~shared_ptr((std::shared_ptr<PlayerWorld> *const)(v2 + 192));
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v2 + 160));
  std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v2 + 128));
  result = 0;
  if ( v69 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4805: range 000000001715B506-000000001715B5FC
int32_t __cdecl Player::setPlayerBornData(Player *const this, const proto::SetPlayerBornDataReq *req)
{
  PlayerAvatarComp *AvatarComp; // rax
  PlayerBasicComp *BasicComp; // rbx
  const std::string *v5; // rax
  PlayerAvatarComp *v6; // rbx
  google::protobuf::uint32 v7; // eax
  PlayerBasicComp *v8; // rbx
  const std::string *v9; // rax
  int32_t ret; // [rsp+1Ch] [rbp-14h]

  AvatarComp = Player::getAvatarComp(this);
  if ( PlayerAvatarComp::getAvatarCount(AvatarComp) )
    return 116;
  BasicComp = Player::getBasicComp(this);
  v5 = proto::SetPlayerBornDataReq::nick_name[abi:cxx11](req);
  ret = PlayerBasicComp::checkNickName(BasicComp, v5);
  if ( ret )
    return ret;
  v6 = Player::getAvatarComp(this);
  v7 = proto::SetPlayerBornDataReq::avatar_id(req);
  if ( (unsigned int)PlayerAvatarComp::setBornAvatar(v6, v7) )
    return 115;
  v8 = Player::getBasicComp(this);
  v9 = proto::SetPlayerBornDataReq::nick_name[abi:cxx11](req);
  PlayerBasicComp::setNickName(v8, v9);
  Player::initAndBeginEnterScene(this, 0, 0, 0, 0);
  return 0;
};

// Line 4836: range 000000001715B5FE-000000001715BD9D
int32_t __cdecl Player::onPingReq(Player *const this, const proto::PingReq *req, proto::PingRsp *rsp_0)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // r14
  google::protobuf::uint32 v9; // edx
  google::protobuf::uint32 v10; // edx
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rdx
  bool *p_is_sec_channel_open; // rax
  const std::string *v13; // rax
  bool v14; // r14
  const std::string *v15; // rax
  PlayerBasicComp *BasicComp; // rax
  std::string *v17; // rax
  common::milog::MiLogStream *v18; // r14
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rdx
  __int64 v21; // rax
  PlayerBasicComp *v22; // rbx
  double v23; // xmm0_8
  int32_t result; // eax
  unsigned int val; // [rsp+28h] [rbp-1E8h] BYREF
  int32_t ret; // [rsp+2Ch] [rbp-1E4h]
  std::vector<std::string>::iterator __for_begin; // [rsp+30h] [rbp-1E0h] BYREF
  std::vector<std::string>::iterator __for_end; // [rsp+38h] [rbp-1D8h] BYREF
  std::vector<std::string> *__for_range; // [rsp+40h] [rbp-1D0h]
  std::string *report_str; // [rsp+48h] [rbp-1C8h]
  std::shared_ptr<Config> v32; // [rsp+50h] [rbp-1C0h] BYREF
  common::milog::MiLogStream v33; // [rsp+60h] [rbp-1B0h] BYREF
  common::milog::MiLogStream v34; // [rsp+80h] [rbp-190h] BYREF
  char v35[368]; // [rsp+A0h] [rbp-170h] BYREF

  v3 = (unsigned __int64)v35;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(320LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 32 8 16 expect_salt:4846 64 8 16 actual_salt:4847 96 24 19 report_str_vec:4848 160 32 12 log_s"
                        "tr:4852 224 64 13 log_body:4853";
  *(_QWORD *)(v3 + 16) = Player::onPingReq;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -218959360;
  v5[536862722] = -218959360;
  v5[536862723] = -234881024;
  v5[536862724] = -218959118;
  v5[536862726] = -218959118;
  v5[536862729] = -202116109;
  common::milog::MiLogStream::create(
    &v34,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/player/player.cpp",
    "onPingReq",
    4838);
  v6 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(&v34, (const char (*)[12])"[PING] uid:");
  v7 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, &this->uid_);
  v8 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v7, (const char (*)[7])", seq:");
  val = proto::PingReq::seq(req);
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, &val);
  common::milog::MiLogStream::~MiLogStream(&v34);
  proto::PingRsp::set_retcode(rsp_0, 0);
  v9 = proto::PingReq::seq(req);
  proto::PingRsp::set_seq(rsp_0, v9);
  v10 = proto::PingReq::client_time(req);
  proto::PingRsp::set_client_time(rsp_0, v10);
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v32);
  v11 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v32);
  p_is_sec_channel_open = &v11->security_config.is_sec_channel_open;
  if ( *(_BYTE *)(((unsigned __int64)p_is_sec_channel_open >> 3) + 0x7FFF8000) != 0
    && ((unsigned __int8)p_is_sec_channel_open & 7) >= *(_BYTE *)(((unsigned __int64)p_is_sec_channel_open >> 3)
                                                                + 0x7FFF8000) )
  {
    __asan_report_load1(p_is_sec_channel_open);
  }
  v14 = 0;
  if ( v11->security_config.is_sec_channel_open )
  {
    v13 = proto::PingReq::sc_data[abi:cxx11](req);
    if ( (unsigned __int8)std::string::empty(v13) != 1 )
      v14 = 1;
  }
  std::shared_ptr<Config>::~shared_ptr(&v32);
  if ( v14 )
  {
    *(_QWORD *)(v3 + 32) = 0LL;
    *(_QWORD *)(v3 + 64) = 0LL;
    std::vector<std::string>::vector((std::vector<std::string> *const)(v3 + 96));
    v15 = proto::PingReq::sc_data[abi:cxx11](req);
    ret = SecurityUtils::verifySecurityChannelReportOnPingReq(
            &this->security_channel_,
            v15,
            (std::vector<std::string> *)(v3 + 96),
            (uint64_t *)(v3 + 32),
            (uint64_t *)(v3 + 64));
    if ( !std::vector<std::string>::empty((const std::vector<std::string> *const)(v3 + 96)) )
    {
      std::string::basic_string(v3 + 160);
      proto_log::SecurityChannelLog::SecurityChannelLog((proto_log::SecurityChannelLog *const)(v3 + 224));
      if ( *(_BYTE *)(((unsigned __int64)&this->uid_ >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&this->uid_ >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&this->uid_);
      }
      proto_log::SecurityChannelLog::set_uid((proto_log::SecurityChannelLog *const)(v3 + 224), this->uid_);
      proto_log::SecurityChannelLog::set_ret((proto_log::SecurityChannelLog *const)(v3 + 224), ret);
      proto_log::SecurityChannelLog::set_expect_salt(
        (proto_log::SecurityChannelLog *const)(v3 + 224),
        *(_QWORD *)(v3 + 32));
      proto_log::SecurityChannelLog::set_actual_salt(
        (proto_log::SecurityChannelLog *const)(v3 + 224),
        *(_QWORD *)(v3 + 64));
      BasicComp = Player::getBasicComp(this);
      PlayerBasicComp::getNextTransNo[abi:cxx11]((std::string *)&v34, BasicComp);
      proto_log::SecurityChannelLog::set_trans_no((proto_log::SecurityChannelLog *const)(v3 + 224), (std::string *)&v34);
      std::string::~string(&v34);
      __for_range = (std::vector<std::string> *)(v3 + 96);
      __for_begin._M_current = std::vector<std::string>::begin((std::vector<std::string> *const)(v3 + 96))._M_current;
      __for_end._M_current = std::vector<std::string>::end(__for_range)._M_current;
      while ( __gnu_cxx::operator!=<std::string *,std::vector<std::string>>(&__for_begin, &__for_end) )
      {
        report_str = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator*(&__for_begin);
        v17 = std::move<std::string &>(report_str);
        proto_log::SecurityChannelLog::set_report((proto_log::SecurityChannelLog *const)(v3 + 224), v17);
        if ( StatLogUtils::parseProtoToString((const StatLogUtils::Message *)(v3 + 224), (std::string *)(v3 + 160)) )
        {
          common::milog::MiLogStream::create(
            &v33,
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/player/player.cpp",
            "onPingReq",
            4864);
          v18 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
                  &v33,
                  (const char (*)[30])"parseToString fail, log_body:");
          google::protobuf::Message::ShortDebugString[abi:cxx11](
            (std::string *)&v34,
            (google::protobuf::Message *)(v3 + 224));
          v19 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v18, (const std::string *)&v34);
          v20 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v19, (const char (*)[9])" player:");
          operator<<(v20, this);
          std::string::~string(&v34);
          common::milog::MiLogStream::~MiLogStream(&v33);
        }
        else
        {
          v21 = std::string::c_str(v3 + 160);
          common::milog::MiLog::writeLog(&common::milog::MiLogDefault::default_log_obj_, 0x18u, off_26037160, v21);
        }
        __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator++(&__for_begin);
      }
      proto_log::SecurityChannelLog::~SecurityChannelLog((proto_log::SecurityChannelLog *const)(v3 + 224));
      std::string::~string((void *)(v3 + 160));
    }
    std::vector<std::string>::~vector((std::vector<std::string> *const)(v3 + 96));
  }
  Player::updateLastPingTime(this);
  v22 = Player::getBasicComp(this);
  v23 = proto::PingReq::total_tick_time(req);
  PlayerBasicComp::checkAndUpdateClientTotalTickTime(v22, v23);
  result = 0;
  if ( v35 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8024) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4878: range 000000001715BD9E-000000001715C235
void __cdecl Player::anticheatCheckOnPingReq(Player *const this, int64_t sent_ms, float unity_engine_time)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  unsigned __int64 v5; // r13
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rdx
  char v7; // cl
  __int64 v8; // rsi
  std::__shared_ptr_access<proto_log::AntiCheatBodyClientSpeedUpTime,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rcx
  std::__shared_ptr_access<proto_log::AntiCheatBodyClientSpeedUpTime,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rcx
  std::__shared_ptr_access<proto_log::AntiCheatBodyClientSpeedUpTime,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rdx
  std::__shared_ptr_access<proto_log::AntiCheatBodyClientSpeedUpTime,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  std::__shared_ptr_access<proto_log::AntiCheatBodyClientSpeedUpTime,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  std::__shared_ptr_access<proto_log::AntiCheatBodyClientSpeedUpTime,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  float timescale; // [rsp+24h] [rbp-7Ch]
  float delta_time; // [rsp+28h] [rbp-78h]
  float timescale_limit; // [rsp+2Ch] [rbp-74h]
  std::shared_ptr<google::protobuf::Message> v21; // [rsp+30h] [rbp-70h] BYREF
  char v22[96]; // [rsp+40h] [rbp-60h] BYREF

  v3 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 16 12 log_ptr:4888";
  *(_QWORD *)(v3 + 16) = Player::anticheatCheckOnPingReq;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)&this->last_ping_sent_ms_ >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  delta_time = 0.001 * (float)(sent_ms - LODWORD(this->last_ping_sent_ms_));
  timescale = 0.0;
  if ( delta_time != 0.0 )
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->last_unity_engine_time_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->last_unity_engine_time_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&this->last_unity_engine_time_);
    }
    timescale = (float)(unity_engine_time - this->last_unity_engine_time_) / delta_time;
  }
  v8 = (__int64)ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v21);
  v6 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v21);
  v7 = *(_BYTE *)(((unsigned __int64)&v6->security_config.unity_engine_timescale_limit >> 3) + 0x7FFF8000);
  LOBYTE(v8) = v7 != 0;
  if ( v7 != 0 && (char)((((_BYTE)v6 + 12) & 7) + 3) >= v7 )
    __asan_report_load4(&v6->security_config.unity_engine_timescale_limit);
  timescale_limit = v6->security_config.unity_engine_timescale_limit;
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)&v21);
  if ( delta_time < 0.0 || timescale < 0.0 || timescale >= timescale_limit || std::isnan(unity_engine_time) )
  {
    common::tools::perf::make_shared<proto_log::AntiCheatBodyClientSpeedUpTime>();
    v10 = std::__shared_ptr_access<proto_log::AntiCheatBodyClientSpeedUpTime,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyClientSpeedUpTime,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
    if ( *(_BYTE *)(((unsigned __int64)&this->last_ping_sent_ms_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    proto_log::AntiCheatBodyClientSpeedUpTime::set_last_sent_ms(v10, this->last_ping_sent_ms_);
    v11 = std::__shared_ptr_access<proto_log::AntiCheatBodyClientSpeedUpTime,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyClientSpeedUpTime,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
    if ( *(_BYTE *)(((unsigned __int64)&this->last_unity_engine_time_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->last_unity_engine_time_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&this->last_unity_engine_time_);
    }
    proto_log::AntiCheatBodyClientSpeedUpTime::set_last_unity_engine_time(v11, this->last_unity_engine_time_);
    v12 = std::__shared_ptr_access<proto_log::AntiCheatBodyClientSpeedUpTime,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyClientSpeedUpTime,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
    proto_log::AntiCheatBodyClientSpeedUpTime::set_sent_ms(v12, sent_ms);
    v13 = std::__shared_ptr_access<proto_log::AntiCheatBodyClientSpeedUpTime,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyClientSpeedUpTime,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
    proto_log::AntiCheatBodyClientSpeedUpTime::set_unity_engine_time(v13, unity_engine_time);
    v14 = std::__shared_ptr_access<proto_log::AntiCheatBodyClientSpeedUpTime,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyClientSpeedUpTime,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
    proto_log::AntiCheatBodyClientSpeedUpTime::set_timescale(v14, timescale);
    v15 = std::__shared_ptr_access<proto_log::AntiCheatBodyClientSpeedUpTime,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyClientSpeedUpTime,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
    proto_log::AntiCheatBodyClientSpeedUpTime::set_timescale_limit(v15, timescale_limit);
    std::shared_ptr<google::protobuf::Message>::shared_ptr<proto_log::AntiCheatBodyClientSpeedUpTime,void>(
      &v21,
      (const std::shared_ptr<proto_log::AntiCheatBodyClientSpeedUpTime> *)(v3 + 32));
    v8 = 14LL;
    Player::printAntiCheatLog(this, ANTI_CHEAT_ACTION_CLIENT_SPEED_UP_TIME, &v21);
    std::shared_ptr<google::protobuf::Message>::~shared_ptr(&v21);
    std::shared_ptr<proto_log::AntiCheatBodyClientSpeedUpTime>::~shared_ptr((std::shared_ptr<proto_log::AntiCheatBodyClientSpeedUpTime> *const)(v3 + 32));
  }
  if ( *(_BYTE *)(((unsigned __int64)&this->last_ping_sent_ms_ >> 3) + 0x7FFF8000) )
    __asan_report_store8(&this->last_ping_sent_ms_, v8);
  this->last_ping_sent_ms_ = sent_ms;
  if ( *(_BYTE *)(((unsigned __int64)&this->last_unity_engine_time_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->last_unity_engine_time_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->last_unity_engine_time_, v8, &this->last_unity_engine_time_);
  }
  this->last_unity_engine_time_ = unity_engine_time;
  if ( v22 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 4902: range 000000001715C236-000000001715CB0B
void __cdecl Player::checkPacketCostTimeOnPacketEnd(
        Player *const this,
        const PacketCostTimeExceedLimitConfig *packet_cost_time_config)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  uint64_t last_check_packet_cost_time_ms; // rcx
  unsigned __int64 v6; // rcx
  unsigned __int64 v7; // rcx
  uint32_t last_trigger_kick_time; // ecx
  uint32_t v9; // ecx
  char v10; // dl
  __int64 v11; // rdx
  uint32_t trigger_kick_count; // ecx
  GameserverService *v13; // rax
  PlayerMgr *p_player_mgr; // rcx
  std::__shared_ptr_access<proto_log::AntiCheatBodyPacketCostTimePercentExceedLimit,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rdx
  std::__shared_ptr_access<proto_log::AntiCheatBodyPacketCostTimePercentExceedLimit,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rcx
  std::__shared_ptr_access<proto_log::AntiCheatBodyPacketCostTimePercentExceedLimit,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // rcx
  std::__shared_ptr_access<proto_log::AntiCheatBodyPacketCostTimePercentExceedLimit,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // rdx
  std::__shared_ptr_access<proto_log::AntiCheatBodyPacketCostTimePercentExceedLimit,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rcx
  std::__shared_ptr_access<proto_log::AntiCheatBodyPacketCostTimePercentExceedLimit,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rcx
  std::__shared_ptr_access<proto_log::AntiCheatBodyPacketCostTimePercentExceedLimit,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v22; // rax
  std::__shared_ptr_access<proto_log::AntiCheatBodyPacketCostTimePercentExceedLimit,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v23; // rcx
  const PacketCostTimeExceedLimitConfig *packet_cost_time_configa; // [rsp+0h] [rbp-A0h]
  bool is_kick; // [rsp+13h] [rbp-8Dh]
  uint32_t now; // [rsp+14h] [rbp-8Ch]
  uint64_t now_ms; // [rsp+18h] [rbp-88h]
  uint64_t check_interval_ms; // [rsp+20h] [rbp-80h]
  google::protobuf::uint64 accumulate_packet_cost_time_ms; // [rsp+28h] [rbp-78h]
  std::shared_ptr<google::protobuf::Message> p_body_ptr; // [rsp+30h] [rbp-70h] BYREF
  char v31[96]; // [rsp+40h] [rbp-60h] BYREF

  packet_cost_time_configa = packet_cost_time_config;
  v2 = (unsigned __int64)v31;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 12 log_ptr:4951";
  *(_QWORD *)(v2 + 16) = Player::checkPacketCostTimeOnPacketEnd;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  if ( *(char *)(((unsigned __int64)&packet_cost_time_config->is_enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&packet_cost_time_config->is_enable);
  if ( packet_cost_time_config->is_enable )
  {
    now_ms = common::tools::TimeUtils::getNowMs();
    if ( *(_BYTE *)(((unsigned __int64)&this->last_check_packet_cost_time_ms_ >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    last_check_packet_cost_time_ms = this->last_check_packet_cost_time_ms_;
    if ( *(_BYTE *)(((unsigned __int64)&packet_cost_time_config->check_interval_ms >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    if ( now_ms >= last_check_packet_cost_time_ms + packet_cost_time_config->check_interval_ms )
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->last_check_packet_cost_time_ms_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      check_interval_ms = now_ms - this->last_check_packet_cost_time_ms_;
      if ( *(_BYTE *)(((unsigned __int64)&this->accumulate_packet_cost_time_us_ >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      accumulate_packet_cost_time_ms = this->accumulate_packet_cost_time_us_ / 0x3E8;
      this->last_check_packet_cost_time_ms_ = 0LL;
      this->accumulate_packet_cost_time_us_ = 0LL;
      v6 = 100 * accumulate_packet_cost_time_ms;
      if ( *(_BYTE *)(((unsigned __int64)&packet_cost_time_config->cost_time_percent >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      if ( v6 > check_interval_ms * packet_cost_time_config->cost_time_percent )
      {
        now = now_ms / 0x3E8;
        is_kick = 0;
        if ( *(char *)(((unsigned __int64)&packet_cost_time_config->is_enable_kick >> 3) + 0x7FFF8000) < 0 )
          __asan_report_load1(&packet_cost_time_config->is_enable_kick);
        if ( packet_cost_time_config->is_enable_kick )
        {
          v7 = 100 * accumulate_packet_cost_time_ms;
          if ( *(_BYTE *)(((unsigned __int64)&packet_cost_time_config->kick_time_percent >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          if ( v7 > check_interval_ms * packet_cost_time_config->kick_time_percent )
          {
            if ( *(_BYTE *)(((unsigned __int64)&this->last_trigger_kick_time_ >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&this->last_trigger_kick_time_ >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(&this->last_trigger_kick_time_);
            }
            last_trigger_kick_time = this->last_trigger_kick_time_;
            if ( *(_BYTE *)(((unsigned __int64)&packet_cost_time_config->check_kick_interval >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&packet_cost_time_config->check_kick_interval >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(&packet_cost_time_config->check_kick_interval);
            }
            if ( now > last_trigger_kick_time + packet_cost_time_config->check_kick_interval )
            {
              v9 = 1;
            }
            else
            {
              packet_cost_time_config = (const PacketCostTimeExceedLimitConfig *)((((_BYTE)this - 84) & 7u) + 3);
              if ( *(_BYTE *)(((unsigned __int64)&this->trigger_kick_count_ >> 3) + 0x7FFF8000) != 0
                && (char)((((_BYTE)this - 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->trigger_kick_count_ >> 3)
                                                                    + 0x7FFF8000) )
              {
                __asan_report_load4(&this->trigger_kick_count_);
              }
              v9 = this->trigger_kick_count_ + 1;
            }
            v10 = *(_BYTE *)(((unsigned __int64)&this->trigger_kick_count_ >> 3) + 0x7FFF8000);
            LOBYTE(packet_cost_time_config) = v10 != 0;
            v11 = (v10 != 0) & (unsigned __int8)((char)((((_BYTE)this - 84) & 7) + 3) >= v10);
            if ( (_BYTE)v11 )
              __asan_report_store4(&this->trigger_kick_count_, packet_cost_time_config, v11);
            this->trigger_kick_count_ = v9;
            if ( *(_BYTE *)(((unsigned __int64)&this->last_trigger_kick_time_ >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&this->last_trigger_kick_time_ >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_store4(
                &this->last_trigger_kick_time_,
                packet_cost_time_config,
                &this->last_trigger_kick_time_);
            }
            this->last_trigger_kick_time_ = now;
            trigger_kick_count = this->trigger_kick_count_;
            if ( *(_BYTE *)(((unsigned __int64)&packet_cost_time_configa->trigger_kick_count >> 3) + 0x7FFF8000) != 0
              && (char)((((_BYTE)packet_cost_time_configa + 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&packet_cost_time_configa->trigger_kick_count >> 3)
                                                                                      + 0x7FFF8000) )
            {
              __asan_report_load4(&packet_cost_time_configa->trigger_kick_count);
            }
            if ( trigger_kick_count >= packet_cost_time_configa->trigger_kick_count )
            {
              v13 = ServiceBox::findService<GameserverService>();
              p_player_mgr = &GameserverService::getGameThreadLocal(v13)->player_mgr;
              if ( *(_BYTE *)(((unsigned __int64)&packet_cost_time_configa->thread_kick_interval >> 3) + 0x7FFF8000) != 0
                && *(_BYTE *)(((unsigned __int64)&packet_cost_time_configa->thread_kick_interval >> 3) + 0x7FFF8000) <= 3 )
              {
                __asan_report_load4(&packet_cost_time_configa->thread_kick_interval);
              }
              if ( PlayerMgr::isCanKickPlayerByPacketCostTime(
                     p_player_mgr,
                     now,
                     packet_cost_time_configa->thread_kick_interval) )
              {
                Player::disconnectSession(this, 0x12u);
                is_kick = 1;
              }
            }
          }
        }
        if ( SecurityUtils::checkAndUpdateAntiCheatLogCountRecord(
               packet_cost_time_configa,
               now,
               &this->packet_cost_time_anticheat_record_)
          || is_kick )
        {
          common::tools::perf::make_shared<proto_log::AntiCheatBodyPacketCostTimePercentExceedLimit>();
          v16 = std::__shared_ptr_access<proto_log::AntiCheatBodyPacketCostTimePercentExceedLimit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyPacketCostTimePercentExceedLimit,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
          proto_log::AntiCheatBodyPacketCostTimePercentExceedLimit::set_check_interval_ms(v16, check_interval_ms);
          v17 = std::__shared_ptr_access<proto_log::AntiCheatBodyPacketCostTimePercentExceedLimit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyPacketCostTimePercentExceedLimit,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
          if ( *(_BYTE *)(((unsigned __int64)&packet_cost_time_configa->check_interval_ms >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          proto_log::AntiCheatBodyPacketCostTimePercentExceedLimit::set_config_check_interval_ms(
            v17,
            packet_cost_time_configa->check_interval_ms);
          v18 = std::__shared_ptr_access<proto_log::AntiCheatBodyPacketCostTimePercentExceedLimit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyPacketCostTimePercentExceedLimit,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
          if ( *(_BYTE *)(((unsigned __int64)&packet_cost_time_configa->cost_time_percent >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          proto_log::AntiCheatBodyPacketCostTimePercentExceedLimit::set_config_cost_time_percent(
            v18,
            packet_cost_time_configa->cost_time_percent);
          v19 = std::__shared_ptr_access<proto_log::AntiCheatBodyPacketCostTimePercentExceedLimit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyPacketCostTimePercentExceedLimit,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
          proto_log::AntiCheatBodyPacketCostTimePercentExceedLimit::set_accumulate_packet_cost_time_ms(
            v19,
            accumulate_packet_cost_time_ms);
          v20 = std::__shared_ptr_access<proto_log::AntiCheatBodyPacketCostTimePercentExceedLimit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyPacketCostTimePercentExceedLimit,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
          if ( *(char *)(((unsigned __int64)&packet_cost_time_configa->is_enable_kick >> 3) + 0x7FFF8000) < 0 )
            __asan_report_load1(&packet_cost_time_configa->is_enable_kick);
          proto_log::AntiCheatBodyPacketCostTimePercentExceedLimit::set_config_is_enable_kick(
            v20,
            packet_cost_time_configa->is_enable_kick);
          v21 = std::__shared_ptr_access<proto_log::AntiCheatBodyPacketCostTimePercentExceedLimit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyPacketCostTimePercentExceedLimit,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
          if ( *(_BYTE *)(((unsigned __int64)&packet_cost_time_configa->kick_time_percent >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          proto_log::AntiCheatBodyPacketCostTimePercentExceedLimit::set_config_kick_time_percent(
            v21,
            packet_cost_time_configa->kick_time_percent);
          v22 = std::__shared_ptr_access<proto_log::AntiCheatBodyPacketCostTimePercentExceedLimit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyPacketCostTimePercentExceedLimit,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
          proto_log::AntiCheatBodyPacketCostTimePercentExceedLimit::set_is_kick(v22, is_kick);
          v23 = std::__shared_ptr_access<proto_log::AntiCheatBodyPacketCostTimePercentExceedLimit,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::AntiCheatBodyPacketCostTimePercentExceedLimit,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
          if ( *(_BYTE *)(((unsigned __int64)&this->trigger_kick_count_ >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)this - 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->trigger_kick_count_ >> 3)
                                                                + 0x7FFF8000) )
          {
            __asan_report_load4(&this->trigger_kick_count_);
          }
          proto_log::AntiCheatBodyPacketCostTimePercentExceedLimit::set_trigger_kick_count(
            v23,
            this->trigger_kick_count_);
          std::shared_ptr<google::protobuf::Message>::shared_ptr<proto_log::AntiCheatBodyPacketCostTimePercentExceedLimit,void>(
            &p_body_ptr,
            (const std::shared_ptr<proto_log::AntiCheatBodyPacketCostTimePercentExceedLimit> *)(v2 + 32));
          Player::printAntiCheatLog(this, ANTI_CHEAT_ACTION_PACKET_COST_TIME_PERCENT_EXCEED_LIMIT, &p_body_ptr);
          std::shared_ptr<google::protobuf::Message>::~shared_ptr(&p_body_ptr);
          std::shared_ptr<proto_log::AntiCheatBodyPacketCostTimePercentExceedLimit>::~shared_ptr((std::shared_ptr<proto_log::AntiCheatBodyPacketCostTimePercentExceedLimit> *const)(v2 + 32));
        }
      }
    }
  }
  if ( v31 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 4964: range 000000001715CB0C-000000001715CC99
PacketFunc *__fastcall Player::findPacketProcessFunc(PacketFunc *retstr, Player *const this, uint32_t cmd_id)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::_Rb_tree_iterator<std::pair<unsigned int const,std::function<int(std::shared_ptr<common::minet::Packet>)> > >::pointer v6; // rax
  std::_Rb_tree_iterator<std::pair<unsigned int const,std::function<int(std::shared_ptr<common::minet::Packet>)> > >::_Self __y; // [rsp+28h] [rbp-88h] BYREF
  char v10[128]; // [rsp+30h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 11 cmd_id:4963 64 8 9 iter:4965";
  *(_QWORD *)(v3 + 16) = Player::findPacketProcessFunc;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116352;
  *(_DWORD *)(v3 + 48) = cmd_id;
  *(std::map<unsigned int,std::function<int(std::shared_ptr<common::minet::Packet>)>>::iterator *)(v3 + 64) = std::map<unsigned int,std::function<int ()(std::shared_ptr<common::minet::Packet>)>>::find(&this->process_packet_func_map_, (const std::map<unsigned int,std::function<int(std::shared_ptr<common::minet::Packet>)>>::key_type *)(v3 + 48));
  __y._M_node = std::map<unsigned int,std::function<int ()(std::shared_ptr<common::minet::Packet>)>>::end(&this->process_packet_func_map_)._M_node;
  if ( std::operator!=(
         (const std::_Rb_tree_iterator<std::pair<unsigned int const,std::function<int(std::shared_ptr<common::minet::Packet>)> > >::_Self *)(v3 + 64),
         &__y) )
  {
    v6 = std::_Rb_tree_iterator<std::pair<unsigned int const,std::function<int ()(std::shared_ptr<common::minet::Packet>)>>>::operator->((const std::_Rb_tree_iterator<std::pair<unsigned int const,std::function<int(std::shared_ptr<common::minet::Packet>)> > > *const)(v3 + 64));
    std::function<int ()(std::shared_ptr<common::minet::Packet>)>::function(retstr, &v6->second);
  }
  else
  {
    std::function<int ()(std::shared_ptr<common::minet::Packet>)>::function(retstr, 0LL);
  }
  if ( v10 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return retstr;
};

// Line 4974: range 000000001715CC9A-000000001715CE27
BytesFunc *__fastcall Player::findBytesProcessFunc[abi:cxx11](BytesFunc *retstr, Player *const this, uint32_t cmd_id)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::__detail::_Node_iterator<std::pair<unsigned int const,std::function<int(const std::string&)> >,false,false>::pointer v6; // rax
  std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::function<int(const std::string&)> >,false> __y; // [rsp+28h] [rbp-88h] BYREF
  char v10[128]; // [rsp+30h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 11 cmd_id:4973 64 8 9 iter:4975";
  *(_QWORD *)(v3 + 16) = Player::findBytesProcessFunc[abi:cxx11];
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116352;
  *(_DWORD *)(v3 + 48) = cmd_id;
  *(std::unordered_map<unsigned int,std::function<int(const std::string&)>>::iterator *)(v3 + 64) = std::unordered_map<unsigned int,std::function<int ()(std::string const&)>>::find(&this->process_bytes_func_map_, (const std::unordered_map<unsigned int,std::function<int(const std::string&)>>::key_type *)(v3 + 48));
  __y._M_cur = std::unordered_map<unsigned int,std::function<int ()(std::string const&)>>::end(&this->process_bytes_func_map_)._M_cur;
  if ( std::__detail::operator!=<std::pair<unsigned int const,std::function<int ()(std::string const&)>>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::function<int(const std::string&)> >,false> *)(v3 + 64),
         &__y) )
  {
    v6 = std::__detail::_Node_iterator<std::pair<unsigned int const,std::function<int ()(std::string const&)>>,false,false>::operator->((const std::__detail::_Node_iterator<std::pair<unsigned int const,std::function<int(const std::string&)> >,false,false> *const)(v3 + 64));
    std::function<int ()(std::string const&)>::function(retstr, &v6->second);
  }
  else
  {
    std::function<int ()(std::string const&)>::function(retstr, 0LL);
  }
  if ( v10 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return retstr;
};

// Line 4984: range 000000001715CE28-000000001715D0DC
__int64 __fastcall Player::addMsgForwardClient(Player *const this, uint32_t cmd_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  char v5; // r15
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  __int64 result; // rax
  bool v9; // [rsp+13h] [rbp-BDh]
  PacketFunc __f; // [rsp+20h] [rbp-B0h] BYREF
  BytesFunc v11; // [rsp+40h] [rbp-90h] BYREF
  char v12[112]; // [rsp+60h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 11 cmd_id:4983";
  *(_QWORD *)(v2 + 16) = Player::addMsgForwardClient;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  *(_DWORD *)(v2 + 32) = cmd_id;
  v5 = 0;
  Player::findPacketProcessFunc(&__f, this, *(_DWORD *)(v2 + 32));
  v9 = 1;
  if ( !std::operator!=<int,std::shared_ptr<common::minet::Packet>>(&__f, 0LL) )
  {
    Player::findBytesProcessFunc[abi:cxx11](&v11, this, *(_DWORD *)(v2 + 32));
    v5 = 1;
    if ( !std::operator!=<int,std::string const&>(&v11, 0LL)
      && !common::tools::MiscUtils::isContains<std::set<unsigned int>,unsigned int>(
            &this->process_forward_client_set_,
            (const unsigned int *)(v2 + 32)) )
    {
      v9 = 0;
    }
  }
  if ( v5 )
    std::function<int ()(std::string const&)>::~function(&v11);
  std::function<int ()(std::shared_ptr<common::minet::Packet>)>::~function(&__f);
  if ( v9 )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&v11,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "addMsgForwardClient",
      4990);
    v6 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(
           (common::milog::MiLogStream *const)&v11,
           (const char (*)[8])"cmd_id:");
    v7 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, (const unsigned int *)(v2 + 32));
    common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(v7, (const char (*)[20])" already registered");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v11);
    result = 0xFFFFFFFFLL;
  }
  else
  {
    std::set<unsigned int>::insert(
      &this->process_forward_client_set_,
      (const std::set<unsigned int>::value_type *)(v2 + 32));
    result = 0LL;
  }
  if ( v12 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4998: range 000000001715D0DE-000000001715D7D2
void __cdecl Player::onDataResVersionChange(Player *const this)
{
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v4; // rax
  GameserverService *v5; // rax
  GameThreadLocal *GameThreadLocal; // rax
  GameserverService *v7; // rax
  GameThreadLocal *v8; // rax
  GameserverService *v9; // rax
  GameThreadLocal *v10; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // rax
  proto::ResVersionConfig *v19; // rdx
  PlayerSceneComp *SceneComp; // rax
  bool is_data_need_relogin; // [rsp+12h] [rbp-1EEh]
  bool is_data_need_mp_relogin; // [rsp+13h] [rbp-1EDh]
  uint32_t platform; // [rsp+14h] [rbp-1ECh]
  uint32_t last_client_version; // [rsp+18h] [rbp-1E8h]
  uint32_t last_client_silence_version; // [rsp+1Ch] [rbp-1E4h]
  uint32_t last_res_version; // [rsp+20h] [rbp-1E0h]
  uint32_t res_version; // [rsp+24h] [rbp-1DCh]
  const proto::ResVersionConfig *res_config_ptr; // [rsp+28h] [rbp-1D8h]
  std::string value; // [rsp+30h] [rbp-1D0h] BYREF
  char v31[432]; // [rsp+50h] [rbp-1B0h] BYREF

  v1 = (unsigned __int64)v31;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_3(384LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "7 48 4 19 client_version:5013 64 4 27 client_silence_version:5017 80 16 16 session_ptr:4999 112 "
                        "16 15 config_ptr:5012 144 32 15 client_md5:5014 208 32 23 client_silence_md5:5018 272 80 11 notify:5028";
  *(_QWORD *)(v1 + 16) = Player::onDataResVersionChange;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234556943;
  v3[536862722] = 61956;
  v3[536862723] = 62194;
  v3[536862724] = 62194;
  v3[536862725] = -219021312;
  v3[536862726] = 62194;
  v3[536862727] = -219021312;
  v3[536862728] = 62194;
  v3[536862731] = -202116109;
  Player::getSession((const Player *const)(v1 + 80));
  if ( !std::operator==<PlayerSessionProxy>((const std::shared_ptr<PlayerSessionProxy> *)(v1 + 80), 0LL) )
  {
    v4 = std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerSessionProxy,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 80));
    platform = PlayerSessionProxy::getPlatformType(v4);
    v5 = ServiceBox::findService<GameserverService>();
    GameThreadLocal = GameserverService::getGameThreadLocal(v5);
    last_client_version = ClientVersionConfig::getClientDataVersion(&GameThreadLocal->last_version_config);
    v7 = ServiceBox::findService<GameserverService>();
    v8 = GameserverService::getGameThreadLocal(v7);
    last_client_silence_version = ClientVersionConfig::getClientSilenceDataVersion(&v8->last_version_config);
    v9 = ServiceBox::findService<GameserverService>();
    v10 = GameserverService::getGameThreadLocal(v9);
    last_res_version = ClientVersionConfig::getResVersion(&v10->last_version_config, platform);
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)(v1 + 112));
    *(_DWORD *)(v1 + 48) = 0;
    std::string::basic_string(v1 + 144);
    v11 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 112));
    ClientVersionConfig::findClientVersionMd5(
      &v11->design_config.version_config,
      platform,
      (uint32_t *)(v1 + 48),
      (std::string *)(v1 + 144));
    *(_DWORD *)(v1 + 64) = 0;
    std::string::basic_string(v1 + 208);
    v12 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 112));
    ClientVersionConfig::findClientSilenceVersionMd5(
      &v12->design_config.version_config,
      platform,
      (uint32_t *)(v1 + 64),
      (std::string *)(v1 + 208));
    v13 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 112));
    res_version = ClientVersionConfig::getResVersion(&v13->design_config.version_config, platform);
    v14 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 112));
    is_data_need_relogin = ClientVersionConfig::isDataVersionNeedRelogin(&v14->design_config.version_config);
    v15 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 112));
    is_data_need_mp_relogin = ClientVersionConfig::isDataVersionNeedMpRelogin(&v15->design_config.version_config);
    if ( last_client_version != *(_DWORD *)(v1 + 48)
      || last_client_silence_version != *(_DWORD *)(v1 + 64)
      || res_version != last_res_version )
    {
      proto::DataResVersionNotify::DataResVersionNotify((proto::DataResVersionNotify *const)(v1 + 272));
      proto::DataResVersionNotify::set_client_data_version(
        (proto::DataResVersionNotify *const)(v1 + 272),
        *(_DWORD *)(v1 + 48));
      proto::DataResVersionNotify::set_client_silence_data_version(
        (proto::DataResVersionNotify *const)(v1 + 272),
        *(_DWORD *)(v1 + 64));
      proto::DataResVersionNotify::set_client_md5(
        (proto::DataResVersionNotify *const)(v1 + 272),
        (const std::string *)(v1 + 144));
      proto::DataResVersionNotify::set_client_silence_md5(
        (proto::DataResVersionNotify *const)(v1 + 272),
        (const std::string *)(v1 + 208));
      v16 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 112));
      ClientVersionConfig::getClientVersionSuffix[abi:cxx11](&value, &v16->design_config.version_config);
      proto::DataResVersionNotify::set_client_version_suffix((proto::DataResVersionNotify *const)(v1 + 272), &value);
      std::string::~string(&value);
      v17 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 112));
      ClientVersionConfig::getClientSilenceVersionSuffix[abi:cxx11](&value, &v17->design_config.version_config);
      proto::DataResVersionNotify::set_client_silence_version_suffix(
        (proto::DataResVersionNotify *const)(v1 + 272),
        &value);
      std::string::~string(&value);
      if ( is_data_need_relogin )
      {
        proto::DataResVersionNotify::set_op_type(
          (proto::DataResVersionNotify *const)(v1 + 272),
          DataResVersionNotify_DataResVersionOpType_OP_TYPE_RELOGIN);
      }
      else if ( is_data_need_mp_relogin )
      {
        proto::DataResVersionNotify::set_op_type(
          (proto::DataResVersionNotify *const)(v1 + 272),
          DataResVersionNotify_DataResVersionOpType_OP_TYPE_MP_RELOGIN);
      }
      else
      {
        proto::DataResVersionNotify::set_op_type(
          (proto::DataResVersionNotify *const)(v1 + 272),
          DataResVersionNotify_DataResVersionOpType_OP_TYPE_NONE);
      }
      v18 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 112));
      res_config_ptr = ClientVersionConfig::findResVersionConfig(&v18->design_config.version_config, platform);
      if ( res_config_ptr )
      {
        v19 = proto::DataResVersionNotify::mutable_res_version_config((proto::DataResVersionNotify *const)(v1 + 272));
        proto::ResVersionConfig::operator=(v19, res_config_ptr);
      }
      Player::sendProto(this, (const google::protobuf::Message *)(v1 + 272));
      if ( last_client_version != *(_DWORD *)(v1 + 48) && is_data_need_relogin
        || last_client_version != *(_DWORD *)(v1 + 48) && is_data_need_mp_relogin
        || res_version != last_res_version && res_config_ptr && proto::ResVersionConfig::relogin(res_config_ptr) )
      {
        Player::setIsDataResVersionChanged(this, 1);
      }
      if ( last_client_silence_version != *(_DWORD *)(v1 + 64) )
      {
        SceneComp = Player::getSceneComp(this);
        PlayerSceneComp::onClientSilenceVersionChange(SceneComp, *(_DWORD *)(v1 + 64));
      }
      proto::DataResVersionNotify::~DataResVersionNotify((proto::DataResVersionNotify *const)(v1 + 272));
    }
    std::string::~string((void *)(v1 + 208));
    std::string::~string((void *)(v1 + 144));
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v1 + 112));
  }
  std::shared_ptr<PlayerSessionProxy>::~shared_ptr((std::shared_ptr<PlayerSessionProxy> *const)(v1 + 80));
  if ( v31 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8020) = 0;
    *(_DWORD *)((v1 >> 3) + 0x7FFF802C) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 5071: range 000000001715D7D4-000000001715E118
int32_t __cdecl Player::checkIsInSafeStateForChangeTeam(Player *const this, bool is_allow_change_in_dungeon)
{
  int32_t v2; // r14d
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  PlayerDungeonComp *DungeonComp; // rax
  bool v8; // r15
  PlayerAvatarComp *AvatarComp; // rax
  const std::vector<long unsigned int> *QuestLockTeamAvatarGuidVec; // rax
  PlayerAvatarComp *v11; // rax
  const std::vector<long unsigned int> *LockTeamAvatarGuidVec; // rax
  common::milog::MiLogStream *v13; // rdx
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  SceneExcelConfigMgr *p_scene_config_mgr; // r15
  PlayerSceneComp *SceneComp; // rax
  uint32_t CurSceneId; // eax
  PlayerAvatarComp *v19; // rax
  __gnu_cxx::__normal_iterator<long unsigned int*,std::vector<long unsigned int> >::reference v20; // rax
  PlayerAvatarComp *v21; // rax
  common::milog::MiLogStream *v22; // rax
  int v23; // r15d
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v24; // rax
  unsigned __int64 v25; // rdx
  int v26; // eax
  common::milog::MiLogStream *v27; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v28; // rax
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rdx
  int32_t result; // eax
  std::vector<long unsigned int>::iterator __for_begin; // [rsp+20h] [rbp-130h] BYREF
  std::vector<long unsigned int>::iterator __for_end; // [rsp+28h] [rbp-128h] BYREF
  const data::SceneExcelConfig *scene_config; // [rsp+30h] [rbp-120h]
  std::vector<long unsigned int> *__for_range; // [rsp+38h] [rbp-118h]
  common::milog::MiLogStream v36; // [rsp+40h] [rbp-110h] BYREF
  char v37[240]; // [rsp+60h] [rbp-F0h] BYREF

  v3 = (unsigned __int64)v37;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 8 9 guid:5116 64 16 15 cur_avatar:5096 96 16 15 avatar_ptr:5118 128 24 13 cur_team:5115";
  *(_QWORD *)(v3 + 16) = Player::checkIsInSafeStateForChangeTeam;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -218959360;
  v5[536862722] = -219021312;
  v5[536862723] = -219021312;
  v5[536862724] = -218103808;
  v5[536862725] = -202116109;
  if ( !is_allow_change_in_dungeon
    && (DungeonComp = Player::getDungeonComp(this), PlayerDungeonComp::isInDungeon(DungeonComp)) )
  {
    common::milog::MiLogStream::create(
      &v36,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/player.cpp",
      "checkIsInSafeStateForChangeTeam",
      5075);
    common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(&v36, (const char (*)[21])"player is in dungeon");
    common::milog::MiLogStream::~MiLogStream(&v36);
    v2 = 158;
  }
  else
  {
    Player::getSceneComp(this);
    PlayerSceneComp::getDestScene((const PlayerSceneComp *const)(v3 + 96));
    v8 = std::operator!=<Scene>((const std::shared_ptr<Scene> *)(v3 + 96), 0LL);
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 96));
    if ( v8 )
    {
      common::milog::MiLogStream::create(
        &v36,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/player.cpp",
        "checkIsInSafeStateForChangeTeam",
        5081);
      common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
        &v36,
        (const char (*)[42])"intransfer cannot choose cur avatar team.");
      common::milog::MiLogStream::~MiLogStream(&v36);
      v2 = 103;
    }
    else
    {
      AvatarComp = Player::getAvatarComp(this);
      QuestLockTeamAvatarGuidVec = PlayerAvatarComp::getQuestLockTeamAvatarGuidVec(AvatarComp);
      if ( !std::vector<unsigned long>::empty(QuestLockTeamAvatarGuidVec) )
      {
        v2 = 159;
      }
      else
      {
        v11 = Player::getAvatarComp(this);
        LockTeamAvatarGuidVec = PlayerAvatarComp::getLockTeamAvatarGuidVec(v11);
        if ( !std::vector<unsigned long>::empty(LockTeamAvatarGuidVec) )
        {
          v2 = 171;
        }
        else
        {
          Player::getAvatarComp(this);
          PlayerAvatarComp::getCurAvatar((const PlayerAvatarComp *const)(v3 + 64));
          if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v3 + 64), 0LL) )
          {
            common::milog::MiLogStream::create(
              &v36,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/player/player.cpp",
              "checkIsInSafeStateForChangeTeam",
              5099);
            v13 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
                    &v36,
                    (const char (*)[30])off_26037940);
            operator<<(v13, this);
            common::milog::MiLogStream::~MiLogStream(&v36);
            v2 = 104;
          }
          else
          {
            v14 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
            if ( Creature::getLifeState(v14) == LIFE_ALIVE )
            {
              ServiceBox::findService<GameserverService>();
              GameserverService::getConfig((GameserverService *const)(v3 + 96));
              p_scene_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96))->design_config.txt_config_mgr.scene_config_mgr;
              SceneComp = Player::getSceneComp(this);
              CurSceneId = PlayerSceneComp::getCurSceneId(SceneComp);
              scene_config = data::SceneExcelConfigMgrBase::findSceneExcelConfig(p_scene_config_mgr, CurSceneId);
              std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 96));
              if ( scene_config && !std::vector<unsigned int>::empty(&scene_config->specified_avatar_list) )
              {
                common::milog::MiLogStream::create(
                  &v36,
                  &common::milog::MiLogDefault::default_log_obj_,
                  1u,
                  "./src/player/player.cpp",
                  "checkIsInSafeStateForChangeTeam",
                  5111);
                common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                  &v36,
                  (const char (*)[31])"player is in lock avatar quest");
                common::milog::MiLogStream::~MiLogStream(&v36);
                v2 = 159;
              }
              else
              {
                v19 = Player::getAvatarComp(this);
                PlayerAvatarComp::getMyAvatarTeamInSceneTeam((std::vector<long unsigned int> *)(v3 + 128), v19);
                __for_range = (std::vector<long unsigned int> *)(v3 + 128);
                __for_begin._M_current = std::vector<unsigned long>::begin((std::vector<long unsigned int> *const)(v3 + 128))._M_current;
                __for_end._M_current = std::vector<unsigned long>::end((std::vector<long unsigned int> *const)(v3 + 128))._M_current;
                while ( __gnu_cxx::operator!=<unsigned long *,std::vector<unsigned long>>(&__for_begin, &__for_end) )
                {
                  v20 = __gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator*(&__for_begin);
                  if ( *(_BYTE *)(((unsigned __int64)v20 >> 3) + 0x7FFF8000) )
                    __asan_report_load8();
                  *(_QWORD *)(v3 + 32) = *v20;
                  v21 = Player::getAvatarComp(this);
                  PlayerAvatarComp::findAvatar(
                    (const PlayerAvatarComp *const)(v3 + 96),
                    (uint64_t)v21,
                    *(_QWORD *)(v3 + 32));
                  if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v3 + 96), 0LL) )
                  {
                    common::milog::MiLogStream::create(
                      &v36,
                      &common::milog::MiLogDefault::default_log_obj_,
                      3u,
                      "./src/player/player.cpp",
                      "checkIsInSafeStateForChangeTeam",
                      5121);
                    v22 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                            &v36,
                            (const char (*)[24])"avatar not found, guid:");
                    common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                      v22,
                      (const unsigned __int64 *)(v3 + 32));
                    common::milog::MiLogStream::~MiLogStream(&v36);
                    v2 = 104;
                    v23 = 0;
                  }
                  else
                  {
                    v24 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
                    if ( *(_BYTE *)(((unsigned __int64)v24 >> 3) + 0x7FFF8000) )
                      __asan_report_load8();
                    v25 = *(_QWORD *)v24->baseclass_0 + 400LL;
                    if ( *(_BYTE *)((v25 >> 3) + 0x7FFF8000) )
                      __asan_report_load8();
                    v26 = (*(__int64 (__fastcall **)(std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *))v25)(v24);
                    if ( v26 == 1 )
                    {
                      v23 = 1;
                    }
                    else
                    {
                      if ( v26 == 2 )
                      {
                        common::milog::MiLogStream::create(
                          &v36,
                          &common::milog::MiLogDefault::default_log_obj_,
                          1u,
                          "./src/player/player.cpp",
                          "checkIsInSafeStateForChangeTeam",
                          5129);
                        common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                          &v36,
                          (const char (*)[29])"player is using trial avatar");
                        common::milog::MiLogStream::~MiLogStream(&v36);
                        v2 = 160;
                      }
                      else
                      {
                        common::milog::MiLogStream::create(
                          &v36,
                          &common::milog::MiLogDefault::default_log_obj_,
                          1u,
                          "./src/player/player.cpp",
                          "checkIsInSafeStateForChangeTeam",
                          5132);
                        v27 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                                &v36,
                                (const char (*)[19])"using temp avatar:");
                        v28 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
                        v29 = common::milog::MiLogStream::operator<<<Avatar,(Avatar*)0>(v27, v28);
                        v30 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(
                                v29,
                                (const char (*)[9])" player:");
                        operator<<(v30, this);
                        common::milog::MiLogStream::~MiLogStream(&v36);
                        v2 = 161;
                      }
                      v23 = 0;
                    }
                  }
                  std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 96));
                  if ( v23 != 1 )
                    goto LABEL_45;
                  __gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator++(&__for_begin);
                }
                v2 = 0;
LABEL_45:
                std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v3 + 128));
              }
            }
            else
            {
              common::milog::MiLogStream::create(
                &v36,
                &common::milog::MiLogDefault::default_log_obj_,
                1u,
                "./src/player/player.cpp",
                "checkIsInSafeStateForChangeTeam",
                5104);
              common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                &v36,
                (const char (*)[20])"player is not alive");
              common::milog::MiLogStream::~MiLogStream(&v36);
              v2 = 102;
            }
          }
          std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 64));
        }
      }
    }
  }
  result = v2;
  if ( v37 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5141: range 000000001715E11A-000000001715E1CC
int32_t __cdecl Player::checkIsAllowUseItem(Player *const this)
{
  PlayerTowerComp *TowerComp; // rax
  common::milog::MiLogStream *v2; // rdx
  common::milog::MiLogStream v4; // [rsp+10h] [rbp-30h] BYREF

  TowerComp = Player::getTowerComp(this);
  if ( !PlayerTowerComp::isInTowerLevel(TowerComp) )
    return 0;
  common::milog::MiLogStream::create(
    &v4,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/player/player.cpp",
    "checkIsAllowUseItem",
    5144);
  v2 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
         &v4,
         (const char (*)[31])"player in tower level. player:");
  operator<<(v2, this);
  common::milog::MiLogStream::~MiLogStream(&v4);
  return 1531;
};

// Line 5152: range 000000001715E1CE-000000001715E280
int32_t __cdecl Player::checkIsAllowChangeTeam(Player *const this)
{
  PlayerTowerComp *TowerComp; // rax
  common::milog::MiLogStream *v2; // rdx
  common::milog::MiLogStream v4; // [rsp+10h] [rbp-30h] BYREF

  TowerComp = Player::getTowerComp(this);
  if ( !PlayerTowerComp::isInTowerLevel(TowerComp) )
    return 0;
  common::milog::MiLogStream::create(
    &v4,
    &common::milog::MiLogDefault::default_log_obj_,
    3u,
    "./src/player/player.cpp",
    "checkIsAllowChangeTeam",
    5155);
  v2 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
         &v4,
         (const char (*)[31])"player in tower level. player:");
  operator<<(v2, this);
  common::milog::MiLogStream::~MiLogStream(&v4);
  return 1531;
};

// Line 5163: range 000000001715E282-000000001715E2B4
int32_t __cdecl Player::toBlockBin(Player *const this, std::map<unsigned int,proto::BlockInfo> *block_info_map)
{
  return BlockDataMgr::toBin(&this->block_data_mgr_, block_info_map, 1, 1);
};

// Line 5167: range 000000001715E2B6-000000001715E403
int32_t __cdecl Player::fromBlockBin(Player *const this, std::map<unsigned int,proto::BlockInfo> *block_info_map)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  std::__shared_ptr<TracingMgr,(__gnu_cxx::_Lock_policy)2>::element_type *v5; // rax
  int32_t v6; // r14d
  int32_t result; // eax
  opentracing::v3::string_view operation_name; // [rsp+10h] [rbp-80h] BYREF
  char v9[112]; // [rsp+20h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 20 perf_span_proxy:5168";
  *(_QWORD *)(v2 + 16) = Player::fromBlockBin;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  opentracing::v3::string_view::string_view(&operation_name, "Player::fromBlockBin");
  v5 = std::__shared_ptr<TracingMgr,(__gnu_cxx::_Lock_policy)2>::get(&ResourceBox::tracing_mgr_ptr);
  PerfSpanProxy::PerfSpanProxy((PerfSpanProxy *const)(v2 + 32), v5, operation_name);
  v6 = BlockDataMgr::fromBin(&this->block_data_mgr_, block_info_map);
  PerfSpanProxy::~PerfSpanProxy((PerfSpanProxy *const)(v2 + 32));
  result = v6;
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5173: range 000000001715E404-000000001715E42C
const std::vector<unsigned int> *__cdecl Player::getFromBinSceneDynamicGroupsVec(Player *const this, uint32_t scene_id)
{
  return BlockDataMgr::getFromBinSceneDynamicGroupsVec(&this->block_data_mgr_, scene_id);
};

// Line 5178: range 000000001715E42E-000000001715E456
const std::vector<unsigned int> *__cdecl Player::getFromBinAbandonBlockbinSceneGroupsVec(
        Player *const this,
        uint32_t scene_id)
{
  return BlockDataMgr::getFromBinAbandonBlockbinSceneGroupsVec(&this->block_data_mgr_, scene_id);
};

// Line 5183: range 000000001715E458-000000001715E578
int32_t __cdecl Player::fromFeatureBlockBin(Player *const this, const proto::FeatureBlockInfo *block_info)
{
  google::protobuf::uint32 v2; // eax
  time_t v3; // rbx
  PlayerMpComp *MpComp; // rbx
  uint32_t v5; // eax
  time_t v6; // rbx
  PlayerSceneComp *SceneComp; // rbx
  uint32_t v8; // eax

  v2 = proto::FeatureBlockInfo::feature_type(block_info);
  if ( v2 == 3 )
  {
    if ( *(char *)(((unsigned __int64)&this->is_in_crc_suspicous_list_ >> 3) + 0x7FFF8000) < 0 )
      __asan_report_store1(&this->is_in_crc_suspicous_list_, block_info, &this->is_in_crc_suspicous_list_);
    this->is_in_crc_suspicous_list_ = 1;
  }
  else if ( v2 <= 3 )
  {
    if ( v2 == 1 )
    {
      v6 = proto::FeatureBlockInfo::end_time(block_info);
      if ( v6 > common::tools::TimeUtils::getNow() )
      {
        SceneComp = Player::getSceneComp(this);
        v8 = proto::FeatureBlockInfo::end_time(block_info);
        PlayerSceneComp::setChatBlockEndTime(SceneComp, v8);
      }
    }
    else if ( v2 == 2 )
    {
      v3 = proto::FeatureBlockInfo::end_time(block_info);
      if ( v3 > common::tools::TimeUtils::getNow() )
      {
        MpComp = Player::getMpComp(this);
        v5 = proto::FeatureBlockInfo::end_time(block_info);
        PlayerMpComp::setMpBlockEndTime(MpComp, v5);
      }
    }
  }
  return 0;
};

// Line 5209: range 000000001715E57A-000000001715E5CF
AvatarPtr __cdecl Player::getCurAvatar(Player *const this)
{
  Player *v1; // rsi
  AvatarPtr result; // rax

  Player::getAvatarComp(v1);
  if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store16(this);
  result = PlayerAvatarComp::getCurAvatar((const PlayerAvatarComp *const)this);
  result._M_ptr = (std::__shared_ptr<Avatar,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 5212: range 000000001715E5D0-000000001715E62B
void __cdecl Player::setPlayerLoginPlatformByGm(Player *const this, uint32_t platform_type)
{
  __int64 v2; // rdx

  v2 = (*(_BYTE *)(((unsigned __int64)&this->platform_type_ >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)((((_BYTE)this - 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->platform_type_ >> 3) + 0x7FFF8000));
  if ( (_BYTE)v2 )
    __asan_report_store4(&this->platform_type_, (((_BYTE)this - 68) & 7u) + 3, v2);
  this->platform_type_ = platform_type;
};

// Line 5217: range 000000001715E62C-000000001715E655
void __cdecl Player::setClientDataVersionByGm(Player *const this, uint32_t client_data_version)
{
  proto::PlayerLoginReq::set_client_data_version(&this->client_device_info_.session_login_req, client_data_version);
};

// Line 5222: range 000000001715E656-000000001715E7A0
bool __cdecl Player::isClientDataVersionLatest(const Player *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v4; // rax
  const proto::PlayerLoginReq *SessionLoginReq; // rax
  bool v6; // r15
  bool result; // al
  uint32_t client_version; // [rsp+1Ch] [rbp-74h]
  char v9[112]; // [rsp+20h] [rbp-70h] BYREF

  v1 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 16 15 config_ptr:5224";
  *(_QWORD *)(v1 + 16) = Player::isClientDataVersionLatest;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202178560;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v1 + 32));
  v4 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
  client_version = ClientVersionConfig::getClientDataVersion(&v4->design_config.version_config);
  SessionLoginReq = Player::getSessionLoginReq(this);
  v6 = client_version == proto::PlayerLoginReq::client_data_version(SessionLoginReq);
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v1 + 32));
  result = v6;
  if ( v9 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5236: range 000000001715E7A2-000000001715F941
void __cdecl Player::addAllModifyDataFunc(Player *const this)
{
  std::function<void()> *v1; // rax
  std::function<void()> *v2; // rax
  std::function<void()> *v3; // rax
  std::function<void()> *v4; // rax
  std::function<void()> *v5; // rax
  std::function<void()> *v6; // rax
  std::function<void()> *v7; // rax
  std::function<void()> *v8; // rax
  std::function<void()> *v9; // rax
  std::function<void()> *v10; // rax
  std::function<void()> *v11; // rax
  std::function<void()> *v12; // rax
  __m128i v13; // [rsp+0h] [rbp-150h] BYREF
  __m128i v14; // [rsp+10h] [rbp-140h] BYREF
  __m128i v15; // [rsp+20h] [rbp-130h] BYREF
  __m128i v16; // [rsp+30h] [rbp-120h] BYREF
  __m128i v17; // [rsp+40h] [rbp-110h] BYREF
  __m128i v18; // [rsp+50h] [rbp-100h] BYREF
  __m128i v19; // [rsp+60h] [rbp-F0h] BYREF
  __m128i v20; // [rsp+70h] [rbp-E0h] BYREF
  __m128i v21; // [rsp+80h] [rbp-D0h] BYREF
  __m128i v22; // [rsp+90h] [rbp-C0h] BYREF
  Player *thisa; // [rsp+A8h] [rbp-A8h]
  std::map<unsigned int,std::function<void()>>::key_type __x; // [rsp+BCh] [rbp-94h] BYREF
  std::_Rb_tree_iterator<std::pair<unsigned int const,std::function<void()> > >::_Self v25; // [rsp+C0h] [rbp-90h] BYREF
  std::_Rb_tree_iterator<std::pair<unsigned int const,std::function<void()> > >::_Self __y; // [rsp+C8h] [rbp-88h] BYREF
  void (*__f[2])(Player *); // [rsp+D0h] [rbp-80h] BYREF
  std::_Bind_helper<false,void (Player::*)(),Player*>::type v28; // [rsp+E0h] [rbp-70h] BYREF
  common::milog::MiLogStream v29; // [rsp+100h] [rbp-50h] BYREF

  thisa = this;
  __y._M_node = std::map<unsigned int,std::function<void ()(void)>>::end(&this->version_to_modify_data_func_map_)._M_node;
  __x = 104001;
  v25._M_node = std::map<unsigned int,std::function<void ()(void)>>::find(&this->version_to_modify_data_func_map_, &__x)._M_node;
  if ( std::operator!=(&v25, &__y) )
  {
    common::milog::MiLogStream::create(
      &v29,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "addAllModifyDataFunc",
      5244);
    common::milog::MiLogStream::operator()(&v29, off_26037C40);
    common::milog::MiLogStream::~MiLogStream(&v29);
  }
  else
  {
    __y._M_node = (std::_Rb_tree_iterator<std::pair<unsigned int const,std::function<void()> > >::_Base_ptr)thisa;
    __f[0] = (void (*)(Player *))Player::checkAndModifyMetNpcIdSet;
    __f[1] = 0LL;
    std::bind<void (Player::*)(void),Player*>(&v28, __f, (Player **)&__y, (Player **)&v28);
    __x = 104001;
    v1 = std::map<unsigned int,std::function<void ()(void)>>::operator[](&thisa->version_to_modify_data_func_map_, &__x);
    std::function<void ()(void)>::operator=<std::_Bind<void (Player::*)(void) ()(Player*)>>(v1, &v28);
    __y._M_node = std::map<unsigned int,std::function<void ()(void)>>::end(&thisa->version_to_modify_data_func_map_)._M_node;
    __x = 106001;
    v25._M_node = std::map<unsigned int,std::function<void ()(void)>>::find(
                    &thisa->version_to_modify_data_func_map_,
                    &__x)._M_node;
    if ( std::operator!=(&v25, &__y) )
    {
      common::milog::MiLogStream::create(
        &v29,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/player.cpp",
        "addAllModifyDataFunc",
        5245);
      common::milog::MiLogStream::operator()(&v29, off_26037CA0);
      common::milog::MiLogStream::~MiLogStream(&v29);
    }
    else
    {
      __y._M_node = (std::_Rb_tree_iterator<std::pair<unsigned int const,std::function<void()> > >::_Base_ptr)thisa;
      __f[0] = (void (*)(Player *))Player::checkAndModifySceneTag;
      __f[1] = 0LL;
      std::bind<void (Player::*)(void),Player*>(&v28, __f, (Player **)&__y, (Player **)&v28);
      __x = 106001;
      v2 = std::map<unsigned int,std::function<void ()(void)>>::operator[](
             &thisa->version_to_modify_data_func_map_,
             &__x);
      std::function<void ()(void)>::operator=<std::_Bind<void (Player::*)(void) ()(Player*)>>(v2, &v28);
      __y._M_node = std::map<unsigned int,std::function<void ()(void)>>::end(&thisa->version_to_modify_data_func_map_)._M_node;
      __x = 200001;
      v25._M_node = std::map<unsigned int,std::function<void ()(void)>>::find(
                      &thisa->version_to_modify_data_func_map_,
                      &__x)._M_node;
      if ( std::operator!=(&v25, &__y) )
      {
        common::milog::MiLogStream::create(
          &v29,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/player.cpp",
          "addAllModifyDataFunc",
          5246);
        common::milog::MiLogStream::operator()(&v29, off_26037D00);
        common::milog::MiLogStream::~MiLogStream(&v29);
      }
      else
      {
        __y._M_node = (std::_Rb_tree_iterator<std::pair<unsigned int const,std::function<void()> > >::_Base_ptr)thisa;
        v13.m128i_i64[0] = (__int64)Player::checkAndModifyMcoin;
        v13.m128i_i64[1] = 0LL;
        *(__m128i *)__f = _mm_load_si128(&v13);
        std::bind<void (Player::*)(void),Player*>(&v28, __f, (Player **)&__y, (Player **)&v28);
        __x = 200001;
        v3 = std::map<unsigned int,std::function<void ()(void)>>::operator[](
               &thisa->version_to_modify_data_func_map_,
               &__x);
        std::function<void ()(void)>::operator=<std::_Bind<void (Player::*)(void) ()(Player*)>>(v3, &v28);
        __y._M_node = std::map<unsigned int,std::function<void ()(void)>>::end(&thisa->version_to_modify_data_func_map_)._M_node;
        __x = 200002;
        v25._M_node = std::map<unsigned int,std::function<void ()(void)>>::find(
                        &thisa->version_to_modify_data_func_map_,
                        &__x)._M_node;
        if ( std::operator!=(&v25, &__y) )
        {
          common::milog::MiLogStream::create(
            &v29,
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/player/player.cpp",
            "addAllModifyDataFunc",
            5247);
          common::milog::MiLogStream::operator()(&v29, off_26037D60);
          common::milog::MiLogStream::~MiLogStream(&v29);
        }
        else
        {
          __y._M_node = (std::_Rb_tree_iterator<std::pair<unsigned int const,std::function<void()> > >::_Base_ptr)thisa;
          v14.m128i_i64[0] = (__int64)Player::checkAndModifyThoarderWeasel03Codex;
          v14.m128i_i64[1] = 0LL;
          *(__m128i *)__f = _mm_load_si128(&v14);
          std::bind<void (Player::*)(void),Player*>(&v28, __f, (Player **)&__y, (Player **)&v28);
          __x = 200002;
          v4 = std::map<unsigned int,std::function<void ()(void)>>::operator[](
                 &thisa->version_to_modify_data_func_map_,
                 &__x);
          std::function<void ()(void)>::operator=<std::_Bind<void (Player::*)(void) ()(Player*)>>(v4, &v28);
          __y._M_node = std::map<unsigned int,std::function<void ()(void)>>::end(&thisa->version_to_modify_data_func_map_)._M_node;
          __x = 201001;
          v25._M_node = std::map<unsigned int,std::function<void ()(void)>>::find(
                          &thisa->version_to_modify_data_func_map_,
                          &__x)._M_node;
          if ( std::operator!=(&v25, &__y) )
          {
            common::milog::MiLogStream::create(
              &v29,
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/player/player.cpp",
              "addAllModifyDataFunc",
              5248);
            common::milog::MiLogStream::operator()(&v29, off_26037C40);
            common::milog::MiLogStream::~MiLogStream(&v29);
          }
          else
          {
            __y._M_node = (std::_Rb_tree_iterator<std::pair<unsigned int const,std::function<void()> > >::_Base_ptr)thisa;
            v15.m128i_i64[0] = (__int64)Player::checkAndModifyMetNpcIdSet;
            v15.m128i_i64[1] = 0LL;
            *(__m128i *)__f = _mm_load_si128(&v15);
            std::bind<void (Player::*)(void),Player*>(&v28, __f, (Player **)&__y, (Player **)&v28);
            __x = 201001;
            v5 = std::map<unsigned int,std::function<void ()(void)>>::operator[](
                   &thisa->version_to_modify_data_func_map_,
                   &__x);
            std::function<void ()(void)>::operator=<std::_Bind<void (Player::*)(void) ()(Player*)>>(v5, &v28);
            __y._M_node = std::map<unsigned int,std::function<void ()(void)>>::end(&thisa->version_to_modify_data_func_map_)._M_node;
            __x = 202001;
            v25._M_node = std::map<unsigned int,std::function<void ()(void)>>::find(
                            &thisa->version_to_modify_data_func_map_,
                            &__x)._M_node;
            if ( std::operator!=(&v25, &__y) )
            {
              common::milog::MiLogStream::create(
                &v29,
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/player/player.cpp",
                "addAllModifyDataFunc",
                5249);
              common::milog::MiLogStream::operator()(&v29, off_26037DC0);
              common::milog::MiLogStream::~MiLogStream(&v29);
            }
            else
            {
              __y._M_node = (std::_Rb_tree_iterator<std::pair<unsigned int const,std::function<void()> > >::_Base_ptr)thisa;
              v16.m128i_i64[0] = (__int64)Player::checkAndModifyHomePlantSnapshotGatherId;
              v16.m128i_i64[1] = 0LL;
              *(__m128i *)__f = _mm_load_si128(&v16);
              std::bind<void (Player::*)(void),Player*>(&v28, __f, (Player **)&__y, (Player **)__f);
              __x = 202001;
              v6 = std::map<unsigned int,std::function<void ()(void)>>::operator[](
                     &thisa->version_to_modify_data_func_map_,
                     &__x);
              std::function<void ()(void)>::operator=<std::_Bind<void (Player::*)(void) ()(Player*)>>(v6, &v28);
              __y._M_node = std::map<unsigned int,std::function<void ()(void)>>::end(&thisa->version_to_modify_data_func_map_)._M_node;
              __x = 204001;
              v25._M_node = std::map<unsigned int,std::function<void ()(void)>>::find(
                              &thisa->version_to_modify_data_func_map_,
                              &__x)._M_node;
              if ( std::operator!=(&v25, &__y) )
              {
                common::milog::MiLogStream::create(
                  &v29,
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/player/player.cpp",
                  "addAllModifyDataFunc",
                  5250);
                common::milog::MiLogStream::operator()(&v29, off_26037E40);
                common::milog::MiLogStream::~MiLogStream(&v29);
              }
              else
              {
                __y._M_node = (std::_Rb_tree_iterator<std::pair<unsigned int const,std::function<void()> > >::_Base_ptr)thisa;
                v17.m128i_i64[0] = (__int64)Player::checkAndModifyCityData;
                v17.m128i_i64[1] = 0LL;
                *(__m128i *)__f = _mm_load_si128(&v17);
                std::bind<void (Player::*)(void),Player*>(&v28, __f, (Player **)&__y, (Player **)__f);
                __x = 204001;
                v7 = std::map<unsigned int,std::function<void ()(void)>>::operator[](
                       &thisa->version_to_modify_data_func_map_,
                       &__x);
                std::function<void ()(void)>::operator=<std::_Bind<void (Player::*)(void) ()(Player*)>>(v7, &v28);
                __y._M_node = std::map<unsigned int,std::function<void ()(void)>>::end(&thisa->version_to_modify_data_func_map_)._M_node;
                __x = 204002;
                v25._M_node = std::map<unsigned int,std::function<void ()(void)>>::find(
                                &thisa->version_to_modify_data_func_map_,
                                &__x)._M_node;
                if ( std::operator!=(&v25, &__y) )
                {
                  common::milog::MiLogStream::create(
                    &v29,
                    &common::milog::MiLogDefault::default_log_obj_,
                    4u,
                    "./src/player/player.cpp",
                    "addAllModifyDataFunc",
                    5251);
                  common::milog::MiLogStream::operator()(&v29, off_26037EA0);
                  common::milog::MiLogStream::~MiLogStream(&v29);
                }
                else
                {
                  __y._M_node = (std::_Rb_tree_iterator<std::pair<unsigned int const,std::function<void()> > >::_Base_ptr)thisa;
                  v18.m128i_i64[0] = (__int64)Player::checkAndTestAreaExplorePoints;
                  v18.m128i_i64[1] = 0LL;
                  *(__m128i *)__f = _mm_load_si128(&v18);
                  std::bind<void (Player::*)(void),Player*>(&v28, __f, (Player **)&__y, (Player **)__f);
                  __x = 204002;
                  v8 = std::map<unsigned int,std::function<void ()(void)>>::operator[](
                         &thisa->version_to_modify_data_func_map_,
                         &__x);
                  std::function<void ()(void)>::operator=<std::_Bind<void (Player::*)(void) ()(Player*)>>(v8, &v28);
                  __y._M_node = std::map<unsigned int,std::function<void ()(void)>>::end(&thisa->version_to_modify_data_func_map_)._M_node;
                  __x = 204003;
                  v25._M_node = std::map<unsigned int,std::function<void ()(void)>>::find(
                                  &thisa->version_to_modify_data_func_map_,
                                  &__x)._M_node;
                  if ( std::operator!=(&v25, &__y) )
                  {
                    common::milog::MiLogStream::create(
                      &v29,
                      &common::milog::MiLogDefault::default_log_obj_,
                      4u,
                      "./src/player/player.cpp",
                      "addAllModifyDataFunc",
                      5252);
                    common::milog::MiLogStream::operator()(&v29, off_26037F00);
                    common::milog::MiLogStream::~MiLogStream(&v29);
                  }
                  else
                  {
                    __y._M_node = (std::_Rb_tree_iterator<std::pair<unsigned int const,std::function<void()> > >::_Base_ptr)thisa;
                    v19.m128i_i64[0] = (__int64)Player::checkAndModifyWidgetAnchorPointSceneId;
                    v19.m128i_i64[1] = 0LL;
                    *(__m128i *)__f = _mm_load_si128(&v19);
                    std::bind<void (Player::*)(void),Player*>(&v28, __f, (Player **)&__y, (Player **)__f);
                    __x = 204003;
                    v9 = std::map<unsigned int,std::function<void ()(void)>>::operator[](
                           &thisa->version_to_modify_data_func_map_,
                           &__x);
                    std::function<void ()(void)>::operator=<std::_Bind<void (Player::*)(void) ()(Player*)>>(v9, &v28);
                    __y._M_node = std::map<unsigned int,std::function<void ()(void)>>::end(&thisa->version_to_modify_data_func_map_)._M_node;
                    __x = 207001;
                    v25._M_node = std::map<unsigned int,std::function<void ()(void)>>::find(
                                    &thisa->version_to_modify_data_func_map_,
                                    &__x)._M_node;
                    if ( std::operator!=(&v25, &__y) )
                    {
                      common::milog::MiLogStream::create(
                        &v29,
                        &common::milog::MiLogDefault::default_log_obj_,
                        4u,
                        "./src/player/player.cpp",
                        "addAllModifyDataFunc",
                        5253);
                      common::milog::MiLogStream::operator()(&v29, off_26037F80);
                      common::milog::MiLogStream::~MiLogStream(&v29);
                    }
                    else
                    {
                      __y._M_node = (std::_Rb_tree_iterator<std::pair<unsigned int const,std::function<void()> > >::_Base_ptr)thisa;
                      v20.m128i_i64[0] = (__int64)Player::checkAndModifySceneAreaInteractGadgetSet;
                      v20.m128i_i64[1] = 0LL;
                      *(__m128i *)__f = _mm_load_si128(&v20);
                      std::bind<void (Player::*)(void),Player*>(&v28, __f, (Player **)&__y, (Player **)__f);
                      __x = 207001;
                      v10 = std::map<unsigned int,std::function<void ()(void)>>::operator[](
                              &thisa->version_to_modify_data_func_map_,
                              &__x);
                      std::function<void ()(void)>::operator=<std::_Bind<void (Player::*)(void) ()(Player*)>>(v10, &v28);
                      __y._M_node = std::map<unsigned int,std::function<void ()(void)>>::end(&thisa->version_to_modify_data_func_map_)._M_node;
                      __x = 208001;
                      v25._M_node = std::map<unsigned int,std::function<void ()(void)>>::find(
                                      &thisa->version_to_modify_data_func_map_,
                                      &__x)._M_node;
                      if ( std::operator!=(&v25, &__y) )
                      {
                        common::milog::MiLogStream::create(
                          &v29,
                          &common::milog::MiLogDefault::default_log_obj_,
                          4u,
                          "./src/player/player.cpp",
                          "addAllModifyDataFunc",
                          5254);
                        common::milog::MiLogStream::operator()(&v29, off_26038000);
                        common::milog::MiLogStream::~MiLogStream(&v29);
                      }
                      else
                      {
                        __y._M_node = (std::_Rb_tree_iterator<std::pair<unsigned int const,std::function<void()> > >::_Base_ptr)thisa;
                        v21.m128i_i64[0] = (__int64)Player::checkAndModifyPushTipsCodex;
                        v21.m128i_i64[1] = 0LL;
                        *(__m128i *)__f = _mm_load_si128(&v21);
                        std::bind<void (Player::*)(void),Player*>(&v28, __f, (Player **)&__y, (Player **)__f);
                        __x = 208001;
                        v11 = std::map<unsigned int,std::function<void ()(void)>>::operator[](
                                &thisa->version_to_modify_data_func_map_,
                                &__x);
                        std::function<void ()(void)>::operator=<std::_Bind<void (Player::*)(void) ()(Player*)>>(
                          v11,
                          &v28);
                        __y._M_node = std::map<unsigned int,std::function<void ()(void)>>::end(&thisa->version_to_modify_data_func_map_)._M_node;
                        __x = 303001;
                        v25._M_node = std::map<unsigned int,std::function<void ()(void)>>::find(
                                        &thisa->version_to_modify_data_func_map_,
                                        &__x)._M_node;
                        if ( std::operator!=(&v25, &__y) )
                        {
                          common::milog::MiLogStream::create(
                            &v29,
                            &common::milog::MiLogDefault::default_log_obj_,
                            4u,
                            "./src/player/player.cpp",
                            "addAllModifyDataFunc",
                            5255);
                          common::milog::MiLogStream::operator()(&v29, off_26038060);
                          common::milog::MiLogStream::~MiLogStream(&v29);
                        }
                        else
                        {
                          __y._M_node = (std::_Rb_tree_iterator<std::pair<unsigned int const,std::function<void()> > >::_Base_ptr)thisa;
                          v22.m128i_i64[0] = (__int64)Player::checkAndModifyAnemoculusAndGeoculusOneoffBin;
                          v22.m128i_i64[1] = 0LL;
                          *(__m128i *)__f = _mm_load_si128(&v22);
                          std::bind<void (Player::*)(void),Player*>(&v28, __f, (Player **)&__y, (Player **)__f);
                          __x = 303001;
                          v12 = std::map<unsigned int,std::function<void ()(void)>>::operator[](
                                  &thisa->version_to_modify_data_func_map_,
                                  &__x);
                          std::function<void ()(void)>::operator=<std::_Bind<void (Player::*)(void) ()(Player*)>>(
                            v12,
                            &v28);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};

// Line 5259: range 000000001715F942-000000001715FB22
int32_t __cdecl Player::checkVersionAndModifyPlayerData(Player *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  _DWORD *v3; // r12
  PlayerBasicComp *BasicComp; // rax
  std::_Rb_tree_iterator<std::pair<unsigned int const,std::function<void()> > >::pointer v5; // rax
  std::_Rb_tree_iterator<std::pair<unsigned int const,std::function<void()> > >::pointer v6; // rax
  int32_t result; // eax
  std::_Rb_tree_iterator<std::pair<unsigned int const,std::function<void()> > >::_Self __y; // [rsp+10h] [rbp-90h] BYREF
  PlayerBasicComp *basic_comp; // [rsp+18h] [rbp-88h]
  char v10[128]; // [rsp+20h] [rbp-80h] BYREF

  v1 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(96LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 4 21 cur_data_version:5260 64 8 9 iter:5261";
  *(_QWORD *)(v1 + 16) = Player::checkVersionAndModifyPlayerData;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234556943;
  v3[536862722] = -202116352;
  BasicComp = Player::getBasicComp(this);
  *(_DWORD *)(v1 + 48) = PlayerBasicComp::getDataVersion(BasicComp);
  *(std::map<unsigned int,std::function<void()>>::iterator *)(v1 + 64) = std::map<unsigned int,std::function<void ()(void)>>::upper_bound(
                                                                           &this->version_to_modify_data_func_map_,
                                                                           (const std::map<unsigned int,std::function<void()>>::key_type *)(v1 + 48));
  basic_comp = Player::getBasicComp(this);
  while ( 1 )
  {
    __y._M_node = std::map<unsigned int,std::function<void ()(void)>>::end(&this->version_to_modify_data_func_map_)._M_node;
    if ( !std::operator!=(
            (const std::_Rb_tree_iterator<std::pair<unsigned int const,std::function<void()> > >::_Self *)(v1 + 64),
            &__y) )
      break;
    v5 = std::_Rb_tree_iterator<std::pair<unsigned int const,std::function<void ()(void)>>>::operator->((const std::_Rb_tree_iterator<std::pair<unsigned int const,std::function<void()> > > *const)(v1 + 64));
    std::function<void ()(void)>::operator()(&v5->second);
    v6 = std::_Rb_tree_iterator<std::pair<unsigned int const,std::function<void ()(void)>>>::operator->((const std::_Rb_tree_iterator<std::pair<unsigned int const,std::function<void()> > > *const)(v1 + 64));
    if ( *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(v6);
    }
    PlayerBasicComp::setDataVersion(basic_comp, v6->first);
    std::_Rb_tree_iterator<std::pair<unsigned int const,std::function<void ()(void)>>>::operator++((std::_Rb_tree_iterator<std::pair<unsigned int const,std::function<void()> > > *const)(v1 + 64));
  }
  result = 0;
  if ( v10 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 5273: range 000000001715FB24-000000001715FB46
void __cdecl Player::checkAndModifyMetNpcIdSet(Player *const this)
{
  PlayerTalkComp *TalkComp; // rax

  TalkComp = Player::getTalkComp(this);
  PlayerTalkComp::checkAndAddAllNpcMetInQuest(TalkComp);
};

// Line 5278: range 000000001715FB48-000000001715FB6A
void __cdecl Player::checkAndModifySceneTag(Player *const this)
{
  PlayerSceneComp *SceneComp; // rax

  SceneComp = Player::getSceneComp(this);
  PlayerSceneComp::checkAndModifySceneTag(SceneComp);
};

// Line 5283: range 000000001715FB6C-000000001715FB8E
void __cdecl Player::checkAndModifyMcoin(Player *const this)
{
  PlayerItemComp *ItemComp; // rax

  ItemComp = Player::getItemComp(this);
  PlayerItemComp::checkAndModifyMcoin(ItemComp);
};

// Line 5288: range 000000001715FB90-000000001715FBB2
void __cdecl Player::checkAndModifyThoarderWeasel03Codex(Player *const this)
{
  PlayerCodexComp *CodexComp; // rax

  CodexComp = Player::getCodexComp(this);
  PlayerCodexComp::checkAndModifyThoarderWeasel03Codex(CodexComp);
};

// Line 5293: range 000000001715FBB4-000000001715FBD6
void __cdecl Player::checkAndModifyHomePlantSnapshotGatherId(Player *const this)
{
  PlayerHomeComp *HomeComp; // rax

  HomeComp = Player::getHomeComp(this);
  PlayerHomeComp::checkAndModifyHomePlantSnapshotGatherId(HomeComp);
};

// Line 5298: range 000000001715FBD8-000000001715FBFA
void __cdecl Player::checkAndModifyCityData(Player *const this)
{
  PlayerCityComp *CityComp; // rax

  CityComp = Player::getCityComp(this);
  PlayerCityComp::checkAndModifyCityData(CityComp);
};

// Line 5303: range 000000001715FBFC-000000001715FC1E
void __cdecl Player::checkAndTestAreaExplorePoints(Player *const this)
{
  PlayerSceneComp *SceneComp; // rax

  SceneComp = Player::getSceneComp(this);
  PlayerSceneComp::checkAndTestAreaExplorePoints(SceneComp);
};

// Line 5308: range 000000001715FC20-000000001715FC42
void __cdecl Player::checkAndModifyWidgetAnchorPointSceneId(Player *const this)
{
  PlayerWidgetComp *WidgetComp; // rax

  WidgetComp = Player::getWidgetComp(this);
  PlayerWidgetComp::checkAndModifyWidgetAnchorPointSceneId(WidgetComp);
};

// Line 5313: range 000000001715FC44-000000001715FC66
void __cdecl Player::checkAndModifySceneAreaInteractGadgetSet(Player *const this)
{
  PlayerSceneComp *SceneComp; // rax

  SceneComp = Player::getSceneComp(this);
  PlayerSceneComp::checkAndModifySceneAreaInteractGadgetSet(SceneComp);
};

// Line 5318: range 000000001715FC68-000000001715FC8A
void __cdecl Player::checkAndModifyPushTipsCodex(Player *const this)
{
  PlayerCodexComp *CodexComp; // rax

  CodexComp = Player::getCodexComp(this);
  PlayerCodexComp::checkAndModifyPushTipsCodex(CodexComp);
};

// Line 5324: range 000000001715FC8C-000000001715FCAE
void __cdecl Player::checkAndModifyAnemoculusAndGeoculusOneoffBin(Player *const this)
{
  PlayerSceneComp *SceneComp; // rax

  SceneComp = Player::getSceneComp(this);
  PlayerSceneComp::checkAndModifyAnemoculusAndGeoculusOneoffBin(SceneComp);
};

// Line 5329: range 000000001715FCB0-000000001715FDAF
void __cdecl Player::onLeaveScene(Player *const this)
{
  std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v1; // rax
  unsigned __int64 v2; // rdx
  const EcsBase<Player,PlayerCompBase,71>::CompBasePair *v3; // [rsp+18h] [rbp-38h]
  std::tuple_element<1,const std::pair<unsigned int,std::shared_ptr<PlayerCompBase> > >::type *player_comp_ptr; // [rsp+28h] [rbp-28h]
  EcsBase<Player,PlayerCompBase,71>::Iterator __for_begin; // [rsp+30h] [rbp-20h] BYREF
  EcsBase<Player,PlayerCompBase,71>::Iterator __for_end; // [rsp+40h] [rbp-10h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::begin((const EcsBase<Player,PlayerCompBase,71> *const)&__for_begin);
  EcsBase<Player,PlayerCompBase,71u>::end((const EcsBase<Player,PlayerCompBase,71> *const)&__for_end);
  while ( EcsBase<Player,PlayerCompBase,71u>::Iterator::operator!=(&__for_begin, &__for_end) )
  {
    v3 = EcsBase<Player,PlayerCompBase,71u>::Iterator::operator*(&__for_begin);
    std::get<0ul,unsigned int,std::shared_ptr<PlayerCompBase>>(v3);
    player_comp_ptr = (std::tuple_element<1,const std::pair<unsigned int,std::shared_ptr<PlayerCompBase> > >::type *)std::get<1ul,unsigned int,std::shared_ptr<PlayerCompBase>>(v3);
    v1 = std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false> *const)player_comp_ptr);
    if ( *(_BYTE *)(((unsigned __int64)v1 >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v2 = (unsigned __int64)(v1->_vptr_PlayerCompBase + 19);
    if ( *(_BYTE *)((v2 >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    (*(void (__fastcall **)(std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *))v2)(v1);
    EcsBase<Player,PlayerCompBase,71u>::Iterator::operator++(&__for_begin);
  }
};

// Line 5337: range 000000001715FDB0-000000001715FF18
void __cdecl Player::onEnterScene(Player *const this, ScenePtr *p_scene_ptr, bool is_reenter)
{
  std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v3; // rbx
  unsigned __int64 v4; // rax
  void (__fastcall *v5)(std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::shared_ptr<Scene> *, bool); // r13
  const EcsBase<Player,PlayerCompBase,71>::CompBasePair *v7; // [rsp+28h] [rbp-68h]
  std::tuple_element<1,const std::pair<unsigned int,std::shared_ptr<PlayerCompBase> > >::type *player_comp_ptr; // [rsp+38h] [rbp-58h]
  EcsBase<Player,PlayerCompBase,71>::Iterator __for_begin; // [rsp+40h] [rbp-50h] BYREF
  EcsBase<Player,PlayerCompBase,71>::Iterator __for_end; // [rsp+50h] [rbp-40h] BYREF
  std::shared_ptr<Scene> v11; // [rsp+60h] [rbp-30h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::begin((const EcsBase<Player,PlayerCompBase,71> *const)&__for_begin);
  EcsBase<Player,PlayerCompBase,71u>::end((const EcsBase<Player,PlayerCompBase,71> *const)&__for_end);
  while ( EcsBase<Player,PlayerCompBase,71u>::Iterator::operator!=(&__for_begin, &__for_end) )
  {
    v7 = EcsBase<Player,PlayerCompBase,71u>::Iterator::operator*(&__for_begin);
    std::get<0ul,unsigned int,std::shared_ptr<PlayerCompBase>>(v7);
    player_comp_ptr = (std::tuple_element<1,const std::pair<unsigned int,std::shared_ptr<PlayerCompBase> > >::type *)std::get<1ul,unsigned int,std::shared_ptr<PlayerCompBase>>(v7);
    v3 = std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false> *const)player_comp_ptr);
    if ( *(_BYTE *)(((unsigned __int64)v3 >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v4 = (unsigned __int64)(v3->_vptr_PlayerCompBase + 20);
    if ( *(_BYTE *)((v4 >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v5 = *(void (__fastcall **)(std::__shared_ptr_access<PlayerCompBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::shared_ptr<Scene> *, bool))v4;
    std::shared_ptr<Scene>::shared_ptr(&v11, p_scene_ptr);
    v5(v3, &v11, is_reenter);
    std::shared_ptr<Scene>::~shared_ptr(&v11);
    EcsBase<Player,PlayerCompBase,71u>::Iterator::operator++(&__for_begin);
  }
};

// Line 5345: range 000000001715FF1A-0000000017160507
void __cdecl Player::updateServerErrorNotifyRateLimit(Player *const this)
{
  double v1; // xmm1_8
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream *v6; // r14
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  common::tools::RateLimiter *v8; // rax
  double v9; // xmm1_8
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // r14
  common::tools::RateLimiter *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::tools::RateLimiter *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // r14
  unsigned int val; // [rsp+1Ch] [rbp-E4h] BYREF
  std::shared_ptr<common::tools::RateLimiter> __r; // [rsp+20h] [rbp-E0h] BYREF
  common::milog::MiLogStream v23; // [rsp+30h] [rbp-D0h] BYREF
  char v24[176]; // [rsp+50h] [rbp-B0h] BYREF

  v2 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 32 8 23 permits_per_second:5352 64 8 14 prev_rate:5355 96 16 15 config_ptr:5346";
  *(_QWORD *)(v2 + 16) = Player::updateServerErrorNotifyRateLimit;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -218959360;
  v4[536862723] = -202178560;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v2 + 96));
  if ( std::operator==<Config>(0LL, (const std::shared_ptr<Config> *)(v2 + 96)) )
  {
    common::milog::MiLogStream::create(
      &v23,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/player.cpp",
      "updateServerErrorNotifyRateLimit",
      5349);
    v5 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v23, (const char (*)[17])" config nullptr.");
    v6 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v5, (const char (*)[6])" uid:");
    val = Player::getUid(this);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, &val);
    common::milog::MiLogStream::~MiLogStream(&v23);
  }
  else
  {
    v7 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
    if ( *(_BYTE *)(((unsigned __int64)&v7->server_error_notify_rate_limit >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&v7->server_error_notify_rate_limit >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&v7->server_error_notify_rate_limit);
    }
    *(double *)(v2 + 32) = (double)(int)v7->server_error_notify_rate_limit;
    if ( std::operator!=<common::tools::RateLimiter>(0LL, &this->server_error_notify_rate_limiter_ptr_) )
    {
      v8 = std::__shared_ptr_access<common::tools::RateLimiter,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::tools::RateLimiter,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->server_error_notify_rate_limiter_ptr_);
      *(double *)(v2 + 64) = common::tools::RateLimiter::getRate(v8);
      if ( *(double *)(v2 + 64) != *(double *)(v2 + 32) )
      {
        v9 = *(double *)(v2 + 32);
        if ( v9 > 0.0 )
        {
          v12 = std::__shared_ptr_access<common::tools::RateLimiter,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::tools::RateLimiter,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->server_error_notify_rate_limiter_ptr_);
          common::tools::RateLimiter::setRate(v12, v9);
          common::milog::MiLogStream::create(
            &v23,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/player/player.cpp",
            "updateServerErrorNotifyRateLimit",
            5368);
          v13 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                  &v23,
                  (const char (*)[28])" server error notify rate: ");
          v14 = common::milog::MiLogStream::operator<<<double,(double *)0>(v13, (const double *)(v2 + 64));
          v15 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v14, (const char (*)[6])" ==> ");
          v16 = common::milog::MiLogStream::operator<<<double,(double *)0>(v15, (const double *)(v2 + 32));
          v11 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v16, (const char (*)[6])" uid:");
          val = Player::getUid(this);
        }
        else
        {
          std::shared_ptr<common::tools::RateLimiter>::shared_ptr(&__r, 0LL);
          std::shared_ptr<common::tools::RateLimiter>::operator=(&this->server_error_notify_rate_limiter_ptr_, &__r);
          std::shared_ptr<common::tools::RateLimiter>::~shared_ptr(&__r);
          common::milog::MiLogStream::create(
            &v23,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/player/player.cpp",
            "updateServerErrorNotifyRateLimit",
            5363);
          v10 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                  &v23,
                  (const char (*)[31])" server error notify disabled.");
          v11 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v10, (const char (*)[6])" uid:");
          val = Player::getUid(this);
        }
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, &val);
        common::milog::MiLogStream::~MiLogStream(&v23);
      }
    }
    else
    {
      v17 = common::tools::RateLimiter::create(v1);
      std::shared_ptr<common::tools::RateLimiter>::shared_ptr<common::tools::RateLimiter,void>(&__r, v17);
      std::shared_ptr<common::tools::RateLimiter>::operator=(&this->server_error_notify_rate_limiter_ptr_, &__r);
      std::shared_ptr<common::tools::RateLimiter>::~shared_ptr(&__r);
      common::milog::MiLogStream::create(
        &v23,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/player.cpp",
        "updateServerErrorNotifyRateLimit",
        5373);
      v18 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
              &v23,
              (const char (*)[34])" server error notify rate: 0 ==> ");
      v19 = common::milog::MiLogStream::operator<<<double,(double *)0>(v18, (const double *)(v2 + 32));
      v20 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v19, (const char (*)[6])" uid:");
      val = Player::getUid(this);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v20, &val);
      common::milog::MiLogStream::~MiLogStream(&v23);
    }
  }
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v2 + 96));
  if ( v24 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 5377: range 0000000017160508-0000000017160605
bool __cdecl Player::isCanSendServerErrorNotify(Player *const this)
{
  common::milog::MiLogStream *v1; // rax
  common::milog::MiLogStream *v2; // rbx
  common::tools::RateLimiter *v4; // rax
  unsigned int val; // [rsp+1Ch] [rbp-34h] BYREF
  common::milog::MiLogStream v6; // [rsp+20h] [rbp-30h] BYREF

  Player::updateServerErrorNotifyRateLimit(this);
  if ( std::operator==<common::tools::RateLimiter>(0LL, &this->server_error_notify_rate_limiter_ptr_) )
  {
    common::milog::MiLogStream::create(
      &v6,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/player.cpp",
      "isCanSendServerErrorNotify",
      5381);
    v1 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
           &v6,
           (const char (*)[31])" server error notify disabled.");
    v2 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v1, (const char (*)[6])" uid:");
    val = Player::getUid(this);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v2, &val);
    common::milog::MiLogStream::~MiLogStream(&v6);
    return 0;
  }
  else
  {
    v4 = std::__shared_ptr_access<common::tools::RateLimiter,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::tools::RateLimiter,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->server_error_notify_rate_limiter_ptr_);
    return common::tools::RateLimiter::canAcquire(v4, 1u);
  }
};

// Line 5389: range 0000000017160606-000000001716072A
bool __cdecl Player::trySendServerErrorNotify(Player *const this, const proto::ServerLogNotify *notify)
{
  common::milog::MiLogStream *v2; // rax
  common::milog::MiLogStream *v3; // rbx
  common::tools::RateLimiter *v5; // rax
  unsigned int val; // [rsp+1Ch] [rbp-34h] BYREF
  common::milog::MiLogStream v7; // [rsp+20h] [rbp-30h] BYREF

  Player::updateServerErrorNotifyRateLimit(this);
  if ( std::operator==<common::tools::RateLimiter>(0LL, &this->server_error_notify_rate_limiter_ptr_) )
  {
    common::milog::MiLogStream::create(
      &v7,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/player.cpp",
      "trySendServerErrorNotify",
      5393);
    v2 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
           &v7,
           (const char (*)[31])" server error notify disabled.");
    v3 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v2, (const char (*)[6])" uid:");
    val = Player::getUid(this);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v3, &val);
    common::milog::MiLogStream::~MiLogStream(&v7);
    return 0;
  }
  else
  {
    v5 = std::__shared_ptr_access<common::tools::RateLimiter,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::tools::RateLimiter,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->server_error_notify_rate_limiter_ptr_);
    if ( common::tools::RateLimiter::acquire(v5, 1u) )
    {
      Player::sendProto(this, notify);
      return 1;
    }
    else
    {
      return 0;
    }
  }
};

// Line 5407: range 000000001716072C-000000001716083D
bool __cdecl Player::isChangePlatFormInfo(Player *const this)
{
  PlayerBasicComp *BasicComp; // rax
  uint32_t LastLoginPlatform; // eax
  PlayerBasicComp *v3; // rax
  uint32_t v4; // eax
  char v5; // al
  bool ret; // [rsp+1Fh] [rbp-1h]

  ret = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->platform_type_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->platform_type_ >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->platform_type_);
  }
  if ( TxtConfigMgr::isPsnPlatform(this->platform_type_) )
  {
    BasicComp = Player::getBasicComp(this);
    LastLoginPlatform = PlayerBasicComp::getLastLoginPlatform(BasicComp);
    if ( !TxtConfigMgr::isPsnPlatform(LastLoginPlatform) )
      goto LABEL_9;
  }
  if ( *(_BYTE *)(((unsigned __int64)&this->platform_type_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->platform_type_ >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->platform_type_);
  }
  if ( !TxtConfigMgr::isPsnPlatform(this->platform_type_)
    && (v3 = Player::getBasicComp(this), v4 = PlayerBasicComp::getLastLoginPlatform(v3), TxtConfigMgr::isPsnPlatform(v4)) )
  {
LABEL_9:
    v5 = 1;
  }
  else
  {
    v5 = 0;
  }
  if ( v5 )
    return 1;
  return ret;
};

// Line 5418: range 000000001716083E-000000001716097F
std::string *__cdecl Player::getOnlineId[abi:cxx11](std::string *retstr, Player *const this)
{
  PlayerBasicComp *BasicComp; // rsi
  std::allocator<char> __a; // [rsp+1Fh] [rbp-11h] BYREF

  if ( *(_BYTE *)(((unsigned __int64)&this->platform_type_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->platform_type_ >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->platform_type_);
  }
  if ( TxtConfigMgr::isPsnPlatform(this->platform_type_) )
  {
    BasicComp = Player::getBasicComp(this);
    if ( *(char *)(((unsigned __int64)retstr >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&retstr->_anon_0._M_allocated_capacity + 15) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)retstr + 31) & 7) >= *(_BYTE *)((((unsigned __int64)&retstr->_anon_0._M_allocated_capacity
                                                            + 15) >> 3)
                                                          + 0x7FFF8000) )
    {
      BasicComp = (PlayerBasicComp *)32;
      __asan_report_store_n(retstr, 32LL);
    }
    PlayerBasicComp::getOnlineId[abi:cxx11](retstr, BasicComp);
  }
  else
  {
    std::allocator<char>::allocator(&__a);
    std::string::basic_string<std::allocator<char>>(retstr, byte_25FB4240, &__a);
    std::allocator<char>::~allocator(&__a);
  }
  return retstr;
};

// Line 5428: range 0000000017160980-0000000017160AC1
std::string *__cdecl Player::getPsnId[abi:cxx11](std::string *retstr, Player *const this)
{
  PlayerBasicComp *BasicComp; // rsi
  std::allocator<char> __a; // [rsp+1Fh] [rbp-11h] BYREF

  if ( *(_BYTE *)(((unsigned __int64)&this->platform_type_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->platform_type_ >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->platform_type_);
  }
  if ( TxtConfigMgr::isPsnPlatform(this->platform_type_) )
  {
    BasicComp = Player::getBasicComp(this);
    if ( *(char *)(((unsigned __int64)retstr >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&retstr->_anon_0._M_allocated_capacity + 15) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)retstr + 31) & 7) >= *(_BYTE *)((((unsigned __int64)&retstr->_anon_0._M_allocated_capacity
                                                            + 15) >> 3)
                                                          + 0x7FFF8000) )
    {
      BasicComp = (PlayerBasicComp *)32;
      __asan_report_store_n(retstr, 32LL);
    }
    PlayerBasicComp::getPsnId[abi:cxx11](retstr, BasicComp);
  }
  else
  {
    std::allocator<char>::allocator(&__a);
    std::string::basic_string<std::allocator<char>>(retstr, byte_25FB4240, &__a);
    std::allocator<char>::~allocator(&__a);
  }
  return retstr;
};

// Line 5438: range 0000000017160AC2-0000000017160CBD
Vector3 __cdecl Player::getPosition(Player *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  _DWORD *v3; // r13
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v4; // rax
  unsigned __int64 Position; // rax
  float v6; // xmm1_4
  __int64 v7; // xmm0_8
  __int64 v8; // [rsp+8h] [rbp-B8h]
  Player *thisa; // [rsp+28h] [rbp-98h]
  __int64 v10; // [rsp+34h] [rbp-8Ch]
  float v11; // [rsp+3Ch] [rbp-84h]
  char v12[128]; // [rsp+40h] [rbp-80h] BYREF
  Vector3 result; // 0:xmm0_8.8,8:xmm1_4.4

  thisa = this;
  v1 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(96LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 32 12 8 pos:5439 64 16 15 avatar_ptr:5440";
  *(_QWORD *)(v1 + 16) = Player::getPosition;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -219020288;
  v3[536862722] = -202178560;
  Vector3::Vector3((Vector3 *const)(v1 + 32), 0.0, 0.0, 0.0);
  Player::getCurAvatar((Player *const)(v1 + 64));
  if ( std::operator!=<Avatar>(0LL, (const std::shared_ptr<Avatar> *)(v1 + 64)) )
  {
    v4 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 64));
    Position = (unsigned __int64)Entity::getPosition((const Entity *const)v4);
    if ( (char)(Position & 7) >= *(_BYTE *)((Position >> 3) + 0x7FFF8000)
      && *(_BYTE *)((Position >> 3) + 0x7FFF8000) != 0
      || *(_BYTE *)(((Position + 11) >> 3) + 0x7FFF8000) != 0
      && (char)((Position + 11) & 7) >= *(_BYTE *)(((Position + 11) >> 3) + 0x7FFF8000) )
    {
      Position = __asan_report_load_n(Position, 12LL);
    }
    *(_QWORD *)(v1 + 32) = *(_QWORD *)Position;
    *(_DWORD *)(v1 + 40) = *(_DWORD *)(Position + 8);
  }
  v10 = *(_QWORD *)(v1 + 32);
  v11 = *(float *)(v1 + 40);
  std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v1 + 64));
  v8 = v10;
  v6 = v11;
  if ( v12 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8008) = -168430091;
  }
  v7 = v8;
  result.x = *(float *)&v7;
  result.y = *((float *)&v7 + 1);
  result.z = v6;
  return result;
};

// Line 5451: range 0000000017160CBE-0000000017160D54
std::string *__cdecl Player::getFriendBriefShowOnlineId[abi:cxx11](std::string *retstr, Player *const this)
{
  PlayerBasicComp *BasicComp; // rsi

  BasicComp = Player::getBasicComp(this);
  if ( *(char *)(((unsigned __int64)retstr >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)((((unsigned __int64)&retstr->_anon_0._M_allocated_capacity + 15) >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)retstr + 31) & 7) >= *(_BYTE *)((((unsigned __int64)&retstr->_anon_0._M_allocated_capacity + 15) >> 3)
                                                        + 0x7FFF8000) )
  {
    BasicComp = (PlayerBasicComp *)32;
    __asan_report_store_n(retstr, 32LL);
  }
  PlayerBasicComp::getOnlineId[abi:cxx11](retstr, BasicComp);
  return retstr;
};

// Line 5456: range 0000000017160D56-0000000017160FED
void __cdecl Player::modifyEnterTypeIfDataVersionChanged(
        Player *const this,
        proto::EnterType *enter_type,
        ScenePtr *p_dest_scene_ptr,
        bool is_relogin,
        proto::EnterReason enter_reason)
{
  unsigned __int64 v5; // rbx
  __int64 v6; // rax
  unsigned __int64 v7; // r12
  char v9; // al
  __int64 v10; // rsi
  __int64 v11; // rdx
  common::milog::MiLogStream v16; // [rsp+20h] [rbp-90h] BYREF
  char v17[112]; // [rsp+40h] [rbp-70h] BYREF

  v5 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_0(64LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "1 32 16 18 cur_scene_ptr:5457";
  *(_QWORD *)(v5 + 16) = Player::modifyEnterTypeIfDataVersionChanged;
  v7 = v5 >> 3;
  *(_DWORD *)(v7 + 2147450880) = -235802127;
  *(_DWORD *)(v7 + 2147450884) = -202178560;
  Player::getSceneComp(this);
  PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v5 + 32));
  if ( !std::operator!=<Scene,Scene>((const std::shared_ptr<Scene> *)(v5 + 32), p_dest_scene_ptr) && !is_relogin )
  {
    if ( !Player::getIsDataResVersionChanged(this) )
      goto LABEL_15;
    if ( *(_BYTE *)(((unsigned __int64)enter_type >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)enter_type & 7) + 3) >= *(_BYTE *)(((unsigned __int64)enter_type >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(enter_type);
    }
    if ( *enter_type == ENTER_GOTO && enter_reason == ENTER_REASON_TRANS_POINT )
      v9 = 1;
    else
LABEL_15:
      v9 = 0;
    if ( v9 )
    {
      v10 = ((unsigned __int8)enter_type & 7u) + 3;
      v11 = (*(_BYTE *)(((unsigned __int64)enter_type >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)(((unsigned __int8)enter_type & 7) + 3) >= *(_BYTE *)(((unsigned __int64)enter_type >> 3) + 0x7FFF8000));
      if ( (_BYTE)v11 )
        __asan_report_store4(enter_type, v10, v11);
      *enter_type = ENTER_GOTO_RECREATE;
      common::milog::MiLogStream::create(
        &v16,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/player.cpp",
        "modifyEnterTypeIfDataVersionChanged",
        5467);
      common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(
        &v16,
        (const char (*)[49])"modifyEnterType to ENTER_GOTO_RECREATE finished!");
      common::milog::MiLogStream::~MiLogStream(&v16);
    }
  }
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v5 + 32));
  if ( v17 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 5472: range 0000000017160FEE-00000000171610C4
std::string *__cdecl Player::getOnlineId[abi:cxx11](std::string *retstr, const Player *const this)
{
  std::allocator<char> __a; // [rsp+1Fh] [rbp-11h] BYREF

  if ( *(_BYTE *)(((unsigned __int64)&this->platform_type_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->platform_type_ >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->platform_type_);
  }
  if ( TxtConfigMgr::isPsnPlatform(this->platform_type_) )
  {
    std::string::basic_string(retstr, &this->online_id_);
  }
  else
  {
    std::allocator<char>::allocator(&__a);
    std::string::basic_string<std::allocator<char>>(retstr, byte_25FB4240, &__a);
    std::allocator<char>::~allocator(&__a);
  }
  return retstr;
};

// Line 5482: range 00000000171610C6-000000001716119C
std::string *__cdecl Player::getPsnId[abi:cxx11](std::string *retstr, const Player *const this)
{
  std::allocator<char> __a; // [rsp+1Fh] [rbp-11h] BYREF

  if ( *(_BYTE *)(((unsigned __int64)&this->platform_type_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->platform_type_ >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->platform_type_);
  }
  if ( TxtConfigMgr::isPsnPlatform(this->platform_type_) )
  {
    std::string::basic_string(retstr, &this->psn_id_);
  }
  else
  {
    std::allocator<char>::allocator(&__a);
    std::string::basic_string<std::allocator<char>>(retstr, byte_25FB4240, &__a);
    std::allocator<char>::~allocator(&__a);
  }
  return retstr;
};

// Line 5492: range 000000001716119E-00000000171611D8
bool __cdecl Player::isMinor(const Player *const this)
{
  return (unsigned int)common::tools::TimeUtils::getAgeByTimeStr(&this->birthday_) <= 0x11;
};

// Line 5498: range 00000000171611DA-000000001716124C
void __cdecl Player::onLoginOfflineMsgDone(Player *const this)
{
  PlayerBasicComp *BasicComp; // rax
  PlayerSocialComp *SocialComp; // rax
  PlayerHomeComp *HomeComp; // rax
  PlayerAvatarComp *AvatarComp; // rax
  PlayerAvatarComp *v5; // rax

  BasicComp = Player::getBasicComp(this);
  PlayerBasicComp::checkAndAutoPassNicknameAudit(BasicComp);
  SocialComp = Player::getSocialComp(this);
  PlayerSocialComp::checkAndAutoPassSignatureAudit(SocialComp);
  HomeComp = Player::getHomeComp(this);
  PlayerHomeComp::checkResendAuditAndUpdateTimer(HomeComp);
  AvatarComp = Player::getAvatarComp(this);
  PlayerAvatarComp::checkAndAutoFailAvatarRenameAudit(AvatarComp);
  v5 = Player::getAvatarComp(this);
  PlayerAvatarComp::checkAndAutoResetAllIPBlackListAvatarName(v5);
};

// Line 5507: range 000000001716156C-00000000171627F7
void __cdecl Player::asyncNicknameSignatureAuditRequest(
        Player *const this,
        const std::string *content,
        ContentAuditType audit_type,
        uint32_t auto_pass_time)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  const std::string *v7; // rax
  unsigned int Uid; // eax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  uint32_t v11; // eax
  PlayerBasicComp *BasicComp; // rax
  const std::string *v13; // rax
  PlayerSocialComp *SocialComp; // rax
  unsigned int v15; // eax
  const std::string *v16; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  PlayerSocialComp *v18; // rax
  PlayerBasicComp *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // r14
  common::milog::MiLogStream *v22; // r14
  int v23; // r14d
  const char *v24; // rsi
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rax
  common::milog::MiLogStream *v36; // rax
  common::milog::MiLogStream *v37; // rax
  common::milog::MiLogStream *v38; // rax
  common::milog::MiLogStream *v39; // rax
  common::milog::MiLogStream *v40; // rax
  common::milog::MiLogStream *v41; // rax
  GameserverService *v42; // r14
  bool v43; // r14
  common::milog::MiLogStream *v44; // rax
  common::milog::MiLogStream *v45; // r14
  int v46; // [rsp+0h] [rbp-420h]
  void *auto_pass_timea; // [rsp+8h] [rbp-418h]
  int v48; // [rsp+20h] [rbp-400h]
  int val; // [rsp+24h] [rbp-3FCh] BYREF
  const NicknameSignAuditConfig *audit_config; // [rsp+28h] [rbp-3F8h]
  proto::ContentAuditField *audit_field; // [rsp+30h] [rbp-3F0h]
  proto::ContentAuditData *audit_data; // [rsp+38h] [rbp-3E8h]
  proto::ContentAuditField *source_nickname_audit_field; // [rsp+40h] [rbp-3E0h]
  proto::ContentAuditData *source_nickname_audit_data; // [rsp+48h] [rbp-3D8h]
  proto::ContentAuditField *source_signature_audit_field; // [rsp+50h] [rbp-3D0h]
  proto::ContentAuditData *source_signature_audit_data; // [rsp+58h] [rbp-3C8h]
  proto::ContentAuditField *other_audit_field; // [rsp+60h] [rbp-3C0h]
  proto::ContentAuditData *other_audit_data; // [rsp+68h] [rbp-3B8h]
  proto::ContentAuditAuxiliaryField *uid_auxiliary_field; // [rsp+70h] [rbp-3B0h]
  proto::ContentAuditAuxiliaryField *aid_auxiliary_field; // [rsp+78h] [rbp-3A8h]
  proto::ContentAuditAuxiliaryField *region_auxiliary_field; // [rsp+80h] [rbp-3A0h]
  proto::ContentAuditAuxiliaryField *lang_auxiliary_field; // [rsp+88h] [rbp-398h]
  common::milog::MiLogStream v63; // [rsp+90h] [rbp-390h] BYREF
  char v64[880]; // [rsp+B0h] [rbp-370h] BYREF

  HIDWORD(auto_pass_timea) = audit_type;
  LODWORD(auto_pass_timea) = auto_pass_time;
  v4 = (unsigned __int64)v64;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_4(832LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "10 48 1 22 response_callback:5621 64 4 12 options:5577 80 16 18 request_timer:5508 112 16 15 con"
                        "fig_ptr:5509 144 16 18 to_json_timer:5583 176 32 16 json_string:5581 240 32 12 msg_str:5603 304 "
                        "40 15 status_ret:5584 384 112 16 audit_proto:5517 528 240 17 http_request:5593";
  *(_QWORD *)(v4 + 16) = Player::asyncNicknameSignatureAuditRequest;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234753551;
  v6[536862722] = 61956;
  v6[536862723] = 62194;
  v6[536862724] = 62194;
  v6[536862725] = 62194;
  v6[536862726] = -219021312;
  v6[536862727] = 62194;
  v6[536862728] = -219021312;
  v6[536862729] = 62194;
  v6[536862730] = -234881024;
  v6[536862731] = -218959118;
  v6[536862735] = -219021312;
  v6[536862736] = 62194;
  v6[536862744] = -202116109;
  v6[536862745] = -202116109;
  common::tools::TimeUtils::Timer::Timer((common::tools::TimeUtils::Timer *const)(v4 + 80));
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v4 + 112));
  if ( std::operator==<Config>((const std::shared_ptr<Config> *)(v4 + 112), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v63,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/player/player.cpp",
      "asyncNicknameSignatureAuditRequest",
      5512);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v63, (const char (*)[17])"getConfig error.");
    common::milog::MiLogStream::~MiLogStream(&v63);
    goto LABEL_29;
  }
  audit_config = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 112))->nickname_sign_audit_config_;
  proto::NicknameSignatureAuditData::NicknameSignatureAuditData((proto::NicknameSignatureAuditData *const)(v4 + 384));
  v7 = Player::getAccountUid[abi:cxx11](this);
  proto::NicknameSignatureAuditData::set_aid((proto::NicknameSignatureAuditData *const)(v4 + 384), v7);
  Uid = Player::getUid(this);
  std::to_string((std::string *)(v4 + 240), Uid);
  v9 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 112));
  std::operator+<char>((std::string *)(v4 + 176), &v9->region_name, "_");
  std::operator+<char>((std::string *)&v63, (std::string *)(v4 + 176), (std::string *)(v4 + 240));
  proto::NicknameSignatureAuditData::set_entity_id(
    (proto::NicknameSignatureAuditData *const)(v4 + 384),
    (std::string *)&v63);
  std::string::~string(&v63);
  std::string::~string((void *)(v4 + 176));
  std::string::~string((void *)(v4 + 240));
  proto::NicknameSignatureAuditData::set_lang(
    (proto::NicknameSignatureAuditData *const)(v4 + 384),
    &audit_config->language);
  v10 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 112));
  proto::NicknameSignatureAuditData::set_region((proto::NicknameSignatureAuditData *const)(v4 + 384), &v10->region_name);
  v11 = Player::getUid(this);
  proto::NicknameSignatureAuditData::set_uid((proto::NicknameSignatureAuditData *const)(v4 + 384), v11);
  audit_field = proto::NicknameSignatureAuditData::add_audit_field_list((proto::NicknameSignatureAuditData *const)(v4 + 384));
  audit_data = proto::ContentAuditField::add_segment_list(audit_field);
  proto::ContentAuditData::set_type(audit_data, "text");
  proto::ContentAuditData::set_content(audit_data, content);
  proto::ContentAuditData::set_auto_pass_time(audit_data, (google::protobuf::uint32)auto_pass_timea);
  source_nickname_audit_field = proto::NicknameSignatureAuditData::add_audit_field_list((proto::NicknameSignatureAuditData *const)(v4 + 384));
  proto::ContentAuditField::set_name(source_nickname_audit_field, "source_nickname");
  source_nickname_audit_data = proto::ContentAuditField::add_segment_list(source_nickname_audit_field);
  proto::ContentAuditData::set_type(source_nickname_audit_data, "text");
  BasicComp = Player::getBasicComp(this);
  v13 = PlayerBasicComp::getNickName[abi:cxx11](BasicComp);
  proto::ContentAuditData::set_content(source_nickname_audit_data, v13);
  source_signature_audit_field = proto::NicknameSignatureAuditData::add_audit_field_list((proto::NicknameSignatureAuditData *const)(v4 + 384));
  proto::ContentAuditField::set_name(source_signature_audit_field, "source_signature");
  source_signature_audit_data = proto::ContentAuditField::add_segment_list(source_signature_audit_field);
  proto::ContentAuditData::set_type(source_signature_audit_data, "text");
  SocialComp = Player::getSocialComp(this);
  PlayerSocialComp::getSignature[abi:cxx11]((std::string *)&v63, SocialComp);
  proto::ContentAuditData::set_content(source_signature_audit_data, (std::string *)&v63);
  std::string::~string(&v63);
  other_audit_field = proto::NicknameSignatureAuditData::add_audit_field_list((proto::NicknameSignatureAuditData *const)(v4 + 384));
  other_audit_data = proto::ContentAuditField::add_segment_list(other_audit_field);
  proto::ContentAuditData::set_type(other_audit_data, "text");
  uid_auxiliary_field = proto::NicknameSignatureAuditData::add_aux_field_list((proto::NicknameSignatureAuditData *const)(v4 + 384));
  proto::ContentAuditAuxiliaryField::set_name(uid_auxiliary_field, off_260389E0);
  v15 = Player::getUid(this);
  std::to_string((std::string *)&v63, v15);
  proto::ContentAuditAuxiliaryField::set_value(uid_auxiliary_field, (std::string *)&v63);
  std::string::~string(&v63);
  aid_auxiliary_field = proto::NicknameSignatureAuditData::add_aux_field_list((proto::NicknameSignatureAuditData *const)(v4 + 384));
  proto::ContentAuditAuxiliaryField::set_name(aid_auxiliary_field, off_26038A20);
  v16 = Player::getAccountUid[abi:cxx11](this);
  proto::ContentAuditAuxiliaryField::set_value(aid_auxiliary_field, v16);
  region_auxiliary_field = proto::NicknameSignatureAuditData::add_aux_field_list((proto::NicknameSignatureAuditData *const)(v4 + 384));
  proto::ContentAuditAuxiliaryField::set_name(region_auxiliary_field, "region");
  v17 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 112));
  proto::ContentAuditAuxiliaryField::set_value(region_auxiliary_field, &v17->region_name);
  lang_auxiliary_field = proto::NicknameSignatureAuditData::add_aux_field_list((proto::NicknameSignatureAuditData *const)(v4 + 384));
  proto::ContentAuditAuxiliaryField::set_name(lang_auxiliary_field, "lang");
  proto::ContentAuditAuxiliaryField::set_value(lang_auxiliary_field, &audit_config->language);
  if ( !HIDWORD(auto_pass_timea) )
  {
    proto::NicknameSignatureAuditData::set_queue_key(
      (proto::NicknameSignatureAuditData *const)(v4 + 384),
      "hk4e_nickname");
    proto::ContentAuditField::set_name(audit_field, "nickname");
    proto::ContentAuditField::set_name(other_audit_field, "signature");
    v18 = Player::getSocialComp(this);
    PlayerSocialComp::getAuditSignature[abi:cxx11]((std::string *)&v63, v18);
    proto::ContentAuditData::set_content(other_audit_data, (std::string *)&v63);
    std::string::~string(&v63);
LABEL_11:
    google::protobuf::util::JsonPrintOptions::JsonPrintOptions((google::protobuf::util::JsonPrintOptions *const)(v4 + 64));
    *(_BYTE *)(v4 + 65) = 1;
    *(_BYTE *)(v4 + 67) = 1;
    *(_BYTE *)(v4 + 66) = 1;
    std::string::basic_string(v4 + 176);
    common::tools::TimeUtils::Timer::Timer((common::tools::TimeUtils::Timer *const)(v4 + 144));
    google::protobuf::util::MessageToJsonString(
      (google::protobuf::util::Status *)(v4 + 304),
      (google::protobuf::Message *)(v4 + 384),
      v46,
      auto_pass_timea,
      (int)content,
      (char)this,
      v48,
      (void *)audit_config);
    common::milog::MiLogStream::create(
      &v63,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/player/player.cpp",
      "asyncNicknameSignatureAuditRequest",
      5585);
    v21 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
            &v63,
            (const char (*)[27])"MessageToJsonString cost: ");
    val = common::tools::TimeUtils::Timer::time((const common::tools::TimeUtils::Timer *const)(v4 + 144));
    common::milog::MiLogStream::operator<<<int,(int *)0>(v21, &val);
    common::milog::MiLogStream::~MiLogStream(&v63);
    if ( !google::protobuf::util::Status::ok((const google::protobuf::util::Status *const)(v4 + 304)) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 240),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/player/player.cpp",
        "asyncNicknameSignatureAuditRequest",
        5588);
      v22 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
              (common::milog::MiLogStream *const)(v4 + 240),
              (const char (*)[34])"MessageToJsonString fails, proto:");
      google::protobuf::Message::ShortDebugString[abi:cxx11](
        (std::string *)&v63,
        (google::protobuf::Message *)(v4 + 384));
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v22, (const std::string *)&v63);
      std::string::~string(&v63);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 240));
      v23 = 0;
    }
    else
    {
      v23 = 1;
    }
    google::protobuf::util::Status::~Status((google::protobuf::util::Status *const)(v4 + 304));
    common::tools::TimeUtils::Timer::~Timer((common::tools::TimeUtils::Timer *const)(v4 + 144));
    if ( v23 == 1 )
    {
      common::minet::http_client::HttpRequest::HttpRequest((common::minet::http_client::HttpRequest *const)(v4 + 528));
      std::string::operator=(v4 + 528, audit_config);
      std::string::operator=(v4 + 560, &audit_config->port);
      *(_DWORD *)(v4 + 752) = 1;
      *(_DWORD *)(v4 + 756) = 1;
      if ( *(char *)(((unsigned __int64)&audit_config->is_ssl >> 3) + 0x7FFF8000) < 0 )
        __asan_report_load1(&audit_config->is_ssl);
      *(_BYTE *)(v4 + 760) = audit_config->is_ssl;
      std::string::operator=(v4 + 592, &audit_config->uri);
      std::string::operator=(v4 + 720, v4 + 176);
      std::string::basic_string(v4 + 240);
      if ( common::minet::http_client::HttpUtils::serializeHttpRequest(
             (const common::minet::http_client::HttpRequest *)(v4 + 528),
             (std::string *)(v4 + 240)) )
      {
        common::milog::MiLogStream::create(
          &v63,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/player.cpp",
          "asyncNicknameSignatureAuditRequest",
          5606);
        v24 = "serializeHttpRequest fail";
        common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
          &v63,
          (const char (*)[26])"serializeHttpRequest fail");
      }
      else
      {
        common::milog::MiLogStream::create(
          &v63,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/player/player.cpp",
          "asyncNicknameSignatureAuditRequest",
          5610);
        v25 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                &v63,
                (const char (*)[19])"http_request host:");
        v26 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v25, (const std::string *)(v4 + 528));
        v27 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v26, (const char (*)[7])" port:");
        v28 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v27, (const std::string *)(v4 + 560));
        v29 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v28, (const char (*)[6])" uri:");
        v30 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v29, (const std::string *)(v4 + 592));
        v31 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v30, (const char (*)[9])" method:");
        v32 = common::milog::MiLogStream::operator<<<common::minet::http_client::HttpMethod,(common::minet::http_client::HttpMethod*)0>(
                v31,
                (const common::minet::http_client::HttpMethod *)(v4 + 752));
        v33 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v32, (const char (*)[10])" version:");
        v34 = common::milog::MiLogStream::operator<<<common::minet::http_client::HttpVersion,(common::minet::http_client::HttpVersion*)0>(
                v33,
                (const common::minet::http_client::HttpVersion *)(v4 + 756));
        v35 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v34, (const char (*)[9])" is_ssl:");
        v36 = common::milog::MiLogStream::operator<<(v35, *(_BYTE *)(v4 + 760));
        v37 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v36, (const char (*)[7])" body:");
        v38 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v37, (const std::string *)(v4 + 720));
        v39 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v38, (const char (*)[11])" head_map:");
        v40 = common::milog::MiLogStream::operator<<<std::string,std::string>(
                v39,
                (const std::map<std::string,std::string> *)(v4 + 624));
        v41 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v40, (const char (*)[10])" msg_str:");
        LOBYTE(v24) = v4 - 16;
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v41, (const std::string *)(v4 + 240));
      }
      common::milog::MiLogStream::~MiLogStream(&v63);
      v42 = ServiceBox::findService<GameserverService>();
      std::function<void ()(common::minet::http_client::HttpRetcode,common::minet::http_client::HttpRequest &&,common::minet::http_client::HttpResponse &&)>::function<Player::asyncNicknameSignatureAuditRequest(std::string const&,ContentAuditType,unsigned int)::{lambda(common::minet::http_client::HttpRetcode,common::minet::http_client::HttpRequest &,common::minet::http_client::HttpResponse)#1},void,void>(
        (std::function<void(common::minet::http_client::HttpRetcode,common::minet::http_client::HttpRequest&&,common::minet::http_client::HttpResponse&&)> *const)&v63,
        (Player::asyncNicknameSignatureAuditRequest::<lambda(common::minet::http_client::HttpRetcode, common::minet::http_client::HttpRequest&&, common::minet::http_client::HttpResponse&&)>)v24);
      if ( *(_BYTE *)(((unsigned __int64)&audit_config->timeout >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)audit_config + 100) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&audit_config->timeout >> 3)
                                                                     + 0x7FFF8000) )
      {
        __asan_report_load4(&audit_config->timeout);
      }
      v43 = GameserverService::asyncHttpRequest(
              v42,
              (const common::minet::http_client::HttpRequest *)(v4 + 528),
              audit_config->timeout,
              5u,
              (common::minet::http_client::ResponseCallBackFunc *)&v63) != 0;
      std::function<void ()(common::minet::http_client::HttpRetcode,common::minet::http_client::HttpRequest &&,common::minet::http_client::HttpResponse &&)>::~function((std::function<void(common::minet::http_client::HttpRetcode,common::minet::http_client::HttpRequest&&,common::minet::http_client::HttpResponse&&)> *const)&v63);
      if ( v43 )
      {
        common::milog::MiLogStream::create(
          &v63,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/player/player.cpp",
          "asyncNicknameSignatureAuditRequest",
          5633);
        v44 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
                &v63,
                (const char (*)[34])"asyncHttpRequest fail, http body:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v44, (const std::string *)(v4 + 720));
        common::milog::MiLogStream::~MiLogStream(&v63);
      }
      common::milog::MiLogStream::create(
        &v63,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/player/player.cpp",
        "asyncNicknameSignatureAuditRequest",
        5635);
      v45 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v63, (const char (*)[15])"request cost: ");
      val = common::tools::TimeUtils::Timer::time((const common::tools::TimeUtils::Timer *const)(v4 + 80));
      common::milog::MiLogStream::operator<<<int,(int *)0>(v45, &val);
      common::milog::MiLogStream::~MiLogStream(&v63);
      std::string::~string((void *)(v4 + 240));
      common::minet::http_client::HttpRequest::~HttpRequest((common::minet::http_client::HttpRequest *const)(v4 + 528));
    }
    std::string::~string((void *)(v4 + 176));
    goto LABEL_28;
  }
  if ( HIDWORD(auto_pass_timea) == 1 )
  {
    proto::NicknameSignatureAuditData::set_queue_key(
      (proto::NicknameSignatureAuditData *const)(v4 + 384),
      "hk4e_signature");
    proto::ContentAuditField::set_name(audit_field, "signature");
    proto::ContentAuditField::set_name(other_audit_field, "nickname");
    v19 = Player::getBasicComp(this);
    PlayerBasicComp::getAuditNickname[abi:cxx11]((std::string *)&v63, v19);
    proto::ContentAuditData::set_content(other_audit_data, (std::string *)&v63);
    std::string::~string(&v63);
    goto LABEL_11;
  }
  common::milog::MiLogStream::create(
    &v63,
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/player/player.cpp",
    "asyncNicknameSignatureAuditRequest",
    5573);
  v20 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(&v63, (const char (*)[20])"invalid audit type:");
  *(_DWORD *)(v4 + 64) = HIDWORD(auto_pass_timea);
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v20, (const unsigned int *)(v4 + 64));
  common::milog::MiLogStream::~MiLogStream(&v63);
LABEL_28:
  proto::NicknameSignatureAuditData::~NicknameSignatureAuditData((proto::NicknameSignatureAuditData *const)(v4 + 384));
LABEL_29:
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 112));
  common::tools::TimeUtils::Timer::~Timer((common::tools::TimeUtils::Timer *const)(v4 + 80));
  if ( v64 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF803C) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8060) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8060) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 5621: range 000000001716124E-000000001716156B
void __fastcall Player::asyncNicknameSignatureAuditRequest(std::string const&,ContentAuditType,unsigned int)::{lambda(common::minet::http_client::HttpRetcode,common::minet::http_client::HttpRequest &&,common::minet::http_client::HttpResponse &&)#1}::operator()(
        const Player::asyncNicknameSignatureAuditRequest::<lambda(common::minet::http_client::HttpRetcode, common::minet::http_client::HttpRequest&&, common::minet::http_client::HttpResponse&&)> *const __closure,
        common::minet::http_client::HttpRetcode http_retcode,
        common::minet::http_client::HttpRequest *http_request,
        unsigned __int64 http_response)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // r13
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  unsigned __int64 val; // [rsp+28h] [rbp-88h] BYREF
  common::milog::MiLogStream v24; // [rsp+30h] [rbp-80h] BYREF
  char v25[96]; // [rsp+50h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v25;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 4 17 http_retcode:5621";
  *(_QWORD *)(v4 + 16) = Player::asyncNicknameSignatureAuditRequest(std::string const&,ContentAuditType,unsigned int)::{lambda(common::minet::http_client::HttpRetcode,common::minet::http_client::HttpRequest &&,common::minet::http_client::HttpResponse &&)#1}::operator();
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116348;
  *(_DWORD *)(v4 + 32) = http_retcode;
  if ( *(_DWORD *)(v4 + 32) )
    goto LABEL_8;
  if ( *(_BYTE *)((http_response >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)((http_response >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(http_response);
  if ( *(_DWORD *)http_response != 200 )
  {
LABEL_8:
    common::milog::MiLogStream::create(
      &v24,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/player/player.cpp",
      "operator()",
      5625);
    v7 = common::milog::MiLogStream::operator<<<char [55],(char *[55])0>(
           &v24,
           (const char (*)[55])"asyncNicknameSignatureAuditRequest fail. http_retcode:");
    v8 = common::milog::MiLogStream::operator<<<common::minet::http_client::HttpRetcode,(common::minet::http_client::HttpRetcode*)0>(
           v7,
           (const common::minet::http_client::HttpRetcode *)(v4 + 32));
    v9 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
           v8,
           (const char (*)[23])" \n http_response.body:");
    v10 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
            v9,
            (const std::string *)(http_response + 56));
    v11 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
            v10,
            (const char (*)[24])" \nhttp_response.status:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)http_response);
    common::milog::MiLogStream::~MiLogStream(&v24);
  }
  common::milog::MiLogStream::create(
    &v24,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/player/player.cpp",
    "operator()",
    5628);
  v12 = common::milog::MiLogStream::operator<<<char [68],(char *[68])0>(
          &v24,
          (const char (*)[68])"asyncNicknameSignatureAuditRequest response_callback: http_retcode:");
  v13 = common::milog::MiLogStream::operator<<<common::minet::http_client::HttpRetcode,(common::minet::http_client::HttpRetcode*)0>(
          v12,
          (const common::minet::http_client::HttpRetcode *)(v4 + 32));
  v14 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
          v13,
          (const char (*)[27])" \n http_request.body size:");
  val = std::string::size(&http_request->body);
  v15 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v14, &val);
  v16 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
          v15,
          (const char (*)[24])" \nhttp_response.status:");
  v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, (const unsigned int *)http_response);
  v18 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
          v17,
          (const char (*)[26])" \nhttp_response.head_map:");
  v19 = common::milog::MiLogStream::operator<<<std::string,std::string>(
          v18,
          (const std::map<std::string,std::string> *)(http_response + 8));
  v20 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
          v19,
          (const char (*)[22])" \nhttp_response.body:");
  common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v20, (const std::string *)(http_response + 56));
  common::milog::MiLogStream::~MiLogStream(&v24);
  if ( v25 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 5638: range 00000000171627F8-0000000017162840
PlayerBasicComp *__cdecl Player::getBasicComp(Player *const this)
{
  PlayerBasicComp *v1; // rbx
  std::shared_ptr<PlayerBasicComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerBasicComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerBasicComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerBasicComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerBasicComp>::~shared_ptr(v3);
  return v1;
};

// Line 5639: range 0000000017162842-000000001716288A
PlayerAvatarComp *__cdecl Player::getAvatarComp(Player *const this)
{
  PlayerAvatarComp *v1; // rbx
  std::shared_ptr<PlayerAvatarComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerAvatarComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerAvatarComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerAvatarComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerAvatarComp>::~shared_ptr(v3);
  return v1;
};

// Line 5640: range 000000001716288C-00000000171628D4
PlayerGmComp *__cdecl Player::getGmComp(Player *const this)
{
  PlayerGmComp *v1; // rbx
  std::shared_ptr<PlayerGmComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerGmComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerGmComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerGmComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerGmComp>::~shared_ptr(v3);
  return v1;
};

// Line 5641: range 00000000171628D6-000000001716291E
PlayerQuestComp *__cdecl Player::getQuestComp(Player *const this)
{
  PlayerQuestComp *v1; // rbx
  std::shared_ptr<PlayerQuestComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerQuestComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerQuestComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerQuestComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerQuestComp>::~shared_ptr(v3);
  return v1;
};

// Line 5642: range 0000000017162920-0000000017162968
PlayerTalkComp *__cdecl Player::getTalkComp(Player *const this)
{
  PlayerTalkComp *v1; // rbx
  std::shared_ptr<PlayerTalkComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerTalkComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerTalkComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerTalkComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerTalkComp>::~shared_ptr(v3);
  return v1;
};

// Line 5643: range 000000001716296A-00000000171629B2
PlayerShopComp *__cdecl Player::getShopComp(Player *const this)
{
  PlayerShopComp *v1; // rbx
  std::shared_ptr<PlayerShopComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerShopComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerShopComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerShopComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerShopComp>::~shared_ptr(v3);
  return v1;
};

// Line 5644: range 00000000171629B4-00000000171629FC
PlayerItemComp *__cdecl Player::getItemComp(Player *const this)
{
  PlayerItemComp *v1; // rbx
  std::shared_ptr<PlayerItemComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerItemComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerItemComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerItemComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerItemComp>::~shared_ptr(v3);
  return v1;
};

// Line 5645: range 00000000171629FE-0000000017162A46
PlayerDungeonComp *__cdecl Player::getDungeonComp(Player *const this)
{
  PlayerDungeonComp *v1; // rbx
  std::shared_ptr<PlayerDungeonComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerDungeonComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerDungeonComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerDungeonComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerDungeonComp>::~shared_ptr(v3);
  return v1;
};

// Line 5646: range 0000000017162A48-0000000017162A90
PlayerSceneComp *__cdecl Player::getSceneComp(Player *const this)
{
  PlayerSceneComp *v1; // rbx
  std::shared_ptr<PlayerSceneComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerSceneComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerSceneComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerSceneComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerSceneComp>::~shared_ptr(v3);
  return v1;
};

// Line 5647: range 0000000017162A92-0000000017162ADA
PlayerEventComp *__cdecl Player::getEventComp(Player *const this)
{
  PlayerEventComp *v1; // rbx
  std::shared_ptr<PlayerEventComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerEventComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerEventComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerEventComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerEventComp>::~shared_ptr(v3);
  return v1;
};

// Line 5648: range 0000000017162ADC-0000000017162B24
PlayerBoredComp *__cdecl Player::getBoredComp(Player *const this)
{
  PlayerBoredComp *v1; // rbx
  std::shared_ptr<PlayerBoredComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerBoredComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerBoredComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerBoredComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerBoredComp>::~shared_ptr(v3);
  return v1;
};

// Line 5649: range 0000000017162B26-0000000017162B6E
PlayerMpComp *__cdecl Player::getMpComp(Player *const this)
{
  PlayerMpComp *v1; // rbx
  std::shared_ptr<PlayerMpComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerMpComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerMpComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerMpComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerMpComp>::~shared_ptr(v3);
  return v1;
};

// Line 5650: range 0000000017162B70-0000000017162BB8
PlayerCookComp *__cdecl Player::getCookComp(Player *const this)
{
  PlayerCookComp *v1; // rbx
  std::shared_ptr<PlayerCookComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerCookComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerCookComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerCookComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerCookComp>::~shared_ptr(v3);
  return v1;
};

// Line 5651: range 0000000017162BBA-0000000017162C02
PlayerMailComp *__cdecl Player::getMailComp(Player *const this)
{
  PlayerMailComp *v1; // rbx
  std::shared_ptr<PlayerMailComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerMailComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerMailComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerMailComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerMailComp>::~shared_ptr(v3);
  return v1;
};

// Line 5652: range 0000000017162C04-0000000017162C4C
PlayerLoginComp *__cdecl Player::getLoginComp(Player *const this)
{
  PlayerLoginComp *v1; // rbx
  std::shared_ptr<PlayerLoginComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerLoginComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerLoginComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerLoginComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerLoginComp>::~shared_ptr(v3);
  return v1;
};

// Line 5653: range 0000000017162C4E-0000000017162C96
PlayerOfflineMsgComp *__cdecl Player::getOfflineMsgComp(Player *const this)
{
  PlayerOfflineMsgComp *v1; // rbx
  std::shared_ptr<PlayerOfflineMsgComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerOfflineMsgComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerOfflineMsgComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerOfflineMsgComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerOfflineMsgComp>::~shared_ptr(v3);
  return v1;
};

// Line 5654: range 0000000017162C98-0000000017162CE0
PlayerDailyTaskComp *__cdecl Player::getDailyTaskComp(Player *const this)
{
  PlayerDailyTaskComp *v1; // rbx
  std::shared_ptr<PlayerDailyTaskComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerDailyTaskComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerDailyTaskComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerDailyTaskComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerDailyTaskComp>::~shared_ptr(v3);
  return v1;
};

// Line 5655: range 0000000017162CE2-0000000017162D2A
PlayerRandTaskComp *__cdecl Player::getRandTaskComp(Player *const this)
{
  PlayerRandTaskComp *v1; // rbx
  std::shared_ptr<PlayerRandTaskComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerRandTaskComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerRandTaskComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerRandTaskComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerRandTaskComp>::~shared_ptr(v3);
  return v1;
};

// Line 5656: range 0000000017162D2C-0000000017162D74
PlayerGachaComp *__cdecl Player::getGachaComp(Player *const this)
{
  PlayerGachaComp *v1; // rbx
  std::shared_ptr<PlayerGachaComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerGachaComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerGachaComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerGachaComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerGachaComp>::~shared_ptr(v3);
  return v1;
};

// Line 5657: range 0000000017162D76-0000000017162DBE
PlayerGivingComp *__cdecl Player::getGivingComp(Player *const this)
{
  PlayerGivingComp *v1; // rbx
  std::shared_ptr<PlayerGivingComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerGivingComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerGivingComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerGivingComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerGivingComp>::~shared_ptr(v3);
  return v1;
};

// Line 5658: range 0000000017162DC0-0000000017162E08
PlayerForgeComp *__cdecl Player::getForgeComp(Player *const this)
{
  PlayerForgeComp *v1; // rbx
  std::shared_ptr<PlayerForgeComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerForgeComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerForgeComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerForgeComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerForgeComp>::~shared_ptr(v3);
  return v1;
};

// Line 5659: range 0000000017162E0A-0000000017162E52
PlayerInvestigationComp *__cdecl Player::getInvestigationComp(Player *const this)
{
  PlayerInvestigationComp *v1; // rbx
  std::shared_ptr<PlayerInvestigationComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerInvestigationComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerInvestigationComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerInvestigationComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerInvestigationComp>::~shared_ptr(v3);
  return v1;
};

// Line 5660: range 0000000017162E54-0000000017162E9C
PlayerActivityComp *__cdecl Player::getActivityComp(Player *const this)
{
  PlayerActivityComp *v1; // rbx
  std::shared_ptr<PlayerActivityComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerActivityComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerActivityComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerActivityComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerActivityComp>::~shared_ptr(v3);
  return v1;
};

// Line 5661: range 0000000017162E9E-0000000017162EE6
PlayerWatcherComp *__cdecl Player::getWatcherComp(Player *const this)
{
  PlayerWatcherComp *v1; // rbx
  std::shared_ptr<PlayerWatcherComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerWatcherComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerWatcherComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerWatcherComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerWatcherComp>::~shared_ptr(v3);
  return v1;
};

// Line 5662: range 0000000017162EE8-0000000017162F30
PlayerSocialComp *__cdecl Player::getSocialComp(Player *const this)
{
  PlayerSocialComp *v1; // rbx
  std::shared_ptr<PlayerSocialComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerSocialComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerSocialComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerSocialComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerSocialComp>::~shared_ptr(v3);
  return v1;
};

// Line 5663: range 0000000017162F32-0000000017162F7A
PlayerTowerComp *__cdecl Player::getTowerComp(Player *const this)
{
  PlayerTowerComp *v1; // rbx
  std::shared_ptr<PlayerTowerComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerTowerComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerTowerComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerTowerComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerTowerComp>::~shared_ptr(v3);
  return v1;
};

// Line 5664: range 0000000017162F7C-0000000017162FC4
PlayerBlossomComp *__cdecl Player::getBlossomComp(Player *const this)
{
  PlayerBlossomComp *v1; // rbx
  std::shared_ptr<PlayerBlossomComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerBlossomComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerBlossomComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerBlossomComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerBlossomComp>::~shared_ptr(v3);
  return v1;
};

// Line 5665: range 0000000017162FC6-000000001716300E
PlayerSignInComp *__cdecl Player::getSignInComp(Player *const this)
{
  PlayerSignInComp *v1; // rbx
  std::shared_ptr<PlayerSignInComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerSignInComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerSignInComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerSignInComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerSignInComp>::~shared_ptr(v3);
  return v1;
};

// Line 5666: range 0000000017163010-0000000017163058
PlayerRechargeComp *__cdecl Player::getRechargeComp(Player *const this)
{
  PlayerRechargeComp *v1; // rbx
  std::shared_ptr<PlayerRechargeComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerRechargeComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerRechargeComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerRechargeComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerRechargeComp>::~shared_ptr(v3);
  return v1;
};

// Line 5667: range 000000001716305A-00000000171630A2
PlayerBattlePassComp *__cdecl Player::getBattlePassComp(Player *const this)
{
  PlayerBattlePassComp *v1; // rbx
  std::shared_ptr<PlayerBattlePassComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerBattlePassComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerBattlePassComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerBattlePassComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerBattlePassComp>::~shared_ptr(v3);
  return v1;
};

// Line 5668: range 00000000171630A4-00000000171630EC
PlayerMatchComp *__cdecl Player::getMatchComp(Player *const this)
{
  PlayerMatchComp *v1; // rbx
  std::shared_ptr<PlayerMatchComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerMatchComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerMatchComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerMatchComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerMatchComp>::~shared_ptr(v3);
  return v1;
};

// Line 5669: range 00000000171630EE-0000000017163136
PlayerTrialAvatarComp *__cdecl Player::getTrialAvatarComp(Player *const this)
{
  PlayerTrialAvatarComp *v1; // rbx
  std::shared_ptr<PlayerTrialAvatarComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerTrialAvatarComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerTrialAvatarComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerTrialAvatarComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerTrialAvatarComp>::~shared_ptr(v3);
  return v1;
};

// Line 5670: range 0000000017163138-0000000017163180
PlayerMpPlayComp *__cdecl Player::getMpPlayComp(Player *const this)
{
  PlayerMpPlayComp *v1; // rbx
  std::shared_ptr<PlayerMpPlayComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerMpPlayComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerMpPlayComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerMpPlayComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerMpPlayComp>::~shared_ptr(v3);
  return v1;
};

// Line 5671: range 0000000017163182-00000000171631CA
PlayerAchievementComp *__cdecl Player::getAchievementComp(Player *const this)
{
  PlayerAchievementComp *v1; // rbx
  std::shared_ptr<PlayerAchievementComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerAchievementComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerAchievementComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerAchievementComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerAchievementComp>::~shared_ptr(v3);
  return v1;
};

// Line 5672: range 00000000171631CC-0000000017163214
PlayerCodexComp *__cdecl Player::getCodexComp(Player *const this)
{
  PlayerCodexComp *v1; // rbx
  std::shared_ptr<PlayerCodexComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerCodexComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerCodexComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerCodexComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerCodexComp>::~shared_ptr(v3);
  return v1;
};

// Line 5673: range 0000000017163216-000000001716325E
PlayerPersonalLineComp *__cdecl Player::getPersonalLineComp(Player *const this)
{
  PlayerPersonalLineComp *v1; // rbx
  std::shared_ptr<PlayerPersonalLineComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerPersonalLineComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerPersonalLineComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerPersonalLineComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerPersonalLineComp>::~shared_ptr(v3);
  return v1;
};

// Line 5674: range 0000000017163260-00000000171632A8
PlayerHuntingComp *__cdecl Player::getHuntingComp(Player *const this)
{
  PlayerHuntingComp *v1; // rbx
  std::shared_ptr<PlayerHuntingComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerHuntingComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerHuntingComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerHuntingComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerHuntingComp>::~shared_ptr(v3);
  return v1;
};

// Line 5675: range 00000000171632AA-00000000171632F2
PlayerAbilityGroupComp *__cdecl Player::getAbilityGroupComp(Player *const this)
{
  PlayerAbilityGroupComp *v1; // rbx
  std::shared_ptr<PlayerAbilityGroupComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerAbilityGroupComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerAbilityGroupComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerAbilityGroupComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerAbilityGroupComp>::~shared_ptr(v3);
  return v1;
};

// Line 5676: range 00000000171632F4-000000001716333C
PlayerReputationComp *__cdecl Player::getReputationComp(Player *const this)
{
  PlayerReputationComp *v1; // rbx
  std::shared_ptr<PlayerReputationComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerReputationComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerReputationComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerReputationComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerReputationComp>::~shared_ptr(v3);
  return v1;
};

// Line 5677: range 000000001716333E-0000000017163386
PlayerWidgetComp *__cdecl Player::getWidgetComp(Player *const this)
{
  PlayerWidgetComp *v1; // rbx
  std::shared_ptr<PlayerWidgetComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerWidgetComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerWidgetComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerWidgetComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerWidgetComp>::~shared_ptr(v3);
  return v1;
};

// Line 5678: range 0000000017163388-00000000171633D0
PlayerCoopComp *__cdecl Player::getCoopComp(Player *const this)
{
  PlayerCoopComp *v1; // rbx
  std::shared_ptr<PlayerCoopComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerCoopComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerCoopComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerCoopComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerCoopComp>::~shared_ptr(v3);
  return v1;
};

// Line 5679: range 00000000171633D2-000000001716341A
PlayerScenePlayComp *__cdecl Player::getScenePlayComp(Player *const this)
{
  PlayerScenePlayComp *v1; // rbx
  std::shared_ptr<PlayerScenePlayComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerScenePlayComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerScenePlayComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerScenePlayComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerScenePlayComp>::~shared_ptr(v3);
  return v1;
};

// Line 5680: range 000000001716341C-0000000017163464
PlayerCombineComp *__cdecl Player::getCombineComp(Player *const this)
{
  PlayerCombineComp *v1; // rbx
  std::shared_ptr<PlayerCombineComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerCombineComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerCombineComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerCombineComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerCombineComp>::~shared_ptr(v3);
  return v1;
};

// Line 5681: range 0000000017163466-00000000171634AE
PlayerOfferingComp *__cdecl Player::getOfferingComp(Player *const this)
{
  PlayerOfferingComp *v1; // rbx
  std::shared_ptr<PlayerOfferingComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerOfferingComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerOfferingComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerOfferingComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerOfferingComp>::~shared_ptr(v3);
  return v1;
};

// Line 5682: range 00000000171634B0-00000000171634F8
PlayerReunionComp *__cdecl Player::getReunionComp(Player *const this)
{
  PlayerReunionComp *v1; // rbx
  std::shared_ptr<PlayerReunionComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerReunionComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerReunionComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerReunionComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerReunionComp>::~shared_ptr(v3);
  return v1;
};

// Line 5683: range 00000000171634FA-0000000017163542
PlayerRoutineComp *__cdecl Player::getRoutineComp(Player *const this)
{
  PlayerRoutineComp *v1; // rbx
  std::shared_ptr<PlayerRoutineComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerRoutineComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerRoutineComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerRoutineComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerRoutineComp>::~shared_ptr(v3);
  return v1;
};

// Line 5684: range 0000000017163544-000000001716358C
PlayerMiracleRingComp *__cdecl Player::getMiracleRingComp(Player *const this)
{
  PlayerMiracleRingComp *v1; // rbx
  std::shared_ptr<PlayerMiracleRingComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerMiracleRingComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerMiracleRingComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerMiracleRingComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerMiracleRingComp>::~shared_ptr(v3);
  return v1;
};

// Line 5685: range 000000001716358E-00000000171635D6
PlayerMechanicusComp *__cdecl Player::getMechanicusComp(Player *const this)
{
  PlayerMechanicusComp *v1; // rbx
  std::shared_ptr<PlayerMechanicusComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerMechanicusComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerMechanicusComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerMechanicusComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerMechanicusComp>::~shared_ptr(v3);
  return v1;
};

// Line 5686: range 00000000171635D8-0000000017163620
PlayerOpActivityComp *__cdecl Player::getOpActivityComp(Player *const this)
{
  PlayerOpActivityComp *v1; // rbx
  std::shared_ptr<PlayerOpActivityComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerOpActivityComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerOpActivityComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerOpActivityComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerOpActivityComp>::~shared_ptr(v3);
  return v1;
};

// Line 5687: range 0000000017163622-000000001716366A
PlayerDraftComp *__cdecl Player::getDraftComp(Player *const this)
{
  PlayerDraftComp *v1; // rbx
  std::shared_ptr<PlayerDraftComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerDraftComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerDraftComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerDraftComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerDraftComp>::~shared_ptr(v3);
  return v1;
};

// Line 5688: range 000000001716366C-00000000171636B4
PlayerGalleryComp *__cdecl Player::getGalleryComp(Player *const this)
{
  PlayerGalleryComp *v1; // rbx
  std::shared_ptr<PlayerGalleryComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerGalleryComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerGalleryComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerGalleryComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerGalleryComp>::~shared_ptr(v3);
  return v1;
};

// Line 5689: range 00000000171636B6-00000000171636FE
PlayerRegionSearchComp *__cdecl Player::getRegionSearchComp(Player *const this)
{
  PlayerRegionSearchComp *v1; // rbx
  std::shared_ptr<PlayerRegionSearchComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerRegionSearchComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerRegionSearchComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerRegionSearchComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerRegionSearchComp>::~shared_ptr(v3);
  return v1;
};

// Line 5690: range 0000000017163700-0000000017163748
PlayerHomeComp *__cdecl Player::getHomeComp(Player *const this)
{
  PlayerHomeComp *v1; // rbx
  std::shared_ptr<PlayerHomeComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerHomeComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerHomeComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerHomeComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerHomeComp>::~shared_ptr(v3);
  return v1;
};

// Line 5691: range 000000001716374A-0000000017163792
PlayerOfflineOpComp *__cdecl Player::getOfflineOpComp(Player *const this)
{
  PlayerOfflineOpComp *v1; // rbx
  std::shared_ptr<PlayerOfflineOpComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerOfflineOpComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerOfflineOpComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerOfflineOpComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerOfflineOpComp>::~shared_ptr(v3);
  return v1;
};

// Line 5692: range 0000000017163794-00000000171637DC
PlayerH5ActivityComp *__cdecl Player::getH5ActivityComp(Player *const this)
{
  PlayerH5ActivityComp *v1; // rbx
  std::shared_ptr<PlayerH5ActivityComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerH5ActivityComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerH5ActivityComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerH5ActivityComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerH5ActivityComp>::~shared_ptr(v3);
  return v1;
};

// Line 5693: range 00000000171637DE-0000000017163826
PlayerExhibitionComp *__cdecl Player::getExhibitionComp(Player *const this)
{
  PlayerExhibitionComp *v1; // rbx
  std::shared_ptr<PlayerExhibitionComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerExhibitionComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerExhibitionComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerExhibitionComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerExhibitionComp>::~shared_ptr(v3);
  return v1;
};

// Line 5694: range 0000000017163828-0000000017163870
PlayerVehicleComp *__cdecl Player::getVehicleComp(Player *const this)
{
  PlayerVehicleComp *v1; // rbx
  std::shared_ptr<PlayerVehicleComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerVehicleComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerVehicleComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerVehicleComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerVehicleComp>::~shared_ptr(v3);
  return v1;
};

// Line 5695: range 0000000017163872-00000000171638BA
PlayerLiveComp *__cdecl Player::getLiveComp(Player *const this)
{
  PlayerLiveComp *v1; // rbx
  std::shared_ptr<PlayerLiveComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerLiveComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerLiveComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerLiveComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerLiveComp>::~shared_ptr(v3);
  return v1;
};

// Line 5696: range 00000000171638BC-0000000017163904
PlayerGroupLinkComp *__cdecl Player::getGroupLinkComp(Player *const this)
{
  PlayerGroupLinkComp *v1; // rbx
  std::shared_ptr<PlayerGroupLinkComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerGroupLinkComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerGroupLinkComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerGroupLinkComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerGroupLinkComp>::~shared_ptr(v3);
  return v1;
};

// Line 5697: range 0000000017163906-000000001716394E
PlayerFishingComp *__cdecl Player::getFishingComp(Player *const this)
{
  PlayerFishingComp *v1; // rbx
  std::shared_ptr<PlayerFishingComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerFishingComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerFishingComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerFishingComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerFishingComp>::~shared_ptr(v3);
  return v1;
};

// Line 5698: range 0000000017163950-0000000017163998
PlayerFireworksComp *__cdecl Player::getFireworksComp(Player *const this)
{
  PlayerFireworksComp *v1; // rbx
  std::shared_ptr<PlayerFireworksComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerFireworksComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerFireworksComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerFireworksComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerFireworksComp>::~shared_ptr(v3);
  return v1;
};

// Line 5699: range 000000001716399A-00000000171639E2
PlayerCityComp *__cdecl Player::getCityComp(Player *const this)
{
  PlayerCityComp *v1; // rbx
  std::shared_ptr<PlayerCityComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerCityComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerCityComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerCityComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerCityComp>::~shared_ptr(v3);
  return v1;
};

// Line 5700: range 00000000171639E4-0000000017163A2C
PlayerCustomDungeonComp *__cdecl Player::getCustomDungeonComp(Player *const this)
{
  PlayerCustomDungeonComp *v1; // rbx
  std::shared_ptr<PlayerCustomDungeonComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerCustomDungeonComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerCustomDungeonComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerCustomDungeonComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerCustomDungeonComp>::~shared_ptr(v3);
  return v1;
};

// Line 5701: range 0000000017163A2E-0000000017163A76
PlayerUgcComp *__cdecl Player::getUgcComp(Player *const this)
{
  PlayerUgcComp *v1; // rbx
  std::shared_ptr<PlayerUgcComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerUgcComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerUgcComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerUgcComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerUgcComp>::~shared_ptr(v3);
  return v1;
};

// Line 5702: range 0000000017163A78-0000000017163AC0
PlayerRegionalPlayComp *__cdecl Player::getRegionalPlayComp(Player *const this)
{
  PlayerRegionalPlayComp *v1; // rbx
  std::shared_ptr<PlayerRegionalPlayComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerRegionalPlayComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerRegionalPlayComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerRegionalPlayComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerRegionalPlayComp>::~shared_ptr(v3);
  return v1;
};

// Line 5703: range 0000000017163AC2-0000000017163B0A
PlayerAranaraCollectionComp *__cdecl Player::getAranaraCollectionComp(Player *const this)
{
  PlayerAranaraCollectionComp *v1; // rbx
  std::shared_ptr<PlayerAranaraCollectionComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerAranaraCollectionComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerAranaraCollectionComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerAranaraCollectionComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerAranaraCollectionComp>::~shared_ptr(v3);
  return v1;
};

// Line 5704: range 0000000017163B0C-0000000017163B54
PlayerShareCDComp *__cdecl Player::getShareCDComp(Player *const this)
{
  PlayerShareCDComp *v1; // rbx
  std::shared_ptr<PlayerShareCDComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerShareCDComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerShareCDComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerShareCDComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerShareCDComp>::~shared_ptr(v3);
  return v1;
};

// Line 5705: range 0000000017163B56-0000000017163B9E
PlayerPolygonComp *__cdecl Player::getPolygonComp(Player *const this)
{
  PlayerPolygonComp *v1; // rbx
  std::shared_ptr<PlayerPolygonComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerPolygonComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerPolygonComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerPolygonComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerPolygonComp>::~shared_ptr(v3);
  return v1;
};

// Line 5706: range 0000000017163BA0-0000000017163BE8
PlayerGCGComp *__cdecl Player::getGCGComp(Player *const this)
{
  PlayerGCGComp *v1; // rbx
  std::shared_ptr<PlayerGCGComp> v3[2]; // [rsp+10h] [rbp-20h] BYREF

  EcsBase<Player,PlayerCompBase,71u>::findComp<PlayerGCGComp>((const EcsBase<Player,PlayerCompBase,71> *const)v3);
  v1 = std::__shared_ptr_access<PlayerGCGComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<PlayerGCGComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)v3);
  std::shared_ptr<PlayerGCGComp>::~shared_ptr(v3);
  return v1;
};
