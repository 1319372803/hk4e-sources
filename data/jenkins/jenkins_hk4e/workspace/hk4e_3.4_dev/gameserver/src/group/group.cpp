// File: /data/jenkins/jenkins_hk4e/workspace/hk4e_3.4_dev/gameserver/src/group/group.cpp

// Line 40: range 0000000015FAC8B8-0000000015FAC968
int32_t __cdecl Trigger::fromBin(Trigger *const this, const proto::GroupTriggerBin *bin)
{
  uint32_t v2; // ecx
  uint32_t v3; // edx

  v2 = proto::GroupTriggerBin::trigger_count(bin);
  if ( *(_BYTE *)(((unsigned __int64)&this->trigger_count >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->trigger_count >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->trigger_count);
  }
  this->trigger_count = v2;
  v3 = proto::GroupTriggerBin::config_id(bin);
  if ( *(_BYTE *)(((unsigned __int64)&this->config_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->config_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->config_id);
  }
  this->config_id = v3;
  return 0;
};

// Line 47: range 0000000015FAC96A-0000000015FACA18
int32_t __cdecl Trigger::toBin(const Trigger *const this, proto::GroupTriggerBin *bin)
{
  if ( *(_BYTE *)(((unsigned __int64)&this->trigger_count >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->trigger_count >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4();
  }
  proto::GroupTriggerBin::set_trigger_count(bin, this->trigger_count);
  if ( *(_BYTE *)(((unsigned __int64)&this->config_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->config_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4();
  }
  proto::GroupTriggerBin::set_config_id(bin, this->config_id);
  return 0;
};

// Line 56: range 0000000015FACA1A-0000000015FACDE5
std::string *__cdecl Group::getDesc[abi:cxx11](std::string *retstr, const Group *const this)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v5; // rcx
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v6; // rcx
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v7; // r14
  unsigned int OwnerUid; // eax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v9; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v10; // rcx
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v11; // rax
  std::unordered_map<std::string,int>::const_iterator __for_begin; // [rsp+10h] [rbp-A0h] BYREF
  std::unordered_map<std::string,int>::const_iterator __for_end; // [rsp+18h] [rbp-98h] BYREF
  const std::unordered_map<std::string,int> *__for_range; // [rsp+20h] [rbp-90h]
  const std::pair<const std::string,int> *v16; // [rsp+28h] [rbp-88h]
  std::tuple_element<0,const std::pair<const std::string,int> >::type *k; // [rsp+30h] [rbp-80h]
  std::tuple_element<1,const std::pair<const std::string,int> >::type *v; // [rsp+38h] [rbp-78h]
  char v19[112]; // [rsp+40h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 7 ostr:57";
  *(_QWORD *)(v2 + 16) = Group::getDesc[abi:cxx11];
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v2 + 32));
  v5 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
         (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v2 + 32),
         "[group_id:");
  if ( *(_BYTE *)(((unsigned __int64)&this->group_id_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->group_id_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4();
  }
  common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v5, this->group_id_);
  v6 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
         (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v2 + 32),
         ", suite_idx:");
  if ( *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4();
  }
  common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v6, this->suite_index_);
  v7 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
         (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v2 + 32),
         ", owner_uid:");
  OwnerUid = Group::getOwnerUid(this);
  common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v7, OwnerUid);
  common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
    (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v2 + 32),
    ", variable_map:{");
  __for_range = &this->variable_map_;
  __for_begin._M_cur = std::unordered_map<std::string,int>::begin(&this->variable_map_)._M_cur;
  __for_end._M_cur = std::unordered_map<std::string,int>::end(&this->variable_map_)._M_cur;
  while ( std::__detail::operator!=<std::pair<std::string const,int>,true>(&__for_begin, &__for_end) )
  {
    v16 = std::__detail::_Node_const_iterator<std::pair<std::string const,int>,false,true>::operator*(&__for_begin);
    k = std::get<0ul,std::string const,int>(v16);
    v = (std::tuple_element<1,const std::pair<const std::string,int> >::type *)std::get<1ul,std::string const,int>(v16);
    v9 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
           (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v2 + 32),
           k);
    v10 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v9, ":");
    if ( *(_BYTE *)(((unsigned __int64)v >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4();
    }
    v11 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v10, *v);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v11, ",");
    std::__detail::_Node_const_iterator<std::pair<std::string const,int>,false,true>::operator++(&__for_begin);
  }
  common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
    (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v2 + 32),
    "}]");
  if ( *(char *)(((unsigned __int64)retstr >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)((((unsigned __int64)&retstr->_anon_0._M_allocated_capacity + 15) >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)retstr + 31) & 7) >= *(_BYTE *)((((unsigned __int64)&retstr->_anon_0._M_allocated_capacity + 15) >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_store_n(retstr, 32LL);
  }
  common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
    retstr,
    (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v2 + 32));
  common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v2 + 32));
  if ( v19 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return retstr;
};

// Line 74: range 0000000015FACDE6-0000000015FAD01B
std::shared_ptr<Event> *__fastcall EventUtil::createEvent(std::shared_ptr<Event> *event_type, int a2)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  common::milog::MiLogStream *v5; // rax
  data::EventType v6; // r14d
  unsigned __int64 v7; // rax
  common::milog::MiLogStream v9; // [rsp+10h] [rbp-B0h] BYREF
  char v10[144]; // [rsp+30h] [rbp-90h] BYREF

  v2 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 4 13 event_type:73 64 16 10 evt_ptr:75";
  *(_QWORD *)(v2 + 16) = EventUtil::createEvent;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -202178560;
  *(_DWORD *)(v2 + 48) = a2;
  common::tools::perf::make_shared<Event>();
  if ( std::operator==<Event>((const std::shared_ptr<Event> *)(v2 + 64), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v9,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "createEvent",
      78);
    v5 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
           &v9,
           (const char (*)[30])"evt_ptr is null, event_type: ");
    common::milog::MiLogStream::operator<<<data::EventType,(data::EventType*)0>(v5, (const data::EventType *)(v2 + 48));
    common::milog::MiLogStream::~MiLogStream(&v9);
    std::shared_ptr<Event>::shared_ptr(event_type, 0LL);
  }
  else
  {
    v6 = *(_DWORD *)(v2 + 48);
    v7 = (unsigned __int64)std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
    if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)((v7 >> 3) + 0x7FFF8000) <= 3 )
      v7 = __asan_report_store4(v7);
    *(_DWORD *)v7 = v6;
    std::shared_ptr<Event>::shared_ptr(event_type, (std::shared_ptr<Event> *)(v2 + 64));
  }
  std::shared_ptr<Event>::~shared_ptr((std::shared_ptr<Event> *const)(v2 + 64));
  if ( v10 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return event_type;
};

// Line 86: range 0000000015FAD01C-0000000015FAD096
common::milog::MiLogStream *__cdecl operator<<(common::milog::MiLogStream *stream, const Group *group)
{
  common::milog::MiLogStream *v2; // rbx
  common::milog::MiLogStream *v3; // rax
  common::milog::MiLogStream *v4; // rbx
  bool isActive; // al
  unsigned int val[5]; // [rsp+1Ch] [rbp-14h] BYREF

  v2 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(stream, (const char (*)[11])"[group_id:");
  val[0] = Group::getGroupId(group);
  v3 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v2, val);
  v4 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v3, (const char (*)[12])"] isActive:");
  isActive = Group::isActive(group);
  common::milog::MiLogStream::operator<<(v4, isActive);
  return stream;
};

// Line 91: range 0000000015FAD098-0000000015FADCCA
void __cdecl Group::Group(Group *const this, uint32_t group_id)
{
  int (**v2)(...); // rdx
  uint32_t Now; // esi

  std::enable_shared_from_this<Group>::enable_shared_from_this(&this->std::enable_shared_from_this<Group>);
  common::milog::DescribalBase::DescribalBase(this);
  v2 = (int (**)(...))(&`vtable for'Group + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this);
  this->_vptr_DescribalBase = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->group_id_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->group_id_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->group_id_);
  }
  this->group_id_ = group_id;
  if ( *(_BYTE *)(((unsigned __int64)&this->is_processing_events >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)this + 28) & 7) >= *(_BYTE *)(((unsigned __int64)&this->is_processing_events >> 3) + 0x7FFF8000) )
  {
    __asan_report_store1(&this->is_processing_events);
  }
  this->is_processing_events = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->is_reg_logic_func_ >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)this + 29) & 7) >= *(_BYTE *)(((unsigned __int64)&this->is_reg_logic_func_ >> 3) + 0x7FFF8000) )
  {
    __asan_report_store1(&this->is_reg_logic_func_);
  }
  this->is_reg_logic_func_ = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->is_started_ >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)this + 30) & 7) >= *(_BYTE *)(((unsigned __int64)&this->is_started_ >> 3) + 0x7FFF8000) )
  {
    __asan_report_store1(&this->is_started_);
  }
  this->is_started_ = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->suite_index_);
  }
  this->suite_index_ = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->target_suite_index_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->target_suite_index_ >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_store4(&this->target_suite_index_);
  }
  this->target_suite_index_ = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->group_type_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->group_type_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->group_type_);
  }
  this->group_type_ = NORMAL_3;
  if ( *(_BYTE *)(((unsigned __int64)&this->pattern_id_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->pattern_id_ >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->pattern_id_);
  }
  this->pattern_id_ = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->parent_quest_id_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->parent_quest_id_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->parent_quest_id_);
  }
  this->parent_quest_id_ = 0;
  std::weak_ptr<Scene>::weak_ptr(&this->scene_wtr_);
  if ( *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->scene_id_);
  }
  this->scene_id_ = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->dungeon_id_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->dungeon_id_ >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->dungeon_id_);
  }
  this->dungeon_id_ = 0;
  std::map<unsigned int,std::shared_ptr<Entity>>::map(&this->entity_map_);
  std::map<unsigned int,int>::map(&this->viewing_uid_map_);
  std::map<proto::ProtEntityType,std::set<unsigned int>>::map(&this->deleted_entity_record_map_);
  if ( *(_BYTE *)(((unsigned __int64)&this->last_refresh_time_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->last_refresh_time_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->last_refresh_time_);
  }
  this->last_refresh_time_ = 0;
  std::unordered_map<std::string,int>::unordered_map(&this->variable_map_);
  std::unordered_map<std::string,std::shared_ptr<Trigger>>::unordered_map(&this->trigger_map_);
  std::unordered_map<data::EventType,std::set<std::string>>::unordered_map(&this->event_map_);
  std::map<std::string,float>::map(&this->sgv_map_);
  std::map<unsigned int,proto::GroupMonsterBin>::map(&this->monster_bin_map_);
  std::map<unsigned int,proto::GroupGadgetBin>::map(&this->gadget_bin_map_);
  std::map<unsigned int,proto::BossDieInfoBin>::map(&this->boss_die_info_map_);
  std::unordered_set<unsigned int>::unordered_set(&this->show_cutscene_chest_set_);
  if ( *(_BYTE *)(((unsigned __int64)&this->revise_level_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->revise_level_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->revise_level_);
  }
  this->revise_level_ = 0;
  Vector3::Vector3(&this->position_, 0.0, 0.0, 0.0);
  Vector3::Vector3(&this->position_revise_, 0.0, 0.0, 0.0);
  std::unordered_map<unsigned int,unsigned int>::unordered_map(&this->config_id_2_eid_map_);
  std::unordered_map<std::string,std::shared_ptr<SceneTimer>>::unordered_map(&this->script_timer_map_);
  std::unordered_map<unsigned int,std::shared_ptr<SceneTimer>>::unordered_map(&this->delay_create_monster_timer_map_);
  if ( *(_BYTE *)(((unsigned __int64)&this->delay_create_monster_timer_id_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->delay_create_monster_timer_id_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->delay_create_monster_timer_id_);
  }
  this->delay_create_monster_timer_id_ = 0;
  ChallengeComp::ChallengeComp(&this->challenge_comp_, this);
  MonsterTideComp::MonsterTideComp(&this->monster_tide_comp_, this);
  PoolMonsterTideComp::PoolMonsterTideComp(&this->pool_monster_tide_comp_, this);
  std::queue<std::shared_ptr<Event>>::queue<std::deque<std::shared_ptr<Event>>,void>(&this->cached_event_que_);
  GroupInitParam::GroupInitParam(&this->init_param_);
  std::map<unsigned int,unsigned int>::map(&this->gather_refresh_time_map_);
  std::map<data::GatherSaveType,unsigned int>::map(&this->group_refresh_time_map_);
  if ( *(char *)(((unsigned __int64)&this->is_replaceable_ >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->is_replaceable_);
  this->is_replaceable_ = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->replaceable_version_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->replaceable_version_ >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_store4(&this->replaceable_version_);
  }
  this->replaceable_version_ = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->client_silence_version_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->client_silence_version_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->client_silence_version_);
  }
  this->client_silence_version_ = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->is_load_refresh_expire_ >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)this + 76) & 7) >= *(_BYTE *)(((unsigned __int64)&this->is_load_refresh_expire_ >> 3)
                                                      + 0x7FFF8000) )
  {
    __asan_report_store1(&this->is_load_refresh_expire_);
  }
  this->is_load_refresh_expire_ = 0;
  std::vector<std::shared_ptr<EntitySightGroup>>::vector(&this->sight_group_ptr_vec_);
  std::set<unsigned long>::set(&this->multistage_play_key_set_);
  std::unordered_set<unsigned int>::unordered_set(&this->occupied_point_set_);
  if ( *(char *)(((unsigned __int64)&this->is_handle_event_ >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->is_handle_event_);
  this->is_handle_event_ = 1;
  if ( *(_BYTE *)(((unsigned __int64)&this->is_unloading_ >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)this - 47) & 7) >= *(_BYTE *)(((unsigned __int64)&this->is_unloading_ >> 3) + 0x7FFF8000) )
  {
    __asan_report_store1(&this->is_unloading_);
  }
  this->is_unloading_ = 0;
  std::unordered_map<std::string,std::shared_ptr<TimeAxis>>::unordered_map(&this->time_axis_map_);
  if ( *(char *)(((unsigned __int64)&this->is_first_time_load >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->is_first_time_load);
  this->is_first_time_load = 1;
  std::unordered_map<std::string,int>::unordered_map(&this->temp_variable_map_);
  if ( *(char *)(((unsigned __int64)&this->is_unregister_cleared >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->is_unregister_cleared);
  this->is_unregister_cleared = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->io_type_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->io_type_ >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->io_type_);
  }
  this->io_type_ = GROUP_IO_TYPE_DEFAULT;
  if ( *(_BYTE *)(((unsigned __int64)&this->sub_flow_type_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->sub_flow_type_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->sub_flow_type_);
  }
  this->sub_flow_type_ = GROUP_SUB_FLOW_TYPE_DEFAULT;
  if ( *(_BYTE *)(((unsigned __int64)&this->is_unloaded_ >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)this + 92) & 7) >= *(_BYTE *)(((unsigned __int64)&this->is_unloaded_ >> 3) + 0x7FFF8000) )
  {
    __asan_report_store1(&this->is_unloaded_);
  }
  this->is_unloaded_ = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->projector_entity_id_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->projector_entity_id_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->projector_entity_id_);
  }
  this->projector_entity_id_ = 0;
  std::unordered_map<unsigned int,std::set<unsigned int>>::unordered_map(&this->origin_owner_2_eid_set_map_);
  GroupOverrideParam::GroupOverrideParam(&this->override_param_);
  if ( *(_BYTE *)(((unsigned __int64)&this->rely_start_world_level_limit_activity_id_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->rely_start_world_level_limit_activity_id_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->rely_start_world_level_limit_activity_id_);
  }
  this->rely_start_world_level_limit_activity_id_ = 0;
  Now = common::tools::TimeUtils::getNow();
  if ( *(_BYTE *)(((unsigned __int64)&this->last_refresh_time_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->last_refresh_time_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->last_refresh_time_);
  }
  this->last_refresh_time_ = Now;
};

// Line 99: range 0000000015FADCCC-0000000015FADDEE
void __cdecl Group::setPositionRevise(Group *const this, const Vector3 *pos)
{
  if ( *(char *)(((unsigned __int64)&this->position_revise_ >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)((((unsigned __int64)&this->position_revise_.z + 3) >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)this - 104 + 11) & 7) >= *(_BYTE *)((((unsigned __int64)&this->position_revise_.z + 3) >> 3)
                                                            + 0x7FFF8000) )
  {
    __asan_report_store_n(&this->position_revise_, 12LL);
  }
  if ( ((unsigned __int8)pos & 7) >= *(_BYTE *)(((unsigned __int64)pos >> 3) + 0x7FFF8000)
    && *(_BYTE *)(((unsigned __int64)pos >> 3) + 0x7FFF8000) != 0
    || *(_BYTE *)((((unsigned __int64)&pos->z + 3) >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)pos + 11) & 7) >= *(_BYTE *)((((unsigned __int64)&pos->z + 3) >> 3) + 0x7FFF8000) )
  {
    __asan_report_load_n(pos, 12LL);
  }
  this->position_revise_ = *pos;
  operator+=(&this->position_, &this->position_revise_);
};

// Line 106: range 0000000015FADDF0-0000000015FADF32
PlayerPtr __cdecl Group::getOwnerPlayer(const Group *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  PlayerPtr result; // rax
  char v5[96]; // [rsp+10h] [rbp-60h] BYREF

  v1 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 16 13 scene_ptr:107";
  *(_QWORD *)(v1 + 16) = Group::getOwnerPlayer;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202178560;
  Group::getScene((const Group *const)(v1 + 32));
  if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v1 + 32), 0LL) )
  {
    std::shared_ptr<Player>::shared_ptr((std::shared_ptr<Player> *const)this, 0LL);
  }
  else
  {
    std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
    if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
      __asan_report_store16(this);
    Scene::getOwnPlayer((const Scene *const)this);
  }
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v1 + 32));
  if ( v5 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<Player,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 114: range 0000000015FADF34-0000000015FAE041
uint32_t __cdecl Group::getOwnerPlayerUid(const Group *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v4; // rax
  uint32_t Uid; // r14d
  uint32_t result; // eax
  char v7[112]; // [rsp+10h] [rbp-70h] BYREF

  v1 = (unsigned __int64)v7;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 16 14 player_ptr:115";
  *(_QWORD *)(v1 + 16) = Group::getOwnerPlayerUid;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202178560;
  Group::getOwnerPlayer((const Group *const)(v1 + 32));
  if ( std::operator!=<Player>((const std::shared_ptr<Player> *)(v1 + 32), 0LL) )
  {
    v4 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
    Uid = Player::getUid(v4);
  }
  else
  {
    Uid = 0;
  }
  std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v1 + 32));
  result = Uid;
  if ( v7 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 124: range 0000000015FAE042-0000000015FAE14F
uint32_t __cdecl Group::getOwnerUid(const Group *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  uint32_t OwnerUid; // r14d
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  uint32_t result; // eax
  char v7[112]; // [rsp+10h] [rbp-70h] BYREF

  v1 = (unsigned __int64)v7;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 16 13 scene_ptr:125";
  *(_QWORD *)(v1 + 16) = Group::getOwnerUid;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202178560;
  Group::getScene((const Group *const)(v1 + 32));
  if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v1 + 32), 0LL) )
  {
    OwnerUid = 0;
  }
  else
  {
    v5 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
    OwnerUid = Scene::getOwnerUid(v5);
  }
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v1 + 32));
  result = OwnerUid;
  if ( v7 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 135: range 0000000015FAE150-0000000015FAE21E
const GroupScriptConfig *__cdecl Group::getScriptConfig(const Group *const this)
{
  uint32_t pattern_id; // edx
  uint32_t group_id; // ecx

  if ( *(_BYTE *)(((unsigned __int64)&this->pattern_id_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->pattern_id_ >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4();
  }
  pattern_id = this->pattern_id_;
  if ( *(_BYTE *)(((unsigned __int64)&this->group_id_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->group_id_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4();
  }
  group_id = this->group_id_;
  if ( *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4();
  }
  return Group::getGroupScriptConfig(this->scene_id_, group_id, pattern_id);
};

// Line 141: range 0000000015FAE220-0000000015FAE52B
const GroupScriptConfig *__fastcall Group::getGroupScriptConfig(
        uint32_t scene_id,
        uint32_t group_id,
        uint32_t pattern_id)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  const GroupScriptConfig *PatternGroupScriptConfig; // r13
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  const GroupScriptConfig *result; // rax
  const SceneScriptConfig *scene_script_config_ptr; // [rsp+10h] [rbp-A0h]
  const GroupScriptConfig *group_script_config_ptr; // [rsp+18h] [rbp-98h]
  std::shared_ptr<Config> v15; // [rsp+20h] [rbp-90h] BYREF
  common::milog::MiLogStream v16; // [rsp+30h] [rbp-80h] BYREF
  char v17[96]; // [rsp+50h] [rbp-60h] BYREF

  v3 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 4 12 group_id:140";
  *(_QWORD *)(v3 + 16) = Group::getGroupScriptConfig;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116348;
  *(_DWORD *)(v3 + 32) = group_id;
  if ( pattern_id )
  {
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v15);
    v6 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v15);
    PatternGroupScriptConfig = LuaConfigMgr::findPatternGroupScriptConfig(&v6->design_config.lua_config_mgr, pattern_id);
    std::shared_ptr<Config>::~shared_ptr(&v15);
  }
  else
  {
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v15);
    v8 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v15);
    scene_script_config_ptr = LuaConfigMgr::findSceneScriptConfig(&v8->design_config.lua_config_mgr, scene_id);
    std::shared_ptr<Config>::~shared_ptr(&v15);
    if ( scene_script_config_ptr )
    {
      group_script_config_ptr = SceneScriptConfig::findGroupScriptConfig(scene_script_config_ptr, *(_DWORD *)(v3 + 32));
      if ( group_script_config_ptr )
      {
        PatternGroupScriptConfig = group_script_config_ptr;
      }
      else
      {
        common::milog::MiLogStream::create(
          &v16,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/group/group.cpp",
          "getGroupScriptConfig",
          157);
        v10 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
                &v16,
                (const char (*)[38])"findGroupScriptConfig fails,group_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v3 + 32));
        common::milog::MiLogStream::~MiLogStream(&v16);
        PatternGroupScriptConfig = 0LL;
      }
    }
    else
    {
      common::milog::MiLogStream::create(
        &v16,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/group/group.cpp",
        "getGroupScriptConfig",
        151);
      v9 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
             &v16,
             (const char (*)[32])"getScriptConfig fails,group_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v3 + 32));
      common::milog::MiLogStream::~MiLogStream(&v16);
      PatternGroupScriptConfig = 0LL;
    }
  }
  result = PatternGroupScriptConfig;
  if ( v17 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 164: range 0000000015FAE52C-0000000015FAE837
const GroupInfoScriptConfig *__fastcall Group::getGroupInfoScriptConfig(
        uint32_t scene_id,
        uint32_t group_id,
        uint32_t pattern_id)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  const GroupInfoScriptConfig *PatternGroupInfoConfig; // r13
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  const GroupInfoScriptConfig *result; // rax
  const SceneScriptConfig *scene_script_config_ptr; // [rsp+10h] [rbp-A0h]
  const GroupInfoScriptConfig *group_info_config_ptr; // [rsp+18h] [rbp-98h]
  std::shared_ptr<Config> v15; // [rsp+20h] [rbp-90h] BYREF
  common::milog::MiLogStream v16; // [rsp+30h] [rbp-80h] BYREF
  char v17[96]; // [rsp+50h] [rbp-60h] BYREF

  v3 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 4 12 group_id:163";
  *(_QWORD *)(v3 + 16) = Group::getGroupInfoScriptConfig;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116348;
  *(_DWORD *)(v3 + 32) = group_id;
  if ( pattern_id )
  {
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v15);
    v6 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v15);
    PatternGroupInfoConfig = LuaConfigMgr::findPatternGroupInfoConfig(&v6->design_config.lua_config_mgr, pattern_id);
    std::shared_ptr<Config>::~shared_ptr(&v15);
  }
  else
  {
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v15);
    v8 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v15);
    scene_script_config_ptr = LuaConfigMgr::findSceneScriptConfig(&v8->design_config.lua_config_mgr, scene_id);
    std::shared_ptr<Config>::~shared_ptr(&v15);
    if ( scene_script_config_ptr )
    {
      group_info_config_ptr = SceneScriptConfig::findGroupInfoConfig(scene_script_config_ptr, *(_DWORD *)(v3 + 32));
      if ( group_info_config_ptr )
      {
        PatternGroupInfoConfig = group_info_config_ptr;
      }
      else
      {
        common::milog::MiLogStream::create(
          &v16,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/group/group.cpp",
          "getGroupInfoScriptConfig",
          179);
        v10 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                &v16,
                (const char (*)[36])"findGroupInfoConfig fails,group_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v3 + 32));
        common::milog::MiLogStream::~MiLogStream(&v16);
        PatternGroupInfoConfig = 0LL;
      }
    }
    else
    {
      common::milog::MiLogStream::create(
        &v16,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/group/group.cpp",
        "getGroupInfoScriptConfig",
        173);
      v9 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
             &v16,
             (const char (*)[32])"getScriptConfig fails,group_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v3 + 32));
      common::milog::MiLogStream::~MiLogStream(&v16);
      PatternGroupInfoConfig = 0LL;
    }
  }
  result = PatternGroupInfoConfig;
  if ( v17 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 188: range 0000000015FAE838-0000000015FAE906
const GroupInfoScriptConfig *__cdecl Group::getInfoScriptConfig(const Group *const this)
{
  uint32_t pattern_id; // edx
  uint32_t group_id; // ecx

  if ( *(_BYTE *)(((unsigned __int64)&this->pattern_id_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->pattern_id_ >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4();
  }
  pattern_id = this->pattern_id_;
  if ( *(_BYTE *)(((unsigned __int64)&this->group_id_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->group_id_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4();
  }
  group_id = this->group_id_;
  if ( *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4();
  }
  return Group::getGroupInfoScriptConfig(this->scene_id_, group_id, pattern_id);
};

// Line 194: range 0000000015FAE908-0000000015FAEA13
const data::GadgetExcelConfig *__cdecl Group::getGadgetExcelConfig(Group *const this, uint32_t config_id)
{
  const data::GadgetExcelConfig *GadgetExcelConfig; // rbx
  GadgetExcelConfigMgr *p_gadget_config_mgr; // rcx
  const GroupScriptConfig *group_script_config_ptr; // [rsp+10h] [rbp-30h]
  const GadgetScriptConfig *gadget_script_config_ptr; // [rsp+18h] [rbp-28h]
  std::shared_ptr<Config> v7[2]; // [rsp+20h] [rbp-20h] BYREF

  group_script_config_ptr = Group::getScriptConfig(this);
  if ( !group_script_config_ptr )
    return 0LL;
  gadget_script_config_ptr = GroupScriptConfig::findGadgetConfig(group_script_config_ptr, config_id);
  if ( !gadget_script_config_ptr )
    return 0LL;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)v7);
  p_gadget_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)v7)->design_config.txt_config_mgr.gadget_config_mgr;
  if ( *(_BYTE *)(((unsigned __int64)&gadget_script_config_ptr->gadget_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)gadget_script_config_ptr + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&gadget_script_config_ptr->gadget_id >> 3)
                                                                           + 0x7FFF8000) )
  {
    __asan_report_load4();
  }
  GadgetExcelConfig = data::GadgetExcelConfigMgrBase::findGadgetExcelConfig(
                        p_gadget_config_mgr,
                        gadget_script_config_ptr->gadget_id);
  std::shared_ptr<Config>::~shared_ptr(v7);
  return GadgetExcelConfig;
};

// Line 209: range 0000000015FAEA14-0000000015FAEA86
uint32_t __cdecl Group::getAreaId(const Group *const this)
{
  const GroupScriptConfig *group_config_ptr; // [rsp+18h] [rbp-8h]

  group_config_ptr = Group::getScriptConfig(this);
  if ( !group_config_ptr )
    return 0;
  if ( *(_BYTE *)(((unsigned __int64)&group_config_ptr->area_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)group_config_ptr - 124) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&group_config_ptr->area_id >> 3)
                                                                     + 0x7FFF8000) )
  {
    __asan_report_load4();
  }
  return group_config_ptr->area_id;
};

// Line 219: range 0000000015FAEA88-0000000015FAEB6D
uint32_t __cdecl Group::getCityId(const Group *const this)
{
  uint32_t AreaCityId; // ebx
  WorldAreaExcelConfigMgr *p_world_area_config_mgr; // rcx
  const GroupScriptConfig *group_config_ptr; // [rsp+18h] [rbp-28h]
  std::shared_ptr<Config> v5[2]; // [rsp+20h] [rbp-20h] BYREF

  group_config_ptr = Group::getScriptConfig(this);
  if ( !group_config_ptr )
    return 0;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)v5);
  p_world_area_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)v5)->design_config.txt_config_mgr.world_area_config_mgr;
  if ( *(_BYTE *)(((unsigned __int64)&group_config_ptr->area_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)group_config_ptr - 124) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&group_config_ptr->area_id >> 3)
                                                                     + 0x7FFF8000) )
  {
    __asan_report_load4();
  }
  AreaCityId = WorldAreaExcelConfigMgr::findAreaCityId(p_world_area_config_mgr, group_config_ptr->area_id);
  std::shared_ptr<Config>::~shared_ptr(v5);
  return AreaCityId;
};

// Line 230: range 0000000015FAEB6E-0000000015FAEEA2
void __cdecl Group::finishAllPlayersChallengesInGroup(Group *const this, uint32_t exclude_father_index)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // rbx
  std::_Rb_tree_iterator<std::pair<unsigned int const,int> >::reference v5; // rax
  std::pair<unsigned int const,int> *v6; // rdx
  GameserverService *v7; // rax
  uint32_t v8; // ecx
  Player *v9; // rax
  PlayerAvatarComp *AvatarComp; // rax
  std::map<unsigned int,int>::iterator __for_begin; // [rsp+10h] [rbp-F0h] BYREF
  std::map<unsigned int,int>::iterator __for_end; // [rsp+18h] [rbp-E8h] BYREF
  std::map<unsigned int,int> *__for_range; // [rsp+20h] [rbp-E0h]
  std::tuple_element<0,std::pair<unsigned int const,int> >::type *uid; // [rsp+28h] [rbp-D8h]
  std::tuple_element<1,std::pair<unsigned int const,int> >::type *_; // [rsp+30h] [rbp-D0h]
  std::pair<unsigned int const,int> __in; // [rsp+38h] [rbp-C8h] BYREF
  char v17[192]; // [rsp+40h] [rbp-C0h] BYREF

  v2 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(160LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 16 14 player_ptr:234 80 48 17 sight_uid_map:231";
  *(_QWORD *)(v2 + 16) = Group::finishAllPlayersChallengesInGroup;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61937;
  v4[536862722] = 62194;
  v4[536862724] = -202116109;
  std::map<unsigned int,int>::map((std::map<unsigned int,int> *const)(v2 + 80), &this->viewing_uid_map_);
  __for_range = (std::map<unsigned int,int> *)(v2 + 80);
  __for_begin._M_node = std::map<unsigned int,int>::begin((std::map<unsigned int,int> *const)(v2 + 80))._M_node;
  __for_end._M_node = std::map<unsigned int,int>::end((std::map<unsigned int,int> *const)(v2 + 80))._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v5 = std::_Rb_tree_iterator<std::pair<unsigned int const,int>>::operator*(&__for_begin);
    v6 = v5;
    if ( ((unsigned __int8)v5 & 7) >= *(_BYTE *)(((unsigned __int64)v5 >> 3) + 0x7FFF8000)
      && *(_BYTE *)(((unsigned __int64)v5 >> 3) + 0x7FFF8000) != 0
      || *(_BYTE *)((((unsigned __int64)&v5->second + 3) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v5 + 7) & 7) >= *(_BYTE *)((((unsigned __int64)&v5->second + 3) >> 3) + 0x7FFF8000) )
    {
      __asan_report_load_n(v5, 8LL);
    }
    __in = *v6;
    uid = std::get<0ul,unsigned int const,int>(&__in);
    _ = std::get<1ul,unsigned int const,int>(&__in);
    v7 = ServiceBox::findService<GameserverService>();
    v8 = (unsigned int)GameserverService::getGameThreadLocal(v7) + 16;
    if ( *(_BYTE *)(((unsigned __int64)uid >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)uid & 7) + 3) >= *(_BYTE *)(((unsigned __int64)uid >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4();
    }
    PlayerMgr::findOnlinePlayer((PlayerMgr *const)(v2 + 48), v8);
    if ( std::operator!=<Player>((const std::shared_ptr<Player> *)(v2 + 48), 0LL) )
    {
      v9 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 48));
      AvatarComp = Player::getAvatarComp(v9);
      PlayerAvatarComp::finishAllUnfinishedChallenges(AvatarComp, exclude_father_index);
    }
    std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v2 + 48));
    std::_Rb_tree_iterator<std::pair<unsigned int const,int>>::operator++(&__for_begin);
  }
  std::map<unsigned int,int>::~map((std::map<unsigned int,int> *const)(v2 + 80));
  if ( v17 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 244: range 0000000015FAEEA4-0000000015FAF07D
_BOOL8 __fastcall Group::hasEventTrigger(const Group *const this, data::EventType event_type)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  common::milog::MiLogStream *v5; // rax
  _BOOL8 result; // rax
  std::_Rb_tree_const_iterator<data::EventType>::_Self __x; // [rsp+18h] [rbp-98h] BYREF
  std::_Rb_tree_const_iterator<data::EventType>::_Self __y; // [rsp+20h] [rbp-90h] BYREF
  const GroupScriptConfig *group_config_ptr; // [rsp+28h] [rbp-88h]
  common::milog::MiLogStream v10; // [rsp+30h] [rbp-80h] BYREF
  char v11[96]; // [rsp+50h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 event_type:243";
  *(_QWORD *)(v2 + 16) = Group::hasEventTrigger;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  *(_DWORD *)(v2 + 32) = event_type;
  group_config_ptr = Group::getScriptConfig(this);
  if ( group_config_ptr )
  {
    __y._M_node = std::set<data::EventType>::end(&group_config_ptr->event_set)._M_node;
    __x._M_node = std::set<data::EventType>::find(
                    &group_config_ptr->event_set,
                    (const std::set<data::EventType>::key_type *)(v2 + 32))._M_node;
    result = std::operator!=(&__x, &__y);
  }
  else
  {
    common::milog::MiLogStream::create(
      &v10,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "hasEventTrigger",
      248);
    v5 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
           &v10,
           (const char (*)[22])"getScriptConfig fails");
    operator<<(v5, this);
    common::milog::MiLogStream::~MiLogStream(&v10);
    result = 0LL;
  }
  if ( v11 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 260: range 0000000015FAF07E-0000000015FAF17E
LuaScriptPtr __cdecl Group::getScript(const Group *const this)
{
  const Group *v1; // rsi
  common::milog::MiLogStream *v2; // rax
  LuaScriptPtr result; // rax
  common::milog::MiLogStream v4; // [rsp+20h] [rbp-30h] BYREF

  if ( Group::getScriptConfig(v1) )
  {
    if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
      __asan_report_store16(this);
    result = LuaScriptMgr::createFromLuaContent((const LuaContent *)this);
  }
  else
  {
    common::milog::MiLogStream::create(
      &v4,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "getScript",
      264);
    v2 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
           &v4,
           (const char (*)[33])"getScriptConfig fails, group_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v2, &v1->group_id_);
    common::milog::MiLogStream::~MiLogStream(&v4);
    std::shared_ptr<LuaScript>::shared_ptr((std::shared_ptr<LuaScript> *const)this, 0LL);
  }
  result._M_ptr = (std::__shared_ptr<LuaScript,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 272: range 0000000015FAF180-0000000015FAF247
const TriggerScriptConfig *__cdecl Group::findTriggerConfig(const Group *const this, const std::string *trigger_name)
{
  common::milog::MiLogStream *v2; // rax
  const GroupScriptConfig *group_script_config_ptr; // [rsp+18h] [rbp-38h]
  common::milog::MiLogStream v5; // [rsp+20h] [rbp-30h] BYREF

  group_script_config_ptr = Group::getScriptConfig(this);
  if ( group_script_config_ptr )
    return GroupScriptConfig::findTriggerConfig(group_script_config_ptr, trigger_name);
  common::milog::MiLogStream::create(
    &v5,
    &common::milog::MiLogDefault::default_log_obj_,
    3u,
    "./src/group/group.cpp",
    "findTriggerConfig",
    276);
  v2 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
         &v5,
         (const char (*)[33])"getScriptConfig fails, group_id:");
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v2, &this->group_id_);
  common::milog::MiLogStream::~MiLogStream(&v5);
  return 0LL;
};

// Line 283: range 0000000015FAF248-0000000015FAF30C
const TriggerScriptConfig *__cdecl Group::findTriggerConfigByConfigId(const Group *const this, uint32_t config_id)
{
  common::milog::MiLogStream *v2; // rax
  const GroupScriptConfig *group_script_config_ptr; // [rsp+18h] [rbp-38h]
  common::milog::MiLogStream v5; // [rsp+20h] [rbp-30h] BYREF

  group_script_config_ptr = Group::getScriptConfig(this);
  if ( group_script_config_ptr )
    return GroupScriptConfig::findTriggerConfigByConfigId(group_script_config_ptr, config_id);
  common::milog::MiLogStream::create(
    &v5,
    &common::milog::MiLogDefault::default_log_obj_,
    3u,
    "./src/group/group.cpp",
    "findTriggerConfigByConfigId",
    287);
  v2 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
         &v5,
         (const char (*)[33])"getScriptConfig fails, group_id:");
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v2, &this->group_id_);
  common::milog::MiLogStream::~MiLogStream(&v5);
  return 0LL;
};

// Line 294: range 0000000015FAF30E-0000000015FAF4E5
const VariableScriptConfig *__cdecl Group::findVariableConfig(const Group *const this, const std::string *name)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  common::milog::MiLogStream *v5; // rax
  const VariableScriptConfig *result; // rax
  std::__detail::_Node_iterator_base<std::pair<const std::string,VariableScriptConfig>,true> __y; // [rsp+10h] [rbp-90h] BYREF
  const GroupScriptConfig *group_script_config_ptr; // [rsp+18h] [rbp-88h]
  common::milog::MiLogStream v9; // [rsp+20h] [rbp-80h] BYREF
  char v10[96]; // [rsp+40h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 8 6 it:301";
  *(_QWORD *)(v2 + 16) = Group::findVariableConfig;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116352;
  group_script_config_ptr = Group::getScriptConfig(this);
  if ( group_script_config_ptr )
  {
    *(std::unordered_map<std::string,VariableScriptConfig>::const_iterator *)(v2 + 32) = std::unordered_map<std::string,VariableScriptConfig>::find(
                                                                                           &group_script_config_ptr->variable_map,
                                                                                           name);
    __y._M_cur = std::unordered_map<std::string,VariableScriptConfig>::end(&group_script_config_ptr->variable_map)._M_cur;
    if ( std::__detail::operator!=<std::pair<std::string const,VariableScriptConfig>,true>(
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,VariableScriptConfig>,true> *)(v2 + 32),
           &__y) )
    {
      result = &std::__detail::_Node_const_iterator<std::pair<std::string const,VariableScriptConfig>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,VariableScriptConfig>,false,true> *const)(v2 + 32))->second;
    }
    else
    {
      result = 0LL;
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v9,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "findVariableConfig",
      298);
    v5 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
           &v9,
           (const char (*)[33])"getScriptConfig fails, group_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, &this->group_id_);
    common::milog::MiLogStream::~MiLogStream(&v9);
    result = 0LL;
  }
  if ( v10 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 310: range 0000000015FAF4E6-0000000015FAF6F9
const VariableScriptConfig *__fastcall Group::findVariableConfigByConfigId(const Group *const this, uint32_t config_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  common::milog::MiLogStream *v5; // rax
  const VariableScriptConfig *result; // rax
  std::__detail::_Node_iterator_base<std::pair<unsigned int const,VariableScriptConfig>,false> __y; // [rsp+10h] [rbp-B0h] BYREF
  const GroupScriptConfig *group_script_config_ptr; // [rsp+18h] [rbp-A8h]
  common::milog::MiLogStream v9; // [rsp+20h] [rbp-A0h] BYREF
  char v10[128]; // [rsp+40h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 4 13 config_id:309 64 8 6 it:317";
  *(_QWORD *)(v2 + 16) = Group::findVariableConfigByConfigId;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -202116352;
  *(_DWORD *)(v2 + 48) = config_id;
  group_script_config_ptr = Group::getScriptConfig(this);
  if ( group_script_config_ptr )
  {
    *(std::unordered_map<unsigned int,VariableScriptConfig>::const_iterator *)(v2 + 64) = std::unordered_map<unsigned int,VariableScriptConfig>::find(
                                                                                            &group_script_config_ptr->variable_id_config_map,
                                                                                            (const std::unordered_map<unsigned int,VariableScriptConfig>::key_type *)(v2 + 48));
    __y._M_cur = std::unordered_map<unsigned int,VariableScriptConfig>::end(&group_script_config_ptr->variable_id_config_map)._M_cur;
    if ( std::__detail::operator!=<std::pair<unsigned int const,VariableScriptConfig>,false>(
           (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,VariableScriptConfig>,false> *)(v2 + 64),
           &__y) )
    {
      result = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,VariableScriptConfig>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,VariableScriptConfig>,false,false> *const)(v2 + 64))->second;
    }
    else
    {
      result = 0LL;
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v9,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "findVariableConfigByConfigId",
      314);
    v5 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
           &v9,
           (const char (*)[33])"getScriptConfig fails, group_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, &this->group_id_);
    common::milog::MiLogStream::~MiLogStream(&v9);
    result = 0LL;
  }
  if ( v10 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 326: range 0000000015FAF6FA-0000000015FAF8A3
const SuiteScriptConfig *__fastcall Group::findSuiteScriptConfig(const Group *const this, uint32_t suite_index)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  const SuiteScriptConfig *result; // rax
  const GroupScriptConfig *group_script_config_ptr; // [rsp+18h] [rbp-88h]
  common::milog::MiLogStream v10; // [rsp+20h] [rbp-80h] BYREF
  char v11[96]; // [rsp+40h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 15 suite_index:325";
  *(_QWORD *)(v2 + 16) = Group::findSuiteScriptConfig;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  *(_DWORD *)(v2 + 32) = suite_index;
  group_script_config_ptr = Group::getScriptConfig(this);
  if ( group_script_config_ptr )
  {
    result = GroupScriptConfig::getSuiteConfig(group_script_config_ptr, *(_DWORD *)(v2 + 32));
  }
  else
  {
    common::milog::MiLogStream::create(
      &v10,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/group/group.cpp",
      "findSuiteScriptConfig",
      330);
    v5 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
           &v10,
           (const char (*)[33])"getScriptConfig fails, group_id:");
    v6 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, &this->group_id_);
    v7 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v6, (const char (*)[8])" suite:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v2 + 32));
    common::milog::MiLogStream::~MiLogStream(&v10);
    result = 0LL;
  }
  if ( v11 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 337: range 0000000015FAF8A4-0000000015FAFA4D
const SuiteDiskScriptConfig *__fastcall Group::findSuiteDiskScriptConfig(const Group *const this, uint32_t suite_disk)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  const SuiteDiskScriptConfig *result; // rax
  const GroupScriptConfig *group_script_config_ptr; // [rsp+18h] [rbp-88h]
  common::milog::MiLogStream v10; // [rsp+20h] [rbp-80h] BYREF
  char v11[96]; // [rsp+40h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 suite_disk:336";
  *(_QWORD *)(v2 + 16) = Group::findSuiteDiskScriptConfig;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  *(_DWORD *)(v2 + 32) = suite_disk;
  group_script_config_ptr = Group::getScriptConfig(this);
  if ( group_script_config_ptr )
  {
    result = GroupScriptConfig::getSuiteDiskConfig(group_script_config_ptr, *(_DWORD *)(v2 + 32));
  }
  else
  {
    common::milog::MiLogStream::create(
      &v10,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/group/group.cpp",
      "findSuiteDiskScriptConfig",
      341);
    v5 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
           &v10,
           (const char (*)[33])"getScriptConfig fails, group_id:");
    v6 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, &this->group_id_);
    v7 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v6, (const char (*)[13])" suite_disk:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v2 + 32));
    common::milog::MiLogStream::~MiLogStream(&v10);
    result = 0LL;
  }
  if ( v11 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 348: range 0000000015FAFA4E-0000000015FAFA8D
void __cdecl TimeAxis::end(TimeAxis *const this)
{
  std::__shared_ptr_access<SceneTimer,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v1; // rax

  if ( std::operator!=<SceneTimer>(&this->timer_ptr, 0LL) )
  {
    v1 = std::__shared_ptr_access<SceneTimer,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SceneTimer,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->timer_ptr);
    common::tools::MiTimer::cancel(v1);
  }
};

// Line 356: range 0000000015FAFA8E-0000000015FB0247
int32_t __cdecl TimeAxis::onTimerCue(TimeAxis *const this, bool *is_done)
{
  std::vector<unsigned int>::size_type idx; // rbx
  common::milog::MiLogStream *v3; // rdx
  common::milog::MiLogStream *v4; // rax
  common::milog::MiLogStream *v5; // rax
  std::vector<unsigned int> *p_timer_vec; // rcx
  std::vector<unsigned int>::reference v8; // rdx
  std::vector<unsigned int>::size_type v9; // rbx
  common::milog::MiLogStream *v10; // rdx
  std::vector<unsigned int>::reference v11; // rdx
  std::vector<unsigned int> *v12; // rcx
  std::vector<unsigned int>::reference v13; // rdx
  common::milog::MiLogStream *v14; // rdx
  std::vector<unsigned int> *v15; // rcx
  std::vector<unsigned int>::reference v16; // rdx
  common::milog::MiLogStream *v17; // rdx
  common::milog::MiLogStream *v18; // rdx
  std::__shared_ptr_access<SceneTimer,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // rax
  SceneTimer *v20; // rax
  common::milog::MiLogStream *v21; // rdx
  uint32_t next_time_gap; // [rsp+18h] [rbp-38h]
  uint32_t old_time_point; // [rsp+1Ch] [rbp-34h]
  common::milog::MiLogStream v24; // [rsp+20h] [rbp-30h] BYREF

  if ( *(_BYTE *)(((unsigned __int64)&this->idx >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->idx >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4();
  }
  idx = this->idx;
  if ( idx >= std::vector<unsigned int>::size(&this->timer_vec) )
  {
    common::milog::MiLogStream::create(
      &v24,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "onTimerCue",
      359);
    v3 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
           &v24,
           (const char (*)[38])"[TimeAix] idx out of range find, key:");
    v4 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v3, &this->key);
    v5 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v4, (const char (*)[6])" idx:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, &this->idx);
    common::milog::MiLogStream::~MiLogStream(&v24);
    return -1;
  }
  p_timer_vec = &this->timer_vec;
  if ( *(_BYTE *)(((unsigned __int64)&this->idx >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->idx >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4();
  }
  v8 = std::vector<unsigned int>::operator[](p_timer_vec, this->idx);
  if ( *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)v8 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4();
  }
  old_time_point = *v8;
  if ( *(_BYTE *)(((unsigned __int64)&this->idx >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->idx >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4();
  }
  v9 = ++this->idx;
  if ( v9 < std::vector<unsigned int>::size(&this->timer_vec) )
  {
    v12 = &this->timer_vec;
    if ( *(_BYTE *)(((unsigned __int64)&this->idx >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->idx >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    v13 = std::vector<unsigned int>::operator[](v12, this->idx);
    if ( *(_BYTE *)(((unsigned __int64)v13 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v13 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v13 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4();
    }
    if ( old_time_point >= *v13 )
    {
      common::milog::MiLogStream::create(
        &v24,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/group/group.cpp",
        "onTimerCue",
        381);
      v14 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
              &v24,
              (const char (*)[37])"[TimeAix] time point not valid, key:");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v14, &this->key);
      common::milog::MiLogStream::~MiLogStream(&v24);
      return -1;
    }
    v15 = &this->timer_vec;
    if ( *(_BYTE *)(((unsigned __int64)&this->idx >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->idx >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    v16 = std::vector<unsigned int>::operator[](v15, this->idx);
    if ( *(_BYTE *)(((unsigned __int64)v16 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v16 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v16 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4();
    }
    next_time_gap = *v16 - old_time_point;
    goto LABEL_36;
  }
  if ( *(_BYTE *)(((unsigned __int64)&this->is_loop >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)this + 60) & 7) >= *(_BYTE *)(((unsigned __int64)&this->is_loop >> 3) + 0x7FFF8000) )
  {
    __asan_report_load1(&this->is_loop);
  }
  if ( this->is_loop )
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->idx >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->idx >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_store4(&this->idx);
    }
    this->idx = 0;
    v11 = std::vector<unsigned int>::operator[](&this->timer_vec, this->idx);
    if ( *(_BYTE *)(((unsigned __int64)v11 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v11 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v11 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4();
    }
    next_time_gap = *v11;
    if ( *(_BYTE *)(((unsigned __int64)&this->loop_count >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->loop_count >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    ++this->loop_count;
LABEL_36:
    if ( next_time_gap )
    {
      if ( std::operator==<SceneTimer>(&this->timer_ptr, 0LL) )
      {
        common::milog::MiLogStream::create(
          &v24,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/group/group.cpp",
          "onTimerCue",
          393);
        v18 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
                &v24,
                (const char (*)[34])"[TimeAix] timer_ptr is null, key:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v18, &this->key);
        common::milog::MiLogStream::~MiLogStream(&v24);
        return -1;
      }
      else
      {
        v19 = std::__shared_ptr_access<SceneTimer,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SceneTimer,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->timer_ptr);
        common::tools::MiTimer::cancel(v19);
        v20 = std::__shared_ptr_access<SceneTimer,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SceneTimer,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->timer_ptr);
        if ( SceneTimer::startMS(v20, next_time_gap, 0, "./src/group/group.cpp", "onTimerCue", 397) )
        {
          common::milog::MiLogStream::create(
            &v24,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/group/group.cpp",
            "onTimerCue",
            399);
          v21 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
                  &v24,
                  (const char (*)[41])"[TimeAix] timer_ptr->startMS fails, key:");
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v21, &this->key);
          common::milog::MiLogStream::~MiLogStream(&v24);
          return -1;
        }
        else
        {
          return 0;
        }
      }
    }
    else
    {
      common::milog::MiLogStream::create(
        &v24,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/group/group.cpp",
        "onTimerCue",
        388);
      v17 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
              &v24,
              (const char (*)[35])"[TimeAix] next_time_gap is 0, key:");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v17, &this->key);
      common::milog::MiLogStream::~MiLogStream(&v24);
      return -1;
    }
  }
  common::milog::MiLogStream::create(
    &v24,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/group/group.cpp",
    "onTimerCue",
    369);
  v10 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
          &v24,
          (const char (*)[30])"[TimeAix] time axis end, key:");
  common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v10, &this->key);
  common::milog::MiLogStream::~MiLogStream(&v24);
  if ( *(_BYTE *)(((unsigned __int64)is_done >> 3) + 0x7FFF8000) != 0
    && ((unsigned __int8)is_done & 7) >= *(_BYTE *)(((unsigned __int64)is_done >> 3) + 0x7FFF8000) )
  {
    __asan_report_store1(is_done);
  }
  *is_done = 1;
  return 0;
};

// Line 406: range 0000000015FB0248-0000000015FB07D4
int32_t __cdecl TimeAxis::continueTimer(TimeAxis *const this)
{
  std::vector<unsigned int>::size_type idx; // rbx
  common::milog::MiLogStream *v2; // rdx
  common::milog::MiLogStream *v3; // rax
  common::milog::MiLogStream *v4; // rax
  std::vector<unsigned int>::reference v6; // rdx
  std::vector<unsigned int> *p_timer_vec; // rcx
  std::vector<unsigned int>::reference v8; // rdx
  std::vector<unsigned int> *v9; // rcx
  std::vector<unsigned int>::reference v10; // rdx
  common::milog::MiLogStream *v11; // rdx
  std::vector<unsigned int> *v12; // rcx
  std::vector<unsigned int>::reference v13; // rdx
  std::__shared_ptr_access<SceneTimer,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  common::milog::MiLogStream *v16; // rdx
  SceneTimer *v17; // rax
  common::milog::MiLogStream *v18; // rdx
  uint32_t next_time_gap; // [rsp+18h] [rbp-38h]
  uint32_t cur_timer; // [rsp+1Ch] [rbp-34h]
  common::milog::MiLogStream v21; // [rsp+20h] [rbp-30h] BYREF

  if ( *(_BYTE *)(((unsigned __int64)&this->idx >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->idx >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4();
  }
  idx = this->idx;
  if ( idx >= std::vector<unsigned int>::size(&this->timer_vec) )
  {
    common::milog::MiLogStream::create(
      &v21,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "continueTimer",
      410);
    v2 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
           &v21,
           (const char (*)[38])"[TimeAix] idx out of range find, key:");
    v3 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v2, &this->key);
    v4 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v3, (const char (*)[6])" idx:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v4, &this->idx);
    common::milog::MiLogStream::~MiLogStream(&v21);
    return -1;
  }
  if ( *(_BYTE *)(((unsigned __int64)&this->idx >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->idx >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4();
  }
  if ( this->idx )
  {
    p_timer_vec = &this->timer_vec;
    if ( *(_BYTE *)(((unsigned __int64)&this->idx >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->idx >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    v8 = std::vector<unsigned int>::operator[](p_timer_vec, this->idx);
    if ( *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v8 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4();
    }
    cur_timer = *v8;
    v9 = &this->timer_vec;
    if ( *(_BYTE *)(((unsigned __int64)&this->idx >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->idx >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    v10 = std::vector<unsigned int>::operator[](v9, this->idx - 1);
    if ( *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v10 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4();
    }
    if ( cur_timer <= *v10 )
    {
      common::milog::MiLogStream::create(
        &v21,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/group/group.cpp",
        "continueTimer",
        422);
      v11 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
              &v21,
              (const char (*)[37])"[TimeAix] time point not valid, key:");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v11, &this->key);
      common::milog::MiLogStream::~MiLogStream(&v21);
      return -1;
    }
    v12 = &this->timer_vec;
    if ( *(_BYTE *)(((unsigned __int64)&this->idx >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->idx >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    v13 = std::vector<unsigned int>::operator[](v12, this->idx - 1);
    if ( *(_BYTE *)(((unsigned __int64)v13 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v13 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v13 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4();
    }
    next_time_gap = cur_timer - *v13;
  }
  else
  {
    v6 = std::vector<unsigned int>::operator[](&this->timer_vec, this->idx);
    if ( *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v6 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4();
    }
    next_time_gap = *v6;
  }
  if ( std::operator==<SceneTimer>(0LL, &this->timer_ptr)
    || (v14 = std::__shared_ptr_access<SceneTimer,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SceneTimer,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->timer_ptr),
        common::tools::MiTimer::isActive(v14)) )
  {
    common::milog::MiLogStream::create(
      &v21,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "continueTimer",
      429);
    v16 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
            &v21,
            (const char (*)[34])"[TimeAix] timer_ptr invalid, key:");
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v16, &this->key);
    common::milog::MiLogStream::~MiLogStream(&v21);
    return -1;
  }
  else
  {
    v17 = std::__shared_ptr_access<SceneTimer,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SceneTimer,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->timer_ptr);
    if ( SceneTimer::startMS(v17, next_time_gap, 0, "./src/group/group.cpp", "continueTimer", 432) )
    {
      common::milog::MiLogStream::create(
        &v21,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/group/group.cpp",
        "continueTimer",
        434);
      v18 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
              &v21,
              (const char (*)[41])"[TimeAix] timer_ptr->startMS fails, key:");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v18, &this->key);
      common::milog::MiLogStream::~MiLogStream(&v21);
      return -1;
    }
    else
    {
      return 0;
    }
  }
};

// Line 441: range 0000000015FB07D6-0000000015FB0961
bool __fastcall Group::isEntityDeleted(const Group *const this, proto::ProtEntityType entity_type, uint32_t config_id)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  bool result; // al
  std::_Rb_tree_const_iterator<std::pair<const proto::ProtEntityType,std::set<unsigned int> > >::_Self __y; // [rsp+10h] [rbp-90h] BYREF
  const std::set<unsigned int> *entity_set; // [rsp+18h] [rbp-88h]
  char v10[128]; // [rsp+20h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 4 15 entity_type:440 48 4 13 config_id:440 64 8 8 iter:442";
  *(_QWORD *)(v3 + 16) = Group::isEntityDeleted;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -202116352;
  *(_DWORD *)(v3 + 32) = entity_type;
  *(_DWORD *)(v3 + 48) = config_id;
  *(std::map<proto::ProtEntityType,std::set<unsigned int>>::const_iterator *)(v3 + 64) = std::map<proto::ProtEntityType,std::set<unsigned int>>::find(
                                                                                           &this->deleted_entity_record_map_,
                                                                                           (const std::map<proto::ProtEntityType,std::set<unsigned int>>::key_type *)(v3 + 32));
  __y._M_node = std::map<proto::ProtEntityType,std::set<unsigned int>>::end(&this->deleted_entity_record_map_)._M_node;
  if ( std::operator==(
         (const std::_Rb_tree_const_iterator<std::pair<const proto::ProtEntityType,std::set<unsigned int> > >::_Self *)(v3 + 64),
         &__y) )
  {
    result = 0;
  }
  else
  {
    entity_set = &std::_Rb_tree_const_iterator<std::pair<proto::ProtEntityType const,std::set<unsigned int>>>::operator->((const std::_Rb_tree_const_iterator<std::pair<const proto::ProtEntityType,std::set<unsigned int> > > *const)(v3 + 64))->second;
    result = std::set<unsigned int>::count(entity_set, (const std::set<unsigned int>::key_type *)(v3 + 48)) != 0;
  }
  if ( v10 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 451: range 0000000015FB0962-0000000015FB0E30
__int64 __fastcall Group::isOneoffMonsterDead(const Group *const this, uint32_t config_id)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  unsigned int v5; // eax
  unsigned int v6; // r14d
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  common::milog::MiLogStream *v8; // rax
  std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int> >::pointer v9; // rdx
  std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int> >::pointer v10; // rdx
  __int64 result; // rax
  std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int> >::_Self __y; // [rsp+10h] [rbp-100h] BYREF
  const std::map<unsigned int,unsigned int> *one_off_map; // [rsp+18h] [rbp-F8h]
  common::milog::MiLogStream v14; // [rsp+20h] [rbp-F0h] BYREF
  char v15[208]; // [rsp+40h] [rbp-D0h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(160LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 32 4 18 config_version:479 48 4 13 config_id:450 64 8 6 it:473 96 16 13 scene_ptr:452 128 16 1"
                        "4 player_ptr:455";
  *(_QWORD *)(v2 + 16) = Group::isOneoffMonsterDead;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = -218959360;
  v4[536862723] = -219021312;
  v4[536862724] = -202178560;
  *(_DWORD *)(v2 + 48) = config_id;
  Group::getScene((const Group *const)(v2 + 96));
  if ( std::operator!=<Scene>((const std::shared_ptr<Scene> *)(v2 + 96), 0LL) )
  {
    std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
    Scene::getOwnPlayer((const Scene *const)(v2 + 128));
    if ( std::operator!=<Player>((const std::shared_ptr<Player> *)(v2 + 128), 0LL) )
    {
      LOBYTE(v5) = Group::isBanSpawnByOneoff(this, PROT_ENTITY_MONSTER, *(_DWORD *)(v2 + 48));
      v6 = v5;
    }
    else
    {
      v7 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
      if ( Scene::isHomeScene(v7) )
      {
        v6 = 0;
      }
      else
      {
        common::milog::MiLogStream::create(
          &v14,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/group/group.cpp",
          "isOneoffMonsterDead",
          467);
        v8 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
               &v14,
               (const char (*)[30])"find player failed,group id: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, &this->group_id_);
        common::milog::MiLogStream::~MiLogStream(&v14);
        v6 = 1;
      }
    }
    std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v2 + 128));
  }
  else
  {
    one_off_map = &this->init_param_.monster_one_off_set;
    *(std::map<unsigned int,unsigned int>::const_iterator *)(v2 + 64) = std::map<unsigned int,unsigned int>::find(
                                                                          &this->init_param_.monster_one_off_set,
                                                                          (const std::map<unsigned int,unsigned int>::key_type *)(v2 + 48));
    __y._M_node = std::map<unsigned int,unsigned int>::end(one_off_map)._M_node;
    if ( std::operator==(
           (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int> >::_Self *)(v2 + 64),
           &__y) )
    {
      v6 = 0;
    }
    else
    {
      *(_DWORD *)(v2 + 32) = 0;
      if ( Group::getOneoffResetVersionByConfigID(
             this,
             PROT_ENTITY_MONSTER,
             *(_DWORD *)(v2 + 48),
             (uint32_t *)(v2 + 32)) )
      {
        common::milog::MiLogStream::create(
          &v14,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/group/group.cpp",
          "isOneoffMonsterDead",
          482);
        v6 = *(_DWORD *)(v2 + 32);
        v9 = std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int>>::operator->((const std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int> > *const)(v2 + 64));
        if ( *(_BYTE *)(((unsigned __int64)&v9->second >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)v9 + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v9->second >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4();
        }
        common::milog::MiLogStream::operator()(
          &v14,
          "monster config_id=%u record_version=%u vs config_version=%u",
          *(unsigned int *)(v2 + 48),
          v9->second,
          v6);
        common::milog::MiLogStream::~MiLogStream(&v14);
        v10 = std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int>>::operator->((const std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int> > *const)(v2 + 64));
        if ( *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)v10 + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4();
        }
        LOBYTE(v6) = v10->second >= *(_DWORD *)(v2 + 32);
      }
      else
      {
        common::milog::MiLogStream::create(
          &v14,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/group/group.cpp",
          "isOneoffMonsterDead",
          487);
        common::milog::MiLogStream::operator()(&v14, off_25AB5D80, *(unsigned int *)(v2 + 48));
        common::milog::MiLogStream::~MiLogStream(&v14);
        v6 = 1;
      }
    }
  }
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v2 + 96));
  result = v6;
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 492: range 0000000015FB0E32-0000000015FB1409
__int64 __fastcall Group::isOneoffGadgetDead(const Group *const this, uint32_t config_id)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  unsigned int v5; // eax
  unsigned int v6; // r14d
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  common::milog::MiLogStream *v8; // rax
  std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int> >::pointer v9; // rdx
  std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int> >::pointer v10; // rdx
  __int64 result; // rax
  std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int> >::_Self __y; // [rsp+10h] [rbp-120h] BYREF
  const std::map<unsigned int,unsigned int> *one_off_map; // [rsp+18h] [rbp-118h]
  common::milog::MiLogStream v14; // [rsp+20h] [rbp-110h] BYREF
  char v15[240]; // [rsp+40h] [rbp-F0h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "6 32 4 18 config_version:528 48 4 13 config_id:491 64 8 6 it:522 96 16 13 scene_ptr:493 128 16 1"
                        "4 player_ptr:496 160 16 21 dungeon_scene_ptr:508";
  *(_QWORD *)(v2 + 16) = Group::isOneoffGadgetDead;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = -218959360;
  v4[536862723] = -219021312;
  v4[536862724] = -219021312;
  v4[536862725] = -202178560;
  *(_DWORD *)(v2 + 48) = config_id;
  Group::getScene((const Group *const)(v2 + 96));
  if ( std::operator!=<Scene>((const std::shared_ptr<Scene> *)(v2 + 96), 0LL) )
  {
    std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
    Scene::getOwnPlayer((const Scene *const)(v2 + 128));
    if ( std::operator!=<Player>((const std::shared_ptr<Player> *)(v2 + 128), 0LL) )
    {
      LOBYTE(v5) = Group::isBanSpawnByOneoff(this, PROT_ENTITY_GADGET, *(_DWORD *)(v2 + 48));
      v6 = v5;
    }
    else
    {
      v7 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
      if ( Scene::isHomeScene(v7) )
      {
        v6 = 0;
      }
      else
      {
        std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
        toPtr<DungeonScene,Scene>((Scene *)(v2 + 160));
        if ( std::operator!=<DungeonScene>((const std::shared_ptr<DungeonScene> *)(v2 + 160), 0LL) )
          common::milog::MiLogStream::create(
            &v14,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/group/group.cpp",
            "isOneoffGadgetDead",
            511);
        else
          common::milog::MiLogStream::create(
            &v14,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/group/group.cpp",
            "isOneoffGadgetDead",
            515);
        v8 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
               &v14,
               (const char (*)[30])"find player failed,group id: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, &this->group_id_);
        common::milog::MiLogStream::~MiLogStream(&v14);
        v6 = 1;
        std::shared_ptr<DungeonScene>::~shared_ptr((std::shared_ptr<DungeonScene> *const)(v2 + 160));
      }
    }
    std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v2 + 128));
  }
  else
  {
    one_off_map = &this->init_param_.gadget_one_off_set;
    *(std::map<unsigned int,unsigned int>::const_iterator *)(v2 + 64) = std::map<unsigned int,unsigned int>::find(
                                                                          &this->init_param_.gadget_one_off_set,
                                                                          (const std::map<unsigned int,unsigned int>::key_type *)(v2 + 48));
    __y._M_node = std::map<unsigned int,unsigned int>::end(one_off_map)._M_node;
    if ( std::operator==(
           (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int> >::_Self *)(v2 + 64),
           &__y) )
    {
      v6 = 0;
    }
    else
    {
      *(_DWORD *)(v2 + 32) = 0;
      if ( Group::getOneoffResetVersionByConfigID(this, PROT_ENTITY_GADGET, *(_DWORD *)(v2 + 48), (uint32_t *)(v2 + 32)) )
      {
        common::milog::MiLogStream::create(
          &v14,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/group/group.cpp",
          "isOneoffGadgetDead",
          531);
        v6 = *(_DWORD *)(v2 + 32);
        v9 = std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int>>::operator->((const std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int> > *const)(v2 + 64));
        if ( *(_BYTE *)(((unsigned __int64)&v9->second >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)v9 + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v9->second >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4();
        }
        common::milog::MiLogStream::operator()(
          &v14,
          "gadget config_id=%u record_version=%u vs config_version=%u",
          *(unsigned int *)(v2 + 48),
          v9->second,
          v6);
        common::milog::MiLogStream::~MiLogStream(&v14);
        v10 = std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int>>::operator->((const std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int> > *const)(v2 + 64));
        if ( *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)v10 + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4();
        }
        LOBYTE(v6) = v10->second >= *(_DWORD *)(v2 + 32);
      }
      else
      {
        common::milog::MiLogStream::create(
          &v14,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/group/group.cpp",
          "isOneoffGadgetDead",
          536);
        common::milog::MiLogStream::operator()(&v14, off_25AB5F20, *(unsigned int *)(v2 + 48));
        common::milog::MiLogStream::~MiLogStream(&v14);
        v6 = 1;
      }
    }
  }
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v2 + 96));
  result = v6;
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 541: range 0000000015FB140A-0000000015FB162C
int32_t __cdecl Group::flowFromBin(Group *const this, const proto::GroupBin *bin)
{
  uint32_t v2; // edx
  int v3; // eax
  uint32_t v4; // edx
  uint32_t refresh_time; // edx
  bool is_replaceable; // dl
  uint32_t v7; // ecx
  std::unordered_set<unsigned int>::value_type __x; // [rsp+18h] [rbp-18h] BYREF
  int idx; // [rsp+1Ch] [rbp-14h]

  v2 = proto::GroupBin::suite_index(bin);
  if ( *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->suite_index_);
  }
  this->suite_index_ = v2;
  std::unordered_set<unsigned int>::clear(&this->show_cutscene_chest_set_);
  for ( idx = 0; ; ++idx )
  {
    v3 = proto::GroupBin::show_cutscene_chest_list_size(bin);
    if ( idx >= v3 )
      break;
    __x = proto::GroupBin::show_cutscene_chest_list(bin, idx);
    std::unordered_set<unsigned int>::insert(&this->show_cutscene_chest_set_, &__x);
  }
  v4 = proto::GroupBin::revise_level(bin);
  if ( *(_BYTE *)(((unsigned __int64)&this->revise_level_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->revise_level_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->revise_level_);
  }
  this->revise_level_ = v4;
  ChallengeComp::fromBin(&this->challenge_comp_, bin);
  refresh_time = proto::GroupBin::last_refresh_time(bin);
  if ( *(_BYTE *)(((unsigned __int64)&this->last_refresh_time_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->last_refresh_time_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->last_refresh_time_);
  }
  this->last_refresh_time_ = refresh_time;
  is_replaceable = proto::GroupBin::is_replaceable(bin);
  if ( *(char *)(((unsigned __int64)&this->is_replaceable_ >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->is_replaceable_);
  this->is_replaceable_ = is_replaceable;
  v7 = proto::GroupBin::replaceable_version(bin);
  if ( *(_BYTE *)(((unsigned __int64)&this->replaceable_version_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->replaceable_version_ >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_store4(&this->replaceable_version_);
  }
  this->replaceable_version_ = v7;
  return 0;
};

// Line 558: range 0000000015FB162E-0000000015FB30D8
int32_t __cdecl Group::fromBin(Group *const this, const proto::GroupBin *bin)
{
  int32_t v2; // r14d
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  int v9; // r15d
  Trigger *v10; // rax
  std::__shared_ptr_access<Trigger,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  uint32_t v12; // r15d
  std::__shared_ptr_access<Trigger,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  common::milog::MiLogStream *v14; // rdx
  common::milog::MiLogStream *v16; // r15
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  int v19; // r15d
  Trigger *v20; // rax
  const TriggerScriptConfig *v21; // r15
  std::__shared_ptr_access<Trigger,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v22; // rax
  std::__shared_ptr_access<Trigger,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v23; // rcx
  common::milog::MiLogStream *v24; // rdx
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  const std::string *v29; // rcx
  int *v30; // r8
  std::pair<std::__detail::_Node_iterator<std::pair<const std::string,int>,false,true>,bool> v31; // rax
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rdx
  std::map<std::string,float>::mapped_type *v34; // rax
  float *v35; // rdx
  common::milog::MiLogStream *v36; // rax
  common::milog::MiLogStream *v37; // rax
  common::milog::MiLogStream *v38; // rax
  const std::string *v39; // rcx
  int *v40; // r8
  std::pair<std::__detail::_Node_iterator<std::pair<const std::string,int>,false,true>,bool> v41; // rax
  common::milog::MiLogStream *v42; // rax
  common::milog::MiLogStream *v43; // rdx
  std::map<std::string,float>::mapped_type *v44; // rax
  float *v45; // rdx
  int v46; // eax
  std::set<unsigned int> *v47; // r14
  int v48; // eax
  std::set<unsigned int> *v49; // r14
  const proto::GroupMonsterBin *v50; // rbx
  proto::GroupMonsterBin *v51; // rax
  const proto::GroupGadgetBin *v52; // rbx
  proto::GroupGadgetBin *v53; // rax
  uint32_t v54; // edx
  uint32_t v55; // ecx
  int v56; // eax
  const proto::BossDieInfoBin *v57; // rbx
  proto::BossDieInfoBin *v58; // rax
  google::protobuf::uint32 refresh_time; // ebx
  std::map<unsigned int,unsigned int>::mapped_type *v60; // rax
  google::protobuf::uint32 *v61; // rdx
  google::protobuf::uint32 v62; // ebx
  std::map<data::GatherSaveType,unsigned int>::mapped_type *v63; // rax
  google::protobuf::uint32 *v64; // rdx
  uint32_t v65; // edx
  uint32_t v66; // edx
  bool is_replaceable; // dl
  uint32_t v68; // ecx
  int32_t result; // eax
  float v70; // [rsp+Ch] [rbp-204h]
  float v71; // [rsp+Ch] [rbp-204h]
  unsigned int val; // [rsp+2Ch] [rbp-1E4h] BYREF
  int32_t idx; // [rsp+30h] [rbp-1E0h]
  int32_t idx_0; // [rsp+34h] [rbp-1DCh]
  int idx_1; // [rsp+38h] [rbp-1D8h]
  uint32_t config_id; // [rsp+3Ch] [rbp-1D4h]
  google::protobuf::RepeatedPtrField<proto::GroupTriggerBin>::const_iterator __for_begin_0; // [rsp+40h] [rbp-1D0h] BYREF
  google::protobuf::RepeatedPtrField<proto::GroupTriggerBin>::const_iterator __for_end_0; // [rsp+48h] [rbp-1C8h] BYREF
  const google::protobuf::Map<std::string,proto::GroupTriggerBin> *trigger_map; // [rsp+50h] [rbp-1C0h]
  const google::protobuf::Map<std::string,proto::GroupTriggerBin> *__for_range; // [rsp+58h] [rbp-1B8h]
  const google::protobuf::RepeatedPtrField<proto::GroupTriggerBin> *__for_range_0; // [rsp+60h] [rbp-1B0h]
  const google::protobuf::RepeatedPtrField<proto::GroupVariableConfigIdBin> *__for_range_1; // [rsp+68h] [rbp-1A8h]
  const google::protobuf::Map<std::string,proto::GroupVariableBin> *__for_range_2; // [rsp+70h] [rbp-1A0h]
  const google::protobuf::Map<unsigned int,proto::GroupMonsterBin> *__for_range_3; // [rsp+78h] [rbp-198h]
  const google::protobuf::Map<unsigned int,proto::GroupGadgetBin> *__for_range_4; // [rsp+80h] [rbp-190h]
  const google::protobuf::Map<unsigned int,proto::BossDieInfoBin> *__for_range_5; // [rsp+88h] [rbp-188h]
  const google::protobuf::RepeatedPtrField<proto::GroupGatherBin> *__for_range_6; // [rsp+90h] [rbp-180h]
  const google::protobuf::RepeatedPtrField<proto::GroupRefreshTimeBin> *__for_range_7; // [rsp+98h] [rbp-178h]
  const proto::GroupRefreshTimeBin *group_refresh_bin; // [rsp+A0h] [rbp-170h]
  const proto::GroupGatherBin *gather_bin; // [rsp+A8h] [rbp-168h]
  const unsigned int *p_boss_config_id; // [rsp+B0h] [rbp-160h]
  const unsigned int *p_gadget_config_id; // [rsp+B8h] [rbp-158h]
  const unsigned int *p_monster_config_id; // [rsp+C0h] [rbp-150h]
  const std::string *p_name_0; // [rsp+C8h] [rbp-148h]
  const VariableScriptConfig *variable_script_config_ptr_0; // [rsp+D0h] [rbp-140h]
  const proto::GroupVariableConfigIdBin *variable_bin; // [rsp+D8h] [rbp-138h]
  const VariableScriptConfig *variable_script_config_ptr; // [rsp+E0h] [rbp-130h]
  const std::string *name; // [rsp+E8h] [rbp-128h]
  const GroupScriptConfig *group_script_config_ptr_0; // [rsp+F0h] [rbp-120h]
  const proto::GroupTriggerBin *trigger_bin; // [rsp+F8h] [rbp-118h]
  const TriggerScriptConfig *trigger_config_0; // [rsp+100h] [rbp-110h]
  const GroupScriptConfig *group_script_config_ptr; // [rsp+108h] [rbp-108h]
  const std::string *p_name; // [rsp+110h] [rbp-100h]
  const TriggerScriptConfig *trigger_config; // [rsp+118h] [rbp-F8h]
  google::protobuf::Map<std::string,proto::GroupTriggerBin>::const_iterator __for_begin; // [rsp+120h] [rbp-F0h] BYREF
  google::protobuf::Map<std::string,proto::GroupTriggerBin>::const_iterator __for_end; // [rsp+140h] [rbp-D0h] BYREF
  common::milog::MiLogStream v107; // [rsp+160h] [rbp-B0h] BYREF
  char v108[144]; // [rsp+180h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v108;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 13 config_id:633 64 16 15 trigger_ptr:612";
  *(_QWORD *)(v3 + 16) = Group::fromBin;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)&this->io_type_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->io_type_ >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4();
  }
  if ( this->io_type_ == GROUP_IO_TYPE_FLOW )
  {
    v2 = Group::flowFromBin(this, bin);
  }
  else
  {
    if ( *(char *)(((unsigned __int64)&this->is_first_time_load >> 3) + 0x7FFF8000) < 0 )
      __asan_report_store1(&this->is_first_time_load);
    this->is_first_time_load = 0;
    trigger_map = proto::GroupBin::trigger_map[abi:cxx11](bin);
    __for_range = trigger_map;
    google::protobuf::Map<std::string,proto::GroupTriggerBin>::begin(&__for_begin, trigger_map);
    google::protobuf::Map<std::string,proto::GroupTriggerBin>::end(&__for_end, trigger_map);
    while ( google::protobuf::operator!=(&__for_begin, &__for_end) )
    {
      p_name = (const std::string *)google::protobuf::Map<std::string,proto::GroupTriggerBin>::const_iterator::operator*(&__for_begin);
      trigger_config = Group::findTriggerConfig(this, p_name);
      if ( trigger_config )
      {
        common::tools::perf::make_shared<Trigger>();
        if ( std::operator==<Trigger>((const std::shared_ptr<Trigger> *)(v3 + 64), 0LL) )
        {
          common::milog::MiLogStream::create(
            &v107,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/group/group.cpp",
            "fromBin",
            578);
          common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
            &v107,
            (const char (*)[20])"trigger_ptr is null");
          common::milog::MiLogStream::~MiLogStream(&v107);
          v2 = -1;
          v9 = 0;
        }
        else
        {
          v10 = std::__shared_ptr_access<Trigger,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Trigger,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
          if ( Trigger::fromBin(v10, (const proto::GroupTriggerBin *)&p_name[1]) )
          {
            common::milog::MiLogStream::create(
              &v107,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/group/group.cpp",
              "fromBin",
              583);
            common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(&v107, (const char (*)[14])"fromBin fails");
            common::milog::MiLogStream::~MiLogStream(&v107);
            v2 = -1;
            v9 = 0;
          }
          else
          {
            v11 = std::__shared_ptr_access<Trigger,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Trigger,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
            std::string::operator=(v11, p_name);
            if ( *(_BYTE *)(((unsigned __int64)&trigger_config->config_id >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&trigger_config->config_id >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4();
            }
            v12 = trigger_config->config_id;
            v13 = std::__shared_ptr_access<Trigger,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Trigger,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
            if ( *(_BYTE *)(((unsigned __int64)&v13->config_id >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&v13->config_id >> 3) + 0x7FFF8000) <= 3 )
            {
              v13 = (std::__shared_ptr_access<Trigger,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *)__asan_report_store4(&v13->config_id);
            }
            v13->config_id = v12;
            if ( Group::addTrigger(this, p_name, (TriggerPtr *)(v3 + 64)) )
            {
              common::milog::MiLogStream::create(
                &v107,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/group/group.cpp",
                "fromBin",
                590);
              v14 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                      &v107,
                      (const char (*)[17])"addTrigger fails");
              operator<<(v14, this);
              common::milog::MiLogStream::~MiLogStream(&v107);
            }
            v9 = 1;
          }
        }
        std::shared_ptr<Trigger>::~shared_ptr((std::shared_ptr<Trigger> *const)(v3 + 64));
        if ( v9 != 1 )
          goto LABEL_121;
      }
      else
      {
        common::milog::MiLogStream::create(
          &v107,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/group/group.cpp",
          "fromBin",
          572);
        v6 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
               &v107,
               (const char (*)[32])"findTriggerConfig fails, name: ");
        v7 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v6, p_name);
        v8 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v7, (const char (*)[9])" group: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, &this->group_id_);
        common::milog::MiLogStream::~MiLogStream(&v107);
      }
      google::protobuf::Map<std::string,proto::GroupTriggerBin>::const_iterator::operator++(&__for_begin);
    }
    __for_range_0 = proto::GroupBin::trigger_list(bin);
    __for_begin_0.it_ = google::protobuf::RepeatedPtrField<proto::GroupTriggerBin>::begin(__for_range_0).it_;
    __for_end_0.it_ = google::protobuf::RepeatedPtrField<proto::GroupTriggerBin>::end(__for_range_0).it_;
    while ( google::protobuf::internal::RepeatedPtrIterator<proto::GroupTriggerBin const>::operator!=(
              &__for_begin_0,
              &__for_end_0) )
    {
      trigger_bin = google::protobuf::internal::RepeatedPtrIterator<proto::GroupTriggerBin const>::operator*(&__for_begin_0);
      config_id = proto::GroupTriggerBin::config_id(trigger_bin);
      trigger_config_0 = Group::findTriggerConfigByConfigId(this, config_id);
      if ( trigger_config_0 )
      {
        common::tools::perf::make_shared<Trigger>();
        if ( std::operator==<Trigger>((const std::shared_ptr<Trigger> *)(v3 + 64), 0LL) )
        {
          common::milog::MiLogStream::create(
            &v107,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/group/group.cpp",
            "fromBin",
            615);
          common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
            &v107,
            (const char (*)[20])"trigger_ptr is null");
          common::milog::MiLogStream::~MiLogStream(&v107);
          v2 = -1;
          v19 = 0;
        }
        else
        {
          v20 = std::__shared_ptr_access<Trigger,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Trigger,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
          if ( Trigger::fromBin(v20, trigger_bin) )
          {
            common::milog::MiLogStream::create(
              &v107,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/group/group.cpp",
              "fromBin",
              620);
            common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(&v107, (const char (*)[14])"fromBin fails");
            common::milog::MiLogStream::~MiLogStream(&v107);
            v2 = -1;
            v19 = 0;
          }
          else
          {
            v21 = trigger_config_0;
            v22 = std::__shared_ptr_access<Trigger,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Trigger,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
            std::string::operator=(v22, v21);
            v23 = std::__shared_ptr_access<Trigger,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Trigger,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
            if ( Group::addTrigger(this, &v23->name, (TriggerPtr *)(v3 + 64)) )
            {
              common::milog::MiLogStream::create(
                &v107,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/group/group.cpp",
                "fromBin",
                626);
              v24 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                      &v107,
                      (const char (*)[17])"addTrigger fails");
              operator<<(v24, this);
              common::milog::MiLogStream::~MiLogStream(&v107);
            }
            v19 = 1;
          }
        }
        std::shared_ptr<Trigger>::~shared_ptr((std::shared_ptr<Trigger> *const)(v3 + 64));
        if ( v19 != 1 )
          goto LABEL_121;
      }
      else
      {
        group_script_config_ptr = Group::getScriptConfig(this);
        if ( group_script_config_ptr && GroupScriptConfig::isGarbageConfigId(group_script_config_ptr, config_id) )
        {
          common::milog::MiLogStream::create(
            &v107,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/group/group.cpp",
            "fromBin",
            603);
          v16 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                  &v107,
                  (const char (*)[28])"garbage trigger config_id: ");
        }
        else
        {
          common::milog::MiLogStream::create(
            &v107,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/group/group.cpp",
            "fromBin",
            607);
          v16 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
                  &v107,
                  (const char (*)[37])"findTriggerConfig fails, config_id: ");
        }
        val = proto::GroupTriggerBin::config_id(trigger_bin);
        v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, &val);
        v18 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v17, (const char (*)[8])" group:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, &this->group_id_);
        common::milog::MiLogStream::~MiLogStream(&v107);
      }
      google::protobuf::internal::RepeatedPtrIterator<proto::GroupTriggerBin const>::operator++(&__for_begin_0);
    }
    __for_range_1 = proto::GroupBin::variable_config_id_bin_list(bin);
    __for_begin_0.it_ = google::protobuf::RepeatedPtrField<proto::GroupVariableConfigIdBin>::begin(__for_range_1).it_;
    __for_end_0.it_ = google::protobuf::RepeatedPtrField<proto::GroupVariableConfigIdBin>::end(__for_range_1).it_;
    while ( google::protobuf::internal::RepeatedPtrIterator<proto::GroupVariableConfigIdBin const>::operator!=(
              (const google::protobuf::internal::RepeatedPtrIterator<const proto::GroupVariableConfigIdBin> *const)&__for_begin_0,
              (const google::protobuf::internal::RepeatedPtrIterator<const proto::GroupVariableConfigIdBin>::iterator *)&__for_end_0) )
    {
      variable_bin = google::protobuf::internal::RepeatedPtrIterator<proto::GroupVariableConfigIdBin const>::operator*((const google::protobuf::internal::RepeatedPtrIterator<const proto::GroupVariableConfigIdBin> *const)&__for_begin_0);
      *(_DWORD *)(v3 + 48) = proto::GroupVariableConfigIdBin::config_id(variable_bin);
      variable_script_config_ptr = Group::findVariableConfigByConfigId(this, *(_DWORD *)(v3 + 48));
      if ( variable_script_config_ptr )
      {
        name = &variable_script_config_ptr->name;
        val = proto::GroupVariableConfigIdBin::value(variable_bin);
        v31 = std::unordered_map<std::string,int>::emplace<std::string const&,int>(
                &this->variable_map_,
                name,
                (int *)&val,
                v29,
                v30);
        if ( !v31.second )
        {
          common::milog::MiLogStream::create(
            &v107,
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/group/group.cpp",
            "fromBin",
            653);
          v32 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                  &v107,
                  (const char (*)[20])"duplicate variable:");
          v33 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v32, name);
          operator<<(v33, this);
          common::milog::MiLogStream::~MiLogStream(&v107);
        }
        else
        {
          if ( *(_BYTE *)(((unsigned __int64)&variable_script_config_ptr->variable_type >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&variable_script_config_ptr->variable_type >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4();
          }
          if ( variable_script_config_ptr->variable_type == VARIABLE_TYPE_LOGIC_STATE )
          {
            v70 = (float)proto::GroupVariableConfigIdBin::value(variable_bin);
            v34 = std::map<std::string,float>::operator[](&this->sgv_map_, name);
            v35 = v34;
            if ( *(_BYTE *)(((unsigned __int64)v34 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)v34 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v34 >> 3) + 0x7FFF8000) )
            {
              __asan_report_store4(v34);
            }
            *v35 = v70;
          }
        }
      }
      else
      {
        group_script_config_ptr_0 = Group::getScriptConfig(this);
        if ( group_script_config_ptr_0
          && GroupScriptConfig::isGarbageVariableConfigId(group_script_config_ptr_0, *(_DWORD *)(v3 + 48)) )
        {
          common::milog::MiLogStream::create(
            &v107,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/group/group.cpp",
            "fromBin",
            640);
          v26 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                  &v107,
                  (const char (*)[29])"garbage variable config_id: ");
        }
        else
        {
          common::milog::MiLogStream::create(
            &v107,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/group/group.cpp",
            "fromBin",
            644);
          v26 = common::milog::MiLogStream::operator<<<char [48],(char *[48])0>(
                  &v107,
                  (const char (*)[48])"findVariableConfigByConfigId fails, config_id: ");
        }
        v27 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v26,
                (const unsigned int *)(v3 + 48));
        v28 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v27, (const char (*)[8])" group:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v28, &this->group_id_);
        common::milog::MiLogStream::~MiLogStream(&v107);
      }
      google::protobuf::internal::RepeatedPtrIterator<proto::GroupVariableConfigIdBin const>::operator++((google::protobuf::internal::RepeatedPtrIterator<const proto::GroupVariableConfigIdBin> *const)&__for_begin_0);
    }
    __for_range_2 = proto::GroupBin::variable_map[abi:cxx11](bin);
    google::protobuf::Map<std::string,proto::GroupVariableBin>::begin(
      (google::protobuf::Map<std::string,proto::GroupVariableBin>::const_iterator *)&__for_begin,
      __for_range_2);
    google::protobuf::Map<std::string,proto::GroupVariableBin>::end(
      (google::protobuf::Map<std::string,proto::GroupVariableBin>::const_iterator *)&__for_end,
      __for_range_2);
    while ( google::protobuf::operator!=(
              (const google::protobuf::Map<std::string,proto::GroupVariableBin>::const_iterator *)&__for_begin,
              (const google::protobuf::Map<std::string,proto::GroupVariableBin>::const_iterator *)&__for_end) )
    {
      p_name_0 = (const std::string *)google::protobuf::Map<std::string,proto::GroupVariableBin>::const_iterator::operator*((const google::protobuf::Map<std::string,proto::GroupVariableBin>::const_iterator *const)&__for_begin);
      variable_script_config_ptr_0 = Group::findVariableConfig(this, p_name_0);
      if ( variable_script_config_ptr_0 )
      {
        val = proto::GroupVariableBin::value((const proto::GroupVariableBin *const)&p_name_0[1]);
        v41 = std::unordered_map<std::string,int>::emplace<std::string const&,int>(
                &this->variable_map_,
                p_name_0,
                (int *)&val,
                v39,
                v40);
        if ( !v41.second )
        {
          common::milog::MiLogStream::create(
            &v107,
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/group/group.cpp",
            "fromBin",
            673);
          v42 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                  &v107,
                  (const char (*)[20])"duplicate variable:");
          v43 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v42, p_name_0);
          operator<<(v43, this);
          common::milog::MiLogStream::~MiLogStream(&v107);
        }
        else
        {
          if ( *(_BYTE *)(((unsigned __int64)&variable_script_config_ptr_0->variable_type >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&variable_script_config_ptr_0->variable_type >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4();
          }
          if ( variable_script_config_ptr_0->variable_type == VARIABLE_TYPE_LOGIC_STATE )
          {
            v71 = (float)proto::GroupVariableBin::value((const proto::GroupVariableBin *const)&p_name_0[1]);
            v44 = std::map<std::string,float>::operator[](&this->sgv_map_, p_name_0);
            v45 = v44;
            if ( *(_BYTE *)(((unsigned __int64)v44 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)v44 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v44 >> 3) + 0x7FFF8000) )
            {
              __asan_report_store4(v44);
            }
            *v45 = v71;
          }
        }
      }
      else
      {
        common::milog::MiLogStream::create(
          &v107,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/group/group.cpp",
          "fromBin",
          667);
        v36 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                &v107,
                (const char (*)[33])"findVariableConfig fails, name: ");
        v37 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v36, p_name_0);
        v38 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v37, (const char (*)[12])" group_id: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v38, &this->group_id_);
        common::milog::MiLogStream::~MiLogStream(&v107);
      }
      google::protobuf::Map<std::string,proto::GroupVariableBin>::const_iterator::operator++((google::protobuf::Map<std::string,proto::GroupVariableBin>::const_iterator *const)&__for_begin);
    }
    for ( idx = 0; ; ++idx )
    {
      v46 = proto::GroupBin::del_monster_list_size(bin);
      if ( idx >= v46 )
        break;
      *(_DWORD *)(v3 + 48) = 2;
      v47 = std::map<proto::ProtEntityType,std::set<unsigned int>>::operator[](
              &this->deleted_entity_record_map_,
              (std::map<proto::ProtEntityType,std::set<unsigned int>>::key_type *)(v3 + 48));
      val = proto::GroupBin::del_monster_list(bin, idx);
      std::set<unsigned int>::insert(v47, &val);
    }
    for ( idx_0 = 0; ; ++idx_0 )
    {
      v48 = proto::GroupBin::del_gadget_list_size(bin);
      if ( idx_0 >= v48 )
        break;
      *(_DWORD *)(v3 + 48) = 4;
      v49 = std::map<proto::ProtEntityType,std::set<unsigned int>>::operator[](
              &this->deleted_entity_record_map_,
              (std::map<proto::ProtEntityType,std::set<unsigned int>>::key_type *)(v3 + 48));
      val = proto::GroupBin::del_gadget_list(bin, idx_0);
      std::set<unsigned int>::insert(v49, &val);
    }
    __for_range_3 = proto::GroupBin::monster_map(bin);
    google::protobuf::Map<unsigned int,proto::GroupMonsterBin>::begin(
      (google::protobuf::Map<unsigned int,proto::GroupMonsterBin>::const_iterator *)&__for_begin,
      __for_range_3);
    google::protobuf::Map<unsigned int,proto::GroupMonsterBin>::end(
      (google::protobuf::Map<unsigned int,proto::GroupMonsterBin>::const_iterator *)&__for_end,
      __for_range_3);
    while ( google::protobuf::operator!=(
              (const google::protobuf::Map<unsigned int,proto::GroupMonsterBin>::const_iterator *)&__for_begin,
              (const google::protobuf::Map<unsigned int,proto::GroupMonsterBin>::const_iterator *)&__for_end) )
    {
      p_monster_config_id = (const unsigned int *)google::protobuf::Map<unsigned int,proto::GroupMonsterBin>::const_iterator::operator*((const google::protobuf::Map<unsigned int,proto::GroupMonsterBin>::const_iterator *const)&__for_begin);
      v50 = (const proto::GroupMonsterBin *)(p_monster_config_id + 2);
      v51 = std::map<unsigned int,proto::GroupMonsterBin>::operator[](&this->monster_bin_map_, p_monster_config_id);
      proto::GroupMonsterBin::operator=(v51, v50);
      google::protobuf::Map<unsigned int,proto::GroupMonsterBin>::const_iterator::operator++((google::protobuf::Map<unsigned int,proto::GroupMonsterBin>::const_iterator *const)&__for_begin);
    }
    __for_range_4 = proto::GroupBin::gadget_map(bin);
    google::protobuf::Map<unsigned int,proto::GroupGadgetBin>::begin(
      (google::protobuf::Map<unsigned int,proto::GroupGadgetBin>::const_iterator *)&__for_begin,
      __for_range_4);
    google::protobuf::Map<unsigned int,proto::GroupGadgetBin>::end(
      (google::protobuf::Map<unsigned int,proto::GroupGadgetBin>::const_iterator *)&__for_end,
      __for_range_4);
    while ( google::protobuf::operator!=(
              (const google::protobuf::Map<unsigned int,proto::GroupGadgetBin>::const_iterator *)&__for_begin,
              (const google::protobuf::Map<unsigned int,proto::GroupGadgetBin>::const_iterator *)&__for_end) )
    {
      p_gadget_config_id = (const unsigned int *)google::protobuf::Map<unsigned int,proto::GroupGadgetBin>::const_iterator::operator*((const google::protobuf::Map<unsigned int,proto::GroupGadgetBin>::const_iterator *const)&__for_begin);
      v52 = (const proto::GroupGadgetBin *)(p_gadget_config_id + 2);
      v53 = std::map<unsigned int,proto::GroupGadgetBin>::operator[](&this->gadget_bin_map_, p_gadget_config_id);
      proto::GroupGadgetBin::operator=(v53, v52);
      google::protobuf::Map<unsigned int,proto::GroupGadgetBin>::const_iterator::operator++((google::protobuf::Map<unsigned int,proto::GroupGadgetBin>::const_iterator *const)&__for_begin);
    }
    v54 = proto::GroupBin::suite_index(bin);
    if ( *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_store4(&this->suite_index_);
    }
    this->suite_index_ = v54;
    v55 = proto::GroupBin::target_suite_index(bin);
    if ( *(_BYTE *)(((unsigned __int64)&this->target_suite_index_ >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->target_suite_index_ >> 3)
                                                          + 0x7FFF8000) )
    {
      __asan_report_store4(&this->target_suite_index_);
    }
    this->target_suite_index_ = v55;
    std::unordered_set<unsigned int>::clear(&this->show_cutscene_chest_set_);
    for ( idx_1 = 0; ; ++idx_1 )
    {
      v56 = proto::GroupBin::show_cutscene_chest_list_size(bin);
      if ( idx_1 >= v56 )
        break;
      val = proto::GroupBin::show_cutscene_chest_list(bin, idx_1);
      std::unordered_set<unsigned int>::insert(&this->show_cutscene_chest_set_, &val);
    }
    std::map<unsigned int,proto::BossDieInfoBin>::clear(&this->boss_die_info_map_);
    __for_range_5 = proto::GroupBin::boss_die_info_map(bin);
    google::protobuf::Map<unsigned int,proto::BossDieInfoBin>::begin(
      (google::protobuf::Map<unsigned int,proto::BossDieInfoBin>::const_iterator *)&__for_begin,
      __for_range_5);
    google::protobuf::Map<unsigned int,proto::BossDieInfoBin>::end(
      (google::protobuf::Map<unsigned int,proto::BossDieInfoBin>::const_iterator *)&__for_end,
      __for_range_5);
    while ( google::protobuf::operator!=(
              (const google::protobuf::Map<unsigned int,proto::BossDieInfoBin>::const_iterator *)&__for_begin,
              (const google::protobuf::Map<unsigned int,proto::BossDieInfoBin>::const_iterator *)&__for_end) )
    {
      p_boss_config_id = (const unsigned int *)google::protobuf::Map<unsigned int,proto::BossDieInfoBin>::const_iterator::operator*((const google::protobuf::Map<unsigned int,proto::BossDieInfoBin>::const_iterator *const)&__for_begin);
      v57 = (const proto::BossDieInfoBin *)(p_boss_config_id + 2);
      v58 = std::map<unsigned int,proto::BossDieInfoBin>::operator[](&this->boss_die_info_map_, p_boss_config_id);
      proto::BossDieInfoBin::operator=(v58, v57);
      google::protobuf::Map<unsigned int,proto::BossDieInfoBin>::const_iterator::operator++((google::protobuf::Map<unsigned int,proto::BossDieInfoBin>::const_iterator *const)&__for_begin);
    }
    __for_range_6 = proto::GroupBin::gather_refresh_time_list(bin);
    __for_begin_0.it_ = google::protobuf::RepeatedPtrField<proto::GroupGatherBin>::begin(__for_range_6).it_;
    __for_end_0.it_ = google::protobuf::RepeatedPtrField<proto::GroupGatherBin>::end(__for_range_6).it_;
    while ( google::protobuf::internal::RepeatedPtrIterator<proto::GroupGatherBin const>::operator!=(
              (const google::protobuf::internal::RepeatedPtrIterator<const proto::GroupGatherBin> *const)&__for_begin_0,
              (const google::protobuf::internal::RepeatedPtrIterator<const proto::GroupGatherBin>::iterator *)&__for_end_0) )
    {
      gather_bin = google::protobuf::internal::RepeatedPtrIterator<proto::GroupGatherBin const>::operator*((const google::protobuf::internal::RepeatedPtrIterator<const proto::GroupGatherBin> *const)&__for_begin_0);
      refresh_time = proto::GroupGatherBin::last_refresh_time(gather_bin);
      val = proto::GroupGatherBin::config_id(gather_bin);
      v60 = std::map<unsigned int,unsigned int>::operator[](&this->gather_refresh_time_map_, &val);
      v61 = v60;
      if ( *(_BYTE *)(((unsigned __int64)v60 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v60 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v60 >> 3) + 0x7FFF8000) )
      {
        __asan_report_store4(v60);
      }
      *v61 = refresh_time;
      google::protobuf::internal::RepeatedPtrIterator<proto::GroupGatherBin const>::operator++((google::protobuf::internal::RepeatedPtrIterator<const proto::GroupGatherBin> *const)&__for_begin_0);
    }
    __for_range_7 = proto::GroupBin::group_refresh_list(bin);
    __for_begin_0.it_ = google::protobuf::RepeatedPtrField<proto::GroupRefreshTimeBin>::begin(__for_range_7).it_;
    __for_end_0.it_ = google::protobuf::RepeatedPtrField<proto::GroupRefreshTimeBin>::end(__for_range_7).it_;
    while ( google::protobuf::internal::RepeatedPtrIterator<proto::GroupRefreshTimeBin const>::operator!=(
              (const google::protobuf::internal::RepeatedPtrIterator<const proto::GroupRefreshTimeBin> *const)&__for_begin_0,
              (const google::protobuf::internal::RepeatedPtrIterator<const proto::GroupRefreshTimeBin>::iterator *)&__for_end_0) )
    {
      group_refresh_bin = google::protobuf::internal::RepeatedPtrIterator<proto::GroupRefreshTimeBin const>::operator*((const google::protobuf::internal::RepeatedPtrIterator<const proto::GroupRefreshTimeBin> *const)&__for_begin_0);
      v62 = proto::GroupRefreshTimeBin::last_refresh_time(group_refresh_bin);
      val = proto::GroupRefreshTimeBin::save_type(group_refresh_bin);
      v63 = std::map<data::GatherSaveType,unsigned int>::operator[](
              &this->group_refresh_time_map_,
              (std::map<data::GatherSaveType,unsigned int>::key_type *)&val);
      v64 = v63;
      if ( *(_BYTE *)(((unsigned __int64)v63 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v63 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v63 >> 3) + 0x7FFF8000) )
      {
        __asan_report_store4(v63);
      }
      *v64 = v62;
      google::protobuf::internal::RepeatedPtrIterator<proto::GroupRefreshTimeBin const>::operator++((google::protobuf::internal::RepeatedPtrIterator<const proto::GroupRefreshTimeBin> *const)&__for_begin_0);
    }
    Group::cleanGatherTimeoutRefreshTime(this);
    v65 = proto::GroupBin::revise_level(bin);
    if ( *(_BYTE *)(((unsigned __int64)&this->revise_level_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->revise_level_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_store4(&this->revise_level_);
    }
    this->revise_level_ = v65;
    ChallengeComp::fromBin(&this->challenge_comp_, bin);
    v66 = proto::GroupBin::last_refresh_time(bin);
    if ( *(_BYTE *)(((unsigned __int64)&this->last_refresh_time_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->last_refresh_time_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_store4(&this->last_refresh_time_);
    }
    this->last_refresh_time_ = v66;
    is_replaceable = proto::GroupBin::is_replaceable(bin);
    if ( *(char *)(((unsigned __int64)&this->is_replaceable_ >> 3) + 0x7FFF8000) < 0 )
      __asan_report_store1(&this->is_replaceable_);
    this->is_replaceable_ = is_replaceable;
    v68 = proto::GroupBin::replaceable_version(bin);
    if ( *(_BYTE *)(((unsigned __int64)&this->replaceable_version_ >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)this + 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->replaceable_version_ >> 3)
                                                          + 0x7FFF8000) )
    {
      __asan_report_store4(&this->replaceable_version_);
    }
    this->replaceable_version_ = v68;
    v2 = 0;
  }
LABEL_121:
  result = v2;
  if ( v108 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 727: range 0000000015FB30DA-0000000015FB3313
int32_t __cdecl Group::flowToBin(const Group *const this, proto::GroupBin *bin)
{
  google::protobuf::uint32 *v2; // rdx
  uint32_t RefreshTime; // edx
  std::unordered_set<unsigned int>::const_iterator __for_begin; // [rsp+18h] [rbp-18h] BYREF
  std::unordered_set<unsigned int>::const_iterator __for_end; // [rsp+20h] [rbp-10h] BYREF
  const std::unordered_set<unsigned int> *__for_range; // [rsp+28h] [rbp-8h]

  if ( *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4();
  }
  proto::GroupBin::set_suite_index(bin, this->suite_index_);
  __for_range = &this->show_cutscene_chest_set_;
  __for_begin._M_cur = std::unordered_set<unsigned int>::begin(&this->show_cutscene_chest_set_)._M_cur;
  __for_end._M_cur = std::unordered_set<unsigned int>::end(&this->show_cutscene_chest_set_)._M_cur;
  while ( std::__detail::operator!=<unsigned int,false>(&__for_begin, &__for_end) )
  {
    v2 = (google::protobuf::uint32 *)std::__detail::_Node_const_iterator<unsigned int,true,false>::operator*(&__for_begin);
    if ( *(_BYTE *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v2 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4();
    }
    proto::GroupBin::add_show_cutscene_chest_list(bin, *v2);
    std::__detail::_Node_const_iterator<unsigned int,true,false>::operator++(&__for_begin);
  }
  if ( *(_BYTE *)(((unsigned __int64)&this->revise_level_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->revise_level_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4();
  }
  proto::GroupBin::set_revise_level(bin, this->revise_level_);
  ChallengeComp::toBin(&this->challenge_comp_, bin);
  RefreshTime = Group::getToBinLastRefreshTime(this);
  proto::GroupBin::set_last_refresh_time(bin, RefreshTime);
  if ( *(char *)(((unsigned __int64)&this->is_replaceable_ >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&this->is_replaceable_);
  proto::GroupBin::set_is_replaceable(bin, this->is_replaceable_);
  if ( *(_BYTE *)(((unsigned __int64)&this->replaceable_version_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->replaceable_version_ >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_load4();
  }
  proto::GroupBin::set_replaceable_version(bin, this->replaceable_version_);
  return 0;
};

// Line 743: range 0000000015FB3314-0000000015FB4A51
int32_t __cdecl Group::toBin(const Group *const this, proto::GroupBin *bin)
{
  int32_t v2; // r14d
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  char v6; // al
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  int v9; // r15d
  unsigned __int64 v10; // rax
  unsigned __int64 v11; // rdx
  std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  common::milog::MiLogStream *v13; // rdx
  int v14; // r15d
  std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  common::milog::MiLogStream *v17; // rdx
  common::milog::MiLogStream *v18; // rdx
  int v19; // r15d
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  common::milog::MiLogStream *v22; // rdx
  int v23; // r15d
  proto::GroupGadgetBin *v24; // r15
  proto::GroupGadgetBin *v25; // rax
  std::__shared_ptr_access<Trigger,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v26; // rax
  common::milog::MiLogStream *v27; // rdx
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rax
  google::protobuf::uint32 *v31; // rdx
  google::protobuf::uint32 *v32; // rdx
  google::protobuf::uint32 *v33; // rdx
  proto::BossDieInfoBin *v34; // rax
  uint32_t RefreshTime; // edx
  int32_t result; // eax
  proto::ProtEntityType entity_type; // [rsp+2Ch] [rbp-274h]
  std::map<unsigned int,std::shared_ptr<Entity>>::const_iterator __for_begin; // [rsp+30h] [rbp-270h] BYREF
  std::map<unsigned int,std::shared_ptr<Entity>>::const_iterator __for_end; // [rsp+38h] [rbp-268h] BYREF
  const GroupScriptConfig *group_script_config_ptr; // [rsp+40h] [rbp-260h]
  google::protobuf::Map<unsigned int,proto::GroupMonsterBin> *monster_map; // [rsp+48h] [rbp-258h]
  google::protobuf::Map<unsigned int,proto::GroupGadgetBin> *gadget_map; // [rsp+50h] [rbp-250h]
  const std::map<unsigned int,std::shared_ptr<Entity>> *__for_range; // [rsp+58h] [rbp-248h]
  const std::unordered_map<std::string,std::shared_ptr<Trigger>> *__for_range_0; // [rsp+60h] [rbp-240h]
  google::protobuf::Map<std::string,proto::GroupVariableBin> *variable_map; // [rsp+68h] [rbp-238h]
  const std::unordered_map<std::string,int> *__for_range_1; // [rsp+70h] [rbp-230h]
  const std::set<unsigned int> *entity_set; // [rsp+78h] [rbp-228h]
  const std::set<unsigned int> *__for_range_2; // [rsp+80h] [rbp-220h]
  const std::set<unsigned int> *entity_set_0; // [rsp+88h] [rbp-218h]
  const std::set<unsigned int> *__for_range_3; // [rsp+90h] [rbp-210h]
  const std::unordered_set<unsigned int> *__for_range_4; // [rsp+98h] [rbp-208h]
  google::protobuf::Map<unsigned int,proto::BossDieInfoBin> *boss_die_map; // [rsp+A0h] [rbp-200h]
  const std::map<unsigned int,proto::BossDieInfoBin> *__for_range_5; // [rsp+A8h] [rbp-1F8h]
  const std::map<unsigned int,unsigned int> *__for_range_6; // [rsp+B0h] [rbp-1F0h]
  const std::map<data::GatherSaveType,unsigned int> *__for_range_7; // [rsp+B8h] [rbp-1E8h]
  const std::pair<const data::GatherSaveType,unsigned int> *v56; // [rsp+C0h] [rbp-1E0h]
  std::tuple_element<0,const std::pair<const data::GatherSaveType,unsigned int> >::type *save_type; // [rsp+C8h] [rbp-1D8h]
  std::tuple_element<1,const std::pair<const data::GatherSaveType,unsigned int> >::type *refresh_time_0; // [rsp+D0h] [rbp-1D0h]
  proto::GroupRefreshTimeBin *group_refresh_bin; // [rsp+D8h] [rbp-1C8h]
  const std::pair<unsigned int const,unsigned int> *v60; // [rsp+E0h] [rbp-1C0h]
  std::tuple_element<0,const std::pair<unsigned int const,unsigned int> >::type *config_id_2; // [rsp+E8h] [rbp-1B8h]
  std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *refresh_time; // [rsp+F0h] [rbp-1B0h]
  proto::GroupGatherBin *gather_bin; // [rsp+F8h] [rbp-1A8h]
  const std::pair<unsigned int const,proto::BossDieInfoBin> *v64; // [rsp+100h] [rbp-1A0h]
  std::tuple_element<0,const std::pair<unsigned int const,proto::BossDieInfoBin> >::type *boss_config_id; // [rsp+108h] [rbp-198h]
  std::tuple_element<1,const std::pair<unsigned int const,proto::BossDieInfoBin> >::type *die_info; // [rsp+110h] [rbp-190h]
  const std::pair<const std::string,int> *v67; // [rsp+118h] [rbp-188h]
  std::tuple_element<0,const std::pair<const std::string,int> >::type *name_0; // [rsp+120h] [rbp-180h]
  std::tuple_element<1,const std::pair<const std::string,int> >::type *value; // [rsp+128h] [rbp-178h]
  const VariableScriptConfig *variable_script_config_ptr; // [rsp+130h] [rbp-170h]
  proto::GroupVariableConfigIdBin *variable_bin; // [rsp+138h] [rbp-168h]
  const std::pair<const std::string,std::shared_ptr<Trigger> > *v72; // [rsp+140h] [rbp-160h]
  std::tuple_element<0,const std::pair<const std::string,std::shared_ptr<Trigger> > >::type *name; // [rsp+148h] [rbp-158h]
  std::tuple_element<1,const std::pair<const std::string,std::shared_ptr<Trigger> > >::type *trigger_ptr; // [rsp+150h] [rbp-150h]
  proto::GroupTriggerBin *trigger_bin; // [rsp+158h] [rbp-148h]
  const std::pair<unsigned int const,std::shared_ptr<Entity> > *p; // [rsp+160h] [rbp-140h]
  proto::GroupMonsterBin *monster_bin; // [rsp+168h] [rbp-138h]
  common::milog::MiLogStream v78; // [rsp+170h] [rbp-130h] BYREF
  char v79[272]; // [rsp+190h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v79;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 32 4 13 config_id:772 48 8 6 it:866 80 16 14 entity_ptr:768 112 16 14 gadget_ptr:806 144 48 14 gadget_bin:823";
  *(_QWORD *)(v3 + 16) = Group::toBin;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61956;
  v5[536862721] = -234881024;
  v5[536862722] = 62194;
  v5[536862723] = 62194;
  v5[536862724] = 62194;
  v5[536862726] = -202116109;
  if ( Group::getGroupType(this) != DYNAMIC )
    goto LABEL_9;
  if ( *(char *)(((unsigned __int64)&this->is_unregister_cleared >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&this->is_unregister_cleared);
  if ( this->is_unregister_cleared )
    v6 = 1;
  else
LABEL_9:
    v6 = 0;
  if ( v6 )
  {
    v2 = 0;
    goto LABEL_126;
  }
  if ( *(_BYTE *)(((unsigned __int64)&this->io_type_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->io_type_ >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4();
  }
  if ( this->io_type_ == GROUP_IO_TYPE_FLOW )
  {
    v2 = Group::flowToBin(this, bin);
    goto LABEL_126;
  }
  if ( *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4();
  }
  proto::GroupBin::set_suite_index(bin, this->suite_index_);
  if ( *(_BYTE *)(((unsigned __int64)&this->target_suite_index_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->target_suite_index_ >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_load4();
  }
  proto::GroupBin::set_target_suite_index(bin, this->target_suite_index_);
  group_script_config_ptr = Group::getScriptConfig(this);
  if ( !group_script_config_ptr )
  {
    common::milog::MiLogStream::create(
      &v78,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "toBin",
      761);
    v7 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(&v78, (const char (*)[11])"group_id: ");
    v8 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, &this->group_id_);
    common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(v8, (const char (*)[24])" getScriptConfig failed");
    common::milog::MiLogStream::~MiLogStream(&v78);
    v2 = 0;
    goto LABEL_126;
  }
  monster_map = proto::GroupBin::mutable_monster_map(bin);
  gadget_map = proto::GroupBin::mutable_gadget_map(bin);
  __for_range = &this->entity_map_;
  __for_begin._M_node = std::map<unsigned int,std::shared_ptr<Entity>>::begin(&this->entity_map_)._M_node;
  __for_end._M_node = std::map<unsigned int,std::shared_ptr<Entity>>::end(&this->entity_map_)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    p = std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::shared_ptr<Entity>>>::operator*(&__for_begin);
    std::shared_ptr<Entity>::shared_ptr((std::shared_ptr<Entity> *const)(v3 + 80), &p->second);
    if ( std::operator==<Entity>((const std::shared_ptr<Entity> *)(v3 + 80), 0LL) )
    {
      v9 = 0;
    }
    else
    {
      v10 = (unsigned __int64)std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80));
      if ( *(_BYTE *)((v10 >> 3) + 0x7FFF8000) )
        v10 = __asan_report_load8();
      v11 = *(_QWORD *)v10 + 24LL;
      if ( *(_BYTE *)((v11 >> 3) + 0x7FFF8000) )
        v10 = __asan_report_load8();
      entity_type = (*(unsigned int (__fastcall **)(unsigned __int64))v11)(v10);
      v12 = std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80));
      *(_DWORD *)(v3 + 32) = Entity::getConfigId(v12);
      if ( entity_type == PROT_ENTITY_MONSTER )
      {
        std::dynamic_pointer_cast<Monster,Entity>((const std::shared_ptr<Entity> *)(v3 + 112));
        if ( std::operator==<Monster>((const std::shared_ptr<Monster> *)(v3 + 112), 0LL) )
        {
          common::milog::MiLogStream::create(
            &v78,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/group/group.cpp",
            "toBin",
            780);
          v13 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                  &v78,
                  (const char (*)[20])"monster_ptr is null");
          operator<<(v13, this);
          common::milog::MiLogStream::~MiLogStream(&v78);
          v2 = -1;
          v14 = 0;
        }
        else
        {
          v15 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
          if ( Monster::getMonsterPoolId(v15) )
          {
            v14 = 1;
          }
          else if ( GroupScriptConfig::findMonsterConfig(group_script_config_ptr, *(_DWORD *)(v3 + 32))
                 || GroupScriptConfig::isGarbageConfigId(group_script_config_ptr, *(_DWORD *)(v3 + 32)) )
          {
            monster_bin = google::protobuf::Map<unsigned int,proto::GroupMonsterBin>::operator[](
                            monster_map,
                            (const google::protobuf::Map<unsigned int,proto::GroupMonsterBin>::key_type *)(v3 + 32));
            v16 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
            if ( Monster::toBin(v16, monster_bin) )
            {
              common::milog::MiLogStream::create(
                &v78,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/group/group.cpp",
                "toBin",
                799);
              v17 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                      &v78,
                      (const char (*)[12])"toBin fails");
              operator<<(v17, this);
              common::milog::MiLogStream::~MiLogStream(&v78);
              v2 = -1;
              v14 = 0;
            }
            else
            {
              v14 = 2;
            }
          }
          else
          {
            v14 = 1;
          }
        }
        std::shared_ptr<Monster>::~shared_ptr((std::shared_ptr<Monster> *const)(v3 + 112));
        if ( v14 )
        {
          if ( v14 != 1 )
            goto LABEL_66;
          v9 = 0;
        }
        else
        {
          v9 = 1;
        }
      }
      else
      {
        if ( entity_type != PROT_ENTITY_GADGET )
          goto LABEL_66;
        std::dynamic_pointer_cast<Gadget,Entity>((const std::shared_ptr<Entity> *)(v3 + 112));
        if ( std::operator==<Gadget>((const std::shared_ptr<Gadget> *)(v3 + 112), 0LL) )
        {
          common::milog::MiLogStream::create(
            &v78,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/group/group.cpp",
            "toBin",
            809);
          v18 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                  &v78,
                  (const char (*)[19])"gadget_ptr is null");
          operator<<(v18, this);
          common::milog::MiLogStream::~MiLogStream(&v78);
          v2 = -1;
          v19 = 0;
        }
        else if ( GroupScriptConfig::findGadgetConfig(group_script_config_ptr, *(_DWORD *)(v3 + 32))
               || GroupScriptConfig::isGarbageConfigId(group_script_config_ptr, *(_DWORD *)(v3 + 32)) )
        {
          v20 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
          if ( !Gadget::isNeedSave(v20) )
          {
            v19 = 1;
          }
          else
          {
            proto::GroupGadgetBin::GroupGadgetBin((proto::GroupGadgetBin *const)(v3 + 144));
            v21 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
            if ( Gadget::toBin(v21, (proto::GroupGadgetBin *)(v3 + 144)) )
            {
              common::milog::MiLogStream::create(
                &v78,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/group/group.cpp",
                "toBin",
                826);
              v22 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                      &v78,
                      (const char (*)[12])"toBin fails");
              operator<<(v22, this);
              common::milog::MiLogStream::~MiLogStream(&v78);
              v2 = -1;
              v23 = 0;
            }
            else
            {
              v24 = std::move<proto::GroupGadgetBin &>((proto::GroupGadgetBin *)(v3 + 144));
              v25 = google::protobuf::Map<unsigned int,proto::GroupGadgetBin>::operator[](
                      gadget_map,
                      (const google::protobuf::Map<unsigned int,proto::GroupGadgetBin>::key_type *)(v3 + 32));
              proto::GroupGadgetBin::operator=(v25, v24);
              v23 = 1;
            }
            proto::GroupGadgetBin::~GroupGadgetBin((proto::GroupGadgetBin *const)(v3 + 144));
            if ( v23 )
              v19 = 2;
            else
              v19 = 0;
          }
        }
        else
        {
          v19 = 1;
        }
        std::shared_ptr<Gadget>::~shared_ptr((std::shared_ptr<Gadget> *const)(v3 + 112));
        if ( v19 )
        {
          if ( v19 != 1 )
          {
LABEL_66:
            v9 = 2;
            goto LABEL_67;
          }
          v9 = 0;
        }
        else
        {
          v9 = 1;
        }
      }
    }
LABEL_67:
    std::shared_ptr<Entity>::~shared_ptr((std::shared_ptr<Entity> *const)(v3 + 80));
    if ( v9 && v9 != 2 )
      goto LABEL_126;
    std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::shared_ptr<Entity>>>::operator++(&__for_begin);
  }
  __for_range_0 = &this->trigger_map_;
  __for_begin._M_node = (std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::shared_ptr<Entity> > >::_Base_ptr)std::unordered_map<std::string,std::shared_ptr<Trigger>>::begin(&this->trigger_map_)._M_cur;
  __for_end._M_node = (std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::shared_ptr<Entity> > >::_Base_ptr)std::unordered_map<std::string,std::shared_ptr<Trigger>>::end(__for_range_0)._M_cur;
  while ( std::__detail::operator!=<std::pair<std::string const,std::shared_ptr<Trigger>>,true>(
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<Trigger> >,true> *)&__for_begin,
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<Trigger> >,true> *)&__for_end) )
  {
    v72 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<Trigger>>,false,true>::operator*((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<Trigger> >,false,true> *const)&__for_begin);
    name = std::get<0ul,std::string const,std::shared_ptr<Trigger>>(v72);
    trigger_ptr = (std::tuple_element<1,const std::pair<const std::string,std::shared_ptr<Trigger> > >::type *)std::get<1ul,std::string const,std::shared_ptr<Trigger>>(v72);
    trigger_bin = proto::GroupBin::add_trigger_list(bin);
    v26 = std::__shared_ptr_access<Trigger,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Trigger,(__gnu_cxx::_Lock_policy)2,false,false> *const)trigger_ptr);
    if ( Trigger::toBin(v26, trigger_bin) )
    {
      common::milog::MiLogStream::create(
        &v78,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/group/group.cpp",
        "toBin",
        842);
      v27 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(&v78, (const char (*)[12])"toBin fails");
      operator<<(v27, this);
      common::milog::MiLogStream::~MiLogStream(&v78);
      v2 = -1;
      goto LABEL_126;
    }
    std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<Trigger>>,false,true>::operator++((std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<Trigger> >,false,true> *const)&__for_begin);
  }
  variable_map = proto::GroupBin::mutable_variable_map[abi:cxx11](bin);
  __for_range_1 = &this->variable_map_;
  __for_begin._M_node = (std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::shared_ptr<Entity> > >::_Base_ptr)std::unordered_map<std::string,int>::begin(&this->variable_map_)._M_cur;
  __for_end._M_node = (std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::shared_ptr<Entity> > >::_Base_ptr)std::unordered_map<std::string,int>::end(__for_range_1)._M_cur;
  while ( std::__detail::operator!=<std::pair<std::string const,int>,true>(
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,int>,true> *)&__for_begin,
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,int>,true> *)&__for_end) )
  {
    v67 = std::__detail::_Node_const_iterator<std::pair<std::string const,int>,false,true>::operator*((const std::__detail::_Node_const_iterator<std::pair<const std::string,int>,false,true> *const)&__for_begin);
    name_0 = std::get<0ul,std::string const,int>(v67);
    value = (std::tuple_element<1,const std::pair<const std::string,int> >::type *)std::get<1ul,std::string const,int>(v67);
    variable_script_config_ptr = Group::findVariableConfig(this, name_0);
    if ( variable_script_config_ptr )
    {
      variable_bin = proto::GroupBin::add_variable_config_id_bin_list(bin);
      if ( *(_BYTE *)(((unsigned __int64)variable_script_config_ptr >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)variable_script_config_ptr >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4();
      }
      proto::GroupVariableConfigIdBin::set_config_id(variable_bin, variable_script_config_ptr->config_id);
      if ( *(_BYTE *)(((unsigned __int64)value >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)value & 7) + 3) >= *(_BYTE *)(((unsigned __int64)value >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4();
      }
      proto::GroupVariableConfigIdBin::set_value(variable_bin, *value);
    }
    else
    {
      common::milog::MiLogStream::create(
        &v78,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/group/group.cpp",
        "toBin",
        862);
      v28 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
              &v78,
              (const char (*)[33])"findVariableConfig fails, name: ");
      v29 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v28, name_0);
      v30 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v29, (const char (*)[12])" group_id: ");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v30, &this->group_id_);
      common::milog::MiLogStream::~MiLogStream(&v78);
    }
    std::__detail::_Node_const_iterator<std::pair<std::string const,int>,false,true>::operator++((std::__detail::_Node_const_iterator<std::pair<const std::string,int>,false,true> *const)&__for_begin);
  }
  *(_DWORD *)(v3 + 32) = 2;
  *(std::map<proto::ProtEntityType,std::set<unsigned int>>::const_iterator *)(v3 + 48) = std::map<proto::ProtEntityType,std::set<unsigned int>>::find(
                                                                                           &this->deleted_entity_record_map_,
                                                                                           (const std::map<proto::ProtEntityType,std::set<unsigned int>>::key_type *)(v3 + 32));
  __for_end._M_node = std::map<proto::ProtEntityType,std::set<unsigned int>>::end(&this->deleted_entity_record_map_)._M_node;
  if ( std::operator!=(
         (const std::_Rb_tree_const_iterator<std::pair<const proto::ProtEntityType,std::set<unsigned int> > >::_Self *)(v3 + 48),
         (const std::_Rb_tree_const_iterator<std::pair<const proto::ProtEntityType,std::set<unsigned int> > >::_Self *)&__for_end) )
  {
    entity_set = &std::_Rb_tree_const_iterator<std::pair<proto::ProtEntityType const,std::set<unsigned int>>>::operator->((const std::_Rb_tree_const_iterator<std::pair<const proto::ProtEntityType,std::set<unsigned int> > > *const)(v3 + 48))->second;
    __for_range_2 = entity_set;
    __for_begin._M_node = std::set<unsigned int>::begin(entity_set)._M_node;
    __for_end._M_node = std::set<unsigned int>::end(__for_range_2)._M_node;
    while ( std::operator!=(
              (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)&__for_begin,
              (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)&__for_end) )
    {
      v31 = (google::protobuf::uint32 *)std::_Rb_tree_const_iterator<unsigned int>::operator*((const std::_Rb_tree_const_iterator<unsigned int> *const)&__for_begin);
      if ( *(_BYTE *)(((unsigned __int64)v31 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v31 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v31 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4();
      }
      proto::GroupBin::add_del_monster_list(bin, *v31);
      std::_Rb_tree_const_iterator<unsigned int>::operator++((std::_Rb_tree_const_iterator<unsigned int> *const)&__for_begin);
    }
  }
  *(_DWORD *)(v3 + 32) = 4;
  *(std::map<proto::ProtEntityType,std::set<unsigned int>>::const_iterator *)(v3 + 48) = std::map<proto::ProtEntityType,std::set<unsigned int>>::find(
                                                                                           &this->deleted_entity_record_map_,
                                                                                           (const std::map<proto::ProtEntityType,std::set<unsigned int>>::key_type *)(v3 + 32));
  __for_end._M_node = std::map<proto::ProtEntityType,std::set<unsigned int>>::end(&this->deleted_entity_record_map_)._M_node;
  if ( std::operator!=(
         (const std::_Rb_tree_const_iterator<std::pair<const proto::ProtEntityType,std::set<unsigned int> > >::_Self *)(v3 + 48),
         (const std::_Rb_tree_const_iterator<std::pair<const proto::ProtEntityType,std::set<unsigned int> > >::_Self *)&__for_end) )
  {
    entity_set_0 = &std::_Rb_tree_const_iterator<std::pair<proto::ProtEntityType const,std::set<unsigned int>>>::operator->((const std::_Rb_tree_const_iterator<std::pair<const proto::ProtEntityType,std::set<unsigned int> > > *const)(v3 + 48))->second;
    __for_range_3 = entity_set_0;
    __for_begin._M_node = std::set<unsigned int>::begin(entity_set_0)._M_node;
    __for_end._M_node = std::set<unsigned int>::end(__for_range_3)._M_node;
    while ( std::operator!=(
              (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)&__for_begin,
              (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)&__for_end) )
    {
      v32 = (google::protobuf::uint32 *)std::_Rb_tree_const_iterator<unsigned int>::operator*((const std::_Rb_tree_const_iterator<unsigned int> *const)&__for_begin);
      if ( *(_BYTE *)(((unsigned __int64)v32 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v32 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v32 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4();
      }
      proto::GroupBin::add_del_gadget_list(bin, *v32);
      std::_Rb_tree_const_iterator<unsigned int>::operator++((std::_Rb_tree_const_iterator<unsigned int> *const)&__for_begin);
    }
  }
  __for_range_4 = &this->show_cutscene_chest_set_;
  __for_begin._M_node = (std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::shared_ptr<Entity> > >::_Base_ptr)std::unordered_set<unsigned int>::begin(&this->show_cutscene_chest_set_)._M_cur;
  __for_end._M_node = (std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::shared_ptr<Entity> > >::_Base_ptr)std::unordered_set<unsigned int>::end(__for_range_4)._M_cur;
  while ( std::__detail::operator!=<unsigned int,false>(
            (const std::__detail::_Node_iterator_base<unsigned int,false> *)&__for_begin,
            (const std::__detail::_Node_iterator_base<unsigned int,false> *)&__for_end) )
  {
    v33 = (google::protobuf::uint32 *)std::__detail::_Node_const_iterator<unsigned int,true,false>::operator*((const std::__detail::_Node_const_iterator<unsigned int,true,false> *const)&__for_begin);
    if ( *(_BYTE *)(((unsigned __int64)v33 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v33 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v33 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4();
    }
    proto::GroupBin::add_show_cutscene_chest_list(bin, *v33);
    std::__detail::_Node_const_iterator<unsigned int,true,false>::operator++((std::__detail::_Node_const_iterator<unsigned int,true,false> *const)&__for_begin);
  }
  boss_die_map = proto::GroupBin::mutable_boss_die_info_map(bin);
  __for_range_5 = &this->boss_die_info_map_;
  __for_begin._M_node = std::map<unsigned int,proto::BossDieInfoBin>::begin(&this->boss_die_info_map_)._M_node;
  __for_end._M_node = std::map<unsigned int,proto::BossDieInfoBin>::end(__for_range_5)._M_node;
  while ( std::operator!=(
            (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,proto::BossDieInfoBin> >::_Self *)&__for_begin,
            (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,proto::BossDieInfoBin> >::_Self *)&__for_end) )
  {
    v64 = std::_Rb_tree_const_iterator<std::pair<unsigned int const,proto::BossDieInfoBin>>::operator*((const std::_Rb_tree_const_iterator<std::pair<unsigned int const,proto::BossDieInfoBin> > *const)&__for_begin);
    boss_config_id = std::get<0ul,unsigned int const,proto::BossDieInfoBin>(v64);
    die_info = (std::tuple_element<1,const std::pair<unsigned int const,proto::BossDieInfoBin> >::type *)std::get<1ul,unsigned int const,proto::BossDieInfoBin>(v64);
    v34 = google::protobuf::Map<unsigned int,proto::BossDieInfoBin>::operator[](boss_die_map, boss_config_id);
    proto::BossDieInfoBin::operator=(v34, die_info);
    std::_Rb_tree_const_iterator<std::pair<unsigned int const,proto::BossDieInfoBin>>::operator++((std::_Rb_tree_const_iterator<std::pair<unsigned int const,proto::BossDieInfoBin> > *const)&__for_begin);
  }
  __for_range_6 = &this->gather_refresh_time_map_;
  __for_begin._M_node = std::map<unsigned int,unsigned int>::begin(&this->gather_refresh_time_map_)._M_node;
  __for_end._M_node = std::map<unsigned int,unsigned int>::end(__for_range_6)._M_node;
  while ( std::operator!=(
            (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int> >::_Self *)&__for_begin,
            (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int> >::_Self *)&__for_end) )
  {
    v60 = std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int>>::operator*((const std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int> > *const)&__for_begin);
    config_id_2 = std::get<0ul,unsigned int const,unsigned int>(v60);
    refresh_time = (std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *)std::get<1ul,unsigned int const,unsigned int>(v60);
    gather_bin = proto::GroupBin::add_gather_refresh_time_list(bin);
    if ( *(_BYTE *)(((unsigned __int64)config_id_2 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)config_id_2 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)config_id_2 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4();
    }
    proto::GroupGatherBin::set_config_id(gather_bin, *config_id_2);
    if ( *(_BYTE *)(((unsigned __int64)refresh_time >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)refresh_time & 7) + 3) >= *(_BYTE *)(((unsigned __int64)refresh_time >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4();
    }
    proto::GroupGatherBin::set_last_refresh_time(gather_bin, *refresh_time);
    std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int>>::operator++((std::_Rb_tree_const_iterator<std::pair<unsigned int const,unsigned int> > *const)&__for_begin);
  }
  __for_range_7 = &this->group_refresh_time_map_;
  __for_begin._M_node = std::map<data::GatherSaveType,unsigned int>::begin(&this->group_refresh_time_map_)._M_node;
  __for_end._M_node = std::map<data::GatherSaveType,unsigned int>::end(__for_range_7)._M_node;
  while ( std::operator!=(
            (const std::_Rb_tree_const_iterator<std::pair<const data::GatherSaveType,unsigned int> >::_Self *)&__for_begin,
            (const std::_Rb_tree_const_iterator<std::pair<const data::GatherSaveType,unsigned int> >::_Self *)&__for_end) )
  {
    v56 = std::_Rb_tree_const_iterator<std::pair<data::GatherSaveType const,unsigned int>>::operator*((const std::_Rb_tree_const_iterator<std::pair<const data::GatherSaveType,unsigned int> > *const)&__for_begin);
    save_type = std::get<0ul,data::GatherSaveType const,unsigned int>(v56);
    refresh_time_0 = (std::tuple_element<1,const std::pair<const data::GatherSaveType,unsigned int> >::type *)std::get<1ul,data::GatherSaveType const,unsigned int>(v56);
    group_refresh_bin = proto::GroupBin::add_group_refresh_list(bin);
    if ( *(_BYTE *)(((unsigned __int64)save_type >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)save_type & 7) + 3) >= *(_BYTE *)(((unsigned __int64)save_type >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4();
    }
    proto::GroupRefreshTimeBin::set_save_type(group_refresh_bin, *save_type);
    if ( *(_BYTE *)(((unsigned __int64)refresh_time_0 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)refresh_time_0 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)refresh_time_0 >> 3)
                                                                       + 0x7FFF8000) )
    {
      __asan_report_load4();
    }
    proto::GroupRefreshTimeBin::set_last_refresh_time(group_refresh_bin, *refresh_time_0);
    std::_Rb_tree_const_iterator<std::pair<data::GatherSaveType const,unsigned int>>::operator++((std::_Rb_tree_const_iterator<std::pair<const data::GatherSaveType,unsigned int> > *const)&__for_begin);
  }
  if ( *(_BYTE *)(((unsigned __int64)&this->revise_level_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->revise_level_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4();
  }
  proto::GroupBin::set_revise_level(bin, this->revise_level_);
  ChallengeComp::toBin(&this->challenge_comp_, bin);
  RefreshTime = Group::getToBinLastRefreshTime(this);
  proto::GroupBin::set_last_refresh_time(bin, RefreshTime);
  if ( *(char *)(((unsigned __int64)&this->is_replaceable_ >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&this->is_replaceable_);
  proto::GroupBin::set_is_replaceable(bin, this->is_replaceable_);
  if ( *(_BYTE *)(((unsigned __int64)&this->replaceable_version_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->replaceable_version_ >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_load4();
  }
  proto::GroupBin::set_replaceable_version(bin, this->replaceable_version_);
  v2 = 0;
LABEL_126:
  result = v2;
  if ( v79 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 920: range 0000000015FB4A52-0000000015FB6F67
MonsterPtr __cdecl Group::createMonster(Group *const this, const GroupEntityParam *param)
{
  const GroupEntityParam *v2; // rdx
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  SceneExcelConfigMgr *p_scene_config_mgr; // rcx
  common::milog::MiLogStream *v7; // rax
  MonsterPtr result; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  unsigned __int64 n; // rax
  unsigned __int64 p_rot; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rdx
  std::_Rb_tree_const_iterator<std::pair<int const,unsigned int> >::pointer v22; // rdx
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // r14
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rax
  common::milog::MiLogStream *v36; // rax
  common::milog::MiLogStream *v37; // rax
  uint32_t v38; // r14d
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v39; // rax
  TxtConfigMgr *p_txt_config_mgr; // rdx
  bool v41; // r14
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v42; // rax
  TxtConfigMgr *v43; // rdx
  std::map<std::string,float>::mapped_type *v44; // rax
  _DWORD *v45; // rdx
  double v46; // xmm0_8
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v47; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v48; // rax
  MonsterExcelConfigMgr *p_monster_config_mgr; // rcx
  bool v50; // r14
  common::milog::MiLogStream *v51; // rax
  std::map<std::string,float>::mapped_type *v52; // rax
  _DWORD *v53; // rdx
  common::milog::MiLogStream *v54; // rax
  common::milog::MiLogStream *v55; // r14
  std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v56; // rax
  common::milog::MiLogStream *v57; // rax
  common::milog::MiLogStream *v58; // r14
  common::milog::MiLogStream *v59; // rax
  common::milog::MiLogStream *v60; // rax
  std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v61; // r14
  unsigned __int64 v62; // rax
  unsigned int (__fastcall *v63)(std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, VisionContext *, double); // r15
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v64; // rax
  std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v65; // rax
  common::milog::MiLogStream *v66; // rax
  common::milog::MiLogStream *v67; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v68; // rax
  common::milog::MiLogStream *v69; // rax
  common::milog::MiLogStream *v70; // rdx
  Entity *v71; // rdx
  Player *v72; // rax
  PlayerGmComp *GmComp; // rax
  std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v74; // rax
  FightPropComp *FightPropComp; // rax
  PileBoolValue *IsInvincible; // rax
  std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v77; // rax
  uint32_t EntityId; // r14d
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v79; // rdx
  uint32_t *p_source_entity_id; // rax
  int32_t v81; // r14d
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v82; // rdx
  int32_t *p_param1; // rax
  _BOOL4 is_from_script; // r14d
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v85; // rax
  std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v86; // rax
  data::MonsterType MonsterType; // r14d
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v88; // rax
  int v89; // [rsp+14h] [rbp-41Ch]
  int v90; // [rsp+14h] [rbp-41Ch]
  const GroupEntityParam *parama; // [rsp+18h] [rbp-418h]
  unsigned int val; // [rsp+3Ch] [rbp-3F4h] BYREF
  uint32_t base_level; // [rsp+40h] [rbp-3F0h]
  uint32_t monster_type_id; // [rsp+44h] [rbp-3ECh]
  std::map<std::string,float>::const_iterator __for_end; // [rsp+48h] [rbp-3E8h] BYREF
  const data::SceneExcelConfig *scene_config_ptr; // [rsp+50h] [rbp-3E0h]
  const GroupScriptConfig *group_config_ptr; // [rsp+58h] [rbp-3D8h]
  const GroupInfoScriptConfig *group_info_config_ptr; // [rsp+60h] [rbp-3D0h]
  const MonsterScriptConfig *monster_config_ptr; // [rsp+68h] [rbp-3C8h]
  const std::map<std::string,float> *__for_range; // [rsp+70h] [rbp-3C0h]
  const data::MonsterDescribeExcelConfig *monster_describe_config_ptr; // [rsp+78h] [rbp-3B8h]
  const std::set<std::string> *apply_logic_state_set; // [rsp+80h] [rbp-3B0h]
  std::map<std::string,float> *__for_range_0; // [rsp+88h] [rbp-3A8h]
  std::pair<const std::string,float> *__in; // [rsp+90h] [rbp-3A0h]
  std::tuple_element<0,std::pair<const std::string,float> >::type *key_0; // [rsp+98h] [rbp-398h]
  std::tuple_element<1,std::pair<const std::string,float> >::type *value_0; // [rsp+A0h] [rbp-390h]
  const std::pair<const std::string,float> *v107; // [rsp+A8h] [rbp-388h]
  std::tuple_element<0,const std::pair<const std::string,float> >::type *key; // [rsp+B0h] [rbp-380h]
  std::tuple_element<1,const std::pair<const std::string,float> >::type *value; // [rsp+B8h] [rbp-378h]
  std::enable_shared_from_this<Group> v110; // [rsp+C0h] [rbp-370h] BYREF
  std::shared_ptr<Config> v111; // [rsp+D0h] [rbp-360h] BYREF
  std::shared_ptr<Config> v112; // [rsp+E0h] [rbp-350h] BYREF
  std::shared_ptr<EntitySightGroup> __r; // [rsp+F0h] [rbp-340h] BYREF
  common::milog::MiLogStream v114; // [rsp+100h] [rbp-330h] BYREF
  char v115[784]; // [rsp+120h] [rbp-310h] BYREF

  parama = v2;
  v3 = (unsigned __int64)v115;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(736LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "12 32 4 13 config_id:921 48 4 23 scene_revise_level:1022 64 4 29 group_final_revise_level:1023 8"
                        "0 4 21 logic_state_value:983 96 8 8 iter:948 128 8 21 logic_state_iter:1079 160 8 8 iter:990 192"
                        " 16 16 monster_ptr:1092 224 16 14 scene_ptr:1100 256 16 15 player_ptr:1111 288 16 12 evt_ptr:111"
                        "8 320 352 17 monster_param:960";
  *(_QWORD *)(v3 + 16) = Group::createMonster;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -234556924;
  v5[536862723] = -218959360;
  v5[536862724] = -218959360;
  v5[536862725] = -218959360;
  v5[536862726] = -219021312;
  v5[536862727] = -219021312;
  v5[536862728] = -219021312;
  v5[536862729] = -219021312;
  v5[536862741] = -202116109;
  v5[536862742] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)parama >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)parama >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4();
  }
  *(_DWORD *)(v3 + 32) = parama->config_id;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v3 + 288));
  p_scene_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 288))->design_config.txt_config_mgr.scene_config_mgr;
  if ( *(_BYTE *)(((unsigned __int64)&param->monster.affix_set._M_t._M_impl.std::_Rb_tree_header >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&param->monster.affix_set._M_t._M_impl.std::_Rb_tree_header >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4();
  }
  scene_config_ptr = data::SceneExcelConfigMgrBase::findSceneExcelConfig(
                       p_scene_config_mgr,
                       param->monster.affix_set._M_t._M_impl._M_header._M_color);
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 288));
  if ( !scene_config_ptr )
  {
    common::milog::MiLogStream::create(
      &v114,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "createMonster",
      925);
    v7 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
           &v114,
           (const char (*)[38])"findSceneExcelConfig failed,scene id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
      v7,
      (const unsigned int *)&param->monster.affix_set._M_t._M_impl.std::_Rb_tree_header);
    common::milog::MiLogStream::~MiLogStream(&v114);
    std::shared_ptr<Monster>::shared_ptr((std::shared_ptr<Monster> *const)this, 0LL);
    goto LABEL_155;
  }
  group_config_ptr = Group::getScriptConfig((const Group *const)param);
  if ( !group_config_ptr )
  {
    common::milog::MiLogStream::create(
      &v114,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "createMonster",
      931);
    common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(&v114, (const char (*)[22])"getScriptConfig fails");
    common::milog::MiLogStream::~MiLogStream(&v114);
    std::shared_ptr<Monster>::shared_ptr((std::shared_ptr<Monster> *const)this, 0LL);
    goto LABEL_155;
  }
  group_info_config_ptr = Group::getInfoScriptConfig((const Group *const)param);
  if ( !group_info_config_ptr )
  {
    common::milog::MiLogStream::create(
      &v114,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "createMonster",
      937);
    common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
      &v114,
      (const char (*)[31])"getGroupInfoScriptConfig fails");
    common::milog::MiLogStream::~MiLogStream(&v114);
    std::shared_ptr<Monster>::shared_ptr((std::shared_ptr<Monster> *const)this, 0LL);
    goto LABEL_155;
  }
  monster_config_ptr = GroupScriptConfig::findMonsterConfig(group_config_ptr, *(_DWORD *)(v3 + 32));
  if ( !monster_config_ptr )
  {
    common::milog::MiLogStream::create(
      &v114,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/group/group.cpp",
      "createMonster",
      943);
    v9 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
           &v114,
           (const char (*)[35])"findMonsterConfig fails, group_id:");
    v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
            v9,
            (const unsigned int *)&param->pos_opt._M_payload._M_engaged);
    v11 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v10, (const char (*)[13])", config_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v3 + 32));
    common::milog::MiLogStream::~MiLogStream(&v114);
    std::shared_ptr<Monster>::shared_ptr((std::shared_ptr<Monster> *const)this, 0LL);
    goto LABEL_155;
  }
  *(std::unordered_map<unsigned int,unsigned int>::iterator *)(v3 + 96) = std::unordered_map<unsigned int,unsigned int>::find(
                                                                            (std::unordered_map<unsigned int,unsigned int> *const)&param[1].gadget.blossom_chest.qualify_uid_set._M_t._M_impl._M_header._M_right,
                                                                            (const std::unordered_map<unsigned int,unsigned int>::key_type *)(v3 + 32));
  __for_end._M_node = (std::_Rb_tree_const_iterator<std::pair<const std::string,float> >::_Base_ptr)std::unordered_map<unsigned int,unsigned int>::end((std::unordered_map<unsigned int,unsigned int> *const)&param[1].gadget.blossom_chest.qualify_uid_set._M_t._M_impl._M_header._M_right)._M_cur;
  if ( std::__detail::operator!=<std::pair<unsigned int const,unsigned int>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false> *)(v3 + 96),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false> *)&__for_end) )
  {
    common::milog::MiLogStream::create(
      &v114,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/group/group.cpp",
      "createMonster",
      951);
    v12 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
            &v114,
            (const char (*)[20])"monster config_id: ");
    v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v3 + 32));
    common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v13, (const char (*)[18])off_25AB68A0);
    common::milog::MiLogStream::~MiLogStream(&v114);
    std::shared_ptr<Monster>::shared_ptr((std::shared_ptr<Monster> *const)this, 0LL);
    goto LABEL_155;
  }
  if ( (unsigned __int8)Group::isOneoffMonsterDead((const Group *const)param, *(_DWORD *)(v3 + 32)) )
  {
    common::milog::MiLogStream::create(
      &v114,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/group/group.cpp",
      "createMonster",
      956);
    v14 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(&v114, (const char (*)[11])"group_id: ");
    v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
            v14,
            (const unsigned int *)&param->pos_opt._M_payload._M_engaged);
    v16 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v15, (const char (*)[13])" config_id: ");
    v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, (const unsigned int *)(v3 + 32));
    common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(v17, (const char (*)[24])off_25AB6920);
    common::milog::MiLogStream::~MiLogStream(&v114);
    std::shared_ptr<Monster>::shared_ptr((std::shared_ptr<Monster> *const)this, 0LL);
    goto LABEL_155;
  }
  MonsterParam::MonsterParam((MonsterParam *const)(v3 + 320));
  *(_DWORD *)(v3 + 324) = *(_DWORD *)(v3 + 32);
  if ( *(_BYTE *)(((unsigned __int64)&monster_config_ptr->monster_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)monster_config_ptr + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&monster_config_ptr->monster_id >> 3)
                                                                     + 0x7FFF8000) )
  {
    __asan_report_load4();
  }
  *(_DWORD *)(v3 + 320) = monster_config_ptr->monster_id;
  if ( std::optional<Vector3>::has_value(&parama->pos_opt) )
  {
    n = (unsigned __int64)std::optional<Vector3>::value(&parama->pos_opt);
    if ( (char)(n & 7) >= *(_BYTE *)((n >> 3) + 0x7FFF8000) && *(_BYTE *)((n >> 3) + 0x7FFF8000) != 0
      || *(_BYTE *)(((n + 11) >> 3) + 0x7FFF8000) != 0
      && (char)((n + 11) & 7) >= *(_BYTE *)(((n + 11) >> 3) + 0x7FFF8000) )
    {
      n = __asan_report_load_n(n, 12LL);
    }
    *(_QWORD *)(v3 + 332) = *(_QWORD *)n;
    *(_DWORD *)(v3 + 340) = *(_DWORD *)(n + 8);
  }
  else
  {
    *(Vector3 *)(v3 + 332) = operator+(
                               &monster_config_ptr->pos,
                               (const Vector3 *)&param[1].gadget.blossom_chest.qualify_uid_set._M_t._M_impl._M_header._M_parent);
  }
  if ( std::optional<Vector3>::has_value(&parama->rot_opt) )
    p_rot = (unsigned __int64)std::optional<Vector3>::value(&parama->rot_opt);
  else
    p_rot = (unsigned __int64)&monster_config_ptr->rot;
  if ( (char)(p_rot & 7) >= *(_BYTE *)((p_rot >> 3) + 0x7FFF8000) && *(_BYTE *)((p_rot >> 3) + 0x7FFF8000) != 0
    || *(_BYTE *)(((p_rot + 11) >> 3) + 0x7FFF8000) != 0
    && (char)((p_rot + 11) & 7) >= *(_BYTE *)(((p_rot + 11) >> 3) + 0x7FFF8000) )
  {
    p_rot = __asan_report_load_n(p_rot, 12LL);
  }
  *(_QWORD *)(v3 + 344) = *(_QWORD *)p_rot;
  *(_DWORD *)(v3 + 352) = *(_DWORD *)(p_rot + 8);
  if ( *(_BYTE *)(((unsigned __int64)&monster_config_ptr->drop_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)monster_config_ptr + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&monster_config_ptr->drop_id >> 3)
                                                                      + 0x7FFF8000) )
  {
    __asan_report_load4();
  }
  *(_DWORD *)(v3 + 368) = monster_config_ptr->drop_id;
  if ( *(char *)(((unsigned __int64)&monster_config_ptr->is_ban_txt_drop >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&monster_config_ptr->is_ban_txt_drop);
  *(_BYTE *)(v3 + 408) = monster_config_ptr->is_ban_txt_drop;
  if ( *(char *)(((unsigned __int64)&monster_config_ptr->is_elite >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&monster_config_ptr->is_elite);
  *(_BYTE *)(v3 + 409) = monster_config_ptr->is_elite;
  if ( std::set<unsigned int>::empty(&parama->monster.affix_set) )
    std::set<unsigned int>::operator=((std::set<unsigned int> *const)(v3 + 416), &monster_config_ptr->affix_set);
  else
    std::set<unsigned int>::operator=((std::set<unsigned int> *const)(v3 + 416), &parama->monster.affix_set);
  if ( *(_BYTE *)(((unsigned __int64)&monster_config_ptr->room_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&monster_config_ptr->room_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4();
  }
  *(_DWORD *)(v3 + 480) = monster_config_ptr->room_id;
  if ( *(_BYTE *)(((unsigned __int64)&monster_config_ptr->guest_ban_drop >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&monster_config_ptr->guest_ban_drop >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4();
  }
  *(_DWORD *)(v3 + 484) = monster_config_ptr->guest_ban_drop;
  if ( *(_BYTE *)(((unsigned __int64)&monster_config_ptr->pose_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)monster_config_ptr + 100) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&monster_config_ptr->pose_id >> 3)
                                                                       + 0x7FFF8000) )
  {
    __asan_report_load4();
  }
  *(_DWORD *)(v3 + 528) = monster_config_ptr->pose_id;
  if ( *(char *)(((unsigned __int64)&monster_config_ptr->is_light_config >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&monster_config_ptr->is_light_config);
  *(_BYTE *)(v3 + 648) = monster_config_ptr->is_light_config;
  if ( (unsigned __int8)std::string::empty(&monster_config_ptr->pose_logic_state) != 1 )
  {
    *(_DWORD *)(v3 + 80) = 0;
    if ( Group::getVariableValue((Group *const)param, &monster_config_ptr->pose_logic_state, (int32_t *)(v3 + 80)) )
    {
      common::milog::MiLogStream::create(
        &v114,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/group/group.cpp",
        "createMonster",
        986);
      v20 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
              &v114,
              (const char (*)[34])"pose_logic_state not found, name:");
      v21 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
              v20,
              &monster_config_ptr->pose_logic_state);
      operator<<(v21, (const Group *)param);
      common::milog::MiLogStream::~MiLogStream(&v114);
    }
    else
    {
      *(std::map<int,unsigned int>::const_iterator *)(v3 + 160) = std::map<int,unsigned int>::find(
                                                                    &monster_config_ptr->logic_state_pose_id_map,
                                                                    (const std::map<int,unsigned int>::key_type *)(v3 + 80));
      __for_end._M_node = std::map<int,unsigned int>::end(&monster_config_ptr->logic_state_pose_id_map)._M_node;
      if ( std::operator!=(
             (const std::_Rb_tree_const_iterator<std::pair<int const,unsigned int> >::_Self *)(v3 + 160),
             (const std::_Rb_tree_const_iterator<std::pair<int const,unsigned int> >::_Self *)&__for_end) )
      {
        v22 = std::_Rb_tree_const_iterator<std::pair<int const,unsigned int>>::operator->((const std::_Rb_tree_const_iterator<std::pair<int const,unsigned int> > *const)(v3 + 160));
        if ( *(_BYTE *)(((unsigned __int64)&v22->second >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)v22 + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v22->second >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4();
        }
        *(_DWORD *)(v3 + 528) = v22->second;
      }
    }
  }
  if ( *(_BYTE *)(((unsigned __int64)&monster_config_ptr->climate_area_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&monster_config_ptr->climate_area_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4();
  }
  *(_DWORD *)(v3 + 532) = monster_config_ptr->climate_area_id;
  if ( !std::operator!=<unsigned int,proto::ProtEntityType>(
          (const std::function<unsigned int(proto::ProtEntityType)> *)&param[2].gadget.blossom_chest.qualify_uid_set._M_t._M_impl._M_node_count,
          0LL) )
  {
    common::milog::MiLogStream::create(
      &v114,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/group/group.cpp",
      "createMonster",
      1010);
    v28 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
            &v114,
            (const char (*)[29])"invalid id func  @group_id: ");
    v29 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
            v28,
            (const unsigned int *)&param->pos_opt._M_payload._M_engaged);
    v30 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v29, (const char (*)[13])" config_id: ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v30, (const unsigned int *)(v3 + 32));
    common::milog::MiLogStream::~MiLogStream(&v114);
    goto LABEL_62;
  }
  *(_DWORD *)(v3 + 328) = std::function<unsigned int ()(proto::ProtEntityType)>::operator()(
                            (const std::function<unsigned int(proto::ProtEntityType)> *const)&param[2].gadget.blossom_chest.qualify_uid_set._M_t._M_impl._M_node_count,
                            PROT_ENTITY_MONSTER);
  if ( *(_DWORD *)(v3 + 328) )
  {
LABEL_62:
    if ( *(_BYTE *)(((unsigned __int64)&param->rot_opt._M_payload._M_engaged >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&param->rot_opt._M_payload._M_engaged >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    if ( *(_DWORD *)&param->rot_opt._M_payload._M_engaged == 2 )
    {
      *(_DWORD *)(v3 + 468) = 2;
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&parama->monster.born_type >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)parama + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&parama->monster.born_type >> 3)
                                                              + 0x7FFF8000) )
      {
        __asan_report_load4();
      }
      if ( parama->monster.born_type )
        *(_DWORD *)(v3 + 468) = parama->monster.born_type;
    }
    std::enable_shared_from_this<Group>::shared_from_this(&v110);
    std::shared_ptr<Group>::operator=((std::shared_ptr<Group> *const)(v3 + 376), (std::shared_ptr<Group> *)&v110);
    std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)&v110);
    if ( *(_BYTE *)(((unsigned __int64)(&param[2].gadget.general_reward.remain_uid_set._M_t._M_impl.std::allocator<std::_Rb_tree_node<unsigned int> >
                                      + 4) >> 3)
                  + 0x7FFF8000) != 0
      && (char)((((_BYTE)param + 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)(&param[2].gadget.general_reward.remain_uid_set._M_t._M_impl.std::allocator<std::_Rb_tree_node<unsigned int> >
                                                                               + 4) >> 3)
                                                           + 0x7FFF8000) )
    {
      __asan_report_load4();
    }
    *(_DWORD *)(v3 + 48) = *((_DWORD *)&param[2].gadget.general_reward.remain_uid_set._M_t._M_impl.std::allocator<std::_Rb_tree_node<unsigned int> >
                           + 1);
    *(_DWORD *)(v3 + 64) = Group::getFinalReviseLevel((const Group *const)param);
    if ( *(_BYTE *)(((unsigned __int64)&monster_config_ptr->level >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&monster_config_ptr->level >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    base_level = *(_DWORD *)(v3 + 64) + monster_config_ptr->level + *(_DWORD *)(v3 + 48);
    *(_DWORD *)(v3 + 356) = Group::getAdjustedLevel((const Group *const)param, base_level);
    if ( *(_BYTE *)(((unsigned __int64)&parama->monster >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&parama->monster >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    if ( parama->monster.level )
    {
      *(_DWORD *)(v3 + 356) = parama->monster.level;
      common::milog::MiLogStream::create(
        &v114,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/group/group.cpp",
        "createMonster",
        1029);
      v31 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
              &v114,
              (const char (*)[18])"[LVL] set level: ");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v31, &parama->monster.level);
    }
    else
    {
      common::milog::MiLogStream::create(
        &v114,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/group/group.cpp",
        "createMonster",
        1034);
      v32 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
              &v114,
              (const char (*)[20])"[LVL] config_level:");
      v33 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v32, &monster_config_ptr->level);
      v34 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
              v33,
              (const char (*)[20])", group revise lvl:");
      v35 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v34, (const unsigned int *)(v3 + 64));
      v36 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
              v35,
              (const char (*)[20])", scene revise lvl:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v36, (const unsigned int *)(v3 + 48));
      common::milog::MiLogStream::~MiLogStream(&v114);
      common::milog::MiLogStream::create(
        &v114,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/group/group.cpp",
        "createMonster",
        1035);
      v37 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
              &v114,
              (const char (*)[22])"[LVL] adjusted level:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v37, (const unsigned int *)(v3 + 356));
    }
    common::milog::MiLogStream::~MiLogStream(&v114);
    v38 = *(_DWORD *)(v3 + 356);
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v111);
    v39 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v111);
    p_txt_config_mgr = &v39->design_config.txt_config_mgr;
    if ( *(_BYTE *)(((unsigned __int64)&v39->design_config.txt_config_mgr.grow_curve_config_mgr.max_monster_curve_level >> 3)
                  + 0x7FFF8000) != 0
      && (char)((((_BYTE)v39 - 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v39->design_config.txt_config_mgr.grow_curve_config_mgr.max_monster_curve_level >> 3)
                                                         + 0x7FFF8000) )
    {
      __asan_report_load4();
    }
    v41 = v38 > p_txt_config_mgr->grow_curve_config_mgr.max_monster_curve_level;
    std::shared_ptr<Config>::~shared_ptr(&v111);
    if ( v41 )
    {
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)&v112);
      v42 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v112);
      v43 = &v42->design_config.txt_config_mgr;
      if ( *(_BYTE *)(((unsigned __int64)&v42->design_config.txt_config_mgr.grow_curve_config_mgr.max_monster_curve_level >> 3)
                    + 0x7FFF8000) != 0
        && (char)((((_BYTE)v42 - 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v42->design_config.txt_config_mgr.grow_curve_config_mgr.max_monster_curve_level >> 3)
                                                           + 0x7FFF8000) )
      {
        __asan_report_load4();
      }
      *(_DWORD *)(v3 + 356) = v43->grow_curve_config_mgr.max_monster_curve_level;
      std::shared_ptr<Config>::~shared_ptr(&v112);
    }
    if ( *(_BYTE *)(((unsigned __int64)&monster_config_ptr->level >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&monster_config_ptr->level >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    *(_DWORD *)(v3 + 360) = monster_config_ptr->level;
    *(_DWORD *)(v3 + 364) = *(_DWORD *)(v3 + 64) + *(_DWORD *)(v3 + 48);
    std::map<std::string,float>::operator=(
      (std::map<std::string,float> *const)(v3 + 568),
      &monster_config_ptr->server_global_value_map);
    __for_range = &parama->global_value_map;
    *(std::map<std::string,float>::const_iterator *)(v3 + 160) = std::map<std::string,float>::begin(&parama->global_value_map);
    __for_end._M_node = std::map<std::string,float>::end(__for_range)._M_node;
    while ( std::operator!=(
              (const std::_Rb_tree_const_iterator<std::pair<const std::string,float> >::_Self *)(v3 + 160),
              &__for_end) )
    {
      v107 = std::_Rb_tree_const_iterator<std::pair<std::string const,float>>::operator*((const std::_Rb_tree_const_iterator<std::pair<const std::string,float> > *const)(v3 + 160));
      key = std::get<0ul,std::string const,float>(v107);
      value = (std::tuple_element<1,const std::pair<const std::string,float> >::type *)std::get<1ul,std::string const,float>(v107);
      if ( *(_BYTE *)(((unsigned __int64)value >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)value & 7) + 3) >= *(_BYTE *)(((unsigned __int64)value >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4();
      }
      v89 = *(_DWORD *)value;
      v44 = std::map<std::string,float>::operator[]((std::map<std::string,float> *const)(v3 + 568), key);
      v45 = v44;
      if ( *(_BYTE *)(((unsigned __int64)v44 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v44 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v44 >> 3) + 0x7FFF8000) )
      {
        __asan_report_store4(v44);
      }
      *v45 = v89;
      std::_Rb_tree_const_iterator<std::pair<std::string const,float>>::operator++((std::_Rb_tree_const_iterator<std::pair<const std::string,float> > *const)(v3 + 160));
    }
    if ( *(_BYTE *)(((unsigned __int64)&parama->monster.initial_hp_percentage >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&parama->monster.initial_hp_percentage >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    *(_QWORD *)&v46 = LODWORD(parama->monster.initial_hp_percentage);
    *(_DWORD *)(v3 + 668) = LODWORD(v46);
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)(v3 + 288));
    v47 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 288));
    monster_type_id = MonsterExcelConfigMgr::getMonsterTypeId(
                        &v47->design_config.txt_config_mgr.monster_config_mgr,
                        *(_DWORD *)(v3 + 320));
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 288));
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)(v3 + 288));
    v48 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 288));
    monster_describe_config_ptr = data::MonsterExcelConfigMgrBase::findMonsterDescribeExcelConfig(
                                    &v48->design_config.txt_config_mgr.monster_config_mgr,
                                    monster_type_id);
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 288));
    if ( !monster_describe_config_ptr )
      goto LABEL_103;
    if ( *(_BYTE *)(((unsigned __int64)&monster_describe_config_ptr->title_id >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)monster_describe_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&monster_describe_config_ptr->title_id >> 3)
                                                                                 + 0x7FFF8000) )
    {
      v46 = __asan_report_load4();
    }
    *(_DWORD *)(v3 + 520) = monster_describe_config_ptr->title_id;
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)(v3 + 288));
    p_monster_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 288))->design_config.txt_config_mgr.monster_config_mgr;
    if ( *(_BYTE *)(((unsigned __int64)&monster_describe_config_ptr->special_name_lab_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&monster_describe_config_ptr->special_name_lab_id >> 3) + 0x7FFF8000) <= 3 )
    {
      v46 = __asan_report_load4();
    }
    v50 = MonsterExcelConfigMgr::randSpecialNameId(
            p_monster_config_mgr,
            monster_describe_config_ptr->special_name_lab_id,
            (uint32_t *)(v3 + 524)) != 0;
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 288));
    if ( v50 )
    {
      common::milog::MiLogStream::create(
        &v114,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/group/group.cpp",
        "createMonster",
        1059);
      v51 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
              &v114,
              (const char (*)[38])"randSpecialNameId failed, monster id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v51, (const unsigned int *)(v3 + 320));
      common::milog::MiLogStream::~MiLogStream(&v114);
      std::shared_ptr<Monster>::shared_ptr((std::shared_ptr<Monster> *const)this, 0LL);
    }
    else
    {
LABEL_103:
      if ( *(_BYTE *)(((unsigned __int64)&monster_config_ptr->title_id >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&monster_config_ptr->title_id >> 3) + 0x7FFF8000) <= 3 )
      {
        v46 = __asan_report_load4();
      }
      if ( monster_config_ptr->title_id )
        *(_DWORD *)(v3 + 520) = monster_config_ptr->title_id;
      if ( *(_BYTE *)(((unsigned __int64)&monster_config_ptr->special_name_id >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)monster_config_ptr - 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&monster_config_ptr->special_name_id >> 3)
                                                                          + 0x7FFF8000) )
      {
        v46 = __asan_report_load4();
      }
      if ( monster_config_ptr->special_name_id )
        *(_DWORD *)(v3 + 524) = monster_config_ptr->special_name_id;
      if ( *(_BYTE *)(((unsigned __int64)&monster_config_ptr->sight_group_index >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)monster_config_ptr - 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&monster_config_ptr->sight_group_index >> 3)
                                                                          + 0x7FFF8000) )
      {
        v46 = __asan_report_load4();
      }
      if ( monster_config_ptr->sight_group_index )
      {
        Group::getSightGroup((Group *const)&__r, (int32_t)param);
        std::shared_ptr<EntitySightGroup>::operator=((std::shared_ptr<EntitySightGroup> *const)(v3 + 536), &__r);
        std::shared_ptr<EntitySightGroup>::~shared_ptr(&__r);
      }
      if ( *(_BYTE *)(((unsigned __int64)&group_info_config_ptr->vision_type >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&group_info_config_ptr->vision_type >> 3) + 0x7FFF8000) <= 3 )
      {
        v46 = __asan_report_load4();
      }
      *(_DWORD *)(v3 + 556) = group_info_config_ptr->vision_type;
      *(std::unordered_map<unsigned int,std::set<std::string>>::const_iterator *)(v3 + 128) = std::unordered_map<unsigned int,std::set<std::string>>::find(
                                                                                                &group_config_ptr->entity_apply_logic_state_set_map,
                                                                                                (const std::unordered_map<unsigned int,std::set<std::string>>::key_type *)(v3 + 32));
      __for_end._M_node = (std::_Rb_tree_const_iterator<std::pair<const std::string,float> >::_Base_ptr)std::unordered_map<unsigned int,std::set<std::string>>::end(&group_config_ptr->entity_apply_logic_state_set_map)._M_cur;
      if ( std::__detail::operator!=<std::pair<unsigned int const,std::set<std::string>>,false>(
             (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<std::string> >,false> *)(v3 + 128),
             (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<std::string> >,false> *)&__for_end) )
      {
        apply_logic_state_set = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<std::string>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<std::string> >,false,false> *const)(v3 + 128))->second;
        __for_range_0 = (std::map<std::string,float> *)&param->gadget.general_reward.open_state_set._M_t._M_impl._M_header._M_right;
        *(std::map<std::string,float>::iterator *)(v3 + 160) = std::map<std::string,float>::begin((std::map<std::string,float> *const)&param->gadget.general_reward.open_state_set._M_t._M_impl._M_header._M_right);
        __for_end._M_node = std::map<std::string,float>::end(__for_range_0)._M_node;
        while ( std::operator!=(
                  (const std::_Rb_tree_iterator<std::pair<const std::string,float> >::_Self *)(v3 + 160),
                  (const std::_Rb_tree_iterator<std::pair<const std::string,float> >::_Self *)&__for_end) )
        {
          __in = std::_Rb_tree_iterator<std::pair<std::string const,float>>::operator*((const std::_Rb_tree_iterator<std::pair<const std::string,float> > *const)(v3 + 160));
          key_0 = std::get<0ul,std::string const,float>(__in);
          value_0 = std::get<1ul,std::string const,float>(__in);
          if ( common::tools::MiscUtils::isContains<std::set<std::string> const,std::string>(
                 apply_logic_state_set,
                 key_0) )
          {
            if ( *(_BYTE *)(((unsigned __int64)value_0 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)value_0 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)value_0 >> 3) + 0x7FFF8000) )
            {
              v46 = __asan_report_load4();
            }
            v90 = *(_DWORD *)value_0;
            v52 = std::map<std::string,float>::operator[]((std::map<std::string,float> *const)(v3 + 568), key_0);
            v53 = v52;
            if ( *(_BYTE *)(((unsigned __int64)v52 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)v52 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v52 >> 3) + 0x7FFF8000) )
            {
              __asan_report_store4(v52);
            }
            *v53 = v90;
          }
          std::_Rb_tree_iterator<std::pair<std::string const,float>>::operator++((std::_Rb_tree_iterator<std::pair<const std::string,float> > *const)(v3 + 160));
        }
      }
      EntityMgr::createMonster((const MonsterParam *)(v3 + 192));
      if ( std::operator==<Monster>((const std::shared_ptr<Monster> *)(v3 + 192), 0LL) )
      {
        common::milog::MiLogStream::create(
          &v114,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/group/group.cpp",
          "createMonster",
          1095);
        v54 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                &v114,
                (const char (*)[32])"createMonster fails, config_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v54, (const unsigned int *)(v3 + 32));
        common::milog::MiLogStream::~MiLogStream(&v114);
        std::shared_ptr<Monster>::shared_ptr((std::shared_ptr<Monster> *const)this, 0LL);
      }
      else
      {
        common::milog::MiLogStream::create(
          &v114,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/group/group.cpp",
          "createMonster",
          1099);
        v55 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                &v114,
                (const char (*)[15])"createMonster:");
        v56 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
        val = Entity::getEntityId((const Entity *const)v56);
        v57 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v55, &val);
        v58 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v57, (const char (*)[11])" group_id:");
        *(_DWORD *)(v3 + 80) = Group::getGroupId((const Group *const)param);
        v59 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v58,
                (const unsigned int *)(v3 + 80));
        v60 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v59, (const char (*)[12])" config_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v60, (const unsigned int *)(v3 + 32));
        common::milog::MiLogStream::~MiLogStream(&v114);
        Group::getScene((const Group *const)(v3 + 224));
        if ( !std::operator!=<Scene>((const std::shared_ptr<Scene> *)(v3 + 224), 0LL) )
          goto LABEL_136;
        v61 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
        if ( *(_BYTE *)(((unsigned __int64)v61 >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v62 = *(_QWORD *)v61->baseclass_0 + 56LL;
        if ( *(_BYTE *)((v62 >> 3) + 0x7FFF8000) )
          v62 = __asan_report_load8();
        v63 = *(unsigned int (__fastcall **)(std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, VisionContext *, double))v62;
        v64 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
        if ( v63(v61, v64, &VisionContext::meet_context, v46) )
        {
          common::milog::MiLogStream::create(
            &v114,
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/group/group.cpp",
            "createMonster",
            1105);
          v65 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
          v66 = common::milog::MiLogStream::operator<<<Monster,(Monster*)0>(&v114, v65);
          v67 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v66, (const char (*)[8])" enter ");
          v68 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
          v69 = common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v67, v68);
          v70 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v69, (const char (*)[9])" failed.");
          operator<<(v70, (const Group *)param);
          common::milog::MiLogStream::~MiLogStream(&v114);
          v71 = (Entity *)std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
          Group::revertAddEntity((Group *const)param, v71);
          std::shared_ptr<Monster>::shared_ptr((std::shared_ptr<Monster> *const)this, 0LL);
        }
        else
        {
LABEL_136:
          Group::getOwnerPlayer((const Group *const)(v3 + 256));
          if ( std::operator!=<Player>((const std::shared_ptr<Player> *)(v3 + 256), 0LL) )
          {
            v72 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 256));
            GmComp = Player::getGmComp(v72);
            if ( PlayerGmComp::getIsMonsterInvincible(GmComp) )
            {
              v74 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
              FightPropComp = Creature::getFightPropComp(v74);
              IsInvincible = FightPropComp::getIsInvincible(FightPropComp);
              PileBoolValue::set(IsInvincible, 0, 0);
            }
          }
          EventUtil::createEvent((std::shared_ptr<Event> *)(v3 + 288), 11);
          if ( std::operator!=<Event>((const std::shared_ptr<Event> *)(v3 + 288), 0LL) )
          {
            v77 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
            EntityId = Entity::getEntityId((const Entity *const)v77);
            v79 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 288));
            p_source_entity_id = &v79->source_entity_id;
            if ( *(_BYTE *)(((unsigned __int64)p_source_entity_id >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)p_source_entity_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_source_entity_id >> 3)
                                                                                   + 0x7FFF8000) )
            {
              __asan_report_store4(p_source_entity_id);
            }
            v79->source_entity_id = EntityId;
            v81 = *(_DWORD *)(v3 + 32);
            v82 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 288));
            p_param1 = &v82->param1;
            if ( *(_BYTE *)(((unsigned __int64)p_param1 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)p_param1 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_param1 >> 3) + 0x7FFF8000) )
            {
              __asan_report_store4(p_param1);
            }
            v82->param1 = v81;
            if ( *(char *)(((unsigned __int64)&parama->is_from_script >> 3) + 0x7FFF8000) < 0 )
              __asan_report_load1(&parama->is_from_script);
            is_from_script = parama->is_from_script;
            v85 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 288));
            if ( *(_BYTE *)(((unsigned __int64)&v85->param2 >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&v85->param2 >> 3) + 0x7FFF8000) <= 3 )
            {
              v85 = (std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *)__asan_report_store4(&v85->param2);
            }
            v85->param2 = is_from_script;
            v86 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
            MonsterType = Monster::getMonsterType(v86);
            v88 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 288));
            if ( *(_BYTE *)(((unsigned __int64)&v88->param4 >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&v88->param4 >> 3) + 0x7FFF8000) <= 3 )
            {
              v88 = (std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *)__asan_report_store4(&v88->param4);
            }
            v88->param4 = MonsterType;
            Group::handleEvent((Group *const)param, (EventPtr *)(v3 + 288));
          }
          Group::removeDeletedEntityRecord((Group *const)param, PROT_ENTITY_MONSTER, *(_DWORD *)(v3 + 32));
          std::shared_ptr<Monster>::shared_ptr(
            (std::shared_ptr<Monster> *const)this,
            (std::shared_ptr<Monster> *)(v3 + 192));
          std::shared_ptr<Event>::~shared_ptr((std::shared_ptr<Event> *const)(v3 + 288));
          std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v3 + 256));
        }
        std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 224));
      }
      std::shared_ptr<Monster>::~shared_ptr((std::shared_ptr<Monster> *const)(v3 + 192));
    }
    goto LABEL_154;
  }
  common::milog::MiLogStream::create(
    &v114,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/group/group.cpp",
    "createMonster",
    1003);
  v23 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(&v114, (const char (*)[14])"0 entity_id @");
  v24 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
          v23,
          (const unsigned int *)&param->pos_opt._M_payload._M_engaged);
  v25 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v24, (const char (*)[13])" config_id: ");
  v26 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v25, (const unsigned int *)(v3 + 32));
  v27 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v26, (const char (*)[6])" uid:");
  *(_DWORD *)(v3 + 80) = Group::getOwnerUid((const Group *const)param);
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v27, (const unsigned int *)(v3 + 80));
  common::milog::MiLogStream::~MiLogStream(&v114);
  std::shared_ptr<Monster>::shared_ptr((std::shared_ptr<Monster> *const)this, 0LL);
LABEL_154:
  MonsterParam::~MonsterParam((MonsterParam *const)(v3 + 320));
LABEL_155:
  if ( v115 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8054) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    result._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8058) = -168430091;
  }
  result._M_ptr = (std::__shared_ptr<Monster,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 1134: range 0000000015FB6F68-0000000015FB8700
MonsterPtr __cdecl Group::createMonster(Group *const this, MonsterParam *param)
{
  MonsterParam *v2; // rdx
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  SceneExcelConfigMgr *p_scene_config_mgr; // rcx
  common::milog::MiLogStream *v7; // rax
  MonsterPtr result; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  unsigned int v11; // edx
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rbx
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  uint32_t AdjustedLevel; // ecx
  uint32_t level; // r14d
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v22; // rax
  TxtConfigMgr *p_txt_config_mgr; // rdx
  bool v24; // r14
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v25; // rax
  TxtConfigMgr *v26; // rdx
  uint32_t max_monster_curve_level; // ecx
  uint32_t v28; // ecx
  MonsterExcelConfigMgr *p_monster_config_mgr; // rcx
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v30; // rax
  MonsterExcelConfigMgr *v31; // rcx
  bool v32; // r14
  common::milog::MiLogStream *v33; // rdx
  uint32_t vision_type; // ecx
  std::map<std::string,float>::mapped_type *v35; // rax
  _DWORD *v36; // rdx
  common::milog::MiLogStream *v37; // rax
  std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v38; // r14
  unsigned __int64 v39; // rax
  unsigned int (__fastcall *v40)(std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, VisionContext *); // r15
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v41; // rax
  std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v42; // rax
  common::milog::MiLogStream *v43; // rax
  common::milog::MiLogStream *v44; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v45; // rax
  common::milog::MiLogStream *v46; // rax
  common::milog::MiLogStream *v47; // rdx
  Entity *v48; // rdx
  Player *v49; // rax
  PlayerGmComp *GmComp; // rax
  std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v51; // rax
  FightPropComp *FightPropComp; // rax
  PileBoolValue *IsInvincible; // rax
  std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v54; // rax
  uint32_t EntityId; // r14d
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v56; // rdx
  uint32_t *p_source_entity_id; // rax
  int32_t v58; // r14d
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v59; // rdx
  int32_t *p_param1; // rax
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v61; // rax
  std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v62; // rax
  data::MonsterType MonsterType; // r14d
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v64; // rax
  common::milog::MiLogStream *v65; // r14
  common::milog::MiLogStream *v66; // rax
  common::milog::MiLogStream *v67; // r14
  std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v68; // rax
  int v69; // [rsp+14h] [rbp-1DCh]
  MonsterParam *parama; // [rsp+18h] [rbp-1D8h]
  unsigned int GroupId; // [rsp+30h] [rbp-1C0h] BYREF
  unsigned int val; // [rsp+34h] [rbp-1BCh] BYREF
  uint32_t scene_revise_level; // [rsp+38h] [rbp-1B8h]
  uint32_t group_final_revise_level; // [rsp+3Ch] [rbp-1B4h]
  uint32_t base_level; // [rsp+40h] [rbp-1B0h]
  uint32_t monster_type_id; // [rsp+44h] [rbp-1ACh]
  std::map<std::string,float>::iterator __for_begin; // [rsp+48h] [rbp-1A8h] BYREF
  std::map<std::string,float>::iterator __for_end; // [rsp+50h] [rbp-1A0h] BYREF
  const data::SceneExcelConfig *scene_config_ptr; // [rsp+58h] [rbp-198h]
  const GroupScriptConfig *group_config_ptr; // [rsp+60h] [rbp-190h]
  const GroupInfoScriptConfig *group_info_config_ptr; // [rsp+68h] [rbp-188h]
  const data::MonsterDescribeExcelConfig *monster_describe_config_ptr; // [rsp+70h] [rbp-180h]
  const std::set<std::string> *apply_logic_state_set; // [rsp+78h] [rbp-178h]
  std::map<std::string,float> *__for_range; // [rsp+80h] [rbp-170h]
  std::pair<const std::string,float> *__in; // [rsp+88h] [rbp-168h]
  std::tuple_element<0,std::pair<const std::string,float> >::type *key; // [rsp+90h] [rbp-160h]
  std::tuple_element<1,std::pair<const std::string,float> >::type *value; // [rsp+98h] [rbp-158h]
  common::milog::MiLogStream v88; // [rsp+A0h] [rbp-150h] BYREF
  char v89[304]; // [rsp+C0h] [rbp-130h] BYREF

  parama = v2;
  v3 = (unsigned __int64)v89;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(256LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "7 48 4 14 config_id:1135 64 8 9 iter:1156 96 8 21 logic_state_iter:1210 128 16 16 monster_ptr:12"
                        "23 160 16 14 scene_ptr:1229 192 16 15 player_ptr:1240 224 16 12 evt_ptr:1247";
  *(_QWORD *)(v3 + 16) = Group::createMonster;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218959360;
  v5[536862723] = -218959360;
  v5[536862724] = -219021312;
  v5[536862725] = -219021312;
  v5[536862726] = -219021312;
  v5[536862727] = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)&parama->config_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)parama + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&parama->config_id >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4();
  }
  *(_DWORD *)(v3 + 48) = parama->config_id;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v3 + 224));
  p_scene_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224))->design_config.txt_config_mgr.scene_config_mgr;
  if ( *(_BYTE *)(((unsigned __int64)&param->owner_ptr >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&param->owner_ptr >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4();
  }
  scene_config_ptr = data::SceneExcelConfigMgrBase::findSceneExcelConfig(
                       p_scene_config_mgr,
                       (uint32_t)param->owner_ptr._M_ptr);
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 224));
  if ( !scene_config_ptr )
  {
    common::milog::MiLogStream::create(
      &v88,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "createMonster",
      1139);
    v7 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
           &v88,
           (const char (*)[38])"findSceneExcelConfig failed,scene id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)&param->owner_ptr);
    common::milog::MiLogStream::~MiLogStream(&v88);
    std::shared_ptr<Monster>::shared_ptr((std::shared_ptr<Monster> *const)this, 0LL);
    goto LABEL_97;
  }
  group_config_ptr = Group::getScriptConfig((const Group *const)param);
  if ( !group_config_ptr )
  {
    common::milog::MiLogStream::create(
      &v88,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "createMonster",
      1145);
    common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(&v88, (const char (*)[22])"getScriptConfig fails");
    common::milog::MiLogStream::~MiLogStream(&v88);
    std::shared_ptr<Monster>::shared_ptr((std::shared_ptr<Monster> *const)this, 0LL);
    goto LABEL_97;
  }
  group_info_config_ptr = Group::getInfoScriptConfig((const Group *const)param);
  if ( !group_info_config_ptr )
  {
    common::milog::MiLogStream::create(
      &v88,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "createMonster",
      1151);
    common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
      &v88,
      (const char (*)[31])"getGroupInfoScriptConfig fails");
    common::milog::MiLogStream::~MiLogStream(&v88);
    std::shared_ptr<Monster>::shared_ptr((std::shared_ptr<Monster> *const)this, 0LL);
    goto LABEL_97;
  }
  *(std::unordered_map<unsigned int,unsigned int>::iterator *)(v3 + 64) = std::unordered_map<unsigned int,unsigned int>::find(
                                                                            (std::unordered_map<unsigned int,unsigned int> *const)&param[1].is_light_config,
                                                                            (const std::unordered_map<unsigned int,unsigned int>::key_type *)(v3 + 48));
  __for_end._M_node = (std::_Rb_tree_iterator<std::pair<const std::string,float> >::_Base_ptr)std::unordered_map<unsigned int,unsigned int>::end((std::unordered_map<unsigned int,unsigned int> *const)&param[1].is_light_config)._M_cur;
  if ( std::__detail::operator!=<std::pair<unsigned int const,unsigned int>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false> *)(v3 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false> *)&__for_end) )
  {
    common::milog::MiLogStream::create(
      &v88,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "createMonster",
      1159);
    v9 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
           &v88,
           (const char (*)[20])"monster config_id: ");
    v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v10, (const char (*)[18])off_25AB68A0);
    common::milog::MiLogStream::~MiLogStream(&v88);
    std::shared_ptr<Monster>::shared_ptr((std::shared_ptr<Monster> *const)this, 0LL);
    goto LABEL_97;
  }
  if ( std::operator!=<unsigned int,proto::ProtEntityType>(
         (const std::function<unsigned int(proto::ProtEntityType)> *)&param[3].master_entity_id,
         0LL) )
  {
    v11 = std::function<unsigned int ()(proto::ProtEntityType)>::operator()(
            (const std::function<unsigned int(proto::ProtEntityType)> *const)&param[3].master_entity_id,
            PROT_ENTITY_MONSTER);
    if ( *(_BYTE *)(((unsigned __int64)&parama->entity_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&parama->entity_id >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_store4(&parama->entity_id);
    }
    parama->entity_id = v11;
    if ( !parama->entity_id )
    {
      common::milog::MiLogStream::create(
        &v88,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/group/group.cpp",
        "createMonster",
        1167);
      v12 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(&v88, (const char (*)[14])"0 entity_id @");
      v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v12,
              (const unsigned int *)&param->rot);
      v14 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v13, (const char (*)[13])" config_id: ");
      v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, (const unsigned int *)(v3 + 48));
      v16 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v15, (const char (*)[6])" uid:");
      val = Group::getOwnerUid((const Group *const)param);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, &val);
      common::milog::MiLogStream::~MiLogStream(&v88);
      std::shared_ptr<Monster>::shared_ptr((std::shared_ptr<Monster> *const)this, 0LL);
      goto LABEL_97;
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v88,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/group/group.cpp",
      "createMonster",
      1174);
    v17 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
            &v88,
            (const char (*)[29])"invalid id func  @group_id: ");
    v18 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)&param->rot);
    v19 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v18, (const char (*)[13])" config_id: ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream(&v88);
  }
  std::enable_shared_from_this<Group>::shared_from_this((std::enable_shared_from_this<Group> *const)(v3 + 224));
  std::shared_ptr<Group>::operator=(&parama->group_ptr, (std::shared_ptr<Group> *)(v3 + 224));
  std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v3 + 224));
  if ( *(_BYTE *)(((unsigned __int64)&parama->sight_group_index >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&parama->sight_group_index >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4();
  }
  if ( parama->sight_group_index )
  {
    Group::getSightGroup((Group *const)(v3 + 224), (int32_t)param);
    std::shared_ptr<EntitySightGroup>::operator=(
      &parama->sight_group_ptr,
      (std::shared_ptr<EntitySightGroup> *)(v3 + 224));
    std::shared_ptr<EntitySightGroup>::~shared_ptr((std::shared_ptr<EntitySightGroup> *const)(v3 + 224));
  }
  if ( *(_BYTE *)((((unsigned __int64)&param[3].global_value_map._M_t._M_impl._M_header._M_right + 4) >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)param + 60) & 7) + 3) >= *(_BYTE *)((((unsigned __int64)&param[3].global_value_map._M_t._M_impl._M_header._M_right
                                                           + 4) >> 3)
                                                         + 0x7FFF8000) )
  {
    __asan_report_load4();
  }
  scene_revise_level = HIDWORD(param[3].global_value_map._M_t._M_impl._M_header._M_right);
  group_final_revise_level = Group::getFinalReviseLevel((const Group *const)param);
  if ( *(_BYTE *)(((unsigned __int64)&parama->config_level >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&parama->config_level >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4();
  }
  base_level = group_final_revise_level + parama->config_level + scene_revise_level;
  AdjustedLevel = Group::getAdjustedLevel((const Group *const)param, base_level);
  if ( *(_BYTE *)(((unsigned __int64)&parama->level >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)parama + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&parama->level >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&parama->level);
  }
  parama->level = AdjustedLevel;
  level = parama->level;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v3 + 224));
  v22 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
  p_txt_config_mgr = &v22->design_config.txt_config_mgr;
  if ( *(_BYTE *)(((unsigned __int64)&v22->design_config.txt_config_mgr.grow_curve_config_mgr.max_monster_curve_level >> 3)
                + 0x7FFF8000) != 0
    && (char)((((_BYTE)v22 - 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v22->design_config.txt_config_mgr.grow_curve_config_mgr.max_monster_curve_level >> 3)
                                                       + 0x7FFF8000) )
  {
    __asan_report_load4();
  }
  v24 = level > p_txt_config_mgr->grow_curve_config_mgr.max_monster_curve_level;
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 224));
  if ( v24 )
  {
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)(v3 + 224));
    v25 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
    v26 = &v25->design_config.txt_config_mgr;
    if ( *(_BYTE *)(((unsigned __int64)&v25->design_config.txt_config_mgr.grow_curve_config_mgr.max_monster_curve_level >> 3)
                  + 0x7FFF8000) != 0
      && (char)((((_BYTE)v25 - 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v25->design_config.txt_config_mgr.grow_curve_config_mgr.max_monster_curve_level >> 3)
                                                         + 0x7FFF8000) )
    {
      __asan_report_load4();
    }
    max_monster_curve_level = v26->grow_curve_config_mgr.max_monster_curve_level;
    if ( *(_BYTE *)(((unsigned __int64)&parama->level >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)parama + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&parama->level >> 3) + 0x7FFF8000) )
    {
      __asan_report_store4(&parama->level);
    }
    parama->level = max_monster_curve_level;
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 224));
  }
  v28 = group_final_revise_level + scene_revise_level;
  if ( *(_BYTE *)(((unsigned __int64)&parama->revise_level >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)parama + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&parama->revise_level >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&parama->revise_level);
  }
  parama->revise_level = v28;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v3 + 224));
  p_monster_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224))->design_config.txt_config_mgr.monster_config_mgr;
  if ( *(_BYTE *)(((unsigned __int64)parama >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)parama >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4();
  }
  monster_type_id = MonsterExcelConfigMgr::getMonsterTypeId(p_monster_config_mgr, parama->monster_id);
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 224));
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v3 + 224));
  v30 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
  monster_describe_config_ptr = data::MonsterExcelConfigMgrBase::findMonsterDescribeExcelConfig(
                                  &v30->design_config.txt_config_mgr.monster_config_mgr,
                                  monster_type_id);
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 224));
  if ( !monster_describe_config_ptr )
    goto LABEL_58;
  if ( *(_BYTE *)(((unsigned __int64)&parama->title_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&parama->title_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4();
  }
  if ( !parama->title_id )
  {
    if ( *(_BYTE *)(((unsigned __int64)&monster_describe_config_ptr->title_id >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)monster_describe_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&monster_describe_config_ptr->title_id >> 3)
                                                                                 + 0x7FFF8000) )
    {
      __asan_report_load4();
    }
    parama->title_id = monster_describe_config_ptr->title_id;
  }
  if ( *(_BYTE *)(((unsigned __int64)&parama->special_name_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)parama - 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&parama->special_name_id >> 3)
                                                          + 0x7FFF8000) )
  {
    __asan_report_load4();
  }
  if ( parama->special_name_id )
    goto LABEL_58;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v3 + 224));
  v31 = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224))->design_config.txt_config_mgr.monster_config_mgr;
  if ( *(_BYTE *)(((unsigned __int64)&monster_describe_config_ptr->special_name_lab_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&monster_describe_config_ptr->special_name_lab_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4();
  }
  v32 = MonsterExcelConfigMgr::randSpecialNameId(
          v31,
          monster_describe_config_ptr->special_name_lab_id,
          &parama->special_name_id) != 0;
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 224));
  if ( v32 )
  {
    common::milog::MiLogStream::create(
      &v88,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "createMonster",
      1204);
    v33 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
            &v88,
            (const char (*)[38])"randSpecialNameId failed, monster id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v33, &parama->monster_id);
    common::milog::MiLogStream::~MiLogStream(&v88);
    std::shared_ptr<Monster>::shared_ptr((std::shared_ptr<Monster> *const)this, 0LL);
  }
  else
  {
LABEL_58:
    if ( *(_BYTE *)(((unsigned __int64)&group_info_config_ptr->vision_type >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&group_info_config_ptr->vision_type >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    vision_type = group_info_config_ptr->vision_type;
    if ( *(_BYTE *)(((unsigned __int64)&parama->group_vision_type >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)parama - 20) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&parama->group_vision_type >> 3)
                                                            + 0x7FFF8000) )
    {
      __asan_report_store4(&parama->group_vision_type);
    }
    parama->group_vision_type = vision_type;
    *(std::unordered_map<unsigned int,std::set<std::string>>::const_iterator *)(v3 + 96) = std::unordered_map<unsigned int,std::set<std::string>>::find(
                                                                                             &group_config_ptr->entity_apply_logic_state_set_map,
                                                                                             (const std::unordered_map<unsigned int,std::set<std::string>>::key_type *)(v3 + 48));
    __for_end._M_node = (std::_Rb_tree_iterator<std::pair<const std::string,float> >::_Base_ptr)std::unordered_map<unsigned int,std::set<std::string>>::end(&group_config_ptr->entity_apply_logic_state_set_map)._M_cur;
    if ( std::__detail::operator!=<std::pair<unsigned int const,std::set<std::string>>,false>(
           (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<std::string> >,false> *)(v3 + 96),
           (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<std::string> >,false> *)&__for_end) )
    {
      apply_logic_state_set = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<std::string>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<std::string> >,false,false> *const)(v3 + 96))->second;
      __for_range = (std::map<std::string,float> *)&param[1].drop_id;
      __for_begin._M_node = std::map<std::string,float>::begin((std::map<std::string,float> *const)&param[1].drop_id)._M_node;
      __for_end._M_node = std::map<std::string,float>::end(__for_range)._M_node;
      while ( std::operator!=(&__for_begin, &__for_end) )
      {
        __in = std::_Rb_tree_iterator<std::pair<std::string const,float>>::operator*(&__for_begin);
        key = std::get<0ul,std::string const,float>(__in);
        value = std::get<1ul,std::string const,float>(__in);
        if ( common::tools::MiscUtils::isContains<std::set<std::string> const,std::string>(apply_logic_state_set, key) )
        {
          if ( *(_BYTE *)(((unsigned __int64)value >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)value & 7) + 3) >= *(_BYTE *)(((unsigned __int64)value >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4();
          }
          v69 = *(_DWORD *)value;
          v35 = std::map<std::string,float>::operator[](&parama->global_value_map, key);
          v36 = v35;
          if ( *(_BYTE *)(((unsigned __int64)v35 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v35 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v35 >> 3) + 0x7FFF8000) )
          {
            __asan_report_store4(v35);
          }
          *v36 = v69;
        }
        std::_Rb_tree_iterator<std::pair<std::string const,float>>::operator++(&__for_begin);
      }
    }
    EntityMgr::createMonster((const MonsterParam *)(v3 + 128));
    if ( std::operator==<Monster>((const std::shared_ptr<Monster> *)(v3 + 128), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v88,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/group/group.cpp",
        "createMonster",
        1226);
      v37 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
              &v88,
              (const char (*)[32])"createMonster fails, config_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v37, (const unsigned int *)(v3 + 48));
      common::milog::MiLogStream::~MiLogStream(&v88);
      std::shared_ptr<Monster>::shared_ptr((std::shared_ptr<Monster> *const)this, 0LL);
    }
    else
    {
      Group::getScene((const Group *const)(v3 + 160));
      if ( !std::operator!=<Scene>((const std::shared_ptr<Scene> *)(v3 + 160), 0LL) )
        goto LABEL_81;
      v38 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
      if ( *(_BYTE *)(((unsigned __int64)v38 >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v39 = *(_QWORD *)v38->baseclass_0 + 56LL;
      if ( *(_BYTE *)((v39 >> 3) + 0x7FFF8000) )
        v39 = __asan_report_load8();
      v40 = *(unsigned int (__fastcall **)(std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, VisionContext *))v39;
      v41 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
      if ( v40(v38, v41, &VisionContext::meet_context) )
      {
        common::milog::MiLogStream::create(
          &v88,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/group/group.cpp",
          "createMonster",
          1234);
        v42 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
        v43 = common::milog::MiLogStream::operator<<<Monster,(Monster*)0>(&v88, v42);
        v44 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v43, (const char (*)[8])" enter ");
        v45 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
        v46 = common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v44, v45);
        v47 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v46, (const char (*)[9])" failed.");
        operator<<(v47, (const Group *)param);
        common::milog::MiLogStream::~MiLogStream(&v88);
        v48 = (Entity *)std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
        Group::revertAddEntity((Group *const)param, v48);
        std::shared_ptr<Monster>::shared_ptr((std::shared_ptr<Monster> *const)this, 0LL);
      }
      else
      {
LABEL_81:
        Group::getOwnerPlayer((const Group *const)(v3 + 192));
        if ( std::operator!=<Player>((const std::shared_ptr<Player> *)(v3 + 192), 0LL) )
        {
          v49 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
          GmComp = Player::getGmComp(v49);
          if ( PlayerGmComp::getIsMonsterInvincible(GmComp) )
          {
            v51 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
            FightPropComp = Creature::getFightPropComp(v51);
            IsInvincible = FightPropComp::getIsInvincible(FightPropComp);
            PileBoolValue::set(IsInvincible, 0, 0);
          }
        }
        EventUtil::createEvent((std::shared_ptr<Event> *)(v3 + 224), 11);
        if ( std::operator!=<Event>((const std::shared_ptr<Event> *)(v3 + 224), 0LL) )
        {
          v54 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
          EntityId = Entity::getEntityId((const Entity *const)v54);
          v56 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
          p_source_entity_id = &v56->source_entity_id;
          if ( *(_BYTE *)(((unsigned __int64)p_source_entity_id >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)p_source_entity_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_source_entity_id >> 3)
                                                                                 + 0x7FFF8000) )
          {
            __asan_report_store4(p_source_entity_id);
          }
          v56->source_entity_id = EntityId;
          v58 = *(_DWORD *)(v3 + 48);
          v59 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
          p_param1 = &v59->param1;
          if ( *(_BYTE *)(((unsigned __int64)p_param1 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)p_param1 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_param1 >> 3) + 0x7FFF8000) )
          {
            __asan_report_store4(p_param1);
          }
          v59->param1 = v58;
          v61 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
          if ( *(_BYTE *)(((unsigned __int64)&v61->param2 >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&v61->param2 >> 3) + 0x7FFF8000) <= 3 )
          {
            v61 = (std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *)__asan_report_store4(&v61->param2);
          }
          v61->param2 = 0;
          v62 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
          MonsterType = Monster::getMonsterType(v62);
          v64 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
          if ( *(_BYTE *)(((unsigned __int64)&v64->param4 >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&v64->param4 >> 3) + 0x7FFF8000) <= 3 )
          {
            v64 = (std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *)__asan_report_store4(&v64->param4);
          }
          v64->param4 = MonsterType;
          Group::handleEvent((Group *const)param, (EventPtr *)(v3 + 224));
          common::milog::MiLogStream::create(
            &v88,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/group/group.cpp",
            "createMonster",
            1256);
          v65 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                  &v88,
                  (const char (*)[31])"[Event] monster live group_id:");
          GroupId = Group::getGroupId((const Group *const)param);
          v66 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v65, &GroupId);
          v67 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v66, (const char (*)[12])" config_id:");
          v68 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
          val = Entity::getConfigId((const Entity *const)v68);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v67, &val);
          common::milog::MiLogStream::~MiLogStream(&v88);
        }
        Group::removeDeletedEntityRecord((Group *const)param, PROT_ENTITY_MONSTER, *(_DWORD *)(v3 + 48));
        std::shared_ptr<Monster>::shared_ptr(
          (std::shared_ptr<Monster> *const)this,
          (std::shared_ptr<Monster> *)(v3 + 128));
        std::shared_ptr<Event>::~shared_ptr((std::shared_ptr<Event> *const)(v3 + 224));
        std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v3 + 192));
      }
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 160));
    }
    std::shared_ptr<Monster>::~shared_ptr((std::shared_ptr<Monster> *const)(v3 + 128));
  }
LABEL_97:
  if ( v89 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    result._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<Monster,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 1266: range 0000000015FB8702-0000000015FB953B
NpcPtr __cdecl Group::createNpc(Group *const this, const GroupEntityParam *param)
{
  GroupEntityParam *v2; // rdx
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  NpcPtr result; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  unsigned __int64 n; // rax
  unsigned __int64 p_rot; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // r14
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  std::__shared_ptr_access<Npc,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v23; // r14
  unsigned __int64 v24; // rax
  unsigned int (__fastcall *v25)(std::__shared_ptr_access<Npc,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, VisionContext *); // r15
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v26; // rax
  std::__shared_ptr_access<Npc,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v27; // rax
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v30; // rax
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rdx
  Entity *v33; // rdx
  unsigned int *v34; // r9
  Player *v35; // rax
  PlayerEventComp *EventComp; // r14
  common::milog::MiLogStream *v37; // rdx
  common::milog::MiLogStream *v38; // rax
  common::milog::MiLogStream *v39; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v40; // rax
  common::milog::MiLogStream *v41; // rdx
  unsigned int *v42; // [rsp+0h] [rbp-1C0h]
  GroupEntityParam *parama; // [rsp+8h] [rbp-1B8h]
  unsigned int val; // [rsp+2Ch] [rbp-194h] BYREF
  const GroupScriptConfig *group_config_ptr; // [rsp+30h] [rbp-190h]
  const NpcScriptConfig *npc_config_ptr; // [rsp+38h] [rbp-188h]
  std::shared_ptr<CreateNpcEvent> __r; // [rsp+40h] [rbp-180h] BYREF
  common::milog::MiLogStream v48; // [rsp+50h] [rbp-170h] BYREF
  unsigned int v49[84]; // [rsp+70h] [rbp-150h] BYREF

  parama = v2;
  v3 = (unsigned __int64)v49;
  v42 = v49;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(288LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 48 4 14 config_id:1267 64 16 12 npc_ptr:1308 96 16 14 scene_ptr:1314 128 16 15 player_ptr:1327"
                        " 160 16 14 event_ptr:1330 192 64 14 npc_param:1286";
  *(_QWORD *)(v3 + 16) = Group::createNpc;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -219021312;
  v5[536862723] = -219021312;
  v5[536862724] = -219021312;
  v5[536862725] = -219021312;
  v5[536862728] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)parama >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)parama >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4();
  }
  *(_DWORD *)(v3 + 48) = parama->config_id;
  group_config_ptr = Group::getScriptConfig((const Group *const)param);
  if ( !group_config_ptr )
  {
    common::milog::MiLogStream::create(
      &v48,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "createNpc",
      1271);
    common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(&v48, (const char (*)[22])"getScriptConfig fails");
    common::milog::MiLogStream::~MiLogStream(&v48);
    std::shared_ptr<Npc>::shared_ptr((std::shared_ptr<Npc> *const)this, 0LL);
    goto LABEL_49;
  }
  npc_config_ptr = GroupScriptConfig::findNpcConfig(group_config_ptr, *(_DWORD *)(v3 + 48));
  if ( !npc_config_ptr )
  {
    common::milog::MiLogStream::create(
      &v48,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "createNpc",
      1277);
    v7 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
           &v48,
           (const char (*)[31])"findNpcConfig fails, group_id:");
    v8 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
           v7,
           (const unsigned int *)&param->pos_opt._M_payload._M_engaged);
    v9 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v8, (const char (*)[13])", config_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream(&v48);
    std::shared_ptr<Npc>::shared_ptr((std::shared_ptr<Npc> *const)this, 0LL);
    goto LABEL_49;
  }
  if ( common::tools::MiscUtils::isContains<std::unordered_map<unsigned int,unsigned int>,unsigned int>(
         (std::unordered_map<unsigned int,unsigned int> *)&param[1].gadget.blossom_chest.qualify_uid_set._M_t._M_impl._M_header._M_right,
         (const unsigned int *)(v3 + 48)) )
  {
    common::milog::MiLogStream::create(
      &v48,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "createNpc",
      1282);
    v10 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(&v48, (const char (*)[16])off_25AB6F80);
    v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v11, (const char (*)[10])off_25AB6FC0);
    common::milog::MiLogStream::~MiLogStream(&v48);
    std::shared_ptr<Npc>::shared_ptr((std::shared_ptr<Npc> *const)this, 0LL);
    goto LABEL_49;
  }
  NpcParam::NpcParam((NpcParam *const)(v3 + 192));
  if ( *(_BYTE *)(((unsigned __int64)&npc_config_ptr->npc_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)npc_config_ptr + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&npc_config_ptr->npc_id >> 3)
                                                                 + 0x7FFF8000) )
  {
    __asan_report_load4();
  }
  *(_DWORD *)(v3 + 192) = npc_config_ptr->npc_id;
  *(_DWORD *)(v3 + 196) = *(_DWORD *)(v3 + 48);
  if ( std::optional<Vector3>::has_value(&parama->pos_opt) )
  {
    n = (unsigned __int64)std::optional<Vector3>::value(&parama->pos_opt);
    if ( (char)(n & 7) >= *(_BYTE *)((n >> 3) + 0x7FFF8000) && *(_BYTE *)((n >> 3) + 0x7FFF8000) != 0
      || *(_BYTE *)(((n + 11) >> 3) + 0x7FFF8000) != 0
      && (char)((n + 11) & 7) >= *(_BYTE *)(((n + 11) >> 3) + 0x7FFF8000) )
    {
      n = __asan_report_load_n(n, 12LL);
    }
    *(_QWORD *)(v3 + 212) = *(_QWORD *)n;
    *(_DWORD *)(v3 + 220) = *(_DWORD *)(n + 8);
  }
  else
  {
    *(Vector3 *)(v3 + 212) = operator+(
                               &npc_config_ptr->pos,
                               (const Vector3 *)&param[1].gadget.blossom_chest.qualify_uid_set._M_t._M_impl._M_header._M_parent);
  }
  if ( std::optional<Vector3>::has_value(&parama->rot_opt) )
    p_rot = (unsigned __int64)std::optional<Vector3>::value(&parama->rot_opt);
  else
    p_rot = (unsigned __int64)&npc_config_ptr->rot;
  if ( (char)(p_rot & 7) >= *(_BYTE *)((p_rot >> 3) + 0x7FFF8000) && *(_BYTE *)((p_rot >> 3) + 0x7FFF8000) != 0
    || *(_BYTE *)(((p_rot + 11) >> 3) + 0x7FFF8000) != 0
    && (char)((p_rot + 11) & 7) >= *(_BYTE *)(((p_rot + 11) >> 3) + 0x7FFF8000) )
  {
    p_rot = __asan_report_load_n(p_rot, 12LL);
  }
  *(_QWORD *)(v3 + 224) = *(_QWORD *)p_rot;
  *(_DWORD *)(v3 + 232) = *(_DWORD *)(p_rot + 8);
  std::enable_shared_from_this<Group>::shared_from_this((std::enable_shared_from_this<Group> *const)(v3 + 160));
  std::shared_ptr<Group>::operator=((std::shared_ptr<Group> *const)(v3 + 240), (std::shared_ptr<Group> *)(v3 + 160));
  std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v3 + 160));
  if ( *(_BYTE *)(((unsigned __int64)&npc_config_ptr->room_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)npc_config_ptr + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&npc_config_ptr->room_id >> 3)
                                                                  + 0x7FFF8000) )
  {
    __asan_report_load4();
  }
  *(_DWORD *)(v3 + 204) = npc_config_ptr->room_id;
  if ( !std::operator!=<unsigned int,proto::ProtEntityType>(
          (const std::function<unsigned int(proto::ProtEntityType)> *)&param[2].gadget.blossom_chest.qualify_uid_set._M_t._M_impl._M_node_count,
          0LL) )
  {
    common::milog::MiLogStream::create(
      &v48,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/group/group.cpp",
      "createNpc",
      1305);
    v19 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
            &v48,
            (const char (*)[29])"invalid id func  @group_id: ");
    v20 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
            v19,
            (const unsigned int *)&param->pos_opt._M_payload._M_engaged);
    v21 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v20, (const char (*)[13])" config_id: ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v21, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream(&v48);
    goto LABEL_30;
  }
  *(_DWORD *)(v3 + 200) = std::function<unsigned int ()(proto::ProtEntityType)>::operator()(
                            (const std::function<unsigned int(proto::ProtEntityType)> *const)&param[2].gadget.blossom_chest.qualify_uid_set._M_t._M_impl._M_node_count,
                            PROT_ENTITY_NPC);
  if ( *(_DWORD *)(v3 + 200) )
  {
LABEL_30:
    EntityMgr::createNpc((const NpcParam *)(v3 + 64));
    if ( std::operator==<Npc>((const std::shared_ptr<Npc> *)(v3 + 64), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v48,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/group/group.cpp",
        "createNpc",
        1311);
      v22 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
              &v48,
              (const char (*)[28])"createNpc fails, config_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v22, (const unsigned int *)(v3 + 48));
      common::milog::MiLogStream::~MiLogStream(&v48);
      std::shared_ptr<Npc>::shared_ptr((std::shared_ptr<Npc> *const)this, 0LL);
    }
    else
    {
      Group::getScene((const Group *const)(v3 + 96));
      if ( !std::operator!=<Scene>((const std::shared_ptr<Scene> *)(v3 + 96), 0LL) )
        goto LABEL_55;
      v23 = std::__shared_ptr_access<Npc,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Npc,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      if ( *(_BYTE *)(((unsigned __int64)v23 >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v24 = (unsigned __int64)(v23->_vptr_DescribalBase + 7);
      if ( *(_BYTE *)((v24 >> 3) + 0x7FFF8000) )
        v24 = __asan_report_load8();
      v25 = *(unsigned int (__fastcall **)(std::__shared_ptr_access<Npc,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, VisionContext *))v24;
      v26 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
      if ( v25(v23, v26, &VisionContext::meet_context) )
      {
        common::milog::MiLogStream::create(
          &v48,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/group/group.cpp",
          "createNpc",
          1319);
        v27 = std::__shared_ptr_access<Npc,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Npc,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        v28 = common::milog::MiLogStream::operator<<<Npc,(Npc*)0>(&v48, v27);
        v29 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v28, (const char (*)[8])" enter ");
        v30 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
        v31 = common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v29, v30);
        v32 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v31, (const char (*)[9])" failed.");
        operator<<(v32, (const Group *)param);
        common::milog::MiLogStream::~MiLogStream(&v48);
        v33 = (Entity *)std::__shared_ptr_access<Npc,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Npc,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        Group::revertAddEntity((Group *const)param, v33);
        std::shared_ptr<Npc>::shared_ptr((std::shared_ptr<Npc> *const)this, 0LL);
      }
      else
      {
LABEL_55:
        if ( std::operator!=<Scene>((const std::shared_ptr<Scene> *)(v3 + 96), 0LL) )
        {
          std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
          Scene::getOwnPlayer((const Scene *const)(v3 + 128));
          if ( std::operator!=<Player>((const std::shared_ptr<Player> *)(v3 + 128), 0LL) )
          {
            common::tools::perf::make_shared<CreateNpcEvent,unsigned int &,unsigned int &,unsigned int &,unsigned int &>(
              (unsigned int *)&__r,
              (unsigned int *)(v3 + 192),
              (unsigned int *)&param->monster.affix_set._M_t._M_impl.std::_Rb_tree_header,
              (unsigned int *)&param->pos_opt._M_payload._M_engaged,
              (unsigned int *)(v3 + 48),
              v34,
              v49,
              &parama->config_id);
            std::shared_ptr<BaseEvent>::shared_ptr<CreateNpcEvent,void>(
              (std::shared_ptr<BaseEvent> *const)(v3 + 160),
              &__r);
            std::shared_ptr<CreateNpcEvent>::~shared_ptr(&__r);
            v35 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
            EventComp = Player::getEventComp(v35);
            std::shared_ptr<BaseEvent>::shared_ptr(
              (std::shared_ptr<BaseEvent> *const)&__r,
              (const std::shared_ptr<BaseEvent> *)(v3 + 160));
            PlayerEventComp::notifyEvent(EventComp, (BaseEventPtr *)&__r);
            std::shared_ptr<BaseEvent>::~shared_ptr((std::shared_ptr<BaseEvent> *const)&__r);
            std::shared_ptr<BaseEvent>::~shared_ptr((std::shared_ptr<BaseEvent> *const)(v3 + 160));
          }
          else
          {
            common::milog::MiLogStream::create(
              &v48,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/group/group.cpp",
              "createNpc",
              1335);
            v37 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                    &v48,
                    (const char (*)[23])"player is null, group:");
            v38 = operator<<(v37, (const Group *)param);
            v39 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v38, (const char (*)[8])" scene:");
            v40 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
            common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v39, v40);
            common::milog::MiLogStream::~MiLogStream(&v48);
          }
          std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v3 + 128));
        }
        else
        {
          common::milog::MiLogStream::create(
            &v48,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/group/group.cpp",
            "createNpc",
            1340);
          v41 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                  &v48,
                  (const char (*)[22])"scene is null, group:");
          operator<<(v41, (const Group *)param);
          common::milog::MiLogStream::~MiLogStream(&v48);
        }
        std::shared_ptr<Npc>::shared_ptr((std::shared_ptr<Npc> *const)this, (std::shared_ptr<Npc> *)(v3 + 64));
      }
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 96));
    }
    std::shared_ptr<Npc>::~shared_ptr((std::shared_ptr<Npc> *const)(v3 + 64));
    goto LABEL_48;
  }
  common::milog::MiLogStream::create(
    &v48,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/group/group.cpp",
    "createNpc",
    1298);
  v14 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(&v48, (const char (*)[14])"0 entity_id @");
  v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
          v14,
          (const unsigned int *)&param->pos_opt._M_payload._M_engaged);
  v16 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v15, (const char (*)[13])" config_id: ");
  v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, (const unsigned int *)(v3 + 48));
  v18 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v17, (const char (*)[6])" uid:");
  val = Group::getOwnerUid((const Group *const)param);
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, &val);
  common::milog::MiLogStream::~MiLogStream(&v48);
  std::shared_ptr<Npc>::shared_ptr((std::shared_ptr<Npc> *const)this, 0LL);
LABEL_48:
  NpcParam::~NpcParam((NpcParam *const)(v3 + 192));
LABEL_49:
  if ( v42 == (unsigned int *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    result._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = -168430091;
  }
  result._M_ptr = (std::__shared_ptr<Npc,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 1348: range 0000000015FB953C-0000000015FBBC8B
GadgetPtr __cdecl Group::createGadget(Group *const this, const GroupEntityParam *param)
{
  const GroupEntityParam *v2; // rdx
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  SceneExcelConfigMgr *p_scene_config_mgr; // rcx
  common::milog::MiLogStream *v7; // rax
  GadgetPtr result; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  unsigned __int64 n; // rax
  unsigned __int64 p_rot; // rax
  uint32_t route_id; // eax
  data::GadgetState *v23; // rdx
  data::GadgetState gadget_state; // eax
  const WorktopConfig *v25; // rax
  char v26; // al
  const WorktopConfig *v27; // rax
  __int64 v28; // rdx
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v29; // rax
  std::map<std::string,float>::mapped_type *v30; // rax
  _DWORD *v31; // rdx
  HuntingExcelConfigMgr *p_hunting_config_mgr; // rcx
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rax
  common::milog::MiLogStream *v36; // rax
  common::milog::MiLogStream *v37; // r14
  common::milog::MiLogStream *v38; // rax
  common::milog::MiLogStream *v39; // rax
  common::milog::MiLogStream *v40; // rax
  std::map<std::string,float>::mapped_type *v41; // rax
  _DWORD *v42; // rdx
  common::milog::MiLogStream *v43; // rax
  common::milog::MiLogStream *v44; // rax
  common::milog::MiLogStream *v45; // rax
  common::milog::MiLogStream *v46; // rax
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v47; // r14
  unsigned __int64 v48; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v49; // rsi
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v50; // rax
  common::milog::MiLogStream *v51; // rax
  common::milog::MiLogStream *v52; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v53; // rax
  common::milog::MiLogStream *v54; // rax
  common::milog::MiLogStream *v55; // rdx
  Entity *v56; // rdx
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v57; // rax
  uint32_t EntityId; // r14d
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v59; // rdx
  uint32_t *p_source_entity_id; // rax
  int32_t v61; // r14d
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v62; // rdx
  int32_t *p_param1; // rax
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v64; // rax
  uint32_t GadgetId; // r14d
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v66; // rax
  common::milog::MiLogStream *v67; // r14
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v68; // rax
  common::milog::MiLogStream *v69; // rax
  common::milog::MiLogStream *v70; // rax
  int v71; // [rsp+0h] [rbp-5B0h]
  int v72; // [rsp+0h] [rbp-5B0h]
  unsigned int (__fastcall *v73)(std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, VisionContext *); // [rsp+0h] [rbp-5B0h]
  const GroupEntityParam *parama; // [rsp+8h] [rbp-5A8h]
  unsigned int val; // [rsp+28h] [rbp-588h] BYREF
  uint32_t group_final_revise_level; // [rsp+2Ch] [rbp-584h]
  uint32_t scene_revise_level; // [rsp+30h] [rbp-580h]
  uint32_t base_level; // [rsp+34h] [rbp-57Ch]
  std::map<std::string,float>::const_iterator __for_begin; // [rsp+38h] [rbp-578h] BYREF
  std::map<std::string,float>::const_iterator __for_end; // [rsp+40h] [rbp-570h] BYREF
  const data::SceneExcelConfig *scene_config_ptr; // [rsp+48h] [rbp-568h]
  const GroupScriptConfig *group_config_ptr; // [rsp+50h] [rbp-560h]
  const GroupInfoScriptConfig *group_info_config_ptr; // [rsp+58h] [rbp-558h]
  const GadgetScriptConfig *gadget_script_config_ptr; // [rsp+60h] [rbp-550h]
  const data::GadgetExcelConfig *gadget_config_ptr; // [rsp+68h] [rbp-548h]
  const std::map<std::string,float> *__for_range; // [rsp+70h] [rbp-540h]
  const data::HuntingGroupInfoExcelConfig *hunting_group_info_config_ptr; // [rsp+78h] [rbp-538h]
  const std::set<std::string> *apply_logic_state_set; // [rsp+80h] [rbp-530h]
  std::map<std::string,float> *__for_range_0; // [rsp+88h] [rbp-528h]
  std::pair<const std::string,float> *__in; // [rsp+90h] [rbp-520h]
  std::tuple_element<0,std::pair<const std::string,float> >::type *key_0; // [rsp+98h] [rbp-518h]
  std::tuple_element<1,std::pair<const std::string,float> >::type *value_0; // [rsp+A0h] [rbp-510h]
  const std::pair<const std::string,float> *v94; // [rsp+A8h] [rbp-508h]
  std::tuple_element<0,const std::pair<const std::string,float> >::type *key; // [rsp+B0h] [rbp-500h]
  std::tuple_element<1,const std::pair<const std::string,float> >::type *value; // [rsp+B8h] [rbp-4F8h]
  std::enable_shared_from_this<Group> v97; // [rsp+C0h] [rbp-4F0h] BYREF
  std::shared_ptr<EntitySightGroup> __r; // [rsp+D0h] [rbp-4E0h] BYREF
  common::milog::MiLogStream v99; // [rsp+E0h] [rbp-4D0h] BYREF
  char v100[1200]; // [rsp+100h] [rbp-4B0h] BYREF

  parama = v2;
  v3 = (unsigned __int64)v100;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_5(1152LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "7 32 4 14 config_id:1349 48 8 9 iter:1375 80 8 21 logic_state_iter:1509 112 16 15 gadget_ptr:152"
                        "2 144 16 14 scene_ptr:1528 176 16 12 evt_ptr:1540 208 816 17 gadget_param:1388";
  *(_QWORD *)(v3 + 16) = Group::createGadget;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61956;
  v5[536862721] = -234881024;
  v5[536862722] = 62194;
  v5[536862722] = -234881024;
  v5[536862723] = 62194;
  v5[536862724] = 62194;
  v5[536862725] = 62194;
  v5[536862726] = 62194;
  v5[536862752] = -202116109;
  v5[536862753] = -202116109;
  v5[536862754] = -202116109;
  v5[536862755] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)parama >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)parama >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4();
  }
  *(_DWORD *)(v3 + 32) = parama->config_id;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v3 + 176));
  p_scene_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 176))->design_config.txt_config_mgr.scene_config_mgr;
  if ( *(_BYTE *)(((unsigned __int64)&param->monster.affix_set._M_t._M_impl.std::_Rb_tree_header >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&param->monster.affix_set._M_t._M_impl.std::_Rb_tree_header >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4();
  }
  scene_config_ptr = data::SceneExcelConfigMgrBase::findSceneExcelConfig(
                       p_scene_config_mgr,
                       param->monster.affix_set._M_t._M_impl._M_header._M_color);
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 176));
  if ( !scene_config_ptr )
  {
    common::milog::MiLogStream::create(
      &v99,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "createGadget",
      1353);
    v7 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
           &v99,
           (const char (*)[38])"findSceneExcelConfig failed,scene id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
      v7,
      (const unsigned int *)&param->monster.affix_set._M_t._M_impl.std::_Rb_tree_header);
    common::milog::MiLogStream::~MiLogStream(&v99);
    std::shared_ptr<Gadget>::shared_ptr((std::shared_ptr<Gadget> *const)this, 0LL);
    goto LABEL_197;
  }
  group_config_ptr = Group::getScriptConfig((const Group *const)param);
  if ( !group_config_ptr )
  {
    common::milog::MiLogStream::create(
      &v99,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "createGadget",
      1359);
    common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(&v99, (const char (*)[22])"getScriptConfig fails");
    common::milog::MiLogStream::~MiLogStream(&v99);
    std::shared_ptr<Gadget>::shared_ptr((std::shared_ptr<Gadget> *const)this, 0LL);
    goto LABEL_197;
  }
  group_info_config_ptr = Group::getInfoScriptConfig((const Group *const)param);
  if ( !group_info_config_ptr )
  {
    common::milog::MiLogStream::create(
      &v99,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "createGadget",
      1365);
    common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
      &v99,
      (const char (*)[31])"getGroupInfoScriptConfig fails");
    common::milog::MiLogStream::~MiLogStream(&v99);
    std::shared_ptr<Gadget>::shared_ptr((std::shared_ptr<Gadget> *const)this, 0LL);
    goto LABEL_197;
  }
  gadget_script_config_ptr = GroupScriptConfig::findGadgetConfig(group_config_ptr, *(_DWORD *)(v3 + 32));
  if ( gadget_script_config_ptr )
  {
    *(std::unordered_map<unsigned int,unsigned int>::iterator *)(v3 + 48) = std::unordered_map<unsigned int,unsigned int>::find(
                                                                              (std::unordered_map<unsigned int,unsigned int> *const)&param[1].gadget.blossom_chest.qualify_uid_set._M_t._M_impl._M_header._M_right,
                                                                              (const std::unordered_map<unsigned int,unsigned int>::key_type *)(v3 + 32));
    __for_end._M_node = (std::_Rb_tree_const_iterator<std::pair<const std::string,float> >::_Base_ptr)std::unordered_map<unsigned int,unsigned int>::end((std::unordered_map<unsigned int,unsigned int> *const)&param[1].gadget.blossom_chest.qualify_uid_set._M_t._M_impl._M_header._M_right)._M_cur;
    if ( std::__detail::operator!=<std::pair<unsigned int const,unsigned int>,false>(
           (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false> *)(v3 + 48),
           (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false> *)&__for_end) )
    {
      common::milog::MiLogStream::create(
        &v99,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/group/group.cpp",
        "createGadget",
        1378);
      v12 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(&v99, (const char (*)[11])"group_id: ");
      v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v12,
              (const unsigned int *)&param->pos_opt._M_payload._M_engaged);
      v14 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
              v13,
              (const char (*)[20])" gadget config_id: ");
      v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, (const unsigned int *)(v3 + 32));
      common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v15, (const char (*)[18])off_25AB68A0);
      common::milog::MiLogStream::~MiLogStream(&v99);
      std::shared_ptr<Gadget>::shared_ptr((std::shared_ptr<Gadget> *const)this, 0LL);
      goto LABEL_197;
    }
    if ( (unsigned __int8)Group::isOneoffGadgetDead((const Group *const)param, *(_DWORD *)(v3 + 32)) )
    {
      common::milog::MiLogStream::create(
        &v99,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/group/group.cpp",
        "createGadget",
        1383);
      v16 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(&v99, (const char (*)[11])"group_id: ");
      v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v16,
              (const unsigned int *)&param->pos_opt._M_payload._M_engaged);
      v18 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v17, (const char (*)[13])" config_id: ");
      v19 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, (const unsigned int *)(v3 + 32));
      common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(v19, (const char (*)[24])off_25AB7260);
      common::milog::MiLogStream::~MiLogStream(&v99);
      std::shared_ptr<Gadget>::shared_ptr((std::shared_ptr<Gadget> *const)this, 0LL);
      goto LABEL_197;
    }
    group_final_revise_level = Group::getFinalReviseLevel((const Group *const)param);
    GadgetParam::GadgetParam((GadgetParam *const)(v3 + 208));
    if ( *(_BYTE *)(((unsigned __int64)gadget_script_config_ptr >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)gadget_script_config_ptr >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    *(_DWORD *)(v3 + 212) = gadget_script_config_ptr->config_id;
    *(_DWORD *)(v3 + 208) = Group::getModifiedCreateGadgetId((Group *const)param, parama, gadget_script_config_ptr);
    if ( std::optional<Vector3>::has_value(&parama->pos_opt) )
    {
      n = (unsigned __int64)std::optional<Vector3>::value(&parama->pos_opt);
      if ( (char)(n & 7) >= *(_BYTE *)((n >> 3) + 0x7FFF8000) && *(_BYTE *)((n >> 3) + 0x7FFF8000) != 0
        || *(_BYTE *)(((n + 11) >> 3) + 0x7FFF8000) != 0
        && (char)((n + 11) & 7) >= *(_BYTE *)(((n + 11) >> 3) + 0x7FFF8000) )
      {
        n = __asan_report_load_n(n, 12LL);
      }
      *(_QWORD *)(v3 + 220) = *(_QWORD *)n;
      *(_DWORD *)(v3 + 228) = *(_DWORD *)(n + 8);
    }
    else
    {
      *(Vector3 *)(v3 + 220) = operator+(
                                 &gadget_script_config_ptr->pos,
                                 (const Vector3 *)&param[1].gadget.blossom_chest.qualify_uid_set._M_t._M_impl._M_header._M_parent);
    }
    if ( std::optional<Vector3>::has_value(&parama->rot_opt) )
      p_rot = (unsigned __int64)std::optional<Vector3>::value(&parama->rot_opt);
    else
      p_rot = (unsigned __int64)&gadget_script_config_ptr->rot;
    if ( (char)(p_rot & 7) >= *(_BYTE *)((p_rot >> 3) + 0x7FFF8000) && *(_BYTE *)((p_rot >> 3) + 0x7FFF8000) != 0
      || *(_BYTE *)(((p_rot + 11) >> 3) + 0x7FFF8000) != 0
      && (char)((p_rot + 11) & 7) >= *(_BYTE *)(((p_rot + 11) >> 3) + 0x7FFF8000) )
    {
      p_rot = __asan_report_load_n(p_rot, 12LL);
    }
    *(_QWORD *)(v3 + 232) = *(_QWORD *)p_rot;
    *(_DWORD *)(v3 + 240) = *(_DWORD *)(p_rot + 8);
    if ( *(_BYTE *)(((unsigned __int64)&gadget_script_config_ptr->level >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)gadget_script_config_ptr + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&gadget_script_config_ptr->level >> 3)
                                                                              + 0x7FFF8000) )
    {
      __asan_report_load4();
    }
    *(_DWORD *)(v3 + 244) = gadget_script_config_ptr->level + group_final_revise_level;
    if ( *(_BYTE *)(((unsigned __int64)&parama->route_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&parama->route_id >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    if ( parama->route_id )
    {
      route_id = parama->route_id;
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&gadget_script_config_ptr->route_id >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&gadget_script_config_ptr->route_id >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4();
      }
      route_id = gadget_script_config_ptr->route_id;
    }
    *(_DWORD *)(v3 + 440) = route_id;
    if ( *(_BYTE *)(((unsigned __int64)&gadget_script_config_ptr->is_start_route >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)gadget_script_config_ptr + 77) & 7) >= *(_BYTE *)(((unsigned __int64)&gadget_script_config_ptr->is_start_route >> 3)
                                                                            + 0x7FFF8000) )
    {
      __asan_report_load1(&gadget_script_config_ptr->is_start_route);
    }
    *(_BYTE *)(v3 + 444) = gadget_script_config_ptr->is_start_route;
    if ( *(_BYTE *)(((unsigned __int64)&parama->route_index >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)parama - 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&parama->route_index >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4();
    }
    *(_DWORD *)(v3 + 476) = parama->route_index;
    if ( *(char *)(((unsigned __int64)&parama->is_platform_started >> 3) + 0x7FFF8000) < 0 )
      __asan_report_load1(&parama->is_platform_started);
    *(_BYTE *)(v3 + 480) = parama->is_platform_started;
    if ( *(_BYTE *)(((unsigned __int64)&parama->is_platform_use_last_index >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)parama + 1) & 7) >= *(_BYTE *)(((unsigned __int64)&parama->is_platform_use_last_index >> 3)
                                                         + 0x7FFF8000) )
    {
      __asan_report_load1(&parama->is_platform_use_last_index);
    }
    *(_BYTE *)(v3 + 481) = parama->is_platform_use_last_index;
    if ( *(_BYTE *)(((unsigned __int64)&gadget_script_config_ptr->drop_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&gadget_script_config_ptr->drop_id >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    *(_DWORD *)(v3 + 256) = gadget_script_config_ptr->drop_id;
    if ( *(_BYTE *)(((unsigned __int64)&gadget_script_config_ptr->chest_drop_id >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)gadget_script_config_ptr + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&gadget_script_config_ptr->chest_drop_id >> 3)
                                                                              + 0x7FFF8000) )
    {
      __asan_report_load4();
    }
    *(_DWORD *)(v3 + 428) = gadget_script_config_ptr->chest_drop_id;
    if ( *(char *)(((unsigned __int64)&gadget_script_config_ptr->is_show_cutscene >> 3) + 0x7FFF8000) < 0 )
      __asan_report_load1(&gadget_script_config_ptr->is_show_cutscene);
    *(_BYTE *)(v3 + 432) = gadget_script_config_ptr->is_show_cutscene;
    if ( *(_BYTE *)(((unsigned __int64)&gadget_script_config_ptr->is_auto_pick >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)gadget_script_config_ptr + 73) & 7) >= *(_BYTE *)(((unsigned __int64)&gadget_script_config_ptr->is_auto_pick >> 3)
                                                                            + 0x7FFF8000) )
    {
      __asan_report_load1(&gadget_script_config_ptr->is_auto_pick);
    }
    *(_BYTE *)(v3 + 433) = gadget_script_config_ptr->is_auto_pick;
    if ( std::optional<unsigned int>::has_value(&parama->state_opt) )
    {
      v23 = (data::GadgetState *)std::optional<unsigned int>::value(&parama->state_opt);
      if ( *(_BYTE *)(((unsigned __int64)v23 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v23 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v23 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4();
      }
      gadget_state = *v23;
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&gadget_script_config_ptr->gadget_state >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)gadget_script_config_ptr + 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&gadget_script_config_ptr->gadget_state >> 3)
                                                                                + 0x7FFF8000) )
      {
        __asan_report_load4();
      }
      gadget_state = gadget_script_config_ptr->gadget_state;
    }
    *(_DWORD *)(v3 + 260) = gadget_state;
    std::enable_shared_from_this<Group>::shared_from_this(&v97);
    std::shared_ptr<Group>::operator=((std::shared_ptr<Group> *const)(v3 + 264), (std::shared_ptr<Group> *)&v97);
    std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)&v97);
    if ( *(_BYTE *)(((unsigned __int64)&gadget_script_config_ptr->born_type >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&gadget_script_config_ptr->born_type >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    *(_DWORD *)(v3 + 300) = gadget_script_config_ptr->born_type;
    if ( *(_BYTE *)(((unsigned __int64)&gadget_script_config_ptr->room_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&gadget_script_config_ptr->room_id >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    *(_DWORD *)(v3 + 304) = gadget_script_config_ptr->room_id;
    if ( *(_BYTE *)(((unsigned __int64)&gadget_script_config_ptr->interact_id >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)gadget_script_config_ptr - 100) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&gadget_script_config_ptr->interact_id >> 3)
                                                                               + 0x7FFF8000) )
    {
      __asan_report_load4();
    }
    *(_DWORD *)(v3 + 500) = gadget_script_config_ptr->interact_id;
    if ( *(_BYTE *)(((unsigned __int64)&gadget_script_config_ptr->guest_ban_drop >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&gadget_script_config_ptr->guest_ban_drop >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    *(_DWORD *)(v3 + 308) = gadget_script_config_ptr->guest_ban_drop;
    if ( *(_BYTE *)(((unsigned __int64)&gadget_script_config_ptr->is_guest_can_operate >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)gadget_script_config_ptr - 76) & 7) >= *(_BYTE *)(((unsigned __int64)&gadget_script_config_ptr->is_guest_can_operate >> 3)
                                                                            + 0x7FFF8000) )
    {
      __asan_report_load1(&gadget_script_config_ptr->is_guest_can_operate);
    }
    *(_BYTE *)(v3 + 504) = gadget_script_config_ptr->is_guest_can_operate;
    if ( std::optional<WorktopConfig>::has_value(&gadget_script_config_ptr->worktop_config_opt) )
    {
      if ( *(_BYTE *)(((unsigned __int64)&gadget_script_config_ptr->is_persistent >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)gadget_script_config_ptr + 76) & 7) >= *(_BYTE *)(((unsigned __int64)&gadget_script_config_ptr->is_persistent >> 3)
                                                                              + 0x7FFF8000) )
      {
        __asan_report_load1(&gadget_script_config_ptr->is_persistent);
      }
      if ( !gadget_script_config_ptr->is_persistent )
        goto LABEL_84;
      v25 = std::optional<WorktopConfig>::value(&gadget_script_config_ptr->worktop_config_opt);
      if ( *(char *)(((unsigned __int64)&v25->is_persistent >> 3) + 0x7FFF8000) < 0 )
        v25 = (const WorktopConfig *)__asan_report_load1(&v25->is_persistent);
      if ( v25->is_persistent )
        v26 = 1;
      else
LABEL_84:
        v26 = 0;
      if ( v26 )
        *(_BYTE *)(v3 + 505) = 1;
      v27 = std::optional<WorktopConfig>::value(&gadget_script_config_ptr->worktop_config_opt);
      std::set<unsigned int>::operator=((std::set<unsigned int> *const)(v3 + 512), &v27->init_option_set);
    }
    if ( *(_BYTE *)(((unsigned __int64)&gadget_script_config_ptr->talk_state >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&gadget_script_config_ptr->talk_state >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    *(_DWORD *)(v3 + 392) = gadget_script_config_ptr->talk_state;
    if ( *(_BYTE *)(((unsigned __int64)&parama->gadget >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&parama->gadget >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    *(_DWORD *)(v3 + 560) = parama->gadget.blossom_chest.blossom_chest_id;
    if ( *(_BYTE *)(((unsigned __int64)&parama->gadget.blossom_chest.drop_id >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)parama + 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&parama->gadget.blossom_chest.drop_id >> 3)
                                                             + 0x7FFF8000) )
    {
      __asan_report_load4();
    }
    *(_DWORD *)(v3 + 564) = parama->gadget.blossom_chest.drop_id;
    if ( *(_BYTE *)(((unsigned __int64)&parama->gadget.blossom_chest.dead_time >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&parama->gadget.blossom_chest.dead_time >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    *(_DWORD *)(v3 + 568) = parama->gadget.blossom_chest.dead_time;
    std::set<unsigned int>::operator=(
      (std::set<unsigned int> *const)(v3 + 576),
      &parama->gadget.blossom_chest.qualify_uid_set);
    std::set<unsigned int>::operator=(
      (std::set<unsigned int> *const)(v3 + 624),
      &parama->gadget.blossom_chest.remain_uid_set);
    if ( *(_BYTE *)(((unsigned __int64)&parama->gadget.blossom_chest.item_limit_type >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&parama->gadget.blossom_chest.item_limit_type >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    *(_DWORD *)(v3 + 672) = parama->gadget.blossom_chest.item_limit_type;
    if ( *(_BYTE *)(((unsigned __int64)&parama->gadget.blossom_chest.refresh_id >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)parama - 28) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&parama->gadget.blossom_chest.refresh_id >> 3)
                                                            + 0x7FFF8000) )
    {
      __asan_report_load4();
    }
    *(_DWORD *)(v3 + 676) = parama->gadget.blossom_chest.refresh_id;
    if ( *(_BYTE *)(((unsigned __int64)&parama->gadget.general_reward >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&parama->gadget.general_reward >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    *(_DWORD *)(v3 + 680) = parama->gadget.general_reward.resin;
    if ( *(_BYTE *)(((unsigned __int64)&parama->gadget.general_reward.dead_time >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)parama - 20) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&parama->gadget.general_reward.dead_time >> 3)
                                                            + 0x7FFF8000) )
    {
      __asan_report_load4();
    }
    *(_DWORD *)(v3 + 684) = parama->gadget.general_reward.dead_time;
    if ( *(_BYTE *)(((unsigned __int64)&parama->gadget.general_reward.destroy_cd >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&parama->gadget.general_reward.destroy_cd >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    *(_DWORD *)(v3 + 688) = parama->gadget.general_reward.destroy_cd;
    std::map<unsigned int,proto::GeneralRewardBin>::operator=(
      (std::map<unsigned int,proto::GeneralRewardBin> *const)(v3 + 696),
      &parama->gadget.general_reward.qualify_info_map);
    std::set<unsigned int>::operator=(
      (std::set<unsigned int> *const)(v3 + 744),
      &parama->gadget.general_reward.remain_uid_set);
    if ( *(_BYTE *)(((unsigned __int64)&parama->gadget.general_reward.item_limit_type >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&parama->gadget.general_reward.item_limit_type >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    *(_DWORD *)(v3 + 792) = parama->gadget.general_reward.item_limit_type;
    if ( (((unsigned __int8)parama + 92) & 7) >= *(_BYTE *)(((unsigned __int64)&parama->gadget.general_reward.item_param >> 3)
                                                          + 0x7FFF8000)
      && *(_BYTE *)(((unsigned __int64)&parama->gadget.general_reward.item_param >> 3) + 0x7FFF8000) != 0
      || *(_BYTE *)((((unsigned __int64)&parama->gadget.general_reward.item_param.promote_level + 3) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)parama + 107) & 7) >= *(_BYTE *)((((unsigned __int64)&parama->gadget.general_reward.item_param.promote_level
                                                             + 3) >> 3)
                                                           + 0x7FFF8000) )
    {
      __asan_report_load_n(&parama->gadget.general_reward.item_param, 16LL);
    }
    v28 = *(_QWORD *)&parama->gadget.general_reward.item_param.level;
    *(_QWORD *)(v3 + 796) = *(_QWORD *)&parama->gadget.general_reward.item_param.item_id;
    *(_QWORD *)(v3 + 804) = v28;
    if ( *(_BYTE *)(((unsigned __int64)&gadget_script_config_ptr->is_auto_pick >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)gadget_script_config_ptr + 73) & 7) >= *(_BYTE *)(((unsigned __int64)&gadget_script_config_ptr->is_auto_pick >> 3)
                                                                            + 0x7FFF8000) )
    {
      __asan_report_load1(&gadget_script_config_ptr->is_auto_pick);
    }
    *(_BYTE *)(v3 + 812) = gadget_script_config_ptr->is_auto_pick;
    std::set<unsigned int>::operator=(
      (std::set<unsigned int> *const)(v3 + 816),
      &parama->gadget.general_reward.open_state_set);
    if ( *(char *)(((unsigned __int64)&parama->gadget.general_reward.is_general_reward_hiden >> 3) + 0x7FFF8000) < 0 )
      __asan_report_load1(&parama->gadget.general_reward.is_general_reward_hiden);
    *(_BYTE *)(v3 + 864) = parama->gadget.general_reward.is_general_reward_hiden;
    if ( *(_BYTE *)(((unsigned __int64)&gadget_script_config_ptr->offering_config >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&gadget_script_config_ptr->offering_config >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    *(_DWORD *)(v3 + 872) = gadget_script_config_ptr->offering_config.offering_id;
    if ( *(_BYTE *)(((unsigned __int64)&gadget_script_config_ptr->is_use_point_array >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)gadget_script_config_ptr + 52) & 7) >= *(_BYTE *)(((unsigned __int64)&gadget_script_config_ptr->is_use_point_array >> 3)
                                                                            + 0x7FFF8000) )
    {
      __asan_report_load1(&gadget_script_config_ptr->is_use_point_array);
    }
    if ( gadget_script_config_ptr->is_use_point_array )
    {
      *(_DWORD *)(v3 + 436) = 3;
    }
    else
    {
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)(v3 + 176));
      v29 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 176));
      gadget_config_ptr = data::GadgetExcelConfigMgrBase::findGadgetExcelConfig(
                            &v29->design_config.txt_config_mgr.gadget_config_mgr,
                            *(_DWORD *)(v3 + 208));
      std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 176));
      if ( gadget_config_ptr )
      {
        if ( *(_BYTE *)(((unsigned __int64)&gadget_config_ptr->type >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)gadget_config_ptr + 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&gadget_config_ptr->type >> 3)
                                                                           + 0x7FFF8000) )
        {
          __asan_report_load4();
        }
        if ( gadget_config_ptr->type == Platform )
          *(_DWORD *)(v3 + 436) = 1;
      }
    }
    if ( *(_BYTE *)(((unsigned __int64)&parama->gadget.foundation >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&parama->gadget.foundation >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    *(_DWORD *)(v3 + 880) = parama->gadget.foundation.point_config_id;
    std::shared_ptr<TowerDefensePlayBase>::operator=(
      (std::shared_ptr<TowerDefensePlayBase> *const)(v3 + 888),
      &parama->gadget.foundation.play_base_ptr);
    std::map<std::string,float>::operator=(
      (std::map<std::string,float> *const)(v3 + 960),
      &gadget_script_config_ptr->server_global_value_map);
    __for_range = &parama->global_value_map;
    __for_begin._M_node = std::map<std::string,float>::begin(&parama->global_value_map)._M_node;
    __for_end._M_node = std::map<std::string,float>::end(__for_range)._M_node;
    while ( std::operator!=(&__for_begin, &__for_end) )
    {
      v94 = std::_Rb_tree_const_iterator<std::pair<std::string const,float>>::operator*(&__for_begin);
      key = std::get<0ul,std::string const,float>(v94);
      value = (std::tuple_element<1,const std::pair<const std::string,float> >::type *)std::get<1ul,std::string const,float>(v94);
      if ( *(_BYTE *)(((unsigned __int64)value >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)value & 7) + 3) >= *(_BYTE *)(((unsigned __int64)value >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4();
      }
      v71 = *(_DWORD *)value;
      v30 = std::map<std::string,float>::operator[]((std::map<std::string,float> *const)(v3 + 960), key);
      v31 = v30;
      if ( *(_BYTE *)(((unsigned __int64)v30 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v30 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v30 >> 3) + 0x7FFF8000) )
      {
        __asan_report_store4(v30);
      }
      *v31 = v71;
      std::_Rb_tree_const_iterator<std::pair<std::string const,float>>::operator++(&__for_begin);
    }
    if ( *(_BYTE *)(((unsigned __int64)&group_info_config_ptr->business_info >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)group_info_config_ptr - 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&group_info_config_ptr->business_info >> 3)
                                                                           + 0x7FFF8000) )
    {
      __asan_report_load4();
    }
    if ( group_info_config_ptr->business_info.type == 5 )
    {
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)(v3 + 176));
      p_hunting_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 176))->design_config.txt_config_mgr.hunting_config_mgr;
      if ( *(_BYTE *)(((unsigned __int64)&param->pos_opt._M_payload._M_engaged >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&param->pos_opt._M_payload._M_engaged >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4();
      }
      hunting_group_info_config_ptr = data::HuntingExcelConfigMgrBase::findHuntingGroupInfoExcelConfig(
                                        p_hunting_config_mgr,
                                        *(_DWORD *)&param->pos_opt._M_payload._M_engaged);
      std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 176));
      if ( hunting_group_info_config_ptr )
      {
        if ( *(_BYTE *)(((unsigned __int64)&hunting_group_info_config_ptr->point_type >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&hunting_group_info_config_ptr->point_type >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4();
        }
        if ( hunting_group_info_config_ptr->point_type == HUNTING_CLUE_ITERACT )
        {
          if ( *(_BYTE *)(((unsigned __int64)(&param[2].gadget.general_reward.open_state_set._M_t._M_impl._M_header._M_color
                                            + 1) >> 3)
                        + 0x7FFF8000) != 0
            && (char)((((_BYTE)param - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)(&param[2].gadget.general_reward.open_state_set._M_t._M_impl._M_header._M_color
                                                                                      + 1) >> 3)
                                                                  + 0x7FFF8000) )
          {
            __asan_report_load4();
          }
          *(_DWORD *)(v3 + 336) = *((_DWORD *)&param[2].gadget.general_reward.open_state_set._M_t._M_impl._M_header._M_color
                                  + 1);
        }
      }
    }
    if ( std::operator!=<unsigned int,proto::ProtEntityType>(
           (const std::function<unsigned int(proto::ProtEntityType)> *)&param[2].gadget.blossom_chest.qualify_uid_set._M_t._M_impl._M_node_count,
           0LL) )
    {
      *(_DWORD *)(v3 + 216) = std::function<unsigned int ()(proto::ProtEntityType)>::operator()(
                                (const std::function<unsigned int(proto::ProtEntityType)> *const)&param[2].gadget.blossom_chest.qualify_uid_set._M_t._M_impl._M_node_count,
                                PROT_ENTITY_GADGET);
      if ( !*(_DWORD *)(v3 + 216) )
      {
        common::milog::MiLogStream::create(
          &v99,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/group/group.cpp",
          "createGadget",
          1483);
        v33 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(&v99, (const char (*)[14])"0 entity_id @");
        v34 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v33,
                (const unsigned int *)&param->pos_opt._M_payload._M_engaged);
        v35 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v34, (const char (*)[13])" config_id: ");
        v36 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v35,
                (const unsigned int *)(v3 + 32));
        v37 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v36, (const char (*)[6])" uid:");
        val = Group::getOwnerUid((const Group *const)param);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v37, &val);
        common::milog::MiLogStream::~MiLogStream(&v99);
        std::shared_ptr<Gadget>::shared_ptr((std::shared_ptr<Gadget> *const)this, 0LL);
LABEL_196:
        GadgetParam::~GadgetParam((GadgetParam *const)(v3 + 208));
        goto LABEL_197;
      }
    }
    else
    {
      common::milog::MiLogStream::create(
        &v99,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/group/group.cpp",
        "createGadget",
        1490);
      v38 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
              &v99,
              (const char (*)[29])"invalid id func  @group_id: ");
      v39 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v38,
              (const unsigned int *)&param->pos_opt._M_payload._M_engaged);
      v40 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v39, (const char (*)[13])" config_id: ");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v40, (const unsigned int *)(v3 + 32));
      common::milog::MiLogStream::~MiLogStream(&v99);
    }
    if ( *(_BYTE *)(((unsigned __int64)&gadget_script_config_ptr->point_type >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)gadget_script_config_ptr + 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&gadget_script_config_ptr->point_type >> 3)
                                                                              + 0x7FFF8000) )
    {
      __asan_report_load4();
    }
    if ( gadget_script_config_ptr->point_type )
      *(_DWORD *)(v3 + 424) = gadget_script_config_ptr->point_type;
    if ( *(_BYTE *)(((unsigned __int64)(&param[2].gadget.general_reward.remain_uid_set._M_t._M_impl.std::allocator<std::_Rb_tree_node<unsigned int> >
                                      + 4) >> 3)
                  + 0x7FFF8000) != 0
      && (char)((((_BYTE)param + 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)(&param[2].gadget.general_reward.remain_uid_set._M_t._M_impl.std::allocator<std::_Rb_tree_node<unsigned int> >
                                                                               + 4) >> 3)
                                                           + 0x7FFF8000) )
    {
      __asan_report_load4();
    }
    scene_revise_level = *((_DWORD *)&param[2].gadget.general_reward.remain_uid_set._M_t._M_impl.std::allocator<std::_Rb_tree_node<unsigned int> >
                         + 1);
    if ( *(_BYTE *)(((unsigned __int64)&gadget_script_config_ptr->level >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)gadget_script_config_ptr + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&gadget_script_config_ptr->level >> 3)
                                                                              + 0x7FFF8000) )
    {
      __asan_report_load4();
    }
    base_level = group_final_revise_level + gadget_script_config_ptr->level + scene_revise_level;
    *(_DWORD *)(v3 + 244) = Group::getAdjustedLevel((const Group *const)param, base_level);
    if ( *(_BYTE *)(((unsigned __int64)&gadget_script_config_ptr->level >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)gadget_script_config_ptr + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&gadget_script_config_ptr->level >> 3)
                                                                              + 0x7FFF8000) )
    {
      __asan_report_load4();
    }
    *(_DWORD *)(v3 + 248) = gadget_script_config_ptr->level;
    *(_DWORD *)(v3 + 252) = group_final_revise_level + scene_revise_level;
    if ( *(_BYTE *)(((unsigned __int64)&gadget_script_config_ptr->sight_group_index >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)gadget_script_config_ptr - 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&gadget_script_config_ptr->sight_group_index >> 3)
                                                                             + 0x7FFF8000) )
    {
      __asan_report_load4();
    }
    if ( gadget_script_config_ptr->sight_group_index )
    {
      Group::getSightGroup((Group *const)&__r, (int32_t)param);
      std::shared_ptr<EntitySightGroup>::operator=((std::shared_ptr<EntitySightGroup> *const)(v3 + 344), &__r);
      std::shared_ptr<EntitySightGroup>::~shared_ptr(&__r);
    }
    if ( *(_BYTE *)(((unsigned __int64)&group_info_config_ptr->vision_type >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&group_info_config_ptr->vision_type >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    *(_DWORD *)(v3 + 360) = group_info_config_ptr->vision_type;
    Group::modifyGadgetParamByArgs((Group *const)param, (GadgetParam *)(v3 + 208), gadget_script_config_ptr);
    *(std::unordered_map<unsigned int,std::set<std::string>>::const_iterator *)(v3 + 80) = std::unordered_map<unsigned int,std::set<std::string>>::find(
                                                                                             &group_config_ptr->entity_apply_logic_state_set_map,
                                                                                             (const std::unordered_map<unsigned int,std::set<std::string>>::key_type *)(v3 + 32));
    __for_end._M_node = (std::_Rb_tree_const_iterator<std::pair<const std::string,float> >::_Base_ptr)std::unordered_map<unsigned int,std::set<std::string>>::end(&group_config_ptr->entity_apply_logic_state_set_map)._M_cur;
    if ( std::__detail::operator!=<std::pair<unsigned int const,std::set<std::string>>,false>(
           (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<std::string> >,false> *)(v3 + 80),
           (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<std::string> >,false> *)&__for_end) )
    {
      apply_logic_state_set = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<std::string>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<std::string> >,false,false> *const)(v3 + 80))->second;
      __for_range_0 = (std::map<std::string,float> *)&param->gadget.general_reward.open_state_set._M_t._M_impl._M_header._M_right;
      __for_begin._M_node = std::map<std::string,float>::begin((std::map<std::string,float> *const)&param->gadget.general_reward.open_state_set._M_t._M_impl._M_header._M_right)._M_node;
      __for_end._M_node = std::map<std::string,float>::end(__for_range_0)._M_node;
      while ( std::operator!=(
                (const std::_Rb_tree_iterator<std::pair<const std::string,float> >::_Self *)&__for_begin,
                (const std::_Rb_tree_iterator<std::pair<const std::string,float> >::_Self *)&__for_end) )
      {
        __in = std::_Rb_tree_iterator<std::pair<std::string const,float>>::operator*((const std::_Rb_tree_iterator<std::pair<const std::string,float> > *const)&__for_begin);
        key_0 = std::get<0ul,std::string const,float>(__in);
        value_0 = std::get<1ul,std::string const,float>(__in);
        if ( common::tools::MiscUtils::isContains<std::set<std::string> const,std::string>(apply_logic_state_set, key_0) )
        {
          if ( *(_BYTE *)(((unsigned __int64)value_0 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)value_0 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)value_0 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4();
          }
          v72 = *(_DWORD *)value_0;
          v41 = std::map<std::string,float>::operator[]((std::map<std::string,float> *const)(v3 + 960), key_0);
          v42 = v41;
          if ( *(_BYTE *)(((unsigned __int64)v41 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v41 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v41 >> 3) + 0x7FFF8000) )
          {
            __asan_report_store4(v41);
          }
          *v42 = v72;
        }
        std::_Rb_tree_iterator<std::pair<std::string const,float>>::operator++((std::_Rb_tree_iterator<std::pair<const std::string,float> > *const)&__for_begin);
      }
    }
    EntityMgr::createGadget((const GadgetParam *)(v3 + 112));
    if ( std::operator==<Gadget>((const std::shared_ptr<Gadget> *)(v3 + 112), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v99,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/group/group.cpp",
        "createGadget",
        1525);
      v43 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              &v99,
              (const char (*)[24])"createGadget group_id: ");
      v44 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v43,
              (const unsigned int *)&param->pos_opt._M_payload._M_engaged);
      v45 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v44, (const char (*)[13])" config_id: ");
      v46 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v45, (const unsigned int *)(v3 + 32));
      common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v46, (const char (*)[8])" failed");
      common::milog::MiLogStream::~MiLogStream(&v99);
      std::shared_ptr<Gadget>::shared_ptr((std::shared_ptr<Gadget> *const)this, 0LL);
    }
    else
    {
      Group::getScene((const Group *const)(v3 + 144));
      if ( !std::operator!=<Scene>((const std::shared_ptr<Scene> *)(v3 + 144), 0LL) )
        goto LABEL_185;
      v47 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
      if ( *(_BYTE *)(((unsigned __int64)v47 >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v48 = *(_QWORD *)v47->baseclass_0 + 56LL;
      if ( *(_BYTE *)((v48 >> 3) + 0x7FFF8000) )
        v48 = __asan_report_load8();
      v73 = *(unsigned int (__fastcall **)(std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, VisionContext *))v48;
      v49 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 144));
      if ( v73(v47, v49, &VisionContext::meet_context) )
      {
        common::milog::MiLogStream::create(
          &v99,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/group/group.cpp",
          "createGadget",
          1533);
        v50 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
        v51 = common::milog::MiLogStream::operator<<<Gadget,(Gadget*)0>(&v99, v50);
        v52 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v51, (const char (*)[8])" enter ");
        v53 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 144));
        v54 = common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v52, v53);
        v55 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v54, (const char (*)[9])" failed.");
        operator<<(v55, (const Group *)param);
        common::milog::MiLogStream::~MiLogStream(&v99);
        v56 = (Entity *)std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
        Group::revertAddEntity((Group *const)param, v56);
        std::shared_ptr<Gadget>::shared_ptr((std::shared_ptr<Gadget> *const)this, 0LL);
      }
      else
      {
LABEL_185:
        EventUtil::createEvent((std::shared_ptr<Event> *)(v3 + 176), 6);
        if ( std::operator!=<Event>((const std::shared_ptr<Event> *)(v3 + 176), 0LL) )
        {
          v57 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
          EntityId = Entity::getEntityId((const Entity *const)v57);
          v59 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 176));
          p_source_entity_id = &v59->source_entity_id;
          if ( *(_BYTE *)(((unsigned __int64)p_source_entity_id >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)p_source_entity_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_source_entity_id >> 3)
                                                                                 + 0x7FFF8000) )
          {
            __asan_report_store4(p_source_entity_id);
          }
          v59->source_entity_id = EntityId;
          v61 = *(_DWORD *)(v3 + 32);
          v62 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 176));
          p_param1 = &v62->param1;
          if ( *(_BYTE *)(((unsigned __int64)p_param1 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)p_param1 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_param1 >> 3) + 0x7FFF8000) )
          {
            __asan_report_store4(p_param1);
          }
          v62->param1 = v61;
          v64 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
          GadgetId = Gadget::getGadgetId(v64);
          v66 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 176));
          if ( *(_BYTE *)(((unsigned __int64)&v66->param2 >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&v66->param2 >> 3) + 0x7FFF8000) <= 3 )
          {
            v66 = (std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *)__asan_report_store4(&v66->param2);
          }
          v66->param2 = GadgetId;
          Group::handleEvent((Group *const)param, (EventPtr *)(v3 + 176));
        }
        Group::removeDeletedEntityRecord((Group *const)param, PROT_ENTITY_GADGET, *(_DWORD *)(v3 + 32));
        Group::setGroupRefreshTimeMapInfo((Group *const)param, *(_DWORD *)(v3 + 424));
        common::milog::MiLogStream::create(
          &v99,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/group/group.cpp",
          "createGadget",
          1553);
        v67 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
                &v99,
                (const char (*)[30])"[GROUP] create gdget succeed:");
        v68 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
        v69 = common::milog::MiLogStream::operator<<<Gadget,(Gadget*)0>(v67, v68);
        v70 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v69, (const char (*)[12])", group_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
          v70,
          (const unsigned int *)&param->pos_opt._M_payload._M_engaged);
        common::milog::MiLogStream::~MiLogStream(&v99);
        std::shared_ptr<Gadget>::shared_ptr((std::shared_ptr<Gadget> *const)this, (std::shared_ptr<Gadget> *)(v3 + 112));
        std::shared_ptr<Event>::~shared_ptr((std::shared_ptr<Event> *const)(v3 + 176));
      }
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 144));
    }
    std::shared_ptr<Gadget>::~shared_ptr((std::shared_ptr<Gadget> *const)(v3 + 112));
    goto LABEL_196;
  }
  if ( *(_DWORD *)(v3 + 32) )
  {
    common::milog::MiLogStream::create(
      &v99,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "createGadget",
      1372);
    v9 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
           &v99,
           (const char (*)[34])"findGadgetConfig fails, group_id:");
    v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
            v9,
            (const unsigned int *)&param->pos_opt._M_payload._M_engaged);
    v11 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v10, (const char (*)[13])", config_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v3 + 32));
    common::milog::MiLogStream::~MiLogStream(&v99);
  }
  std::shared_ptr<Gadget>::shared_ptr((std::shared_ptr<Gadget> *const)this, 0LL);
LABEL_197:
  if ( v100 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8080) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8088) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    __asan_stack_free_5(v3, 1152LL, v100);
  }
  result._M_ptr = (std::__shared_ptr<Gadget,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 1560: range 0000000015FBBC8C-0000000015FBCDB5
GadgetPtr __cdecl Group::createGatherGadget(Group *const this, GadgetParam *param)
{
  GadgetParam *v2; // rdx
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  SceneExcelConfigMgr *p_scene_config_mgr; // rcx
  common::milog::MiLogStream *v7; // rax
  GadgetPtr result; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  unsigned int v13; // edx
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rbx
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  uint32_t AdjustedLevel; // ecx
  uint32_t v23; // ecx
  uint32_t vision_type; // ecx
  std::map<std::string,float>::mapped_type *v25; // rax
  _DWORD *v26; // rdx
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rax
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v31; // r14
  unsigned __int64 v32; // rax
  unsigned int (__fastcall *v33)(std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, VisionContext *); // r15
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v34; // rax
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v35; // rax
  common::milog::MiLogStream *v36; // rax
  common::milog::MiLogStream *v37; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v38; // rax
  common::milog::MiLogStream *v39; // rax
  common::milog::MiLogStream *v40; // rdx
  Entity *v41; // rdx
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v42; // rax
  uint32_t EntityId; // r14d
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v44; // rdx
  uint32_t *p_source_entity_id; // rax
  int32_t v46; // r14d
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v47; // rdx
  int32_t *p_param1; // rax
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v49; // rax
  uint32_t GadgetId; // r14d
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v51; // rax
  int v52; // [rsp+14h] [rbp-1ACh]
  GadgetParam *parama; // [rsp+18h] [rbp-1A8h]
  unsigned int val; // [rsp+30h] [rbp-190h] BYREF
  uint32_t scene_revise_level; // [rsp+34h] [rbp-18Ch]
  uint32_t group_final_revise_level; // [rsp+38h] [rbp-188h]
  uint32_t base_level; // [rsp+3Ch] [rbp-184h]
  std::map<std::string,float>::iterator __for_begin; // [rsp+40h] [rbp-180h] BYREF
  std::map<std::string,float>::iterator __for_end; // [rsp+48h] [rbp-178h] BYREF
  const data::SceneExcelConfig *scene_config_ptr; // [rsp+50h] [rbp-170h]
  const GroupScriptConfig *group_config_ptr; // [rsp+58h] [rbp-168h]
  const GroupInfoScriptConfig *group_info_config_ptr; // [rsp+60h] [rbp-160h]
  const std::set<std::string> *apply_logic_state_set; // [rsp+68h] [rbp-158h]
  std::map<std::string,float> *__for_range; // [rsp+70h] [rbp-150h]
  std::pair<const std::string,float> *__in; // [rsp+78h] [rbp-148h]
  std::tuple_element<0,std::pair<const std::string,float> >::type *key; // [rsp+80h] [rbp-140h]
  std::tuple_element<1,std::pair<const std::string,float> >::type *value; // [rsp+88h] [rbp-138h]
  common::milog::MiLogStream v68; // [rsp+90h] [rbp-130h] BYREF
  char v69[272]; // [rsp+B0h] [rbp-110h] BYREF

  parama = v2;
  v3 = (unsigned __int64)v69;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 48 4 14 config_id:1561 64 8 9 iter:1580 96 8 21 logic_state_iter:1608 128 16 15 gadget_ptr:162"
                        "1 160 16 14 scene_ptr:1627 192 16 12 evt_ptr:1639";
  *(_QWORD *)(v3 + 16) = Group::createGatherGadget;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218959360;
  v5[536862723] = -218959360;
  v5[536862724] = -219021312;
  v5[536862725] = -219021312;
  v5[536862726] = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)&parama->config_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)parama + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&parama->config_id >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4();
  }
  *(_DWORD *)(v3 + 48) = parama->config_id;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v3 + 192));
  p_scene_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192))->design_config.txt_config_mgr.scene_config_mgr;
  if ( *(_BYTE *)(((unsigned __int64)&param->owner_ptr >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&param->owner_ptr >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4();
  }
  scene_config_ptr = data::SceneExcelConfigMgrBase::findSceneExcelConfig(
                       p_scene_config_mgr,
                       (uint32_t)param->owner_ptr._M_ptr);
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 192));
  if ( !scene_config_ptr )
  {
    common::milog::MiLogStream::create(
      &v68,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "createGatherGadget",
      1565);
    v7 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
           &v68,
           (const char (*)[38])"findSceneExcelConfig failed,scene id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)&param->owner_ptr);
    common::milog::MiLogStream::~MiLogStream(&v68);
    std::shared_ptr<Gadget>::shared_ptr((std::shared_ptr<Gadget> *const)this, 0LL);
    goto LABEL_66;
  }
  group_config_ptr = Group::getScriptConfig((const Group *const)param);
  if ( !group_config_ptr )
  {
    common::milog::MiLogStream::create(
      &v68,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "createGatherGadget",
      1571);
    common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(&v68, (const char (*)[22])"getScriptConfig fails");
    common::milog::MiLogStream::~MiLogStream(&v68);
    std::shared_ptr<Gadget>::shared_ptr((std::shared_ptr<Gadget> *const)this, 0LL);
    goto LABEL_66;
  }
  group_info_config_ptr = Group::getInfoScriptConfig((const Group *const)param);
  if ( !group_info_config_ptr )
  {
    common::milog::MiLogStream::create(
      &v68,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "createGatherGadget",
      1577);
    common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
      &v68,
      (const char (*)[31])"getGroupInfoScriptConfig fails");
    common::milog::MiLogStream::~MiLogStream(&v68);
    std::shared_ptr<Gadget>::shared_ptr((std::shared_ptr<Gadget> *const)this, 0LL);
    goto LABEL_66;
  }
  *(std::unordered_map<unsigned int,unsigned int>::iterator *)(v3 + 64) = std::unordered_map<unsigned int,unsigned int>::find(
                                                                            (std::unordered_map<unsigned int,unsigned int> *const)&param->foundation.play_base_ptr,
                                                                            (const std::unordered_map<unsigned int,unsigned int>::key_type *)(v3 + 48));
  __for_end._M_node = (std::_Rb_tree_iterator<std::pair<const std::string,float> >::_Base_ptr)std::unordered_map<unsigned int,unsigned int>::end((std::unordered_map<unsigned int,unsigned int> *const)&param->foundation.play_base_ptr)._M_cur;
  if ( std::__detail::operator!=<std::pair<unsigned int const,unsigned int>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false> *)(v3 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false> *)&__for_end) )
  {
    common::milog::MiLogStream::create(
      &v68,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "createGatherGadget",
      1583);
    v9 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(&v68, (const char (*)[11])"group_id: ");
    v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)&param->rot);
    v11 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
            v10,
            (const char (*)[20])" gadget config_id: ");
    v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v12, (const char (*)[18])off_25AB68A0);
    common::milog::MiLogStream::~MiLogStream(&v68);
    std::shared_ptr<Gadget>::shared_ptr((std::shared_ptr<Gadget> *const)this, 0LL);
    goto LABEL_66;
  }
  std::enable_shared_from_this<Group>::shared_from_this((std::enable_shared_from_this<Group> *const)(v3 + 192));
  std::shared_ptr<Group>::operator=(&parama->group_ptr, (std::shared_ptr<Group> *)(v3 + 192));
  std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v3 + 192));
  if ( std::operator!=<unsigned int,proto::ProtEntityType>(
         (const std::function<unsigned int(proto::ProtEntityType)> *)&param[1].blossom_chest.qualify_uid_set._M_t._M_impl._M_header._M_left,
         0LL) )
  {
    v13 = std::function<unsigned int ()(proto::ProtEntityType)>::operator()(
            (const std::function<unsigned int(proto::ProtEntityType)> *const)&param[1].blossom_chest.qualify_uid_set._M_t._M_impl._M_header._M_left,
            PROT_ENTITY_GADGET);
    if ( *(_BYTE *)(((unsigned __int64)&parama->entity_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&parama->entity_id >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_store4(&parama->entity_id);
    }
    parama->entity_id = v13;
    if ( !parama->entity_id )
    {
      common::milog::MiLogStream::create(
        &v68,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/group/group.cpp",
        "createGatherGadget",
        1593);
      v14 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(&v68, (const char (*)[14])"0 entity_id @");
      v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v14,
              (const unsigned int *)&param->rot);
      v16 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v15, (const char (*)[13])" config_id: ");
      v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, (const unsigned int *)(v3 + 48));
      v18 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v17, (const char (*)[6])" uid:");
      val = Group::getOwnerUid((const Group *const)param);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, &val);
      common::milog::MiLogStream::~MiLogStream(&v68);
      std::shared_ptr<Gadget>::shared_ptr((std::shared_ptr<Gadget> *const)this, 0LL);
      goto LABEL_66;
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v68,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/group/group.cpp",
      "createGatherGadget",
      1600);
    v19 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
            &v68,
            (const char (*)[29])"invalid id func  @group_id: ");
    v20 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, (const unsigned int *)&param->rot);
    v21 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v20, (const char (*)[13])" config_id: ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v21, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream(&v68);
  }
  if ( *(_BYTE *)((((unsigned __int64)&param[1].general_reward.qualify_info_map._M_t._M_impl._M_header._M_right + 4) >> 3)
                + 0x7FFF8000) != 0
    && (char)((((_BYTE)param + 60) & 7) + 3) >= *(_BYTE *)((((unsigned __int64)&param[1].general_reward.qualify_info_map._M_t._M_impl._M_header._M_right
                                                           + 4) >> 3)
                                                         + 0x7FFF8000) )
  {
    __asan_report_load4();
  }
  scene_revise_level = HIDWORD(param[1].general_reward.qualify_info_map._M_t._M_impl._M_header._M_right);
  group_final_revise_level = Group::getFinalReviseLevel((const Group *const)param);
  if ( *(_BYTE *)(((unsigned __int64)&parama->config_level >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&parama->config_level >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4();
  }
  base_level = group_final_revise_level + parama->config_level + scene_revise_level;
  AdjustedLevel = Group::getAdjustedLevel((const Group *const)param, base_level);
  if ( *(_BYTE *)(((unsigned __int64)&parama->level >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)parama + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&parama->level >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&parama->level);
  }
  parama->level = AdjustedLevel;
  v23 = group_final_revise_level + scene_revise_level;
  if ( *(_BYTE *)(((unsigned __int64)&parama->revise_level >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)parama + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&parama->revise_level >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&parama->revise_level);
  }
  parama->revise_level = v23;
  if ( *(_BYTE *)(((unsigned __int64)&group_info_config_ptr->vision_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&group_info_config_ptr->vision_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4();
  }
  vision_type = group_info_config_ptr->vision_type;
  if ( *(_BYTE *)(((unsigned __int64)&parama->group_vision_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&parama->group_vision_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&parama->group_vision_type);
  }
  parama->group_vision_type = vision_type;
  *(std::unordered_map<unsigned int,std::set<std::string>>::const_iterator *)(v3 + 96) = std::unordered_map<unsigned int,std::set<std::string>>::find(
                                                                                           &group_config_ptr->entity_apply_logic_state_set_map,
                                                                                           (const std::unordered_map<unsigned int,std::set<std::string>>::key_type *)(v3 + 48));
  __for_end._M_node = (std::_Rb_tree_iterator<std::pair<const std::string,float> >::_Base_ptr)std::unordered_map<unsigned int,std::set<std::string>>::end(&group_config_ptr->entity_apply_logic_state_set_map)._M_cur;
  if ( std::__detail::operator!=<std::pair<unsigned int const,std::set<std::string>>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<std::string> >,false> *)(v3 + 96),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<std::string> >,false> *)&__for_end) )
  {
    apply_logic_state_set = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<std::string>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<std::string> >,false,false> *const)(v3 + 96))->second;
    __for_range = (std::map<std::string,float> *)&param->blossom_chest.qualify_uid_set._M_t._M_impl._M_header._M_right;
    __for_begin._M_node = std::map<std::string,float>::begin((std::map<std::string,float> *const)&param->blossom_chest.qualify_uid_set._M_t._M_impl._M_header._M_right)._M_node;
    __for_end._M_node = std::map<std::string,float>::end(__for_range)._M_node;
    while ( std::operator!=(&__for_begin, &__for_end) )
    {
      __in = std::_Rb_tree_iterator<std::pair<std::string const,float>>::operator*(&__for_begin);
      key = std::get<0ul,std::string const,float>(__in);
      value = std::get<1ul,std::string const,float>(__in);
      if ( common::tools::MiscUtils::isContains<std::set<std::string> const,std::string>(apply_logic_state_set, key) )
      {
        if ( *(_BYTE *)(((unsigned __int64)value >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)value & 7) + 3) >= *(_BYTE *)(((unsigned __int64)value >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4();
        }
        v52 = *(_DWORD *)value;
        v25 = std::map<std::string,float>::operator[](&parama->global_value_map, key);
        v26 = v25;
        if ( *(_BYTE *)(((unsigned __int64)v25 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v25 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v25 >> 3) + 0x7FFF8000) )
        {
          __asan_report_store4(v25);
        }
        *v26 = v52;
      }
      std::_Rb_tree_iterator<std::pair<std::string const,float>>::operator++(&__for_begin);
    }
  }
  EntityMgr::createGadget((const GadgetParam *)(v3 + 128));
  if ( std::operator==<Gadget>((const std::shared_ptr<Gadget> *)(v3 + 128), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v68,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "createGatherGadget",
      1624);
    v27 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
            &v68,
            (const char (*)[24])"createGadget group_id: ");
    v28 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v27, (const unsigned int *)&param->rot);
    v29 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v28, (const char (*)[13])" config_id: ");
    v30 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v29, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v30, (const char (*)[8])" failed");
    common::milog::MiLogStream::~MiLogStream(&v68);
    std::shared_ptr<Gadget>::shared_ptr((std::shared_ptr<Gadget> *const)this, 0LL);
  }
  else
  {
    Group::getScene((const Group *const)(v3 + 160));
    if ( !std::operator!=<Scene>((const std::shared_ptr<Scene> *)(v3 + 160), 0LL) )
      goto LABEL_53;
    v31 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
    if ( *(_BYTE *)(((unsigned __int64)v31 >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v32 = *(_QWORD *)v31->baseclass_0 + 56LL;
    if ( *(_BYTE *)((v32 >> 3) + 0x7FFF8000) )
      v32 = __asan_report_load8();
    v33 = *(unsigned int (__fastcall **)(std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, VisionContext *))v32;
    v34 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
    if ( v33(v31, v34, &VisionContext::meet_context) )
    {
      common::milog::MiLogStream::create(
        &v68,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/group/group.cpp",
        "createGatherGadget",
        1632);
      v35 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
      v36 = common::milog::MiLogStream::operator<<<Gadget,(Gadget*)0>(&v68, v35);
      v37 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v36, (const char (*)[8])" enter ");
      v38 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
      v39 = common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v37, v38);
      v40 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v39, (const char (*)[9])" failed.");
      operator<<(v40, (const Group *)param);
      common::milog::MiLogStream::~MiLogStream(&v68);
      v41 = (Entity *)std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
      Group::revertAddEntity((Group *const)param, v41);
      std::shared_ptr<Gadget>::shared_ptr((std::shared_ptr<Gadget> *const)this, 0LL);
    }
    else
    {
LABEL_53:
      EventUtil::createEvent((std::shared_ptr<Event> *)(v3 + 192), 6);
      if ( std::operator!=<Event>((const std::shared_ptr<Event> *)(v3 + 192), 0LL) )
      {
        v42 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
        EntityId = Entity::getEntityId((const Entity *const)v42);
        v44 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
        p_source_entity_id = &v44->source_entity_id;
        if ( *(_BYTE *)(((unsigned __int64)p_source_entity_id >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)p_source_entity_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_source_entity_id >> 3)
                                                                               + 0x7FFF8000) )
        {
          __asan_report_store4(p_source_entity_id);
        }
        v44->source_entity_id = EntityId;
        v46 = *(_DWORD *)(v3 + 48);
        v47 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
        p_param1 = &v47->param1;
        if ( *(_BYTE *)(((unsigned __int64)p_param1 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)p_param1 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_param1 >> 3) + 0x7FFF8000) )
        {
          __asan_report_store4(p_param1);
        }
        v47->param1 = v46;
        v49 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
        GadgetId = Gadget::getGadgetId(v49);
        v51 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
        if ( *(_BYTE *)(((unsigned __int64)&v51->param2 >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&v51->param2 >> 3) + 0x7FFF8000) <= 3 )
        {
          v51 = (std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *)__asan_report_store4(&v51->param2);
        }
        v51->param2 = GadgetId;
        Group::handleEvent((Group *const)param, (EventPtr *)(v3 + 192));
      }
      if ( *(_BYTE *)(((unsigned __int64)&parama->gather >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&parama->gather >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4();
      }
      Group::setGroupRefreshTimeMapInfo((Group *const)param, parama->gather.gather_id);
      Group::removeDeletedEntityRecord((Group *const)param, PROT_ENTITY_GADGET, *(_DWORD *)(v3 + 48));
      std::shared_ptr<Gadget>::shared_ptr((std::shared_ptr<Gadget> *const)this, (std::shared_ptr<Gadget> *)(v3 + 128));
      std::shared_ptr<Event>::~shared_ptr((std::shared_ptr<Event> *const)(v3 + 192));
    }
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 160));
  }
  std::shared_ptr<Gadget>::~shared_ptr((std::shared_ptr<Gadget> *const)(v3 + 128));
LABEL_66:
  if ( v69 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    result._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  result._M_ptr = (std::__shared_ptr<Gadget,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 1657: range 0000000015FBCDB6-0000000015FBDE89
GadgetPtr __cdecl Group::createGadget(Group *const this, GadgetParam *param)
{
  GadgetParam *v2; // rdx
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  SceneExcelConfigMgr *p_scene_config_mgr; // rcx
  common::milog::MiLogStream *v7; // rax
  GadgetPtr result; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  unsigned int v13; // edx
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rbx
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  uint32_t AdjustedLevel; // ecx
  uint32_t v23; // ecx
  uint32_t vision_type; // ecx
  std::map<std::string,float>::mapped_type *v25; // rax
  _DWORD *v26; // rdx
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rax
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v31; // r14
  unsigned __int64 v32; // rax
  unsigned int (__fastcall *v33)(std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, VisionContext *); // r15
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v34; // rax
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v35; // rax
  common::milog::MiLogStream *v36; // rax
  common::milog::MiLogStream *v37; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v38; // rax
  common::milog::MiLogStream *v39; // rax
  common::milog::MiLogStream *v40; // rdx
  Entity *v41; // rdx
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v42; // rax
  uint32_t EntityId; // r14d
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v44; // rdx
  uint32_t *p_source_entity_id; // rax
  int32_t v46; // r14d
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v47; // rdx
  int32_t *p_param1; // rax
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v49; // rax
  uint32_t GadgetId; // r14d
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v51; // rax
  int v52; // [rsp+14h] [rbp-1ACh]
  GadgetParam *parama; // [rsp+18h] [rbp-1A8h]
  unsigned int val; // [rsp+30h] [rbp-190h] BYREF
  uint32_t scene_revise_level; // [rsp+34h] [rbp-18Ch]
  uint32_t group_final_revise_level; // [rsp+38h] [rbp-188h]
  uint32_t base_level; // [rsp+3Ch] [rbp-184h]
  std::map<std::string,float>::iterator __for_begin; // [rsp+40h] [rbp-180h] BYREF
  std::map<std::string,float>::iterator __for_end; // [rsp+48h] [rbp-178h] BYREF
  const data::SceneExcelConfig *scene_config_ptr; // [rsp+50h] [rbp-170h]
  const GroupScriptConfig *group_config_ptr; // [rsp+58h] [rbp-168h]
  const GroupInfoScriptConfig *group_info_config_ptr; // [rsp+60h] [rbp-160h]
  const std::set<std::string> *apply_logic_state_set; // [rsp+68h] [rbp-158h]
  std::map<std::string,float> *__for_range; // [rsp+70h] [rbp-150h]
  std::pair<const std::string,float> *__in; // [rsp+78h] [rbp-148h]
  std::tuple_element<0,std::pair<const std::string,float> >::type *key; // [rsp+80h] [rbp-140h]
  std::tuple_element<1,std::pair<const std::string,float> >::type *value; // [rsp+88h] [rbp-138h]
  common::milog::MiLogStream v68; // [rsp+90h] [rbp-130h] BYREF
  char v69[272]; // [rsp+B0h] [rbp-110h] BYREF

  parama = v2;
  v3 = (unsigned __int64)v69;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 48 4 14 config_id:1658 64 8 9 iter:1677 96 8 21 logic_state_iter:1705 128 16 15 gadget_ptr:171"
                        "8 160 16 14 scene_ptr:1724 192 16 12 evt_ptr:1736";
  *(_QWORD *)(v3 + 16) = Group::createGadget;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218959360;
  v5[536862723] = -218959360;
  v5[536862724] = -219021312;
  v5[536862725] = -219021312;
  v5[536862726] = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)&parama->config_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)parama + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&parama->config_id >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4();
  }
  *(_DWORD *)(v3 + 48) = parama->config_id;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v3 + 192));
  p_scene_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192))->design_config.txt_config_mgr.scene_config_mgr;
  if ( *(_BYTE *)(((unsigned __int64)&param->owner_ptr >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&param->owner_ptr >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4();
  }
  scene_config_ptr = data::SceneExcelConfigMgrBase::findSceneExcelConfig(
                       p_scene_config_mgr,
                       (uint32_t)param->owner_ptr._M_ptr);
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 192));
  if ( !scene_config_ptr )
  {
    common::milog::MiLogStream::create(
      &v68,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "createGadget",
      1662);
    v7 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
           &v68,
           (const char (*)[38])"findSceneExcelConfig failed,scene id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)&param->owner_ptr);
    common::milog::MiLogStream::~MiLogStream(&v68);
    std::shared_ptr<Gadget>::shared_ptr((std::shared_ptr<Gadget> *const)this, 0LL);
    goto LABEL_64;
  }
  group_config_ptr = Group::getScriptConfig((const Group *const)param);
  if ( !group_config_ptr )
  {
    common::milog::MiLogStream::create(
      &v68,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "createGadget",
      1668);
    common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(&v68, (const char (*)[22])"getScriptConfig fails");
    common::milog::MiLogStream::~MiLogStream(&v68);
    std::shared_ptr<Gadget>::shared_ptr((std::shared_ptr<Gadget> *const)this, 0LL);
    goto LABEL_64;
  }
  group_info_config_ptr = Group::getInfoScriptConfig((const Group *const)param);
  if ( !group_info_config_ptr )
  {
    common::milog::MiLogStream::create(
      &v68,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "createGadget",
      1674);
    common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
      &v68,
      (const char (*)[31])"getGroupInfoScriptConfig fails");
    common::milog::MiLogStream::~MiLogStream(&v68);
    std::shared_ptr<Gadget>::shared_ptr((std::shared_ptr<Gadget> *const)this, 0LL);
    goto LABEL_64;
  }
  *(std::unordered_map<unsigned int,unsigned int>::iterator *)(v3 + 64) = std::unordered_map<unsigned int,unsigned int>::find(
                                                                            (std::unordered_map<unsigned int,unsigned int> *const)&param->foundation.play_base_ptr,
                                                                            (const std::unordered_map<unsigned int,unsigned int>::key_type *)(v3 + 48));
  __for_end._M_node = (std::_Rb_tree_iterator<std::pair<const std::string,float> >::_Base_ptr)std::unordered_map<unsigned int,unsigned int>::end((std::unordered_map<unsigned int,unsigned int> *const)&param->foundation.play_base_ptr)._M_cur;
  if ( std::__detail::operator!=<std::pair<unsigned int const,unsigned int>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false> *)(v3 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false> *)&__for_end) )
  {
    common::milog::MiLogStream::create(
      &v68,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "createGadget",
      1680);
    v9 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(&v68, (const char (*)[11])"group_id: ");
    v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)&param->rot);
    v11 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
            v10,
            (const char (*)[20])" gadget config_id: ");
    v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v12, (const char (*)[18])off_25AB68A0);
    common::milog::MiLogStream::~MiLogStream(&v68);
    std::shared_ptr<Gadget>::shared_ptr((std::shared_ptr<Gadget> *const)this, 0LL);
    goto LABEL_64;
  }
  std::enable_shared_from_this<Group>::shared_from_this((std::enable_shared_from_this<Group> *const)(v3 + 192));
  std::shared_ptr<Group>::operator=(&parama->group_ptr, (std::shared_ptr<Group> *)(v3 + 192));
  std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v3 + 192));
  if ( std::operator!=<unsigned int,proto::ProtEntityType>(
         (const std::function<unsigned int(proto::ProtEntityType)> *)&param[1].blossom_chest.qualify_uid_set._M_t._M_impl._M_header._M_left,
         0LL) )
  {
    v13 = std::function<unsigned int ()(proto::ProtEntityType)>::operator()(
            (const std::function<unsigned int(proto::ProtEntityType)> *const)&param[1].blossom_chest.qualify_uid_set._M_t._M_impl._M_header._M_left,
            PROT_ENTITY_GADGET);
    if ( *(_BYTE *)(((unsigned __int64)&parama->entity_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&parama->entity_id >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_store4(&parama->entity_id);
    }
    parama->entity_id = v13;
    if ( !parama->entity_id )
    {
      common::milog::MiLogStream::create(
        &v68,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/group/group.cpp",
        "createGadget",
        1690);
      v14 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(&v68, (const char (*)[14])"0 entity_id @");
      v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v14,
              (const unsigned int *)&param->rot);
      v16 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v15, (const char (*)[13])" config_id: ");
      v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, (const unsigned int *)(v3 + 48));
      v18 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v17, (const char (*)[6])" uid:");
      val = Group::getOwnerUid((const Group *const)param);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, &val);
      common::milog::MiLogStream::~MiLogStream(&v68);
      std::shared_ptr<Gadget>::shared_ptr((std::shared_ptr<Gadget> *const)this, 0LL);
      goto LABEL_64;
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v68,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/group/group.cpp",
      "createGadget",
      1697);
    v19 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
            &v68,
            (const char (*)[29])"invalid id func  @group_id: ");
    v20 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, (const unsigned int *)&param->rot);
    v21 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v20, (const char (*)[13])" config_id: ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v21, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream(&v68);
  }
  if ( *(_BYTE *)((((unsigned __int64)&param[1].general_reward.qualify_info_map._M_t._M_impl._M_header._M_right + 4) >> 3)
                + 0x7FFF8000) != 0
    && (char)((((_BYTE)param + 60) & 7) + 3) >= *(_BYTE *)((((unsigned __int64)&param[1].general_reward.qualify_info_map._M_t._M_impl._M_header._M_right
                                                           + 4) >> 3)
                                                         + 0x7FFF8000) )
  {
    __asan_report_load4();
  }
  scene_revise_level = HIDWORD(param[1].general_reward.qualify_info_map._M_t._M_impl._M_header._M_right);
  group_final_revise_level = Group::getFinalReviseLevel((const Group *const)param);
  if ( *(_BYTE *)(((unsigned __int64)&parama->config_level >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&parama->config_level >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4();
  }
  base_level = group_final_revise_level + parama->config_level + scene_revise_level;
  AdjustedLevel = Group::getAdjustedLevel((const Group *const)param, base_level);
  if ( *(_BYTE *)(((unsigned __int64)&parama->level >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)parama + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&parama->level >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&parama->level);
  }
  parama->level = AdjustedLevel;
  v23 = group_final_revise_level + scene_revise_level;
  if ( *(_BYTE *)(((unsigned __int64)&parama->revise_level >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)parama + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&parama->revise_level >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&parama->revise_level);
  }
  parama->revise_level = v23;
  if ( *(_BYTE *)(((unsigned __int64)&group_info_config_ptr->vision_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&group_info_config_ptr->vision_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4();
  }
  vision_type = group_info_config_ptr->vision_type;
  if ( *(_BYTE *)(((unsigned __int64)&parama->group_vision_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&parama->group_vision_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&parama->group_vision_type);
  }
  parama->group_vision_type = vision_type;
  *(std::unordered_map<unsigned int,std::set<std::string>>::const_iterator *)(v3 + 96) = std::unordered_map<unsigned int,std::set<std::string>>::find(
                                                                                           &group_config_ptr->entity_apply_logic_state_set_map,
                                                                                           (const std::unordered_map<unsigned int,std::set<std::string>>::key_type *)(v3 + 48));
  __for_end._M_node = (std::_Rb_tree_iterator<std::pair<const std::string,float> >::_Base_ptr)std::unordered_map<unsigned int,std::set<std::string>>::end(&group_config_ptr->entity_apply_logic_state_set_map)._M_cur;
  if ( std::__detail::operator!=<std::pair<unsigned int const,std::set<std::string>>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<std::string> >,false> *)(v3 + 96),
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<std::string> >,false> *)&__for_end) )
  {
    apply_logic_state_set = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<std::string>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<std::string> >,false,false> *const)(v3 + 96))->second;
    __for_range = (std::map<std::string,float> *)&param->blossom_chest.qualify_uid_set._M_t._M_impl._M_header._M_right;
    __for_begin._M_node = std::map<std::string,float>::begin((std::map<std::string,float> *const)&param->blossom_chest.qualify_uid_set._M_t._M_impl._M_header._M_right)._M_node;
    __for_end._M_node = std::map<std::string,float>::end(__for_range)._M_node;
    while ( std::operator!=(&__for_begin, &__for_end) )
    {
      __in = std::_Rb_tree_iterator<std::pair<std::string const,float>>::operator*(&__for_begin);
      key = std::get<0ul,std::string const,float>(__in);
      value = std::get<1ul,std::string const,float>(__in);
      if ( common::tools::MiscUtils::isContains<std::set<std::string> const,std::string>(apply_logic_state_set, key) )
      {
        if ( *(_BYTE *)(((unsigned __int64)value >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)value & 7) + 3) >= *(_BYTE *)(((unsigned __int64)value >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4();
        }
        v52 = *(_DWORD *)value;
        v25 = std::map<std::string,float>::operator[](&parama->global_value_map, key);
        v26 = v25;
        if ( *(_BYTE *)(((unsigned __int64)v25 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v25 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v25 >> 3) + 0x7FFF8000) )
        {
          __asan_report_store4(v25);
        }
        *v26 = v52;
      }
      std::_Rb_tree_iterator<std::pair<std::string const,float>>::operator++(&__for_begin);
    }
  }
  EntityMgr::createGadget((const GadgetParam *)(v3 + 128));
  if ( std::operator==<Gadget>((const std::shared_ptr<Gadget> *)(v3 + 128), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v68,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "createGadget",
      1721);
    v27 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
            &v68,
            (const char (*)[24])"createGadget group_id: ");
    v28 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v27, (const unsigned int *)&param->rot);
    v29 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v28, (const char (*)[13])" config_id: ");
    v30 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v29, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v30, (const char (*)[8])" failed");
    common::milog::MiLogStream::~MiLogStream(&v68);
    std::shared_ptr<Gadget>::shared_ptr((std::shared_ptr<Gadget> *const)this, 0LL);
  }
  else
  {
    Group::getScene((const Group *const)(v3 + 160));
    if ( !std::operator!=<Scene>((const std::shared_ptr<Scene> *)(v3 + 160), 0LL) )
      goto LABEL_53;
    v31 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
    if ( *(_BYTE *)(((unsigned __int64)v31 >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v32 = *(_QWORD *)v31->baseclass_0 + 56LL;
    if ( *(_BYTE *)((v32 >> 3) + 0x7FFF8000) )
      v32 = __asan_report_load8();
    v33 = *(unsigned int (__fastcall **)(std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, VisionContext *))v32;
    v34 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
    if ( v33(v31, v34, &VisionContext::meet_context) )
    {
      common::milog::MiLogStream::create(
        &v68,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/group/group.cpp",
        "createGadget",
        1729);
      v35 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
      v36 = common::milog::MiLogStream::operator<<<Gadget,(Gadget*)0>(&v68, v35);
      v37 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v36, (const char (*)[8])" enter ");
      v38 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
      v39 = common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v37, v38);
      v40 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v39, (const char (*)[9])" failed.");
      operator<<(v40, (const Group *)param);
      common::milog::MiLogStream::~MiLogStream(&v68);
      v41 = (Entity *)std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
      Group::revertAddEntity((Group *const)param, v41);
      std::shared_ptr<Gadget>::shared_ptr((std::shared_ptr<Gadget> *const)this, 0LL);
    }
    else
    {
LABEL_53:
      EventUtil::createEvent((std::shared_ptr<Event> *)(v3 + 192), 6);
      if ( std::operator!=<Event>((const std::shared_ptr<Event> *)(v3 + 192), 0LL) )
      {
        v42 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
        EntityId = Entity::getEntityId((const Entity *const)v42);
        v44 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
        p_source_entity_id = &v44->source_entity_id;
        if ( *(_BYTE *)(((unsigned __int64)p_source_entity_id >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)p_source_entity_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_source_entity_id >> 3)
                                                                               + 0x7FFF8000) )
        {
          __asan_report_store4(p_source_entity_id);
        }
        v44->source_entity_id = EntityId;
        v46 = *(_DWORD *)(v3 + 48);
        v47 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
        p_param1 = &v47->param1;
        if ( *(_BYTE *)(((unsigned __int64)p_param1 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)p_param1 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_param1 >> 3) + 0x7FFF8000) )
        {
          __asan_report_store4(p_param1);
        }
        v47->param1 = v46;
        v49 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
        GadgetId = Gadget::getGadgetId(v49);
        v51 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
        if ( *(_BYTE *)(((unsigned __int64)&v51->param2 >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&v51->param2 >> 3) + 0x7FFF8000) <= 3 )
        {
          v51 = (std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *)__asan_report_store4(&v51->param2);
        }
        v51->param2 = GadgetId;
        Group::handleEvent((Group *const)param, (EventPtr *)(v3 + 192));
      }
      Group::removeDeletedEntityRecord((Group *const)param, PROT_ENTITY_GADGET, *(_DWORD *)(v3 + 48));
      std::shared_ptr<Gadget>::shared_ptr((std::shared_ptr<Gadget> *const)this, (std::shared_ptr<Gadget> *)(v3 + 128));
      std::shared_ptr<Event>::~shared_ptr((std::shared_ptr<Event> *const)(v3 + 192));
    }
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 160));
  }
  std::shared_ptr<Gadget>::~shared_ptr((std::shared_ptr<Gadget> *const)(v3 + 128));
LABEL_64:
  if ( v69 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    result._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  result._M_ptr = (std::__shared_ptr<Gadget,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 1753: range 0000000015FBDE8A-0000000015FBE47D
uint32_t __cdecl Group::getModifiedCreateGadgetId(
        Group *const this,
        const GroupEntityParam *param,
        const GadgetScriptConfig *gadget_script_config)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  common::milog::MiLogStream *v6; // rdx
  uint32_t result; // eax
  BlossomExcelConfigMgr *p_blossom_config_mgr; // rcx
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  common::milog::MiLogStream *v10; // rax
  uint32_t gadget_id; // [rsp+24h] [rbp-ACh]
  const GroupScriptConfig *group_config_ptr; // [rsp+28h] [rbp-A8h]
  const data::GatherExcelConfig *gather_config_ptr; // [rsp+30h] [rbp-A0h]
  const data::BlossomChestExcelConfig *chest_config_ptr; // [rsp+38h] [rbp-98h]
  std::shared_ptr<Config> v16; // [rsp+40h] [rbp-90h] BYREF
  common::milog::MiLogStream v17; // [rsp+50h] [rbp-80h] BYREF
  char v18[96]; // [rsp+70h] [rbp-60h] BYREF

  v3 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 4 14 gather_id:1781";
  *(_QWORD *)(v3 + 16) = Group::getModifiedCreateGadgetId;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((unsigned __int64)&gadget_script_config->gadget_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)gadget_script_config + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&gadget_script_config->gadget_id >> 3)
                                                                       + 0x7FFF8000) )
  {
    __asan_report_load4();
  }
  gadget_id = gadget_script_config->gadget_id;
  group_config_ptr = Group::getScriptConfig(this);
  if ( group_config_ptr )
  {
    if ( *(_BYTE *)(((unsigned __int64)&param->gadget >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&param->gadget >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    if ( param->gadget.blossom_chest.blossom_chest_id )
    {
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)&v16);
      p_blossom_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v16)->design_config.txt_config_mgr.blossom_config_mgr;
      if ( *(_BYTE *)(((unsigned __int64)&param->gadget >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&param->gadget >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4();
      }
      chest_config_ptr = data::BlossomExcelConfigMgrBase::findBlossomChestExcelConfig(
                           p_blossom_config_mgr,
                           param->gadget.blossom_chest.blossom_chest_id);
      std::shared_ptr<Config>::~shared_ptr(&v16);
      if ( chest_config_ptr )
      {
        if ( *(_BYTE *)(((unsigned __int64)&chest_config_ptr->chest_gadget_id >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)chest_config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&chest_config_ptr->chest_gadget_id >> 3)
                                                                          + 0x7FFF8000) )
        {
          __asan_report_load4();
        }
        result = chest_config_ptr->chest_gadget_id;
      }
      else
      {
        common::milog::MiLogStream::create(
          &v17,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/group/group.cpp",
          "getModifiedCreateGadgetId",
          1768);
        common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
          &v17,
          (const char (*)[35])"findBlossomChestExcelConfig failed");
        common::milog::MiLogStream::~MiLogStream(&v17);
        result = gadget_id;
      }
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&gadget_script_config->entity_type >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&gadget_script_config->entity_type >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4();
      }
      if ( gadget_script_config->entity_type != AmberWind )
        goto LABEL_25;
      if ( *(_BYTE *)(((unsigned __int64)&group_config_ptr->area_id >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)group_config_ptr - 124) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&group_config_ptr->area_id >> 3)
                                                                         + 0x7FFF8000) )
      {
        __asan_report_load4();
      }
      if ( group_config_ptr->area_id )
      {
        result = Group::getAmberWindNewGadgetId(this, gadget_id);
      }
      else
      {
LABEL_25:
        if ( *(_BYTE *)(((unsigned __int64)&gadget_script_config->point_type >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)gadget_script_config + 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&gadget_script_config->point_type >> 3)
                                                                              + 0x7FFF8000) )
        {
          __asan_report_load4();
        }
        if ( gadget_script_config->point_type )
        {
          *(_DWORD *)(v3 + 32) = gadget_script_config->point_type;
          ServiceBox::findService<GameserverService>();
          GameserverService::getConfig((GameserverService *const)&v16);
          v9 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v16);
          gather_config_ptr = data::GatherExcelConfigMgrBase::findGatherExcelConfig(
                                &v9->design_config.txt_config_mgr.gather_config_mgr,
                                *(_DWORD *)(v3 + 32));
          std::shared_ptr<Config>::~shared_ptr(&v16);
          if ( gather_config_ptr )
          {
            if ( *(_BYTE *)(((unsigned __int64)&gather_config_ptr->gadget_id >> 3) + 0x7FFF8000) != 0
              && (char)((((_BYTE)gather_config_ptr + 20) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&gather_config_ptr->gadget_id >> 3)
                                                                               + 0x7FFF8000) )
            {
              __asan_report_load4();
            }
            result = gather_config_ptr->gadget_id;
          }
          else
          {
            common::milog::MiLogStream::create(
              &v17,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/group/group.cpp",
              "getModifiedCreateGadgetId",
              1785);
            v10 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                    &v17,
                    (const char (*)[31])"findGatherExcelConfig failed: ");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v3 + 32));
            common::milog::MiLogStream::~MiLogStream(&v17);
            result = gadget_id;
          }
        }
        else
        {
          result = gadget_id;
        }
      }
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v17,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "getModifiedCreateGadgetId",
      1758);
    v6 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
           &v17,
           (const char (*)[22])"getScriptConfig fails");
    operator<<(v6, this);
    common::milog::MiLogStream::~MiLogStream(&v17);
    result = gadget_id;
  }
  if ( v18 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1796: range 0000000015FBE47E-0000000015FBF277
RegionPtr __cdecl Group::createRegion(Group *const this, const GroupEntityParam *param)
{
  const GroupEntityParam *v2; // rdx
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  RegionPtr result; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  unsigned __int64 n; // rax
  double v13; // xmm0_8
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // r14
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v23; // r14
  unsigned __int64 v24; // rax
  unsigned int (__fastcall *v25)(std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, VisionContext *, double); // r15
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v26; // rax
  std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v27; // rax
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v30; // rax
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rdx
  std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v33; // rdx
  common::milog::MiLogStream *v34; // r14
  std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v35; // rax
  common::milog::MiLogStream *v36; // rax
  common::milog::MiLogStream *v37; // rax
  const GroupEntityParam *parama; // [rsp+8h] [rbp-198h]
  unsigned int val; // [rsp+2Ch] [rbp-174h] BYREF
  const GroupScriptConfig *group_config_ptr; // [rsp+30h] [rbp-170h]
  const RegionScriptConfig *region_config_ptr; // [rsp+38h] [rbp-168h]
  std::enable_shared_from_this<Group> v42; // [rsp+40h] [rbp-160h] BYREF
  common::milog::MiLogStream v43; // [rsp+50h] [rbp-150h] BYREF
  char v44[304]; // [rsp+70h] [rbp-130h] BYREF

  parama = v2;
  v3 = (unsigned __int64)v44;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(256LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 4 14 config_id:1797 48 16 15 region_ptr:1842 80 16 14 scene_ptr:1848 112 112 17 region_param:1815";
  *(_QWORD *)(v3 + 16) = Group::createRegion;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61956;
  v5[536862722] = 62194;
  v5[536862723] = 62194;
  v5[536862727] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)parama >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)parama >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4();
  }
  *(_DWORD *)(v3 + 32) = parama->config_id;
  group_config_ptr = Group::getScriptConfig((const Group *const)param);
  if ( !group_config_ptr )
  {
    common::milog::MiLogStream::create(
      &v43,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "createRegion",
      1801);
    common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(&v43, (const char (*)[22])"getScriptConfig fails");
    common::milog::MiLogStream::~MiLogStream(&v43);
    std::shared_ptr<Region>::shared_ptr((std::shared_ptr<Region> *const)this, 0LL);
    goto LABEL_50;
  }
  region_config_ptr = GroupScriptConfig::findRegionConfig(group_config_ptr, *(_DWORD *)(v3 + 32));
  if ( !region_config_ptr )
  {
    common::milog::MiLogStream::create(
      &v43,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "createRegion",
      1807);
    v7 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
           &v43,
           (const char (*)[34])"findRegionConfig fails, group_id:");
    v8 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
           v7,
           (const unsigned int *)&param->pos_opt._M_payload._M_engaged);
    v9 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v8, (const char (*)[13])", config_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v3 + 32));
    common::milog::MiLogStream::~MiLogStream(&v43);
    std::shared_ptr<Region>::shared_ptr((std::shared_ptr<Region> *const)this, 0LL);
    goto LABEL_50;
  }
  if ( common::tools::MiscUtils::isContains<std::unordered_map<unsigned int,unsigned int>,unsigned int>(
         (std::unordered_map<unsigned int,unsigned int> *)&param[1].gadget.blossom_chest.qualify_uid_set._M_t._M_impl._M_header._M_right,
         (const unsigned int *)(v3 + 32)) )
  {
    common::milog::MiLogStream::create(
      &v43,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "createRegion",
      1812);
    v10 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
            &v43,
            (const char (*)[19])"region config_id: ");
    v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v3 + 32));
    common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v11, (const char (*)[10])off_25AB6FC0);
    common::milog::MiLogStream::~MiLogStream(&v43);
    std::shared_ptr<Region>::shared_ptr((std::shared_ptr<Region> *const)this, 0LL);
    goto LABEL_50;
  }
  RegionParam::RegionParam((RegionParam *const)(v3 + 112));
  *(_DWORD *)(v3 + 112) = *(_DWORD *)(v3 + 32);
  if ( std::optional<Vector3>::has_value(&parama->pos_opt) )
  {
    n = (unsigned __int64)std::optional<Vector3>::value(&parama->pos_opt);
    if ( (char)(n & 7) >= *(_BYTE *)((n >> 3) + 0x7FFF8000) && *(_BYTE *)((n >> 3) + 0x7FFF8000) != 0
      || *(_BYTE *)(((n + 11) >> 3) + 0x7FFF8000) != 0
      && (char)((n + 11) & 7) >= *(_BYTE *)(((n + 11) >> 3) + 0x7FFF8000) )
    {
      n = __asan_report_load_n(n, 12LL);
    }
    *(_QWORD *)(v3 + 120) = *(_QWORD *)n;
    *(_DWORD *)(v3 + 128) = *(_DWORD *)(n + 8);
  }
  else
  {
    *(Vector3 *)(v3 + 120) = operator+(
                               &region_config_ptr->pos,
                               (const Vector3 *)&param[1].gadget.blossom_chest.qualify_uid_set._M_t._M_impl._M_header._M_parent);
  }
  if ( *(_BYTE *)(((unsigned __int64)&region_config_ptr->shape >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)region_config_ptr + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&region_config_ptr->shape >> 3)
                                                                    + 0x7FFF8000) )
  {
    __asan_report_load4();
  }
  *(_DWORD *)(v3 + 132) = region_config_ptr->shape;
  if ( *(_BYTE *)(((unsigned __int64)&region_config_ptr->sphere_radius >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&region_config_ptr->sphere_radius >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4();
  }
  *(float *)(v3 + 136) = region_config_ptr->sphere_radius;
  if ( (((unsigned __int8)region_config_ptr + 12) & 7) >= *(_BYTE *)(((unsigned __int64)&region_config_ptr->cubic_size >> 3)
                                                                   + 0x7FFF8000)
    && *(_BYTE *)(((unsigned __int64)&region_config_ptr->cubic_size >> 3) + 0x7FFF8000) != 0
    || *(_BYTE *)((((unsigned __int64)&region_config_ptr->cubic_size.z + 3) >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)region_config_ptr + 23) & 7) >= *(_BYTE *)((((unsigned __int64)&region_config_ptr->cubic_size.z
                                                                     + 3) >> 3)
                                                                   + 0x7FFF8000) )
  {
    __asan_report_load_n(&region_config_ptr->cubic_size, 12LL);
  }
  *(Vector3 *)(v3 + 140) = region_config_ptr->cubic_size;
  if ( *(_BYTE *)(((unsigned __int64)&region_config_ptr->cylinder_radius >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&region_config_ptr->cylinder_radius >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4();
  }
  *(float *)(v3 + 176) = region_config_ptr->cylinder_radius;
  if ( *(_BYTE *)(((unsigned __int64)&region_config_ptr->cylinder_height >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)region_config_ptr - 108) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&region_config_ptr->cylinder_height >> 3)
                                                                      + 0x7FFF8000) )
  {
    __asan_report_load4();
  }
  *(_QWORD *)&v13 = LODWORD(region_config_ptr->cylinder_height);
  *(_DWORD *)(v3 + 180) = LODWORD(v13);
  std::vector<data::Point2D>::operator=(
    (std::vector<data::Point2D> *const)(v3 + 184),
    &region_config_ptr->relative_polygon_point_vec);
  if ( *(char *)(((unsigned __int64)&region_config_ptr->polygon_aabb_size >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)((((unsigned __int64)&region_config_ptr->polygon_aabb_size.z + 3) >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)region_config_ptr - 69) & 7) >= *(_BYTE *)((((unsigned __int64)&region_config_ptr->polygon_aabb_size.z
                                                                     + 3) >> 3)
                                                                   + 0x7FFF8000) )
  {
    __asan_report_load_n(&region_config_ptr->polygon_aabb_size, 12LL);
  }
  *(Vector3 *)(v3 + 208) = region_config_ptr->polygon_aabb_size;
  std::enable_shared_from_this<Group>::shared_from_this(&v42);
  std::shared_ptr<Group>::operator=((std::shared_ptr<Group> *const)(v3 + 152), (std::shared_ptr<Group> *)&v42);
  std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)&v42);
  if ( *(_BYTE *)(((unsigned __int64)&region_config_ptr->room_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)region_config_ptr + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&region_config_ptr->room_id >> 3)
                                                                     + 0x7FFF8000) )
  {
    v13 = __asan_report_load4();
  }
  *(_DWORD *)(v3 + 168) = region_config_ptr->room_id;
  if ( *(_BYTE *)(((unsigned __int64)&param->monster.affix_set._M_t._M_impl.std::_Rb_tree_header >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&param->monster.affix_set._M_t._M_impl.std::_Rb_tree_header >> 3) + 0x7FFF8000) <= 3 )
  {
    v13 = __asan_report_load4();
  }
  *(_DWORD *)(v3 + 172) = param->monster.affix_set._M_t._M_impl._M_header._M_color;
  if ( !std::operator!=<unsigned int,proto::ProtEntityType>(
          (const std::function<unsigned int(proto::ProtEntityType)> *)&param[2].gadget.blossom_chest.qualify_uid_set._M_t._M_impl._M_node_count,
          0LL) )
  {
    common::milog::MiLogStream::create(
      &v43,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/group/group.cpp",
      "createRegion",
      1840);
    v19 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
            &v43,
            (const char (*)[29])"invalid id func  @group_id: ");
    v20 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
            v19,
            (const unsigned int *)&param->pos_opt._M_payload._M_engaged);
    v21 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v20, (const char (*)[13])" config_id: ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v21, (const unsigned int *)(v3 + 32));
    common::milog::MiLogStream::~MiLogStream(&v43);
    goto LABEL_37;
  }
  *(_DWORD *)(v3 + 116) = std::function<unsigned int ()(proto::ProtEntityType)>::operator()(
                            (const std::function<unsigned int(proto::ProtEntityType)> *const)&param[2].gadget.blossom_chest.qualify_uid_set._M_t._M_impl._M_node_count,
                            PROT_ENTITY_REGION);
  if ( *(_DWORD *)(v3 + 116) )
  {
LABEL_37:
    EntityMgr::createRegion((const RegionParam *)(v3 + 48));
    if ( std::operator==<Region>((const std::shared_ptr<Region> *)(v3 + 48), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v43,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/group/group.cpp",
        "createRegion",
        1845);
      v22 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
              &v43,
              (const char (*)[31])"createRegion fails, config_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v22, (const unsigned int *)(v3 + 32));
      common::milog::MiLogStream::~MiLogStream(&v43);
      std::shared_ptr<Region>::shared_ptr((std::shared_ptr<Region> *const)this, 0LL);
    }
    else
    {
      Group::getScene((const Group *const)(v3 + 80));
      if ( !std::operator!=<Scene>((const std::shared_ptr<Scene> *)(v3 + 80), 0LL) )
        goto LABEL_46;
      v23 = std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 48));
      if ( *(_BYTE *)(((unsigned __int64)v23 >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v24 = (unsigned __int64)(v23->_vptr_DescribalBase + 7);
      if ( *(_BYTE *)((v24 >> 3) + 0x7FFF8000) )
        v24 = __asan_report_load8();
      v25 = *(unsigned int (__fastcall **)(std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, VisionContext *, double))v24;
      v26 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80));
      if ( v25(v23, v26, &VisionContext::meet_context, v13) )
      {
        common::milog::MiLogStream::create(
          &v43,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/group/group.cpp",
          "createRegion",
          1853);
        v27 = std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 48));
        v28 = common::milog::MiLogStream::operator<<<Region,(Region*)0>(&v43, v27);
        v29 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v28, (const char (*)[8])" enter ");
        v30 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80));
        v31 = common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v29, v30);
        v32 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v31, (const char (*)[9])" failed.");
        operator<<(v32, (const Group *)param);
        common::milog::MiLogStream::~MiLogStream(&v43);
        v33 = std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 48));
        Group::revertAddEntity((Group *const)param, v33);
        std::shared_ptr<Region>::shared_ptr((std::shared_ptr<Region> *const)this, 0LL);
      }
      else
      {
LABEL_46:
        common::milog::MiLogStream::create(
          &v43,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/group/group.cpp",
          "createRegion",
          1860);
        v34 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                &v43,
                (const char (*)[31])"[GROUP] create region succeed:");
        v35 = std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Region,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 48));
        v36 = common::milog::MiLogStream::operator<<<Region,(Region*)0>(v34, v35);
        v37 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v36, (const char (*)[12])", group_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
          v37,
          (const unsigned int *)&param->pos_opt._M_payload._M_engaged);
        common::milog::MiLogStream::~MiLogStream(&v43);
        std::shared_ptr<Region>::shared_ptr((std::shared_ptr<Region> *const)this, (std::shared_ptr<Region> *)(v3 + 48));
      }
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 80));
    }
    std::shared_ptr<Region>::~shared_ptr((std::shared_ptr<Region> *const)(v3 + 48));
    goto LABEL_49;
  }
  common::milog::MiLogStream::create(
    &v43,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/group/group.cpp",
    "createRegion",
    1833);
  v14 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(&v43, (const char (*)[14])"0 entity_id @");
  v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
          v14,
          (const unsigned int *)&param->pos_opt._M_payload._M_engaged);
  v16 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v15, (const char (*)[13])" config_id: ");
  v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, (const unsigned int *)(v3 + 32));
  v18 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v17, (const char (*)[6])" uid:");
  val = Group::getOwnerUid((const Group *const)param);
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, &val);
  common::milog::MiLogStream::~MiLogStream(&v43);
  std::shared_ptr<Region>::shared_ptr((std::shared_ptr<Region> *const)this, 0LL);
LABEL_49:
  RegionParam::~RegionParam((RegionParam *const)(v3 + 112));
LABEL_50:
  if ( v44 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    result._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<Region,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 1867: range 0000000015FBF278-0000000015FBFB54
Group *__fastcall Group::createDummyRegion(Group *const this, Group *config_id, int a3)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  unsigned __int64 n; // rax
  common::milog::MiLogStream *v10; // rax
  const GroupScriptConfig *group_config_ptr; // [rsp+20h] [rbp-3D0h]
  const RegionScriptConfig *region_config_ptr; // [rsp+28h] [rbp-3C8h]
  common::milog::MiLogStream v15; // [rsp+30h] [rbp-3C0h] BYREF
  char v16[928]; // [rsp+50h] [rbp-3A0h] BYREF

  v3 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(896LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 48 4 14 config_id:1866 64 16 15 region_ptr:1892 96 112 17 region_param:1881 240 520 10 param:1880";
  *(_QWORD *)(v3 + 16) = Group::createDummyRegion;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -219021312;
  v5[536862726] = -219021312;
  v5[536862727] = 62194;
  v5[536862743] = -218103808;
  v5[536862744] = -202116109;
  v5[536862745] = -202116109;
  v5[536862746] = -202116109;
  v5[536862747] = -202116109;
  *(_DWORD *)(v3 + 48) = a3;
  group_config_ptr = Group::getScriptConfig(config_id);
  if ( group_config_ptr )
  {
    region_config_ptr = GroupScriptConfig::findRegionConfig(group_config_ptr, *(_DWORD *)(v3 + 48));
    if ( region_config_ptr )
    {
      Group::genGroupEntityParam((GroupEntityParam *)(v3 + 240), config_id, *(_DWORD *)(v3 + 48));
      RegionParam::RegionParam((RegionParam *const)(v3 + 96));
      *(_DWORD *)(v3 + 96) = *(_DWORD *)(v3 + 48);
      if ( std::optional<Vector3>::has_value((const std::optional<Vector3> *const)(v3 + 252)) )
      {
        n = (unsigned __int64)std::optional<Vector3>::value((std::optional<Vector3> *const)(v3 + 252));
        if ( (char)(n & 7) >= *(_BYTE *)((n >> 3) + 0x7FFF8000) && *(_BYTE *)((n >> 3) + 0x7FFF8000) != 0
          || *(_BYTE *)(((n + 11) >> 3) + 0x7FFF8000) != 0
          && (char)((n + 11) & 7) >= *(_BYTE *)(((n + 11) >> 3) + 0x7FFF8000) )
        {
          n = __asan_report_load_n(n, 12LL);
        }
        *(_QWORD *)(v3 + 104) = *(_QWORD *)n;
        *(_DWORD *)(v3 + 112) = *(_DWORD *)(n + 8);
      }
      else
      {
        *(Vector3 *)(v3 + 104) = operator+(&region_config_ptr->pos, &config_id->position_revise_);
      }
      if ( *(_BYTE *)(((unsigned __int64)&region_config_ptr->shape >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)region_config_ptr + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&region_config_ptr->shape >> 3)
                                                                        + 0x7FFF8000) )
      {
        __asan_report_load4();
      }
      *(_DWORD *)(v3 + 116) = region_config_ptr->shape;
      if ( *(_BYTE *)(((unsigned __int64)&region_config_ptr->sphere_radius >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&region_config_ptr->sphere_radius >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4();
      }
      *(float *)(v3 + 120) = region_config_ptr->sphere_radius;
      if ( (((unsigned __int8)region_config_ptr + 12) & 7) >= *(_BYTE *)(((unsigned __int64)&region_config_ptr->cubic_size >> 3)
                                                                       + 0x7FFF8000)
        && *(_BYTE *)(((unsigned __int64)&region_config_ptr->cubic_size >> 3) + 0x7FFF8000) != 0
        || *(_BYTE *)((((unsigned __int64)&region_config_ptr->cubic_size.z + 3) >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)region_config_ptr + 23) & 7) >= *(_BYTE *)((((unsigned __int64)&region_config_ptr->cubic_size.z
                                                                         + 3) >> 3)
                                                                       + 0x7FFF8000) )
      {
        __asan_report_load_n(&region_config_ptr->cubic_size, 12LL);
      }
      *(_QWORD *)(v3 + 124) = *(_QWORD *)&region_config_ptr->cubic_size.x;
      *(float *)(v3 + 132) = region_config_ptr->cubic_size.z;
      if ( *(_BYTE *)(((unsigned __int64)&region_config_ptr->cylinder_radius >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&region_config_ptr->cylinder_radius >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4();
      }
      *(float *)(v3 + 160) = region_config_ptr->cylinder_radius;
      if ( *(_BYTE *)(((unsigned __int64)&region_config_ptr->cylinder_height >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)region_config_ptr - 108) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&region_config_ptr->cylinder_height >> 3)
                                                                          + 0x7FFF8000) )
      {
        __asan_report_load4();
      }
      *(float *)(v3 + 164) = region_config_ptr->cylinder_height;
      std::vector<data::Point2D>::operator=(
        (std::vector<data::Point2D> *const)(v3 + 168),
        &region_config_ptr->relative_polygon_point_vec);
      if ( *(char *)(((unsigned __int64)&region_config_ptr->polygon_aabb_size >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)((((unsigned __int64)&region_config_ptr->polygon_aabb_size.z + 3) >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)region_config_ptr - 69) & 7) >= *(_BYTE *)((((unsigned __int64)&region_config_ptr->polygon_aabb_size.z
                                                                         + 3) >> 3)
                                                                       + 0x7FFF8000) )
      {
        __asan_report_load_n(&region_config_ptr->polygon_aabb_size, 12LL);
      }
      *(_QWORD *)(v3 + 192) = *(_QWORD *)&region_config_ptr->polygon_aabb_size.x;
      *(float *)(v3 + 200) = region_config_ptr->polygon_aabb_size.z;
      if ( *(_BYTE *)(((unsigned __int64)&region_config_ptr->room_id >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)region_config_ptr + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&region_config_ptr->room_id >> 3)
                                                                         + 0x7FFF8000) )
      {
        __asan_report_load4();
      }
      *(_DWORD *)(v3 + 152) = region_config_ptr->room_id;
      EntityMgr::createRegion((const RegionParam *)(v3 + 64));
      if ( std::operator==<Region>((const std::shared_ptr<Region> *)(v3 + 64), 0LL) )
      {
        common::milog::MiLogStream::create(
          &v15,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/group/group.cpp",
          "createDummyRegion",
          1895);
        v10 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                &v15,
                (const char (*)[31])"createRegion fails, config_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v3 + 48));
        common::milog::MiLogStream::~MiLogStream(&v15);
        std::shared_ptr<Region>::shared_ptr((std::shared_ptr<Region> *const)this, 0LL);
      }
      else
      {
        std::shared_ptr<Region>::shared_ptr((std::shared_ptr<Region> *const)this, (std::shared_ptr<Region> *)(v3 + 64));
      }
      std::shared_ptr<Region>::~shared_ptr((std::shared_ptr<Region> *const)(v3 + 64));
      RegionParam::~RegionParam((RegionParam *const)(v3 + 96));
      GroupEntityParam::~GroupEntityParam((GroupEntityParam *const)(v3 + 240));
    }
    else
    {
      common::milog::MiLogStream::create(
        &v15,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/group/group.cpp",
        "createDummyRegion",
        1877);
      v6 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
             &v15,
             (const char (*)[34])"findRegionConfig fails, group_id:");
      v7 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, &config_id->group_id_);
      v8 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v7, (const char (*)[13])", config_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v3 + 48));
      common::milog::MiLogStream::~MiLogStream(&v15);
      std::shared_ptr<Region>::shared_ptr((std::shared_ptr<Region> *const)this, 0LL);
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v15,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "createDummyRegion",
      1871);
    common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(&v15, (const char (*)[22])"getScriptConfig fails");
    common::milog::MiLogStream::~MiLogStream(&v15);
    std::shared_ptr<Region>::shared_ptr((std::shared_ptr<Region> *const)this, 0LL);
  }
  if ( v16 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF805C) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8064) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF806C) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8060) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8068) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return this;
};

// Line 1905: range 0000000015FBFF44-0000000015FC040D
int32_t __cdecl Group::createMonsterDelay(Group *const this, const GroupEntityParam *param, uint32_t delay_time_s)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  SceneTimer *v7; // rax
  std::shared_ptr<SceneTimer> *v8; // rax
  unsigned int *v9; // rcx
  std::shared_ptr<SceneTimer> *v10; // r8
  int32_t result; // eax
  std::enable_shared_from_this<Group> v13; // [rsp+20h] [rbp-320h] BYREF
  common::milog::MiLogStream v14; // [rsp+30h] [rbp-310h] BYREF
  Group::createMonsterDelay::<lambda(uint64_t)> v15; // [rsp+50h] [rbp-2F0h] BYREF
  char v16[208]; // [rsp+270h] [rbp-D0h] BYREF

  v3 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(160LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 48 4 17 cur_timer_id:1914 64 16 14 scene_ptr:1906 96 16 14 group_wtr:1912 128 16 14 timer_ptr:1915";
  *(_QWORD *)(v3 + 16) = Group::createMonsterDelay;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -219021312;
  v5[536862723] = -219021312;
  v5[536862724] = -202178560;
  Group::getScene((const Group *const)(v3 + 64));
  if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v3 + 64)) )
  {
    common::milog::MiLogStream::create(
      &v14,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "createMonsterDelay",
      1909);
    common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v14, (const char (*)[15])"getScene fails");
    common::milog::MiLogStream::~MiLogStream(&v14);
    v6 = -1;
  }
  else
  {
    std::enable_shared_from_this<Group>::shared_from_this(&v13);
    std::weak_ptr<Group>::weak_ptr<Group,void>(
      (std::weak_ptr<Group> *const)(v3 + 96),
      (const std::shared_ptr<Group> *)&v13);
    std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)&v13);
    if ( *(_BYTE *)(((unsigned __int64)&this->delay_create_monster_timer_id_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->delay_create_monster_timer_id_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    *(_DWORD *)(v3 + 48) = ++this->delay_create_monster_timer_id_;
    GroupEntityParam::GroupEntityParam((GroupEntityParam *const)&v15.__param, param);
    std::weak_ptr<Group>::weak_ptr(&v15.__group_wtr, (const std::weak_ptr<Group> *)(v3 + 96));
    v15.__cur_timer_id = *(_DWORD *)(v3 + 48);
    common::tools::perf::make_shared<SceneTimer,std::shared_ptr<Scene> &,Group::createMonsterDelay(GroupEntityParam const&,unsigned int)::{lambda(unsigned long)#1}>(
      (std::shared_ptr<Scene> *)(v3 + 128),
      (Group::createMonsterDelay::<lambda(uint64_t)> *)(v3 + 64),
      (std::shared_ptr<Scene> *)&v15,
      (Group::createMonsterDelay::<lambda(uint64_t)> *)(v3 + 64));
    Group::createMonsterDelay(GroupEntityParam const&,unsigned int)::{lambda(unsigned long)#1}::~GroupEntityParam(&v15);
    if ( std::operator==<SceneTimer>(0LL, (const std::shared_ptr<SceneTimer> *)(v3 + 128)) )
    {
      common::milog::MiLogStream::create(
        &v14,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/group/group.cpp",
        "createMonsterDelay",
        1935);
      common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
        &v14,
        (const char (*)[30])"make_shared<SceneTimer> fails");
      common::milog::MiLogStream::~MiLogStream(&v14);
      v6 = -1;
    }
    else
    {
      v7 = std::__shared_ptr_access<SceneTimer,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SceneTimer,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
      if ( SceneTimer::startS(v7, delay_time_s, 0, "./src/group/group.cpp", "createMonsterDelay", 1938) )
      {
        common::milog::MiLogStream::create(
          &v14,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/group/group.cpp",
          "createMonsterDelay",
          1940);
        common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
          &v14,
          (const char (*)[24])"timer_ptr->startS fails");
        common::milog::MiLogStream::~MiLogStream(&v14);
        v6 = -1;
      }
      else
      {
        v8 = std::move<std::shared_ptr<SceneTimer> &>((std::shared_ptr<SceneTimer> *)(v3 + 128));
        std::unordered_map<unsigned int,std::shared_ptr<SceneTimer>>::emplace<unsigned int &,std::shared_ptr<SceneTimer>>(
          &this->delay_create_monster_timer_map_,
          (unsigned int *)(v3 + 48),
          v8,
          v9,
          v10);
        v6 = 0;
      }
    }
    std::shared_ptr<SceneTimer>::~shared_ptr((std::shared_ptr<SceneTimer> *const)(v3 + 128));
    std::weak_ptr<Group>::~weak_ptr((std::weak_ptr<Group> *const)(v3 + 96));
  }
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 64));
  result = v6;
  if ( v16 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 1915: range 0000000016043240-0000000016043304
void __cdecl Group::createMonsterDelay(GroupEntityParam const&,unsigned int)::{lambda(unsigned long)#1}::GroupEntityParam(
        Group::createMonsterDelay::<lambda(uint64_t)> *const this,
        Group::createMonsterDelay::<lambda(uint64_t)> *a2)
{
  uint32_t cur_timer_id; // ecx

  GroupEntityParam::GroupEntityParam((GroupEntityParam *const)&this->__param, &a2->__param);
  std::weak_ptr<Group>::weak_ptr(&this->__group_wtr, &a2->__group_wtr);
  if ( *(_BYTE *)(((unsigned __int64)&a2->__cur_timer_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->__cur_timer_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4();
  }
  cur_timer_id = a2->__cur_timer_id;
  if ( *(_BYTE *)(((unsigned __int64)&this->__cur_timer_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->__cur_timer_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->__cur_timer_id);
  }
  this->__cur_timer_id = cur_timer_id;
};

// Line 1915: range 0000000016044468-000000001604452C
void __cdecl Group::createMonsterDelay(GroupEntityParam const&,unsigned int)::{lambda(unsigned long)#1}::GroupEntityParam(
        Group::createMonsterDelay::<lambda(uint64_t)> *const this,
        const Group::createMonsterDelay::<lambda(uint64_t)> *a2)
{
  uint32_t cur_timer_id; // ecx

  GroupEntityParam::GroupEntityParam((GroupEntityParam *const)&this->__param, &a2->__param);
  std::weak_ptr<Group>::weak_ptr(&this->__group_wtr, &a2->__group_wtr);
  if ( *(_BYTE *)(((unsigned __int64)&a2->__cur_timer_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->__cur_timer_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4();
  }
  cur_timer_id = a2->__cur_timer_id;
  if ( *(_BYTE *)(((unsigned __int64)&this->__cur_timer_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->__cur_timer_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->__cur_timer_id);
  }
  this->__cur_timer_id = cur_timer_id;
};

// Line 1915: range 0000000015FBFB56-0000000015FBFF15
void __cdecl Group::createMonsterDelay(GroupEntityParam const&,unsigned int)::{lambda(unsigned long)#1}::operator()(
        const Group::createMonsterDelay::<lambda(uint64_t)> *const __closure,
        uint64_t now_ms)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  common::milog::MiLogStream *v6; // rdx
  std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  common::milog::MiLogStream *v8; // r14
  std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // r14
  std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  common::milog::MiLogStream v15; // [rsp+10h] [rbp-B0h] BYREF
  char v16[144]; // [rsp+30h] [rbp-90h] BYREF

  v2 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 16 14 group_ptr:1917 64 16 16 monster_ptr:1924";
  *(_QWORD *)(v2 + 16) = Group::createMonsterDelay(GroupEntityParam const&,unsigned int)::{lambda(unsigned long)#1}::operator();
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862722] = -202178560;
  std::weak_ptr<Group>::lock((const std::weak_ptr<Group> *const)(v2 + 32));
  if ( std::operator==<Group>(0LL, (const std::shared_ptr<Group> *)(v2 + 32)) )
  {
    common::milog::MiLogStream::create(
      &v15,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/group/group.cpp",
      "operator()",
      1921);
    common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
      &v15,
      (const char (*)[28])"group_wtr.lock() is nullptr");
    common::milog::MiLogStream::~MiLogStream(&v15);
  }
  else
  {
    v5 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    Group::createMonster((Group *const)(v2 + 64), (const GroupEntityParam *)v5);
    if ( std::operator==<Monster>(0LL, (const std::shared_ptr<Monster> *)(v2 + 64)) )
    {
      common::milog::MiLogStream::create(
        &v15,
        &common::milog::MiLogDefault::default_log_obj_,
        0x10u,
        "./src/group/group.cpp",
        "operator()",
        1927);
      v6 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
             &v15,
             (const char (*)[32])"createMonster fails, config_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, &__closure->__param.config_id);
    }
    else
    {
      v7 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
      std::unordered_map<unsigned int,std::shared_ptr<SceneTimer>>::erase(
        &v7->delay_create_monster_timer_map_,
        &__closure->__cur_timer_id);
      common::milog::MiLogStream::create(
        &v15,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/group/group.cpp",
        "operator()",
        1931);
      v8 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
             &v15,
             (const char (*)[22])"delay create monster:");
      v9 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
      v10 = common::milog::MiLogStream::operator<<<Monster,(Monster*)0>(v8, v9);
      v11 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v10, (const char (*)[12])" timer_id: ");
      v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, &__closure->__cur_timer_id);
      v13 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v12, (const char (*)[11])off_25AB79C0);
      v14 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
      operator<<(v13, v14);
    }
    common::milog::MiLogStream::~MiLogStream(&v15);
    std::shared_ptr<Monster>::~shared_ptr((std::shared_ptr<Monster> *const)(v2 + 64));
  }
  std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v2 + 32));
  if ( v16 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 1915: range 0000000015FBFF16-0000000015FBFF42
void __cdecl Group::createMonsterDelay(GroupEntityParam const&,unsigned int)::{lambda(unsigned long)#1}::~GroupEntityParam(
        Group::createMonsterDelay::<lambda(uint64_t)> *const this)
{
  std::weak_ptr<Group>::~weak_ptr(&this->__group_wtr);
  GroupEntityParam::~GroupEntityParam((GroupEntityParam *const)&this->__param);
};

// Line 1951: range 0000000015FC040E-0000000015FC0566
proto::GroupMonsterBin *__fastcall Group::findMonsterBin(Group *const this, uint32_t config_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  proto::GroupMonsterBin *result; // rax
  std::_Rb_tree_iterator<std::pair<unsigned int const,proto::GroupMonsterBin> >::_Self __y; // [rsp+18h] [rbp-88h] BYREF
  char v7[128]; // [rsp+20h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v7;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 4 14 config_id:1950 64 8 7 it:1952";
  *(_QWORD *)(v2 + 16) = Group::findMonsterBin;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -202116352;
  *(_DWORD *)(v2 + 48) = config_id;
  *(std::map<unsigned int,proto::GroupMonsterBin>::iterator *)(v2 + 64) = std::map<unsigned int,proto::GroupMonsterBin>::find(
                                                                            &this->monster_bin_map_,
                                                                            (const std::map<unsigned int,proto::GroupMonsterBin>::key_type *)(v2 + 48));
  __y._M_node = std::map<unsigned int,proto::GroupMonsterBin>::end(&this->monster_bin_map_)._M_node;
  if ( std::operator==(
         (const std::_Rb_tree_iterator<std::pair<unsigned int const,proto::GroupMonsterBin> >::_Self *)(v2 + 64),
         &__y) )
  {
    result = 0LL;
  }
  else
  {
    result = &std::_Rb_tree_iterator<std::pair<unsigned int const,proto::GroupMonsterBin>>::operator->((const std::_Rb_tree_iterator<std::pair<unsigned int const,proto::GroupMonsterBin> > *const)(v2 + 64))->second;
  }
  if ( v7 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 1962: range 0000000015FC0568-0000000015FC06C0
proto::GroupGadgetBin *__fastcall Group::findGadgetBin(Group *const this, uint32_t config_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  proto::GroupGadgetBin *result; // rax
  std::_Rb_tree_iterator<std::pair<unsigned int const,proto::GroupGadgetBin> >::_Self __y; // [rsp+18h] [rbp-88h] BYREF
  char v7[128]; // [rsp+20h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v7;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 4 14 config_id:1961 64 8 7 it:1963";
  *(_QWORD *)(v2 + 16) = Group::findGadgetBin;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -202116352;
  *(_DWORD *)(v2 + 48) = config_id;
  *(std::map<unsigned int,proto::GroupGadgetBin>::iterator *)(v2 + 64) = std::map<unsigned int,proto::GroupGadgetBin>::find(
                                                                           &this->gadget_bin_map_,
                                                                           (const std::map<unsigned int,proto::GroupGadgetBin>::key_type *)(v2 + 48));
  __y._M_node = std::map<unsigned int,proto::GroupGadgetBin>::end(&this->gadget_bin_map_)._M_node;
  if ( std::operator==(
         (const std::_Rb_tree_iterator<std::pair<unsigned int const,proto::GroupGadgetBin> >::_Self *)(v2 + 64),
         &__y) )
  {
    result = 0LL;
  }
  else
  {
    result = &std::_Rb_tree_iterator<std::pair<unsigned int const,proto::GroupGadgetBin>>::operator->((const std::_Rb_tree_iterator<std::pair<unsigned int const,proto::GroupGadgetBin> > *const)(v2 + 64))->second;
  }
  if ( v7 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 1973: range 0000000015FC06C2-0000000015FC0A63
uint32_t __cdecl Group::refreshSuiteIndex(Group *const this, uint32_t exclude_index)
{
  common::milog::MiLogStream *v3; // rax
  common::milog::MiLogStream *v4; // rax
  uint32_t suite_index; // ecx
  uint32_t tmp_index; // [rsp+14h] [rbp-3Ch]
  const GroupScriptConfig *group_script_config_ptr; // [rsp+18h] [rbp-38h]
  common::milog::MiLogStream v8; // [rsp+20h] [rbp-30h] BYREF

  if ( *(_BYTE *)(((unsigned __int64)&this->target_suite_index_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->target_suite_index_ >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_load4();
  }
  if ( this->target_suite_index_ )
  {
    tmp_index = this->target_suite_index_;
    this->target_suite_index_ = 0;
    return tmp_index;
  }
  else
  {
    group_script_config_ptr = Group::getScriptConfig(this);
    if ( group_script_config_ptr )
    {
      if ( *(_BYTE *)(((unsigned __int64)group_script_config_ptr >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)group_script_config_ptr >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4();
      }
      if ( group_script_config_ptr->io_type )
      {
        if ( *(_BYTE *)(((unsigned __int64)group_script_config_ptr >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)group_script_config_ptr >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4();
        }
        if ( group_script_config_ptr->io_type == GROUP_IO_TYPE_FLOW )
        {
          if ( *(_BYTE *)(((unsigned __int64)&group_script_config_ptr->init_suite_index >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&group_script_config_ptr->init_suite_index >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4();
          }
          return group_script_config_ptr->init_suite_index;
        }
        else
        {
          return 0;
        }
      }
      else
      {
        if ( *(_BYTE *)(((unsigned __int64)&group_script_config_ptr->is_rand_suite >> 3) + 0x7FFF8000) != 0
          && (((unsigned __int8)group_script_config_ptr - 116) & 7) >= *(_BYTE *)(((unsigned __int64)&group_script_config_ptr->is_rand_suite >> 3)
                                                                                + 0x7FFF8000) )
        {
          __asan_report_load1(&group_script_config_ptr->is_rand_suite);
        }
        if ( group_script_config_ptr->is_rand_suite )
        {
          return GroupScriptConfig::randSuiteIndex(group_script_config_ptr, exclude_index, 0);
        }
        else
        {
          if ( *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4();
          }
          if ( this->suite_index_ )
          {
            if ( *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4();
            }
            suite_index = this->suite_index_;
            if ( *(_BYTE *)(((unsigned __int64)&group_script_config_ptr->end_suite_index >> 3) + 0x7FFF8000) != 0
              && (char)((((_BYTE)group_script_config_ptr - 124) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&group_script_config_ptr->end_suite_index >> 3)
                                                                                      + 0x7FFF8000) )
            {
              __asan_report_load4();
            }
            if ( suite_index == group_script_config_ptr->end_suite_index )
            {
              return this->suite_index_;
            }
            else
            {
              if ( *(_BYTE *)(((unsigned __int64)&group_script_config_ptr->init_suite_index >> 3) + 0x7FFF8000) != 0
                && *(_BYTE *)(((unsigned __int64)&group_script_config_ptr->init_suite_index >> 3) + 0x7FFF8000) <= 3 )
              {
                __asan_report_load4();
              }
              return group_script_config_ptr->init_suite_index;
            }
          }
          else
          {
            if ( *(_BYTE *)(((unsigned __int64)&group_script_config_ptr->init_suite_index >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&group_script_config_ptr->init_suite_index >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4();
            }
            return group_script_config_ptr->init_suite_index;
          }
        }
      }
    }
    else
    {
      common::milog::MiLogStream::create(
        &v8,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/group/group.cpp",
        "refreshSuiteIndex",
        1984);
      v3 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(&v8, (const char (*)[11])"group_id: ");
      v4 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v3, &this->group_id_);
      common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(v4, (const char (*)[24])" getScriptConfig failed");
      common::milog::MiLogStream::~MiLogStream(&v8);
      return 0;
    }
  }
};

// Line 2014: range 0000000015FC0A64-0000000015FC0BA7
int32_t __fastcall Group::refresh(Group *const this, const ScriptContext *context, SuiteLogContext log_context)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t result; // eax
  char v7[128]; // [rsp+10h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v7;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 28 16 log_context:2013";
  *(_QWORD *)(v3 + 16) = Group::refresh;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 0x4000000;
  v5[536862722] = -202116109;
  *(SuiteLogContext *)(v3 + 32) = log_context;
  result = Group::refresh(this, context, *(SuiteLogContext *)(v3 + 32), 0, 0);
  if ( v7 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 2019: range 0000000015FC0BA8-0000000015FC0CF9
int32_t __fastcall Group::refresh(
        Group *const this,
        const ScriptContext *context,
        uint32_t suite_index,
        SuiteLogContext log_context)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  _DWORD *v6; // r12
  int32_t result; // eax
  char v9[128]; // [rsp+20h] [rbp-80h] BYREF

  v4 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(96LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 28 16 log_context:2018";
  *(_QWORD *)(v4 + 16) = Group::refresh;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = 0x4000000;
  v6[536862722] = -202116109;
  *(SuiteLogContext *)(v4 + 32) = log_context;
  result = Group::refresh(this, context, *(SuiteLogContext *)(v4 + 32), suite_index, 0);
  if ( v9 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 2024: range 0000000015FC0CFA-0000000015FC0E5B
int32_t __fastcall Group::refresh(
        Group *const this,
        const ScriptContext *context,
        uint32_t suite_index,
        bool is_exclude_prev_suite,
        SuiteLogContext log_context)
{
  unsigned __int64 v5; // rbx
  __int64 v6; // rax
  _DWORD *v7; // r12
  int32_t result; // eax
  char v11[128]; // [rsp+20h] [rbp-80h] BYREF

  v5 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_1(96LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "1 32 28 16 log_context:2023";
  *(_QWORD *)(v5 + 16) = Group::refresh;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = 0x4000000;
  v7[536862722] = -202116109;
  *(SuiteLogContext *)(v5 + 32) = log_context;
  result = Group::refresh(this, context, *(SuiteLogContext *)(v5 + 32), suite_index, is_exclude_prev_suite, 0);
  if ( v11 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 2029: range 0000000015FC0E5C-0000000015FC1381
__int64 __fastcall Group::refresh(
        Group *const this,
        const ScriptContext *context,
        uint32_t suite_index,
        bool is_exclude_prev_suite,
        bool keep_chest_record,
        SuiteLogContext log_context)
{
  unsigned __int64 v6; // r12
  __int64 v7; // rax
  _DWORD *v8; // r13
  uint32_t Now; // esi
  uint32_t v10; // eax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rdx
  bool *p_is_use_old_flow_group_refresh; // rax
  char v13; // al
  unsigned int v14; // r14d
  char v15; // al
  __int64 result; // rax
  SuiteLogContext v17; // [rsp-20h] [rbp-F0h]
  char v22[176]; // [rsp+20h] [rbp-B0h] BYREF

  v6 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v7 = __asan_stack_malloc_1(128LL);
    if ( v7 )
      v6 = v7;
  }
  *(_QWORD *)v6 = 1102416563LL;
  *(_QWORD *)(v6 + 8) = "2 32 16 15 config_ptr:2040 64 28 16 log_context:2028";
  *(_QWORD *)(v6 + 16) = Group::refresh;
  v8 = (_DWORD *)(v6 >> 3);
  v8[536862720] = -235802127;
  v8[536862721] = -219021312;
  v8[536862722] = 0x4000000;
  v8[536862723] = -202116109;
  *(SuiteLogContext *)(v6 + 64) = log_context;
  Now = common::tools::TimeUtils::getNow();
  if ( *(_BYTE *)(((unsigned __int64)&this->last_refresh_time_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->last_refresh_time_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->last_refresh_time_);
  }
  this->last_refresh_time_ = Now;
  if ( !suite_index )
  {
    if ( is_exclude_prev_suite )
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4();
      }
      v10 = this->suite_index_;
    }
    else
    {
      v10 = 0;
    }
    suite_index = Group::refreshSuiteIndex(this, v10);
  }
  if ( Group::getIOType(this) == GROUP_IO_TYPE_FLOW )
  {
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)(v6 + 32));
    if ( !std::operator!=<Config>((const std::shared_ptr<Config> *)(v6 + 32), 0LL) )
      goto LABEL_19;
    v11 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 32));
    p_is_use_old_flow_group_refresh = &v11->is_use_old_flow_group_refresh;
    if ( *(_BYTE *)(((unsigned __int64)p_is_use_old_flow_group_refresh >> 3) + 0x7FFF8000) != 0
      && ((unsigned __int8)p_is_use_old_flow_group_refresh & 7) >= *(_BYTE *)(((unsigned __int64)p_is_use_old_flow_group_refresh >> 3)
                                                                            + 0x7FFF8000) )
    {
      __asan_report_load1(p_is_use_old_flow_group_refresh);
    }
    if ( v11->is_use_old_flow_group_refresh )
      v13 = 1;
    else
LABEL_19:
      v13 = 0;
    *(_QWORD *)&v17.reason = *(_QWORD *)(v6 + 64);
    *(_QWORD *)&v17.quest_id = *(_QWORD *)(v6 + 72);
    *(_QWORD *)&v17.schedule_id = *(_QWORD *)(v6 + 80);
    v17.wq_parent_quest_id = *(_DWORD *)(v6 + 88);
    if ( v13 )
      v14 = Group::setFlowSuiteOld(this, context, v17, suite_index);
    else
      v14 = Group::setFlowSuite(this, context, v17, suite_index);
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v6 + 32));
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    if ( !Group::checkBanSuiteLogic(this, this->suite_index_, suite_index) )
      goto LABEL_32;
    if ( *(_BYTE *)(((unsigned __int64)&this->target_suite_index_ >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->target_suite_index_ >> 3)
                                                          + 0x7FFF8000) )
    {
      __asan_report_load4();
    }
    if ( this->target_suite_index_ && suite_index == this->target_suite_index_ )
LABEL_32:
      v15 = 0;
    else
      v15 = 1;
    if ( v15 )
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->target_suite_index_ >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->target_suite_index_ >> 3)
                                                            + 0x7FFF8000) )
      {
        __asan_report_store4(&this->target_suite_index_);
      }
      this->target_suite_index_ = suite_index;
      v14 = 0;
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->target_suite_index_ >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->target_suite_index_ >> 3)
                                                            + 0x7FFF8000) )
      {
        __asan_report_store4(&this->target_suite_index_);
      }
      this->target_suite_index_ = 0;
      v14 = Group::setSuite(this, context, *(SuiteLogContext *)(v6 + 64), suite_index, keep_chest_record);
    }
  }
  result = v14;
  if ( v22 == (char *)v6 )
  {
    *(_QWORD *)((v6 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v6 = 1172321806LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2062: range 0000000015FC1382-0000000015FC186A
int32_t __fastcall Group::refreshWorldQuestFlowSuite(
        Group *const this,
        const ScriptContext *context,
        uint32_t suite_index,
        bool is_force,
        SuiteLogContext log_context)
{
  unsigned __int64 v5; // r12
  __int64 v6; // rax
  _DWORD *v7; // r13
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  int32_t result; // eax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  uint32_t Now; // esi
  const GroupScriptConfig *group_script_config_ptr; // [rsp+28h] [rbp-C8h]
  common::milog::MiLogStream v20; // [rsp+30h] [rbp-C0h] BYREF
  char v21[160]; // [rsp+50h] [rbp-A0h] BYREF

  v5 = (unsigned __int64)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_1(128LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "2 48 4 16 suite_index:2061 64 28 16 log_context:2061";
  *(_QWORD *)(v5 + 16) = Group::refreshWorldQuestFlowSuite;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234556943;
  v7[536862722] = 0x4000000;
  v7[536862723] = -202116109;
  *(SuiteLogContext *)(v5 + 64) = log_context;
  *(_DWORD *)(v5 + 48) = suite_index;
  group_script_config_ptr = Group::getScriptConfig(this);
  if ( group_script_config_ptr )
  {
    if ( *(_BYTE *)(((unsigned __int64)group_script_config_ptr >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)group_script_config_ptr >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    if ( group_script_config_ptr->io_type != GROUP_IO_TYPE_FLOW )
      goto LABEL_12;
    if ( *(_BYTE *)(((unsigned __int64)&group_script_config_ptr->sub_flow_type >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)group_script_config_ptr + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&group_script_config_ptr->sub_flow_type >> 3)
                                                                            + 0x7FFF8000) )
    {
      __asan_report_load4();
    }
    if ( group_script_config_ptr->sub_flow_type == GROUP_SUB_FLOW_TYPE_WORLD_QUEST )
    {
      if ( GroupScriptConfig::getSuiteDiskConfig(group_script_config_ptr, *(_DWORD *)(v5 + 48)) )
      {
        if ( is_force )
          goto LABEL_20;
        if ( *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4();
        }
        if ( this->suite_index_ == *(_DWORD *)(v5 + 48) )
        {
          result = 0;
        }
        else
        {
LABEL_20:
          Now = common::tools::TimeUtils::getNow();
          if ( *(_BYTE *)(((unsigned __int64)&this->last_refresh_time_ >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&this->last_refresh_time_ >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_store4(&this->last_refresh_time_);
          }
          this->last_refresh_time_ = Now;
          result = Group::setFlowSuite(this, context, *(SuiteLogContext *)(v5 + 64), *(_DWORD *)(v5 + 48));
        }
      }
      else
      {
        common::milog::MiLogStream::create(
          &v20,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/group/group.cpp",
          "refreshWorldQuestFlowSuite",
          2076);
        v12 = common::milog::MiLogStream::operator<<<char [69],(char *[69])0>(
                &v20,
                (const char (*)[69])"[WQ_FLOW] refreshWorldQuestFlowSuite suite_index not exist group_id:");
        v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, &this->group_id_);
        v14 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v13, (const char (*)[15])", suite_index:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, (const unsigned int *)(v5 + 48));
        common::milog::MiLogStream::~MiLogStream(&v20);
        result = -1;
      }
    }
    else
    {
LABEL_12:
      common::milog::MiLogStream::create(
        &v20,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/group/group.cpp",
        "refreshWorldQuestFlowSuite",
        2071);
      v11 = common::milog::MiLogStream::operator<<<char [69],(char *[69])0>(
              &v20,
              (const char (*)[69])"[WQ_FLOW] refreshWorldQuestFlowSuite group is not wq flow. group_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, &this->group_id_);
      common::milog::MiLogStream::~MiLogStream(&v20);
      result = -1;
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v20,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "refreshWorldQuestFlowSuite",
      2066);
    v8 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
           &v20,
           (const char (*)[21])"[WQ_FLOW] group_id: ");
    v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, &this->group_id_);
    common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(v9, (const char (*)[24])" getScriptConfig failed");
    common::milog::MiLogStream::~MiLogStream(&v20);
    result = -1;
  }
  if ( v21 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2089: range 0000000015FC186C-0000000015FC1F06
__int64 __fastcall Group::setFlowSuite(
        Group *const this,
        const ScriptContext *context,
        uint32_t suite_index,
        SuiteLogContext log_context)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v7; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v8; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v9; // r14
  void (__fastcall **vptr_DescribalBase)(std::string *, Group *const); // rax
  unsigned int v11; // r14d
  int32_t v12; // r14d
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rdx
  int32_t *p_param1; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  __int64 result; // rax
  uint32_t old_suite; // [rsp+24h] [rbp-17Ch]
  std::string v; // [rsp+30h] [rbp-170h] BYREF
  char v22[336]; // [rsp+50h] [rbp-150h] BYREF

  v4 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(288LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "5 32 4 16 suite_index:2088 48 16 14 event_ptr:2111 80 28 16 log_context:2088 144 32 12 err_msg:2"
                        "095 208 40 6 e:2098";
  *(_QWORD *)(v4 + 16) = Group::setFlowSuite;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = 61956;
  v6[536862722] = 62194;
  v6[536862723] = -219020288;
  v6[536862724] = 62194;
  v6[536862725] = -219021312;
  v6[536862726] = 62194;
  v6[536862727] = -218103808;
  v6[536862728] = -202116109;
  *(SuiteLogContext *)(v4 + 80) = log_context;
  *(_DWORD *)(v4 + 32) = suite_index;
  if ( Group::findSuiteDiskScriptConfig(this, *(_DWORD *)(v4 + 32)) )
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    old_suite = this->suite_index_;
    Group::fireWillRefreshEvent(this, *(_DWORD *)(v4 + 32));
    Group::stopHandleEvent(this);
    Group::cleanSuite(this, 0, *(_DWORD *)(v4 + 32));
    Group::restartHandleEvent(this);
    Group::createFlowSuite(this, *(_DWORD *)(v4 + 32));
    EventUtil::createEvent((std::shared_ptr<Event> *)(v4 + 48), 32);
    if ( std::operator!=<Event>((const std::shared_ptr<Event> *)(v4 + 48), 0LL) )
    {
      v12 = *(_DWORD *)(v4 + 32);
      v13 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 48));
      p_param1 = &v13->param1;
      if ( *(_BYTE *)(((unsigned __int64)p_param1 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)p_param1 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_param1 >> 3) + 0x7FFF8000) )
      {
        __asan_report_store4(p_param1);
      }
      v13->param1 = v12;
      Group::handleEvent(this, (EventPtr *)(v4 + 48));
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&v,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/group/group.cpp",
      "setFlowSuite",
      2117);
    v15 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
            (common::milog::MiLogStream *const)&v,
            (const char (*)[39])"[FLOW] flow group refresh suite_index:");
    v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, (const unsigned int *)(v4 + 32));
    v17 = common::milog::MiLogStream::operator<<<char [3],(char *[3])0>(v16, (const char (*)[3])" @");
    operator<<(v17, this);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v);
    Group::notifyClientSuite(this);
    Group::writeSuiteChangeLog(this, *(SuiteLogContext *)(v4 + 80), old_suite);
    v11 = 0;
    std::shared_ptr<Event>::~shared_ptr((std::shared_ptr<Event> *const)(v4 + 48));
  }
  else
  {
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 48));
    v7 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
           (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 48),
           "refreshWorldQuestFlowSuite, not found suite disk:");
    v8 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v7, *(_DWORD *)(v4 + 32));
    v9 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v8, ", ");
    if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    vptr_DescribalBase = (void (__fastcall **)(std::string *, Group *const))this->_vptr_DescribalBase;
    if ( *(_BYTE *)(((unsigned __int64)this->_vptr_DescribalBase >> 3) + 0x7FFF8000) )
      vptr_DescribalBase = (void (__fastcall **)(std::string *, Group *const))__asan_report_load8();
    (*vptr_DescribalBase)(&v, this);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v9, &v);
    std::string::~string(&v);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
      (std::string *)(v4 + 144),
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 48));
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&v,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/group/group.cpp",
      "setFlowSuite",
      2096);
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
      (common::milog::MiLogStream *const)&v,
      (const std::string *)(v4 + 144));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v);
    CustomException::CustomException((CustomException *const)(v4 + 208), (const std::string *)(v4 + 144));
    ScriptLib::notifyServerErrorLog(
      context,
      &context->file_path,
      &context->func_name,
      (const std::exception *)(v4 + 208));
    v11 = -1;
    CustomException::~CustomException((CustomException *const)(v4 + 208));
    std::string::~string((void *)(v4 + 144));
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 48));
  }
  result = v11;
  if ( v22 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 2127: range 0000000015FC1F08-0000000015FC22DA
void __cdecl Group::createFlowSuite(Group *const this, uint32_t target_suite_index)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream v8; // [rsp+10h] [rbp-150h] BYREF
  char v9[304]; // [rsp+30h] [rbp-130h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(256LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 160 19 script_context:2134";
  *(_QWORD *)(v2 + 16) = Group::createFlowSuite;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862726] = -202116109;
  v4[536862727] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)&this->io_type_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->io_type_ >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4();
  }
  if ( this->io_type_ == GROUP_IO_TYPE_FLOW )
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_store4(&this->suite_index_);
    }
    this->suite_index_ = target_suite_index;
    ScriptContext::ScriptContext((ScriptContext *const)(v2 + 32));
    if ( Group::goToFlowSuite(this, (const ScriptContext *)(v2 + 32), target_suite_index, 1) )
    {
      common::milog::MiLogStream::create(
        &v8,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/group/group.cpp",
        "createFlowSuite",
        2137);
      v6 = common::milog::MiLogStream::operator<<<Group,(Group*)0>(&v8, this);
      v7 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
             v6,
             (const char (*)[35])" goToFlowSuite fails, suite_index:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, &this->suite_index_);
      common::milog::MiLogStream::~MiLogStream(&v8);
    }
    else if ( ChallengeComp::init(&this->challenge_comp_) )
    {
      common::milog::MiLogStream::create(
        &v8,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/group/group.cpp",
        "createFlowSuite",
        2143);
      common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
        &v8,
        (const char (*)[26])"init challenge_comp fails");
      common::milog::MiLogStream::~MiLogStream(&v8);
    }
    ScriptContext::~ScriptContext((ScriptContext *const)(v2 + 32));
  }
  else
  {
    common::milog::MiLogStream::create(
      &v8,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/group/group.cpp",
      "createFlowSuite",
      2130);
    v5 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
           &v8,
           (const char (*)[45])"createFlowSuite group is not flow. group_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, &this->group_id_);
    common::milog::MiLogStream::~MiLogStream(&v8);
  }
  if ( v9 == (char *)v2 )
  {
    *(_DWORD *)((v2 >> 3) + 0x7FFF8000) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 2149: range 0000000015FC22DC-0000000015FC26AF
int32_t __fastcall Group::forceRandomRefresh(
        Group *const this,
        const ScriptContext *context,
        uint32_t exclude_suite_index,
        SuiteLogContext log_context)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  _DWORD *v6; // r13
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  int32_t result; // eax
  uint32_t Now; // esi
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  const GroupScriptConfig *group_script_config_ptr; // [rsp+28h] [rbp-C8h]
  common::milog::MiLogStream v16; // [rsp+30h] [rbp-C0h] BYREF
  char v17[160]; // [rsp+50h] [rbp-A0h] BYREF

  v4 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(128LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "2 48 4 16 suite_index:2165 64 28 16 log_context:2148";
  *(_QWORD *)(v4 + 16) = Group::forceRandomRefresh;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = 0x4000000;
  v6[536862723] = -202116109;
  *(SuiteLogContext *)(v4 + 64) = log_context;
  group_script_config_ptr = Group::getScriptConfig(this);
  if ( group_script_config_ptr )
  {
    if ( *(_BYTE *)(((unsigned __int64)group_script_config_ptr >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)group_script_config_ptr >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    if ( group_script_config_ptr->io_type == GROUP_IO_TYPE_FLOW )
    {
      result = -1;
    }
    else
    {
      Now = common::tools::TimeUtils::getNow();
      if ( *(_BYTE *)(((unsigned __int64)&this->last_refresh_time_ >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&this->last_refresh_time_ >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_store4(&this->last_refresh_time_);
      }
      this->last_refresh_time_ = Now;
      *(_DWORD *)(v4 + 48) = GroupScriptConfig::randSuiteIndex(group_script_config_ptr, exclude_suite_index, 1);
      if ( *(_BYTE *)(((unsigned __int64)&this->target_suite_index_ >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->target_suite_index_ >> 3)
                                                            + 0x7FFF8000) )
      {
        __asan_report_store4(&this->target_suite_index_);
      }
      this->target_suite_index_ = 0;
      common::milog::MiLogStream::create(
        &v16,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/group/group.cpp",
        "forceRandomRefresh",
        2167);
      v11 = common::milog::MiLogStream::operator<<<Group,(Group*)0>(&v16, this);
      v12 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v11, (const char (*)[15])" random suite:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v4 + 48));
      common::milog::MiLogStream::~MiLogStream(&v16);
      result = Group::setSuite(this, context, *(SuiteLogContext *)(v4 + 64), *(_DWORD *)(v4 + 48), 0);
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v16,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "forceRandomRefresh",
      2153);
    v7 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(&v16, (const char (*)[11])"group_id: ");
    v8 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, &this->group_id_);
    common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(v8, (const char (*)[24])" getScriptConfig failed");
    common::milog::MiLogStream::~MiLogStream(&v16);
    result = -1;
  }
  if ( v17 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2172: range 0000000015FC26B0-0000000015FC2A21
__int64 __fastcall Group::checkBanSuiteLogic(Group *const this, uint32_t pre_suite_index, uint32_t now_suite_index)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  __int64 result; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  const SuiteScriptConfig *pre_suite_config; // [rsp+10h] [rbp-B0h]
  const SuiteScriptConfig *now_suite_config; // [rsp+18h] [rbp-A8h]
  common::milog::MiLogStream v16; // [rsp+20h] [rbp-A0h] BYREF
  char v17[128]; // [rsp+40h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 20 pre_suite_index:2171 64 4 20 now_suite_index:2171";
  *(_QWORD *)(v3 + 16) = Group::checkBanSuiteLogic;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116348;
  *(_DWORD *)(v3 + 48) = pre_suite_index;
  *(_DWORD *)(v3 + 64) = now_suite_index;
  pre_suite_config = Group::findSuiteScriptConfig(this, *(_DWORD *)(v3 + 48));
  now_suite_config = Group::findSuiteScriptConfig(this, *(_DWORD *)(v3 + 64));
  if ( pre_suite_config )
  {
    if ( now_suite_config )
    {
      if ( *(_BYTE *)(((unsigned __int64)&pre_suite_config->ban_refresh >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)pre_suite_config - 12) & 7) >= *(_BYTE *)(((unsigned __int64)&pre_suite_config->ban_refresh >> 3)
                                                                      + 0x7FFF8000) )
      {
        __asan_report_load1(&pre_suite_config->ban_refresh);
      }
      if ( !pre_suite_config->ban_refresh )
        goto LABEL_15;
      if ( *(_BYTE *)(((unsigned __int64)&now_suite_config->ban_refresh >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)now_suite_config - 12) & 7) >= *(_BYTE *)(((unsigned __int64)&now_suite_config->ban_refresh >> 3)
                                                                      + 0x7FFF8000) )
      {
        __asan_report_load1(&now_suite_config->ban_refresh);
      }
      if ( !now_suite_config->ban_refresh )
        result = 1LL;
      else
LABEL_15:
        result = 0LL;
    }
    else
    {
      common::milog::MiLogStream::create(
        &v16,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/group/group.cpp",
        "checkBanSuiteLogic",
        2184);
      v10 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
              &v16,
              (const char (*)[42])"findSuiteScriptConfig failed,suite_index:");
      v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v3 + 64));
      v12 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v11, (const char (*)[10])"group_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, &this->group_id_);
      common::milog::MiLogStream::~MiLogStream(&v16);
      result = 0LL;
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v16,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "checkBanSuiteLogic",
      2178);
    v6 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
           &v16,
           (const char (*)[42])"findSuiteScriptConfig failed,suite_index:");
    v7 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, (const unsigned int *)(v3 + 48));
    v8 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v7, (const char (*)[10])"group_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, &this->group_id_);
    common::milog::MiLogStream::~MiLogStream(&v16);
    result = 0LL;
  }
  if ( v17 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 2196: range 0000000015FC2A22-0000000015FC316A
void __cdecl Group::cleanBin(Group *const this, bool keep_chest_record)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  std::set<unsigned int> *v8; // rax
  std::_Rb_tree_const_iterator<unsigned int>::reference v9; // rdx
  std::set<unsigned int> *v10; // rax
  bool *p_is_no_refresh; // rax
  std::__detail::_Node_iterator<std::pair<const std::string,int>,false,true>::pointer v12; // rax
  const std::string *v13; // rcx
  int *v14; // r8
  std::map<std::string,float>::mapped_type *v15; // rax
  _DWORD *v16; // rdx
  std::map<proto::ProtEntityType,std::set<unsigned int>>::key_type __k; // [rsp+1Ch] [rbp-1A4h] BYREF
  std::unordered_map<std::string,VariableScriptConfig>::const_iterator __for_begin; // [rsp+20h] [rbp-1A0h] BYREF
  std::unordered_map<std::string,VariableScriptConfig>::const_iterator __for_end_0; // [rsp+28h] [rbp-198h] BYREF
  std::set<unsigned int>::iterator __for_end; // [rsp+30h] [rbp-190h] BYREF
  const GroupScriptConfig *group_script_config_ptr; // [rsp+38h] [rbp-188h]
  std::set<unsigned int> *__for_range; // [rsp+40h] [rbp-180h]
  const data::GadgetExcelConfig *gadget_config_ptr; // [rsp+48h] [rbp-178h]
  const std::unordered_map<std::string,VariableScriptConfig> *__for_range_0; // [rsp+50h] [rbp-170h]
  const std::pair<const std::string,VariableScriptConfig> *v25; // [rsp+58h] [rbp-168h]
  std::tuple_element<0,const std::pair<const std::string,VariableScriptConfig> >::type *name; // [rsp+60h] [rbp-160h]
  std::tuple_element<1,const std::pair<const std::string,VariableScriptConfig> >::type *variable_config; // [rsp+68h] [rbp-158h]
  common::milog::MiLogStream v28; // [rsp+70h] [rbp-150h] BYREF
  char v29[304]; // [rsp+90h] [rbp-130h] BYREF

  v2 = (unsigned __int64)v29;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(256LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "4 32 4 14 config_id:2209 48 8 9 iter:2228 80 48 19 old_gadget_set:2204 160 56 21 old_variable_map:2221";
  *(_QWORD *)(v2 + 16) = Group::cleanBin;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61956;
  v4[536862721] = -234881024;
  v4[536862722] = 62194;
  v4[536862724] = -218959118;
  v4[536862726] = -218103808;
  v4[536862727] = -202116109;
  group_script_config_ptr = Group::getScriptConfig(this);
  if ( group_script_config_ptr )
  {
    std::set<unsigned int>::set((std::set<unsigned int> *const)(v2 + 80));
    __k = PROT_ENTITY_GADGET;
    v8 = std::map<proto::ProtEntityType,std::set<unsigned int>>::operator[](&this->deleted_entity_record_map_, &__k);
    std::swap<unsigned int>((std::set<unsigned int> *)(v2 + 80), v8);
    std::map<proto::ProtEntityType,std::set<unsigned int>>::clear(&this->deleted_entity_record_map_);
    if ( keep_chest_record )
    {
      __for_range = (std::set<unsigned int> *)(v2 + 80);
      *(std::set<unsigned int>::iterator *)(v2 + 48) = std::set<unsigned int>::begin((const std::set<unsigned int> *const)(v2 + 80));
      __for_end._M_node = std::set<unsigned int>::end(__for_range)._M_node;
      while ( std::operator!=((const std::_Rb_tree_const_iterator<unsigned int>::_Self *)(v2 + 48), &__for_end) )
      {
        v9 = std::_Rb_tree_const_iterator<unsigned int>::operator*((const std::_Rb_tree_const_iterator<unsigned int> *const)(v2 + 48));
        if ( *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v9 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4();
        }
        *(_DWORD *)(v2 + 32) = *v9;
        gadget_config_ptr = Group::getGadgetExcelConfig(this, *(_DWORD *)(v2 + 32));
        if ( gadget_config_ptr )
        {
          if ( *(_BYTE *)(((unsigned __int64)&gadget_config_ptr->type >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)gadget_config_ptr + 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&gadget_config_ptr->type >> 3)
                                                                             + 0x7FFF8000) )
          {
            __asan_report_load4();
          }
          if ( gadget_config_ptr->type == Chest )
          {
            __k = PROT_ENTITY_GADGET;
            v10 = std::map<proto::ProtEntityType,std::set<unsigned int>>::operator[](
                    &this->deleted_entity_record_map_,
                    &__k);
            std::set<unsigned int>::insert(v10, (const std::set<unsigned int>::value_type *)(v2 + 32));
          }
        }
        std::_Rb_tree_const_iterator<unsigned int>::operator++((std::_Rb_tree_const_iterator<unsigned int> *const)(v2 + 48));
      }
    }
    std::unordered_map<std::string,int>::unordered_map((std::unordered_map<std::string,int> *const)(v2 + 160));
    std::swap<std::string,int,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string const,int>>>(
      (std::unordered_map<std::string,int> *)(v2 + 160),
      &this->variable_map_);
    std::unordered_map<std::string,int>::clear(&this->variable_map_);
    __for_range_0 = &group_script_config_ptr->variable_map;
    __for_begin._M_cur = std::unordered_map<std::string,VariableScriptConfig>::begin(&group_script_config_ptr->variable_map)._M_cur;
    __for_end_0._M_cur = std::unordered_map<std::string,VariableScriptConfig>::end(__for_range_0)._M_cur;
    while ( std::__detail::operator!=<std::pair<std::string const,VariableScriptConfig>,true>(
              &__for_begin,
              &__for_end_0) )
    {
      v25 = std::__detail::_Node_const_iterator<std::pair<std::string const,VariableScriptConfig>,false,true>::operator*(&__for_begin);
      name = std::get<0ul,std::string const,VariableScriptConfig>(v25);
      variable_config = (std::tuple_element<1,const std::pair<const std::string,VariableScriptConfig> >::type *)std::get<1ul,std::string const,VariableScriptConfig>(v25);
      p_is_no_refresh = &variable_config->is_no_refresh;
      if ( *(_BYTE *)(((unsigned __int64)p_is_no_refresh >> 3) + 0x7FFF8000) != 0
        && ((unsigned __int8)p_is_no_refresh & 7) >= *(_BYTE *)(((unsigned __int64)p_is_no_refresh >> 3) + 0x7FFF8000) )
      {
        __asan_report_load1(p_is_no_refresh);
      }
      if ( variable_config->is_no_refresh )
      {
        *(std::unordered_map<std::string,int>::iterator *)(v2 + 48) = std::unordered_map<std::string,int>::find(
                                                                        (std::unordered_map<std::string,int> *const)(v2 + 160),
                                                                        name);
        __for_end._M_node = (std::_Rb_tree_const_iterator<unsigned int>::_Base_ptr)std::unordered_map<std::string,int>::end((std::unordered_map<std::string,int> *const)(v2 + 160))._M_cur;
        if ( std::__detail::operator!=<std::pair<std::string const,int>,true>(
               (const std::__detail::_Node_iterator_base<std::pair<const std::string,int>,true> *)(v2 + 48),
               (const std::__detail::_Node_iterator_base<std::pair<const std::string,int>,true> *)&__for_end) )
        {
          v12 = std::__detail::_Node_iterator<std::pair<std::string const,int>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,int>,false,true> *const)(v2 + 48));
          std::unordered_map<std::string,int>::emplace<std::string const&,int &>(
            &this->variable_map_,
            name,
            &v12->second,
            v13,
            v14);
        }
      }
      else
      {
        if ( *(_BYTE *)(((unsigned __int64)&variable_config->variable_type >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&variable_config->variable_type >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4();
        }
        if ( variable_config->variable_type == VARIABLE_TYPE_LOGIC_STATE )
        {
          v15 = std::map<std::string,float>::operator[](&this->sgv_map_, name);
          v16 = v15;
          if ( *(_BYTE *)(((unsigned __int64)v15 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v15 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v15 >> 3) + 0x7FFF8000) )
          {
            __asan_report_store4(v15);
          }
          *v16 = 0;
        }
      }
      std::__detail::_Node_const_iterator<std::pair<std::string const,VariableScriptConfig>,false,true>::operator++(&__for_begin);
    }
    std::unordered_map<std::string,std::shared_ptr<Trigger>>::clear(&this->trigger_map_);
    std::unordered_map<data::EventType,std::set<std::string>>::clear(&this->event_map_);
    std::map<unsigned int,proto::GroupMonsterBin>::clear(&this->monster_bin_map_);
    std::map<unsigned int,proto::GroupGadgetBin>::clear(&this->gadget_bin_map_);
    std::map<unsigned int,proto::BossDieInfoBin>::clear(&this->boss_die_info_map_);
    std::unordered_map<std::string,int>::~unordered_map((std::unordered_map<std::string,int> *const)(v2 + 160));
    std::set<unsigned int>::~set((std::set<unsigned int> *const)(v2 + 80));
  }
  else
  {
    common::milog::MiLogStream::create(
      &v28,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "cleanBin",
      2200);
    v5 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
           &v28,
           (const char (*)[33])"getScriptConfig failed,group id:");
    v6 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, &this->group_id_);
    v7 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v6, (const char (*)[14])",suite index:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, &this->suite_index_);
    common::milog::MiLogStream::~MiLogStream(&v28);
  }
  if ( v29 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 2247: range 0000000015FC31FA-0000000015FC3B48
__int64 __fastcall Group::setFlowSuiteOld(
        Group *const this,
        const ScriptContext *context,
        uint32_t suite_index,
        SuiteLogContext log_context)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  unsigned int v8; // r14d
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v9; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v10; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v11; // r14
  void (__fastcall **vptr_DescribalBase)(common::milog::MiLogStream *, Group *const); // rax
  uint32_t v13; // esi
  common::milog::MiLogStream *v14; // r14
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  int32_t v18; // r14d
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // rdx
  int32_t *p_param1; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  __int64 result; // rax
  uint32_t old_suite; // [rsp+24h] [rbp-18Ch]
  unsigned __int64 val; // [rsp+28h] [rbp-188h] BYREF
  const GroupScriptConfig *group_script_config_ptr; // [rsp+30h] [rbp-180h]
  common::milog::MiLogStream v30; // [rsp+40h] [rbp-170h] BYREF
  char v31[336]; // [rsp+60h] [rbp-150h] BYREF

  v4 = (unsigned __int64)v31;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(288LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "5 32 4 16 suite_index:2246 48 16 14 event_ptr:2291 80 28 16 log_context:2246 144 32 12 err_msg:2"
                        "259 208 40 6 e:2262";
  *(_QWORD *)(v4 + 16) = Group::setFlowSuiteOld;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = 61956;
  v6[536862722] = 62194;
  v6[536862723] = -219020288;
  v6[536862724] = 62194;
  v6[536862725] = -219021312;
  v6[536862726] = 62194;
  v6[536862727] = -218103808;
  v6[536862728] = -202116109;
  *(SuiteLogContext *)(v4 + 80) = log_context;
  *(_DWORD *)(v4 + 32) = suite_index;
  group_script_config_ptr = Group::getScriptConfig(this);
  if ( group_script_config_ptr )
  {
    if ( Group::findSuiteDiskScriptConfig(this, *(_DWORD *)(v4 + 32)) )
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4();
      }
      old_suite = this->suite_index_;
      v13 = *(_DWORD *)(v4 + 32);
      Group::fireWillRefreshEvent(this, v13);
      Group::stopHandleEvent(this);
      std::function<ForeachPolicy ()(Entity &)>::function<Group::setFlowSuiteOld(ScriptContext const&,SuiteLogContext,unsigned int)::{lambda(Entity &)#1},void,void>(
        (std::function<ForeachPolicy(Entity&)> *const)&v30,
        (Group::setFlowSuiteOld::<lambda(Entity&)>)v13);
      Group::foreachEntity(this, (std::function<ForeachPolicy(Entity&)> *)&v30);
      std::function<ForeachPolicy ()(Entity &)>::~function((std::function<ForeachPolicy(Entity&)> *const)&v30);
      common::milog::MiLogStream::create(
        &v30,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/group/group.cpp",
        "setFlowSuiteOld",
        2278);
      v14 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
              &v30,
              (const char (*)[39])"delay_create_monster_timer_map_ size: ");
      val = std::unordered_map<unsigned int,std::shared_ptr<SceneTimer>>::size(&this->delay_create_monster_timer_map_);
      v15 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v14, &val);
      v16 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v15, (const char (*)[8])" group:");
      operator<<(v16, this);
      common::milog::MiLogStream::~MiLogStream(&v30);
      std::unordered_map<unsigned int,std::shared_ptr<SceneTimer>>::clear(&this->delay_create_monster_timer_map_);
      ChallengeComp::clear(&this->challenge_comp_, NONE);
      MonsterTideComp::clear(&this->monster_tide_comp_);
      PoolMonsterTideComp::clear(&this->pool_monster_tide_comp_);
      Group::restartHandleEvent(this);
      if ( Group::initFlowGroup(this, group_script_config_ptr, *(_DWORD *)(v4 + 32)) )
      {
        common::milog::MiLogStream::create(
          &v30,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/group/group.cpp",
          "setFlowSuiteOld",
          2287);
        v17 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
                &v30,
                (const char (*)[34])"initFlowGroup fails, suite_index:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(v4 + 32));
        common::milog::MiLogStream::~MiLogStream(&v30);
        v8 = -1;
      }
      else
      {
        EventUtil::createEvent((std::shared_ptr<Event> *)(v4 + 48), 32);
        if ( std::operator!=<Event>((const std::shared_ptr<Event> *)(v4 + 48), 0LL) )
        {
          v18 = *(_DWORD *)(v4 + 32);
          v19 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 48));
          p_param1 = &v19->param1;
          if ( *(_BYTE *)(((unsigned __int64)p_param1 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)p_param1 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_param1 >> 3) + 0x7FFF8000) )
          {
            __asan_report_store4(p_param1);
          }
          v19->param1 = v18;
          Group::handleEvent(this, (EventPtr *)(v4 + 48));
        }
        common::milog::MiLogStream::create(
          &v30,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/group/group.cpp",
          "setFlowSuiteOld",
          2297);
        v21 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
                &v30,
                (const char (*)[40])"[GROUP] flow group refresh suite_index:");
        v22 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v21,
                (const unsigned int *)(v4 + 32));
        v23 = common::milog::MiLogStream::operator<<<char [3],(char *[3])0>(v22, (const char (*)[3])" @");
        operator<<(v23, this);
        common::milog::MiLogStream::~MiLogStream(&v30);
        Group::notifyClientSuite(this);
        Group::writeSuiteChangeLog(this, *(SuiteLogContext *)(v4 + 80), old_suite);
        v8 = 0;
        std::shared_ptr<Event>::~shared_ptr((std::shared_ptr<Event> *const)(v4 + 48));
      }
    }
    else
    {
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 48));
      v9 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
             (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 48),
             "setFlowSuite, not found suite disk:");
      v10 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v9, *(_DWORD *)(v4 + 32));
      v11 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v10, ", ");
      if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      vptr_DescribalBase = (void (__fastcall **)(common::milog::MiLogStream *, Group *const))this->_vptr_DescribalBase;
      if ( *(_BYTE *)(((unsigned __int64)this->_vptr_DescribalBase >> 3) + 0x7FFF8000) )
        vptr_DescribalBase = (void (__fastcall **)(common::milog::MiLogStream *, Group *const))__asan_report_load8();
      (*vptr_DescribalBase)(&v30, this);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v11, (const std::string *)&v30);
      std::string::~string(&v30);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        (std::string *)(v4 + 144),
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 48));
      common::milog::MiLogStream::create(
        &v30,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/group/group.cpp",
        "setFlowSuiteOld",
        2260);
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v30, (const std::string *)(v4 + 144));
      common::milog::MiLogStream::~MiLogStream(&v30);
      CustomException::CustomException((CustomException *const)(v4 + 208), (const std::string *)(v4 + 144));
      ScriptLib::notifyServerErrorLog(
        context,
        &context->file_path,
        &context->func_name,
        (const std::exception *)(v4 + 208));
      v8 = -1;
      CustomException::~CustomException((CustomException *const)(v4 + 208));
      std::string::~string((void *)(v4 + 144));
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 48));
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v30,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "setFlowSuiteOld",
      2251);
    v7 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
           &v30,
           (const char (*)[31])"getScriptConfig failed, group:");
    operator<<(v7, this);
    common::milog::MiLogStream::~MiLogStream(&v30);
    v8 = -1;
  }
  result = v8;
  if ( v31 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 2272: range 0000000015FC316C-0000000015FC31F8
ForeachPolicy __cdecl Group::setFlowSuiteOld(ScriptContext const&,SuiteLogContext,unsigned int)::{lambda(Entity &)#1}::operator()(
        const Group::setFlowSuiteOld::<lambda(Entity&)> *const __closure,
        Entity *entity)
{
  unsigned __int64 v2; // rax
  void (__fastcall *v3)(Entity *, VisionContext *); // rbx
  VisionContext v5; // [rsp+14h] [rbp-1Ch] BYREF

  if ( *(_BYTE *)(((unsigned __int64)entity >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  v2 = (unsigned __int64)(entity->_vptr_DescribalBase + 16);
  if ( *(_BYTE *)((v2 >> 3) + 0x7FFF8000) )
    v2 = __asan_report_load8();
  v3 = *(void (__fastcall **)(Entity *, VisionContext *))v2;
  VisionContext::VisionContext(&v5, VISION_REFRESH);
  v3(entity, &v5);
  return 0;
};

// Line 2308: range 0000000015FC3B4A-0000000015FC4204
__int64 __fastcall Group::setSuite(
        Group *const this,
        const ScriptContext *context,
        uint32_t suite_index,
        bool keep_chest_record,
        SuiteLogContext log_context)
{
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v8; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v9; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v10; // r14
  void (__fastcall **vptr_DescribalBase)(std::string *, Group *const); // rax
  unsigned int v12; // r14d
  int32_t v13; // r14d
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rdx
  int32_t *p_param1; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  __int64 result; // rax
  uint32_t old_suite; // [rsp+24h] [rbp-17Ch]
  std::string v; // [rsp+30h] [rbp-170h] BYREF
  char v25[336]; // [rsp+50h] [rbp-150h] BYREF

  v5 = (unsigned __int64)v25;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_3(288LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "5 32 4 16 suite_index:2307 48 16 14 event_ptr:2330 80 28 16 log_context:2307 144 32 12 err_msg:2"
                        "314 208 40 6 e:2317";
  *(_QWORD *)(v5 + 16) = Group::setSuite;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = 61956;
  v7[536862722] = 62194;
  v7[536862723] = -219020288;
  v7[536862724] = 62194;
  v7[536862725] = -219021312;
  v7[536862726] = 62194;
  v7[536862727] = -218103808;
  v7[536862728] = -202116109;
  *(SuiteLogContext *)(v5 + 80) = log_context;
  *(_DWORD *)(v5 + 32) = suite_index;
  if ( Group::findSuiteScriptConfig(this, *(_DWORD *)(v5 + 32)) )
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    old_suite = this->suite_index_;
    Group::fireWillRefreshEvent(this, *(_DWORD *)(v5 + 32));
    Group::stopHandleEvent(this);
    Group::cleanSuite(this, keep_chest_record, *(_DWORD *)(v5 + 32));
    Group::restartHandleEvent(this);
    Group::createSuite(this, *(_DWORD *)(v5 + 32));
    EventUtil::createEvent((std::shared_ptr<Event> *)(v5 + 48), 32);
    if ( std::operator!=<Event>((const std::shared_ptr<Event> *)(v5 + 48), 0LL) )
    {
      v13 = *(_DWORD *)(v5 + 32);
      v14 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 48));
      p_param1 = &v14->param1;
      if ( *(_BYTE *)(((unsigned __int64)p_param1 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)p_param1 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_param1 >> 3) + 0x7FFF8000) )
      {
        __asan_report_store4(p_param1);
      }
      v14->param1 = v13;
      Group::handleEvent(this, (EventPtr *)(v5 + 48));
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&v,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/group/group.cpp",
      "setSuite",
      2337);
    v16 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
            (common::milog::MiLogStream *const)&v,
            (const char (*)[35])"[GROUP] group refresh suite_index:");
    v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, (const unsigned int *)(v5 + 32));
    v18 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
            v17,
            (const char (*)[21])" keep_chest_record: ");
    v19 = common::milog::MiLogStream::operator<<(v18, keep_chest_record);
    operator<<(v19, this);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v);
    Group::notifyClientSuite(this);
    Group::writeSuiteChangeLog(this, *(SuiteLogContext *)(v5 + 80), old_suite);
    v12 = 0;
    std::shared_ptr<Event>::~shared_ptr((std::shared_ptr<Event> *const)(v5 + 48));
  }
  else
  {
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v5 + 48));
    v8 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
           (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v5 + 48),
           "setSuite, not found suite:");
    v9 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v8, *(_DWORD *)(v5 + 32));
    v10 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v9, ", ");
    if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    vptr_DescribalBase = (void (__fastcall **)(std::string *, Group *const))this->_vptr_DescribalBase;
    if ( *(_BYTE *)(((unsigned __int64)this->_vptr_DescribalBase >> 3) + 0x7FFF8000) )
      vptr_DescribalBase = (void (__fastcall **)(std::string *, Group *const))__asan_report_load8();
    (*vptr_DescribalBase)(&v, this);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v10, &v);
    std::string::~string(&v);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
      (std::string *)(v5 + 144),
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v5 + 48));
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&v,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/group/group.cpp",
      "setSuite",
      2315);
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
      (common::milog::MiLogStream *const)&v,
      (const std::string *)(v5 + 144));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v);
    CustomException::CustomException((CustomException *const)(v5 + 208), (const std::string *)(v5 + 144));
    ScriptLib::notifyServerErrorLog(
      context,
      &context->file_path,
      &context->func_name,
      (const std::exception *)(v5 + 208));
    v12 = -1;
    CustomException::~CustomException((CustomException *const)(v5 + 208));
    std::string::~string((void *)(v5 + 144));
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v5 + 48));
  }
  result = v12;
  if ( v25 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 2349: range 0000000015FC4596-0000000015FC4808
void __cdecl Group::cleanSuite(Group *const this, bool keep_chest_record, uint32_t target_suite_index)
{
  common::milog::MiLogStream *v3; // rbx
  common::milog::MiLogStream *v4; // rax
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  unsigned __int64 val; // [rsp+10h] [rbp-50h] BYREF
  std::function<ForeachPolicy(Entity&)> p_func; // [rsp+20h] [rbp-40h] BYREF
  Group::cleanSuite::<lambda(Entity&)> v15; // 0:esi.4,8:rdx.8

  if ( Group::getScriptConfig(this) )
  {
    v15.__this = this;
    v15.__target_suite_index = target_suite_index;
    std::function<ForeachPolicy ()(Entity &)>::function<Group::cleanSuite(bool,unsigned int)::{lambda(Entity &)#1},void,void>(
      &p_func,
      v15);
    Group::foreachEntity(this, &p_func);
    std::function<ForeachPolicy ()(Entity &)>::~function(&p_func);
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&p_func,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/group/group.cpp",
      "cleanSuite",
      2386);
    v3 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
           (common::milog::MiLogStream *const)&p_func,
           (const char (*)[39])"delay_create_monster_timer_map_ size: ");
    val = std::unordered_map<unsigned int,std::shared_ptr<SceneTimer>>::size(&this->delay_create_monster_timer_map_);
    v4 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v3, &val);
    v5 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v4, (const char (*)[12])" group_id: ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, &this->group_id_);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&p_func);
    std::unordered_map<unsigned int,std::shared_ptr<SceneTimer>>::clear(&this->delay_create_monster_timer_map_);
    ChallengeComp::clear(&this->challenge_comp_, NONE);
    MonsterTideComp::clear(&this->monster_tide_comp_);
    PoolMonsterTideComp::clear(&this->pool_monster_tide_comp_);
    Group::cleanBin(this, keep_chest_record);
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&p_func,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/group/group.cpp",
      "cleanSuite",
      2393);
    v6 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
           (common::milog::MiLogStream *const)&p_func,
           (const char (*)[11])"group_id: ");
    v7 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, &this->group_id_);
    v8 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(v7, (const char (*)[21])" keep_chest_record: ");
    v9 = common::milog::MiLogStream::operator<<(v8, keep_chest_record);
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v9, (const char (*)[7])" clear");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&p_func);
  }
};

// Line 2357: range 0000000015FC4206-0000000015FC4594
ForeachPolicy __cdecl Group::cleanSuite(bool,unsigned int)::{lambda(Entity &)#1}::operator()(
        const Group::cleanSuite::<lambda(Entity&)> *const __closure,
        Entity *entity)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  Group *this; // r14
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  uint32_t ConfigId; // ecx
  Gadget *v8; // rax
  Group *v10; // r14
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  uint32_t v12; // ecx
  Gadget *v13; // rax
  unsigned __int64 v15; // rax
  void (__fastcall *v16)(Entity *, VisionContext *); // r14
  ForeachPolicy result; // eax
  VisionContext v18; // [rsp+14h] [rbp-7Ch] BYREF
  char v19[112]; // [rsp+20h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 15 gadget_ptr:2359";
  *(_QWORD *)(v2 + 16) = Group::cleanSuite(bool,unsigned int)::{lambda(Entity &)#1}::operator();
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  toPtr<Gadget,Entity>((Entity *)(v2 + 32));
  if ( !std::operator!=<Gadget>((const std::shared_ptr<Gadget> *)(v2 + 32), 0LL) )
    goto LABEL_27;
  if ( *(_BYTE *)(((unsigned __int64)&__closure->__this >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  if ( Group::getIOType(__closure->__this) != GROUP_IO_TYPE_FLOW )
  {
    if ( *(_BYTE *)(((unsigned __int64)&__closure->__this >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    this = __closure->__this;
    v6 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    ConfigId = Entity::getConfigId((const Entity *const)v6);
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    if ( Group::isInitConfigId(this, PROT_ENTITY_GADGET, __closure->__target_suite_index, ConfigId) )
    {
      v8 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
      if ( !Gadget::revertInitState(v8, 1) )
        goto LABEL_32;
    }
LABEL_27:
    if ( *(_BYTE *)(((unsigned __int64)entity >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v15 = (unsigned __int64)(entity->_vptr_DescribalBase + 16);
    if ( *(_BYTE *)((v15 >> 3) + 0x7FFF8000) )
      v15 = __asan_report_load8();
    v16 = *(void (__fastcall **)(Entity *, VisionContext *))v15;
    VisionContext::VisionContext(&v18, VISION_REFRESH);
    v16(entity, &v18);
    goto LABEL_32;
  }
  if ( *(_BYTE *)(((unsigned __int64)&__closure->__this >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  v10 = __closure->__this;
  v11 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
  v12 = Entity::getConfigId((const Entity *const)v11);
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4();
  }
  if ( !Group::isDiskInitConfigId(v10, PROT_ENTITY_GADGET, __closure->__target_suite_index, v12) )
    goto LABEL_27;
  v13 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
  if ( Gadget::revertInitState(v13, 0) )
    goto LABEL_27;
LABEL_32:
  std::shared_ptr<Gadget>::~shared_ptr((std::shared_ptr<Gadget> *const)(v2 + 32));
  result = FOREACH_CONTINUE;
  if ( v19 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2398: range 0000000015FC480A-0000000015FC48DC
void __cdecl Group::createSuite(Group *const this, uint32_t target_suite_index)
{
  common::milog::MiLogStream v2; // [rsp+10h] [rbp-30h] BYREF

  if ( *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->suite_index_);
  }
  this->suite_index_ = target_suite_index;
  if ( Group::initEntity(this) )
  {
    common::milog::MiLogStream::create(
      &v2,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "createSuite",
      2402);
    common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(&v2, (const char (*)[17])"initEntity error");
    common::milog::MiLogStream::~MiLogStream(&v2);
  }
};

// Line 2408: range 0000000015FC48DE-0000000015FC4964
bool __cdecl Group::isInitConfigId(
        Group *const this,
        proto::ProtEntityType entity_type,
        uint32_t suite_index,
        uint32_t config_id)
{
  const GroupScriptConfig *group_script_config_ptr; // [rsp+28h] [rbp-8h]

  group_script_config_ptr = Group::getScriptConfig(this);
  if ( !group_script_config_ptr )
    return 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->group_id_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->group_id_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4();
  }
  return GroupScriptConfig::isInitConfigId(
           group_script_config_ptr,
           entity_type,
           suite_index,
           config_id,
           this->group_id_);
};

// Line 2418: range 0000000015FC4966-0000000015FC49EC
bool __cdecl Group::isDiskInitConfigId(
        const Group *const this,
        proto::ProtEntityType entity_type,
        uint32_t suite_index,
        uint32_t config_id)
{
  const GroupScriptConfig *group_script_config_ptr; // [rsp+28h] [rbp-8h]

  group_script_config_ptr = Group::getScriptConfig(this);
  if ( !group_script_config_ptr )
    return 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->group_id_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->group_id_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4();
  }
  return GroupScriptConfig::isDiskInitConfigId(
           group_script_config_ptr,
           entity_type,
           suite_index,
           config_id,
           this->group_id_);
};

// Line 2428: range 0000000015FC4B1E-0000000015FC4B7A
void __cdecl Group::refreshMonsterHp(Group *const this)
{
  Group::refreshMonsterHp::<lambda(Entity&)> v1; // si
  std::function<ForeachPolicy(Entity&)> p_func; // [rsp+20h] [rbp-30h] BYREF

  std::function<ForeachPolicy ()(Entity &)>::function<Group::refreshMonsterHp(void)::{lambda(Entity &)#1},void,void>(
    &p_func,
    v1);
  Group::foreachEntity(this, &p_func);
  std::function<ForeachPolicy ()(Entity &)>::~function(&p_func);
};

// Line 2429: range 0000000015FC49EE-0000000015FC4B1D
ForeachPolicy __cdecl Group::refreshMonsterHp(void)::{lambda(Entity &)#1}::operator()(
        const Group::refreshMonsterHp::<lambda(Entity&)> *const __closure,
        Entity *entity)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  ForeachPolicy result; // eax
  char v7[112]; // [rsp+10h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v7;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 16 monster_ptr:2431";
  *(_QWORD *)(v2 + 16) = Group::refreshMonsterHp(void)::{lambda(Entity &)#1}::operator();
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  toPtr<Monster,Entity>((Entity *)(v2 + 32));
  if ( std::operator!=<Monster>((const std::shared_ptr<Monster> *)(v2 + 32), 0LL) )
  {
    v5 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    Creature::setCurHpFull(v5, 1);
  }
  std::shared_ptr<Monster>::~shared_ptr((std::shared_ptr<Monster> *const)(v2 + 32));
  result = FOREACH_CONTINUE;
  if ( v7 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2440: range 0000000015FC4B7C-0000000015FC5117
int32_t __cdecl Group::refreshDeletedMonster(Group *const this)
{
  int32_t v1; // r14d
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  common::milog::MiLogStream *v5; // rax
  std::_Rb_tree_const_iterator<unsigned int>::reference v6; // rdx
  common::milog::MiLogStream *v7; // rax
  int v8; // r15d
  int32_t result; // eax
  std::set<unsigned int>::iterator __for_begin; // [rsp+10h] [rbp-390h] BYREF
  std::set<unsigned int>::iterator __for_end; // [rsp+18h] [rbp-388h] BYREF
  std::set<unsigned int> *monster_set; // [rsp+20h] [rbp-380h]
  std::set<unsigned int> *__for_range; // [rsp+28h] [rbp-378h]
  common::milog::MiLogStream v14; // [rsp+30h] [rbp-370h] BYREF
  char v15[848]; // [rsp+50h] [rbp-350h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(800LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 32 4 14 config_id:2450 48 16 14 scene_ptr:2442 80 16 21 owner_player_ptr:2447 112 16 16 monste"
                        "r_ptr:2457 144 520 17 entity_param:2456";
  *(_QWORD *)(v2 + 16) = Group::refreshDeletedMonster;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61956;
  v4[536862722] = 62194;
  v4[536862723] = 62194;
  v4[536862724] = 62194;
  v4[536862740] = -218103808;
  v4[536862741] = -202116109;
  v4[536862742] = -202116109;
  v4[536862743] = -202116109;
  v4[536862744] = -202116109;
  common::milog::MiLogStream::create(
    &v14,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/group/group.cpp",
    "refreshDeletedMonster",
    2441);
  v5 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
         &v14,
         (const char (*)[42])"[MONSTER]:refreshDeletedMonster,group_id:");
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, &this->group_id_);
  common::milog::MiLogStream::~MiLogStream(&v14);
  Group::getScene((const Group *const)(v2 + 48));
  if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v2 + 48)) )
  {
    v1 = -1;
  }
  else
  {
    std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 48));
    Scene::getOwnPlayer((const Scene *const)(v2 + 80));
    *(_DWORD *)(v2 + 32) = 2;
    monster_set = std::map<proto::ProtEntityType,std::set<unsigned int>>::operator[](
                    &this->deleted_entity_record_map_,
                    (std::map<proto::ProtEntityType,std::set<unsigned int>>::key_type *)(v2 + 32));
    __for_range = monster_set;
    __for_begin._M_node = std::set<unsigned int>::begin(monster_set)._M_node;
    __for_end._M_node = std::set<unsigned int>::end(monster_set)._M_node;
    while ( 1 )
    {
      if ( !std::operator!=(&__for_begin, &__for_end) )
        goto LABEL_16;
      v6 = std::_Rb_tree_const_iterator<unsigned int>::operator*(&__for_begin);
      if ( *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v6 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4();
      }
      *(_DWORD *)(v2 + 32) = *v6;
      if ( !(unsigned __int8)Group::isOneoffMonsterDead(this, *(_DWORD *)(v2 + 32)) )
        break;
      std::_Rb_tree_const_iterator<unsigned int>::operator++(&__for_begin);
    }
    Group::genGroupEntityParam((GroupEntityParam *)(v2 + 144), this, *(_DWORD *)(v2 + 32));
    Group::createMonster((Group *const)(v2 + 112), (const GroupEntityParam *)this);
    if ( std::operator==<Monster>((const std::shared_ptr<Monster> *)(v2 + 112), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v14,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/group/group.cpp",
        "refreshDeletedMonster",
        2460);
      v7 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
             &v14,
             (const char (*)[32])"createMonster fails, config_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v2 + 32));
      common::milog::MiLogStream::~MiLogStream(&v14);
      v1 = -1;
      v8 = 0;
    }
    else
    {
      std::set<unsigned int>::erase(monster_set, (const std::set<unsigned int>::key_type *)(v2 + 32));
      v8 = 1;
    }
    std::shared_ptr<Monster>::~shared_ptr((std::shared_ptr<Monster> *const)(v2 + 112));
    GroupEntityParam::~GroupEntityParam((GroupEntityParam *const)(v2 + 144));
    if ( v8 )
LABEL_16:
      v1 = 0;
    std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v2 + 80));
  }
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v2 + 48));
  result = v1;
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8050) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8058) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8060) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8060) = -168430091;
  }
  return result;
};

// Line 2470: range 0000000015FC5118-0000000015FC59ED
void __cdecl Group::refreshAllMonsterInGroup(Group *const this)
{
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // rbx
  common::milog::MiLogStream *v4; // rax
  common::milog::MiLogStream *v5; // rdx
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  char v10; // r14
  char v11; // r15
  common::milog::MiLogStream *v12; // rax
  Player *v13; // rax
  PlayerSceneComp *SceneComp; // r14
  Entity *v15; // rax
  std::unordered_map<unsigned int,MonsterScriptConfig>::const_iterator __for_begin; // [rsp+10h] [rbp-3B0h] BYREF
  std::unordered_map<unsigned int,MonsterScriptConfig>::const_iterator __for_end; // [rsp+18h] [rbp-3A8h] BYREF
  const GroupScriptConfig *group_script_config_ptr; // [rsp+20h] [rbp-3A0h]
  const SuiteScriptConfig *suite_script_config_ptr; // [rsp+28h] [rbp-398h]
  const std::unordered_map<unsigned int,MonsterScriptConfig> *__for_range; // [rsp+30h] [rbp-390h]
  const std::pair<unsigned int const,MonsterScriptConfig> *v21; // [rsp+38h] [rbp-388h]
  std::tuple_element<0,const std::pair<unsigned int const,MonsterScriptConfig> >::type *config_id; // [rsp+40h] [rbp-380h]
  std::tuple_element<1,const std::pair<unsigned int const,MonsterScriptConfig> >::type *monster_config; // [rsp+48h] [rbp-378h]
  common::milog::MiLogStream v24; // [rsp+50h] [rbp-370h] BYREF
  char v25[848]; // [rsp+70h] [rbp-350h] BYREF

  v1 = (unsigned __int64)v25;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_4(800LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "4 48 16 14 scene_ptr:2472 80 16 16 monster_ptr:2507 112 16 15 player_ptr:2513 144 520 17 entity_param:2506";
  *(_QWORD *)(v1 + 16) = Group::refreshAllMonsterInGroup;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = 61937;
  v3[536862722] = 62194;
  v3[536862723] = 62194;
  v3[536862724] = 62194;
  v3[536862740] = -218103808;
  v3[536862741] = -202116109;
  v3[536862742] = -202116109;
  v3[536862743] = -202116109;
  v3[536862744] = -202116109;
  common::milog::MiLogStream::create(
    &v24,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/group/group.cpp",
    "refreshAllMonsterInGroup",
    2471);
  v4 = common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
         &v24,
         (const char (*)[47])"[MONSTER]:refreshAllMonsterInGroup, group_id: ");
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v4, &this->group_id_);
  common::milog::MiLogStream::~MiLogStream(&v24);
  Group::getScene((const Group *const)(v1 + 48));
  if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v1 + 48), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v24,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "refreshAllMonsterInGroup",
      2475);
    v5 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(&v24, (const char (*)[18])"scene_ptr is null");
    operator<<(v5, this);
    common::milog::MiLogStream::~MiLogStream(&v24);
  }
  else
  {
    group_script_config_ptr = Group::getScriptConfig(this);
    if ( group_script_config_ptr )
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4();
      }
      suite_script_config_ptr = GroupScriptConfig::getSuiteConfig(group_script_config_ptr, this->suite_index_);
      if ( suite_script_config_ptr )
      {
        Group::refreshMonsterHp(this);
        Group::refreshDeletedMonster(this);
        __for_range = &group_script_config_ptr->monster_config_map;
        __for_begin._M_cur = std::unordered_map<unsigned int,MonsterScriptConfig>::begin(&group_script_config_ptr->monster_config_map)._M_cur;
        __for_end._M_cur = std::unordered_map<unsigned int,MonsterScriptConfig>::end(&group_script_config_ptr->monster_config_map)._M_cur;
        while ( std::__detail::operator!=<std::pair<unsigned int const,MonsterScriptConfig>,false>(
                  &__for_begin,
                  &__for_end) )
        {
          v21 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,MonsterScriptConfig>,false,false>::operator*(&__for_begin);
          config_id = std::get<0ul,unsigned int const,MonsterScriptConfig>(v21);
          monster_config = (std::tuple_element<1,const std::pair<unsigned int const,MonsterScriptConfig> >::type *)std::get<1ul,unsigned int const,MonsterScriptConfig>(v21);
          v10 = 0;
          if ( std::set<unsigned int>::count(&suite_script_config_ptr->monster_config_set, config_id) )
            goto LABEL_18;
          if ( *(_BYTE *)(((unsigned __int64)config_id >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)config_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)config_id >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4();
          }
          Group::findEntityByConfigId((Group *const)(v1 + 112), (uint32_t)this);
          v10 = 1;
          if ( std::operator!=<Entity>(0LL, (const std::shared_ptr<Entity> *)(v1 + 112)) )
LABEL_18:
            v11 = 1;
          else
            v11 = 0;
          if ( v10 )
            std::shared_ptr<Entity>::~shared_ptr((std::shared_ptr<Entity> *const)(v1 + 112));
          if ( !v11 )
          {
            if ( *(_BYTE *)(((unsigned __int64)config_id >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)config_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)config_id >> 3)
                                                                          + 0x7FFF8000) )
            {
              __asan_report_load4();
            }
            Group::genGroupEntityParam((GroupEntityParam *)(v1 + 144), this, *config_id);
            Group::createMonster((Group *const)(v1 + 80), (const GroupEntityParam *)this);
            if ( std::operator==<Monster>((const std::shared_ptr<Monster> *)(v1 + 80), 0LL) )
            {
              common::milog::MiLogStream::create(
                &v24,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/group/group.cpp",
                "refreshAllMonsterInGroup",
                2510);
              v12 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                      &v24,
                      (const char (*)[32])"createMonster fails, config_id:");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, config_id);
              common::milog::MiLogStream::~MiLogStream(&v24);
            }
            else
            {
              Group::getOwnerPlayer((const Group *const)(v1 + 112));
              if ( std::operator!=<Player>((const std::shared_ptr<Player> *)(v1 + 112), 0LL) )
              {
                v13 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 112));
                SceneComp = Player::getSceneComp(v13);
                v15 = (Entity *)std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 80));
                PlayerSceneComp::addDisconnectDestroyEntity(SceneComp, v15);
              }
              std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v1 + 112));
            }
            std::shared_ptr<Monster>::~shared_ptr((std::shared_ptr<Monster> *const)(v1 + 80));
            GroupEntityParam::~GroupEntityParam((GroupEntityParam *const)(v1 + 144));
          }
          std::__detail::_Node_const_iterator<std::pair<unsigned int const,MonsterScriptConfig>,false,false>::operator++(&__for_begin);
        }
      }
      else
      {
        common::milog::MiLogStream::create(
          &v24,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/group/group.cpp",
          "refreshAllMonsterInGroup",
          2488);
        v7 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
               &v24,
               (const char (*)[35])"getSuiteConfig fails, suite_index:");
        v8 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, &this->suite_index_);
        v9 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v8, (const char (*)[11])" group_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, &this->group_id_);
        common::milog::MiLogStream::~MiLogStream(&v24);
      }
    }
    else
    {
      common::milog::MiLogStream::create(
        &v24,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/group/group.cpp",
        "refreshAllMonsterInGroup",
        2482);
      v6 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
             &v24,
             (const char (*)[33])"getScriptConfig fails, group_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, &this->group_id_);
      common::milog::MiLogStream::~MiLogStream(&v24);
    }
  }
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v1 + 48));
  if ( v25 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8050) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8058) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8060) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8060) = -168430091;
  }
};

// Line 2523: range 0000000015FC59EE-0000000015FC6225
int32_t __cdecl Group::initFlowGroup(
        Group *const this,
        const GroupScriptConfig *group_script_config,
        uint32_t target_suite_index)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // rbx
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  uint32_t v8; // edx
  common::milog::MiLogStream *v9; // rdx
  int32_t v10; // r14d
  uint32_t flow_suite_index; // ecx
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  char v14; // cl
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  int32_t result; // eax
  uint32_t suite_index; // [rsp+2Ch] [rbp-174h]
  common::milog::MiLogStream v22; // [rsp+30h] [rbp-170h] BYREF
  char v23[336]; // [rsp+50h] [rbp-150h] BYREF

  v3 = (unsigned __int64)v23;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(288LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 1 15 is_expired:2552 64 160 19 script_context:2562";
  *(_QWORD *)(v3 + 16) = Group::initFlowGroup;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753551;
  v5[536862727] = -202116109;
  v5[536862728] = -202116109;
  common::milog::MiLogStream::create(
    &v22,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/group/group.cpp",
    "initFlowGroup",
    2524);
  v6 = common::milog::MiLogStream::operator<<<Group,(Group*)0>(&v22, this);
  v7 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(v6, (const char (*)[20])" bin suite_index_: ");
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, &this->suite_index_);
  common::milog::MiLogStream::~MiLogStream(&v22);
  v8 = std::vector<SightGroupScriptConfig>::size(&group_script_config->sight_group_config_vec);
  if ( Group::createSightGroups(this, v8) )
  {
    common::milog::MiLogStream::create(
      &v22,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/group/group.cpp",
      "initFlowGroup",
      2528);
    v9 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
           &v22,
           (const char (*)[24])"createSightGroups fails");
    operator<<(v9, this);
    common::milog::MiLogStream::~MiLogStream(&v22);
    v10 = -1;
  }
  else
  {
    if ( target_suite_index )
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_store4(&this->suite_index_);
      }
      this->suite_index_ = target_suite_index;
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&group_script_config->father_quest_id >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&group_script_config->father_quest_id >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4();
      }
      if ( group_script_config->father_quest_id )
      {
        if ( *(_BYTE *)(((unsigned __int64)&this->init_param_.flow_suite_index >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)this - 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->init_param_.flow_suite_index >> 3)
                                                              + 0x7FFF8000) )
        {
          __asan_report_load4();
        }
        if ( this->init_param_.flow_suite_index )
        {
          flow_suite_index = this->init_param_.flow_suite_index;
          if ( *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_store4(&this->suite_index_);
          }
          this->suite_index_ = flow_suite_index;
        }
      }
      if ( *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4();
      }
      if ( !this->suite_index_ )
      {
        if ( *(_BYTE *)(((unsigned __int64)&group_script_config->init_suite_index >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&group_script_config->init_suite_index >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4();
        }
        this->suite_index_ = group_script_config->init_suite_index;
      }
    }
    common::milog::MiLogStream::create(
      &v22,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/group/group.cpp",
      "initFlowGroup",
      2550);
    v12 = common::milog::MiLogStream::operator<<<Group,(Group*)0>(&v22, this);
    v13 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v12, (const char (*)[13])" flow suite:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, &this->suite_index_);
    common::milog::MiLogStream::~MiLogStream(&v22);
    *(_BYTE *)(v3 + 48) = 0;
    suite_index = Group::findInitSuiteIndex(this, (bool *)(v3 + 48));
    v14 = *(_BYTE *)(v3 + 48);
    if ( *(_BYTE *)(((unsigned __int64)&this->is_load_refresh_expire_ >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)this + 76) & 7) >= *(_BYTE *)(((unsigned __int64)&this->is_load_refresh_expire_ >> 3)
                                                        + 0x7FFF8000) )
    {
      __asan_report_store1(&this->is_load_refresh_expire_);
    }
    this->is_load_refresh_expire_ = v14;
    if ( suite_index )
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_store4(&this->suite_index_);
      }
      this->suite_index_ = suite_index;
    }
    common::milog::MiLogStream::create(
      &v22,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/group/group.cpp",
      "initFlowGroup",
      2560);
    v15 = common::milog::MiLogStream::operator<<<Group,(Group*)0>(&v22, this);
    v16 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
            v15,
            (const char (*)[23])" refreshed flow suite:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, &this->suite_index_);
    common::milog::MiLogStream::~MiLogStream(&v22);
    ScriptContext::ScriptContext((ScriptContext *const)(v3 + 64));
    if ( *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    if ( Group::goToFlowSuite(this, (const ScriptContext *)(v3 + 64), this->suite_index_, 1) )
    {
      common::milog::MiLogStream::create(
        &v22,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/group/group.cpp",
        "initFlowGroup",
        2565);
      v17 = common::milog::MiLogStream::operator<<<Group,(Group*)0>(&v22, this);
      v18 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
              v17,
              (const char (*)[35])" goToFlowSuite fails, suite_index:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, &this->suite_index_);
      common::milog::MiLogStream::~MiLogStream(&v22);
      v10 = -1;
    }
    else if ( ChallengeComp::init(&this->challenge_comp_) )
    {
      common::milog::MiLogStream::create(
        &v22,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/group/group.cpp",
        "initFlowGroup",
        2572);
      common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
        &v22,
        (const char (*)[26])"init challenge_comp fails");
      common::milog::MiLogStream::~MiLogStream(&v22);
      v10 = -1;
    }
    else
    {
      v10 = 0;
    }
    ScriptContext::~ScriptContext((ScriptContext *const)(v3 + 64));
  }
  result = v10;
  if ( v23 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF801C) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 2579: range 0000000015FC6226-0000000015FC66F6
int32_t __cdecl Group::init(Group *const this, GroupInitParam *init_param)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  GroupInitParam *inited; // rax
  common::milog::MiLogStream *v6; // rax
  int32_t result; // eax
  uint32_t v8; // eax
  char v9; // cl
  uint32_t suite_index; // [rsp+1Ch] [rbp-D4h]
  uint32_t old_suite; // [rsp+20h] [rbp-D0h]
  int32_t retcode; // [rsp+24h] [rbp-CCh]
  const GroupScriptConfig *group_script_config_ptr; // [rsp+28h] [rbp-C8h]
  common::milog::MiLogStream v14; // [rsp+30h] [rbp-C0h] BYREF
  char v15[160]; // [rsp+50h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 1 15 is_expired:2601 64 28 16 log_context:2616";
  *(_QWORD *)(v2 + 16) = Group::init;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = 0x4000000;
  v4[536862723] = -202116109;
  inited = std::move<GroupInitParam &>(init_param);
  GroupInitParam::operator=(&this->init_param_, inited);
  group_script_config_ptr = Group::getScriptConfig(this);
  if ( group_script_config_ptr )
  {
    if ( *(_BYTE *)(((unsigned __int64)group_script_config_ptr >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)group_script_config_ptr >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    if ( group_script_config_ptr->io_type == GROUP_IO_TYPE_FLOW )
    {
      result = Group::initFlowGroup(this, group_script_config_ptr, 0);
    }
    else
    {
      Group::refreshDeletedGatherInfo(this, group_script_config_ptr);
      v8 = std::vector<SightGroupScriptConfig>::size(&group_script_config_ptr->sight_group_config_vec);
      if ( Group::createSightGroups(this, v8) )
      {
        common::milog::MiLogStream::create(
          &v14,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/group/group.cpp",
          "init",
          2597);
        common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
          &v14,
          (const char (*)[24])"createSightGroups fails");
        common::milog::MiLogStream::~MiLogStream(&v14);
        result = -1;
      }
      else
      {
        *(_BYTE *)(v2 + 48) = 0;
        suite_index = Group::findInitSuiteIndex(this, (bool *)(v2 + 48));
        if ( *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4();
        }
        if ( suite_index != this->suite_index_ || *(_BYTE *)(v2 + 48) )
          Group::cleanBin(this, 0);
        v9 = *(_BYTE *)(v2 + 48);
        if ( *(_BYTE *)(((unsigned __int64)&this->is_load_refresh_expire_ >> 3) + 0x7FFF8000) != 0
          && (((unsigned __int8)this + 76) & 7) >= *(_BYTE *)(((unsigned __int64)&this->is_load_refresh_expire_ >> 3)
                                                            + 0x7FFF8000) )
        {
          __asan_report_store1(&this->is_load_refresh_expire_);
        }
        this->is_load_refresh_expire_ = v9;
        if ( *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4();
        }
        old_suite = this->suite_index_;
        this->suite_index_ = suite_index;
        if ( *(_BYTE *)(v2 + 48) )
        {
          *(_DWORD *)(v2 + 64) = 2;
          *(_DWORD *)(v2 + 68) = 0;
          *(_DWORD *)(v2 + 72) = 0;
          *(_DWORD *)(v2 + 76) = 0;
          *(_DWORD *)(v2 + 80) = 0;
          *(_DWORD *)(v2 + 84) = 0;
          *(_DWORD *)(v2 + 88) = 0;
          Group::writeSuiteChangeLog(this, *(SuiteLogContext *)(v2 + 64), old_suite);
        }
        retcode = Group::initEntity(this);
        Group::refreshGroupRefreshTimeMapInfo(this);
        result = retcode;
      }
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v14,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "init",
      2584);
    v6 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
           &v14,
           (const char (*)[34])"getScriptConfig fails, group_id: ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, &this->group_id_);
    common::milog::MiLogStream::~MiLogStream(&v14);
    result = -1;
  }
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2633: range 0000000015FC66F8-0000000015FC7C44
int32_t __cdecl Group::initEntity(Group *const this)
{
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // rbx
  common::milog::MiLogStream *v4; // rax
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  int32_t result; // eax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  const int *v12; // r8
  common::milog::MiLogStream *v13; // rax
  uint32_t group_id; // esi
  uint32_t v15; // ecx
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // r14
  std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  uint32_t v27; // esi
  uint32_t v28; // ecx
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rax
  common::milog::MiLogStream *v36; // rax
  common::milog::MiLogStream *v37; // rax
  common::milog::MiLogStream *v38; // rax
  common::milog::MiLogStream *v39; // rax
  common::milog::MiLogStream *v40; // r14
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v41; // rax
  common::milog::MiLogStream *v42; // rax
  common::milog::MiLogStream *v43; // rax
  std::map<unsigned int,proto::GroupMonsterBin>::iterator __for_begin_0; // [rsp+10h] [rbp-400h] BYREF
  std::map<unsigned int,proto::GroupMonsterBin>::iterator __for_end_0; // [rsp+18h] [rbp-3F8h] BYREF
  std::unordered_map<std::string,VariableScriptConfig>::const_iterator __for_begin; // [rsp+20h] [rbp-3F0h] BYREF
  std::unordered_map<std::string,VariableScriptConfig>::const_iterator __for_end; // [rsp+28h] [rbp-3E8h] BYREF
  const GroupScriptConfig *group_script_config_ptr; // [rsp+30h] [rbp-3E0h]
  const SuiteScriptConfig *suite_script_config_ptr; // [rsp+38h] [rbp-3D8h]
  const std::unordered_map<std::string,VariableScriptConfig> *__for_range; // [rsp+40h] [rbp-3D0h]
  std::map<unsigned int,proto::GroupMonsterBin> *__for_range_0; // [rsp+48h] [rbp-3C8h]
  std::map<unsigned int,proto::GroupGadgetBin> *__for_range_1; // [rsp+50h] [rbp-3C0h]
  const std::pair<unsigned int const,proto::GroupGadgetBin> *v53; // [rsp+58h] [rbp-3B8h]
  std::tuple_element<0,const std::pair<unsigned int const,proto::GroupGadgetBin> >::type *config_id_0; // [rsp+60h] [rbp-3B0h]
  std::tuple_element<1,const std::pair<unsigned int const,proto::GroupGadgetBin> >::type *gadget_bin; // [rsp+68h] [rbp-3A8h]
  const std::pair<unsigned int const,proto::GroupMonsterBin> *v56; // [rsp+70h] [rbp-3A0h]
  std::tuple_element<0,const std::pair<unsigned int const,proto::GroupMonsterBin> >::type *config_id; // [rsp+78h] [rbp-398h]
  std::tuple_element<1,const std::pair<unsigned int const,proto::GroupMonsterBin> >::type *monster_bin; // [rsp+80h] [rbp-390h]
  const std::pair<const std::string,VariableScriptConfig> *v59; // [rsp+88h] [rbp-388h]
  std::tuple_element<0,const std::pair<const std::string,VariableScriptConfig> >::type *name; // [rsp+90h] [rbp-380h]
  std::tuple_element<1,const std::pair<const std::string,VariableScriptConfig> >::type *variable_config; // [rsp+98h] [rbp-378h]
  common::milog::MiLogStream v62; // [rsp+A0h] [rbp-370h] BYREF
  common::milog::MiLogStream v63; // [rsp+C0h] [rbp-350h] BYREF
  common::milog::MiLogStream v64; // [rsp+E0h] [rbp-330h] BYREF
  char v65[784]; // [rsp+100h] [rbp-310h] BYREF

  v1 = (unsigned __int64)v65;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_4(736LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 16 15 gadget_ptr:2729 80 520 17 entity_param:2728";
  *(_QWORD *)(v1 + 16) = Group::initEntity;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = 61937;
  v3[536862722] = 62194;
  v3[536862738] = -218103808;
  v3[536862739] = -202116109;
  v3[536862740] = -202116109;
  v3[536862741] = -202116109;
  v3[536862742] = -202116109;
  common::milog::MiLogStream::create(
    &v64,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/group/group.cpp",
    "initEntity",
    2634);
  v4 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
         &v64,
         (const char (*)[31])"[GROUP]:initEntity, group_id: ");
  v5 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v4, &this->group_id_);
  v6 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v5, (const char (*)[17])" ,suite_index_: ");
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, &this->suite_index_);
  common::milog::MiLogStream::~MiLogStream(&v64);
  group_script_config_ptr = Group::getScriptConfig(this);
  if ( group_script_config_ptr )
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    suite_script_config_ptr = GroupScriptConfig::getSuiteConfig(group_script_config_ptr, this->suite_index_);
    if ( suite_script_config_ptr )
    {
      __for_range = &group_script_config_ptr->variable_map;
      __for_begin._M_cur = std::unordered_map<std::string,VariableScriptConfig>::begin(&group_script_config_ptr->variable_map)._M_cur;
      __for_end._M_cur = std::unordered_map<std::string,VariableScriptConfig>::end(&group_script_config_ptr->variable_map)._M_cur;
      while ( std::__detail::operator!=<std::pair<std::string const,VariableScriptConfig>,true>(
                &__for_begin,
                &__for_end) )
      {
        v59 = std::__detail::_Node_const_iterator<std::pair<std::string const,VariableScriptConfig>,false,true>::operator*(&__for_begin);
        name = std::get<0ul,std::string const,VariableScriptConfig>(v59);
        variable_config = (std::tuple_element<1,const std::pair<const std::string,VariableScriptConfig> >::type *)std::get<1ul,std::string const,VariableScriptConfig>(v59);
        if ( !common::tools::MiscUtils::isContains<std::unordered_map<std::string,int>,std::string>(
                &this->variable_map_,
                name) )
        {
          std::unordered_map<std::string,int>::emplace<std::string const&,int const&>(
            &this->variable_map_,
            name,
            &variable_config->init_value,
            (const std::string *)&this->variable_map_,
            v12);
          if ( *(_BYTE *)(((unsigned __int64)&variable_config->init_value >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&variable_config->init_value >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4();
          }
          Group::onVariableValueChanged(this, name, variable_config->init_value);
        }
        std::__detail::_Node_const_iterator<std::pair<std::string const,VariableScriptConfig>,false,true>::operator++(&__for_begin);
      }
      if ( Group::createSuiteInitConfigEntity(this, suite_script_config_ptr) )
      {
        common::milog::MiLogStream::create(
          &v64,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/group/group.cpp",
          "initEntity",
          2663);
        v13 = common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(
                &v64,
                (const char (*)[46])"createSuiteInitConfigEntity fails, group_id: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, &this->group_id_);
        common::milog::MiLogStream::~MiLogStream(&v64);
        result = -1;
      }
      else
      {
        __for_range_0 = &this->monster_bin_map_;
        __for_begin_0._M_node = std::map<unsigned int,proto::GroupMonsterBin>::begin(&this->monster_bin_map_)._M_node;
        __for_end_0._M_node = std::map<unsigned int,proto::GroupMonsterBin>::end(__for_range_0)._M_node;
        while ( std::operator!=(&__for_begin_0, &__for_end_0) )
        {
          v56 = std::_Rb_tree_iterator<std::pair<unsigned int const,proto::GroupMonsterBin>>::operator*(&__for_begin_0);
          config_id = std::get<0ul,unsigned int const,proto::GroupMonsterBin>(v56);
          monster_bin = (std::tuple_element<1,const std::pair<unsigned int const,proto::GroupMonsterBin> >::type *)std::get<1ul,unsigned int const,proto::GroupMonsterBin>(v56);
          if ( *(_BYTE *)(((unsigned __int64)&this->group_id_ >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&this->group_id_ >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4();
          }
          group_id = this->group_id_;
          if ( *(_BYTE *)(((unsigned __int64)config_id >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)config_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)config_id >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4();
          }
          v15 = *config_id;
          if ( *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4();
          }
          if ( !GroupScriptConfig::isInitConfigId(
                  group_script_config_ptr,
                  PROT_ENTITY_MONSTER,
                  this->suite_index_,
                  v15,
                  group_id) )
          {
            if ( *(_BYTE *)(((unsigned __int64)config_id >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)config_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)config_id >> 3)
                                                                          + 0x7FFF8000) )
            {
              __asan_report_load4();
            }
            if ( !(unsigned __int8)Group::isOneoffMonsterDead(this, *config_id) )
            {
              if ( *(_BYTE *)(((unsigned __int64)config_id >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)config_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)config_id >> 3)
                                                                            + 0x7FFF8000) )
              {
                __asan_report_load4();
              }
              if ( GroupScriptConfig::findMonsterConfig(group_script_config_ptr, *config_id) )
              {
                __for_end._M_cur = (std::__detail::_Node_iterator_base<std::pair<const std::string,VariableScriptConfig>,true>::__node_type *)std::unordered_map<unsigned int,unsigned int>::end(&this->config_id_2_eid_map_)._M_cur;
                __for_begin._M_cur = (std::__detail::_Node_iterator_base<std::pair<const std::string,VariableScriptConfig>,true>::__node_type *)std::unordered_map<unsigned int,unsigned int>::find(&this->config_id_2_eid_map_, config_id)._M_cur;
                if ( !std::__detail::operator!=<std::pair<unsigned int const,unsigned int>,false>(
                        (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false> *)&__for_begin,
                        (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false> *)&__for_end) )
                {
                  if ( *(_BYTE *)(((unsigned __int64)config_id >> 3) + 0x7FFF8000) != 0
                    && (char)(((unsigned __int8)config_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)config_id >> 3)
                                                                                + 0x7FFF8000) )
                  {
                    __asan_report_load4();
                  }
                  Group::genGroupEntityParam((GroupEntityParam *)(v1 + 80), this, *config_id);
                  Group::createMonster((Group *const)(v1 + 48), (const GroupEntityParam *)this);
                  if ( std::operator==<Monster>((const std::shared_ptr<Monster> *)(v1 + 48), 0LL) )
                  {
                    common::milog::MiLogStream::create(
                      &v64,
                      &common::milog::MiLogDefault::default_log_obj_,
                      3u,
                      "./src/group/group.cpp",
                      "initEntity",
                      2695);
                    v22 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                            &v64,
                            (const char (*)[32])"createMonster fails, config_id:");
                    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v22, config_id);
                  }
                  else
                  {
                    common::milog::MiLogStream::create(
                      &v64,
                      &common::milog::MiLogDefault::default_log_obj_,
                      1u,
                      "./src/group/group.cpp",
                      "initEntity",
                      2698);
                    v23 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                            &v64,
                            (const char (*)[31])"[GROUP] create dynamic monster");
                    v24 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 48));
                    v25 = common::milog::MiLogStream::operator<<<Monster,(Monster*)0>(v23, v24);
                    v26 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                            v25,
                            (const char (*)[12])", group_id:");
                    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v26, &this->group_id_);
                  }
                  common::milog::MiLogStream::~MiLogStream(&v64);
                  std::shared_ptr<Monster>::~shared_ptr((std::shared_ptr<Monster> *const)(v1 + 48));
                  GroupEntityParam::~GroupEntityParam((GroupEntityParam *const)(v1 + 80));
                }
              }
              else
              {
                if ( *(_BYTE *)(((unsigned __int64)config_id >> 3) + 0x7FFF8000) != 0
                  && (char)(((unsigned __int8)config_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)config_id >> 3)
                                                                              + 0x7FFF8000) )
                {
                  __asan_report_load4();
                }
                if ( GroupScriptConfig::isGarbageConfigId(group_script_config_ptr, *config_id) )
                {
                  common::milog::MiLogStream::create(
                    &v63,
                    &common::milog::MiLogDefault::default_log_obj_,
                    1u,
                    "./src/group/group.cpp",
                    "initEntity",
                    2679);
                  v16 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
                          &v63,
                          (const char (*)[37])"[GROUP] monster garbage, group_id : ");
                  v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, &this->group_id_);
                  v18 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                          v17,
                          (const char (*)[14])" ,config_id: ");
                  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, config_id);
                  common::milog::MiLogStream::~MiLogStream(&v63);
                }
                else
                {
                  common::milog::MiLogStream::create(
                    &v64,
                    &common::milog::MiLogDefault::default_log_obj_,
                    3u,
                    "./src/group/group.cpp",
                    "initEntity",
                    2683);
                  v19 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
                          &v64,
                          (const char (*)[45])"[GROUP] findMonsterConfig failed, group_id: ");
                  v20 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, &this->group_id_);
                  v21 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                          v20,
                          (const char (*)[14])" ,config_id: ");
                  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v21, config_id);
                  common::milog::MiLogStream::~MiLogStream(&v64);
                }
              }
            }
          }
          std::_Rb_tree_iterator<std::pair<unsigned int const,proto::GroupMonsterBin>>::operator++(&__for_begin_0);
        }
        std::map<unsigned int,proto::GroupMonsterBin>::clear(&this->monster_bin_map_);
        __for_range_1 = &this->gadget_bin_map_;
        __for_begin_0._M_node = std::map<unsigned int,proto::GroupGadgetBin>::begin(&this->gadget_bin_map_)._M_node;
        __for_end_0._M_node = std::map<unsigned int,proto::GroupGadgetBin>::end(__for_range_1)._M_node;
        while ( std::operator!=(
                  (const std::_Rb_tree_iterator<std::pair<unsigned int const,proto::GroupGadgetBin> >::_Self *)&__for_begin_0,
                  (const std::_Rb_tree_iterator<std::pair<unsigned int const,proto::GroupGadgetBin> >::_Self *)&__for_end_0) )
        {
          v53 = std::_Rb_tree_iterator<std::pair<unsigned int const,proto::GroupGadgetBin>>::operator*((const std::_Rb_tree_iterator<std::pair<unsigned int const,proto::GroupGadgetBin> > *const)&__for_begin_0);
          config_id_0 = std::get<0ul,unsigned int const,proto::GroupGadgetBin>(v53);
          gadget_bin = (std::tuple_element<1,const std::pair<unsigned int const,proto::GroupGadgetBin> >::type *)std::get<1ul,unsigned int const,proto::GroupGadgetBin>(v53);
          if ( *(_BYTE *)(((unsigned __int64)&this->group_id_ >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&this->group_id_ >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4();
          }
          v27 = this->group_id_;
          if ( *(_BYTE *)(((unsigned __int64)config_id_0 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)config_id_0 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)config_id_0 >> 3)
                                                                          + 0x7FFF8000) )
          {
            __asan_report_load4();
          }
          v28 = *config_id_0;
          if ( *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4();
          }
          if ( !GroupScriptConfig::isInitConfigId(
                  group_script_config_ptr,
                  PROT_ENTITY_GADGET,
                  this->suite_index_,
                  v28,
                  v27) )
          {
            if ( *(_BYTE *)(((unsigned __int64)config_id_0 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)config_id_0 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)config_id_0 >> 3)
                                                                            + 0x7FFF8000) )
            {
              __asan_report_load4();
            }
            if ( !(unsigned __int8)Group::isOneoffGadgetDead(this, *config_id_0) )
            {
              if ( *(_BYTE *)(((unsigned __int64)config_id_0 >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)config_id_0 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)config_id_0 >> 3)
                                                                              + 0x7FFF8000) )
              {
                __asan_report_load4();
              }
              if ( GroupScriptConfig::findGadgetConfig(group_script_config_ptr, *config_id_0) )
              {
                __for_end._M_cur = (std::__detail::_Node_iterator_base<std::pair<const std::string,VariableScriptConfig>,true>::__node_type *)std::unordered_map<unsigned int,unsigned int>::end(&this->config_id_2_eid_map_)._M_cur;
                __for_begin._M_cur = (std::__detail::_Node_iterator_base<std::pair<const std::string,VariableScriptConfig>,true>::__node_type *)std::unordered_map<unsigned int,unsigned int>::find(&this->config_id_2_eid_map_, config_id_0)._M_cur;
                if ( std::__detail::operator!=<std::pair<unsigned int const,unsigned int>,false>(
                       (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false> *)&__for_begin,
                       (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false> *)&__for_end) )
                {
                  common::milog::MiLogStream::create(
                    &v64,
                    &common::milog::MiLogDefault::default_log_obj_,
                    1u,
                    "./src/group/group.cpp",
                    "initEntity",
                    2723);
                  v35 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                          &v64,
                          (const char (*)[11])"group_id: ");
                  v36 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v35, &this->group_id_);
                  v37 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(
                          v36,
                          (const char (*)[13])" config_id: ");
                  v38 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v37, config_id_0);
                  common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v38, (const char (*)[12])off_25AB9340);
                  common::milog::MiLogStream::~MiLogStream(&v64);
                }
                else
                {
                  if ( *(_BYTE *)(((unsigned __int64)config_id_0 >> 3) + 0x7FFF8000) != 0
                    && (char)(((unsigned __int8)config_id_0 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)config_id_0 >> 3)
                                                                                  + 0x7FFF8000) )
                  {
                    __asan_report_load4();
                  }
                  Group::genGroupEntityParam((GroupEntityParam *)(v1 + 80), this, *config_id_0);
                  Group::createGadget((Group *const)(v1 + 48), (const GroupEntityParam *)this);
                  if ( std::operator==<Gadget>((const std::shared_ptr<Gadget> *)(v1 + 48), 0LL) )
                  {
                    common::milog::MiLogStream::create(
                      &v64,
                      &common::milog::MiLogDefault::default_log_obj_,
                      3u,
                      "./src/group/group.cpp",
                      "initEntity",
                      2732);
                    v39 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                            &v64,
                            (const char (*)[31])"createGadget fails, config_id:");
                    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v39, config_id_0);
                  }
                  else
                  {
                    common::milog::MiLogStream::create(
                      &v64,
                      &common::milog::MiLogDefault::default_log_obj_,
                      1u,
                      "./src/group/group.cpp",
                      "initEntity",
                      2735);
                    v40 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
                            &v64,
                            (const char (*)[30])"[GROUP] create dynamic gadget");
                    v41 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 48));
                    v42 = common::milog::MiLogStream::operator<<<Gadget,(Gadget*)0>(v40, v41);
                    v43 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                            v42,
                            (const char (*)[12])", group_id:");
                    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v43, &this->group_id_);
                  }
                  common::milog::MiLogStream::~MiLogStream(&v64);
                  std::shared_ptr<Gadget>::~shared_ptr((std::shared_ptr<Gadget> *const)(v1 + 48));
                  GroupEntityParam::~GroupEntityParam((GroupEntityParam *const)(v1 + 80));
                }
              }
              else
              {
                if ( *(_BYTE *)(((unsigned __int64)config_id_0 >> 3) + 0x7FFF8000) != 0
                  && (char)(((unsigned __int8)config_id_0 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)config_id_0 >> 3)
                                                                                + 0x7FFF8000) )
                {
                  __asan_report_load4();
                }
                if ( GroupScriptConfig::isGarbageConfigId(group_script_config_ptr, *config_id_0) )
                {
                  common::milog::MiLogStream::create(
                    &v62,
                    &common::milog::MiLogDefault::default_log_obj_,
                    1u,
                    "./src/group/group.cpp",
                    "initEntity",
                    2713);
                  v29 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                          &v62,
                          (const char (*)[36])"[GROUP] gadget garbage, group_id : ");
                  v30 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v29, &this->group_id_);
                  v31 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                          v30,
                          (const char (*)[14])" ,config_id: ");
                  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v31, config_id_0);
                  common::milog::MiLogStream::~MiLogStream(&v62);
                }
                else
                {
                  common::milog::MiLogStream::create(
                    &v63,
                    &common::milog::MiLogDefault::default_log_obj_,
                    3u,
                    "./src/group/group.cpp",
                    "initEntity",
                    2717);
                  v32 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
                          &v63,
                          (const char (*)[44])"[GROUP] findGadgetConfig failed, group_id: ");
                  v33 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v32, &this->group_id_);
                  v34 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                          v33,
                          (const char (*)[14])" ,config_id: ");
                  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v34, config_id_0);
                  common::milog::MiLogStream::~MiLogStream(&v63);
                }
              }
            }
          }
          std::_Rb_tree_iterator<std::pair<unsigned int const,proto::GroupGadgetBin>>::operator++((std::_Rb_tree_iterator<std::pair<unsigned int const,proto::GroupGadgetBin> > *const)&__for_begin_0);
        }
        std::map<unsigned int,proto::GroupGadgetBin>::clear(&this->gadget_bin_map_);
        if ( ChallengeComp::init(&this->challenge_comp_) )
        {
          common::milog::MiLogStream::create(
            &v64,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/group/group.cpp",
            "initEntity",
            2742);
          common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
            &v64,
            (const char (*)[26])"init challenge_comp fails");
          common::milog::MiLogStream::~MiLogStream(&v64);
          result = -1;
        }
        else
        {
          result = 0;
        }
      }
    }
    else
    {
      common::milog::MiLogStream::create(
        &v64,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/group/group.cpp",
        "initEntity",
        2645);
      v9 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
             &v64,
             (const char (*)[35])"getSuiteConfig fails, suite_index:");
      v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, &this->suite_index_);
      v11 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v10, (const char (*)[11])" group_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, &this->group_id_);
      common::milog::MiLogStream::~MiLogStream(&v64);
      result = -1;
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v64,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "initEntity",
      2638);
    v7 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
           &v64,
           (const char (*)[34])"getScriptConfig fails, group_id: ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, &this->group_id_);
    common::milog::MiLogStream::~MiLogStream(&v64);
    result = -1;
  }
  if ( v65 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8008) = 0;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8048) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8050) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8058) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8058) = -168430091;
  }
  return result;
};

// Line 2750: range 0000000015FC7C46-0000000015FC8193
__int64 __fastcall Group::getSuiteIsBanRefresh(
        Group *const this,
        uint32_t suite_index,
        unsigned __int64 is_ban_refresh)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  common::milog::MiLogStream *v6; // rax
  __int64 result; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  bool v11; // cl
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  bool ban_refresh; // cl
  common::milog::MiLogStream *v16; // rax
  const GroupScriptConfig *group_script_config_ptr; // [rsp+28h] [rbp-98h]
  const SuiteDiskScriptConfig *suite_disk_config_ptr; // [rsp+30h] [rbp-90h]
  const SuiteScriptConfig *suite_config; // [rsp+38h] [rbp-88h]
  common::milog::MiLogStream v21; // [rsp+40h] [rbp-80h] BYREF
  char v22[96]; // [rsp+60h] [rbp-60h] BYREF

  v3 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 4 16 suite_index:2749";
  *(_QWORD *)(v3 + 16) = Group::getSuiteIsBanRefresh;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116348;
  *(_DWORD *)(v3 + 32) = suite_index;
  group_script_config_ptr = Group::getScriptConfig(this);
  if ( group_script_config_ptr )
  {
    if ( *(_BYTE *)(((unsigned __int64)group_script_config_ptr >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)group_script_config_ptr >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    if ( group_script_config_ptr->io_type )
    {
      if ( *(_BYTE *)(((unsigned __int64)group_script_config_ptr >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)group_script_config_ptr >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4();
      }
      if ( group_script_config_ptr->io_type == GROUP_IO_TYPE_FLOW )
      {
        suite_disk_config_ptr = Group::findSuiteDiskScriptConfig(this, *(_DWORD *)(v3 + 32));
        if ( suite_disk_config_ptr )
        {
          if ( *(char *)(((unsigned __int64)&suite_disk_config_ptr->ban_refresh >> 3) + 0x7FFF8000) < 0 )
            __asan_report_load1(&suite_disk_config_ptr->ban_refresh);
          ban_refresh = suite_disk_config_ptr->ban_refresh;
          if ( *(_BYTE *)((is_ban_refresh >> 3) + 0x7FFF8000) != 0
            && (char)(is_ban_refresh & 7) >= *(_BYTE *)((is_ban_refresh >> 3) + 0x7FFF8000) )
          {
            __asan_report_store1(is_ban_refresh);
          }
          *(_BYTE *)is_ban_refresh = ban_refresh;
          result = 0LL;
        }
        else
        {
          common::milog::MiLogStream::create(
            &v21,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/group/group.cpp",
            "getSuiteIsBanRefresh",
            2775);
          v12 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
                  &v21,
                  (const char (*)[41])"cannot find suite disk config for group:");
          v13 = operator<<(v12, this);
          v14 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v13, (const char (*)[12])" for suite:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, (const unsigned int *)(v3 + 32));
          common::milog::MiLogStream::~MiLogStream(&v21);
          result = 0xFFFFFFFFLL;
        }
      }
      else
      {
        common::milog::MiLogStream::create(
          &v21,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/group/group.cpp",
          "getSuiteIsBanRefresh",
          2782);
        v16 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                &v21,
                (const char (*)[17])"invalid io type:");
        operator<<(v16, this);
        common::milog::MiLogStream::~MiLogStream(&v21);
        result = 0xFFFFFFFFLL;
      }
    }
    else
    {
      suite_config = Group::findSuiteScriptConfig(this, *(_DWORD *)(v3 + 32));
      if ( suite_config )
      {
        if ( *(_BYTE *)(((unsigned __int64)&suite_config->ban_refresh >> 3) + 0x7FFF8000) != 0
          && (((unsigned __int8)suite_config - 12) & 7) >= *(_BYTE *)(((unsigned __int64)&suite_config->ban_refresh >> 3)
                                                                    + 0x7FFF8000) )
        {
          __asan_report_load1(&suite_config->ban_refresh);
        }
        v11 = suite_config->ban_refresh;
        if ( *(_BYTE *)((is_ban_refresh >> 3) + 0x7FFF8000) != 0
          && (char)(is_ban_refresh & 7) >= *(_BYTE *)((is_ban_refresh >> 3) + 0x7FFF8000) )
        {
          __asan_report_store1(is_ban_refresh);
        }
        *(_BYTE *)is_ban_refresh = v11;
        result = 0LL;
      }
      else
      {
        common::milog::MiLogStream::create(
          &v21,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/group/group.cpp",
          "getSuiteIsBanRefresh",
          2763);
        v8 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
               &v21,
               (const char (*)[36])"cannot find suite config for group:");
        v9 = operator<<(v8, this);
        v10 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v9, (const char (*)[12])" for suite:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v3 + 32));
        common::milog::MiLogStream::~MiLogStream(&v21);
        result = 0xFFFFFFFFLL;
      }
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v21,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "getSuiteIsBanRefresh",
      2754);
    v6 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
           &v21,
           (const char (*)[30])"getScriptConfig fails, group:");
    operator<<(v6, this);
    common::milog::MiLogStream::~MiLogStream(&v21);
    result = 0xFFFFFFFFLL;
  }
  if ( v22 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2788: range 0000000015FC8194-0000000015FC8703
uint32_t __cdecl Group::findInitSuiteIndex(Group *const this, bool *is_expired)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  common::milog::MiLogStream *v5; // rax
  uint32_t result; // eax
  common::milog::MiLogStream *v7; // rdx
  RefreshPolicyExcelConfigMgr *p_refresh_policy_config_mgr; // r13
  uint32_t Now; // esi
  bool isTimeToRefresh; // cl
  uint32_t v11; // esi
  uint32_t refresh_id; // [rsp+1Ch] [rbp-A4h]
  const GroupInfoScriptConfig *group_info_config_ptr; // [rsp+28h] [rbp-98h]
  std::shared_ptr<Config> v15; // [rsp+30h] [rbp-90h] BYREF
  common::milog::MiLogStream v16; // [rsp+40h] [rbp-80h] BYREF
  char v17[96]; // [rsp+60h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 1 19 is_ban_refresh:2798";
  *(_QWORD *)(v2 + 16) = Group::findInitSuiteIndex;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116351;
  if ( !Group::getScriptConfig(this) )
  {
    common::milog::MiLogStream::create(
      &v16,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "findInitSuiteIndex",
      2792);
    v5 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
           &v16,
           (const char (*)[34])"getScriptConfig fails, group_id: ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, &this->group_id_);
    common::milog::MiLogStream::~MiLogStream(&v16);
    result = 0;
    goto LABEL_36;
  }
  if ( *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4();
  }
  if ( !this->suite_index_ )
    goto LABEL_18;
  if ( *(_BYTE *)(((unsigned __int64)&this->target_suite_index_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->target_suite_index_ >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_load4();
  }
  if ( this->target_suite_index_ )
    goto LABEL_18;
  *(_BYTE *)(v2 + 32) = 0;
  if ( (unsigned int)Group::getSuiteIsBanRefresh(this, this->suite_index_, v2 + 32) )
  {
    common::milog::MiLogStream::create(
      &v16,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "findInitSuiteIndex",
      2801);
    v7 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(&v16, (const char (*)[35])off_25AB9640);
    operator<<(v7, this);
    common::milog::MiLogStream::~MiLogStream(&v16);
    result = 0;
    goto LABEL_36;
  }
  if ( *(_BYTE *)(v2 + 32) )
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    result = this->suite_index_;
  }
  else
  {
LABEL_18:
    group_info_config_ptr = Group::getInfoScriptConfig(this);
    if ( group_info_config_ptr )
    {
      if ( *(_BYTE *)(((unsigned __int64)&group_info_config_ptr->refresh_id >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&group_info_config_ptr->refresh_id >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4();
      }
      refresh_id = group_info_config_ptr->refresh_id;
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)&v15);
      p_refresh_policy_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v15)->design_config.txt_config_mgr.refresh_policy_config_mgr;
      Now = common::tools::TimeUtils::getNow();
      if ( *(_BYTE *)(((unsigned __int64)&this->last_refresh_time_ >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&this->last_refresh_time_ >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4();
      }
      isTimeToRefresh = RefreshPolicyExcelConfigMgr::isTimeToRefresh(
                          p_refresh_policy_config_mgr,
                          refresh_id,
                          this->last_refresh_time_,
                          Now);
      if ( *(_BYTE *)(((unsigned __int64)is_expired >> 3) + 0x7FFF8000) != 0
        && ((unsigned __int8)is_expired & 7) >= *(_BYTE *)(((unsigned __int64)is_expired >> 3) + 0x7FFF8000) )
      {
        __asan_report_store1(is_expired);
      }
      *is_expired = isTimeToRefresh;
      std::shared_ptr<Config>::~shared_ptr(&v15);
    }
    if ( *(_BYTE *)(((unsigned __int64)is_expired >> 3) + 0x7FFF8000) != 0
      && ((unsigned __int8)is_expired & 7) >= *(_BYTE *)(((unsigned __int64)is_expired >> 3) + 0x7FFF8000) )
    {
      __asan_report_load1(is_expired);
    }
    if ( *is_expired )
      goto LABEL_33;
    if ( *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    if ( this->suite_index_ )
    {
      result = this->suite_index_;
    }
    else
    {
LABEL_33:
      v11 = common::tools::TimeUtils::getNow();
      if ( *(_BYTE *)(((unsigned __int64)&this->last_refresh_time_ >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&this->last_refresh_time_ >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_store4(&this->last_refresh_time_);
      }
      this->last_refresh_time_ = v11;
      result = Group::refreshSuiteIndex(this, 0);
    }
  }
LABEL_36:
  if ( v17 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2834: range 0000000015FC8704-0000000015FC8900
int32_t __cdecl Group::createSuiteInitConfigEntity(Group *const this, const SuiteScriptConfig *suite_script_config)
{
  common::milog::MiLogStream *v3; // rax
  common::milog::MiLogStream *v4; // rax
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream *v6; // rax
  const GroupScriptConfig *group_script_config_ptr; // [rsp+18h] [rbp-38h]
  common::milog::MiLogStream v8; // [rsp+20h] [rbp-30h] BYREF

  group_script_config_ptr = Group::getScriptConfig(this);
  if ( !group_script_config_ptr )
    return -1;
  Group::createTriggers(this, &suite_script_config->trigger_set, group_script_config_ptr, 0);
  common::milog::MiLogStream::create(
    &v8,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/group/group.cpp",
    "createSuiteInitConfigEntity",
    2844);
  v3 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(&v8, (const char (*)[11])"triggers: ");
  v4 = common::milog::MiLogStream::operator<<<std::string,std::shared_ptr<Trigger>>(v3, &this->trigger_map_);
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v4, &this->group_id_);
  common::milog::MiLogStream::~MiLogStream(&v8);
  common::milog::MiLogStream::create(
    &v8,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/group/group.cpp",
    "createSuiteInitConfigEntity",
    2845);
  v5 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(&v8, (const char (*)[9])"events: ");
  v6 = common::milog::MiLogStream::operator<<<data::EventType,std::set<std::string>>(v5, &this->event_map_);
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, &this->group_id_);
  common::milog::MiLogStream::~MiLogStream(&v8);
  Group::createMonsters(this, &suite_script_config->monster_config_set, group_script_config_ptr, 0);
  Group::createGadgets(this, &suite_script_config->gadget_config_set, group_script_config_ptr, 0);
  Group::createRegions(this, &suite_script_config->region_config_set, group_script_config_ptr, 0);
  Group::createNPCs(this, &suite_script_config->npc_config_set, group_script_config_ptr, 0);
  return 0;
};

// Line 2860: range 0000000015FC8902-0000000015FC89DB
int32_t __cdecl Group::recreateSuiteInitConfigEntity(Group *const this, const SuiteScriptConfig *suite_script_config)
{
  common::milog::MiLogStream *v2; // rax
  common::milog::MiLogStream v4; // [rsp+10h] [rbp-30h] BYREF

  Group::clearDeletedEntityRecords(
    this,
    &suite_script_config->monster_config_set,
    &suite_script_config->gadget_config_set);
  if ( !Group::createSuiteInitConfigEntity(this, suite_script_config) )
    return 0;
  common::milog::MiLogStream::create(
    &v4,
    &common::milog::MiLogDefault::default_log_obj_,
    3u,
    "./src/group/group.cpp",
    "recreateSuiteInitConfigEntity",
    2864);
  v2 = common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(
         &v4,
         (const char (*)[46])"createSuiteInitConfigEntity fails, group_id: ");
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v2, &this->group_id_);
  common::milog::MiLogStream::~MiLogStream(&v4);
  return -1;
};

// Line 2871: range 0000000015FC8A84-0000000015FC8E21
// local variable allocation has failed, the output may be wrong!
int32_t __cdecl Group::enterScene(Group *const this, Scene *scene)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  _BOOL4 is_load_refresh_expire; // r14d
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rdx
  int32_t *p_param1; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  int32_t result; // eax
  std::function<ForeachPolicy(Entity&)> p_func; // [rsp+20h] [rbp-90h] BYREF
  char v12[112]; // [rsp+40h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 14 event_ptr:2884";
  *(_QWORD *)(v2 + 16) = Group::enterScene;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  toThisPtr<Scene>((Scene *)(v2 + 32));
  Group::setScene(this, (ScenePtr *)(v2 + 32));
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v2 + 32));
  std::function<ForeachPolicy ()(Entity &)>::function<Group::enterScene(Scene &)::{lambda(Entity &)#1},void,void>(
    &p_func,
    *(Group::enterScene::<lambda(Entity&)> *)&this);
  Group::foreachEntity(this, &p_func);
  std::function<ForeachPolicy ()(Entity &)>::~function(&p_func);
  ChallengeComp::start(&this->challenge_comp_);
  PoolMonsterTideComp::start(&this->pool_monster_tide_comp_);
  EventUtil::createEvent((std::shared_ptr<Event> *)(v2 + 32), 29);
  if ( std::operator!=<Event>((const std::shared_ptr<Event> *)(v2 + 32), 0LL) )
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->is_load_refresh_expire_ >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)this + 76) & 7) >= *(_BYTE *)(((unsigned __int64)&this->is_load_refresh_expire_ >> 3)
                                                        + 0x7FFF8000) )
    {
      __asan_report_load1(&this->is_load_refresh_expire_);
    }
    is_load_refresh_expire = this->is_load_refresh_expire_;
    v6 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    p_param1 = &v6->param1;
    if ( *(_BYTE *)(((unsigned __int64)p_param1 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)p_param1 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_param1 >> 3) + 0x7FFF8000) )
    {
      __asan_report_store4(p_param1);
    }
    v6->param1 = is_load_refresh_expire;
    if ( Group::handleEvent(this, (EventPtr *)(v2 + 32)) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&p_func,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/group/group.cpp",
        "enterScene",
        2890);
      v8 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(
             (common::milog::MiLogStream *const)&p_func,
             (const char (*)[10])"group_id:");
      v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, &this->group_id_);
      common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
        v9,
        (const char (*)[36])" handleEvent EVENT_GROUP_LOAD fails");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&p_func);
    }
  }
  if ( *(_BYTE *)(((unsigned __int64)&this->is_load_refresh_expire_ >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)this + 76) & 7) >= *(_BYTE *)(((unsigned __int64)&this->is_load_refresh_expire_ >> 3)
                                                      + 0x7FFF8000) )
  {
    __asan_report_store1(&this->is_load_refresh_expire_);
  }
  this->is_load_refresh_expire_ = 0;
  std::shared_ptr<Event>::~shared_ptr((std::shared_ptr<Event> *const)(v2 + 32));
  result = 0;
  if ( v12 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2874: range 0000000015FC89DC-0000000015FC8A82
ForeachPolicy __cdecl Group::enterScene(Scene &)::{lambda(Entity &)#1}::operator()(
        const Group::enterScene::<lambda(Entity&)> *const __closure,
        Entity *entity)
{
  unsigned __int64 v2; // rax
  void (__fastcall *v3)(Entity *, Scene *, VisionContext *); // r8

  if ( *(_BYTE *)(((unsigned __int64)entity >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  v2 = (unsigned __int64)(entity->_vptr_DescribalBase + 7);
  if ( *(_BYTE *)((v2 >> 3) + 0x7FFF8000) )
    v2 = __asan_report_load8();
  v3 = *(void (__fastcall **)(Entity *, Scene *, VisionContext *))v2;
  if ( *(_BYTE *)(((unsigned __int64)&__closure->__scene >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  v3(entity, __closure->__scene, &VisionContext::meet_context);
  return 0;
};

// Line 2902: range 0000000015FC8E22-0000000015FC9485
int32_t __cdecl Group::addEntity(Group *const this, Entity *entity)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  common::milog::MiLogStream *v5; // rdx
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // r14
  std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  int32_t v9; // r14d
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // r14
  std::unordered_map<unsigned int,unsigned int>::mapped_type *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rdx
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  int v21; // r14d
  std::unordered_map<unsigned int,unsigned int>::mapped_type *v22; // rax
  _DWORD *v23; // rdx
  std::shared_ptr<Entity> *v24; // rax
  unsigned __int64 v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rdx
  int32_t result; // eax
  unsigned int val; // [rsp+1Ch] [rbp-C4h] BYREF
  std::shared_ptr<Entity> __r; // [rsp+20h] [rbp-C0h] BYREF
  common::milog::MiLogStream v32; // [rsp+30h] [rbp-B0h] BYREF
  char v33[144]; // [rsp+50h] [rbp-90h] BYREF

  v2 = (unsigned __int64)v33;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 32 4 14 config_id:2903 48 4 14 entity_id:2904 64 16 21 entity_group_ptr:2906";
  *(_QWORD *)(v2 + 16) = Group::addEntity;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = -202178560;
  *(_DWORD *)(v2 + 32) = Entity::getConfigId(entity);
  *(_DWORD *)(v2 + 48) = Entity::getEntityId(entity);
  Entity::getGroup((const Entity *const)(v2 + 64));
  if ( std::operator!=<Group>(0LL, (const std::shared_ptr<Group> *)(v2 + 64)) )
  {
    common::milog::MiLogStream::create(
      &v32,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "addEntity",
      2909);
    v5 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(&v32, (const char (*)[9])" entity:");
    v6 = common::milog::MiLogStream::operator<<<Entity,(Entity*)0>(v5, entity);
    v7 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v6, (const char (*)[12])" has group:");
    v8 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
    val = Group::getGroupId(v8);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, &val);
    common::milog::MiLogStream::~MiLogStream(&v32);
    v9 = -1;
  }
  else if ( common::tools::MiscUtils::isContains<std::unordered_map<unsigned int,unsigned int>,unsigned int>(
              &this->config_id_2_eid_map_,
              (const unsigned int *)(v2 + 32)) )
  {
    common::milog::MiLogStream::create(
      &v32,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "addEntity",
      2915);
    v10 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
            &v32,
            (const char (*)[22])" duplicate config_id:");
    v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v2 + 32));
    v12 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v11, (const char (*)[12])" entity_id:");
    v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v2 + 48));
    v14 = common::milog::MiLogStream::operator<<<char [5],(char *[5])0>(v13, (const char (*)[5])off_25AB9A00);
    v15 = std::unordered_map<unsigned int,unsigned int>::operator[](
            &this->config_id_2_eid_map_,
            (const std::unordered_map<unsigned int,unsigned int>::key_type *)(v2 + 32));
    v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, v15);
    v17 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v16, (const char (*)[9])" @group:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, &this->group_id_);
    common::milog::MiLogStream::~MiLogStream(&v32);
    v9 = -1;
  }
  else if ( common::tools::MiscUtils::isContains<std::map<unsigned int,std::shared_ptr<Entity>>,unsigned int>(
              &this->entity_map_,
              (const unsigned int *)(v2 + 48)) )
  {
    common::milog::MiLogStream::create(
      &v32,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "addEntity",
      2921);
    v18 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
            &v32,
            (const char (*)[19])" duplicate entity:");
    v19 = common::milog::MiLogStream::operator<<<Entity,(Entity*)0>(v18, entity);
    v20 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v19, (const char (*)[9])" @group:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v20, &this->group_id_);
    common::milog::MiLogStream::~MiLogStream(&v32);
    v9 = -1;
  }
  else
  {
    v21 = *(_DWORD *)(v2 + 48);
    v22 = std::unordered_map<unsigned int,unsigned int>::operator[](
            &this->config_id_2_eid_map_,
            (const std::unordered_map<unsigned int,unsigned int>::key_type *)(v2 + 32));
    v23 = v22;
    if ( *(_BYTE *)(((unsigned __int64)v22 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v22 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v22 >> 3) + 0x7FFF8000) )
    {
      __asan_report_store4(v22);
    }
    *v23 = v21;
    toThisPtr<Entity>((Entity *)&__r);
    v24 = std::map<unsigned int,std::shared_ptr<Entity>>::operator[](
            &this->entity_map_,
            (const std::map<unsigned int,std::shared_ptr<Entity>>::key_type *)(v2 + 48));
    std::shared_ptr<Entity>::operator=(v24, &__r);
    std::shared_ptr<Entity>::~shared_ptr(&__r);
    std::enable_shared_from_this<Group>::shared_from_this((std::enable_shared_from_this<Group> *const)&__r);
    Entity::setGroup(entity, (GroupPtr *)&__r);
    std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)&__r);
    if ( *(_BYTE *)(((unsigned __int64)entity >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v25 = (unsigned __int64)(entity->_vptr_DescribalBase + 3);
    if ( *(_BYTE *)((v25 >> 3) + 0x7FFF8000) )
      v25 = __asan_report_load8();
    if ( (*(unsigned int (__fastcall **)(Entity *))v25)(entity) == 4 )
    {
      common::milog::MiLogStream::create(
        &v32,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/group/group.cpp",
        "addEntity",
        2931);
      v26 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
              &v32,
              (const char (*)[21])"[ROGUE_DEBUG] group:");
      v27 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v26, &this->group_id_);
      v28 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v27, (const char (*)[13])" add entity:");
      common::milog::MiLogStream::operator<<<Entity,(Entity*)0>(v28, entity);
      common::milog::MiLogStream::~MiLogStream(&v32);
    }
    v9 = 0;
  }
  std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v2 + 64));
  result = v9;
  if ( v33 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 2938: range 0000000015FC9486-0000000015FC96B9
void __cdecl Group::revertAddEntity(Group *const this, Entity *entity)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  common::milog::MiLogStream *v5; // rdx
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  std::shared_ptr<Group> p_group_ptr; // [rsp+10h] [rbp-B0h] BYREF
  common::milog::MiLogStream v9; // [rsp+20h] [rbp-A0h] BYREF
  char v10[128]; // [rsp+40h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 4 14 config_id:2939 64 4 14 entity_id:2940";
  *(_QWORD *)(v2 + 16) = Group::revertAddEntity;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -202116348;
  *(_DWORD *)(v2 + 48) = Entity::getConfigId(entity);
  *(_DWORD *)(v2 + 64) = Entity::getEntityId(entity);
  std::unordered_map<unsigned int,unsigned int>::erase(
    &this->config_id_2_eid_map_,
    (const std::unordered_map<unsigned int,unsigned int>::key_type *)(v2 + 48));
  std::map<unsigned int,std::shared_ptr<Entity>>::erase(
    &this->entity_map_,
    (const std::map<unsigned int,std::shared_ptr<Entity>>::key_type *)(v2 + 64));
  std::shared_ptr<Group>::shared_ptr(&p_group_ptr, 0LL);
  Entity::setGroup(entity, &p_group_ptr);
  std::shared_ptr<Group>::~shared_ptr(&p_group_ptr);
  common::milog::MiLogStream::create(
    &v9,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/group/group.cpp",
    "revertAddEntity",
    2944);
  v5 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(&v9, (const char (*)[20])" revert add entity:");
  v6 = common::milog::MiLogStream::operator<<<Entity,(Entity*)0>(v5, entity);
  v7 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v6, (const char (*)[13])" from group:");
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, &this->group_id_);
  common::milog::MiLogStream::~MiLogStream(&v9);
  if ( v10 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 2949: range 0000000015FC96BA-0000000015FC9D6D
void __cdecl Group::onGroupMonsterDieEvent(Group *const this, Monster *monster)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  uint32_t ConfigId; // eax
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  Player *v8; // rax
  PlayerSceneComp *SceneComp; // r15
  uint32_t oneoff_reset_version; // r14d
  uint32_t v11; // esi
  int group_id; // edi
  uint32_t dungeon_id; // edx
  common::milog::MiLogStream *v14; // r14
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  Player *v19; // rax
  PlayerEventComp *EventComp; // r14
  unsigned int val; // [rsp+2Ch] [rbp-F4h] BYREF
  const GroupScriptConfig *script_config_ptr; // [rsp+30h] [rbp-F0h]
  const MonsterScriptConfig *monster_config_ptr; // [rsp+38h] [rbp-E8h]
  std::shared_ptr<ClearGroupMonsterEvent> __r; // [rsp+40h] [rbp-E0h] BYREF
  common::milog::MiLogStream v27; // [rsp+50h] [rbp-D0h] BYREF
  char v28[176]; // [rsp+70h] [rbp-B0h] BYREF

  v2 = (unsigned __int64)v28;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 32 16 14 scene_ptr:2961 64 16 15 player_ptr:2968 96 16 14 event_ptr:2987";
  *(_QWORD *)(v2 + 16) = Group::onGroupMonsterDieEvent;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862722] = -219021312;
  v4[536862723] = -202178560;
  script_config_ptr = Group::getScriptConfig(this);
  if ( script_config_ptr )
  {
    ConfigId = Entity::getConfigId((const Entity *const)monster);
    monster_config_ptr = GroupScriptConfig::findMonsterConfig(script_config_ptr, ConfigId);
    if ( monster_config_ptr )
    {
      Group::getScene((const Group *const)(v2 + 32));
      if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v2 + 32), 0LL) )
      {
        common::milog::MiLogStream::create(
          &v27,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/group/group.cpp",
          "onGroupMonsterDieEvent",
          2964);
        v6 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
               &v27,
               (const char (*)[31])"group scene is nullptr, group:");
        operator<<(v6, this);
        common::milog::MiLogStream::~MiLogStream(&v27);
      }
      else
      {
        std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
        Scene::getOwnPlayer((const Scene *const)(v2 + 64));
        if ( std::operator==<Player>((const std::shared_ptr<Player> *)(v2 + 64), 0LL) )
        {
          common::milog::MiLogStream::create(
            &v27,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/group/group.cpp",
            "onGroupMonsterDieEvent",
            2971);
          v7 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                 &v27,
                 (const char (*)[36])"group player_ptr is nullptr, group:");
          operator<<(v7, this);
          common::milog::MiLogStream::~MiLogStream(&v27);
        }
        else
        {
          if ( *(_BYTE *)(((unsigned __int64)&monster_config_ptr->is_oneoff >> 3) + 0x7FFF8000) != 0
            && (((unsigned __int8)monster_config_ptr + 97) & 7) >= *(_BYTE *)(((unsigned __int64)&monster_config_ptr->is_oneoff >> 3)
                                                                            + 0x7FFF8000) )
          {
            __asan_report_load1(&monster_config_ptr->is_oneoff);
          }
          if ( monster_config_ptr->is_oneoff )
          {
            v8 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
            SceneComp = Player::getSceneComp(v8);
            if ( *(_BYTE *)(((unsigned __int64)&monster_config_ptr->oneoff_reset_version >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&monster_config_ptr->oneoff_reset_version >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4();
            }
            oneoff_reset_version = monster_config_ptr->oneoff_reset_version;
            v11 = Entity::getConfigId((const Entity *const)monster);
            if ( *(_BYTE *)(((unsigned __int64)&this->group_id_ >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&this->group_id_ >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4();
            }
            group_id = this->group_id_;
            if ( *(_BYTE *)(((unsigned __int64)&this->dungeon_id_ >> 3) + 0x7FFF8000) != 0
              && (char)((((_BYTE)this + 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->dungeon_id_ >> 3)
                                                                  + 0x7FFF8000) )
            {
              group_id = (_DWORD)this + 76;
              __asan_report_load4();
            }
            dungeon_id = this->dungeon_id_;
            if ( *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) <= 3 )
            {
              group_id = (_DWORD)this + 72;
              __asan_report_load4();
            }
            PlayerSceneComp::addOneOffRecord(
              SceneComp,
              PROT_ENTITY_MONSTER,
              this->scene_id_,
              dungeon_id,
              group_id,
              v11,
              oneoff_reset_version);
            common::milog::MiLogStream::create(
              &v27,
              &common::milog::MiLogDefault::default_log_obj_,
              1u,
              "./src/group/group.cpp",
              "onGroupMonsterDieEvent",
              2978);
            v14 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                    &v27,
                    (const char (*)[12])"config_id: ");
            val = Entity::getConfigId((const Entity *const)monster);
            v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, &val);
            v16 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                    v15,
                    (const char (*)[12])" group_id: ");
            v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, &this->group_id_);
            v18 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v17, (const char (*)[10])"version: ");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v18,
              &monster_config_ptr->oneoff_reset_version);
            common::milog::MiLogStream::~MiLogStream(&v27);
          }
          if ( !Group::getMonsterCount(this, 0) )
          {
            common::tools::perf::make_shared<ClearGroupMonsterEvent,unsigned int &>(
              (unsigned int *)&__r,
              &this->group_id_);
            std::shared_ptr<BaseEvent>::shared_ptr<ClearGroupMonsterEvent,void>(
              (std::shared_ptr<BaseEvent> *const)(v2 + 96),
              &__r);
            std::shared_ptr<ClearGroupMonsterEvent>::~shared_ptr(&__r);
            v19 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
            EventComp = Player::getEventComp(v19);
            std::shared_ptr<BaseEvent>::shared_ptr(
              (std::shared_ptr<BaseEvent> *const)&__r,
              (const std::shared_ptr<BaseEvent> *)(v2 + 96));
            PlayerEventComp::notifyEvent(EventComp, (BaseEventPtr *)&__r);
            std::shared_ptr<BaseEvent>::~shared_ptr((std::shared_ptr<BaseEvent> *const)&__r);
            std::shared_ptr<BaseEvent>::~shared_ptr((std::shared_ptr<BaseEvent> *const)(v2 + 96));
          }
        }
        std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v2 + 64));
      }
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v2 + 32));
    }
  }
  if ( v28 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 2993: range 0000000015FC9D6E-0000000015FCA348
void __cdecl Group::onGroupGadgetDieEvent(Group *const this, Gadget *gadget)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  uint32_t ConfigId; // eax
  common::milog::MiLogStream *v6; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  common::milog::MiLogStream *v8; // rax
  Player *v9; // rax
  PlayerSceneComp *SceneComp; // r15
  uint32_t oneoff_reset_version; // r14d
  uint32_t v12; // esi
  int group_id; // edi
  uint32_t dungeon_id; // edx
  common::milog::MiLogStream *v15; // r14
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  unsigned int val; // [rsp+2Ch] [rbp-C4h] BYREF
  const GroupScriptConfig *script_config_ptr; // [rsp+30h] [rbp-C0h]
  const GadgetScriptConfig *gadget_config_ptr; // [rsp+38h] [rbp-B8h]
  common::milog::MiLogStream v25; // [rsp+40h] [rbp-B0h] BYREF
  char v26[144]; // [rsp+60h] [rbp-90h] BYREF

  v2 = (unsigned __int64)v26;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 16 14 scene_ptr:3004 64 16 15 player_ptr:3010";
  *(_QWORD *)(v2 + 16) = Group::onGroupGadgetDieEvent;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862722] = -202178560;
  script_config_ptr = Group::getScriptConfig(this);
  if ( script_config_ptr )
  {
    ConfigId = Entity::getConfigId((const Entity *const)gadget);
    gadget_config_ptr = GroupScriptConfig::findGadgetConfig(script_config_ptr, ConfigId);
    if ( gadget_config_ptr )
    {
      Group::getScene((const Group *const)(v2 + 32));
      if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v2 + 32), 0LL) )
      {
        common::milog::MiLogStream::create(
          &v25,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/group/group.cpp",
          "onGroupGadgetDieEvent",
          3007);
        v6 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
               &v25,
               (const char (*)[31])"group scene is nullptr, group:");
        operator<<(v6, this);
        common::milog::MiLogStream::~MiLogStream(&v25);
      }
      else
      {
        std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
        Scene::getOwnPlayer((const Scene *const)(v2 + 64));
        if ( std::operator==<Player>((const std::shared_ptr<Player> *)(v2 + 64), 0LL) )
        {
          v7 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
          if ( !Scene::isHomeScene(v7) )
          {
            common::milog::MiLogStream::create(
              &v25,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/group/group.cpp",
              "onGroupGadgetDieEvent",
              3016);
            v8 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                   &v25,
                   (const char (*)[36])"group player_ptr is nullptr, group:");
            operator<<(v8, this);
            common::milog::MiLogStream::~MiLogStream(&v25);
          }
        }
        else
        {
          if ( *(_BYTE *)(((unsigned __int64)&gadget_config_ptr->is_oneoff >> 3) + 0x7FFF8000) != 0
            && (((unsigned __int8)gadget_config_ptr + 74) & 7) >= *(_BYTE *)(((unsigned __int64)&gadget_config_ptr->is_oneoff >> 3)
                                                                           + 0x7FFF8000) )
          {
            __asan_report_load1(&gadget_config_ptr->is_oneoff);
          }
          if ( gadget_config_ptr->is_oneoff )
          {
            v9 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
            SceneComp = Player::getSceneComp(v9);
            if ( *(_BYTE *)(((unsigned __int64)&gadget_config_ptr->oneoff_reset_version >> 3) + 0x7FFF8000) != 0
              && (char)((((_BYTE)gadget_config_ptr - 20) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&gadget_config_ptr->oneoff_reset_version >> 3)
                                                                               + 0x7FFF8000) )
            {
              __asan_report_load4();
            }
            oneoff_reset_version = gadget_config_ptr->oneoff_reset_version;
            v12 = Entity::getConfigId((const Entity *const)gadget);
            if ( *(_BYTE *)(((unsigned __int64)&this->group_id_ >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&this->group_id_ >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4();
            }
            group_id = this->group_id_;
            if ( *(_BYTE *)(((unsigned __int64)&this->dungeon_id_ >> 3) + 0x7FFF8000) != 0
              && (char)((((_BYTE)this + 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->dungeon_id_ >> 3)
                                                                  + 0x7FFF8000) )
            {
              group_id = (_DWORD)this + 76;
              __asan_report_load4();
            }
            dungeon_id = this->dungeon_id_;
            if ( *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) <= 3 )
            {
              group_id = (_DWORD)this + 72;
              __asan_report_load4();
            }
            PlayerSceneComp::addOneOffRecord(
              SceneComp,
              PROT_ENTITY_GADGET,
              this->scene_id_,
              dungeon_id,
              group_id,
              v12,
              oneoff_reset_version);
            common::milog::MiLogStream::create(
              &v25,
              &common::milog::MiLogDefault::default_log_obj_,
              1u,
              "./src/group/group.cpp",
              "onGroupGadgetDieEvent",
              3024);
            v15 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                    &v25,
                    (const char (*)[31])"dead_oneoff_gadget config_id: ");
            val = Entity::getConfigId((const Entity *const)gadget);
            v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, &val);
            v17 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                    v16,
                    (const char (*)[12])" group_id: ");
            v18 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, &this->group_id_);
            v19 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v18, (const char (*)[10])"version: ");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v19,
              &gadget_config_ptr->oneoff_reset_version);
            common::milog::MiLogStream::~MiLogStream(&v25);
          }
        }
        std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v2 + 64));
      }
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v2 + 32));
    }
  }
  if ( v26 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 3030: range 0000000015FCA34A-0000000015FCAC2B
void __cdecl Group::delEntity(Group *const this, Entity *entity, proto::VisionType type)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  unsigned __int64 v6; // rax
  bool v7; // r14
  common::milog::MiLogStream *v8; // rdx
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rax
  char v30; // r15
  bool v31; // r14
  bool v32; // r14
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rax
  common::milog::MiLogStream *v36; // rax
  common::milog::MiLogStream *v37; // rax
  common::milog::MiLogStream *v38; // rax
  common::milog::MiLogStream *v39; // r14
  unsigned int val; // [rsp+2Ch] [rbp-104h] BYREF
  EcsBase<Gadget,GadgetCompBase,28> __b; // [rsp+30h] [rbp-100h] BYREF
  char v42[208]; // [rsp+60h] [rbp-D0h] BYREF

  v3 = (unsigned __int64)v42;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(160LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 48 4 16 entity_type:3031 64 4 14 config_id:3032 80 4 14 entity_id:3033 96 16 16 monster_ptr:30"
                        "56 128 16 15 gadget_ptr:3066";
  *(_QWORD *)(v3 + 16) = Group::delEntity;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862723] = -219021312;
  v5[536862724] = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)entity >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  v6 = (unsigned __int64)(entity->_vptr_DescribalBase + 3);
  if ( *(_BYTE *)((v6 >> 3) + 0x7FFF8000) )
    v6 = __asan_report_load8();
  *(_DWORD *)(v3 + 48) = (*(__int64 (__fastcall **)(Entity *))v6)(entity);
  *(_DWORD *)(v3 + 64) = Entity::getConfigId(entity);
  *(_DWORD *)(v3 + 80) = Entity::getEntityId(entity);
  toThisPtr<Group>((Group *)&__b);
  Entity::getGroup((const Entity *const)(v3 + 128));
  v7 = std::operator==<Group,Group>((const std::shared_ptr<Group> *)(v3 + 128), (const std::shared_ptr<Group> *)&__b);
  std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v3 + 128));
  std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)&__b);
  if ( v7 )
  {
    std::shared_ptr<Group>::shared_ptr((std::shared_ptr<Group> *const)&__b, 0LL);
    Entity::setGroup(entity, (GroupPtr *)&__b);
    std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)&__b);
  }
  else
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&__b.comp_vec_._M_impl._M_end_of_storage,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "delEntity",
      3041);
    v8 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(
           (common::milog::MiLogStream *const)&__b.comp_vec_._M_impl._M_end_of_storage,
           (const char (*)[8])"entity:");
    v9 = common::milog::MiLogStream::operator<<<Entity,(Entity*)0>(v8, entity);
    v10 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
            v9,
            (const char (*)[31])" doesn't belong to this group:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, &this->group_id_);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&__b.comp_vec_._M_impl._M_end_of_storage);
  }
  if ( !std::map<unsigned int,std::shared_ptr<Entity>>::erase(
          &this->entity_map_,
          (const std::map<unsigned int,std::shared_ptr<Entity>>::key_type *)(v3 + 80)) )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&__b.comp_vec_._M_impl._M_end_of_storage,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "delEntity",
      3047);
    v11 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
            (common::milog::MiLogStream *const)&__b.comp_vec_._M_impl._M_end_of_storage,
            (const char (*)[22])off_25ABA000);
    v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v3 + 80));
    v13 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v12, (const char (*)[13])" config_id: ");
    v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v3 + 64));
    v15 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v14, (const char (*)[12])" group_id: ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, &this->group_id_);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&__b.comp_vec_._M_impl._M_end_of_storage);
  }
  if ( !std::unordered_map<unsigned int,unsigned int>::erase(
          &this->config_id_2_eid_map_,
          (const std::unordered_map<unsigned int,unsigned int>::key_type *)(v3 + 64)) )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&__b.comp_vec_._M_impl._M_end_of_storage,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "delEntity",
      3052);
    v16 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
            (common::milog::MiLogStream *const)&__b.comp_vec_._M_impl._M_end_of_storage,
            (const char (*)[22])off_25ABA000);
    v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, (const unsigned int *)(v3 + 80));
    v18 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v17, (const char (*)[13])" config_id: ");
    v19 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, (const unsigned int *)(v3 + 64));
    v20 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v19, (const char (*)[12])" group_id: ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v20, &this->group_id_);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&__b.comp_vec_._M_impl._M_end_of_storage);
  }
  toPtr<Monster,Entity>((Entity *)(v3 + 96));
  if ( std::operator!=<Monster>(0LL, (const std::shared_ptr<Monster> *)(v3 + 96)) )
  {
    v21 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
    if ( Monster::getMonsterPoolId(v21) )
      std::unordered_set<unsigned int>::erase(
        &this->occupied_point_set_,
        (const std::unordered_set<unsigned int>::key_type *)(v3 + 64));
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)&__b.comp_vec_._M_impl._M_end_of_storage,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/group/group.cpp",
    "delEntity",
    3063);
  v23 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(
          (common::milog::MiLogStream *const)&__b.comp_vec_._M_impl._M_end_of_storage,
          (const char (*)[7])"group:");
  v24 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v23, &this->group_id_);
  v25 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
          v24,
          (const char (*)[23])" del entity config_id:");
  v26 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v25, (const unsigned int *)(v3 + 64));
  v27 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v26, (const char (*)[12])" entity_id:");
  v28 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v27, (const unsigned int *)(v3 + 80));
  v29 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v28, (const char (*)[13])" entityType:");
  common::milog::MiLogStream::operator<<<proto::ProtEntityType,(proto::ProtEntityType*)0>(
    v29,
    (const proto::ProtEntityType *)(v3 + 48));
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&__b.comp_vec_._M_impl._M_end_of_storage);
  toPtr<Gadget,Entity>((Entity *)(v3 + 128));
  v30 = 0;
  v31 = 0;
  if ( std::operator!=<Gadget>((const std::shared_ptr<Gadget> *)(v3 + 128), 0LL) )
  {
    std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
    EcsBase<Gadget,GadgetCompBase,28u>::findComp<GatherComp>(&__b);
    v30 = 1;
    if ( std::operator==<GatherComp>((const std::shared_ptr<GatherComp> *)&__b, 0LL) )
      v31 = 1;
  }
  if ( v30 )
    std::shared_ptr<GatherComp>::~shared_ptr((std::shared_ptr<GatherComp> *const)&__b);
  if ( v31 )
  {
    std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
    EcsBase<Gadget,GadgetCompBase,28u>::findComp<ChestComp>(&__b);
    v32 = std::operator!=<ChestComp>((const std::shared_ptr<ChestComp> *)&__b, 0LL);
    std::shared_ptr<ChestComp>::~shared_ptr((std::shared_ptr<ChestComp> *const)&__b);
    if ( v32 )
      std::unordered_set<unsigned int>::erase(
        &this->show_cutscene_chest_set_,
        (const std::unordered_set<unsigned int>::key_type *)(v3 + 64));
  }
  if ( !Group::addDeletedEntityRecord(this, *(proto::ProtEntityType *)(v3 + 48), *(_DWORD *)(v3 + 64))
    && *(_DWORD *)(v3 + 48) == 4 )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&__b.comp_vec_._M_impl._M_end_of_storage,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/group/group.cpp",
      "delEntity",
      3079);
    v33 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(
            (common::milog::MiLogStream *const)&__b.comp_vec_._M_impl._M_end_of_storage,
            (const char (*)[9])" entity:");
    v34 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v33, (const unsigned int *)(v3 + 80));
    v35 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v34, (const char (*)[8])" group:");
    v36 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v35, &this->group_id_);
    v37 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v36, (const char (*)[12])" config_id:");
    v38 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v37, (const unsigned int *)(v3 + 64));
    v39 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v38, (const char (*)[6])" uid:");
    val = Group::getOwnerUid(this);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v39, &val);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&__b.comp_vec_._M_impl._M_end_of_storage);
  }
  std::shared_ptr<Gadget>::~shared_ptr((std::shared_ptr<Gadget> *const)(v3 + 128));
  std::shared_ptr<Monster>::~shared_ptr((std::shared_ptr<Monster> *const)(v3 + 96));
  if ( v42 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 3086: range 0000000015FCAC2C-0000000015FCAF1B
__int64 __fastcall Group::addDeletedEntityRecord(
        Group *const this,
        proto::ProtEntityType entity_type,
        uint32_t config_id)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  __int64 result; // rax
  int group_id; // edi
  uint32_t v8; // ecx
  std::set<unsigned int> *v9; // rax
  std::pair<std::_Rb_tree_const_iterator<unsigned int>,bool> v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  const GroupScriptConfig *group_script_config_ptr; // [rsp+18h] [rbp-A8h]
  common::milog::MiLogStream v18; // [rsp+20h] [rbp-A0h] BYREF
  char v19[128]; // [rsp+40h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 16 entity_type:3085 64 4 14 config_id:3085";
  *(_QWORD *)(v3 + 16) = Group::addDeletedEntityRecord;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116348;
  *(_DWORD *)(v3 + 48) = entity_type;
  *(_DWORD *)(v3 + 64) = config_id;
  if ( *(_DWORD *)(v3 + 48) == 4 || *(_DWORD *)(v3 + 48) == 2 )
  {
    group_script_config_ptr = Group::getScriptConfig(this);
    if ( group_script_config_ptr )
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->group_id_ >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&this->group_id_ >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4();
      }
      group_id = this->group_id_;
      v8 = *(_DWORD *)(v3 + 64);
      if ( *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) <= 3 )
      {
        group_id = (_DWORD)this + 32;
        __asan_report_load4();
      }
      if ( !GroupScriptConfig::isInitConfigId(
              group_script_config_ptr,
              *(proto::ProtEntityType *)(v3 + 48),
              this->suite_index_,
              v8,
              group_id) )
      {
        result = 0LL;
      }
      else
      {
        v9 = std::map<proto::ProtEntityType,std::set<unsigned int>>::operator[](
               &this->deleted_entity_record_map_,
               (const std::map<proto::ProtEntityType,std::set<unsigned int>>::key_type *)(v3 + 48));
        v10 = std::set<unsigned int>::insert(v9, (const std::set<unsigned int>::value_type *)(v3 + 64));
        if ( !v10.second )
        {
          common::milog::MiLogStream::create(
            &v18,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/group/group.cpp",
            "addDeletedEntityRecord",
            3105);
          v11 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                  &v18,
                  (const char (*)[23])"duplicate entity_type:");
          v12 = common::milog::MiLogStream::operator<<<proto::ProtEntityType,(proto::ProtEntityType*)0>(
                  v11,
                  (const proto::ProtEntityType *)(v3 + 48));
          v13 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v12, (const char (*)[13])", config_id:");
          v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v13,
                  (const unsigned int *)(v3 + 64));
          operator<<(v14, this);
          common::milog::MiLogStream::~MiLogStream(&v18);
          result = 0xFFFFFFFFLL;
        }
        else
        {
          result = 0LL;
        }
      }
    }
    else
    {
      result = 0xFFFFFFFFLL;
    }
  }
  else
  {
    result = 0xFFFFFFFFLL;
  }
  if ( v19 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 3114: range 0000000015FCAF1C-0000000015FCB046
void __fastcall Group::removeDeletedEntityRecord(
        Group *const this,
        proto::ProtEntityType entity_type,
        uint32_t config_id)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::set<unsigned int> *v6; // rax
  char v8[128]; // [rsp+10h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 16 entity_type:3113 64 4 14 config_id:3113";
  *(_QWORD *)(v3 + 16) = Group::removeDeletedEntityRecord;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116348;
  *(_DWORD *)(v3 + 48) = entity_type;
  *(_DWORD *)(v3 + 64) = config_id;
  v6 = std::map<proto::ProtEntityType,std::set<unsigned int>>::operator[](
         &this->deleted_entity_record_map_,
         (const std::map<proto::ProtEntityType,std::set<unsigned int>>::key_type *)(v3 + 48));
  std::set<unsigned int>::erase(v6, (const std::set<unsigned int>::key_type *)(v3 + 64));
  if ( v8 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 3121: range 0000000015FCB048-0000000015FCB1D0
Group *__fastcall Group::findEntity(Group *const this, __int64 entity_id, int a3)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Entity> > >::pointer v6; // rax
  std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Entity> > >::_Self __y; // [rsp+28h] [rbp-88h] BYREF
  char v10[128]; // [rsp+30h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 14 entity_id:3120 64 8 7 it:3122";
  *(_QWORD *)(v3 + 16) = Group::findEntity;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116352;
  *(_DWORD *)(v3 + 48) = a3;
  *(std::map<unsigned int,std::shared_ptr<Entity>>::iterator *)(v3 + 64) = std::map<unsigned int,std::shared_ptr<Entity>>::find(
                                                                             (std::map<unsigned int,std::shared_ptr<Entity>> *const)(entity_id + 80),
                                                                             (const std::map<unsigned int,std::shared_ptr<Entity>>::key_type *)(v3 + 48));
  __y._M_node = std::map<unsigned int,std::shared_ptr<Entity>>::end((std::map<unsigned int,std::shared_ptr<Entity>> *const)(entity_id + 80))._M_node;
  if ( std::operator==(
         (const std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Entity> > >::_Self *)(v3 + 64),
         &__y) )
  {
    std::shared_ptr<Entity>::shared_ptr((std::shared_ptr<Entity> *const)this, 0LL);
  }
  else
  {
    v6 = std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Entity>>>::operator->((const std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Entity> > > *const)(v3 + 64));
    std::shared_ptr<Entity>::shared_ptr((std::shared_ptr<Entity> *const)this, &v6->second);
  }
  if ( v10 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return this;
};

// Line 3130: range 0000000015FCB1D2-0000000015FCB54A
Group *__fastcall Group::findEntityByConfigId(Group *const this, __int64 config_id, int a3)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  std::__detail::_Node_iterator<std::pair<unsigned int const,unsigned int>,false,false>::pointer v6; // rdx
  std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  int v9; // r14d
  std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  int v12; // r14d
  std::map<unsigned int,std::shared_ptr<Entity>>::iterator __for_begin; // [rsp+20h] [rbp-D0h] BYREF
  std::map<unsigned int,std::shared_ptr<Entity>>::iterator __for_end; // [rsp+28h] [rbp-C8h] BYREF
  std::map<unsigned int,std::shared_ptr<Entity>> *__for_range; // [rsp+30h] [rbp-C0h]
  std::pair<unsigned int const,std::shared_ptr<Entity> > *p; // [rsp+38h] [rbp-B8h]
  char v19[176]; // [rsp+40h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 4 14 config_id:3129 64 8 9 iter:3131 96 16 15 entity_ptr:3141";
  *(_QWORD *)(v3 + 16) = Group::findEntityByConfigId;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218959360;
  v5[536862723] = -202178560;
  *(_DWORD *)(v3 + 48) = a3;
  *(std::unordered_map<unsigned int,unsigned int>::iterator *)(v3 + 64) = std::unordered_map<unsigned int,unsigned int>::find(
                                                                            (std::unordered_map<unsigned int,unsigned int> *const)(config_id + 680),
                                                                            (const std::unordered_map<unsigned int,unsigned int>::key_type *)(v3 + 48));
  __for_end._M_node = (std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Entity> > >::_Base_ptr)std::unordered_map<unsigned int,unsigned int>::end((std::unordered_map<unsigned int,unsigned int> *const)(config_id + 680))._M_cur;
  if ( !std::__detail::operator!=<std::pair<unsigned int const,unsigned int>,false>(
          (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false> *)(v3 + 64),
          (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false> *)&__for_end) )
    goto LABEL_15;
  v6 = std::__detail::_Node_iterator<std::pair<unsigned int const,unsigned int>,false,false>::operator->((const std::__detail::_Node_iterator<std::pair<unsigned int const,unsigned int>,false,false> *const)(v3 + 64));
  if ( *(_BYTE *)(((unsigned __int64)&v6->second >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v6 + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v6->second >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4();
  }
  Group::findEntity((Group *const)(v3 + 96), config_id, v6->second);
  if ( std::operator!=<Entity>((const std::shared_ptr<Entity> *)(v3 + 96), 0LL)
    && (v7 = std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96)),
        Entity::getConfigId(v7) == *(_DWORD *)(v3 + 48)) )
  {
    std::shared_ptr<Entity>::shared_ptr((std::shared_ptr<Entity> *const)this, (std::shared_ptr<Entity> *)(v3 + 96));
    v9 = 0;
  }
  else
  {
    v9 = 1;
  }
  std::shared_ptr<Entity>::~shared_ptr((std::shared_ptr<Entity> *const)(v3 + 96));
  if ( v9 == 1 )
  {
LABEL_15:
    __for_range = (std::map<unsigned int,std::shared_ptr<Entity>> *)(config_id + 80);
    __for_begin._M_node = std::map<unsigned int,std::shared_ptr<Entity>>::begin((std::map<unsigned int,std::shared_ptr<Entity>> *const)(config_id + 80))._M_node;
    __for_end._M_node = std::map<unsigned int,std::shared_ptr<Entity>>::end(__for_range)._M_node;
    while ( std::operator!=(&__for_begin, &__for_end) )
    {
      p = std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Entity>>>::operator*(&__for_begin);
      std::shared_ptr<Entity>::shared_ptr((std::shared_ptr<Entity> *const)(v3 + 96), &p->second);
      if ( std::operator!=<Entity>((const std::shared_ptr<Entity> *)(v3 + 96), 0LL)
        && (v10 = std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96)),
            Entity::getConfigId(v10) == *(_DWORD *)(v3 + 48)) )
      {
        std::shared_ptr<Entity>::shared_ptr((std::shared_ptr<Entity> *const)this, (std::shared_ptr<Entity> *)(v3 + 96));
        v12 = 0;
      }
      else
      {
        v12 = 1;
      }
      std::shared_ptr<Entity>::~shared_ptr((std::shared_ptr<Entity> *const)(v3 + 96));
      if ( v12 != 1 )
        goto LABEL_27;
      std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Entity>>>::operator++(&__for_begin);
    }
    std::shared_ptr<Entity>::shared_ptr((std::shared_ptr<Entity> *const)this, 0LL);
  }
LABEL_27:
  if ( v19 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return this;
};

// Line 3150: range 0000000015FCB54C-0000000015FCB795
uint32_t __cdecl Group::getMonsterCount(Group *const this, uint32_t monster_id)
{
  std::shared_ptr<Entity> *v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  uint32_t result; // eax
  uint32_t monster_count; // [rsp+1Ch] [rbp-A4h]
  std::map<unsigned int,std::shared_ptr<Entity>>::iterator __for_begin; // [rsp+20h] [rbp-A0h] BYREF
  std::map<unsigned int,std::shared_ptr<Entity>>::iterator __for_end; // [rsp+28h] [rbp-98h] BYREF
  std::map<unsigned int,std::shared_ptr<Entity>> *__for_range; // [rsp+30h] [rbp-90h]
  std::pair<unsigned int const,std::shared_ptr<Entity> > *p; // [rsp+38h] [rbp-88h]
  char v14[128]; // [rsp+40h] [rbp-80h] BYREF

  v2 = (std::shared_ptr<Entity> *)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = (std::shared_ptr<Entity> *)v3;
  }
  v2->_M_ptr = (std::__shared_ptr<Entity,(__gnu_cxx::_Lock_policy)2>::element_type *)1102416563;
  v2->_M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)"2 32 16 15 entity_ptr:3154 64 16 16 monster_ptr:3157";
  v2[1]._M_ptr = (std::__shared_ptr<Entity,(__gnu_cxx::_Lock_policy)2>::element_type *)Group::getMonsterCount;
  v4 = (_DWORD *)((unsigned __int64)v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862722] = -202178560;
  monster_count = 0;
  __for_range = &this->entity_map_;
  __for_begin._M_node = std::map<unsigned int,std::shared_ptr<Entity>>::begin(&this->entity_map_)._M_node;
  __for_end._M_node = std::map<unsigned int,std::shared_ptr<Entity>>::end(&this->entity_map_)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    p = std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Entity>>>::operator*(&__for_begin);
    std::shared_ptr<Entity>::shared_ptr(v2 + 2, &p->second);
    if ( std::operator!=<Entity>(v2 + 2, 0LL) )
    {
      std::dynamic_pointer_cast<Monster,Entity>(v2 + 4);
      if ( std::operator!=<Monster>((const std::shared_ptr<Monster> *)&v2[4], 0LL) )
      {
        v5 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v2[4]);
        if ( Creature::getLifeState(v5) != LIFE_DEAD )
        {
          if ( !monster_id
            || (v6 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v2[4]),
                monster_id == Monster::getMonsterId(v6)) )
          {
            ++monster_count;
          }
        }
      }
      std::shared_ptr<Monster>::~shared_ptr((std::shared_ptr<Monster> *const)&v2[4]);
    }
    std::shared_ptr<Entity>::~shared_ptr(v2 + 2);
    std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Entity>>>::operator++(&__for_begin);
  }
  result = monster_count;
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    v2->_M_ptr = (std::__shared_ptr<Entity,(__gnu_cxx::_Lock_policy)2>::element_type *)1172321806;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 3167: range 0000000015FCB796-0000000015FCBC77
int32_t __cdecl Group::onEnterPlayerView(Group *const this, Player *player, Entity *entity)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // rdx
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // r14
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // r15
  std::map<unsigned int,int>::mapped_type *v13; // rax
  std::map<unsigned int,int>::mapped_type *v14; // rax
  int32_t v15; // edx
  PlayerAvatarComp *AvatarComp; // r15
  uint32_t group_id; // r14d
  Player *v18; // rax
  PlayerBlossomComp *BlossomComp; // r14
  int32_t result; // eax
  unsigned int val; // [rsp+28h] [rbp-D8h] BYREF
  int32_t sight_count; // [rsp+2Ch] [rbp-D4h]
  std::enable_shared_from_this<Group> v24; // [rsp+30h] [rbp-D0h] BYREF
  std::enable_shared_from_this<Player> v25; // [rsp+40h] [rbp-C0h] BYREF
  common::milog::MiLogStream v26; // [rsp+50h] [rbp-B0h] BYREF
  char v27[144]; // [rsp+70h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v27;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 8 uid:3172 64 16 21 owner_player_ptr:3179";
  *(_QWORD *)(v3 + 16) = Group::onEnterPlayerView;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  common::milog::MiLogStream::create(
    &v26,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/group/group.cpp",
    "onEnterPlayerView",
    3169);
  v6 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
         &v26,
         (const char (*)[34])"entity enter player view, entity:");
  v7 = common::milog::MiLogStream::operator<<<Entity,(Entity*)0>(v6, entity);
  v8 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v7, (const char (*)[13])" group id : ");
  v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, &this->group_id_);
  v10 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v9, (const char (*)[6])" uid:");
  val = Player::getUid(player);
  v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, &val);
  v12 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v11, (const char (*)[8])" count:");
  *(_DWORD *)(v3 + 48) = Player::getUid(player);
  v13 = std::map<unsigned int,int>::operator[](
          &this->viewing_uid_map_,
          (std::map<unsigned int,int>::key_type *)(v3 + 48));
  common::milog::MiLogStream::operator<<<int,(int *)0>(v12, v13);
  common::milog::MiLogStream::~MiLogStream(&v26);
  *(_DWORD *)(v3 + 48) = Player::getUid(player);
  v14 = std::map<unsigned int,int>::operator[](
          &this->viewing_uid_map_,
          (const std::map<unsigned int,int>::key_type *)(v3 + 48));
  if ( *(_BYTE *)(((unsigned __int64)v14 >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)v14 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v14 >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4();
  }
  v15 = (*v14)++;
  sight_count = v15;
  if ( !v15 )
  {
    std::enable_shared_from_this<Player>::shared_from_this(&v25);
    ChallengeComp::notifyOnGuestEnter(&this->challenge_comp_, (PlayerPtr *)&v25);
    std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)&v25);
    AvatarComp = Player::getAvatarComp(player);
    if ( *(_BYTE *)(((unsigned __int64)&this->group_id_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->group_id_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    group_id = this->group_id_;
    std::enable_shared_from_this<Group>::weak_from_this((std::enable_shared_from_this<Group> *const)&v25);
    PlayerAvatarComp::onEnterGroupSight(AvatarComp, (GroupWtr *)&v25, group_id);
    std::weak_ptr<Group>::~weak_ptr((std::weak_ptr<Group> *const)&v25);
    Group::getOwnerPlayer((const Group *const)(v3 + 64));
    if ( std::operator!=<Player>((const std::shared_ptr<Player> *)(v3 + 64), 0LL) )
    {
      v18 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      BlossomComp = Player::getBlossomComp(v18);
      std::enable_shared_from_this<Player>::shared_from_this(&v25);
      std::enable_shared_from_this<Group>::shared_from_this(&v24);
      PlayerBlossomComp::checkAndNotifyBlossomScheduleInfo(BlossomComp, (GroupPtr *)&v24, (PlayerPtr *)&v25);
      std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)&v24);
      std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)&v25);
    }
    std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v3 + 64));
  }
  result = 0;
  if ( v27 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 3190: range 0000000015FCBC78-0000000015FCC25C
int32_t __cdecl Group::onExitPlayerView(Group *const this, Player *player, Entity *entity)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rdx
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // r14
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // r13
  int32_t result; // eax
  std::_Rb_tree_iterator<std::pair<unsigned int const,int> >::pointer v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  uint32_t v20; // edx
  PlayerAvatarComp *AvatarComp; // r15
  uint32_t group_id; // r14d
  unsigned int val; // [rsp+2Ch] [rbp-D4h] BYREF
  std::_Rb_tree_iterator<std::pair<unsigned int const,int> >::_Self __y; // [rsp+30h] [rbp-D0h] BYREF
  int32_t *seen_count; // [rsp+38h] [rbp-C8h]
  std::enable_shared_from_this<Group> v27; // [rsp+40h] [rbp-C0h] BYREF
  common::milog::MiLogStream v28; // [rsp+50h] [rbp-B0h] BYREF
  char v29[144]; // [rsp+70h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v29;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 8 uid:3195 64 8 7 it:3196";
  *(_QWORD *)(v3 + 16) = Group::onExitPlayerView;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116352;
  common::milog::MiLogStream::create(
    &v28,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/group/group.cpp",
    "onExitPlayerView",
    3192);
  v6 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
         &v28,
         (const char (*)[33])"entity exit player view, entity:");
  v7 = common::milog::MiLogStream::operator<<<Entity,(Entity*)0>(v6, entity);
  v8 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v7, (const char (*)[13])" group id : ");
  v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, &this->group_id_);
  v10 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v9, (const char (*)[6])" uid:");
  val = Player::getUid(player);
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, &val);
  common::milog::MiLogStream::~MiLogStream(&v28);
  *(_DWORD *)(v3 + 48) = Player::getUid(player);
  *(std::map<unsigned int,int>::iterator *)(v3 + 64) = std::map<unsigned int,int>::find(
                                                         &this->viewing_uid_map_,
                                                         (const std::map<unsigned int,int>::key_type *)(v3 + 48));
  __y._M_node = std::map<unsigned int,int>::end(&this->viewing_uid_map_)._M_node;
  if ( std::operator==((const std::_Rb_tree_iterator<std::pair<unsigned int const,int> >::_Self *)(v3 + 64), &__y) )
  {
    common::milog::MiLogStream::create(
      &v28,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "onExitPlayerView",
      3199);
    v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(&v28, (const char (*)[16])off_25ABA4E0);
    v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v3 + 48));
    v13 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v12, (const char (*)[11])" group id:");
    v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, &this->group_id_);
    v15 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v14, (const char (*)[12])" entity_id:");
    val = Entity::getEntityId(entity);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, &val);
    common::milog::MiLogStream::~MiLogStream(&v28);
    result = -1;
  }
  else
  {
    v17 = std::_Rb_tree_iterator<std::pair<unsigned int const,int>>::operator->((const std::_Rb_tree_iterator<std::pair<unsigned int const,int> > *const)(v3 + 64));
    seen_count = &v17->second;
    if ( *(_BYTE *)(((unsigned __int64)&v17->second >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)v17 + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v17->second >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4();
    }
    if ( *seen_count > 0 )
    {
      if ( *(_BYTE *)(((unsigned __int64)seen_count >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)seen_count & 7) + 3) >= *(_BYTE *)(((unsigned __int64)seen_count >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4();
      }
      --*seen_count;
    }
    else
    {
      common::milog::MiLogStream::create(
        &v28,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/group/group.cpp",
        "onExitPlayerView",
        3204);
      v18 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
              &v28,
              (const char (*)[19])"invalid seen count");
      v19 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v18, (const char (*)[11])" group id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, &this->group_id_);
      common::milog::MiLogStream::~MiLogStream(&v28);
    }
    if ( *(_BYTE *)(((unsigned __int64)seen_count >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)seen_count & 7) + 3) >= *(_BYTE *)(((unsigned __int64)seen_count >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4();
    }
    if ( *seen_count <= 0 )
    {
      v20 = std::map<unsigned int,int>::size(&this->viewing_uid_map_);
      ChallengeComp::onGroupExitPlayerView(&this->challenge_comp_, player, v20);
      AvatarComp = Player::getAvatarComp(player);
      if ( *(_BYTE *)(((unsigned __int64)&this->group_id_ >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&this->group_id_ >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4();
      }
      group_id = this->group_id_;
      std::enable_shared_from_this<Group>::weak_from_this(&v27);
      PlayerAvatarComp::onExitGroupSight(AvatarComp, &v27._M_weak_this, group_id);
      std::weak_ptr<Group>::~weak_ptr(&v27._M_weak_this);
      std::map<unsigned int,int>::erase(
        &this->viewing_uid_map_,
        (const std::map<unsigned int,int>::key_type *)(v3 + 48));
    }
    result = 0;
  }
  if ( v29 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 3219: range 0000000015FCC25E-0000000015FCC27E
bool __cdecl Group::isActive(const Group *const this)
{
  return !std::map<unsigned int,int>::empty(&this->viewing_uid_map_);
};

// Line 3224: range 0000000015FCC280-0000000015FCC4F1
bool __cdecl Group::isLoadStrategyValid(const Group *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  common::milog::MiLogStream *v4; // rdx
  bool isGroupLoadStrategyValid; // r14
  common::milog::MiLogStream *v6; // rdx
  Scene *v7; // rax
  SceneBlockGroupComp *BlockGroupComp; // rdx
  bool result; // al
  const GroupInfoScriptConfig *group_info_config_ptr; // [rsp+18h] [rbp-98h]
  common::milog::MiLogStream v11; // [rsp+20h] [rbp-90h] BYREF
  char v12[112]; // [rsp+40h] [rbp-70h] BYREF

  v1 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 16 14 scene_ptr:3225";
  *(_QWORD *)(v1 + 16) = Group::isLoadStrategyValid;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202178560;
  Group::getScene((const Group *const)(v1 + 32));
  if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v1 + 32)) )
  {
    common::milog::MiLogStream::create(
      &v11,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "isLoadStrategyValid",
      3228);
    v4 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(&v11, (const char (*)[18])"scene_ptr is null");
    operator<<(v4, this);
    common::milog::MiLogStream::~MiLogStream(&v11);
    isGroupLoadStrategyValid = 0;
  }
  else
  {
    group_info_config_ptr = Group::getInfoScriptConfig(this);
    if ( group_info_config_ptr )
    {
      v7 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
      BlockGroupComp = Scene::getBlockGroupComp(v7);
      isGroupLoadStrategyValid = SceneBlockGroupComp::isGroupLoadStrategyValid(BlockGroupComp, group_info_config_ptr);
    }
    else
    {
      common::milog::MiLogStream::create(
        &v11,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/group/group.cpp",
        "isLoadStrategyValid",
        3235);
      v6 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
             &v11,
             (const char (*)[30])"group_info_config_ptr is null");
      operator<<(v6, this);
      common::milog::MiLogStream::~MiLogStream(&v11);
      isGroupLoadStrategyValid = 0;
    }
  }
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v1 + 32));
  result = isGroupLoadStrategyValid;
  if ( v12 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3243: range 0000000015FCC4F2-0000000015FCC77E
bool __cdecl Group::isCanUnloadByMultistage(const Group *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  common::milog::MiLogStream *v4; // rdx
  bool v5; // r15
  unsigned __int64 v6; // rax
  Scene *v7; // rax
  SceneMultistagePlayComp *MultistagePlayComp; // rax
  bool result; // al
  std::set<long unsigned int>::iterator __for_begin; // [rsp+10h] [rbp-B0h] BYREF
  std::set<long unsigned int>::iterator __for_end; // [rsp+18h] [rbp-A8h] BYREF
  const std::set<long unsigned int> *__for_range; // [rsp+20h] [rbp-A0h]
  uint64_t play_key; // [rsp+28h] [rbp-98h]
  common::milog::MiLogStream v14; // [rsp+30h] [rbp-90h] BYREF
  char v15[112]; // [rsp+50h] [rbp-70h] BYREF

  v1 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 16 14 scene_ptr:3244";
  *(_QWORD *)(v1 + 16) = Group::isCanUnloadByMultistage;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202178560;
  Group::getScene((const Group *const)(v1 + 32));
  if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v1 + 32), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v14,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "isCanUnloadByMultistage",
      3247);
    v4 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
           &v14,
           (const char (*)[31])"group scene is nullptr, group:");
    operator<<(v4, this);
    common::milog::MiLogStream::~MiLogStream(&v14);
    v5 = 1;
  }
  else
  {
    __for_range = &this->multistage_play_key_set_;
    __for_begin._M_node = std::set<unsigned long>::begin(&this->multistage_play_key_set_)._M_node;
    __for_end._M_node = std::set<unsigned long>::end(&this->multistage_play_key_set_)._M_node;
    while ( std::operator!=(&__for_begin, &__for_end) )
    {
      v6 = (unsigned __int64)std::_Rb_tree_const_iterator<unsigned long>::operator*(&__for_begin);
      if ( *(_BYTE *)((v6 >> 3) + 0x7FFF8000) )
        v6 = __asan_report_load8();
      play_key = *(_QWORD *)v6;
      v7 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
      MultistagePlayComp = Scene::getMultistagePlayComp(v7);
      if ( !SceneMultistagePlayComp::isPlayCanUnloadMainGroup(MultistagePlayComp, play_key) )
      {
        v5 = 0;
        goto LABEL_14;
      }
      std::_Rb_tree_const_iterator<unsigned long>::operator++(&__for_begin);
    }
    v5 = 1;
  }
LABEL_14:
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v1 + 32));
  result = v5;
  if ( v15 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3262: range 0000000015FCC780-0000000015FCC84E
bool __cdecl Group::canUnload(const Group *const this)
{
  if ( !Group::isLoadStrategyValid(this) )
    return 1;
  if ( Group::isActive(this) )
    return 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->is_reg_logic_func_ >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)this + 29) & 7) >= *(_BYTE *)(((unsigned __int64)&this->is_reg_logic_func_ >> 3) + 0x7FFF8000) )
  {
    __asan_report_load1(&this->is_reg_logic_func_);
  }
  if ( this->is_reg_logic_func_ )
    return 0;
  if ( !std::unordered_map<std::string,std::shared_ptr<SceneTimer>>::empty(&this->script_timer_map_) )
    return 0;
  return Group::isCanUnloadByMultistage(this);
};

// Line 3283: range 0000000015FCC850-0000000015FCCA9B
int32_t __cdecl Group::getVariableValue(Group *const this, const std::string *name, int32_t *value)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  common::milog::MiLogStream *v6; // rdx
  common::milog::MiLogStream *v7; // rdx
  int32_t result; // eax
  std::__detail::_Node_iterator<std::pair<const std::string,int>,false,true>::pointer v9; // rax
  int32_t second; // ecx
  std::__detail::_Node_iterator_base<std::pair<const std::string,int>,true> __y; // [rsp+28h] [rbp-88h] BYREF
  common::milog::MiLogStream v13; // [rsp+30h] [rbp-80h] BYREF
  char v14[96]; // [rsp+50h] [rbp-60h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 8 7 it:3284";
  *(_QWORD *)(v3 + 16) = Group::getVariableValue;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116352;
  *(std::unordered_map<std::string,int>::iterator *)(v3 + 32) = std::unordered_map<std::string,int>::find(
                                                                  &this->variable_map_,
                                                                  name);
  __y._M_cur = std::unordered_map<std::string,int>::end(&this->variable_map_)._M_cur;
  if ( std::__detail::operator==<std::pair<std::string const,int>,true>(
         (const std::__detail::_Node_iterator_base<std::pair<const std::string,int>,true> *)(v3 + 32),
         &__y) )
  {
    common::milog::MiLogStream::create(
      &v13,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/group/group.cpp",
      "getVariableValue",
      3287);
    v6 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(&v13, (const char (*)[21])off_25ABA700);
    v7 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v6, name);
    operator<<(v7, this);
    common::milog::MiLogStream::~MiLogStream(&v13);
    result = -1;
  }
  else
  {
    v9 = std::__detail::_Node_iterator<std::pair<std::string const,int>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,int>,false,true> *const)(v3 + 32));
    if ( *(_BYTE *)(((unsigned __int64)&v9->second >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&v9->second >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    second = v9->second;
    if ( *(_BYTE *)(((unsigned __int64)value >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)value & 7) + 3) >= *(_BYTE *)(((unsigned __int64)value >> 3) + 0x7FFF8000) )
    {
      __asan_report_store4(value);
    }
    *value = second;
    result = 0;
  }
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3295: range 0000000015FCCA9C-0000000015FCCB7B
int32_t __cdecl Group::start(Group *const this)
{
  common::milog::MiLogStream *v1; // rdx
  common::milog::MiLogStream v3; // [rsp+10h] [rbp-30h] BYREF

  common::milog::MiLogStream::create(
    &v3,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/group/group.cpp",
    "start",
    3296);
  v1 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
         &v3,
         (const char (*)[25])"[TRIGGER_DEBUG] started ");
  operator<<(v1, this);
  common::milog::MiLogStream::~MiLogStream(&v3);
  if ( *(_BYTE *)(((unsigned __int64)&this->is_started_ >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)this + 30) & 7) >= *(_BYTE *)(((unsigned __int64)&this->is_started_ >> 3) + 0x7FFF8000) )
  {
    __asan_report_store1(&this->is_started_);
  }
  this->is_started_ = 1;
  Group::processCachedEvent(this);
  return 0;
};

// Line 3304: range 0000000015FCCB7C-0000000015FCD286
__int64 __fastcall Group::setVariableValue(Group *const this, std::string *name, int32_t value)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  unsigned int v8; // r14d
  std::__detail::_Node_iterator<std::pair<const std::string,int>,false,true>::pointer v9; // rax
  int v10; // r14d
  std::__detail::_Node_iterator<std::pair<const std::string,int>,false,true>::pointer v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  const std::string *v16; // r8
  int *v17; // r9
  Player *v18; // rax
  PlayerEventComp *EventComp; // r14
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v22; // rax
  int32_t v23; // r14d
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v24; // rdx
  int32_t *p_param1; // rax
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v26; // rax
  __int64 result; // rax
  int32_t old_value; // [rsp+24h] [rbp-12Ch]
  std::__detail::_Node_iterator_base<std::pair<const std::string,int>,true> __y; // [rsp+28h] [rbp-128h] BYREF
  std::shared_ptr<GroupVariableSetValueToEvent> __r; // [rsp+30h] [rbp-120h] BYREF
  common::milog::MiLogStream v32; // [rsp+40h] [rbp-110h] BYREF
  char v33[240]; // [rsp+60h] [rbp-F0h] BYREF

  v3 = (unsigned __int64)v33;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 48 4 10 value:3303 64 8 7 it:3305 96 16 21 owner_player_ptr:3318 128 16 14 event_ptr:3321 160 "
                        "16 12 evt_ptr:3331";
  *(_QWORD *)(v3 + 16) = Group::setVariableValue;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218959360;
  v5[536862723] = -219021312;
  v5[536862724] = -219021312;
  v5[536862725] = -202178560;
  *(_DWORD *)(v3 + 48) = value;
  *(std::unordered_map<std::string,int>::iterator *)(v3 + 64) = std::unordered_map<std::string,int>::find(
                                                                  &this->variable_map_,
                                                                  name);
  __y._M_cur = std::unordered_map<std::string,int>::end(&this->variable_map_)._M_cur;
  if ( std::__detail::operator==<std::pair<std::string const,int>,true>(
         (const std::__detail::_Node_iterator_base<std::pair<const std::string,int>,true> *)(v3 + 64),
         &__y) )
  {
    common::milog::MiLogStream::create(
      &v32,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/group/group.cpp",
      "setVariableValue",
      3308);
    v6 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(&v32, (const char (*)[21])off_25ABA700);
    v7 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v6, name);
    operator<<(v7, this);
    common::milog::MiLogStream::~MiLogStream(&v32);
    v8 = -1;
  }
  else
  {
    v9 = std::__detail::_Node_iterator<std::pair<std::string const,int>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,int>,false,true> *const)(v3 + 64));
    if ( *(_BYTE *)(((unsigned __int64)&v9->second >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&v9->second >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    old_value = v9->second;
    v10 = *(_DWORD *)(v3 + 48);
    v11 = std::__detail::_Node_iterator<std::pair<std::string const,int>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,int>,false,true> *const)(v3 + 64));
    if ( *(_BYTE *)(((unsigned __int64)&v11->second >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&v11->second >> 3) + 0x7FFF8000) <= 3 )
    {
      v11 = (std::__detail::_Node_iterator<std::pair<const std::string,int>,false,true>::pointer)__asan_report_store4(&v11->second);
    }
    v11->second = v10;
    common::milog::MiLogStream::create(
      &v32,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/group/group.cpp",
      "setVariableValue",
      3316);
    v12 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
            &v32,
            (const char (*)[24])"setVariableValue, name:");
    v13 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v12, name);
    v14 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v13, (const char (*)[9])", value:");
    v15 = common::milog::MiLogStream::operator<<<int,(int *)0>(v14, (const int *)(v3 + 48));
    operator<<(v15, this);
    common::milog::MiLogStream::~MiLogStream(&v32);
    Group::getOwnerPlayer((const Group *const)(v3 + 96));
    if ( std::operator!=<Player>(0LL, (const std::shared_ptr<Player> *)(v3 + 96)) )
    {
      common::tools::perf::make_shared<GroupVariableSetValueToEvent,unsigned int &,std::string const&,int &>(
        (unsigned int *)&__r,
        (const std::string *)&this->group_id_,
        (int *)name,
        (unsigned int *)(v3 + 48),
        v16,
        v17);
      std::shared_ptr<BaseEvent>::shared_ptr<GroupVariableSetValueToEvent,void>(
        (std::shared_ptr<BaseEvent> *const)(v3 + 128),
        &__r);
      std::shared_ptr<GroupVariableSetValueToEvent>::~shared_ptr(&__r);
      v18 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
      EventComp = Player::getEventComp(v18);
      std::shared_ptr<BaseEvent>::shared_ptr(
        (std::shared_ptr<BaseEvent> *const)(v3 + 160),
        (const std::shared_ptr<BaseEvent> *)(v3 + 128));
      PlayerEventComp::notifyEvent(EventComp, (BaseEventPtr *)(v3 + 160));
      std::shared_ptr<BaseEvent>::~shared_ptr((std::shared_ptr<BaseEvent> *const)(v3 + 160));
      std::shared_ptr<BaseEvent>::~shared_ptr((std::shared_ptr<BaseEvent> *const)(v3 + 128));
    }
    else
    {
      common::milog::MiLogStream::create(
        &v32,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/group/group.cpp",
        "setVariableValue",
        3326);
      v20 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(&v32, (const char (*)[8])" group:");
      v21 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v20, &this->group_id_);
      common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v21, (const char (*)[17])" owner not found");
      common::milog::MiLogStream::~MiLogStream(&v32);
    }
    Group::onVariableValueChanged(this, name, *(_DWORD *)(v3 + 48));
    EventUtil::createEvent((std::shared_ptr<Event> *)(v3 + 160), 3);
    if ( std::operator==<Event>((const std::shared_ptr<Event> *)(v3 + 160), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v32,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/group/group.cpp",
        "setVariableValue",
        3334);
      common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(&v32, (const char (*)[18])"createEvent fails");
      common::milog::MiLogStream::~MiLogStream(&v32);
      v8 = -1;
    }
    else
    {
      v22 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
      std::string::operator=(&v22->source_name, name);
      v23 = *(_DWORD *)(v3 + 48);
      v24 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
      p_param1 = &v24->param1;
      if ( *(_BYTE *)(((unsigned __int64)p_param1 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)p_param1 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_param1 >> 3) + 0x7FFF8000) )
      {
        __asan_report_store4(p_param1);
      }
      v24->param1 = v23;
      v26 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
      if ( *(_BYTE *)(((unsigned __int64)&v26->param2 >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v26->param2 >> 3) + 0x7FFF8000) <= 3 )
      {
        v26 = (std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *)__asan_report_store4(&v26->param2);
      }
      v26->param2 = old_value;
      Group::handleEvent(this, (EventPtr *)(v3 + 160));
      v8 = 0;
    }
    std::shared_ptr<Event>::~shared_ptr((std::shared_ptr<Event> *const)(v3 + 160));
    std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v3 + 96));
  }
  result = v8;
  if ( v33 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3346: range 0000000015FCD288-0000000015FCD89E
__int64 __fastcall Group::changeVariableValue(Group *const this, const std::string *name, int32_t delta)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  unsigned int v8; // r14d
  std::__detail::_Node_iterator<std::pair<const std::string,int>,false,true>::pointer v9; // rax
  int v10; // r14d
  std::__detail::_Node_iterator<std::pair<const std::string,int>,false,true>::pointer v11; // rax
  SelectType_8 v12; // r14d
  std::__detail::_Node_iterator<std::pair<const std::string,int>,false,true>::pointer v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // r14
  std::__detail::_Node_iterator<std::pair<const std::string,int>,false,true>::pointer v19; // rax
  common::milog::MiLogStream *v20; // rax
  std::__detail::_Node_iterator<std::pair<const std::string,int>,false,true>::pointer v21; // rax
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v22; // rax
  std::__detail::_Node_iterator<std::pair<const std::string,int>,false,true>::pointer v23; // rax
  int second; // r14d
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v25; // rdx
  int32_t *p_param1; // rax
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v27; // rax
  __int64 result; // rax
  int32_t old_value; // [rsp+24h] [rbp-DCh]
  std::__detail::_Node_iterator_base<std::pair<const std::string,int>,true> __y; // [rsp+28h] [rbp-D8h] BYREF
  common::milog::MiLogStream v32; // [rsp+30h] [rbp-D0h] BYREF
  char v33[176]; // [rsp+50h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v33;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 4 10 delta:3345 64 8 7 it:3347 96 16 12 evt_ptr:3362";
  *(_QWORD *)(v3 + 16) = Group::changeVariableValue;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218959360;
  v5[536862723] = -202178560;
  *(_DWORD *)(v3 + 48) = delta;
  *(std::unordered_map<std::string,int>::iterator *)(v3 + 64) = std::unordered_map<std::string,int>::find(
                                                                  &this->variable_map_,
                                                                  name);
  __y._M_cur = std::unordered_map<std::string,int>::end(&this->variable_map_)._M_cur;
  if ( std::__detail::operator==<std::pair<std::string const,int>,true>(
         (const std::__detail::_Node_iterator_base<std::pair<const std::string,int>,true> *)(v3 + 64),
         &__y) )
  {
    common::milog::MiLogStream::create(
      &v32,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/group/group.cpp",
      "changeVariableValue",
      3350);
    v6 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(&v32, (const char (*)[21])off_25ABA700);
    v7 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v6, name);
    operator<<(v7, this);
    common::milog::MiLogStream::~MiLogStream(&v32);
    v8 = -1;
  }
  else
  {
    v9 = std::__detail::_Node_iterator<std::pair<std::string const,int>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,int>,false,true> *const)(v3 + 64));
    if ( *(_BYTE *)(((unsigned __int64)&v9->second >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&v9->second >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    old_value = v9->second;
    v10 = *(_DWORD *)(v3 + 48);
    v11 = std::__detail::_Node_iterator<std::pair<std::string const,int>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,int>,false,true> *const)(v3 + 64));
    if ( *(_BYTE *)(((unsigned __int64)&v11->second >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&v11->second >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    v12 = SAFE_ADD<int,int>(v11->second, v10);
    v13 = std::__detail::_Node_iterator<std::pair<std::string const,int>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,int>,false,true> *const)(v3 + 64));
    if ( *(_BYTE *)(((unsigned __int64)&v13->second >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&v13->second >> 3) + 0x7FFF8000) <= 3 )
    {
      v13 = (std::__detail::_Node_iterator<std::pair<const std::string,int>,false,true>::pointer)__asan_report_store4(&v13->second);
    }
    v13->second = v12;
    common::milog::MiLogStream::create(
      &v32,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/group/group.cpp",
      "changeVariableValue",
      3358);
    v14 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
            &v32,
            (const char (*)[27])"changeVariableValue, name:");
    v15 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v14, name);
    v16 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v15, (const char (*)[9])", delta:");
    v17 = common::milog::MiLogStream::operator<<<int,(int *)0>(v16, (const int *)(v3 + 48));
    v18 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v17, (const char (*)[9])", value:");
    v19 = std::__detail::_Node_iterator<std::pair<std::string const,int>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,int>,false,true> *const)(v3 + 64));
    v20 = common::milog::MiLogStream::operator<<<int,(int *)0>(v18, &v19->second);
    operator<<(v20, this);
    common::milog::MiLogStream::~MiLogStream(&v32);
    v21 = std::__detail::_Node_iterator<std::pair<std::string const,int>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,int>,false,true> *const)(v3 + 64));
    if ( *(_BYTE *)(((unsigned __int64)&v21->second >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&v21->second >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    Group::onVariableValueChanged(this, name, v21->second);
    EventUtil::createEvent((std::shared_ptr<Event> *)(v3 + 96), 3);
    if ( std::operator==<Event>((const std::shared_ptr<Event> *)(v3 + 96), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v32,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/group/group.cpp",
        "changeVariableValue",
        3365);
      common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(&v32, (const char (*)[18])"createEvent fails");
      common::milog::MiLogStream::~MiLogStream(&v32);
      v8 = -1;
    }
    else
    {
      v22 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
      std::string::operator=(&v22->source_name, name);
      v23 = std::__detail::_Node_iterator<std::pair<std::string const,int>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,int>,false,true> *const)(v3 + 64));
      if ( *(_BYTE *)(((unsigned __int64)&v23->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v23->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4();
      }
      second = v23->second;
      v25 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
      p_param1 = &v25->param1;
      if ( *(_BYTE *)(((unsigned __int64)p_param1 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)p_param1 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_param1 >> 3) + 0x7FFF8000) )
      {
        __asan_report_store4(p_param1);
      }
      v25->param1 = second;
      v27 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
      if ( *(_BYTE *)(((unsigned __int64)&v27->param2 >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v27->param2 >> 3) + 0x7FFF8000) <= 3 )
      {
        v27 = (std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *)__asan_report_store4(&v27->param2);
      }
      v27->param2 = old_value;
      Group::handleEvent(this, (EventPtr *)(v3 + 96));
      v8 = 0;
    }
    std::shared_ptr<Event>::~shared_ptr((std::shared_ptr<Event> *const)(v3 + 96));
  }
  result = v8;
  if ( v33 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3377: range 0000000015FCD8A0-0000000015FCDEB4
int32_t __cdecl Group::addTrigger(Group *const this, const std::string *trigger_name, TriggerPtr *trigger_ptr)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  int32_t result; // eax
  common::milog::MiLogStream *v8; // rdx
  std::__shared_ptr_access<Trigger,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  std::shared_ptr<Trigger> *v10; // r8
  std::__shared_ptr_access<Trigger,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  uint32_t config_id; // ecx
  char v13; // al
  common::milog::MiLogStream *v14; // rdx
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // r13
  std::__shared_ptr_access<Trigger,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  std::pair<std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<Trigger> >,false,true>,bool> v18; // rax
  common::milog::MiLogStream *v19; // rdx
  __gnu_cxx::__normal_iterator<const data::EventType*,std::vector<data::EventType> >::reference v20; // rdx
  std::pair<std::_Rb_tree_const_iterator<std::string >,bool> v21; // rax
  common::milog::MiLogStream *v22; // rdx
  std::vector<data::EventType>::const_iterator __for_begin; // [rsp+28h] [rbp-A8h] BYREF
  std::vector<data::EventType>::const_iterator __for_end; // [rsp+30h] [rbp-A0h] BYREF
  const TriggerScriptConfig *trigger_script_config_ptr; // [rsp+38h] [rbp-98h]
  const std::vector<data::EventType> *__for_range; // [rsp+40h] [rbp-90h]
  std::set<std::string> *trigger_set; // [rsp+48h] [rbp-88h]
  common::milog::MiLogStream v29; // [rsp+50h] [rbp-80h] BYREF
  char v30[96]; // [rsp+70h] [rbp-60h] BYREF

  v3 = (unsigned __int64)v30;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 4 15 event_type:3402";
  *(_QWORD *)(v3 + 16) = Group::addTrigger;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116348;
  if ( (unsigned __int8)std::string::empty(trigger_name) || std::operator==<Trigger>(trigger_ptr, 0LL) )
  {
    common::milog::MiLogStream::create(
      &v29,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "addTrigger",
      3380);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(&v29, (const char (*)[14])"invalid input");
    common::milog::MiLogStream::~MiLogStream(&v29);
    result = -1;
  }
  else
  {
    trigger_script_config_ptr = Group::findTriggerConfig(this, trigger_name);
    if ( trigger_script_config_ptr )
    {
      v9 = std::__shared_ptr_access<Trigger,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Trigger,(__gnu_cxx::_Lock_policy)2,false,false> *const)trigger_ptr);
      if ( *(_BYTE *)(((unsigned __int64)&v9->config_id >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v9->config_id >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4();
      }
      if ( !v9->config_id )
        goto LABEL_20;
      v11 = std::__shared_ptr_access<Trigger,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Trigger,(__gnu_cxx::_Lock_policy)2,false,false> *const)trigger_ptr);
      if ( *(_BYTE *)(((unsigned __int64)&v11->config_id >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v11->config_id >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4();
      }
      config_id = v11->config_id;
      if ( *(_BYTE *)(((unsigned __int64)&trigger_script_config_ptr->config_id >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&trigger_script_config_ptr->config_id >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4();
      }
      if ( config_id == trigger_script_config_ptr->config_id )
        v13 = 0;
      else
LABEL_20:
        v13 = 1;
      if ( v13 )
      {
        common::milog::MiLogStream::create(
          &v29,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/group/group.cpp",
          "addTrigger",
          3393);
        v14 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
                &v29,
                (const char (*)[39])"trigger config id error, trigger_name:");
        v15 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v14, trigger_name);
        v16 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v15, (const char (*)[12])" config_id:");
        v17 = std::__shared_ptr_access<Trigger,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Trigger,(__gnu_cxx::_Lock_policy)2,false,false> *const)trigger_ptr);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, &v17->config_id);
        common::milog::MiLogStream::~MiLogStream(&v29);
        result = -1;
      }
      else
      {
        v18 = std::unordered_map<std::string,std::shared_ptr<Trigger>>::emplace<std::string const&,std::shared_ptr<Trigger>&>(
                &this->trigger_map_,
                trigger_name,
                trigger_ptr,
                (const std::string *)&this->trigger_map_,
                v10);
        if ( !v18.second )
        {
          common::milog::MiLogStream::create(
            &v29,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/group/group.cpp",
            "addTrigger",
            3399);
          v19 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                  &v29,
                  (const char (*)[19])"duplicate trigger:");
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v19, trigger_name);
          common::milog::MiLogStream::~MiLogStream(&v29);
          result = -1;
        }
        else
        {
          __for_range = &trigger_script_config_ptr->event_vec;
          __for_begin._M_current = std::vector<data::EventType>::begin(&trigger_script_config_ptr->event_vec)._M_current;
          __for_end._M_current = std::vector<data::EventType>::end(&trigger_script_config_ptr->event_vec)._M_current;
          while ( __gnu_cxx::operator!=<data::EventType const*,std::vector<data::EventType>>(&__for_begin, &__for_end) )
          {
            v20 = __gnu_cxx::__normal_iterator<data::EventType const*,std::vector<data::EventType>>::operator*(&__for_begin);
            if ( *(_BYTE *)(((unsigned __int64)v20 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)v20 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v20 >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4();
            }
            *(data::EventType *)(v3 + 32) = *v20;
            trigger_set = std::unordered_map<data::EventType,std::set<std::string>>::operator[](
                            &this->event_map_,
                            (const std::unordered_map<data::EventType,std::set<std::string>>::key_type *)(v3 + 32));
            v21 = std::set<std::string>::insert(trigger_set, trigger_name);
            if ( !v21.second )
            {
              common::milog::MiLogStream::create(
                &v29,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/group/group.cpp",
                "addTrigger",
                3407);
              v22 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                      &v29,
                      (const char (*)[19])"duplicate trigger:");
              common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v22, trigger_name);
              common::milog::MiLogStream::~MiLogStream(&v29);
              result = -1;
              goto LABEL_34;
            }
            __gnu_cxx::__normal_iterator<data::EventType const*,std::vector<data::EventType>>::operator++(&__for_begin);
          }
          result = 0;
        }
      }
    }
    else
    {
      common::milog::MiLogStream::create(
        &v29,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/group/group.cpp",
        "addTrigger",
        3387);
      v8 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
             &v29,
             (const char (*)[39])"findTriggerConfig fails, trigger_name:");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, trigger_name);
      common::milog::MiLogStream::~MiLogStream(&v29);
      result = -1;
    }
  }
LABEL_34:
  if ( v30 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3416: range 0000000015FCDEB6-0000000015FCE1C2
int32_t __cdecl Group::addDefaultTrigger(Group *const this, const std::string *trigger_name)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  common::milog::MiLogStream *v5; // rdx
  int32_t v6; // r14d
  std::__shared_ptr_access<Trigger,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rdx
  uint32_t config_id; // r14d
  std::__shared_ptr_access<Trigger,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  int32_t result; // eax
  const TriggerScriptConfig *trigger_config_ptr; // [rsp+18h] [rbp-98h]
  common::milog::MiLogStream v12; // [rsp+20h] [rbp-90h] BYREF
  char v13[112]; // [rsp+40h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 16 trigger_ptr:3423";
  *(_QWORD *)(v2 + 16) = Group::addDefaultTrigger;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  trigger_config_ptr = Group::findTriggerConfig(this, trigger_name);
  if ( trigger_config_ptr )
  {
    common::tools::perf::make_shared<Trigger>();
    if ( std::operator==<Trigger>((const std::shared_ptr<Trigger> *)(v2 + 32), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v12,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/group/group.cpp",
        "addDefaultTrigger",
        3426);
      common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(&v12, (const char (*)[20])"trigger_ptr is null");
      common::milog::MiLogStream::~MiLogStream(&v12);
      v6 = -1;
    }
    else
    {
      v7 = std::__shared_ptr_access<Trigger,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Trigger,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
      std::string::operator=(v7, trigger_name);
      if ( *(_BYTE *)(((unsigned __int64)&trigger_config_ptr->config_id >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&trigger_config_ptr->config_id >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4();
      }
      config_id = trigger_config_ptr->config_id;
      v9 = std::__shared_ptr_access<Trigger,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Trigger,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
      if ( *(_BYTE *)(((unsigned __int64)&v9->config_id >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v9->config_id >> 3) + 0x7FFF8000) <= 3 )
      {
        v9 = (std::__shared_ptr_access<Trigger,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *)__asan_report_store4(&v9->config_id);
      }
      v9->config_id = config_id;
      v6 = Group::addTrigger(this, trigger_name, (TriggerPtr *)(v2 + 32));
    }
    std::shared_ptr<Trigger>::~shared_ptr((std::shared_ptr<Trigger> *const)(v2 + 32));
  }
  else
  {
    common::milog::MiLogStream::create(
      &v12,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "addDefaultTrigger",
      3420);
    v5 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
           &v12,
           (const char (*)[39])"findTriggerConfig fails, trigger_name:");
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v5, trigger_name);
    common::milog::MiLogStream::~MiLogStream(&v12);
    v6 = -1;
  }
  result = v6;
  if ( v13 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3436: range 0000000015FCE1C4-0000000015FCE45D
int32_t __cdecl Group::delTrigger(Group *const this, const std::string *trigger_name)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  common::milog::MiLogStream *v5; // rdx
  int32_t result; // eax
  __gnu_cxx::__normal_iterator<const data::EventType*,std::vector<data::EventType> >::reference v7; // rdx
  std::vector<data::EventType>::const_iterator __for_begin; // [rsp+18h] [rbp-A8h] BYREF
  std::vector<data::EventType>::const_iterator __for_end; // [rsp+20h] [rbp-A0h] BYREF
  const TriggerScriptConfig *trigger_script_config_ptr; // [rsp+28h] [rbp-98h]
  const std::vector<data::EventType> *__for_range; // [rsp+30h] [rbp-90h]
  std::set<std::string> *trigger_set; // [rsp+38h] [rbp-88h]
  common::milog::MiLogStream v13; // [rsp+40h] [rbp-80h] BYREF
  char v14[96]; // [rsp+60h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 15 event_type:3444";
  *(_QWORD *)(v2 + 16) = Group::delTrigger;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  trigger_script_config_ptr = Group::findTriggerConfig(this, trigger_name);
  if ( trigger_script_config_ptr )
  {
    std::unordered_map<std::string,std::shared_ptr<Trigger>>::erase(&this->trigger_map_, trigger_name);
    __for_range = &trigger_script_config_ptr->event_vec;
    __for_begin._M_current = std::vector<data::EventType>::begin(&trigger_script_config_ptr->event_vec)._M_current;
    __for_end._M_current = std::vector<data::EventType>::end(&trigger_script_config_ptr->event_vec)._M_current;
    while ( __gnu_cxx::operator!=<data::EventType const*,std::vector<data::EventType>>(&__for_begin, &__for_end) )
    {
      v7 = __gnu_cxx::__normal_iterator<data::EventType const*,std::vector<data::EventType>>::operator*(&__for_begin);
      if ( *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v7 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4();
      }
      *(data::EventType *)(v2 + 32) = *v7;
      trigger_set = std::unordered_map<data::EventType,std::set<std::string>>::operator[](
                      &this->event_map_,
                      (const std::unordered_map<data::EventType,std::set<std::string>>::key_type *)(v2 + 32));
      std::set<std::string>::erase(trigger_set, trigger_name);
      __gnu_cxx::__normal_iterator<data::EventType const*,std::vector<data::EventType>>::operator++(&__for_begin);
    }
    result = 0;
  }
  else
  {
    common::milog::MiLogStream::create(
      &v13,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "delTrigger",
      3440);
    v5 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
           &v13,
           (const char (*)[39])"findTriggerConfig fails, trigger_name:");
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v5, trigger_name);
    common::milog::MiLogStream::~MiLogStream(&v13);
    result = -1;
  }
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3454: range 0000000015FCE45E-0000000015FCE490
void __cdecl Group::clearTriggers(Group *const this)
{
  std::unordered_map<std::string,std::shared_ptr<Trigger>>::clear(&this->trigger_map_);
  std::unordered_map<data::EventType,std::set<std::string>>::clear(&this->event_map_);
};

// Line 3461: range 0000000015FCE492-0000000015FCE5D4
TriggerPtr __cdecl Group::findTrigger(Group *const this, const std::string *trigger_name)
{
  const std::string *v2; // rdx
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  std::shared_ptr<Trigger> *p_second; // rdx
  TriggerPtr result; // rax
  const std::string *trigger_namea; // [rsp+8h] [rbp-88h]
  std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<Trigger> >,true> __y; // [rsp+28h] [rbp-68h] BYREF
  char v10[96]; // [rsp+30h] [rbp-60h] BYREF

  trigger_namea = v2;
  v3 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 8 7 it:3462";
  *(_QWORD *)(v3 + 16) = Group::findTrigger;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116352;
  *(std::unordered_map<std::string,std::shared_ptr<Trigger>>::iterator *)(v3 + 32) = std::unordered_map<std::string,std::shared_ptr<Trigger>>::find(
                                                                                       (std::unordered_map<std::string,std::shared_ptr<Trigger>> *const)&trigger_name[9],
                                                                                       trigger_namea);
  __y._M_cur = std::unordered_map<std::string,std::shared_ptr<Trigger>>::end((std::unordered_map<std::string,std::shared_ptr<Trigger>> *const)&trigger_name[9])._M_cur;
  if ( std::__detail::operator!=<std::pair<std::string const,std::shared_ptr<Trigger>>,true>(
         (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<Trigger> >,true> *)(v3 + 32),
         &__y) )
  {
    p_second = &std::__detail::_Node_iterator<std::pair<std::string const,std::shared_ptr<Trigger>>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<Trigger> >,false,true> *const)(v3 + 32))->second;
    std::shared_ptr<Trigger>::shared_ptr((std::shared_ptr<Trigger> *const)this, p_second);
  }
  else
  {
    std::shared_ptr<Trigger>::shared_ptr((std::shared_ptr<Trigger> *const)this, 0LL);
  }
  if ( v10 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<Trigger,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 3470: range 0000000015FCE5D6-0000000015FCE927
int32_t __cdecl Group::foreachEntity(Group *const this, std::function<ForeachPolicy(Entity&)> *p_func)
{
  int32_t v2; // r15d
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  std::map<unsigned int,std::shared_ptr<Entity>>::size_type v6; // rax
  int v7; // r14d
  Entity *v8; // rdx
  int32_t result; // eax
  std::map<unsigned int,std::shared_ptr<Entity>>::iterator __for_begin; // [rsp+20h] [rbp-F0h] BYREF
  std::map<unsigned int,std::shared_ptr<Entity>>::iterator __for_end; // [rsp+28h] [rbp-E8h] BYREF
  std::map<unsigned int,std::shared_ptr<Entity>> *__for_range; // [rsp+30h] [rbp-E0h]
  std::vector<std::weak_ptr<Entity>> *__for_range_0; // [rsp+38h] [rbp-D8h]
  std::weak_ptr<Entity> *entity_wtr; // [rsp+40h] [rbp-D0h]
  std::pair<unsigned int const,std::shared_ptr<Entity> > *__in; // [rsp+48h] [rbp-C8h]
  std::tuple_element<0,std::pair<unsigned int const,std::shared_ptr<Entity> > >::type *entity_id; // [rsp+50h] [rbp-C0h]
  std::tuple_element<1,std::pair<unsigned int const,std::shared_ptr<Entity> > >::type *entity_ptr; // [rsp+58h] [rbp-B8h]
  char v18[176]; // [rsp+60h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 32 16 15 entity_ptr:3479 64 24 15 entity_vec:3471";
  *(_QWORD *)(v3 + 16) = Group::foreachEntity;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -219021312;
  v5[536862722] = -218103808;
  v5[536862723] = -202116109;
  std::vector<std::weak_ptr<Entity>>::vector((std::vector<std::weak_ptr<Entity>> *const)(v3 + 64));
  v6 = std::map<unsigned int,std::shared_ptr<Entity>>::size(&this->entity_map_);
  std::vector<std::weak_ptr<Entity>>::reserve((std::vector<std::weak_ptr<Entity>> *const)(v3 + 64), v6);
  __for_range = &this->entity_map_;
  __for_begin._M_node = std::map<unsigned int,std::shared_ptr<Entity>>::begin(&this->entity_map_)._M_node;
  __for_end._M_node = std::map<unsigned int,std::shared_ptr<Entity>>::end(&this->entity_map_)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    __in = std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Entity>>>::operator*(&__for_begin);
    entity_id = std::get<0ul,unsigned int const,std::shared_ptr<Entity>>(__in);
    entity_ptr = std::get<1ul,unsigned int const,std::shared_ptr<Entity>>(__in);
    std::vector<std::weak_ptr<Entity>>::emplace_back<std::shared_ptr<Entity> &>(
      (std::vector<std::weak_ptr<Entity>> *const)(v3 + 64),
      entity_ptr,
      entity_ptr);
    std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Entity>>>::operator++(&__for_begin);
  }
  __for_range_0 = (std::vector<std::weak_ptr<Entity>> *)(v3 + 64);
  __for_begin._M_node = (std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Entity> > >::_Base_ptr)std::vector<std::weak_ptr<Entity>>::begin((std::vector<std::weak_ptr<Entity>> *const)(v3 + 64))._M_current;
  __for_end._M_node = (std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Entity> > >::_Base_ptr)std::vector<std::weak_ptr<Entity>>::end(__for_range_0)._M_current;
  while ( __gnu_cxx::operator!=<std::weak_ptr<Entity> *,std::vector<std::weak_ptr<Entity>>>(
            (const __gnu_cxx::__normal_iterator<std::weak_ptr<Entity>*,std::vector<std::weak_ptr<Entity>> > *)&__for_begin,
            (const __gnu_cxx::__normal_iterator<std::weak_ptr<Entity>*,std::vector<std::weak_ptr<Entity>> > *)&__for_end) )
  {
    entity_wtr = __gnu_cxx::__normal_iterator<std::weak_ptr<Entity> *,std::vector<std::weak_ptr<Entity>>>::operator*((const __gnu_cxx::__normal_iterator<std::weak_ptr<Entity>*,std::vector<std::weak_ptr<Entity>> > *const)&__for_begin);
    std::weak_ptr<Entity>::lock((const std::weak_ptr<Entity> *const)(v3 + 32));
    if ( std::operator==<Entity>((const std::shared_ptr<Entity> *)(v3 + 32), 0LL) )
    {
      v7 = 0;
    }
    else
    {
      v8 = std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
      if ( std::function<ForeachPolicy ()(Entity &)>::operator()(p_func, v8) )
      {
        v2 = 1;
        v7 = 1;
      }
      else
      {
        v7 = 2;
      }
    }
    std::shared_ptr<Entity>::~shared_ptr((std::shared_ptr<Entity> *const)(v3 + 32));
    if ( v7 && v7 != 2 )
      goto LABEL_18;
    __gnu_cxx::__normal_iterator<std::weak_ptr<Entity> *,std::vector<std::weak_ptr<Entity>>>::operator++((__gnu_cxx::__normal_iterator<std::weak_ptr<Entity>*,std::vector<std::weak_ptr<Entity>> > *const)&__for_begin);
  }
  v2 = 0;
LABEL_18:
  std::vector<std::weak_ptr<Entity>>::~vector((std::vector<std::weak_ptr<Entity>> *const)(v3 + 64));
  result = v2;
  if ( v18 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3494: range 0000000015FCE928-0000000015FCEE1A
int32_t __cdecl Group::handleEvent(Group *const this, EventPtr *evt_ptr)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  common::milog::MiLogStream *v5; // rdx
  int32_t v6; // r14d
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  char v8; // al
  Scene *v9; // rax
  SceneBlockGroupComp *BlockGroupComp; // rax
  common::milog::MiLogStream *v12; // r14
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  common::milog::MiLogStream *v14; // rdx
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  int32_t result; // eax
  common::milog::MiLogStream v17; // [rsp+10h] [rbp-90h] BYREF
  char v18[112]; // [rsp+30h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 14 scene_ptr:3505";
  *(_QWORD *)(v2 + 16) = Group::handleEvent;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  if ( *(char *)(((unsigned __int64)&this->is_handle_event_ >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&this->is_handle_event_);
  if ( !this->is_handle_event_ )
  {
    common::milog::MiLogStream::create(
      &v17,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/group/group.cpp",
      "handleEvent",
      3497);
    v5 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
           &v17,
           (const char (*)[40])"[TRIGGER_DEBUG] group not handle event.");
    operator<<(v5, this);
    common::milog::MiLogStream::~MiLogStream(&v17);
    v6 = 0;
  }
  else if ( std::operator==<Event>(evt_ptr, 0LL) )
  {
    common::milog::MiLogStream::create(
      &v17,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "handleEvent",
      3502);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(&v17, (const char (*)[14])"invalid input");
    common::milog::MiLogStream::~MiLogStream(&v17);
    v6 = -1;
  }
  else
  {
    Group::getScene((const Group *const)(v2 + 32));
    if ( !std::operator!=<Scene>(0LL, (const std::shared_ptr<Scene> *)(v2 + 32)) )
      goto LABEL_15;
    v7 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)evt_ptr);
    if ( *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    if ( v7->event_type == EVENT_GROUP_LOAD )
LABEL_15:
      v8 = 0;
    else
      v8 = 1;
    if ( v8 )
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->is_started_ >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)this + 30) & 7) >= *(_BYTE *)(((unsigned __int64)&this->is_started_ >> 3) + 0x7FFF8000) )
      {
        __asan_report_load1(&this->is_started_);
      }
      if ( !this->is_started_ )
      {
        v9 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
        BlockGroupComp = Scene::getBlockGroupComp(v9);
        if ( SceneBlockGroupComp::isStarted(BlockGroupComp) )
        {
          common::milog::MiLogStream::create(
            &v17,
            &common::milog::MiLogDefault::default_log_obj_,
            2u,
            "./src/group/group.cpp",
            "handleEvent",
            3511);
          v12 = common::milog::MiLogStream::operator<<<char [68],(char *[68])0>(
                  &v17,
                  (const char (*)[68])"[TRIGGER_DEBUG] group not started but block comp started evt_type: ");
          v13 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)evt_ptr);
          v14 = common::milog::MiLogStream::operator<<<data::EventType,(data::EventType*)0>(v12, &v13->event_type);
          operator<<(v14, this);
          common::milog::MiLogStream::~MiLogStream(&v17);
        }
      }
    }
    v15 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)evt_ptr);
    if ( *(_BYTE *)(((unsigned __int64)v15 >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)v15 >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    if ( !Group::hasEventTrigger(this, v15->event_type) )
    {
      v6 = 0;
    }
    else
    {
      std::queue<std::shared_ptr<Event>>::push(&this->cached_event_que_, evt_ptr);
      if ( *(_BYTE *)(((unsigned __int64)&this->is_started_ >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)this + 30) & 7) >= *(_BYTE *)(((unsigned __int64)&this->is_started_ >> 3) + 0x7FFF8000) )
      {
        __asan_report_load1(&this->is_started_);
      }
      if ( this->is_started_ )
        v6 = Group::processCachedEvent(this);
      else
        v6 = 0;
    }
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v2 + 32));
  }
  result = v6;
  if ( v18 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3530: range 0000000015FCEE1C-0000000015FCF94E
int32_t __cdecl Group::processCachedEvent(Group *const this)
{
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  common::milog::MiLogStream *v4; // rdx
  int32_t result; // eax
  const std::shared_ptr<Event> *v6; // rax
  int v7; // r14d
  common::milog::MiLogStream *v8; // r14
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  const char *Description; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  Event *v15; // rdx
  common::milog::MiLogStream *v16; // rdx
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // r14
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  std::string *v22; // rax
  Player *v23; // rax
  common::milog::MiLogStream *v24; // rdx
  char v25; // al
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rbx
  std::allocator<char> __a; // [rsp+13h] [rbp-1CDh] BYREF
  uint32_t count; // [rsp+14h] [rbp-1CCh]
  unsigned __int64 val; // [rsp+18h] [rbp-1C8h] BYREF
  common::milog::MiLogStream v32; // [rsp+20h] [rbp-1C0h] BYREF
  std::queue<std::shared_ptr<Event>> v33; // [rsp+40h] [rbp-1A0h] BYREF
  char v34[336]; // [rsp+90h] [rbp-150h] BYREF

  v1 = (unsigned __int64)v34;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_3(288LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "5 48 16 14 event_ptr:3540 80 16 14 scene_ptr:3560 112 16 21 owner_player_ptr:3563 144 32 15 serv"
                        "er_log:3568 208 40 11 notify:3566";
  *(_QWORD *)(v1 + 16) = Group::processCachedEvent;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = 61937;
  v3[536862722] = 62194;
  v3[536862723] = 62194;
  v3[536862724] = 62194;
  v3[536862725] = -219021312;
  v3[536862726] = 62194;
  v3[536862727] = -218103808;
  v3[536862728] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)&this->is_processing_events >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)this + 28) & 7) >= *(_BYTE *)(((unsigned __int64)&this->is_processing_events >> 3) + 0x7FFF8000) )
  {
    __asan_report_load1(&this->is_processing_events);
  }
  if ( this->is_processing_events )
  {
    common::milog::MiLogStream::create(
      &v32,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/group/group.cpp",
      "processCachedEvent",
      3533);
    v4 = common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
           &v32,
           (const char (*)[47])"enter processCachedEvent more than once,group:");
    operator<<(v4, this);
    common::milog::MiLogStream::~MiLogStream(&v32);
    result = 0;
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->is_processing_events >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)this + 28) & 7) >= *(_BYTE *)(((unsigned __int64)&this->is_processing_events >> 3)
                                                        + 0x7FFF8000) )
    {
      __asan_report_store1(&this->is_processing_events);
    }
    this->is_processing_events = 1;
    count = 0;
    while ( !std::queue<std::shared_ptr<Event>>::empty(&this->cached_event_que_) )
    {
      v6 = std::queue<std::shared_ptr<Event>>::front(&this->cached_event_que_);
      std::shared_ptr<Event>::shared_ptr((std::shared_ptr<Event> *const)(v1 + 48), v6);
      std::queue<std::shared_ptr<Event>>::pop(&this->cached_event_que_);
      if ( std::operator==<Event>((const std::shared_ptr<Event> *)(v1 + 48), 0LL) )
      {
        v7 = 0;
      }
      else
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v1 + 144),
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/group/group.cpp",
          "processCachedEvent",
          3546);
        v8 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(
               (common::milog::MiLogStream *const)(v1 + 144),
               (const char (*)[9])"[EVENT] ");
        std::allocator<char>::allocator(&__a);
        v9 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 48));
        if ( *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4();
        }
        Description = data::getDescription(v9->event_type);
        std::string::basic_string<std::allocator<char>>((std::string *const)&v32, Description, &__a);
        v11 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, (const std::string *)&v32);
        v12 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v11, (const char (*)[12])" event_map:");
        v13 = common::milog::MiLogStream::operator<<<data::EventType,std::set<std::string>>(v12, &this->event_map_);
        v14 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v13, (const char (*)[10])", @group:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, &this->group_id_);
        std::string::~string(&v32);
        std::allocator<char>::~allocator(&__a);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v1 + 144));
        v15 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 48));
        if ( Group::internalHandleEvent(this, v15) )
        {
          common::milog::MiLogStream::create(
            &v32,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/group/group.cpp",
            "processCachedEvent",
            3549);
          v16 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
                  &v32,
                  (const char (*)[30])"process event failed, group: ");
          v17 = operator<<(v16, this);
          v18 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                  v17,
                  (const char (*)[14])" event_type: ");
          v19 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 48));
          common::milog::MiLogStream::operator<<<data::EventType,(data::EventType*)0>(v18, &v19->event_type);
          common::milog::MiLogStream::~MiLogStream(&v32);
        }
        if ( *(_BYTE *)(((unsigned __int64)&this->is_unloaded_ >> 3) + 0x7FFF8000) != 0
          && (((unsigned __int8)this + 92) & 7) >= *(_BYTE *)(((unsigned __int64)&this->is_unloaded_ >> 3) + 0x7FFF8000) )
        {
          __asan_report_load1(&this->is_unloaded_);
        }
        if ( this->is_unloaded_ )
        {
          common::milog::MiLogStream::create(
            &v32,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/group/group.cpp",
            "processCachedEvent",
            3553);
          v20 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(&v32, (const char (*)[8])" group:");
          v21 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v20, &this->group_id_);
          common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(v21, (const char (*)[22])off_25ABB100);
          common::milog::MiLogStream::~MiLogStream(&v32);
          v7 = 1;
        }
        else if ( ++count <= 0x1F4 )
        {
          v7 = 2;
        }
        else
        {
          Group::getScene((const Group *const)(v1 + 80));
          if ( std::operator!=<Scene>((const std::shared_ptr<Scene> *)(v1 + 80), 0LL) )
          {
            std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 80));
            Scene::getOwnPlayer((const Scene *const)(v1 + 112));
            if ( std::operator!=<Player>((const std::shared_ptr<Player> *)(v1 + 112), 0LL) )
            {
              proto::ServerLogNotify::ServerLogNotify((proto::ServerLogNotify *const)(v1 + 208));
              proto::ServerLogNotify::set_log_level((proto::ServerLogNotify *const)(v1 + 208), LOG_LEVEL_ERROR_0);
              if ( *(_BYTE *)(((unsigned __int64)&this->group_id_ >> 3) + 0x7FFF8000) != 0
                && *(_BYTE *)(((unsigned __int64)&this->group_id_ >> 3) + 0x7FFF8000) <= 3 )
              {
                __asan_report_load4();
              }
              std::to_string((std::string *)&v32, this->group_id_);
              std::operator+<char>(
                (std::string *)(v1 + 144),
                "process too many(500) events in one loop!, break, group:",
                (std::string *)&v32);
              std::string::~string(&v32);
              v22 = std::move<std::string &>((std::string *)(v1 + 144));
              proto::ServerLogNotify::set_server_log((proto::ServerLogNotify *const)(v1 + 208), v22);
              v23 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 112));
              Player::sendProto(v23, (const google::protobuf::Message *)(v1 + 208));
              std::string::~string((void *)(v1 + 144));
              proto::ServerLogNotify::~ServerLogNotify((proto::ServerLogNotify *const)(v1 + 208));
            }
            std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v1 + 112));
          }
          common::milog::MiLogStream::create(
            &v32,
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/group/group.cpp",
            "processCachedEvent",
            3575);
          v24 = common::milog::MiLogStream::operator<<<char [58],(char *[58])0>(
                  &v32,
                  (const char (*)[58])"process too many(500) events in one loop!, break, group: ");
          operator<<(v24, this);
          common::milog::MiLogStream::~MiLogStream(&v32);
          std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v1 + 80));
          v7 = 1;
        }
      }
      std::shared_ptr<Event>::~shared_ptr((std::shared_ptr<Event> *const)(v1 + 48));
      if ( v7 )
      {
        if ( v7 != 2 )
          break;
      }
    }
    if ( std::queue<std::shared_ptr<Event>>::empty(&this->cached_event_que_) )
      goto LABEL_38;
    if ( *(_BYTE *)(((unsigned __int64)&this->is_unloaded_ >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)this + 92) & 7) >= *(_BYTE *)(((unsigned __int64)&this->is_unloaded_ >> 3) + 0x7FFF8000) )
    {
      __asan_report_load1(&this->is_unloaded_);
    }
    if ( !this->is_unloaded_ )
      v25 = 1;
    else
LABEL_38:
      v25 = 0;
    if ( v25 )
    {
      common::milog::MiLogStream::create(
        &v32,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/group/group.cpp",
        "processCachedEvent",
        3582);
      v26 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(&v32, (const char (*)[7])"group:");
      v27 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v26, &this->group_id_);
      v28 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v27, (const char (*)[17])" event_que size:");
      val = std::queue<std::shared_ptr<Event>>::size(&this->cached_event_que_);
      common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v28, &val);
      common::milog::MiLogStream::~MiLogStream(&v32);
    }
    std::queue<std::shared_ptr<Event>>::queue<std::deque<std::shared_ptr<Event>>,void>(&v33);
    std::queue<std::shared_ptr<Event>>::swap(&v33, &this->cached_event_que_);
    std::queue<std::shared_ptr<Event>>::~queue((std::queue<std::shared_ptr<Event>>_0 *const)&v33);
    if ( *(_BYTE *)(((unsigned __int64)&this->is_processing_events >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)this + 28) & 7) >= *(_BYTE *)(((unsigned __int64)&this->is_processing_events >> 3)
                                                        + 0x7FFF8000) )
    {
      __asan_report_store1(&this->is_processing_events);
    }
    this->is_processing_events = 0;
    result = 0;
  }
  if ( v34 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 3593: range 0000000015FCF950-0000000015FCFABA
bool __cdecl Group::isTriggerEventMatch(Group *const this, const std::string *trigger_name, const Event *evt)
{
  common::milog::MiLogStream *v3; // rdx
  bool v5; // al
  const TriggerScriptConfig *trigger_script_config_ptr; // [rsp+28h] [rbp-38h]
  common::milog::MiLogStream v8; // [rsp+30h] [rbp-30h] BYREF

  trigger_script_config_ptr = Group::findTriggerConfig(this, trigger_name);
  if ( trigger_script_config_ptr )
  {
    if ( *(_BYTE *)(((unsigned __int64)evt >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)evt >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    if ( (unsigned int)(evt->event_type - 4) > 1 )
    {
      v5 = (unsigned __int8)std::string::empty(&trigger_script_config_ptr->source_name) != 1
        && std::operator!=<char>(&evt->source_name, &trigger_script_config_ptr->source_name);
      return !v5;
    }
    else
    {
      return Group::isRegionEventMatch(this, &trigger_script_config_ptr->source_name, evt);
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v8,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "isTriggerEventMatch",
      3597);
    v3 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
           &v8,
           (const char (*)[39])"findTriggerConfig fails, trigger_name:");
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v3, trigger_name);
    common::milog::MiLogStream::~MiLogStream(&v8);
    return 0;
  }
};

// Line 3652: range 0000000015FCFABC-0000000015FCFD8E
bool __cdecl Group::isRegionEventMatch(Group *const this, const std::string *source_name, const Event *evt)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  bool result; // al
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream v10; // [rsp+20h] [rbp-80h] BYREF
  char v11[96]; // [rsp+40h] [rbp-60h] BYREF

  v3 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 4 23 script_entity_type:3664";
  *(_QWORD *)(v3 + 16) = Group::isRegionEventMatch;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116348;
  if ( (unsigned __int8)std::string::empty(source_name) )
  {
    if ( *(_BYTE *)(((unsigned __int64)&evt->param2 >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&evt->param2 >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    result = evt->param2 == 1;
  }
  else if ( std::operator==<char>("0", source_name) )
  {
    result = 1;
  }
  else
  {
    *(_DWORD *)(v3 + 32) = 0;
    if ( common::tools::StringUtils::strToNum<int>(source_name, (int *)(v3 + 32), 1) )
    {
      common::milog::MiLogStream::create(
        &v10,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/group/group.cpp",
        "isRegionEventMatch",
        3667);
      v7 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v10, source_name);
      common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v7, (const char (*)[17])" strToNum failed");
      common::milog::MiLogStream::~MiLogStream(&v10);
      result = 0;
    }
    else if ( !proto::ProtEntityType_IsValid(*(_DWORD *)(v3 + 32)) )
    {
      common::milog::MiLogStream::create(
        &v10,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/group/group.cpp",
        "isRegionEventMatch",
        3672);
      v8 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v10, source_name);
      common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
        v8,
        (const char (*)[31])" ProtEntityType_IsValid failed");
      common::milog::MiLogStream::~MiLogStream(&v10);
      result = 0;
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&evt->param2 >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&evt->param2 >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4();
      }
      result = evt->param2 == *(_DWORD *)(v3 + 32);
    }
  }
  if ( v11 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3681: range 0000000015FCFD90-0000000015FD05CC
void __fastcall Group::replaceAmberWindWithNewGadgetId(Group *const this, uint32_t old_gadget_id)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  common::milog::MiLogStream *v5; // rax
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v8; // rdx
  Scene *v9; // rax
  uint32_t *v10; // rdx
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  uint32_t entity_id_0; // [rsp+1Ch] [rbp-624h]
  std::unordered_map<unsigned int,unsigned int>::iterator __for_begin; // [rsp+20h] [rbp-620h] BYREF
  std::unordered_map<unsigned int,unsigned int>::iterator __for_end; // [rsp+28h] [rbp-618h] BYREF
  std::unordered_map<unsigned int,unsigned int> *__for_range; // [rsp+30h] [rbp-610h]
  std::vector<unsigned int> *__for_range_0; // [rsp+38h] [rbp-608h]
  std::vector<unsigned int> *__for_range_1; // [rsp+40h] [rbp-600h]
  const std::pair<unsigned int const,unsigned int> *v19; // [rsp+48h] [rbp-5F8h]
  std::tuple_element<0,const std::pair<unsigned int const,unsigned int> >::type *config_id; // [rsp+50h] [rbp-5F0h]
  std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *entity_id; // [rsp+58h] [rbp-5E8h]
  common::milog::MiLogStream v22; // [rsp+60h] [rbp-5E0h] BYREF
  GroupEntityParam v23; // [rsp+80h] [rbp-5C0h] BYREF
  char v24[944]; // [rsp+290h] [rbp-3B0h] BYREF

  v2 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(896LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "6 32 4 18 old_gadget_id:3680 48 16 14 scene_ptr:3682 80 16 15 gadget_ptr:3711 112 24 18 entity_i"
                        "d_vec:3688 176 24 18 config_id_vec:3689 240 520 17 entity_param:3707";
  *(_QWORD *)(v2 + 16) = Group::replaceAmberWindWithNewGadgetId;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61956;
  v4[536862722] = 62194;
  v4[536862723] = 62194;
  v4[536862724] = -218959360;
  v4[536862725] = 62194;
  v4[536862726] = -218959360;
  v4[536862727] = 62194;
  v4[536862743] = -218103808;
  v4[536862744] = -202116109;
  v4[536862745] = -202116109;
  v4[536862746] = -202116109;
  v4[536862747] = -202116109;
  *(_DWORD *)(v2 + 32) = old_gadget_id;
  Group::getScene((const Group *const)(v2 + 48));
  if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v2 + 48), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v22,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "replaceAmberWindWithNewGadgetId",
      3685);
    v5 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(&v22, (const char (*)[18])"scene_ptr is null");
    operator<<(v5, this);
    common::milog::MiLogStream::~MiLogStream(&v22);
  }
  else
  {
    std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v2 + 112));
    std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v2 + 176));
    __for_range = &this->config_id_2_eid_map_;
    __for_begin._M_cur = std::unordered_map<unsigned int,unsigned int>::begin(&this->config_id_2_eid_map_)._M_cur;
    __for_end._M_cur = std::unordered_map<unsigned int,unsigned int>::end(&this->config_id_2_eid_map_)._M_cur;
    while ( std::__detail::operator!=<std::pair<unsigned int const,unsigned int>,false>(&__for_begin, &__for_end) )
    {
      v19 = std::__detail::_Node_iterator<std::pair<unsigned int const,unsigned int>,false,false>::operator*(&__for_begin);
      config_id = std::get<0ul,unsigned int const,unsigned int>(v19);
      entity_id = (std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *)std::get<1ul,unsigned int const,unsigned int>(v19);
      if ( *(_BYTE *)(((unsigned __int64)entity_id >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)entity_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)entity_id >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4();
      }
      Group::findEntity<Gadget>((Group *const)(v2 + 80), (uint32_t)this);
      if ( std::operator!=<Gadget>((const std::shared_ptr<Gadget> *)(v2 + 80), 0LL) )
      {
        v6 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 80));
        if ( Gadget::getGadgetId(v6) == *(_DWORD *)(v2 + 32) )
        {
          std::vector<unsigned int>::emplace_back<unsigned int const&>(
            (std::vector<unsigned int> *const)(v2 + 112),
            entity_id,
            entity_id);
          std::vector<unsigned int>::emplace_back<unsigned int const&>(
            (std::vector<unsigned int> *const)(v2 + 176),
            config_id,
            config_id);
        }
      }
      std::shared_ptr<Gadget>::~shared_ptr((std::shared_ptr<Gadget> *const)(v2 + 80));
      std::__detail::_Node_iterator<std::pair<unsigned int const,unsigned int>,false,false>::operator++(&__for_begin);
    }
    __for_range_0 = (std::vector<unsigned int> *)(v2 + 112);
    __for_begin._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false>::__node_type *)std::vector<unsigned int>::begin((std::vector<unsigned int> *const)(v2 + 112))._M_current;
    __for_end._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false>::__node_type *)std::vector<unsigned int>::end(__for_range_0)._M_current;
    while ( __gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(
              (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)&__for_begin,
              (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)&__for_end) )
    {
      v8 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)&__for_begin);
      if ( *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v8 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4();
      }
      entity_id_0 = *v8;
      v9 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 48));
      Scene::delEntity(v9, entity_id_0, &VisionContext::miss_context);
      __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)&__for_begin);
    }
    GroupEntityParam::GroupEntityParam((GroupEntityParam *const)(v2 + 240));
    __for_range_1 = (std::vector<unsigned int> *)(v2 + 176);
    __for_begin._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false>::__node_type *)std::vector<unsigned int>::begin((std::vector<unsigned int> *const)(v2 + 176))._M_current;
    __for_end._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false>::__node_type *)std::vector<unsigned int>::end(__for_range_1)._M_current;
    while ( __gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(
              (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)&__for_begin,
              (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)&__for_end) )
    {
      v10 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)&__for_begin);
      if ( *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v10 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4();
      }
      Group::genGroupEntityParam(&v23, this, *v10);
      GroupEntityParam::operator=((GroupEntityParam *const)(v2 + 240), &v23);
      GroupEntityParam::~GroupEntityParam(&v23);
      Group::createGadget((Group *const)(v2 + 80), (const GroupEntityParam *)this);
      if ( std::operator==<Gadget>(0LL, (const std::shared_ptr<Gadget> *)(v2 + 80)) )
      {
        common::milog::MiLogStream::create(
          &v22,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/group/group.cpp",
          "replaceAmberWindWithNewGadgetId",
          3714);
        v11 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                &v22,
                (const char (*)[29])"createGadget old_gadget_id: ");
        v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v11,
                (const unsigned int *)(v2 + 32));
        common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v12, (const char (*)[8])" failed");
        common::milog::MiLogStream::~MiLogStream(&v22);
      }
      std::shared_ptr<Gadget>::~shared_ptr((std::shared_ptr<Gadget> *const)(v2 + 80));
      __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)&__for_begin);
    }
    GroupEntityParam::~GroupEntityParam((GroupEntityParam *const)(v2 + 240));
    std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v2 + 176));
    std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v2 + 112));
  }
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v2 + 48));
  if ( v24 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF805C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8064) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF806C) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8060) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8068) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 3721: range 0000000015FD05CE-0000000015FD0710
std::shared_ptr<SceneTimer> __cdecl Group::getScriptTimer(Group *const this, const std::string *name)
{
  const std::string *v2; // rdx
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  std::shared_ptr<SceneTimer> *p_second; // rdx
  std::shared_ptr<SceneTimer> result; // rax
  const std::string *namea; // [rsp+8h] [rbp-88h]
  std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<SceneTimer> >,true> __y; // [rsp+28h] [rbp-68h] BYREF
  char v10[96]; // [rsp+30h] [rbp-60h] BYREF

  namea = v2;
  v3 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 8 9 iter:3722";
  *(_QWORD *)(v3 + 16) = Group::getScriptTimer;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116352;
  *(std::unordered_map<std::string,std::shared_ptr<SceneTimer>>::iterator *)(v3 + 32) = std::unordered_map<std::string,std::shared_ptr<SceneTimer>>::find(
                                                                                          (std::unordered_map<std::string,std::shared_ptr<SceneTimer>> *const)&name[23],
                                                                                          namea);
  __y._M_cur = std::unordered_map<std::string,std::shared_ptr<SceneTimer>>::end((std::unordered_map<std::string,std::shared_ptr<SceneTimer>> *const)&name[23])._M_cur;
  if ( std::__detail::operator!=<std::pair<std::string const,std::shared_ptr<SceneTimer>>,true>(
         (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<SceneTimer> >,true> *)(v3 + 32),
         &__y) )
  {
    p_second = &std::__detail::_Node_iterator<std::pair<std::string const,std::shared_ptr<SceneTimer>>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<SceneTimer> >,false,true> *const)(v3 + 32))->second;
    std::shared_ptr<SceneTimer>::shared_ptr((std::shared_ptr<SceneTimer> *const)this, p_second);
  }
  else
  {
    std::shared_ptr<SceneTimer>::shared_ptr((std::shared_ptr<SceneTimer> *const)this, 0LL);
  }
  if ( v10 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<SceneTimer,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 3731: range 0000000015FD0712-0000000015FD07D0
void __cdecl Group::addScriptTimer(
        Group *const this,
        const std::string *name,
        std::shared_ptr<SceneTimer> *p_timer_ptr)
{
  std::shared_ptr<SceneTimer> *v3; // r8
  std::pair<std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<SceneTimer> >,false,true>,bool> v4; // rax
  common::milog::MiLogStream *v5; // rdx
  common::milog::MiLogStream v6; // [rsp+20h] [rbp-30h] BYREF

  v4 = std::unordered_map<std::string,std::shared_ptr<SceneTimer>>::emplace<std::string const&,std::shared_ptr<SceneTimer>&>(
         &this->script_timer_map_,
         name,
         p_timer_ptr,
         (const std::string *)&this->script_timer_map_,
         v3);
  if ( !v4.second )
  {
    common::milog::MiLogStream::create(
      &v6,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "addScriptTimer",
      3734);
    v5 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
           &v6,
           (const char (*)[29])"Already exist script timer: ");
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v5, name);
    common::milog::MiLogStream::~MiLogStream(&v6);
  }
};

// Line 3739: range 0000000015FD07D2-0000000015FD0889
void __cdecl Group::delScriptTimer(Group *const this, const std::string *name)
{
  common::milog::MiLogStream *v2; // rdx
  common::milog::MiLogStream v3; // [rsp+10h] [rbp-30h] BYREF

  if ( !std::unordered_map<std::string,std::shared_ptr<SceneTimer>>::erase(&this->script_timer_map_, name) )
  {
    common::milog::MiLogStream::create(
      &v3,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "delScriptTimer",
      3742);
    v2 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(&v3, (const char (*)[25])off_25ABB5E0);
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v2, name);
    common::milog::MiLogStream::~MiLogStream(&v3);
  }
};

// Line 3748: range 0000000015FD088A-0000000015FD095C
void __fastcall Group::onChestShowCutScene(Group *const this, uint32_t config_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  char v5[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 config_id:3747";
  *(_QWORD *)(v2 + 16) = Group::onChestShowCutScene;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  *(_DWORD *)(v2 + 32) = config_id;
  std::unordered_set<unsigned int>::insert(
    &this->show_cutscene_chest_set_,
    (const std::unordered_set<unsigned int>::value_type *)(v2 + 32));
  if ( v5 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 3754: range 0000000015FD095E-0000000015FD0A61
bool __fastcall Group::isChestCutSceneShowed(Group *const this, uint32_t config_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  bool result; // al
  std::__detail::_Node_iterator_base<unsigned int,false> __x; // [rsp+10h] [rbp-70h] BYREF
  std::__detail::_Node_iterator_base<unsigned int,false> __y; // [rsp+18h] [rbp-68h] BYREF
  char v8[96]; // [rsp+20h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 config_id:3753";
  *(_QWORD *)(v2 + 16) = Group::isChestCutSceneShowed;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  *(_DWORD *)(v2 + 32) = config_id;
  __y._M_cur = std::unordered_set<unsigned int>::cend(&this->show_cutscene_chest_set_)._M_cur;
  __x._M_cur = std::unordered_set<unsigned int>::find(
                 &this->show_cutscene_chest_set_,
                 (const std::unordered_set<unsigned int>::key_type *)(v2 + 32))._M_cur;
  result = std::__detail::operator!=<unsigned int,false>(&__x, &__y);
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3760: range 0000000015FD0A62-0000000015FD0E27
uint32_t __cdecl Group::findCurrentWeather(Group *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r13
  uint32_t weather; // r14d
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  common::milog::MiLogStream *v6; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rdx
  common::milog::MiLogStream *v10; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rdx
  unsigned __int64 v14; // rax
  unsigned __int64 v15; // rdx
  uint32_t result; // eax
  const SceneScriptConfig *scene_script_config_ptr; // [rsp+10h] [rbp-A0h]
  const GroupInfoScriptConfig *group_info_config_ptr; // [rsp+18h] [rbp-98h]
  common::milog::MiLogStream v19; // [rsp+20h] [rbp-90h] BYREF
  char v20[112]; // [rsp+40h] [rbp-70h] BYREF

  v1 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 16 14 scene_ptr:3761";
  *(_QWORD *)(v1 + 16) = Group::findCurrentWeather;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202178560;
  Group::getScene((const Group *const)(v1 + 32));
  if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v1 + 32)) )
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->init_param_.weather >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->init_param_.weather >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    weather = this->init_param_.weather;
  }
  else
  {
    v5 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
    scene_script_config_ptr = Scene::getScriptConfig(v5);
    if ( scene_script_config_ptr )
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->group_id_ >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&this->group_id_ >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4();
      }
      group_info_config_ptr = SceneScriptConfig::findGroupInfoConfig(scene_script_config_ptr, this->group_id_);
      if ( group_info_config_ptr )
      {
        v14 = (unsigned __int64)std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
        if ( *(_BYTE *)((v14 >> 3) + 0x7FFF8000) )
          v14 = __asan_report_load8();
        v15 = *(_QWORD *)v14 + 288LL;
        if ( *(_BYTE *)((v15 >> 3) + 0x7FFF8000) )
          v14 = __asan_report_load8();
        weather = (*(__int64 (__fastcall **)(unsigned __int64, Vector3 *))v15)(v14, &group_info_config_ptr->pos);
      }
      else
      {
        common::milog::MiLogStream::create(
          &v19,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/group/group.cpp",
          "findCurrentWeather",
          3775);
        v10 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
                &v19,
                (const char (*)[34])"findGroupInfoConfig fails, scene:");
        v11 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
        v12 = common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v10, v11);
        v13 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v12, (const char (*)[8])" group:");
        operator<<(v13, this);
        common::milog::MiLogStream::~MiLogStream(&v19);
        weather = 0;
      }
    }
    else
    {
      common::milog::MiLogStream::create(
        &v19,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/group/group.cpp",
        "findCurrentWeather",
        3769);
      v6 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
             &v19,
             (const char (*)[30])"getScriptConfig fails, scene:");
      v7 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
      v8 = common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v6, v7);
      v9 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v8, (const char (*)[8])" group:");
      operator<<(v9, this);
      common::milog::MiLogStream::~MiLogStream(&v19);
      weather = 0;
    }
  }
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v1 + 32));
  result = weather;
  if ( v20 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3782: range 0000000015FD0E28-0000000015FD10D1
void __cdecl Group::clearDeletedEntityRecords(
        Group *const this,
        const std::set<unsigned int> *monster_config_set,
        const std::set<unsigned int> *gadget_config_set)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r13
  std::_Rb_tree_const_iterator<unsigned int>::reference v6; // rdx
  std::_Rb_tree_const_iterator<unsigned int>::reference v7; // rdx
  std::set<unsigned int>::iterator __for_begin; // [rsp+20h] [rbp-90h] BYREF
  std::set<unsigned int>::iterator __for_end; // [rsp+28h] [rbp-88h] BYREF
  std::set<unsigned int> *monster_set; // [rsp+30h] [rbp-80h]
  const std::set<unsigned int> *__for_range; // [rsp+38h] [rbp-78h]
  std::set<unsigned int> *gadget_set; // [rsp+40h] [rbp-70h]
  const std::set<unsigned int> *__for_range_0; // [rsp+48h] [rbp-68h]
  char v15[96]; // [rsp+50h] [rbp-60h] BYREF

  v3 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 4 14 config_id:3789";
  *(_QWORD *)(v3 + 16) = Group::clearDeletedEntityRecords;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116348;
  *(_DWORD *)(v3 + 32) = 2;
  monster_set = std::map<proto::ProtEntityType,std::set<unsigned int>>::operator[](
                  &this->deleted_entity_record_map_,
                  (std::map<proto::ProtEntityType,std::set<unsigned int>>::key_type *)(v3 + 32));
  __for_range = monster_config_set;
  __for_begin._M_node = std::set<unsigned int>::begin(monster_config_set)._M_node;
  __for_end._M_node = std::set<unsigned int>::end(monster_config_set)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v6 = std::_Rb_tree_const_iterator<unsigned int>::operator*(&__for_begin);
    if ( *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v6 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4();
    }
    *(_DWORD *)(v3 + 32) = *v6;
    std::set<unsigned int>::erase(monster_set, (const std::set<unsigned int>::key_type *)(v3 + 32));
    std::_Rb_tree_const_iterator<unsigned int>::operator++(&__for_begin);
  }
  *(_DWORD *)(v3 + 32) = 4;
  gadget_set = std::map<proto::ProtEntityType,std::set<unsigned int>>::operator[](
                 &this->deleted_entity_record_map_,
                 (std::map<proto::ProtEntityType,std::set<unsigned int>>::key_type *)(v3 + 32));
  __for_range_0 = gadget_config_set;
  __for_begin._M_node = std::set<unsigned int>::begin(gadget_config_set)._M_node;
  __for_end._M_node = std::set<unsigned int>::end(__for_range_0)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v7 = std::_Rb_tree_const_iterator<unsigned int>::operator*(&__for_begin);
    if ( *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v7 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4();
    }
    *(_DWORD *)(v3 + 32) = *v7;
    std::set<unsigned int>::erase(gadget_set, (const std::set<unsigned int>::key_type *)(v3 + 32));
    std::_Rb_tree_const_iterator<unsigned int>::operator++(&__for_begin);
  }
  if ( v15 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 3796: range 0000000015FD10D2-0000000015FD1318
void __cdecl Group::createTriggers(
        Group *const this,
        const std::set<std::string> *trigger_set,
        const GroupScriptConfig *group_script_config,
        bool is_clear)
{
  common::milog::MiLogStream *v4; // rax
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  std::set<std::string>::iterator __for_begin; // [rsp+28h] [rbp-58h] BYREF
  std::set<std::string>::iterator __for_end; // [rsp+30h] [rbp-50h] BYREF
  const std::set<std::string> *__for_range; // [rsp+38h] [rbp-48h]
  const std::string *trigger_name; // [rsp+40h] [rbp-40h]
  common::milog::MiLogStream v16; // [rsp+50h] [rbp-30h] BYREF

  if ( is_clear )
    Group::clearTriggers(this, trigger_set);
  __for_range = trigger_set;
  __for_begin._M_node = std::set<std::string>::begin(trigger_set)._M_node;
  __for_end._M_node = std::set<std::string>::end(trigger_set)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    trigger_name = std::_Rb_tree_const_iterator<std::string>::operator*(&__for_begin);
    if ( GroupScriptConfig::findTriggerConfig(group_script_config, trigger_name) )
    {
      if ( !common::tools::MiscUtils::isContains<std::unordered_map<std::string,std::shared_ptr<Trigger>>,std::string>(
              &this->trigger_map_,
              trigger_name) )
      {
        if ( Group::addDefaultTrigger(this, trigger_name) )
        {
          common::milog::MiLogStream::create(
            &v16,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/group/group.cpp",
            "createTriggers",
            3816);
          v7 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
                 &v16,
                 (const char (*)[35])"addDefaultTrigger fails, group_id:");
          v8 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, &this->group_id_);
          v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                 v8,
                 (const char (*)[16])", trigger_name:");
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v9, trigger_name);
          common::milog::MiLogStream::~MiLogStream(&v16);
        }
      }
    }
    else
    {
      common::milog::MiLogStream::create(
        &v16,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/group/group.cpp",
        "createTriggers",
        3807);
      v4 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
             &v16,
             (const char (*)[35])"findTriggerConfig fails, group_id:");
      v5 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v4, &this->group_id_);
      v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v5, (const char (*)[16])", trigger_name:");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v6, trigger_name);
      common::milog::MiLogStream::~MiLogStream(&v16);
    }
    std::_Rb_tree_const_iterator<std::string>::operator++(&__for_begin);
  }
};

// Line 3823: range 0000000015FD131A-0000000015FD15B9
void __cdecl Group::clearTriggers(Group *const this, const std::set<std::string> *keep_trigger_set)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  std::unordered_map<std::string,std::shared_ptr<Trigger>>::iterator __for_begin; // [rsp+10h] [rbp-C0h] BYREF
  std::unordered_map<std::string,std::shared_ptr<Trigger>>::iterator __for_end; // [rsp+18h] [rbp-B8h] BYREF
  std::unordered_map<std::string,std::shared_ptr<Trigger>> *__for_range; // [rsp+20h] [rbp-B0h]
  std::vector<std::string> *__for_range_0; // [rsp+28h] [rbp-A8h]
  const std::string *name_0; // [rsp+30h] [rbp-A0h]
  const std::pair<const std::string,std::shared_ptr<Trigger> > *v10; // [rsp+38h] [rbp-98h]
  std::tuple_element<0,const std::pair<const std::string,std::shared_ptr<Trigger> > >::type *name; // [rsp+40h] [rbp-90h]
  std::tuple_element<1,const std::pair<const std::string,std::shared_ptr<Trigger> > >::type *trigger_ptr; // [rsp+48h] [rbp-88h]
  char v13[128]; // [rsp+50h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 24 17 del_name_vec:3824";
  *(_QWORD *)(v2 + 16) = Group::clearTriggers;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218103808;
  v4[536862722] = -202116109;
  std::vector<std::string>::vector((std::vector<std::string> *const)(v2 + 32));
  __for_range = &this->trigger_map_;
  __for_begin._M_cur = std::unordered_map<std::string,std::shared_ptr<Trigger>>::begin(&this->trigger_map_)._M_cur;
  __for_end._M_cur = std::unordered_map<std::string,std::shared_ptr<Trigger>>::end(&this->trigger_map_)._M_cur;
  while ( std::__detail::operator!=<std::pair<std::string const,std::shared_ptr<Trigger>>,true>(
            &__for_begin,
            &__for_end) )
  {
    v10 = std::__detail::_Node_iterator<std::pair<std::string const,std::shared_ptr<Trigger>>,false,true>::operator*(&__for_begin);
    name = std::get<0ul,std::string const,std::shared_ptr<Trigger>>(v10);
    trigger_ptr = (std::tuple_element<1,const std::pair<const std::string,std::shared_ptr<Trigger> > >::type *)std::get<1ul,std::string const,std::shared_ptr<Trigger>>(v10);
    if ( !common::tools::MiscUtils::isContains<std::set<std::string> const,std::string>(keep_trigger_set, name) )
      std::vector<std::string>::push_back((std::vector<std::string> *const)(v2 + 32), name);
    std::__detail::_Node_iterator<std::pair<std::string const,std::shared_ptr<Trigger>>,false,true>::operator++(&__for_begin);
  }
  __for_range_0 = (std::vector<std::string> *)(v2 + 32);
  __for_begin._M_cur = (std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<Trigger> >,true>::__node_type *)std::vector<std::string>::begin((std::vector<std::string> *const)(v2 + 32))._M_current;
  __for_end._M_cur = (std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<Trigger> >,true>::__node_type *)std::vector<std::string>::end(__for_range_0)._M_current;
  while ( __gnu_cxx::operator!=<std::string *,std::vector<std::string>>(
            (const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)&__for_begin,
            (const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)&__for_end) )
  {
    name_0 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator*((const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *const)&__for_begin);
    Group::delTrigger(this, name_0);
    __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator++((__gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *const)&__for_begin);
  }
  std::vector<std::string>::~vector((std::vector<std::string> *const)(v2 + 32));
  if ( v13 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 3839: range 0000000015FD15BA-0000000015FD1DF4
void __cdecl Group::createMonsters(
        Group *const this,
        const std::set<unsigned int> *monster_config_set,
        const GroupScriptConfig *group_script_config,
        bool is_clear)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  std::_Rb_tree_const_iterator<unsigned int>::reference v7; // rdx
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  char v15; // r14
  const MonsterExcelConfigMgr *p_monster_config_mgr; // rdi
  uint32_t v17; // ecx
  char v18; // r15
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  std::set<unsigned int>::iterator __for_begin; // [rsp+30h] [rbp-3D0h] BYREF
  std::set<unsigned int>::iterator __for_end; // [rsp+38h] [rbp-3C8h] BYREF
  std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false> __x; // [rsp+40h] [rbp-3C0h] BYREF
  std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false> __y; // [rsp+48h] [rbp-3B8h] BYREF
  const std::set<unsigned int> *__for_range; // [rsp+50h] [rbp-3B0h]
  const MonsterScriptConfig *monster_config_ptr; // [rsp+58h] [rbp-3A8h]
  std::shared_ptr<Config> v35; // [rsp+60h] [rbp-3A0h] BYREF
  common::milog::MiLogStream v36; // [rsp+70h] [rbp-390h] BYREF
  common::milog::MiLogStream v37; // [rsp+90h] [rbp-370h] BYREF
  common::milog::MiLogStream v38; // [rsp+B0h] [rbp-350h] BYREF
  char v39[816]; // [rsp+D0h] [rbp-330h] BYREF

  v4 = (unsigned __int64)v39;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_4(768LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 48 4 17 climate_type:3846 64 4 14 config_id:3848 80 16 16 monster_ptr:3879 112 520 17 entity_param:3878";
  *(_QWORD *)(v4 + 16) = Group::createMonsters;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = 61956;
  v6[536862723] = 62194;
  v6[536862739] = -218103808;
  v6[536862740] = -202116109;
  v6[536862741] = -202116109;
  v6[536862742] = -202116109;
  v6[536862743] = -202116109;
  if ( is_clear )
    Group::removeEntities<std::set<unsigned int>>(this, monster_config_set, PROT_ENTITY_MONSTER);
  *(_DWORD *)(v4 + 48) = Group::findCurrentWeather(this);
  __for_range = monster_config_set;
  __for_begin._M_node = std::set<unsigned int>::begin(monster_config_set)._M_node;
  __for_end._M_node = std::set<unsigned int>::end(monster_config_set)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v7 = std::_Rb_tree_const_iterator<unsigned int>::operator*(&__for_begin);
    if ( *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v7 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4();
    }
    *(_DWORD *)(v4 + 64) = *v7;
    if ( !Group::isEntityDeleted(this, PROT_ENTITY_MONSTER, *(_DWORD *)(v4 + 64))
      && !(unsigned __int8)Group::isOneoffMonsterDead(this, *(_DWORD *)(v4 + 64)) )
    {
      __y._M_cur = std::unordered_map<unsigned int,unsigned int>::end(&this->config_id_2_eid_map_)._M_cur;
      __x._M_cur = std::unordered_map<unsigned int,unsigned int>::find(
                     &this->config_id_2_eid_map_,
                     (const std::unordered_map<unsigned int,unsigned int>::key_type *)(v4 + 64))._M_cur;
      if ( std::__detail::operator!=<std::pair<unsigned int const,unsigned int>,false>(&__x, &__y) )
      {
        common::milog::MiLogStream::create(
          &v36,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/group/group.cpp",
          "createMonsters",
          3862);
        v8 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(&v36, (const char (*)[8])"group: ");
        v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, &this->group_id_);
        v10 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v9, (const char (*)[13])" config_id: ");
        v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v10,
                (const unsigned int *)(v4 + 64));
        common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v11, (const char (*)[7])" alive");
        common::milog::MiLogStream::~MiLogStream(&v36);
      }
      else
      {
        monster_config_ptr = GroupScriptConfig::findMonsterConfig(group_script_config, *(_DWORD *)(v4 + 64));
        if ( monster_config_ptr )
        {
          v15 = 0;
          if ( !*(_DWORD *)(v4 + 48) )
            goto LABEL_21;
          ServiceBox::findService<GameserverService>();
          GameserverService::getConfig((GameserverService *const)&v35);
          v15 = 1;
          p_monster_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v35)->design_config.txt_config_mgr.monster_config_mgr;
          v17 = *(_DWORD *)(v4 + 48);
          if ( *(_BYTE *)(((unsigned __int64)&monster_config_ptr->monster_id >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)monster_config_ptr + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&monster_config_ptr->monster_id >> 3)
                                                                             + 0x7FFF8000) )
          {
            p_monster_config_mgr = (const MonsterExcelConfigMgr *)&monster_config_ptr->monster_id;
            __asan_report_load4();
          }
          if ( !MonsterExcelConfigMgr::checkMonsterWeather(p_monster_config_mgr, monster_config_ptr->monster_id, v17) )
            v18 = 1;
          else
LABEL_21:
            v18 = 0;
          if ( v15 )
            std::shared_ptr<Config>::~shared_ptr(&v35);
          if ( v18 )
          {
            common::milog::MiLogStream::create(
              &v38,
              &common::milog::MiLogDefault::default_log_obj_,
              1u,
              "./src/group/group.cpp",
              "createMonsters",
              3874);
            v19 = common::milog::MiLogStream::operator<<<Group,(Group*)0>(&v38, this);
            v20 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(
                    v19,
                    (const char (*)[13])" config_id: ");
            v21 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v20,
                    (const unsigned int *)(v4 + 64));
            v22 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                    v21,
                    (const char (*)[20])" weather NOT match:");
            v23 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v22,
                    (const unsigned int *)(v4 + 48));
            v24 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                    v23,
                    (const char (*)[12])", group_id:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v24, &this->group_id_);
            common::milog::MiLogStream::~MiLogStream(&v38);
          }
          else
          {
            Group::genGroupEntityParam((GroupEntityParam *)(v4 + 112), this, *(_DWORD *)(v4 + 64));
            Group::createMonster((Group *const)(v4 + 80), (const GroupEntityParam *)this);
            if ( std::operator==<Monster>((const std::shared_ptr<Monster> *)(v4 + 80), 0LL) )
            {
              common::milog::MiLogStream::create(
                &v38,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/group/group.cpp",
                "createMonsters",
                3882);
              v25 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                      &v38,
                      (const char (*)[32])"createMonster fails, config_id:");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v25,
                (const unsigned int *)(v4 + 64));
              common::milog::MiLogStream::~MiLogStream(&v38);
            }
            std::shared_ptr<Monster>::~shared_ptr((std::shared_ptr<Monster> *const)(v4 + 80));
            GroupEntityParam::~GroupEntityParam((GroupEntityParam *const)(v4 + 112));
          }
        }
        else
        {
          common::milog::MiLogStream::create(
            &v37,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/group/group.cpp",
            "createMonsters",
            3868);
          v12 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
                  &v37,
                  (const char (*)[35])"findMonsterConfig fails, group_id:");
          v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, &this->group_id_);
          v14 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v13, (const char (*)[13])", config_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, (const unsigned int *)(v4 + 64));
          common::milog::MiLogStream::~MiLogStream(&v37);
        }
      }
    }
    std::_Rb_tree_const_iterator<unsigned int>::operator++(&__for_begin);
  }
  if ( v39 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF804C) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8054) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF805C) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 3889: range 0000000015FD1DF6-0000000015FD25C6
void __cdecl Group::createGadgets(
        Group *const this,
        const std::set<unsigned int> *gadget_config_set,
        const GroupScriptConfig *group_script_config,
        bool is_clear)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // rbx
  std::_Rb_tree_const_iterator<unsigned int>::reference v7; // rdx
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  std::set<unsigned int>::iterator __for_begin; // [rsp+28h] [rbp-3B8h] BYREF
  std::set<unsigned int>::iterator __for_end; // [rsp+30h] [rbp-3B0h] BYREF
  std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false> __x; // [rsp+38h] [rbp-3A8h] BYREF
  std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false> __y; // [rsp+40h] [rbp-3A0h] BYREF
  const std::set<unsigned int> *__for_range; // [rsp+48h] [rbp-398h]
  const GadgetScriptConfig *gadget_script_config_ptr; // [rsp+50h] [rbp-390h]
  const std::string *drop_category; // [rsp+58h] [rbp-388h]
  std::shared_ptr<Config> v33; // [rsp+60h] [rbp-380h] BYREF
  common::milog::MiLogStream v34; // [rsp+70h] [rbp-370h] BYREF
  common::milog::MiLogStream v35; // [rsp+90h] [rbp-350h] BYREF
  common::milog::MiLogStream v36; // [rsp+B0h] [rbp-330h] BYREF
  char v37[784]; // [rsp+D0h] [rbp-310h] BYREF

  v4 = (unsigned __int64)v37;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_4(736LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 32 4 14 config_id:3895 48 16 15 gadget_ptr:3929 80 520 17 entity_param:3928";
  *(_QWORD *)(v4 + 16) = Group::createGadgets;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = 61956;
  v6[536862722] = 62194;
  v6[536862738] = -218103808;
  v6[536862739] = -202116109;
  v6[536862740] = -202116109;
  v6[536862741] = -202116109;
  v6[536862742] = -202116109;
  if ( is_clear )
    Group::removeEntities<std::set<unsigned int>>(this, gadget_config_set, PROT_ENTITY_GADGET);
  __for_range = gadget_config_set;
  __for_begin._M_node = std::set<unsigned int>::begin(gadget_config_set)._M_node;
  __for_end._M_node = std::set<unsigned int>::end(gadget_config_set)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v7 = std::_Rb_tree_const_iterator<unsigned int>::operator*(&__for_begin);
    if ( *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v7 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4();
    }
    *(_DWORD *)(v4 + 32) = *v7;
    gadget_script_config_ptr = GroupScriptConfig::findGadgetConfig(group_script_config, *(_DWORD *)(v4 + 32));
    if ( gadget_script_config_ptr )
    {
      if ( !Group::isEntityDeleted(this, PROT_ENTITY_GADGET, *(_DWORD *)(v4 + 32))
        && !(unsigned __int8)Group::isOneoffGadgetDead(this, *(_DWORD *)(v4 + 32)) )
      {
        ServiceBox::findService<GameserverService>();
        GameserverService::getConfig((GameserverService *const)&v33);
        v11 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v33);
        drop_category = DropExcelConfigMgr::getChestDropCategory(
                          &v11->design_config.txt_config_mgr.drop_config_mgr,
                          &gadget_script_config_ptr->drop_tag);
        std::shared_ptr<Config>::~shared_ptr(&v33);
        if ( common::tools::MiscUtils::isContains<std::unordered_set<std::string>,std::string>(
               &this->init_param_.exclude_gadget_drop_category_set,
               drop_category) )
        {
          common::milog::MiLogStream::create(
            &v35,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/group/group.cpp",
            "createGadgets",
            3916);
          v12 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                  &v35,
                  (const char (*)[20])"skip drop_category:");
          v13 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v12, drop_category);
          v14 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v13, (const char (*)[11])" group_id:");
          v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, &this->group_id_);
          v16 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v15, (const char (*)[12])" config_id:");
          v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v16,
                  (const unsigned int *)(v4 + 32));
          v18 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v17, (const char (*)[12])" gadget_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
            v18,
            &gadget_script_config_ptr->gadget_id);
          common::milog::MiLogStream::~MiLogStream(&v35);
        }
        else
        {
          __y._M_cur = std::unordered_map<unsigned int,unsigned int>::end(&this->config_id_2_eid_map_)._M_cur;
          __x._M_cur = std::unordered_map<unsigned int,unsigned int>::find(
                         &this->config_id_2_eid_map_,
                         (const std::unordered_map<unsigned int,unsigned int>::key_type *)(v4 + 32))._M_cur;
          if ( std::__detail::operator!=<std::pair<unsigned int const,unsigned int>,false>(&__x, &__y) )
          {
            common::milog::MiLogStream::create(
              &v36,
              &common::milog::MiLogDefault::default_log_obj_,
              1u,
              "./src/group/group.cpp",
              "createGadgets",
              3923);
            v19 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(&v36, (const char (*)[8])"group: ");
            v20 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, &this->group_id_);
            v21 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(
                    v20,
                    (const char (*)[13])" config_id: ");
            v22 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v21,
                    (const unsigned int *)(v4 + 32));
            common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v22, (const char (*)[7])" alive");
            common::milog::MiLogStream::~MiLogStream(&v36);
          }
          else
          {
            Group::genGroupEntityParam((GroupEntityParam *)(v4 + 80), this, *(_DWORD *)(v4 + 32));
            Group::createGadget((Group *const)(v4 + 48), (const GroupEntityParam *)this);
            if ( std::operator==<Gadget>((const std::shared_ptr<Gadget> *)(v4 + 48), 0LL) )
            {
              common::milog::MiLogStream::create(
                &v36,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/group/group.cpp",
                "createGadgets",
                3932);
              v23 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                      &v36,
                      (const char (*)[31])"createGadget fails, config_id:");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v23,
                (const unsigned int *)(v4 + 32));
              common::milog::MiLogStream::~MiLogStream(&v36);
            }
            std::shared_ptr<Gadget>::~shared_ptr((std::shared_ptr<Gadget> *const)(v4 + 48));
            GroupEntityParam::~GroupEntityParam((GroupEntityParam *const)(v4 + 80));
          }
        }
      }
    }
    else
    {
      common::milog::MiLogStream::create(
        &v34,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/group/group.cpp",
        "createGadgets",
        3900);
      v8 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
             &v34,
             (const char (*)[34])"findGadgetConfig fails, group_id:");
      v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, &this->group_id_);
      v10 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v9, (const char (*)[13])", config_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v4 + 32));
      common::milog::MiLogStream::~MiLogStream(&v34);
    }
    std::_Rb_tree_const_iterator<unsigned int>::operator++(&__for_begin);
  }
  if ( v37 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8048) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8050) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8058) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8058) = -168430091;
  }
};

// Line 3939: range 0000000015FD25C8-0000000015FD332A
void __cdecl Group::createFlowGagdets(
        Group *const this,
        const std::map<unsigned int,SuiteDiskGadgetConfig> *gadget_config_map,
        const GroupScriptConfig *group_script_configs,
        bool is_clear)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  unsigned __int64 n; // rax
  __int64 v8; // rdi
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  Gadget *v13; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rcx
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rax
  std::map<unsigned int,SuiteDiskGadgetConfig>::const_iterator __for_begin; // [rsp+28h] [rbp-3A8h] BYREF
  std::map<unsigned int,SuiteDiskGadgetConfig>::const_iterator __for_end; // [rsp+30h] [rbp-3A0h] BYREF
  std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false> __x; // [rsp+38h] [rbp-398h] BYREF
  const std::map<unsigned int,SuiteDiskGadgetConfig> *__for_range; // [rsp+40h] [rbp-390h]
  std::tuple_element<0,std::pair<unsigned int const,SuiteDiskGadgetConfig> >::type *config_id; // [rsp+48h] [rbp-388h]
  std::tuple_element<1,std::pair<unsigned int const,SuiteDiskGadgetConfig> >::type *config; // [rsp+50h] [rbp-380h]
  const GadgetScriptConfig *gadget_script_config_ptr; // [rsp+58h] [rbp-378h]
  const std::string *drop_category; // [rsp+60h] [rbp-370h]
  std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false> __y; // [rsp+68h] [rbp-368h] BYREF
  std::shared_ptr<Config> v48; // [rsp+70h] [rbp-360h] BYREF
  std::pair<unsigned int const,SuiteDiskGadgetConfig> __in; // [rsp+80h] [rbp-350h] BYREF
  common::milog::MiLogStream v50; // [rsp+A0h] [rbp-330h] BYREF
  char v51[784]; // [rsp+C0h] [rbp-310h] BYREF

  v4 = (unsigned __int64)v51;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_4(736LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 32 4 10 state:3947 48 16 15 gadget_ptr:3954 80 520 17 entity_param:3988";
  *(_QWORD *)(v4 + 16) = Group::createFlowGagdets;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = 61956;
  v6[536862722] = 62194;
  v6[536862738] = -218103808;
  v6[536862739] = -202116109;
  v6[536862740] = -202116109;
  v6[536862741] = -202116109;
  v6[536862742] = -202116109;
  if ( is_clear )
    Group::removeEntities<std::map<unsigned int,SuiteDiskGadgetConfig>>(this, gadget_config_map, PROT_ENTITY_GADGET);
  __for_range = gadget_config_map;
  __for_begin._M_node = std::map<unsigned int,SuiteDiskGadgetConfig>::begin(gadget_config_map)._M_node;
  __for_end._M_node = std::map<unsigned int,SuiteDiskGadgetConfig>::end(gadget_config_map)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    n = (unsigned __int64)std::_Rb_tree_const_iterator<std::pair<unsigned int const,SuiteDiskGadgetConfig>>::operator*(&__for_begin);
    if ( (char)(n & 7) >= *(_BYTE *)((n >> 3) + 0x7FFF8000) && *(_BYTE *)((n >> 3) + 0x7FFF8000) != 0
      || *(_BYTE *)(((n + 27) >> 3) + 0x7FFF8000) != 0
      && (char)((n + 27) & 7) >= *(_BYTE *)(((n + 27) >> 3) + 0x7FFF8000) )
    {
      n = __asan_report_load_n(n, 28LL);
    }
    v8 = *(_QWORD *)(n + 8);
    *(_QWORD *)&__in.first = *(_QWORD *)n;
    *(_QWORD *)&__in.second.point_id = v8;
    *(_QWORD *)&__in.second.route_id = *(_QWORD *)(n + 16);
    *(_DWORD *)&__in.second.is_started = *(_DWORD *)(n + 24);
    config_id = std::get<0ul,unsigned int const,SuiteDiskGadgetConfig>(&__in);
    config = std::get<1ul,unsigned int const,SuiteDiskGadgetConfig>(&__in);
    if ( *(_BYTE *)(((unsigned __int64)config >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)config & 7) + 3) >= *(_BYTE *)(((unsigned __int64)config >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4();
    }
    *(_DWORD *)(v4 + 32) = config->state;
    if ( *(_BYTE *)(((unsigned __int64)config_id >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)config_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)config_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4();
    }
    gadget_script_config_ptr = GroupScriptConfig::findGadgetConfig(group_script_configs, *config_id);
    if ( gadget_script_config_ptr )
    {
      if ( *(_BYTE *)(((unsigned __int64)config_id >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)config_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)config_id >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4();
      }
      Group::findEntityByConfigId<Gadget>((Group *const)(v4 + 48), (uint32_t)this);
      if ( std::operator!=<Gadget>(0LL, (const std::shared_ptr<Gadget> *)(v4 + 48)) )
      {
        v12 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 48));
        if ( Gadget::getState(v12) != *(_DWORD *)(v4 + 32) )
        {
          v13 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 48));
          Gadget::setState(v13, *(_DWORD *)(v4 + 32), 0, 1);
        }
      }
      else
      {
        if ( *(_BYTE *)(((unsigned __int64)config_id >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)config_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)config_id >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4();
        }
        if ( !Group::isEntityDeleted(this, PROT_ENTITY_GADGET, *config_id) )
        {
          if ( *(_BYTE *)(((unsigned __int64)config_id >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)config_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)config_id >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4();
          }
          if ( !(unsigned __int8)Group::isOneoffGadgetDead(this, *config_id) )
          {
            ServiceBox::findService<GameserverService>();
            GameserverService::getConfig((GameserverService *const)&v48);
            v14 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v48);
            drop_category = DropExcelConfigMgr::getChestDropCategory(
                              &v14->design_config.txt_config_mgr.drop_config_mgr,
                              &gadget_script_config_ptr->drop_tag);
            std::shared_ptr<Config>::~shared_ptr(&v48);
            if ( common::tools::MiscUtils::isContains<std::unordered_set<std::string>,std::string>(
                   &this->init_param_.exclude_gadget_drop_category_set,
                   drop_category) )
            {
              common::milog::MiLogStream::create(
                &v50,
                &common::milog::MiLogDefault::default_log_obj_,
                1u,
                "./src/group/group.cpp",
                "createFlowGagdets",
                3976);
              v15 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                      &v50,
                      (const char (*)[20])"skip drop_category:");
              v16 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v15, drop_category);
              v17 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                      v16,
                      (const char (*)[11])" group_id:");
              v18 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, &this->group_id_);
              v19 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                      v18,
                      (const char (*)[12])" config_id:");
              v20 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, config_id);
              v21 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                      v20,
                      (const char (*)[12])" gadget_id:");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v21,
                &gadget_script_config_ptr->gadget_id);
              common::milog::MiLogStream::~MiLogStream(&v50);
            }
            else
            {
              __y._M_cur = std::unordered_map<unsigned int,unsigned int>::end(&this->config_id_2_eid_map_)._M_cur;
              __x._M_cur = std::unordered_map<unsigned int,unsigned int>::find(&this->config_id_2_eid_map_, config_id)._M_cur;
              if ( std::__detail::operator!=<std::pair<unsigned int const,unsigned int>,false>(&__x, &__y) )
              {
                common::milog::MiLogStream::create(
                  &v50,
                  &common::milog::MiLogDefault::default_log_obj_,
                  1u,
                  "./src/group/group.cpp",
                  "createFlowGagdets",
                  3983);
                v22 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(&v50, (const char (*)[8])"group: ");
                v23 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v22, &this->group_id_);
                v24 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(
                        v23,
                        (const char (*)[13])" config_id: ");
                v25 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v24, config_id);
                common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v25, (const char (*)[7])" alive");
                common::milog::MiLogStream::~MiLogStream(&v50);
              }
              else
              {
                if ( *(_BYTE *)(((unsigned __int64)config_id >> 3) + 0x7FFF8000) != 0
                  && (char)(((unsigned __int8)config_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)config_id >> 3)
                                                                              + 0x7FFF8000) )
                {
                  __asan_report_load4();
                }
                Group::genGroupEntityParam((GroupEntityParam *)(v4 + 80), this, *config_id);
                std::optional<unsigned int>::optional<unsigned int &,true>(
                  (std::optional<unsigned int> *const)&__y,
                  (unsigned int *)(v4 + 32));
                *(std::__detail::_Node_iterator_base<std::pair<unsigned int const,unsigned int>,false> *)(v4 + 576) = __y;
                if ( *(_BYTE *)(((unsigned __int64)&config->move_type >> 3) + 0x7FFF8000) != 0
                  && (char)((((_BYTE)config + 8) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config->move_type >> 3)
                                                                       + 0x7FFF8000) )
                {
                  __asan_report_load4();
                }
                if ( config->move_type == MOVING_PLATFORM_USE_CONFIG )
                {
                  if ( *(_BYTE *)(((unsigned __int64)&config->route_id >> 3) + 0x7FFF8000) != 0
                    && (char)((((_BYTE)config + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config->route_id >> 3)
                                                                          + 0x7FFF8000) )
                  {
                    __asan_report_load4();
                  }
                  *(_DWORD *)(v4 + 584) = config->route_id;
                  if ( *(_BYTE *)(((unsigned __int64)&config->route_index >> 3) + 0x7FFF8000) != 0
                    && (char)((((_BYTE)config + 16) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config->route_index >> 3)
                                                                          + 0x7FFF8000) )
                  {
                    __asan_report_load4();
                  }
                  *(_DWORD *)(v4 + 588) = config->route_index;
                  if ( *(_BYTE *)(((unsigned __int64)&config->is_started >> 3) + 0x7FFF8000) != 0
                    && (((unsigned __int8)config + 20) & 7) >= *(_BYTE *)(((unsigned __int64)&config->is_started >> 3)
                                                                        + 0x7FFF8000) )
                  {
                    __asan_report_load1(&config->is_started);
                  }
                  *(_BYTE *)(v4 + 592) = config->is_started;
                  *(_BYTE *)(v4 + 593) = 1;
                  common::milog::MiLogStream::create(
                    &v50,
                    &common::milog::MiLogDefault::default_log_obj_,
                    1u,
                    "./src/group/group.cpp",
                    "createFlowGagdets",
                    3996);
                  v26 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(
                          &v50,
                          (const char (*)[8])" group:");
                  v27 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v26, &this->group_id_);
                  v28 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                          v27,
                          (const char (*)[11])" platform:");
                  v29 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v28, config_id);
                  v30 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                          v29,
                          (const char (*)[14])" route_index:");
                  v31 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                          v30,
                          &config->route_index);
                  v32 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(
                          v31,
                          (const char (*)[10])" started:");
                  if ( *(_BYTE *)(((unsigned __int64)&config->is_started >> 3) + 0x7FFF8000) != 0
                    && (((unsigned __int8)config + 20) & 7) >= *(_BYTE *)(((unsigned __int64)&config->is_started >> 3)
                                                                        + 0x7FFF8000) )
                  {
                    __asan_report_load1(&config->is_started);
                  }
                  v33 = common::milog::MiLogStream::operator<<(v32, config->is_started);
                  v34 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(
                          v33,
                          (const char (*)[10])"route_id:");
                  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v34, &config->route_id);
                  common::milog::MiLogStream::~MiLogStream(&v50);
                }
                Group::createGadget((Group *const)&v48, (const GroupEntityParam *)this);
                std::shared_ptr<Gadget>::operator=(
                  (std::shared_ptr<Gadget> *const)(v4 + 48),
                  (std::shared_ptr<Gadget> *)&v48);
                std::shared_ptr<Gadget>::~shared_ptr((std::shared_ptr<Gadget> *const)&v48);
                if ( std::operator==<Gadget>((const std::shared_ptr<Gadget> *)(v4 + 48), 0LL) )
                {
                  common::milog::MiLogStream::create(
                    &v50,
                    &common::milog::MiLogDefault::default_log_obj_,
                    3u,
                    "./src/group/group.cpp",
                    "createFlowGagdets",
                    4002);
                  v35 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                          &v50,
                          (const char (*)[31])"createGadget fails, config_id:");
                  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v35, config_id);
                  common::milog::MiLogStream::~MiLogStream(&v50);
                }
                GroupEntityParam::~GroupEntityParam((GroupEntityParam *const)(v4 + 80));
              }
            }
          }
        }
      }
      std::shared_ptr<Gadget>::~shared_ptr((std::shared_ptr<Gadget> *const)(v4 + 48));
    }
    else
    {
      common::milog::MiLogStream::create(
        &v50,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/group/group.cpp",
        "createFlowGagdets",
        3951);
      v9 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
             &v50,
             (const char (*)[34])"findGadgetConfig fails, group_id:");
      v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, &this->group_id_);
      v11 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v10, (const char (*)[13])", config_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, config_id);
      common::milog::MiLogStream::~MiLogStream(&v50);
    }
    std::_Rb_tree_const_iterator<std::pair<unsigned int const,SuiteDiskGadgetConfig>>::operator++(&__for_begin);
  }
  if ( v51 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8048) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8050) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8058) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8058) = -168430091;
  }
};

// Line 4009: range 0000000015FD332C-0000000015FD38AC
void __cdecl Group::createRegions(
        Group *const this,
        const std::set<unsigned int> *region_config_set,
        const GroupScriptConfig *group_script_config,
        bool is_clear)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // rbx
  std::_Rb_tree_const_iterator<unsigned int>::reference v7; // rdx
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  std::set<unsigned int>::iterator __for_begin; // [rsp+20h] [rbp-370h] BYREF
  std::set<unsigned int>::iterator __for_end; // [rsp+28h] [rbp-368h] BYREF
  const std::set<unsigned int> *__for_range; // [rsp+30h] [rbp-360h]
  common::milog::MiLogStream v20; // [rsp+40h] [rbp-350h] BYREF
  common::milog::MiLogStream v21; // [rsp+60h] [rbp-330h] BYREF
  char v22[784]; // [rsp+80h] [rbp-310h] BYREF

  v4 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_4(736LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 32 4 14 config_id:4015 48 16 15 region_ptr:4029 80 520 17 entity_param:4028";
  *(_QWORD *)(v4 + 16) = Group::createRegions;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = 61956;
  v6[536862722] = 62194;
  v6[536862738] = -218103808;
  v6[536862739] = -202116109;
  v6[536862740] = -202116109;
  v6[536862741] = -202116109;
  v6[536862742] = -202116109;
  if ( is_clear )
    Group::removeEntities<std::set<unsigned int>>(this, region_config_set, PROT_ENTITY_REGION);
  __for_range = region_config_set;
  __for_begin._M_node = std::set<unsigned int>::begin(region_config_set)._M_node;
  __for_end._M_node = std::set<unsigned int>::end(region_config_set)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v7 = std::_Rb_tree_const_iterator<unsigned int>::operator*(&__for_begin);
    if ( *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v7 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4();
    }
    *(_DWORD *)(v4 + 32) = *v7;
    if ( GroupScriptConfig::findRegionConfig(group_script_config, *(_DWORD *)(v4 + 32)) )
    {
      if ( common::tools::MiscUtils::isContains<std::unordered_map<unsigned int,unsigned int>,unsigned int>(
             &this->config_id_2_eid_map_,
             (const unsigned int *)(v4 + 32)) )
      {
        common::milog::MiLogStream::create(
          &v21,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/group/group.cpp",
          "createRegions",
          4025);
        v11 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(&v21, (const char (*)[9])"region: ");
        v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v11,
                (const unsigned int *)(v4 + 32));
        common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v12, (const char (*)[14])" still alive!");
        common::milog::MiLogStream::~MiLogStream(&v21);
      }
      else
      {
        Group::genGroupEntityParam((GroupEntityParam *)(v4 + 80), this, *(_DWORD *)(v4 + 32));
        Group::createRegion((Group *const)(v4 + 48), (const GroupEntityParam *)this);
        if ( std::operator==<Region>((const std::shared_ptr<Region> *)(v4 + 48), 0LL) )
        {
          common::milog::MiLogStream::create(
            &v21,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/group/group.cpp",
            "createRegions",
            4032);
          v13 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                  &v21,
                  (const char (*)[31])"createRegion fails, config_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v4 + 32));
          common::milog::MiLogStream::~MiLogStream(&v21);
        }
        std::shared_ptr<Region>::~shared_ptr((std::shared_ptr<Region> *const)(v4 + 48));
        GroupEntityParam::~GroupEntityParam((GroupEntityParam *const)(v4 + 80));
      }
    }
    else
    {
      common::milog::MiLogStream::create(
        &v20,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/group/group.cpp",
        "createRegions",
        4020);
      v8 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
             &v20,
             (const char (*)[34])"findRegionConfig fails, group_id:");
      v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, &this->group_id_);
      v10 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v9, (const char (*)[13])", config_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v4 + 32));
      common::milog::MiLogStream::~MiLogStream(&v20);
    }
    std::_Rb_tree_const_iterator<unsigned int>::operator++(&__for_begin);
  }
  if ( v22 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8048) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8050) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8058) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8058) = -168430091;
  }
};

// Line 4039: range 0000000015FD38AE-0000000015FD3D52
void __cdecl Group::createNPCs(
        Group *const this,
        const std::set<unsigned int> *npc_config_set,
        const GroupScriptConfig *group_script_config,
        bool is_clear)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // rbx
  std::_Rb_tree_const_iterator<unsigned int>::reference v7; // rdx
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  std::set<unsigned int>::iterator __for_begin; // [rsp+28h] [rbp-348h] BYREF
  std::set<unsigned int>::iterator __for_end; // [rsp+30h] [rbp-340h] BYREF
  const std::set<unsigned int> *__for_range; // [rsp+38h] [rbp-338h]
  common::milog::MiLogStream v15; // [rsp+40h] [rbp-330h] BYREF
  char v16[784]; // [rsp+60h] [rbp-310h] BYREF

  v4 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_4(736LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 32 4 14 config_id:4045 48 16 12 npc_ptr:4053 80 520 17 entity_param:4052";
  *(_QWORD *)(v4 + 16) = Group::createNPCs;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = 61956;
  v6[536862722] = 62194;
  v6[536862738] = -218103808;
  v6[536862739] = -202116109;
  v6[536862740] = -202116109;
  v6[536862741] = -202116109;
  v6[536862742] = -202116109;
  if ( is_clear )
    Group::removeEntities<std::set<unsigned int>>(this, npc_config_set, PROT_ENTITY_NPC);
  __for_range = npc_config_set;
  __for_begin._M_node = std::set<unsigned int>::begin(npc_config_set)._M_node;
  __for_end._M_node = std::set<unsigned int>::end(npc_config_set)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v7 = std::_Rb_tree_const_iterator<unsigned int>::operator*(&__for_begin);
    if ( *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v7 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4();
    }
    *(_DWORD *)(v4 + 32) = *v7;
    if ( common::tools::MiscUtils::isContains<std::unordered_map<unsigned int,unsigned int>,unsigned int>(
           &this->config_id_2_eid_map_,
           (const unsigned int *)(v4 + 32)) )
    {
      common::milog::MiLogStream::create(
        &v15,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/group/group.cpp",
        "createNPCs",
        4049);
      v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(&v15, (const char (*)[16])off_25AB6F80);
      v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v4 + 32));
      common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v9, (const char (*)[14])" still alive!");
      common::milog::MiLogStream::~MiLogStream(&v15);
    }
    else
    {
      Group::genGroupEntityParam((GroupEntityParam *)(v4 + 80), this, *(_DWORD *)(v4 + 32));
      Group::createNpc((Group *const)(v4 + 48), (const GroupEntityParam *)this);
      if ( std::operator==<Npc>((const std::shared_ptr<Npc> *)(v4 + 48), 0LL) )
      {
        common::milog::MiLogStream::create(
          &v15,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/group/group.cpp",
          "createNPCs",
          4056);
        v10 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                &v15,
                (const char (*)[28])"createNpc fails, config_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v4 + 32));
        common::milog::MiLogStream::~MiLogStream(&v15);
      }
      std::shared_ptr<Npc>::~shared_ptr((std::shared_ptr<Npc> *const)(v4 + 48));
      GroupEntityParam::~GroupEntityParam((GroupEntityParam *const)(v4 + 80));
    }
    std::_Rb_tree_const_iterator<unsigned int>::operator++(&__for_begin);
  }
  if ( v16 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8048) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8050) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8058) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8058) = -168430091;
  }
};

// Line 4063: range 0000000015FD3D54-0000000015FD4B0A
__int64 __fastcall Group::goToFlowSuite(
        Group *const this,
        const ScriptContext *context,
        uint32_t suite_index,
        bool is_init)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  unsigned int v8; // r14d
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v13; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v14; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v15; // r14
  void (__fastcall **vptr_DescribalBase)(common::milog::MiLogStream *, Group *const); // rax
  unsigned __int64 n; // rax
  __int64 v18; // rdi
  std::tuple_element<1,const std::pair<const std::string,int> >::type v19; // r14d
  std::unordered_map<std::string,int>::mapped_type *v20; // rax
  std::tuple_element<1,const std::pair<const std::string,int> >::type *v21; // rdx
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rax
  __int64 result; // rax
  std::map<unsigned int,SuiteDiskGadgetConfig>::const_iterator __for_begin; // [rsp+28h] [rbp-228h] BYREF
  std::map<unsigned int,SuiteDiskGadgetConfig>::const_iterator __for_end; // [rsp+30h] [rbp-220h] BYREF
  const GroupScriptConfig *group_script_config_ptr; // [rsp+38h] [rbp-218h]
  const SuiteDiskScriptConfig *suite_disk_config_ptr; // [rsp+40h] [rbp-210h]
  const std::map<unsigned int,SuiteDiskGadgetConfig> *__for_range; // [rsp+48h] [rbp-208h]
  const std::map<std::string,int> *__for_range_0; // [rsp+50h] [rbp-200h]
  const std::pair<const std::string,int> *v43; // [rsp+58h] [rbp-1F8h]
  std::tuple_element<0,const std::pair<const std::string,int> >::type *name; // [rsp+60h] [rbp-1F0h]
  std::tuple_element<1,const std::pair<const std::string,int> >::type *value; // [rsp+68h] [rbp-1E8h]
  std::tuple_element<0,std::pair<unsigned int const,SuiteDiskGadgetConfig> >::type *config_id; // [rsp+70h] [rbp-1E0h]
  std::tuple_element<1,std::pair<unsigned int const,SuiteDiskGadgetConfig> >::type *_; // [rsp+78h] [rbp-1D8h]
  std::pair<unsigned int const,SuiteDiskGadgetConfig> __in; // [rsp+80h] [rbp-1D0h] BYREF
  common::milog::MiLogStream v49; // [rsp+A0h] [rbp-1B0h] BYREF
  char v50[400]; // [rsp+C0h] [rbp-190h] BYREF

  v4 = (unsigned __int64)v50;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(352LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "7 48 4 8 uid:4064 64 4 20 old_suite_index:4124 80 4 16 suite_index:4062 96 16 7 ss:4084 128 32 1"
                        "2 err_msg:4086 192 40 6 e:4089 272 48 22 gadget_config_set:4095";
  *(_QWORD *)(v4 + 16) = Group::goToFlowSuite;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -234556924;
  v6[536862723] = -219021312;
  v6[536862725] = -218959118;
  v6[536862727] = -218959360;
  v6[536862728] = 62194;
  v6[536862730] = -202116109;
  *(_DWORD *)(v4 + 80) = suite_index;
  if ( *(_BYTE *)(((unsigned __int64)&this->init_param_.owner_uid >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->init_param_.owner_uid >> 3)
                                                         + 0x7FFF8000) )
  {
    __asan_report_load4();
  }
  *(_DWORD *)(v4 + 48) = this->init_param_.owner_uid;
  group_script_config_ptr = Group::getScriptConfig(this);
  if ( group_script_config_ptr )
  {
    if ( *(_BYTE *)(((unsigned __int64)group_script_config_ptr >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)group_script_config_ptr >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    if ( group_script_config_ptr->io_type == GROUP_IO_TYPE_FLOW )
    {
      if ( is_init )
        goto LABEL_17;
      if ( *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4();
      }
      if ( this->suite_index_ == *(_DWORD *)(v4 + 80) )
      {
        common::milog::MiLogStream::create(
          &v49,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/group/group.cpp",
          "goToFlowSuite",
          4078);
        v11 = common::milog::MiLogStream::operator<<<Group,(Group*)0>(&v49, this);
        v12 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
                v11,
                (const char (*)[41])" suite_index_ == suite_index owner uid: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v4 + 48));
        common::milog::MiLogStream::~MiLogStream(&v49);
        v8 = -1;
      }
      else
      {
LABEL_17:
        suite_disk_config_ptr = GroupScriptConfig::getSuiteDiskConfig(group_script_config_ptr, *(_DWORD *)(v4 + 80));
        if ( suite_disk_config_ptr )
        {
          std::set<unsigned int>::set((std::set<unsigned int> *const)(v4 + 272));
          __for_range = &suite_disk_config_ptr->gadget_config_map;
          __for_begin._M_node = std::map<unsigned int,SuiteDiskGadgetConfig>::begin(&suite_disk_config_ptr->gadget_config_map)._M_node;
          __for_end._M_node = std::map<unsigned int,SuiteDiskGadgetConfig>::end(&suite_disk_config_ptr->gadget_config_map)._M_node;
          while ( std::operator!=(&__for_begin, &__for_end) )
          {
            n = (unsigned __int64)std::_Rb_tree_const_iterator<std::pair<unsigned int const,SuiteDiskGadgetConfig>>::operator*(&__for_begin);
            if ( (char)(n & 7) >= *(_BYTE *)((n >> 3) + 0x7FFF8000) && *(_BYTE *)((n >> 3) + 0x7FFF8000) != 0
              || *(_BYTE *)(((n + 27) >> 3) + 0x7FFF8000) != 0
              && (char)((n + 27) & 7) >= *(_BYTE *)(((n + 27) >> 3) + 0x7FFF8000) )
            {
              n = __asan_report_load_n(n, 28LL);
            }
            v18 = *(_QWORD *)(n + 8);
            *(_QWORD *)&__in.first = *(_QWORD *)n;
            *(_QWORD *)&__in.second.point_id = v18;
            *(_QWORD *)&__in.second.route_id = *(_QWORD *)(n + 16);
            *(_DWORD *)&__in.second.is_started = *(_DWORD *)(n + 24);
            config_id = std::get<0ul,unsigned int const,SuiteDiskGadgetConfig>(&__in);
            _ = std::get<1ul,unsigned int const,SuiteDiskGadgetConfig>(&__in);
            std::set<unsigned int>::insert((std::set<unsigned int> *const)(v4 + 272), config_id);
            std::_Rb_tree_const_iterator<std::pair<unsigned int const,SuiteDiskGadgetConfig>>::operator++(&__for_begin);
          }
          Group::clearDeletedEntityRecords(
            this,
            &suite_disk_config_ptr->monster_config_set,
            (const std::set<unsigned int> *)(v4 + 272));
          __for_range_0 = &suite_disk_config_ptr->variable_value_map;
          __for_begin._M_node = std::map<std::string,int>::begin(&suite_disk_config_ptr->variable_value_map)._M_node;
          __for_end._M_node = std::map<std::string,int>::end(__for_range_0)._M_node;
          while ( std::operator!=(
                    (const std::_Rb_tree_const_iterator<std::pair<const std::string,int> >::_Self *)&__for_begin,
                    (const std::_Rb_tree_const_iterator<std::pair<const std::string,int> >::_Self *)&__for_end) )
          {
            v43 = std::_Rb_tree_const_iterator<std::pair<std::string const,int>>::operator*((const std::_Rb_tree_const_iterator<std::pair<const std::string,int> > *const)&__for_begin);
            name = std::get<0ul,std::string const,int>(v43);
            value = (std::tuple_element<1,const std::pair<const std::string,int> >::type *)std::get<1ul,std::string const,int>(v43);
            if ( *(_BYTE *)(((unsigned __int64)value >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)value & 7) + 3) >= *(_BYTE *)(((unsigned __int64)value >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4();
            }
            v19 = *value;
            v20 = std::unordered_map<std::string,int>::operator[](&this->variable_map_, name);
            v21 = v20;
            if ( *(_BYTE *)(((unsigned __int64)v20 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)v20 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v20 >> 3) + 0x7FFF8000) )
            {
              __asan_report_store4(v20);
            }
            *v21 = v19;
            if ( *(_BYTE *)(((unsigned __int64)value >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)value & 7) + 3) >= *(_BYTE *)(((unsigned __int64)value >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4();
            }
            Group::onVariableValueChanged(this, name, *value);
            std::_Rb_tree_const_iterator<std::pair<std::string const,int>>::operator++((std::_Rb_tree_const_iterator<std::pair<const std::string,int> > *const)&__for_begin);
          }
          Group::createTriggers(this, &suite_disk_config_ptr->trigger_set, group_script_config_ptr, 1);
          Group::createMonsters(this, &suite_disk_config_ptr->monster_config_set, group_script_config_ptr, 1);
          Group::createFlowGagdets(this, &suite_disk_config_ptr->gadget_config_map, group_script_config_ptr, 1);
          Group::createRegions(this, &suite_disk_config_ptr->region_config_set, group_script_config_ptr, 0);
          Group::createNPCs(this, &suite_disk_config_ptr->npc_config_set, group_script_config_ptr, 0);
          common::milog::MiLogStream::create(
            &v49,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/group/group.cpp",
            "goToFlowSuite",
            4120);
          v22 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(&v49, (const char (*)[11])"triggers: ");
          v23 = common::milog::MiLogStream::operator<<<std::string,std::shared_ptr<Trigger>>(v22, &this->trigger_map_);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v23, &this->group_id_);
          common::milog::MiLogStream::~MiLogStream(&v49);
          common::milog::MiLogStream::create(
            &v49,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/group/group.cpp",
            "goToFlowSuite",
            4121);
          v24 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(&v49, (const char (*)[9])"events: ");
          v25 = common::milog::MiLogStream::operator<<<data::EventType,std::set<std::string>>(v24, &this->event_map_);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v25, &this->group_id_);
          common::milog::MiLogStream::~MiLogStream(&v49);
          if ( *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4();
          }
          *(_DWORD *)(v4 + 64) = this->suite_index_;
          this->suite_index_ = *(_DWORD *)(v4 + 80);
          common::milog::MiLogStream::create(
            &v49,
            &common::milog::MiLogDefault::default_log_obj_,
            2u,
            "./src/group/group.cpp",
            "goToFlowSuite",
            4126);
          v26 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  &v49,
                  (const char (*)[16])"goToFlowSuite: ");
          v27 = operator<<(v26, this);
          v28 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v27, (const char (*)[2])" ");
          v29 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v28,
                  (const unsigned int *)(v4 + 64));
          v30 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v29, (const char (*)[6])" --> ");
          v31 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v30,
                  (const unsigned int *)(v4 + 80));
          v32 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v31, (const char (*)[13])" owner uid: ");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v32, (const unsigned int *)(v4 + 48));
          common::milog::MiLogStream::~MiLogStream(&v49);
          Group::notifyClientSuite(this);
          v8 = 0;
          std::set<unsigned int>::~set((std::set<unsigned int> *const)(v4 + 272));
        }
        else
        {
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 96));
          v13 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                  (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 96),
                  "goToFlowSuite, not found suite disk:");
          v14 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v13, *(_DWORD *)(v4 + 80));
          v15 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v14, ", ");
          if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
            __asan_report_load8();
          vptr_DescribalBase = (void (__fastcall **)(common::milog::MiLogStream *, Group *const))this->_vptr_DescribalBase;
          if ( *(_BYTE *)(((unsigned __int64)this->_vptr_DescribalBase >> 3) + 0x7FFF8000) )
            vptr_DescribalBase = (void (__fastcall **)(common::milog::MiLogStream *, Group *const))__asan_report_load8();
          (*vptr_DescribalBase)(&v49, this);
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v15, (const std::string *)&v49);
          std::string::~string(&v49);
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
            (std::string *)(v4 + 128),
            (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 96));
          common::milog::MiLogStream::create(
            &v49,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/group/group.cpp",
            "goToFlowSuite",
            4087);
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v49, (const std::string *)(v4 + 128));
          common::milog::MiLogStream::~MiLogStream(&v49);
          CustomException::CustomException((CustomException *const)(v4 + 192), (const std::string *)(v4 + 128));
          ScriptLib::notifyServerErrorLog(
            context,
            &context->file_path,
            &context->func_name,
            (const std::exception *)(v4 + 192));
          v8 = -1;
          CustomException::~CustomException((CustomException *const)(v4 + 192));
          std::string::~string((void *)(v4 + 128));
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 96));
        }
      }
    }
    else
    {
      common::milog::MiLogStream::create(
        &v49,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/group/group.cpp",
        "goToFlowSuite",
        4073);
      v9 = common::milog::MiLogStream::operator<<<Group,(Group*)0>(&v49, this);
      v10 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
              v9,
              (const char (*)[28])" not flow type. owner uid: ");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v4 + 48));
      common::milog::MiLogStream::~MiLogStream(&v49);
      v8 = -1;
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v49,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "goToFlowSuite",
      4068);
    v7 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
           &v49,
           (const char (*)[24])"getScriptConfig fails. ");
    operator<<(v7, this);
    common::milog::MiLogStream::~MiLogStream(&v49);
    v8 = -1;
  }
  result = v8;
  if ( v50 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8014) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF801C) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8028) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 4133: range 0000000015FD4B0C-0000000015FD55EF
__int64 __fastcall Group::goToGroupSuite(
        Group *const this,
        const ScriptContext *context,
        uint32_t suite_index,
        SuiteLogContext log_context)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  unsigned int v8; // r14d
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v17; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v18; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v19; // r14
  void (__fastcall **vptr_DescribalBase)(common::milog::MiLogStream *, Group *const); // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rax
  __int64 result; // rax
  const GroupScriptConfig *group_script_config_ptr; // [rsp+20h] [rbp-1A0h]
  const SuiteScriptConfig *suite_script_config_ptr; // [rsp+28h] [rbp-198h]
  common::milog::MiLogStream v37; // [rsp+30h] [rbp-190h] BYREF
  char v38[368]; // [rsp+50h] [rbp-170h] BYREF

  v4 = (unsigned __int64)v38;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(320LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "7 32 4 8 uid:4134 48 4 20 old_suite_index:4180 64 4 16 suite_index:4132 80 16 7 ss:4160 112 28 1"
                        "6 log_context:4132 176 32 12 err_msg:4162 240 40 6 e:4165";
  *(_QWORD *)(v4 + 16) = Group::goToGroupSuite;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862722] = 61956;
  v6[536862723] = 62194;
  v6[536862724] = -219020288;
  v6[536862725] = 62194;
  v6[536862726] = -219021312;
  v6[536862727] = 62194;
  v6[536862728] = -218103808;
  v6[536862729] = -202116109;
  *(SuiteLogContext *)(v4 + 112) = log_context;
  *(_DWORD *)(v4 + 64) = suite_index;
  *(_DWORD *)(v4 + 32) = Group::getOwnerUid(this);
  group_script_config_ptr = Group::getScriptConfig(this);
  if ( group_script_config_ptr )
  {
    if ( *(_BYTE *)(((unsigned __int64)&group_script_config_ptr->is_rand_suite >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)group_script_config_ptr - 116) & 7) >= *(_BYTE *)(((unsigned __int64)&group_script_config_ptr->is_rand_suite >> 3)
                                                                            + 0x7FFF8000) )
    {
      __asan_report_load1(&group_script_config_ptr->is_rand_suite);
    }
    if ( group_script_config_ptr->is_rand_suite )
    {
      common::milog::MiLogStream::create(
        &v37,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/group/group.cpp",
        "goToGroupSuite",
        4143);
      v9 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(&v37, (const char (*)[11])"group_id: ");
      v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, &this->group_id_);
      v11 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
              v10,
              (const char (*)[28])" is_rand_suite, owner uid: ");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v4 + 32));
      common::milog::MiLogStream::~MiLogStream(&v37);
      v8 = -1;
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&group_script_config_ptr->end_suite_index >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)group_script_config_ptr - 124) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&group_script_config_ptr->end_suite_index >> 3)
                                                                                + 0x7FFF8000) )
      {
        __asan_report_load4();
      }
      if ( group_script_config_ptr->end_suite_index )
      {
        if ( *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4();
        }
        if ( this->suite_index_ == *(_DWORD *)(v4 + 64) )
        {
          common::milog::MiLogStream::create(
            &v37,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/group/group.cpp",
            "goToGroupSuite",
            4154);
          v14 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(&v37, (const char (*)[11])"group_id: ");
          v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, &this->group_id_);
          v16 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
                  v15,
                  (const char (*)[40])"suite_index_ == suite_index owner uid: ");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, (const unsigned int *)(v4 + 32));
          common::milog::MiLogStream::~MiLogStream(&v37);
          v8 = -1;
        }
        else
        {
          suite_script_config_ptr = GroupScriptConfig::getSuiteConfig(group_script_config_ptr, *(_DWORD *)(v4 + 64));
          if ( suite_script_config_ptr )
          {
            Group::clearTriggers(this, &suite_script_config_ptr->trigger_set);
            if ( Group::recreateSuiteInitConfigEntity(this, suite_script_config_ptr) )
            {
              common::milog::MiLogStream::create(
                &v37,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/group/group.cpp",
                "goToGroupSuite",
                4176);
              v21 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                      &v37,
                      (const char (*)[36])"createSuiteInitConfigEntity fails, ");
              v22 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v21, &this->group_id_);
              v23 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v22, (const char (*)[2])":");
              v24 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v23,
                      (const unsigned int *)(v4 + 64));
              v25 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(
                      v24,
                      (const char (*)[13])" onwer uid: ");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v25,
                (const unsigned int *)(v4 + 32));
              common::milog::MiLogStream::~MiLogStream(&v37);
              v8 = -1;
            }
            else
            {
              if ( *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) != 0
                && *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) <= 3 )
              {
                __asan_report_load4();
              }
              *(_DWORD *)(v4 + 48) = this->suite_index_;
              this->suite_index_ = *(_DWORD *)(v4 + 64);
              common::milog::MiLogStream::create(
                &v37,
                &common::milog::MiLogDefault::default_log_obj_,
                2u,
                "./src/group/group.cpp",
                "goToGroupSuite",
                4183);
              v26 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                      &v37,
                      (const char (*)[26])"goToGroupSuite group_id: ");
              v27 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v26, &this->group_id_);
              v28 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v27, (const char (*)[2])" ");
              v29 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v28,
                      (const unsigned int *)(v4 + 48));
              v30 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v29, (const char (*)[6])" --> ");
              v31 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v30,
                      (const unsigned int *)(v4 + 64));
              v32 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(
                      v31,
                      (const char (*)[13])" owner uid: ");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v32,
                (const unsigned int *)(v4 + 32));
              common::milog::MiLogStream::~MiLogStream(&v37);
              Group::notifyClientSuite(this);
              Group::writeSuiteChangeLog(this, *(SuiteLogContext *)(v4 + 112), *(_DWORD *)(v4 + 48));
              v8 = 0;
            }
          }
          else
          {
            common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 80));
            v17 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                    (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 80),
                    "goToGroupSuite, not found suite:");
            v18 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v17, *(_DWORD *)(v4 + 64));
            v19 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v18, ", ");
            if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
              __asan_report_load8();
            vptr_DescribalBase = (void (__fastcall **)(common::milog::MiLogStream *, Group *const))this->_vptr_DescribalBase;
            if ( *(_BYTE *)(((unsigned __int64)this->_vptr_DescribalBase >> 3) + 0x7FFF8000) )
              vptr_DescribalBase = (void (__fastcall **)(common::milog::MiLogStream *, Group *const))__asan_report_load8();
            (*vptr_DescribalBase)(&v37, this);
            common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v19, (const std::string *)&v37);
            std::string::~string(&v37);
            common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
              (std::string *)(v4 + 176),
              (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 80));
            common::milog::MiLogStream::create(
              &v37,
              &common::milog::MiLogDefault::default_log_obj_,
              1u,
              "./src/group/group.cpp",
              "goToGroupSuite",
              4163);
            common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v37, (const std::string *)(v4 + 176));
            common::milog::MiLogStream::~MiLogStream(&v37);
            CustomException::CustomException((CustomException *const)(v4 + 240), (const std::string *)(v4 + 176));
            ScriptLib::notifyServerErrorLog(
              context,
              &context->file_path,
              &context->func_name,
              (const std::exception *)(v4 + 240));
            v8 = -1;
            CustomException::~CustomException((CustomException *const)(v4 + 240));
            std::string::~string((void *)(v4 + 176));
            common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 80));
          }
        }
      }
      else
      {
        common::milog::MiLogStream::create(
          &v37,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/group/group.cpp",
          "goToGroupSuite",
          4149);
        v12 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(&v37, (const char (*)[11])"group_id: ");
        v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, &this->group_id_);
        common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
          v13,
          (const char (*)[22])" end_suite_index is 0");
        common::milog::MiLogStream::~MiLogStream(&v37);
        v8 = -1;
      }
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v37,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "goToGroupSuite",
      4138);
    v7 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
           &v37,
           (const char (*)[34])"getScriptConfig fails, group_id: ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, &this->group_id_);
    common::milog::MiLogStream::~MiLogStream(&v37);
    v8 = -1;
  }
  result = v8;
  if ( v38 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4193: range 0000000015FD55F0-0000000015FD5CDA
__int64 __fastcall Group::rollback(Group *const this, const ScriptContext *context, SuiteLogContext log_context)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // rax
  __int64 result; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  const GroupScriptConfig *group_script_config_ptr; // [rsp+10h] [rbp-D0h]
  common::milog::MiLogStream v25; // [rsp+20h] [rbp-C0h] BYREF
  char v26[160]; // [rsp+40h] [rbp-A0h] BYREF

  v3 = (unsigned __int64)v26;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 4 8 uid:4194 48 4 21 init_suite_index:4212 64 28 16 log_context:4192";
  *(_QWORD *)(v3 + 16) = Group::rollback;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = 0x4000000;
  v5[536862723] = -202116109;
  *(SuiteLogContext *)(v3 + 64) = log_context;
  *(_DWORD *)(v3 + 32) = Group::getOwnerUid(this);
  group_script_config_ptr = Group::getScriptConfig(this);
  if ( group_script_config_ptr )
  {
    if ( *(_BYTE *)(((unsigned __int64)&group_script_config_ptr->is_rand_suite >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)group_script_config_ptr - 116) & 7) >= *(_BYTE *)(((unsigned __int64)&group_script_config_ptr->is_rand_suite >> 3)
                                                                            + 0x7FFF8000) )
    {
      __asan_report_load1(&group_script_config_ptr->is_rand_suite);
    }
    if ( group_script_config_ptr->is_rand_suite )
    {
      common::milog::MiLogStream::create(
        &v25,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/group/group.cpp",
        "rollback",
        4203);
      v8 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(&v25, (const char (*)[11])"group_id: ");
      v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, &this->group_id_);
      v10 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
              v9,
              (const char (*)[28])" is_rand_suite, owner uid: ");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v3 + 32));
      common::milog::MiLogStream::~MiLogStream(&v25);
      result = 0xFFFFFFFFLL;
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&group_script_config_ptr->end_suite_index >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)group_script_config_ptr - 124) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&group_script_config_ptr->end_suite_index >> 3)
                                                                                + 0x7FFF8000) )
      {
        __asan_report_load4();
      }
      if ( group_script_config_ptr->end_suite_index )
      {
        if ( *(_BYTE *)(((unsigned __int64)&group_script_config_ptr->init_suite_index >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&group_script_config_ptr->init_suite_index >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4();
        }
        *(_DWORD *)(v3 + 48) = group_script_config_ptr->init_suite_index;
        if ( GroupScriptConfig::getSuiteConfig(group_script_config_ptr, *(_DWORD *)(v3 + 48)) )
        {
          if ( (unsigned int)Group::setSuite(this, context, *(_DWORD *)(v3 + 48), 0, *(SuiteLogContext *)(v3 + 64)) )
          {
            common::milog::MiLogStream::create(
              &v25,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/group/group.cpp",
              "rollback",
              4222);
            v16 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                    &v25,
                    (const char (*)[26])"refresh fails, group_id: ");
            v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, &this->group_id_);
            v18 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(
                    v17,
                    (const char (*)[13])" owner uid: ");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, (const unsigned int *)(v3 + 32));
            common::milog::MiLogStream::~MiLogStream(&v25);
          }
          common::milog::MiLogStream::create(
            &v25,
            &common::milog::MiLogDefault::default_log_obj_,
            2u,
            "./src/group/group.cpp",
            "rollback",
            4225);
          v19 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                  &v25,
                  (const char (*)[20])"rollback group_id: ");
          v20 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, &this->group_id_);
          v21 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                  v20,
                  (const char (*)[20])" init_suite_index: ");
          v22 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v21,
                  (const unsigned int *)(v3 + 48));
          v23 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v22, (const char (*)[13])" owner uid: ");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v23, (const unsigned int *)(v3 + 32));
          common::milog::MiLogStream::~MiLogStream(&v25);
          result = 0LL;
        }
        else
        {
          common::milog::MiLogStream::create(
            &v25,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/group/group.cpp",
            "rollback",
            4216);
          v13 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
                  &v25,
                  (const char (*)[35])"getSuiteConfig fails, suite_index:");
          v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v13,
                  (const unsigned int *)(v3 + 48));
          v15 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v14, (const char (*)[11])" group_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, &this->group_id_);
          common::milog::MiLogStream::~MiLogStream(&v25);
          result = 0xFFFFFFFFLL;
        }
      }
      else
      {
        common::milog::MiLogStream::create(
          &v25,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/group/group.cpp",
          "rollback",
          4209);
        v11 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(&v25, (const char (*)[11])"group_id: ");
        v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, &this->group_id_);
        common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
          v12,
          (const char (*)[22])" end_suite_index is 0");
        common::milog::MiLogStream::~MiLogStream(&v25);
        result = 0xFFFFFFFFLL;
      }
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v25,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "rollback",
      4198);
    v6 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
           &v25,
           (const char (*)[34])"getScriptConfig fails, group_id: ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, &this->group_id_);
    common::milog::MiLogStream::~MiLogStream(&v25);
    result = 0xFFFFFFFFLL;
  }
  if ( v26 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4230: range 0000000015FD5CDC-0000000015FD654B
int32_t __cdecl Group::addExtraFlowSuite(
        Group *const this,
        const ScriptContext *context,
        uint32_t suite_index,
        data::FlowSuiteOperatePolicy policy)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rdx
  int32_t v8; // r14d
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v9; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v10; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v11; // r14
  void (__fastcall **vptr_DescribalBase)(common::milog::MiLogStream *, Group *const); // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rdx
  int32_t result; // eax
  std::map<unsigned int,SuiteDiskGadgetConfig>::const_iterator __for_begin; // [rsp+20h] [rbp-1B0h] BYREF
  std::map<unsigned int,SuiteDiskGadgetConfig>::const_iterator __for_end; // [rsp+28h] [rbp-1A8h] BYREF
  const SuiteDiskScriptConfig *suite_disk_script_config_ptr; // [rsp+30h] [rbp-1A0h]
  const GroupScriptConfig *group_script_config_ptr; // [rsp+38h] [rbp-198h]
  const std::map<unsigned int,SuiteDiskGadgetConfig> *__for_range; // [rsp+40h] [rbp-190h]
  const std::pair<unsigned int const,SuiteDiskGadgetConfig> *v26; // [rsp+48h] [rbp-188h]
  std::tuple_element<0,const std::pair<unsigned int const,SuiteDiskGadgetConfig> >::type *config_id; // [rsp+50h] [rbp-180h]
  std::tuple_element<1,const std::pair<unsigned int const,SuiteDiskGadgetConfig> >::type *config; // [rsp+58h] [rbp-178h]
  common::milog::MiLogStream v29; // [rsp+60h] [rbp-170h] BYREF
  char v30[336]; // [rsp+80h] [rbp-150h] BYREF

  v4 = (unsigned __int64)v30;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(288LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 32 16 7 ss:4240 64 32 12 err_msg:4242 128 40 6 e:4245 208 48 22 gadget_config_set:4256";
  *(_QWORD *)(v4 + 16) = Group::addExtraFlowSuite;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -219021312;
  v6[536862723] = -218959118;
  v6[536862725] = -218959360;
  v6[536862726] = 62194;
  v6[536862728] = -202116109;
  if ( Group::getIOType(this) == GROUP_IO_TYPE_FLOW )
  {
    suite_disk_script_config_ptr = Group::findSuiteDiskScriptConfig(this, suite_index);
    if ( suite_disk_script_config_ptr )
    {
      group_script_config_ptr = Group::getScriptConfig(this);
      if ( group_script_config_ptr )
      {
        std::set<unsigned int>::set((std::set<unsigned int> *const)(v4 + 208));
        __for_range = &suite_disk_script_config_ptr->gadget_config_map;
        __for_begin._M_node = std::map<unsigned int,SuiteDiskGadgetConfig>::begin(&suite_disk_script_config_ptr->gadget_config_map)._M_node;
        __for_end._M_node = std::map<unsigned int,SuiteDiskGadgetConfig>::end(&suite_disk_script_config_ptr->gadget_config_map)._M_node;
        while ( std::operator!=(&__for_begin, &__for_end) )
        {
          v26 = std::_Rb_tree_const_iterator<std::pair<unsigned int const,SuiteDiskGadgetConfig>>::operator*(&__for_begin);
          config_id = std::get<0ul,unsigned int const,SuiteDiskGadgetConfig>(v26);
          config = (std::tuple_element<1,const std::pair<unsigned int const,SuiteDiskGadgetConfig> >::type *)std::get<1ul,unsigned int const,SuiteDiskGadgetConfig>(v26);
          std::set<unsigned int>::insert((std::set<unsigned int> *const)(v4 + 208), config_id);
          std::_Rb_tree_const_iterator<std::pair<unsigned int const,SuiteDiskGadgetConfig>>::operator++(&__for_begin);
        }
        Group::clearDeletedEntityRecords(
          this,
          &suite_disk_script_config_ptr->monster_config_set,
          (const std::set<unsigned int> *)(v4 + 208));
        Group::createTriggers(this, &suite_disk_script_config_ptr->trigger_set, group_script_config_ptr, 0);
        common::milog::MiLogStream::create(
          &v29,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/group/group.cpp",
          "addExtraFlowSuite",
          4266);
        v13 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(&v29, (const char (*)[11])"triggers: ");
        v14 = common::milog::MiLogStream::operator<<<std::string,std::shared_ptr<Trigger>>(v13, &this->trigger_map_);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, &this->group_id_);
        common::milog::MiLogStream::~MiLogStream(&v29);
        common::milog::MiLogStream::create(
          &v29,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/group/group.cpp",
          "addExtraFlowSuite",
          4267);
        v15 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(&v29, (const char (*)[9])"events: ");
        v16 = common::milog::MiLogStream::operator<<<data::EventType,std::set<std::string>>(v15, &this->event_map_);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, &this->group_id_);
        common::milog::MiLogStream::~MiLogStream(&v29);
        Group::createMonsters(this, &suite_disk_script_config_ptr->monster_config_set, group_script_config_ptr, 0);
        if ( policy )
        {
          if ( policy == FLOW_SUITE_OP_COMPLETE )
            Group::createFlowGagdets(this, &suite_disk_script_config_ptr->gadget_config_map, group_script_config_ptr, 0);
        }
        else
        {
          Group::createGadgets(this, (const std::set<unsigned int> *)(v4 + 208), group_script_config_ptr, 0);
        }
        Group::createRegions(this, &suite_disk_script_config_ptr->region_config_set, group_script_config_ptr, 0);
        Group::createNPCs(this, &suite_disk_script_config_ptr->npc_config_set, group_script_config_ptr, 0);
        common::milog::MiLogStream::create(
          &v29,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/group/group.cpp",
          "addExtraFlowSuite",
          4281);
        v17 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                &v29,
                (const char (*)[25])"addExtraFlowSuite group:");
        operator<<(v17, this);
        common::milog::MiLogStream::~MiLogStream(&v29);
        v8 = 0;
        std::set<unsigned int>::~set((std::set<unsigned int> *const)(v4 + 208));
      }
      else
      {
        v8 = -1;
      }
    }
    else
    {
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 32));
      v9 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
             (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 32),
             "addExtraFlowSuite, not found suite disk:");
      v10 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v9, suite_index);
      v11 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v10, ", ");
      if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      vptr_DescribalBase = (void (__fastcall **)(common::milog::MiLogStream *, Group *const))this->_vptr_DescribalBase;
      if ( *(_BYTE *)(((unsigned __int64)this->_vptr_DescribalBase >> 3) + 0x7FFF8000) )
        vptr_DescribalBase = (void (__fastcall **)(common::milog::MiLogStream *, Group *const))__asan_report_load8();
      (*vptr_DescribalBase)(&v29, this);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v11, (const std::string *)&v29);
      std::string::~string(&v29);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        (std::string *)(v4 + 64),
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 32));
      common::milog::MiLogStream::create(
        &v29,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/group/group.cpp",
        "addExtraFlowSuite",
        4243);
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v29, (const std::string *)(v4 + 64));
      common::milog::MiLogStream::~MiLogStream(&v29);
      CustomException::CustomException((CustomException *const)(v4 + 128), (const std::string *)(v4 + 64));
      ScriptLib::notifyServerErrorLog(
        context,
        &context->file_path,
        &context->func_name,
        (const std::exception *)(v4 + 128));
      v8 = -1;
      CustomException::~CustomException((CustomException *const)(v4 + 128));
      std::string::~string((void *)(v4 + 64));
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 32));
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v29,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "addExtraFlowSuite",
      4233);
    v7 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
           &v29,
           (const char (*)[21])"group not flow type:");
    operator<<(v7, this);
    common::milog::MiLogStream::~MiLogStream(&v29);
    v8 = -1;
  }
  result = v8;
  if ( v30 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF800C) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8014) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 4287: range 0000000015FD654C-0000000015FD6B15
__int64 __fastcall Group::addExtraGroupSuite(Group *const this, const ScriptContext *context, uint32_t suite_index)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v6; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v7; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v8; // r14
  void (__fastcall **vptr_DescribalBase)(std::string *, Group *const); // rax
  unsigned int v10; // r14d
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  __int64 result; // rax
  const SuiteScriptConfig *suite_script_config_ptr; // [rsp+28h] [rbp-158h]
  std::string v; // [rsp+30h] [rbp-150h] BYREF
  char v25[304]; // [rsp+50h] [rbp-130h] BYREF

  v3 = (unsigned __int64)v25;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(256LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 48 4 8 uid:4288 64 4 16 suite_index:4286 80 16 7 ss:4292 112 32 12 err_msg:4294 176 40 6 e:4297";
  *(_QWORD *)(v3 + 16) = Group::addExtraGroupSuite;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = 61956;
  v5[536862723] = 62194;
  v5[536862724] = -219021312;
  v5[536862725] = 62194;
  v5[536862726] = -218103808;
  v5[536862727] = -202116109;
  *(_DWORD *)(v3 + 64) = suite_index;
  *(_DWORD *)(v3 + 48) = Group::getOwnerUid(this);
  suite_script_config_ptr = Group::findSuiteScriptConfig(this, *(_DWORD *)(v3 + 64));
  if ( suite_script_config_ptr )
  {
    if ( Group::recreateSuiteInitConfigEntity(this, suite_script_config_ptr) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&v,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/group/group.cpp",
        "addExtraGroupSuite",
        4305);
      v11 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
              (common::milog::MiLogStream *const)&v,
              (const char (*)[36])"createSuiteInitConfigEntity fails, ");
      v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, &this->group_id_);
      v13 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v12, (const char (*)[2])":");
      v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v3 + 64));
      v15 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v14, (const char (*)[13])" onwer uid: ");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, (const unsigned int *)(v3 + 48));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v);
      v10 = -1;
    }
    else
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&v,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/group/group.cpp",
        "addExtraGroupSuite",
        4308);
      v16 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
              (common::milog::MiLogStream *const)&v,
              (const char (*)[30])"addExtraGroupSuite group_id: ");
      v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, &this->group_id_);
      v18 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v17, (const char (*)[15])" suite_index: ");
      v19 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, (const unsigned int *)(v3 + 64));
      v20 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v19, (const char (*)[13])" owner uid: ");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v20, (const unsigned int *)(v3 + 48));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v);
      v10 = 0;
    }
  }
  else
  {
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 80));
    v6 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
           (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 80),
           "addExtraGroupSuite, not found suite:");
    v7 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v6, *(_DWORD *)(v3 + 64));
    v8 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v7, ", ");
    if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    vptr_DescribalBase = (void (__fastcall **)(std::string *, Group *const))this->_vptr_DescribalBase;
    if ( *(_BYTE *)(((unsigned __int64)this->_vptr_DescribalBase >> 3) + 0x7FFF8000) )
      vptr_DescribalBase = (void (__fastcall **)(std::string *, Group *const))__asan_report_load8();
    (*vptr_DescribalBase)(&v, this);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v8, &v);
    std::string::~string(&v);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
      (std::string *)(v3 + 112),
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 80));
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&v,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/group/group.cpp",
      "addExtraGroupSuite",
      4295);
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
      (common::milog::MiLogStream *const)&v,
      (const std::string *)(v3 + 112));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v);
    CustomException::CustomException((CustomException *const)(v3 + 176), (const std::string *)(v3 + 112));
    ScriptLib::notifyServerErrorLog(
      context,
      &context->file_path,
      &context->func_name,
      (const std::exception *)(v3 + 176));
    v10 = -1;
    CustomException::~CustomException((CustomException *const)(v3 + 176));
    std::string::~string((void *)(v3 + 112));
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 80));
  }
  result = v10;
  if ( v25 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4313: range 0000000015FD7004-0000000015FD7630
int32_t __cdecl Group::removeExtraFlowSuite(
        Group *const this,
        const ScriptContext *context,
        uint32_t suite_index,
        data::FlowSuiteOperatePolicy policy)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // rbx
  common::milog::MiLogStream *v7; // rdx
  int32_t v8; // r14d
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v9; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v10; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v11; // r14
  void (__fastcall **vptr_DescribalBase)(common::milog::MiLogStream *, Group *const); // rax
  common::milog::MiLogStream *v13; // rdx
  int32_t result; // eax
  std::set<std::string>::iterator __for_begin; // [rsp+28h] [rbp-158h] BYREF
  std::set<std::string>::iterator __for_end; // [rsp+30h] [rbp-150h] BYREF
  const SuiteDiskScriptConfig *suite_disk_script_config_ptr; // [rsp+38h] [rbp-148h]
  const std::set<std::string> *__for_range; // [rsp+40h] [rbp-140h]
  const std::string *trigger_name; // [rsp+48h] [rbp-138h]
  common::milog::MiLogStream v22; // [rsp+50h] [rbp-130h] BYREF
  char v23[272]; // [rsp+70h] [rbp-110h] BYREF
  Group::removeExtraFlowSuite::<lambda(Entity&)> v24; // 0:esi.4,8:rdx.8

  v4 = (unsigned __int64)v23;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(224LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 48 16 7 ss:4323 80 32 12 err_msg:4325 144 40 6 e:4328";
  *(_QWORD *)(v4 + 16) = Group::removeExtraFlowSuite;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = 61937;
  v6[536862722] = 62194;
  v6[536862723] = -219021312;
  v6[536862724] = 62194;
  v6[536862725] = -218103808;
  v6[536862726] = -202116109;
  if ( Group::getIOType(this) == GROUP_IO_TYPE_FLOW )
  {
    suite_disk_script_config_ptr = Group::findSuiteDiskScriptConfig(this, suite_index);
    if ( suite_disk_script_config_ptr )
    {
      v24.__suite_disk_script_config_ptr = suite_disk_script_config_ptr;
      v24.__policy = policy;
      std::function<ForeachPolicy ()(Entity &)>::function<Group::removeExtraFlowSuite(ScriptContext const&,unsigned int,data::FlowSuiteOperatePolicy)::{lambda(Entity &)#1},void,void>(
        (std::function<ForeachPolicy(Entity&)> *const)&v22,
        v24);
      Group::foreachEntity(this, (std::function<ForeachPolicy(Entity&)> *)&v22);
      std::function<ForeachPolicy ()(Entity &)>::~function((std::function<ForeachPolicy(Entity&)> *const)&v22);
      __for_range = &suite_disk_script_config_ptr->trigger_set;
      __for_begin._M_node = std::set<std::string>::begin(&suite_disk_script_config_ptr->trigger_set)._M_node;
      __for_end._M_node = std::set<std::string>::end(&suite_disk_script_config_ptr->trigger_set)._M_node;
      while ( std::operator!=(&__for_begin, &__for_end) )
      {
        trigger_name = std::_Rb_tree_const_iterator<std::string>::operator*(&__for_begin);
        Group::delTrigger(this, trigger_name);
        std::_Rb_tree_const_iterator<std::string>::operator++(&__for_begin);
      }
      common::milog::MiLogStream::create(
        &v22,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/group/group.cpp",
        "removeExtraFlowSuite",
        4365);
      v13 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
              &v22,
              (const char (*)[28])"removeExtraFlowSuite group:");
      operator<<(v13, this);
      common::milog::MiLogStream::~MiLogStream(&v22);
      v8 = 0;
    }
    else
    {
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 48));
      v9 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
             (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 48),
             "removeExtraFlowSuite, not found suite disk:");
      v10 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v9, suite_index);
      v11 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v10, ", ");
      if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      vptr_DescribalBase = (void (__fastcall **)(common::milog::MiLogStream *, Group *const))this->_vptr_DescribalBase;
      if ( *(_BYTE *)(((unsigned __int64)this->_vptr_DescribalBase >> 3) + 0x7FFF8000) )
        vptr_DescribalBase = (void (__fastcall **)(common::milog::MiLogStream *, Group *const))__asan_report_load8();
      (*vptr_DescribalBase)(&v22, this);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v11, (const std::string *)&v22);
      std::string::~string(&v22);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        (std::string *)(v4 + 80),
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 48));
      common::milog::MiLogStream::create(
        &v22,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/group/group.cpp",
        "removeExtraFlowSuite",
        4326);
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v22, (const std::string *)(v4 + 80));
      common::milog::MiLogStream::~MiLogStream(&v22);
      CustomException::CustomException((CustomException *const)(v4 + 144), (const std::string *)(v4 + 80));
      ScriptLib::notifyServerErrorLog(
        context,
        &context->file_path,
        &context->func_name,
        (const std::exception *)(v4 + 144));
      v8 = -1;
      CustomException::~CustomException((CustomException *const)(v4 + 144));
      std::string::~string((void *)(v4 + 80));
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 48));
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v22,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "removeExtraFlowSuite",
      4316);
    v7 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
           &v22,
           (const char (*)[21])"group not flow type:");
    operator<<(v7, this);
    common::milog::MiLogStream::~MiLogStream(&v22);
    v8 = -1;
  }
  result = v8;
  if ( v23 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 4334: range 0000000015FD6B16-0000000015FD7003
ForeachPolicy __cdecl Group::removeExtraFlowSuite(ScriptContext const&,unsigned int,data::FlowSuiteOperatePolicy)::{lambda(Entity &)#1}::operator()(
        const Group::removeExtraFlowSuite::<lambda(Entity&)> *const __closure,
        Entity *entity)
{
  ForeachPolicy v2; // r15d
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  char v6; // al
  unsigned __int64 v7; // rax
  void (__fastcall *v8)(Entity *, VisionContext *); // rbx
  int v10; // r14d
  uint32_t state; // r14d
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  char v13; // al
  unsigned __int64 v14; // rax
  void (__fastcall *v15)(Entity *, VisionContext *); // r14
  ForeachPolicy result; // eax
  std::_Rb_tree_const_iterator<std::pair<unsigned int const,SuiteDiskGadgetConfig> >::_Self __y; // [rsp+20h] [rbp-D0h] BYREF
  const SuiteDiskGadgetConfig *gadget_config; // [rsp+28h] [rbp-C8h]
  VisionContext v19; // [rsp+34h] [rbp-BCh] BYREF
  char v20[176]; // [rsp+40h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 4 14 config_id:4336 64 8 16 gadget_iter:4346 96 16 15 gadget_ptr:4345";
  *(_QWORD *)(v3 + 16) = Group::removeExtraFlowSuite(ScriptContext const&,unsigned int,data::FlowSuiteOperatePolicy)::{lambda(Entity &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218959360;
  v5[536862723] = -202178560;
  *(_DWORD *)(v3 + 48) = Entity::getConfigId(entity);
  if ( *(_BYTE *)(((unsigned __int64)&__closure->__suite_disk_script_config_ptr >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  if ( common::tools::MiscUtils::isContains<std::set<unsigned int> const,unsigned int>(
         &__closure->__suite_disk_script_config_ptr->monster_config_set,
         (const unsigned int *)(v3 + 48)) )
  {
    goto LABEL_13;
  }
  if ( *(_BYTE *)(((unsigned __int64)&__closure->__suite_disk_script_config_ptr >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  if ( common::tools::MiscUtils::isContains<std::set<unsigned int> const,unsigned int>(
         &__closure->__suite_disk_script_config_ptr->region_config_set,
         (const unsigned int *)(v3 + 48)) )
  {
    goto LABEL_13;
  }
  if ( *(_BYTE *)(((unsigned __int64)&__closure->__suite_disk_script_config_ptr >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  if ( common::tools::MiscUtils::isContains<std::set<unsigned int> const,unsigned int>(
         &__closure->__suite_disk_script_config_ptr->npc_config_set,
         (const unsigned int *)(v3 + 48)) )
  {
LABEL_13:
    v6 = 1;
  }
  else
  {
    v6 = 0;
  }
  if ( v6 )
  {
    if ( *(_BYTE *)(((unsigned __int64)entity >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v7 = (unsigned __int64)(entity->_vptr_DescribalBase + 16);
    if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
      v7 = __asan_report_load8();
    v8 = *(void (__fastcall **)(Entity *, VisionContext *))v7;
    VisionContext::VisionContext(&v19, VISION_REMOVE);
    v8(entity, &v19);
LABEL_45:
    v2 = FOREACH_CONTINUE;
    goto LABEL_46;
  }
  toPtr<Gadget,Entity>((Entity *)(v3 + 96));
  if ( *(_BYTE *)(((unsigned __int64)&__closure->__suite_disk_script_config_ptr >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  *(std::map<unsigned int,SuiteDiskGadgetConfig>::const_iterator *)(v3 + 64) = std::map<unsigned int,SuiteDiskGadgetConfig>::find(
                                                                                 &__closure->__suite_disk_script_config_ptr->gadget_config_map,
                                                                                 (const std::map<unsigned int,SuiteDiskGadgetConfig>::key_type *)(v3 + 48));
  __y._M_node = std::map<unsigned int,SuiteDiskGadgetConfig>::end(&__closure->__suite_disk_script_config_ptr->gadget_config_map)._M_node;
  if ( std::operator==(
         (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,SuiteDiskGadgetConfig> >::_Self *)(v3 + 64),
         &__y)
    || std::operator==<Gadget>(0LL, (const std::shared_ptr<Gadget> *)(v3 + 96)) )
  {
    v2 = FOREACH_CONTINUE;
    v10 = 0;
  }
  else
  {
    gadget_config = &std::_Rb_tree_const_iterator<std::pair<unsigned int const,SuiteDiskGadgetConfig>>::operator->((const std::_Rb_tree_const_iterator<std::pair<unsigned int const,SuiteDiskGadgetConfig> > *const)(v3 + 64))->second;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    if ( __closure->__policy == FLOW_SUITE_OP_DEFAULT )
      goto LABEL_35;
    if ( *(_BYTE *)(((unsigned __int64)gadget_config >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)gadget_config & 7) + 3) >= *(_BYTE *)(((unsigned __int64)gadget_config >> 3)
                                                                      + 0x7FFF8000) )
    {
      __asan_report_load4();
    }
    state = gadget_config->state;
    v12 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
    if ( state != Gadget::getState(v12) )
      v13 = 0;
    else
LABEL_35:
      v13 = 1;
    if ( v13 )
    {
      if ( *(_BYTE *)(((unsigned __int64)entity >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v14 = (unsigned __int64)(entity->_vptr_DescribalBase + 16);
      if ( *(_BYTE *)((v14 >> 3) + 0x7FFF8000) )
        v14 = __asan_report_load8();
      v15 = *(void (__fastcall **)(Entity *, VisionContext *))v14;
      VisionContext::VisionContext(&v19, VISION_REMOVE);
      v15(entity, &v19);
    }
    v10 = 1;
  }
  std::shared_ptr<Gadget>::~shared_ptr((std::shared_ptr<Gadget> *const)(v3 + 96));
  if ( v10 == 1 )
    goto LABEL_45;
LABEL_46:
  result = v2;
  if ( v20 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4371: range 0000000015FD7886-0000000015FD7DCF
int32_t __cdecl Group::removeExtraGroupSuite(Group *const this, const ScriptContext *context, uint32_t suite_index)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // rbx
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v6; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v7; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v8; // r14
  void (__fastcall **vptr_DescribalBase)(std::string *, Group *const); // rax
  int32_t v10; // r14d
  common::milog::MiLogStream *v11; // rdx
  int32_t result; // eax
  std::set<std::string>::iterator __for_begin; // [rsp+28h] [rbp-158h] BYREF
  std::set<std::string>::iterator __for_end; // [rsp+30h] [rbp-150h] BYREF
  const SuiteScriptConfig *suite_script_config_ptr; // [rsp+38h] [rbp-148h]
  const std::set<std::string> *__for_range; // [rsp+40h] [rbp-140h]
  const std::string *trigger_name; // [rsp+48h] [rbp-138h]
  std::string v; // [rsp+50h] [rbp-130h] BYREF
  char v20[272]; // [rsp+70h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 16 7 ss:4375 80 32 12 err_msg:4377 144 40 6 e:4380";
  *(_QWORD *)(v3 + 16) = Group::removeExtraGroupSuite;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61937;
  v5[536862722] = 62194;
  v5[536862723] = -219021312;
  v5[536862724] = 62194;
  v5[536862725] = -218103808;
  v5[536862726] = -202116109;
  suite_script_config_ptr = Group::findSuiteScriptConfig(this, suite_index);
  if ( suite_script_config_ptr )
  {
    std::function<ForeachPolicy ()(Entity &)>::function<Group::removeExtraGroupSuite(ScriptContext const&,unsigned int)::{lambda(Entity &)#1},void,void>(
      (std::function<ForeachPolicy(Entity&)> *const)&v,
      (Group::removeExtraGroupSuite::<lambda(Entity&)>)suite_script_config_ptr);
    Group::foreachEntity(this, (std::function<ForeachPolicy(Entity&)> *)&v);
    std::function<ForeachPolicy ()(Entity &)>::~function((std::function<ForeachPolicy(Entity&)> *const)&v);
    __for_range = &suite_script_config_ptr->trigger_set;
    __for_begin._M_node = std::set<std::string>::begin(&suite_script_config_ptr->trigger_set)._M_node;
    __for_end._M_node = std::set<std::string>::end(&suite_script_config_ptr->trigger_set)._M_node;
    while ( std::operator!=(&__for_begin, &__for_end) )
    {
      trigger_name = std::_Rb_tree_const_iterator<std::string>::operator*(&__for_begin);
      Group::delTrigger(this, trigger_name);
      std::_Rb_tree_const_iterator<std::string>::operator++(&__for_begin);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&v,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/group/group.cpp",
      "removeExtraGroupSuite",
      4404);
    v11 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
            (common::milog::MiLogStream *const)&v,
            (const char (*)[29])"removeExtraGroupSuite group:");
    operator<<(v11, this);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v);
    v10 = 0;
  }
  else
  {
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 48));
    v6 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
           (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 48),
           "removeExtraGroupSuite, not found suite:");
    v7 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v6, suite_index);
    v8 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v7, ", ");
    if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    vptr_DescribalBase = (void (__fastcall **)(std::string *, Group *const))this->_vptr_DescribalBase;
    if ( *(_BYTE *)(((unsigned __int64)this->_vptr_DescribalBase >> 3) + 0x7FFF8000) )
      vptr_DescribalBase = (void (__fastcall **)(std::string *, Group *const))__asan_report_load8();
    (*vptr_DescribalBase)(&v, this);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v8, &v);
    std::string::~string(&v);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
      (std::string *)(v3 + 80),
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 48));
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&v,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/group/group.cpp",
      "removeExtraGroupSuite",
      4378);
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
      (common::milog::MiLogStream *const)&v,
      (const std::string *)(v3 + 80));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v);
    CustomException::CustomException((CustomException *const)(v3 + 144), (const std::string *)(v3 + 80));
    ScriptLib::notifyServerErrorLog(
      context,
      &context->file_path,
      &context->func_name,
      (const std::exception *)(v3 + 144));
    v10 = -1;
    CustomException::~CustomException((CustomException *const)(v3 + 144));
    std::string::~string((void *)(v3 + 80));
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 48));
  }
  result = v10;
  if ( v20 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 4386: range 0000000015FD7632-0000000015FD7885
ForeachPolicy __cdecl Group::removeExtraGroupSuite(ScriptContext const&,unsigned int)::{lambda(Entity &)#1}::operator()(
        const Group::removeExtraGroupSuite::<lambda(Entity&)> *const __closure,
        Entity *entity)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  char v5; // al
  unsigned __int64 v6; // rax
  void (__fastcall *v7)(Entity *, VisionContext *); // r12
  ForeachPolicy result; // eax
  VisionContext v9; // [rsp+14h] [rbp-6Ch] BYREF
  char v10[96]; // [rsp+20h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 config_id:4388";
  *(_QWORD *)(v2 + 16) = Group::removeExtraGroupSuite(ScriptContext const&,unsigned int)::{lambda(Entity &)#1}::operator();
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  *(_DWORD *)(v2 + 32) = Entity::getConfigId(entity);
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  if ( common::tools::MiscUtils::isContains<std::set<unsigned int> const,unsigned int>(
         &__closure->__suite_script_config_ptr->monster_config_set,
         (const unsigned int *)(v2 + 32)) )
  {
    goto LABEL_16;
  }
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  if ( common::tools::MiscUtils::isContains<std::set<unsigned int> const,unsigned int>(
         &__closure->__suite_script_config_ptr->gadget_config_set,
         (const unsigned int *)(v2 + 32)) )
  {
    goto LABEL_16;
  }
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  if ( common::tools::MiscUtils::isContains<std::set<unsigned int> const,unsigned int>(
         &__closure->__suite_script_config_ptr->region_config_set,
         (const unsigned int *)(v2 + 32)) )
  {
    goto LABEL_16;
  }
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  if ( common::tools::MiscUtils::isContains<std::set<unsigned int> const,unsigned int>(
         &__closure->__suite_script_config_ptr->npc_config_set,
         (const unsigned int *)(v2 + 32)) )
  {
LABEL_16:
    v5 = 1;
  }
  else
  {
    v5 = 0;
  }
  if ( v5 )
  {
    if ( *(_BYTE *)(((unsigned __int64)entity >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v6 = (unsigned __int64)(entity->_vptr_DescribalBase + 16);
    if ( *(_BYTE *)((v6 >> 3) + 0x7FFF8000) )
      v6 = __asan_report_load8();
    v7 = *(void (__fastcall **)(Entity *, VisionContext *))v6;
    VisionContext::VisionContext(&v9, VISION_REMOVE);
    v7(entity, &v9);
  }
  result = FOREACH_CONTINUE;
  if ( v10 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4409: range 0000000015FD7DD0-0000000015FD7FCE
void __cdecl Group::killSuiteEntity(Group *const this, Entity *entity)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  Creature *v6; // rax
  common::milog::MiLogStream *v7; // rdx
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rdx
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream v11; // [rsp+10h] [rbp-80h] BYREF
  char v12[96]; // [rsp+30h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 17 creature_ptr:4411";
  *(_QWORD *)(v2 + 16) = Group::killSuiteEntity;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  toPtr<Creature,Entity>((Entity *)(v2 + 32));
  if ( std::operator!=<Creature>((const std::shared_ptr<Creature> *)(v2 + 32), 0LL) )
  {
    v5 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    if ( Creature::getLifeState(v5) == LIFE_ALIVE )
    {
      v6 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
      Creature::subCurHpToZero(v6, CHANGE_HP_SUB_SCRIPT, 1);
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v11,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "killSuiteEntity",
      4421);
    v7 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(&v11, (const char (*)[7])"group:");
    v8 = operator<<(v7, this);
    v9 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v8, (const char (*)[10])" entity: ");
    v10 = common::milog::MiLogStream::operator<<<Entity,(Entity*)0>(v9, entity);
    common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(v10, (const char (*)[23])" toPtr<Creature> fails");
    common::milog::MiLogStream::~MiLogStream(&v11);
  }
  std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v2 + 32));
  if ( v12 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 4426: range 0000000015FD84B0-0000000015FD8AE0
int32_t __cdecl Group::killExtraFlowSuite(
        Group *const this,
        const ScriptContext *context,
        uint32_t suite_index,
        data::FlowSuiteOperatePolicy policy)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // rbx
  common::milog::MiLogStream *v7; // rax
  int32_t v8; // r14d
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v9; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v10; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v11; // r14
  void (__fastcall **vptr_DescribalBase)(common::milog::MiLogStream *, Group *const); // rax
  common::milog::MiLogStream *v13; // rax
  int32_t result; // eax
  Group::killExtraFlowSuite::<lambda(Entity&)> v15; // [rsp-20h] [rbp-1C0h]
  std::set<std::string>::iterator __for_begin; // [rsp+28h] [rbp-178h] BYREF
  std::set<std::string>::iterator __for_end; // [rsp+30h] [rbp-170h] BYREF
  const SuiteDiskScriptConfig *suite_disk_script_config_ptr; // [rsp+38h] [rbp-168h]
  const std::set<std::string> *__for_range; // [rsp+40h] [rbp-160h]
  const std::string *trigger_name; // [rsp+48h] [rbp-158h]
  Group::killExtraFlowSuite::<lambda(Entity&)> __f; // [rsp+50h] [rbp-150h]
  common::milog::MiLogStream v24; // [rsp+70h] [rbp-130h] BYREF
  char v25[272]; // [rsp+90h] [rbp-110h] BYREF

  v4 = (unsigned __int64)v25;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(224LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 48 16 7 ss:4436 80 32 12 err_msg:4438 144 40 6 e:4441";
  *(_QWORD *)(v4 + 16) = Group::killExtraFlowSuite;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = 61937;
  v6[536862722] = 62194;
  v6[536862723] = -219021312;
  v6[536862724] = 62194;
  v6[536862725] = -218103808;
  v6[536862726] = -202116109;
  if ( Group::getIOType(this) == GROUP_IO_TYPE_FLOW )
  {
    suite_disk_script_config_ptr = Group::findSuiteDiskScriptConfig(this, suite_index);
    if ( suite_disk_script_config_ptr )
    {
      __for_range = &suite_disk_script_config_ptr->trigger_set;
      __for_begin._M_node = std::set<std::string>::begin(&suite_disk_script_config_ptr->trigger_set)._M_node;
      __for_end._M_node = std::set<std::string>::end(&suite_disk_script_config_ptr->trigger_set)._M_node;
      while ( std::operator!=(&__for_begin, &__for_end) )
      {
        trigger_name = std::_Rb_tree_const_iterator<std::string>::operator*(&__for_begin);
        Group::delTrigger(this, trigger_name);
        std::_Rb_tree_const_iterator<std::string>::operator++(&__for_begin);
      }
      __f.__this = this;
      __f.__suite_disk_script_config_ptr = suite_disk_script_config_ptr;
      __f.__policy = policy;
      *(_OWORD *)&v15.__suite_disk_script_config_ptr = __PAIR128__(
                                                         *(unsigned __int64 *)&__f.__policy,
                                                         (unsigned __int64)suite_disk_script_config_ptr);
      v15.__this = this;
      std::function<ForeachPolicy ()(Entity &)>::function<Group::killExtraFlowSuite(ScriptContext const&,unsigned int,data::FlowSuiteOperatePolicy)::{lambda(Entity &)#1},void,void>(
        (std::function<ForeachPolicy(Entity&)> *const)&v24,
        v15);
      Group::foreachEntity(this, (std::function<ForeachPolicy(Entity&)> *)&v24);
      std::function<ForeachPolicy ()(Entity &)>::~function((std::function<ForeachPolicy(Entity&)> *const)&v24);
      common::milog::MiLogStream::create(
        &v24,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/group/group.cpp",
        "killExtraFlowSuite",
        4481);
      v13 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              &v24,
              (const char (*)[27])"killExtraGroupSuite group:");
      operator<<(v13, this);
      common::milog::MiLogStream::~MiLogStream(&v24);
      v8 = 0;
    }
    else
    {
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 48));
      v9 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
             (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 48),
             "killExtraFlowSuite, not found suite disk:");
      v10 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v9, suite_index);
      v11 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v10, ", ");
      if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      vptr_DescribalBase = (void (__fastcall **)(common::milog::MiLogStream *, Group *const))this->_vptr_DescribalBase;
      if ( *(_BYTE *)(((unsigned __int64)this->_vptr_DescribalBase >> 3) + 0x7FFF8000) )
        vptr_DescribalBase = (void (__fastcall **)(common::milog::MiLogStream *, Group *const))__asan_report_load8();
      (*vptr_DescribalBase)(&v24, this);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v11, (const std::string *)&v24);
      std::string::~string(&v24);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        (std::string *)(v4 + 80),
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 48));
      common::milog::MiLogStream::create(
        &v24,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/group/group.cpp",
        "killExtraFlowSuite",
        4439);
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v24, (const std::string *)(v4 + 80));
      common::milog::MiLogStream::~MiLogStream(&v24);
      CustomException::CustomException((CustomException *const)(v4 + 144), (const std::string *)(v4 + 80));
      ScriptLib::notifyServerErrorLog(
        context,
        &context->file_path,
        &context->func_name,
        (const std::exception *)(v4 + 144));
      v8 = -1;
      CustomException::~CustomException((CustomException *const)(v4 + 144));
      std::string::~string((void *)(v4 + 80));
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 48));
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v24,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "killExtraFlowSuite",
      4429);
    v7 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
           &v24,
           (const char (*)[21])"group not flow type:");
    operator<<(v7, this);
    common::milog::MiLogStream::~MiLogStream(&v24);
    v8 = -1;
  }
  result = v8;
  if ( v25 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 4453: range 0000000015FD7FD0-0000000015FD84AF
ForeachPolicy __cdecl Group::killExtraFlowSuite(ScriptContext const&,unsigned int,data::FlowSuiteOperatePolicy)::{lambda(Entity &)#1}::operator()(
        const Group::killExtraFlowSuite::<lambda(Entity&)> *const __closure,
        Entity *entity)
{
  ForeachPolicy v2; // r15d
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  char v6; // al
  unsigned __int64 v7; // rax
  void (__fastcall *v8)(Entity *, VisionContext *); // rbx
  int v10; // r14d
  std::_Rb_tree_const_iterator<std::pair<unsigned int const,SuiteDiskGadgetConfig> >::pointer v11; // rdx
  uint32_t state; // r14d
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  char v14; // al
  ForeachPolicy result; // eax
  std::_Rb_tree_const_iterator<std::pair<unsigned int const,SuiteDiskGadgetConfig> >::_Self __y; // [rsp+28h] [rbp-C8h] BYREF
  VisionContext v17; // [rsp+34h] [rbp-BCh] BYREF
  char v18[176]; // [rsp+40h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 4 14 config_id:4455 64 8 16 gadget_iter:4468 96 16 15 gadget_ptr:4467";
  *(_QWORD *)(v3 + 16) = Group::killExtraFlowSuite(ScriptContext const&,unsigned int,data::FlowSuiteOperatePolicy)::{lambda(Entity &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218959360;
  v5[536862723] = -202178560;
  *(_DWORD *)(v3 + 48) = Entity::getConfigId(entity);
  if ( *(_BYTE *)(((unsigned __int64)&__closure->__suite_disk_script_config_ptr >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  if ( common::tools::MiscUtils::isContains<std::set<unsigned int> const,unsigned int>(
         &__closure->__suite_disk_script_config_ptr->monster_config_set,
         (const unsigned int *)(v3 + 48)) )
  {
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    Group::killSuiteEntity(__closure->__this, entity);
LABEL_46:
    v2 = FOREACH_CONTINUE;
    goto LABEL_47;
  }
  if ( *(_BYTE *)(((unsigned __int64)&__closure->__suite_disk_script_config_ptr >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  if ( common::tools::MiscUtils::isContains<std::set<unsigned int> const,unsigned int>(
         &__closure->__suite_disk_script_config_ptr->region_config_set,
         (const unsigned int *)(v3 + 48)) )
  {
    goto LABEL_16;
  }
  if ( *(_BYTE *)(((unsigned __int64)&__closure->__suite_disk_script_config_ptr >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  if ( common::tools::MiscUtils::isContains<std::set<unsigned int> const,unsigned int>(
         &__closure->__suite_disk_script_config_ptr->npc_config_set,
         (const unsigned int *)(v3 + 48)) )
  {
LABEL_16:
    v6 = 1;
  }
  else
  {
    v6 = 0;
  }
  if ( v6 )
  {
    if ( *(_BYTE *)(((unsigned __int64)entity >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v7 = (unsigned __int64)(entity->_vptr_DescribalBase + 16);
    if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
      v7 = __asan_report_load8();
    v8 = *(void (__fastcall **)(Entity *, VisionContext *))v7;
    VisionContext::VisionContext(&v17, VISION_DIE);
    v8(entity, &v17);
    goto LABEL_46;
  }
  toPtr<Gadget,Entity>((Entity *)(v3 + 96));
  if ( *(_BYTE *)(((unsigned __int64)&__closure->__suite_disk_script_config_ptr >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  *(std::map<unsigned int,SuiteDiskGadgetConfig>::const_iterator *)(v3 + 64) = std::map<unsigned int,SuiteDiskGadgetConfig>::find(
                                                                                 &__closure->__suite_disk_script_config_ptr->gadget_config_map,
                                                                                 (const std::map<unsigned int,SuiteDiskGadgetConfig>::key_type *)(v3 + 48));
  __y._M_node = std::map<unsigned int,SuiteDiskGadgetConfig>::end(&__closure->__suite_disk_script_config_ptr->gadget_config_map)._M_node;
  if ( std::operator==(
         (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,SuiteDiskGadgetConfig> >::_Self *)(v3 + 64),
         &__y)
    || std::operator==<Gadget>(0LL, (const std::shared_ptr<Gadget> *)(v3 + 96)) )
  {
    v2 = FOREACH_CONTINUE;
    v10 = 0;
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&__closure->__policy >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&__closure->__policy >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    if ( __closure->__policy == FLOW_SUITE_OP_DEFAULT )
      goto LABEL_38;
    v11 = std::_Rb_tree_const_iterator<std::pair<unsigned int const,SuiteDiskGadgetConfig>>::operator->((const std::_Rb_tree_const_iterator<std::pair<unsigned int const,SuiteDiskGadgetConfig> > *const)(v3 + 64));
    if ( *(_BYTE *)(((unsigned __int64)&v11->second >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)v11 + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v11->second >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4();
    }
    state = v11->second.state;
    v13 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
    if ( state != Gadget::getState(v13) )
      v14 = 0;
    else
LABEL_38:
      v14 = 1;
    if ( v14 )
    {
      if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      Group::killSuiteEntity(__closure->__this, entity);
    }
    v10 = 1;
  }
  std::shared_ptr<Gadget>::~shared_ptr((std::shared_ptr<Gadget> *const)(v3 + 96));
  if ( v10 == 1 )
    goto LABEL_46;
LABEL_47:
  result = v2;
  if ( v18 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4487: range 0000000015FD8F26-0000000015FD9505
__int64 __fastcall Group::killExtraGroupSuite(Group *const this, const ScriptContext *context, uint32_t suite_index)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v6; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v7; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v8; // r14
  void (__fastcall **vptr_DescribalBase)(std::string *, Group *const); // rax
  unsigned int v10; // r14d
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  __int64 result; // rax
  std::set<std::string>::iterator __for_begin; // [rsp+28h] [rbp-178h] BYREF
  std::set<std::string>::iterator __for_end; // [rsp+30h] [rbp-170h] BYREF
  const SuiteScriptConfig *suite_script_config_ptr; // [rsp+38h] [rbp-168h]
  const std::set<std::string> *__for_range; // [rsp+40h] [rbp-160h]
  const std::string *trigger_name; // [rsp+48h] [rbp-158h]
  std::string v; // [rsp+50h] [rbp-150h] BYREF
  char v24[304]; // [rsp+70h] [rbp-130h] BYREF

  v3 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(256LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 48 4 8 uid:4488 64 4 16 suite_index:4486 80 16 7 ss:4492 112 32 12 err_msg:4494 176 40 6 e:4497";
  *(_QWORD *)(v3 + 16) = Group::killExtraGroupSuite;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = 61956;
  v5[536862723] = 62194;
  v5[536862724] = -219021312;
  v5[536862725] = 62194;
  v5[536862726] = -218103808;
  v5[536862727] = -202116109;
  *(_DWORD *)(v3 + 64) = suite_index;
  *(_DWORD *)(v3 + 48) = Group::getOwnerUid(this);
  suite_script_config_ptr = Group::findSuiteScriptConfig(this, *(_DWORD *)(v3 + 64));
  if ( suite_script_config_ptr )
  {
    __for_range = &suite_script_config_ptr->trigger_set;
    __for_begin._M_node = std::set<std::string>::begin(&suite_script_config_ptr->trigger_set)._M_node;
    __for_end._M_node = std::set<std::string>::end(&suite_script_config_ptr->trigger_set)._M_node;
    while ( std::operator!=(&__for_begin, &__for_end) )
    {
      trigger_name = std::_Rb_tree_const_iterator<std::string>::operator*(&__for_begin);
      Group::delTrigger(this, trigger_name);
      std::_Rb_tree_const_iterator<std::string>::operator++(&__for_begin);
    }
    std::function<ForeachPolicy ()(Entity &)>::function<Group::killExtraGroupSuite(ScriptContext const&,unsigned int)::{lambda(Entity &)#1},void,void>(
      (std::function<ForeachPolicy(Entity&)> *const)&v,
      (Group::killExtraGroupSuite::<lambda(Entity&)>)__PAIR128__(
                                                       (unsigned __int64)suite_script_config_ptr,
                                                       (unsigned __int64)this));
    Group::foreachEntity(this, (std::function<ForeachPolicy(Entity&)> *)&v);
    std::function<ForeachPolicy ()(Entity &)>::~function((std::function<ForeachPolicy(Entity&)> *const)&v);
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&v,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/group/group.cpp",
      "killExtraGroupSuite",
      4537);
    v11 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
            (common::milog::MiLogStream *const)&v,
            (const char (*)[31])"killExtraGroupSuite group_id: ");
    v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, &this->group_id_);
    v13 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v12, (const char (*)[15])" suite_index: ");
    v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v3 + 64));
    v15 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v14, (const char (*)[13])" owner uid: ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, (const unsigned int *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v);
    v10 = 0;
  }
  else
  {
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 80));
    v6 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
           (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 80),
           "killExtraGroupSuite, not found suite:");
    v7 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v6, *(_DWORD *)(v3 + 64));
    v8 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v7, ", ");
    if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    vptr_DescribalBase = (void (__fastcall **)(std::string *, Group *const))this->_vptr_DescribalBase;
    if ( *(_BYTE *)(((unsigned __int64)this->_vptr_DescribalBase >> 3) + 0x7FFF8000) )
      vptr_DescribalBase = (void (__fastcall **)(std::string *, Group *const))__asan_report_load8();
    (*vptr_DescribalBase)(&v, this);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v8, &v);
    std::string::~string(&v);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
      (std::string *)(v3 + 112),
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 80));
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&v,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/group/group.cpp",
      "killExtraGroupSuite",
      4495);
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
      (common::milog::MiLogStream *const)&v,
      (const std::string *)(v3 + 112));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v);
    CustomException::CustomException((CustomException *const)(v3 + 176), (const std::string *)(v3 + 112));
    ScriptLib::notifyServerErrorLog(
      context,
      &context->file_path,
      &context->func_name,
      (const std::exception *)(v3 + 176));
    v10 = -1;
    CustomException::~CustomException((CustomException *const)(v3 + 176));
    std::string::~string((void *)(v3 + 112));
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 80));
  }
  result = v10;
  if ( v24 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4509: range 0000000015FD8AE2-0000000015FD8F24
ForeachPolicy __cdecl Group::killExtraGroupSuite(ScriptContext const&,unsigned int)::{lambda(Entity &)#1}::operator()(
        const Group::killExtraGroupSuite::<lambda(Entity&)> *const __closure,
        Entity *entity)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  char v5; // al
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  Creature *v7; // rax
  common::milog::MiLogStream *v8; // rcx
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  char v12; // al
  unsigned __int64 v13; // rax
  void (__fastcall *v14)(Entity *, VisionContext *); // rbx
  ForeachPolicy result; // eax
  VisionContext v16; // [rsp+14h] [rbp-ACh] BYREF
  common::milog::MiLogStream v17; // [rsp+20h] [rbp-A0h] BYREF
  char v18[128]; // [rsp+40h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 4 14 config_id:4511 64 16 17 creature_ptr:4516";
  *(_QWORD *)(v2 + 16) = Group::killExtraGroupSuite(ScriptContext const&,unsigned int)::{lambda(Entity &)#1}::operator();
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -202178560;
  *(_DWORD *)(v2 + 48) = Entity::getConfigId(entity);
  if ( *(_BYTE *)(((unsigned __int64)&__closure->__suite_script_config_ptr >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  if ( common::tools::MiscUtils::isContains<std::set<unsigned int> const,unsigned int>(
         &__closure->__suite_script_config_ptr->monster_config_set,
         (const unsigned int *)(v2 + 48)) )
  {
    goto LABEL_10;
  }
  if ( *(_BYTE *)(((unsigned __int64)&__closure->__suite_script_config_ptr >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  if ( common::tools::MiscUtils::isContains<std::set<unsigned int> const,unsigned int>(
         &__closure->__suite_script_config_ptr->gadget_config_set,
         (const unsigned int *)(v2 + 48)) )
  {
LABEL_10:
    v5 = 1;
  }
  else
  {
    v5 = 0;
  }
  if ( v5 )
  {
    toPtr<Creature,Entity>((Entity *)(v2 + 64));
    if ( std::operator!=<Creature>((const std::shared_ptr<Creature> *)(v2 + 64), 0LL) )
    {
      v6 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
      if ( Creature::getLifeState(v6) == LIFE_ALIVE )
      {
        v7 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
        Creature::subCurHpToZero(v7, CHANGE_HP_SUB_SCRIPT, 1);
      }
    }
    else
    {
      common::milog::MiLogStream::create(
        &v17,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/group/group.cpp",
        "operator()",
        4526);
      v8 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(&v17, (const char (*)[8])"group: ");
      if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, &__closure->__this->group_id_);
      v10 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v9, (const char (*)[13])" config_id: ");
      v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v2 + 48));
      common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(v11, (const char (*)[23])" toPtr<Creature> fails");
      common::milog::MiLogStream::~MiLogStream(&v17);
    }
    std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v2 + 64));
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&__closure->__suite_script_config_ptr >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    if ( common::tools::MiscUtils::isContains<std::set<unsigned int> const,unsigned int>(
           &__closure->__suite_script_config_ptr->region_config_set,
           (const unsigned int *)(v2 + 48)) )
    {
      goto LABEL_26;
    }
    if ( *(_BYTE *)(((unsigned __int64)&__closure->__suite_script_config_ptr >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    if ( common::tools::MiscUtils::isContains<std::set<unsigned int> const,unsigned int>(
           &__closure->__suite_script_config_ptr->npc_config_set,
           (const unsigned int *)(v2 + 48)) )
    {
LABEL_26:
      v12 = 1;
    }
    else
    {
      v12 = 0;
    }
    if ( v12 )
    {
      if ( *(_BYTE *)(((unsigned __int64)entity >> 3) + 0x7FFF8000) )
        __asan_report_load8();
      v13 = (unsigned __int64)(entity->_vptr_DescribalBase + 16);
      if ( *(_BYTE *)((v13 >> 3) + 0x7FFF8000) )
        v13 = __asan_report_load8();
      v14 = *(void (__fastcall **)(Entity *, VisionContext *))v13;
      VisionContext::VisionContext(&v16, VISION_DIE);
      v14(entity, &v16);
    }
  }
  result = FOREACH_CONTINUE;
  if ( v18 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 4543: range 0000000015FD9506-0000000015FD9A5B
__int64 __fastcall Group::refreshMonsterLevel(Group *const this, uint32_t world_level)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  __int64 result; // rax
  uint32_t v9; // ecx
  common::milog::MiLogStream *v10; // rax
  unsigned __int64 v11; // rax
  unsigned __int64 v12; // rdx
  Monster *v13; // rax
  uint32_t count; // [rsp+10h] [rbp-E0h]
  std::map<unsigned int,std::shared_ptr<Entity>>::iterator __for_begin; // [rsp+18h] [rbp-D8h] BYREF
  std::map<unsigned int,std::shared_ptr<Entity>>::iterator __for_end; // [rsp+20h] [rbp-D0h] BYREF
  const GroupInfoScriptConfig *group_info_config_ptr; // [rsp+28h] [rbp-C8h]
  std::map<unsigned int,std::shared_ptr<Entity>> *__for_range; // [rsp+30h] [rbp-C0h]
  std::pair<unsigned int const,std::shared_ptr<Entity> > *__in; // [rsp+38h] [rbp-B8h]
  std::tuple_element<0,std::pair<unsigned int const,std::shared_ptr<Entity> > >::type *entity_id; // [rsp+40h] [rbp-B0h]
  std::tuple_element<1,std::pair<unsigned int const,std::shared_ptr<Entity> > >::type *entity_ptr; // [rsp+48h] [rbp-A8h]
  common::milog::MiLogStream v22; // [rsp+50h] [rbp-A0h] BYREF
  char v23[128]; // [rsp+70h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v23;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 4 16 world_level:4542 64 16 16 monster_ptr:4575";
  *(_QWORD *)(v2 + 16) = Group::refreshMonsterLevel;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -202178560;
  *(_DWORD *)(v2 + 48) = world_level;
  if ( *(_BYTE *)(((unsigned __int64)&this->init_param_.world_level >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->init_param_.world_level >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4();
  }
  if ( this->init_param_.world_level == *(_DWORD *)(v2 + 48) )
  {
    common::milog::MiLogStream::create(
      &v22,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/group/group.cpp",
      "refreshMonsterLevel",
      4547);
    v5 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(&v22, (const char (*)[10])"group_id:");
    v6 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, &this->group_id_);
    v7 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(v6, (const char (*)[19])" same world_level:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v2 + 48));
    common::milog::MiLogStream::~MiLogStream(&v22);
    result = 0LL;
  }
  else
  {
    v9 = *(_DWORD *)(v2 + 48);
    if ( *(_BYTE *)(((unsigned __int64)&this->init_param_.world_level >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->init_param_.world_level >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_store4(&this->init_param_.world_level);
    }
    this->init_param_.world_level = v9;
    group_info_config_ptr = Group::getInfoScriptConfig(this);
    if ( group_info_config_ptr )
    {
      if ( *(char *)(((unsigned __int64)&group_info_config_ptr->is_ignore_world_level_revise >> 3) + 0x7FFF8000) < 0 )
        __asan_report_load1(&group_info_config_ptr->is_ignore_world_level_revise);
      if ( group_info_config_ptr->is_ignore_world_level_revise )
      {
        result = 0LL;
      }
      else
      {
        if ( *(_BYTE *)(((unsigned __int64)&this->rely_start_world_level_limit_activity_id_ >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&this->rely_start_world_level_limit_activity_id_ >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4();
        }
        if ( this->rely_start_world_level_limit_activity_id_ )
        {
          result = 0LL;
        }
        else
        {
          count = 0;
          __for_range = &this->entity_map_;
          __for_begin._M_node = std::map<unsigned int,std::shared_ptr<Entity>>::begin(&this->entity_map_)._M_node;
          __for_end._M_node = std::map<unsigned int,std::shared_ptr<Entity>>::end(&this->entity_map_)._M_node;
          while ( std::operator!=(&__for_begin, &__for_end) )
          {
            __in = std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Entity>>>::operator*(&__for_begin);
            entity_id = std::get<0ul,unsigned int const,std::shared_ptr<Entity>>(__in);
            entity_ptr = std::get<1ul,unsigned int const,std::shared_ptr<Entity>>(__in);
            v11 = (unsigned __int64)std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)entity_ptr);
            if ( *(_BYTE *)((v11 >> 3) + 0x7FFF8000) )
              v11 = __asan_report_load8();
            v12 = *(_QWORD *)v11 + 24LL;
            if ( *(_BYTE *)((v12 >> 3) + 0x7FFF8000) )
              v11 = __asan_report_load8();
            if ( (*(unsigned int (__fastcall **)(unsigned __int64))v12)(v11) == 2 )
            {
              std::dynamic_pointer_cast<Monster,Entity>((const std::shared_ptr<Entity> *)(v2 + 64));
              if ( std::operator!=<Monster>((const std::shared_ptr<Monster> *)(v2 + 64), 0LL) )
              {
                v13 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
                Monster::refreshByWorldLevel(v13, *(_DWORD *)(v2 + 48));
                ++count;
              }
              std::shared_ptr<Monster>::~shared_ptr((std::shared_ptr<Monster> *const)(v2 + 64));
            }
            std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Entity>>>::operator++(&__for_begin);
          }
          result = count;
        }
      }
    }
    else
    {
      common::milog::MiLogStream::create(
        &v22,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/group/group.cpp",
        "refreshMonsterLevel",
        4555);
      v10 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
              &v22,
              (const char (*)[30])"group_info_config_ptr is null");
      operator<<(v10, this);
      common::milog::MiLogStream::~MiLogStream(&v22);
      result = 0LL;
    }
  }
  if ( v23 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 4587: range 0000000015FD9A5C-0000000015FD9D89
uint32_t __cdecl Group::refreshMonsterMpProp(Group *const this, uint32_t mp_players)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  uint32_t result; // eax
  unsigned __int64 v6; // rax
  unsigned __int64 v7; // rdx
  Monster *v8; // rax
  uint32_t count; // [rsp+18h] [rbp-A8h]
  std::map<unsigned int,std::shared_ptr<Entity>>::iterator __for_begin; // [rsp+20h] [rbp-A0h] BYREF
  std::map<unsigned int,std::shared_ptr<Entity>>::iterator __for_end; // [rsp+28h] [rbp-98h] BYREF
  std::map<unsigned int,std::shared_ptr<Entity>> *__for_range; // [rsp+30h] [rbp-90h]
  std::pair<unsigned int const,std::shared_ptr<Entity> > *__in; // [rsp+38h] [rbp-88h]
  std::tuple_element<0,std::pair<unsigned int const,std::shared_ptr<Entity> > >::type *entity_id; // [rsp+40h] [rbp-80h]
  std::tuple_element<1,std::pair<unsigned int const,std::shared_ptr<Entity> > >::type *entity_ptr; // [rsp+48h] [rbp-78h]
  char v16[112]; // [rsp+50h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 16 monster_ptr:4603";
  *(_QWORD *)(v2 + 16) = Group::refreshMonsterMpProp;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)&this->init_param_.mp_players >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->init_param_.mp_players >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4();
  }
  if ( mp_players == this->init_param_.mp_players )
  {
    result = 0;
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->init_param_.mp_players >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->init_param_.mp_players >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_store4(&this->init_param_.mp_players);
    }
    this->init_param_.mp_players = mp_players;
    count = 0;
    __for_range = &this->entity_map_;
    __for_begin._M_node = std::map<unsigned int,std::shared_ptr<Entity>>::begin(&this->entity_map_)._M_node;
    __for_end._M_node = std::map<unsigned int,std::shared_ptr<Entity>>::end(&this->entity_map_)._M_node;
    while ( std::operator!=(&__for_begin, &__for_end) )
    {
      __in = std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Entity>>>::operator*(&__for_begin);
      entity_id = std::get<0ul,unsigned int const,std::shared_ptr<Entity>>(__in);
      entity_ptr = std::get<1ul,unsigned int const,std::shared_ptr<Entity>>(__in);
      v6 = (unsigned __int64)std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Entity,(__gnu_cxx::_Lock_policy)2,false,false> *const)entity_ptr);
      if ( *(_BYTE *)((v6 >> 3) + 0x7FFF8000) )
        v6 = __asan_report_load8();
      v7 = *(_QWORD *)v6 + 24LL;
      if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
        v6 = __asan_report_load8();
      if ( (*(unsigned int (__fastcall **)(unsigned __int64))v7)(v6) == 2 )
      {
        std::dynamic_pointer_cast<Monster,Entity>((const std::shared_ptr<Entity> *)(v2 + 32));
        if ( !std::operator==<Monster>((const std::shared_ptr<Monster> *)(v2 + 32), 0LL) )
        {
          v8 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
          if ( !Monster::refreshMpProp(v8) )
            ++count;
        }
        std::shared_ptr<Monster>::~shared_ptr((std::shared_ptr<Monster> *const)(v2 + 32));
      }
      std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<Entity>>>::operator++(&__for_begin);
    }
    result = count;
  }
  if ( v16 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4618: range 0000000015FD9D8A-0000000015FDA423
uint32_t __cdecl Group::getAmberWindNewGadgetId(Group *const this, uint32_t old_gadget_id)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  common::milog::MiLogStream *v5; // rdx
  uint32_t v6; // r14d
  Player *v7; // rax
  PlayerCityComp *CityComp; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rdx
  std::vector<unsigned int>::const_reference v15; // rdx
  char v16; // al
  std::vector<unsigned int>::const_reference v17; // rdx
  uint32_t result; // eax
  std::vector<data::WorldAreaLevelupAction>::const_iterator __for_begin; // [rsp+10h] [rbp-120h] BYREF
  std::vector<data::WorldAreaLevelupAction>::const_iterator __for_end; // [rsp+18h] [rbp-118h] BYREF
  const GroupScriptConfig *group_config_ptr; // [rsp+20h] [rbp-110h]
  const data::CityLevelupConfig *levelup_config_ptr; // [rsp+28h] [rbp-108h]
  const std::vector<data::WorldAreaLevelupAction> *__for_range; // [rsp+30h] [rbp-100h]
  const data::WorldAreaLevelupAction *action; // [rsp+38h] [rbp-F8h]
  common::milog::MiLogStream v25; // [rsp+40h] [rbp-F0h] BYREF
  char v26[208]; // [rsp+60h] [rbp-D0h] BYREF

  v2 = (unsigned __int64)v26;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(160LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 48 4 15 city_level:4619 64 4 12 city_id:4633 80 4 10 level:4646 96 16 14 scene_ptr:4636 128 16"
                        " 15 player_ptr:4639";
  *(_QWORD *)(v2 + 16) = Group::getAmberWindNewGadgetId;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -234556924;
  v4[536862723] = -219021312;
  v4[536862724] = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)&this->init_param_.city_level >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->init_param_.city_level >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_load4();
  }
  *(_DWORD *)(v2 + 48) = this->init_param_.city_level;
  group_config_ptr = Group::getScriptConfig(this);
  if ( group_config_ptr )
  {
    if ( *(_BYTE *)(((unsigned __int64)&group_config_ptr->area_id >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)group_config_ptr - 124) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&group_config_ptr->area_id >> 3)
                                                                       + 0x7FFF8000) )
    {
      __asan_report_load4();
    }
    if ( group_config_ptr->area_id )
    {
      *(_DWORD *)(v2 + 64) = Group::getCityId(this);
      Group::getScene((const Group *const)(v2 + 96));
      if ( std::operator!=<Scene>((const std::shared_ptr<Scene> *)(v2 + 96), 0LL) )
      {
        std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
        Scene::getOwnPlayer((const Scene *const)(v2 + 128));
        if ( std::operator!=<Player>((const std::shared_ptr<Player> *)(v2 + 128), 0LL) )
        {
          v7 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 128));
          CityComp = Player::getCityComp(v7);
          PlayerCityComp::tryGetCityLevel(CityComp, *(_DWORD *)(v2 + 64), (uint32_t *)(v2 + 48));
        }
        std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v2 + 128));
      }
      for ( *(_DWORD *)(v2 + 80) = 1; *(_DWORD *)(v2 + 80) <= *(_DWORD *)(v2 + 48); ++*(_DWORD *)(v2 + 80) )
      {
        ServiceBox::findService<GameserverService>();
        GameserverService::getConfig((GameserverService *const)(v2 + 128));
        v9 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 128));
        levelup_config_ptr = WorldAreaExcelConfigMgr::findCityLevelupConfig(
                               &v9->design_config.txt_config_mgr.world_area_config_mgr,
                               *(_DWORD *)(v2 + 64),
                               *(_DWORD *)(v2 + 80));
        std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v2 + 128));
        if ( levelup_config_ptr )
        {
          __for_range = &levelup_config_ptr->action_vec;
          __for_begin._M_current = std::vector<data::WorldAreaLevelupAction>::begin(&levelup_config_ptr->action_vec)._M_current;
          __for_end._M_current = std::vector<data::WorldAreaLevelupAction>::end(__for_range)._M_current;
          while ( __gnu_cxx::operator!=<data::WorldAreaLevelupAction const*,std::vector<data::WorldAreaLevelupAction>>(
                    &__for_begin,
                    &__for_end) )
          {
            action = __gnu_cxx::__normal_iterator<data::WorldAreaLevelupAction const*,std::vector<data::WorldAreaLevelupAction>>::operator*(&__for_begin);
            if ( *(_BYTE *)(((unsigned __int64)&action->type >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&action->type >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4();
            }
            if ( action->type != WORLD_AREA_ACTION_ACTIVATE_ITEM
              || std::vector<unsigned int>::size(&action->param1_vec) != 1 )
            {
              goto LABEL_31;
            }
            v15 = std::vector<unsigned int>::operator[](&action->param1_vec, 0LL);
            if ( *(_BYTE *)(((unsigned __int64)v15 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)v15 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v15 >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4();
            }
            if ( old_gadget_id == *v15 && std::vector<unsigned int>::size(&action->param2_vec) == 1 )
              v16 = 1;
            else
LABEL_31:
              v16 = 0;
            if ( v16 )
            {
              v17 = std::vector<unsigned int>::operator[](&action->param2_vec, 0LL);
              if ( *(_BYTE *)(((unsigned __int64)v17 >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)v17 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v17 >> 3) + 0x7FFF8000) )
              {
                __asan_report_load4();
              }
              v6 = *v17;
              goto LABEL_39;
            }
            __gnu_cxx::__normal_iterator<data::WorldAreaLevelupAction const*,std::vector<data::WorldAreaLevelupAction>>::operator++(&__for_begin);
          }
        }
        else
        {
          common::milog::MiLogStream::create(
            &v25,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/group/group.cpp",
            "getAmberWindNewGadgetId",
            4652);
          v10 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
                  &v25,
                  (const char (*)[39])"findCityLevelupConfig failed, city_id:");
          v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v10,
                  (const unsigned int *)(v2 + 64));
          v12 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v11, (const char (*)[8])" level:");
          v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v12,
                  (const unsigned int *)(v2 + 80));
          v14 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v13, (const char (*)[8])" group:");
          operator<<(v14, this);
          common::milog::MiLogStream::~MiLogStream(&v25);
        }
      }
      v6 = old_gadget_id;
LABEL_39:
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v2 + 96));
    }
    else
    {
      v6 = old_gadget_id;
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v25,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "getAmberWindNewGadgetId",
      4624);
    v5 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
           &v25,
           (const char (*)[22])"getScriptConfig fails");
    operator<<(v5, this);
    common::milog::MiLogStream::~MiLogStream(&v25);
    v6 = old_gadget_id;
  }
  result = v6;
  if ( v26 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 4670: range 0000000015FDA424-0000000015FDA84B
std::map<unsigned int,unsigned int> *__cdecl Group::getDeadOneoffGadgetMap(
        std::map<unsigned int,unsigned int> *retstr,
        const Group *const this)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  Player *v5; // rax
  PlayerSceneComp *SceneComp; // rdi
  uint32_t group_id; // r9d
  uint32_t dungeon_id; // r8d
  uint32_t scene_id; // esi
  int v10; // r14d
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream v14; // [rsp+10h] [rbp-110h] BYREF
  char v15[240]; // [rsp+30h] [rbp-F0h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 16 14 scene_ptr:4672 80 16 15 player_ptr:4675 112 48 14 empty_map:4671";
  *(_QWORD *)(v2 + 16) = Group::getDeadOneoffGadgetMap;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61937;
  v4[536862722] = 62194;
  v4[536862723] = 62194;
  v4[536862725] = -202116109;
  std::map<unsigned int,unsigned int>::map((std::map<unsigned int,unsigned int> *const)(v2 + 112));
  Group::getScene((const Group *const)(v2 + 48));
  if ( !std::operator!=<Scene>((const std::shared_ptr<Scene> *)(v2 + 48), 0LL) )
    goto LABEL_17;
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 48));
  Scene::getOwnPlayer((const Scene *const)(v2 + 80));
  if ( std::operator!=<Player>((const std::shared_ptr<Player> *)(v2 + 80), 0LL) )
  {
    v5 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 80));
    SceneComp = Player::getSceneComp(v5);
    if ( *(_BYTE *)(((unsigned __int64)&this->group_id_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->group_id_ >> 3) + 0x7FFF8000) <= 3 )
    {
      SceneComp = (PlayerSceneComp *)&this->group_id_;
      __asan_report_load4();
    }
    group_id = this->group_id_;
    if ( *(_BYTE *)(((unsigned __int64)&this->dungeon_id_ >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)this + 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->dungeon_id_ >> 3) + 0x7FFF8000) )
    {
      SceneComp = (PlayerSceneComp *)&this->dungeon_id_;
      __asan_report_load4();
    }
    dungeon_id = this->dungeon_id_;
    if ( *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) <= 3 )
    {
      SceneComp = (PlayerSceneComp *)&this->scene_id_;
      __asan_report_load4();
    }
    scene_id = this->scene_id_;
    if ( *(char *)(((unsigned __int64)retstr >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&retstr->_M_t._M_impl._M_node_count + 7) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)retstr + 47) & 7) >= *(_BYTE *)((((unsigned __int64)&retstr->_M_t._M_impl._M_node_count + 7) >> 3)
                                                          + 0x7FFF8000) )
    {
      scene_id = 48;
      SceneComp = (PlayerSceneComp *)retstr;
      __asan_report_store_n(retstr, 48LL);
    }
    PlayerSceneComp::getOneOffRecord(retstr, SceneComp, PROT_ENTITY_GADGET, scene_id, dungeon_id, group_id);
    v10 = 0;
  }
  else
  {
    common::milog::MiLogStream::create(
      &v14,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "getDeadOneoffGadgetMap",
      4682);
    v11 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
            &v14,
            (const char (*)[30])"getOwnPlayer failed,group_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, &this->group_id_);
    common::milog::MiLogStream::~MiLogStream(&v14);
    v10 = 1;
  }
  std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v2 + 80));
  if ( v10 == 1 )
LABEL_17:
    std::map<unsigned int,unsigned int>::map(retstr, (std::map<unsigned int,unsigned int> *)(v2 + 112));
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v2 + 48));
  std::map<unsigned int,unsigned int>::~map((std::map<unsigned int,unsigned int> *const)(v2 + 112));
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return retstr;
};

// Line 4690: range 0000000015FDA84C-0000000015FDAD53
__int64 __fastcall Group::getGatherRefreshTime(Group *const this, uint32_t config_id, uint32_t gather_id)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  common::milog::MiLogStream *v7; // rax
  __int64 result; // rax
  std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >::pointer v9; // rdx
  common::milog::MiLogStream *v10; // rax
  std::_Rb_tree_iterator<std::pair<const data::GatherSaveType,unsigned int> >::pointer v11; // rdx
  uint32_t refresh_time; // [rsp+1Ch] [rbp-E4h]
  std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >::_Self __y; // [rsp+20h] [rbp-E0h] BYREF
  const std::pair<data::RefreshType,data::GatherSaveType> *refresh_info_pair_ptr; // [rsp+28h] [rbp-D8h]
  std::shared_ptr<Config> v16; // [rsp+30h] [rbp-D0h] BYREF
  common::milog::MiLogStream v17; // [rsp+40h] [rbp-C0h] BYREF
  char v18[160]; // [rsp+60h] [rbp-A0h] BYREF

  v3 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 48 4 14 save_type:4712 64 4 14 config_id:4689 80 4 14 gather_id:4689 96 8 9 iter:4713";
  *(_QWORD *)(v3 + 16) = Group::getGatherRefreshTime;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862723] = -202116352;
  *(_DWORD *)(v3 + 64) = config_id;
  *(_DWORD *)(v3 + 80) = gather_id;
  refresh_time = -1;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v16);
  v6 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v16);
  refresh_info_pair_ptr = RefreshPolicyExcelConfigMgr::getGatherTypeInfo(
                            &v6->design_config.txt_config_mgr.refresh_policy_config_mgr,
                            *(_DWORD *)(v3 + 80));
  std::shared_ptr<Config>::~shared_ptr(&v16);
  if ( !refresh_info_pair_ptr )
  {
    common::milog::MiLogStream::create(
      &v17,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/group/group.cpp",
      "getGatherRefreshTime",
      4696);
    v7 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
           &v17,
           (const char (*)[36])"getGatherTypeInfo fails, gather_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v3 + 80));
    common::milog::MiLogStream::~MiLogStream(&v17);
    result = 0xFFFFFFFFLL;
    goto LABEL_25;
  }
  if ( *(_BYTE *)(((unsigned __int64)refresh_info_pair_ptr >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)refresh_info_pair_ptr & 7) + 3) >= *(_BYTE *)(((unsigned __int64)refresh_info_pair_ptr >> 3)
                                                                            + 0x7FFF8000) )
  {
    __asan_report_load4();
  }
  if ( refresh_info_pair_ptr->first == REFRESH_INTERVAL )
  {
    *(std::map<unsigned int,unsigned int>::iterator *)(v3 + 96) = std::map<unsigned int,unsigned int>::find(
                                                                    &this->gather_refresh_time_map_,
                                                                    (const std::map<unsigned int,unsigned int>::key_type *)(v3 + 64));
    __y._M_node = std::map<unsigned int,unsigned int>::end(&this->gather_refresh_time_map_)._M_node;
    if ( std::operator==(
           (const std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >::_Self *)(v3 + 96),
           &__y) )
    {
      result = 0LL;
      goto LABEL_25;
    }
    v9 = std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator->((const std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> > *const)(v3 + 96));
    if ( *(_BYTE *)(((unsigned __int64)&v9->second >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)v9 + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v9->second >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4();
    }
    refresh_time = v9->second;
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)refresh_info_pair_ptr >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)refresh_info_pair_ptr & 7) + 3) >= *(_BYTE *)(((unsigned __int64)refresh_info_pair_ptr >> 3)
                                                                              + 0x7FFF8000) )
    {
      __asan_report_load4();
    }
    if ( refresh_info_pair_ptr->first == REFRESH_DAYBEGIN_INTERVAL )
    {
      if ( *(_BYTE *)(((unsigned __int64)&refresh_info_pair_ptr->second >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)refresh_info_pair_ptr + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&refresh_info_pair_ptr->second >> 3)
                                                                            + 0x7FFF8000) )
      {
        __asan_report_load4();
      }
      *(_DWORD *)(v3 + 48) = refresh_info_pair_ptr->second;
      *(std::map<data::GatherSaveType,unsigned int>::iterator *)(v3 + 96) = std::map<data::GatherSaveType,unsigned int>::find(
                                                                              &this->group_refresh_time_map_,
                                                                              (const std::map<data::GatherSaveType,unsigned int>::key_type *)(v3 + 48));
      __y._M_node = std::map<data::GatherSaveType,unsigned int>::end(&this->group_refresh_time_map_)._M_node;
      if ( std::operator==(
             (const std::_Rb_tree_iterator<std::pair<const data::GatherSaveType,unsigned int> >::_Self *)(v3 + 96),
             (const std::_Rb_tree_iterator<std::pair<const data::GatherSaveType,unsigned int> >::_Self *)&__y) )
      {
        common::milog::MiLogStream::create(
          &v17,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/group/group.cpp",
          "getGatherRefreshTime",
          4716);
        v10 = common::milog::MiLogStream::operator<<<char [48],(char *[48])0>(&v17, (const char (*)[48])off_25ABD440);
        common::milog::MiLogStream::operator<<<data::GatherSaveType,(data::GatherSaveType*)0>(
          v10,
          (const data::GatherSaveType *)(v3 + 48));
        common::milog::MiLogStream::~MiLogStream(&v17);
        result = 0LL;
        goto LABEL_25;
      }
      v11 = std::_Rb_tree_iterator<std::pair<data::GatherSaveType const,unsigned int>>::operator->((const std::_Rb_tree_iterator<std::pair<const data::GatherSaveType,unsigned int> > *const)(v3 + 96));
      if ( *(_BYTE *)(((unsigned __int64)&v11->second >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)v11 + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v11->second >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4();
      }
      refresh_time = v11->second;
    }
  }
  result = refresh_time;
LABEL_25:
  if ( v18 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4726: range 0000000015FDAD54-0000000015FDB206
void __fastcall Group::setGatherRefreshTime(Group *const this, uint32_t config_id)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  common::milog::MiLogStream *v5; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  common::milog::MiLogStream *v7; // rax
  int v8; // r14d
  std::map<unsigned int,unsigned int>::mapped_type *v9; // rax
  _DWORD *v10; // rdx
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  const GroupScriptConfig *group_script_config_ptr; // [rsp+18h] [rbp-D8h]
  const GadgetScriptConfig *gadget_script_config_ptr; // [rsp+20h] [rbp-D0h]
  const std::pair<data::RefreshType,data::GatherSaveType> *refresh_info_pair_ptr; // [rsp+28h] [rbp-C8h]
  std::shared_ptr<Config> v19; // [rsp+30h] [rbp-C0h] BYREF
  common::milog::MiLogStream v20; // [rsp+40h] [rbp-B0h] BYREF
  char v21[144]; // [rsp+60h] [rbp-90h] BYREF

  v2 = (unsigned __int64)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 32 4 14 gather_id:4738 48 4 8 now:4750 64 4 14 config_id:4725";
  *(_QWORD *)(v2 + 16) = Group::setGatherRefreshTime;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = -202116348;
  *(_DWORD *)(v2 + 64) = config_id;
  group_script_config_ptr = Group::getScriptConfig(this);
  if ( group_script_config_ptr )
  {
    gadget_script_config_ptr = GroupScriptConfig::findGadgetConfig(group_script_config_ptr, *(_DWORD *)(v2 + 64));
    if ( gadget_script_config_ptr )
    {
      if ( *(_BYTE *)(((unsigned __int64)&gadget_script_config_ptr->point_type >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)gadget_script_config_ptr + 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&gadget_script_config_ptr->point_type >> 3)
                                                                                + 0x7FFF8000) )
      {
        __asan_report_load4();
      }
      *(_DWORD *)(v2 + 32) = gadget_script_config_ptr->point_type;
      if ( *(_DWORD *)(v2 + 32) )
      {
        ServiceBox::findService<GameserverService>();
        GameserverService::getConfig((GameserverService *const)&v19);
        v6 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v19);
        refresh_info_pair_ptr = RefreshPolicyExcelConfigMgr::getGatherTypeInfo(
                                  &v6->design_config.txt_config_mgr.refresh_policy_config_mgr,
                                  *(_DWORD *)(v2 + 32));
        std::shared_ptr<Config>::~shared_ptr(&v19);
        if ( refresh_info_pair_ptr )
        {
          *(_DWORD *)(v2 + 48) = common::tools::TimeUtils::getNow();
          if ( *(_BYTE *)(((unsigned __int64)refresh_info_pair_ptr >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)refresh_info_pair_ptr & 7) + 3) >= *(_BYTE *)(((unsigned __int64)refresh_info_pair_ptr >> 3)
                                                                                    + 0x7FFF8000) )
          {
            __asan_report_load4();
          }
          if ( refresh_info_pair_ptr->first == REFRESH_INTERVAL )
          {
            v8 = *(_DWORD *)(v2 + 48);
            v9 = std::map<unsigned int,unsigned int>::operator[](
                   &this->gather_refresh_time_map_,
                   (const std::map<unsigned int,unsigned int>::key_type *)(v2 + 64));
            v10 = v9;
            if ( *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)v9 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) )
            {
              __asan_report_store4(v9);
            }
            *v10 = v8;
            common::milog::MiLogStream::create(
              &v20,
              &common::milog::MiLogDefault::default_log_obj_,
              1u,
              "./src/group/group.cpp",
              "setGatherRefreshTime",
              4754);
            v11 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
                    &v20,
                    (const char (*)[40])off_25ABD580);
            v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v11,
                    (const unsigned int *)(v2 + 64));
            v13 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                    v12,
                    (const char (*)[15])" refresh_time:");
            v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v13,
                    (const unsigned int *)(v2 + 48));
            v15 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v14, (const char (*)[9])"group_id");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, &this->group_id_);
            common::milog::MiLogStream::~MiLogStream(&v20);
          }
        }
        else
        {
          common::milog::MiLogStream::create(
            &v20,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/group/group.cpp",
            "setGatherRefreshTime",
            4746);
          v7 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                 &v20,
                 (const char (*)[36])"getGatherTypeInfo fails, gather_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v2 + 32));
          common::milog::MiLogStream::~MiLogStream(&v20);
        }
      }
    }
    else
    {
      common::milog::MiLogStream::create(
        &v20,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/group/group.cpp",
        "setGatherRefreshTime",
        4735);
      v5 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
             &v20,
             (const char (*)[35])"findGadgetConfig fails, config_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, (const unsigned int *)(v2 + 64));
      common::milog::MiLogStream::~MiLogStream(&v20);
    }
  }
  if ( v21 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 4759: range 0000000015FDB208-0000000015FDB4A3
void __cdecl Group::setGroupRefreshTimeMapInfo(Group *const this, uint32_t gather_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  __int64 *v6; // r8
  std::_Rb_tree_iterator<std::pair<const data::GatherSaveType,unsigned int> >::_Self __y; // [rsp+10h] [rbp-B0h] BYREF
  const std::pair<data::RefreshType,data::GatherSaveType> *refresh_info_pair_ptr; // [rsp+18h] [rbp-A8h]
  std::shared_ptr<Config> v9; // [rsp+20h] [rbp-A0h] BYREF
  char v10[144]; // [rsp+30h] [rbp-90h] BYREF

  v2 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 4 14 save_type:4768 64 8 9 iter:4769";
  *(_QWORD *)(v2 + 16) = Group::setGroupRefreshTimeMapInfo;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -202116352;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v9);
  v5 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v9);
  refresh_info_pair_ptr = RefreshPolicyExcelConfigMgr::getGatherTypeInfo(
                            &v5->design_config.txt_config_mgr.refresh_policy_config_mgr,
                            gather_id);
  std::shared_ptr<Config>::~shared_ptr(&v9);
  if ( refresh_info_pair_ptr )
  {
    if ( *(_BYTE *)(((unsigned __int64)refresh_info_pair_ptr >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)refresh_info_pair_ptr & 7) + 3) >= *(_BYTE *)(((unsigned __int64)refresh_info_pair_ptr >> 3)
                                                                              + 0x7FFF8000) )
    {
      __asan_report_load4();
    }
    if ( refresh_info_pair_ptr->first == REFRESH_DAYBEGIN_INTERVAL )
    {
      if ( *(_BYTE *)(((unsigned __int64)&refresh_info_pair_ptr->second >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)refresh_info_pair_ptr + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&refresh_info_pair_ptr->second >> 3)
                                                                            + 0x7FFF8000) )
      {
        __asan_report_load4();
      }
      *(_DWORD *)(v2 + 48) = refresh_info_pair_ptr->second;
      *(std::map<data::GatherSaveType,unsigned int>::iterator *)(v2 + 64) = std::map<data::GatherSaveType,unsigned int>::find(
                                                                              &this->group_refresh_time_map_,
                                                                              (const std::map<data::GatherSaveType,unsigned int>::key_type *)(v2 + 48));
      __y._M_node = std::map<data::GatherSaveType,unsigned int>::end(&this->group_refresh_time_map_)._M_node;
      if ( std::operator==(
             (const std::_Rb_tree_iterator<std::pair<const data::GatherSaveType,unsigned int> >::_Self *)(v2 + 64),
             &__y) )
      {
        __y._M_node = (std::_Rb_tree_iterator<std::pair<const data::GatherSaveType,unsigned int> >::_Base_ptr)common::tools::TimeUtils::getNow();
        std::map<data::GatherSaveType,unsigned int>::emplace<data::GatherSaveType&,long>(
          &this->group_refresh_time_map_,
          (data::GatherSaveType *)(v2 + 48),
          (__int64 *)&__y,
          (data::GatherSaveType *)(v2 + 48),
          v6);
      }
    }
  }
  if ( v10 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 4778: range 0000000015FDB4A4-0000000015FDB93F
void __cdecl Group::refreshGroupRefreshTimeMapInfo(Group *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v4; // rax
  common::milog::MiLogStream *v5; // rax
  std::_Rb_tree_const_iterator<std::pair<const data::GatherSaveType,unsigned int> >::pointer v6; // rdx
  const RefreshPolicyExcelConfigMgr *p_refresh_policy_config_mgr; // rdi
  bool isTimeToRefresh; // r14
  common::milog::MiLogStream *v9; // rax
  uint32_t now; // [rsp+18h] [rbp-E8h]
  uint32_t refresh_id; // [rsp+1Ch] [rbp-E4h]
  std::map<data::GatherSaveType,unsigned int>::iterator __for_begin; // [rsp+20h] [rbp-E0h] BYREF
  std::map<data::GatherSaveType,unsigned int>::iterator __for_end; // [rsp+28h] [rbp-D8h] BYREF
  std::_Rb_tree_const_iterator<std::pair<const data::GatherSaveType,unsigned int> >::_Self __y; // [rsp+30h] [rbp-D0h] BYREF
  const std::map<data::GatherSaveType,unsigned int> *refresh_id_map; // [rsp+38h] [rbp-C8h]
  std::map<data::GatherSaveType,unsigned int> *__for_range; // [rsp+40h] [rbp-C0h]
  std::pair<const data::GatherSaveType,unsigned int> *__in; // [rsp+48h] [rbp-B8h]
  std::tuple_element<0,std::pair<const data::GatherSaveType,unsigned int> >::type *save_type; // [rsp+50h] [rbp-B0h]
  std::tuple_element<1,std::pair<const data::GatherSaveType,unsigned int> >::type *last_time; // [rsp+58h] [rbp-A8h]
  std::shared_ptr<Config> v21; // [rsp+60h] [rbp-A0h] BYREF
  common::milog::MiLogStream v22; // [rsp+70h] [rbp-90h] BYREF
  char v23[112]; // [rsp+90h] [rbp-70h] BYREF

  v1 = (unsigned __int64)v23;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 8 9 iter:4783";
  *(_QWORD *)(v1 + 16) = Group::refreshGroupRefreshTimeMapInfo;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202116352;
  now = common::tools::TimeUtils::getNow();
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v21);
  v4 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v21);
  refresh_id_map = ConstValueExcelConfigMgr::getGatherRefreshIdMap(&v4->design_config.txt_config_mgr.const_value_config_mgr);
  std::shared_ptr<Config>::~shared_ptr(&v21);
  __for_range = &this->group_refresh_time_map_;
  __for_begin._M_node = std::map<data::GatherSaveType,unsigned int>::begin(&this->group_refresh_time_map_)._M_node;
  __for_end._M_node = std::map<data::GatherSaveType,unsigned int>::end(&this->group_refresh_time_map_)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    __in = std::_Rb_tree_iterator<std::pair<data::GatherSaveType const,unsigned int>>::operator*(&__for_begin);
    save_type = std::get<0ul,data::GatherSaveType const,unsigned int>(__in);
    last_time = std::get<1ul,data::GatherSaveType const,unsigned int>(__in);
    *(std::map<data::GatherSaveType,unsigned int>::const_iterator *)(v1 + 32) = std::map<data::GatherSaveType,unsigned int>::find(
                                                                                  refresh_id_map,
                                                                                  save_type);
    __y._M_node = std::map<data::GatherSaveType,unsigned int>::end(refresh_id_map)._M_node;
    if ( std::operator==(
           (const std::_Rb_tree_const_iterator<std::pair<const data::GatherSaveType,unsigned int> >::_Self *)(v1 + 32),
           &__y) )
    {
      common::milog::MiLogStream::create(
        &v22,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/group/group.cpp",
        "refreshGroupRefreshTimeMapInfo",
        4786);
      v5 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
             &v22,
             (const char (*)[43])"const_value_config can not find save_type:");
      common::milog::MiLogStream::operator<<<data::GatherSaveType,(data::GatherSaveType*)0>(v5, save_type);
      common::milog::MiLogStream::~MiLogStream(&v22);
    }
    else
    {
      v6 = std::_Rb_tree_const_iterator<std::pair<data::GatherSaveType const,unsigned int>>::operator->((const std::_Rb_tree_const_iterator<std::pair<const data::GatherSaveType,unsigned int> > *const)(v1 + 32));
      if ( *(_BYTE *)(((unsigned __int64)&v6->second >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)v6 + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v6->second >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4();
      }
      refresh_id = v6->second;
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)&v21);
      p_refresh_policy_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v21)->design_config.txt_config_mgr.refresh_policy_config_mgr;
      if ( *(_BYTE *)(((unsigned __int64)last_time >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)last_time & 7) + 3) >= *(_BYTE *)(((unsigned __int64)last_time >> 3) + 0x7FFF8000) )
      {
        p_refresh_policy_config_mgr = (const RefreshPolicyExcelConfigMgr *)last_time;
        __asan_report_load4();
      }
      isTimeToRefresh = RefreshPolicyExcelConfigMgr::isTimeToRefresh(
                          p_refresh_policy_config_mgr,
                          refresh_id,
                          *last_time,
                          now);
      std::shared_ptr<Config>::~shared_ptr(&v21);
      if ( isTimeToRefresh )
      {
        if ( *(_BYTE *)(((unsigned __int64)last_time >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)last_time & 7) + 3) >= *(_BYTE *)(((unsigned __int64)last_time >> 3) + 0x7FFF8000) )
        {
          __asan_report_store4(last_time);
        }
        *last_time = now;
      }
    }
    std::_Rb_tree_iterator<std::pair<data::GatherSaveType const,unsigned int>>::operator++(&__for_begin);
  }
  common::milog::MiLogStream::create(
    &v22,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/group/group.cpp",
    "refreshGroupRefreshTimeMapInfo",
    4795);
  v9 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
         &v22,
         (const char (*)[25])"group_refresh_time_map_:");
  common::milog::MiLogStream::operator<<<data::GatherSaveType,unsigned int>(v9, &this->group_refresh_time_map_);
  common::milog::MiLogStream::~MiLogStream(&v22);
  if ( v23 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 4799: range 0000000015FDB940-0000000015FDC05E
void __cdecl Group::refreshDeletedGatherInfo(Group *const this, const GroupScriptConfig *group_script_config)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  common::milog::MiLogStream *v5; // rax
  std::map<proto::ProtEntityType,std::set<unsigned int>>::mapped_type *v6; // rax
  std::_Rb_tree_const_iterator<unsigned int>::reference v7; // rdx
  common::milog::MiLogStream *v8; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  common::milog::MiLogStream *v10; // rax
  char v11; // r14
  const RefreshPolicyExcelConfigMgr *p_refresh_policy_config_mgr; // rdi
  uint32_t v13; // esi
  char v14; // r15
  std::set<unsigned int> *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  std::map<proto::ProtEntityType,std::set<unsigned int>>::key_type __k; // [rsp+28h] [rbp-188h] BYREF
  uint32_t now; // [rsp+2Ch] [rbp-184h]
  std::set<unsigned int>::iterator __for_begin; // [rsp+30h] [rbp-180h] BYREF
  std::set<unsigned int>::iterator __for_end; // [rsp+38h] [rbp-178h] BYREF
  std::set<unsigned int> *__for_range; // [rsp+48h] [rbp-168h]
  const GadgetScriptConfig *gadget_script_config_ptr; // [rsp+50h] [rbp-160h]
  const data::GatherExcelConfig *gather_excel_config_ptr; // [rsp+58h] [rbp-158h]
  std::shared_ptr<Config> v31; // [rsp+60h] [rbp-150h] BYREF
  std::shared_ptr<Config> v32; // [rsp+70h] [rbp-140h] BYREF
  common::milog::MiLogStream v33; // [rsp+80h] [rbp-130h] BYREF
  common::milog::MiLogStream v34; // [rsp+A0h] [rbp-110h] BYREF
  common::milog::MiLogStream v35; // [rsp+C0h] [rbp-F0h] BYREF
  char v36[208]; // [rsp+E0h] [rbp-D0h] BYREF

  v2 = (unsigned __int64)v36;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(160LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "4 32 4 14 config_id:4809 48 4 14 gather_id:4817 64 4 17 refresh_time:4828 80 48 23 deleted_gadget_set:4808";
  *(_QWORD *)(v2 + 16) = Group::refreshDeletedGatherInfo;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = 61956;
  v4[536862724] = -202116109;
  if ( Group::getScriptConfig(this) )
  {
    now = common::tools::TimeUtils::getNow();
    __k = PROT_ENTITY_GADGET;
    v6 = std::map<proto::ProtEntityType,std::set<unsigned int>>::operator[](&this->deleted_entity_record_map_, &__k);
    std::set<unsigned int>::set((std::set<unsigned int> *const)(v2 + 80), v6);
    __for_range = (std::set<unsigned int> *)(v2 + 80);
    __for_begin._M_node = std::set<unsigned int>::begin((const std::set<unsigned int> *const)(v2 + 80))._M_node;
    __for_end._M_node = std::set<unsigned int>::end(__for_range)._M_node;
    while ( std::operator!=(&__for_begin, &__for_end) )
    {
      v7 = std::_Rb_tree_const_iterator<unsigned int>::operator*(&__for_begin);
      if ( *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v7 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4();
      }
      *(_DWORD *)(v2 + 32) = *v7;
      gadget_script_config_ptr = GroupScriptConfig::findGadgetConfig(group_script_config, *(_DWORD *)(v2 + 32));
      if ( gadget_script_config_ptr )
      {
        if ( *(_BYTE *)(((unsigned __int64)&gadget_script_config_ptr->point_type >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)gadget_script_config_ptr + 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&gadget_script_config_ptr->point_type >> 3)
                                                                                  + 0x7FFF8000) )
        {
          __asan_report_load4();
        }
        *(_DWORD *)(v2 + 48) = gadget_script_config_ptr->point_type;
        if ( *(_DWORD *)(v2 + 48) )
        {
          ServiceBox::findService<GameserverService>();
          GameserverService::getConfig((GameserverService *const)&v31);
          v9 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v31);
          gather_excel_config_ptr = data::GatherExcelConfigMgrBase::findGatherExcelConfig(
                                      &v9->design_config.txt_config_mgr.gather_config_mgr,
                                      *(_DWORD *)(v2 + 48));
          std::shared_ptr<Config>::~shared_ptr(&v31);
          if ( gather_excel_config_ptr )
          {
            *(_DWORD *)(v2 + 64) = Group::getGatherRefreshTime(this, *(_DWORD *)(v2 + 32), *(_DWORD *)(v2 + 48));
            v11 = 0;
            if ( !*(_DWORD *)(v2 + 64) )
              goto LABEL_21;
            ServiceBox::findService<GameserverService>();
            GameserverService::getConfig((GameserverService *const)&v32);
            v11 = 1;
            p_refresh_policy_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v32)->design_config.txt_config_mgr.refresh_policy_config_mgr;
            v13 = *(_DWORD *)(v2 + 64);
            if ( *(_BYTE *)(((unsigned __int64)&gather_excel_config_ptr->refresh_id >> 3) + 0x7FFF8000) != 0
              && (char)((((_BYTE)gather_excel_config_ptr + 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&gather_excel_config_ptr->refresh_id >> 3)
                                                                                     + 0x7FFF8000) )
            {
              p_refresh_policy_config_mgr = (const RefreshPolicyExcelConfigMgr *)&gather_excel_config_ptr->refresh_id;
              __asan_report_load4();
            }
            if ( !RefreshPolicyExcelConfigMgr::isTimeToRefresh(
                    p_refresh_policy_config_mgr,
                    gather_excel_config_ptr->refresh_id,
                    v13,
                    now) )
              v14 = 0;
            else
LABEL_21:
              v14 = 1;
            if ( v11 )
              std::shared_ptr<Config>::~shared_ptr(&v32);
            if ( v14 )
            {
              __k = PROT_ENTITY_GADGET;
              v15 = std::map<proto::ProtEntityType,std::set<unsigned int>>::operator[](
                      &this->deleted_entity_record_map_,
                      &__k);
              std::set<unsigned int>::erase(v15, (const std::set<unsigned int>::key_type *)(v2 + 32));
              common::milog::MiLogStream::create(
                &v35,
                &common::milog::MiLogDefault::default_log_obj_,
                1u,
                "./src/group/group.cpp",
                "refreshDeletedGatherInfo",
                4832);
              v16 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
                      &v35,
                      (const char (*)[37])"gather is time to refresh gather_id:");
              v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v16,
                      (const unsigned int *)(v2 + 48));
              v18 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
                      v17,
                      (const char (*)[12])" config_id:");
              v19 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v18,
                      (const unsigned int *)(v2 + 32));
              v20 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                      v19,
                      (const char (*)[15])" refresh_time:");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v20,
                (const unsigned int *)(v2 + 64));
              common::milog::MiLogStream::~MiLogStream(&v35);
            }
          }
          else
          {
            common::milog::MiLogStream::create(
              &v34,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/group/group.cpp",
              "refreshDeletedGatherInfo",
              4825);
            v10 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
                    &v34,
                    (const char (*)[40])"findGatherExcelConfig fails, gather_id:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v2 + 48));
            common::milog::MiLogStream::~MiLogStream(&v34);
          }
        }
      }
      else
      {
        common::milog::MiLogStream::create(
          &v33,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/group/group.cpp",
          "refreshDeletedGatherInfo",
          4814);
        v8 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
               &v33,
               (const char (*)[35])"findGadgetConfig fails, config_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v2 + 32));
        common::milog::MiLogStream::~MiLogStream(&v33);
      }
      std::_Rb_tree_const_iterator<unsigned int>::operator++(&__for_begin);
    }
    std::set<unsigned int>::~set((std::set<unsigned int> *const)(v2 + 80));
  }
  else
  {
    common::milog::MiLogStream::create(
      &v35,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "refreshDeletedGatherInfo",
      4803);
    v5 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
           &v35,
           (const char (*)[34])"getScriptConfig fails, group_id: ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, &this->group_id_);
    common::milog::MiLogStream::~MiLogStream(&v35);
  }
  if ( v36 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 4839: range 0000000015FDC060-0000000015FDC4AB
void __fastcall Group::onBossMonsterDie(Group *const this, uint32_t config_id, proto::BossDieInfoBin *die_info)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // r14
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // r14
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // r14
  uint32_t v20; // eax
  proto::BossDieInfoBin *v21; // rax
  unsigned int *v22; // rcx
  proto::BossDieInfoBin *v23; // r8
  unsigned int OwnerPlayerUid; // [rsp+2Ch] [rbp-D4h] BYREF
  common::milog::MiLogStream v26; // [rsp+30h] [rbp-D0h] BYREF
  std::string val; // [rsp+50h] [rbp-B0h] BYREF
  char v28[144]; // [rsp+70h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v28;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 14 config_id:4838 64 16 14 scene_ptr:4841";
  *(_QWORD *)(v3 + 16) = Group::onBossMonsterDie;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  *(_DWORD *)(v3 + 48) = config_id;
  common::milog::MiLogStream::create(
    &v26,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/group/group.cpp",
    "onBossMonsterDie",
    4840);
  v6 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(&v26, (const char (*)[12])"config_id: ");
  v7 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, (const unsigned int *)(v3 + 48));
  v8 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v7, (const char (*)[12])" die_info: ");
  google::protobuf::Message::ShortDebugString[abi:cxx11](&val, die_info);
  v9 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, &val);
  v10 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v9, (const char (*)[7])" uid: ");
  OwnerPlayerUid = Group::getOwnerPlayerUid(this);
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, &OwnerPlayerUid);
  std::string::~string(&val);
  common::milog::MiLogStream::~MiLogStream(&v26);
  Group::getScene((const Group *const)(v3 + 64));
  if ( std::operator!=<Scene>((const std::shared_ptr<Scene> *)(v3 + 64), 0LL) )
  {
    v11 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    if ( Scene::isHomeScene(v11) )
    {
      common::milog::MiLogStream::create(
        &v26,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/group/group.cpp",
        "onBossMonsterDie",
        4845);
      v13 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(&v26, (const char (*)[10])"group_id:");
      v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, &this->group_id_);
      v15 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v14, (const char (*)[12])"config_id: ");
      v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, (const unsigned int *)(v3 + 48));
      v17 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v16, (const char (*)[12])" die_info: ");
      google::protobuf::Message::ShortDebugString[abi:cxx11](&val, die_info);
      v18 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v17, &val);
      v19 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v18, (const char (*)[7])" uid: ");
      OwnerPlayerUid = Group::getOwnerUid(this);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, &OwnerPlayerUid);
      std::string::~string(&val);
      common::milog::MiLogStream::~MiLogStream(&v26);
    }
  }
  std::map<unsigned int,proto::BossDieInfoBin>::erase(
    &this->boss_die_info_map_,
    (const std::map<unsigned int,proto::BossDieInfoBin>::key_type *)(v3 + 48));
  v20 = Group::getOwnerPlayerUid(this);
  proto::BossDieInfoBin::add_surround_uid_list(die_info, v20);
  v21 = std::move<proto::BossDieInfoBin &>(die_info);
  std::map<unsigned int,proto::BossDieInfoBin>::emplace<unsigned int &,proto::BossDieInfoBin>(
    &this->boss_die_info_map_,
    (unsigned int *)(v3 + 48),
    v21,
    v22,
    v23);
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 64));
  if ( v28 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 4855: range 0000000015FDC4AC-0000000015FDC769
void __fastcall Group::getAndClearBossDieInfo(Group *const this, uint32_t config_id, proto::BossDieInfoBin *die_info)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::_Rb_tree_iterator<std::pair<unsigned int const,proto::BossDieInfoBin> >::pointer v6; // rax
  proto::BossDieInfoBin *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // r13
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // r13
  unsigned int OwnerUid; // [rsp+24h] [rbp-CCh] BYREF
  std::_Rb_tree_iterator<std::pair<unsigned int const,proto::BossDieInfoBin> >::_Self __y; // [rsp+28h] [rbp-C8h] BYREF
  common::milog::MiLogStream v16; // [rsp+30h] [rbp-C0h] BYREF
  std::string val; // [rsp+50h] [rbp-A0h] BYREF
  char v18[128]; // [rsp+70h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 14 config_id:4854 64 8 9 iter:4856";
  *(_QWORD *)(v3 + 16) = Group::getAndClearBossDieInfo;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116352;
  *(_DWORD *)(v3 + 48) = config_id;
  *(std::map<unsigned int,proto::BossDieInfoBin>::iterator *)(v3 + 64) = std::map<unsigned int,proto::BossDieInfoBin>::find(
                                                                           &this->boss_die_info_map_,
                                                                           (const std::map<unsigned int,proto::BossDieInfoBin>::key_type *)(v3 + 48));
  __y._M_node = std::map<unsigned int,proto::BossDieInfoBin>::end(&this->boss_die_info_map_)._M_node;
  if ( !std::operator==(
          (const std::_Rb_tree_iterator<std::pair<unsigned int const,proto::BossDieInfoBin> >::_Self *)(v3 + 64),
          &__y) )
  {
    v6 = std::_Rb_tree_iterator<std::pair<unsigned int const,proto::BossDieInfoBin>>::operator->((const std::_Rb_tree_iterator<std::pair<unsigned int const,proto::BossDieInfoBin> > *const)(v3 + 64));
    v7 = std::move<proto::BossDieInfoBin &>(&v6->second);
    proto::BossDieInfoBin::operator=(die_info, v7);
    std::map<unsigned int,proto::BossDieInfoBin>::erase(
      &this->boss_die_info_map_,
      (const std::map<unsigned int,proto::BossDieInfoBin>::key_type *)(v3 + 48));
    common::milog::MiLogStream::create(
      &v16,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/group/group.cpp",
      "getAndClearBossDieInfo",
      4863);
    v8 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(&v16, (const char (*)[12])"config_id: ");
    v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v3 + 48));
    v10 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v9, (const char (*)[12])" die_info: ");
    google::protobuf::Message::ShortDebugString[abi:cxx11](&val, die_info);
    v11 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v10, &val);
    v12 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v11, (const char (*)[7])" uid: ");
    OwnerUid = Group::getOwnerUid(this);
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, &OwnerUid);
    std::string::~string(&val);
    common::milog::MiLogStream::~MiLogStream(&v16);
  }
  if ( v18 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 4867: range 0000000015FDC7DE-0000000015FDCAEC
void __cdecl Group::notifyClientSuite(Group *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  uint32_t suite_index; // r14d
  unsigned int *v6; // rax
  uint32_t *v7; // rdx
  Scene *v8; // r14
  const GroupScriptConfig *group_script_config_ptr; // [rsp+10h] [rbp-120h]
  google::protobuf::Map<unsigned int,unsigned int> *proto_group_map; // [rsp+18h] [rbp-118h]
  std::function<ForeachPolicy(Player&)> p_func; // [rsp+20h] [rbp-110h] BYREF
  char v12[240]; // [rsp+40h] [rbp-F0h] BYREF

  v1 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_2(192LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 32 16 14 scene_ptr:4875 64 96 11 notify:4871";
  *(_QWORD *)(v1 + 16) = Group::notifyClientSuite;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -219021312;
  v3[536862725] = -202116109;
  group_script_config_ptr = Group::getScriptConfig(this);
  if ( group_script_config_ptr
    && !std::unordered_map<unsigned int,NpcScriptConfig>::empty(&group_script_config_ptr->npc_config_map) )
  {
    proto::GroupSuiteNotify::GroupSuiteNotify((proto::GroupSuiteNotify *const)(v1 + 64));
    proto_group_map = proto::GroupSuiteNotify::mutable_group_map((proto::GroupSuiteNotify *const)(v1 + 64));
    if ( *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    suite_index = this->suite_index_;
    v6 = google::protobuf::Map<unsigned int,unsigned int>::operator[](proto_group_map, &this->group_id_);
    v7 = v6;
    if ( *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v6 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000) )
    {
      __asan_report_store4(v6);
    }
    *v7 = suite_index;
    Group::getScene((const Group *const)(v1 + 32));
    if ( !std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v1 + 32)) )
    {
      v8 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
      std::function<ForeachPolicy ()(Player &)>::function<Group::notifyClientSuite(void)::{lambda(Player &)#1},void,void>(
        &p_func,
        (Group::notifyClientSuite::<lambda(Player&)>)(v1 + 64));
      Scene::foreachPlayer(v8, &p_func);
      std::function<ForeachPolicy ()(Player &)>::~function(&p_func);
    }
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v1 + 32));
    proto::GroupSuiteNotify::~GroupSuiteNotify((proto::GroupSuiteNotify *const)(v1 + 64));
  }
  if ( v12 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 4878: range 0000000015FDC76A-0000000015FDC7DD
ForeachPolicy __cdecl Group::notifyClientSuite(void)::{lambda(Player &)#1}::operator()(
        const Group::notifyClientSuite::<lambda(Player&)> *const __closure,
        Player *player)
{
  PlayerSceneComp *SceneComp; // rax
  EnterSceneState state; // [rsp+1Ch] [rbp-4h]

  SceneComp = Player::getSceneComp(player);
  state = PlayerSceneComp::getEnterSceneState(SceneComp);
  if ( state == ENTER_SCENE_POST || state == ENTER_SCENE_DONE )
  {
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    Player::sendProto(player, __closure->__notify);
  }
  return 0;
};

// Line 4892: range 0000000015FDCAEE-0000000015FDD2AB
bool __cdecl Group::setOneOffRecordVersion(
        Group *const this,
        proto::ProtEntityType type,
        uint32_t config_id,
        uint32_t version)
{
  unsigned __int64 v4; // r12
  __int64 v5; // rax
  _DWORD *v6; // r13
  const std::string *v7; // rax
  const char *v8; // rax
  bool v9; // r14
  const std::string *v10; // rax
  const char *v11; // rax
  const std::string *v12; // rax
  const char *v13; // rax
  const std::string *v14; // rax
  const char *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  Player *v18; // rax
  PlayerSceneComp *SceneComp; // rdi
  uint32_t group_id; // r8d
  uint32_t dungeon_id; // ecx
  bool result; // al
  bool is_oneoff; // [rsp+27h] [rbp-C9h]
  const GroupScriptConfig *script_config_ptr; // [rsp+28h] [rbp-C8h]
  const MonsterScriptConfig *monster_config_ptr; // [rsp+30h] [rbp-C0h]
  const GadgetScriptConfig *gadget_config_ptr; // [rsp+38h] [rbp-B8h]
  common::milog::MiLogStream v30; // [rsp+40h] [rbp-B0h] BYREF
  char v31[144]; // [rsp+60h] [rbp-90h] BYREF

  v4 = (unsigned __int64)v31;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(96LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "2 32 16 14 scene_ptr:4929 64 16 15 player_ptr:4936";
  *(_QWORD *)(v4 + 16) = Group::setOneOffRecordVersion;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -219021312;
  v6[536862722] = -202178560;
  script_config_ptr = Group::getScriptConfig(this);
  if ( !script_config_ptr )
  {
    common::milog::MiLogStream::create(
      &v30,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "setOneOffRecordVersion",
      4896);
    v7 = proto::ProtEntityType_Name[abi:cxx11](type);
    v8 = (const char *)std::string::c_str(v7);
    common::milog::MiLogStream::operator()(
      &v30,
      "group config not found for type=%s config_id=%u version=%u",
      v8,
      config_id,
      version);
    common::milog::MiLogStream::~MiLogStream(&v30);
    v9 = 0;
    goto LABEL_33;
  }
  is_oneoff = 0;
  monster_config_ptr = GroupScriptConfig::findMonsterConfig(script_config_ptr, config_id);
  if ( type == PROT_ENTITY_MONSTER )
  {
    if ( !monster_config_ptr )
    {
      common::milog::MiLogStream::create(
        &v30,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/group/group.cpp",
        "setOneOffRecordVersion",
        4906);
      v10 = proto::ProtEntityType_Name[abi:cxx11](PROT_ENTITY_MONSTER);
      v11 = (const char *)std::string::c_str(v10);
      common::milog::MiLogStream::operator()(
        &v30,
        "monster config not found for type=%s config_id=%u version=%u",
        v11,
        config_id,
        version);
      common::milog::MiLogStream::~MiLogStream(&v30);
      v9 = 0;
      goto LABEL_33;
    }
    if ( *(_BYTE *)(((unsigned __int64)&monster_config_ptr->is_oneoff >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)monster_config_ptr + 97) & 7) >= *(_BYTE *)(((unsigned __int64)&monster_config_ptr->is_oneoff >> 3)
                                                                      + 0x7FFF8000) )
    {
      __asan_report_load1(&monster_config_ptr->is_oneoff);
    }
    is_oneoff = monster_config_ptr->is_oneoff;
  }
  gadget_config_ptr = GroupScriptConfig::findGadgetConfig(script_config_ptr, config_id);
  if ( type == PROT_ENTITY_GADGET )
  {
    if ( !gadget_config_ptr )
    {
      common::milog::MiLogStream::create(
        &v30,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/group/group.cpp",
        "setOneOffRecordVersion",
        4917);
      v12 = proto::ProtEntityType_Name[abi:cxx11](PROT_ENTITY_GADGET);
      v13 = (const char *)std::string::c_str(v12);
      common::milog::MiLogStream::operator()(
        &v30,
        "gadget config not found for type=%s config_id=%u version=%u",
        v13,
        config_id,
        version);
      common::milog::MiLogStream::~MiLogStream(&v30);
      v9 = 0;
      goto LABEL_33;
    }
    if ( *(_BYTE *)(((unsigned __int64)&gadget_config_ptr->is_oneoff >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)gadget_config_ptr + 74) & 7) >= *(_BYTE *)(((unsigned __int64)&gadget_config_ptr->is_oneoff >> 3)
                                                                     + 0x7FFF8000) )
    {
      __asan_report_load1(&gadget_config_ptr->is_oneoff);
    }
    is_oneoff = gadget_config_ptr->is_oneoff;
  }
  if ( is_oneoff )
  {
    Group::getScene((const Group *const)(v4 + 32));
    if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v4 + 32), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v30,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/group/group.cpp",
        "setOneOffRecordVersion",
        4932);
      v16 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
              &v30,
              (const char (*)[31])"group scene is nullptr, group:");
      operator<<(v16, this);
      common::milog::MiLogStream::~MiLogStream(&v30);
      v9 = 0;
    }
    else
    {
      std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
      Scene::getOwnPlayer((const Scene *const)(v4 + 64));
      if ( std::operator==<Player>((const std::shared_ptr<Player> *)(v4 + 64), 0LL) )
      {
        common::milog::MiLogStream::create(
          &v30,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/group/group.cpp",
          "setOneOffRecordVersion",
          4939);
        v17 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                &v30,
                (const char (*)[36])"group player_ptr is nullptr, group:");
        operator<<(v17, this);
        common::milog::MiLogStream::~MiLogStream(&v30);
        v9 = 0;
      }
      else
      {
        v18 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
        SceneComp = Player::getSceneComp(v18);
        if ( *(_BYTE *)(((unsigned __int64)&this->group_id_ >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&this->group_id_ >> 3) + 0x7FFF8000) <= 3 )
        {
          SceneComp = (PlayerSceneComp *)&this->group_id_;
          __asan_report_load4();
        }
        group_id = this->group_id_;
        if ( *(_BYTE *)(((unsigned __int64)&this->dungeon_id_ >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)this + 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->dungeon_id_ >> 3) + 0x7FFF8000) )
        {
          SceneComp = (PlayerSceneComp *)&this->dungeon_id_;
          __asan_report_load4();
        }
        dungeon_id = this->dungeon_id_;
        if ( *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) <= 3 )
        {
          SceneComp = (PlayerSceneComp *)&this->scene_id_;
          __asan_report_load4();
        }
        v9 = PlayerSceneComp::setOneOffRecordVersion(
               SceneComp,
               type,
               this->scene_id_,
               dungeon_id,
               group_id,
               config_id,
               version);
      }
      std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v4 + 64));
    }
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v4 + 32));
  }
  else
  {
    common::milog::MiLogStream::create(
      &v30,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "setOneOffRecordVersion",
      4925);
    v14 = proto::ProtEntityType_Name[abi:cxx11](type);
    v15 = (const char *)std::string::c_str(v14);
    common::milog::MiLogStream::operator()(
      &v30,
      "oneoff NOT set in config for type=%s config_id=%u version=%u",
      v15,
      config_id,
      version);
    common::milog::MiLogStream::~MiLogStream(&v30);
    v9 = 0;
  }
LABEL_33:
  result = v9;
  if ( v31 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 4948: range 0000000015FDD2AC-0000000015FDD921
bool __cdecl Group::isBanSpawnByOneoff(const Group *const this, proto::ProtEntityType type, uint32_t config_id)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  bool v6; // r14
  const std::string *v7; // rax
  __int64 v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  Player *v11; // rax
  PlayerSceneComp *SceneComp; // rdi
  uint32_t group_id; // r8d
  uint32_t dungeon_id; // ecx
  __int64 v15; // r15
  __int64 scene_id; // r14
  const std::string *v17; // rax
  const char *v18; // rax
  bool result; // al
  uint32_t v20; // [rsp+Ch] [rbp-E4h]
  common::milog::MiLogStream v23; // [rsp+20h] [rbp-D0h] BYREF
  char v24[176]; // [rsp+40h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 4 19 config_version:4955 48 4 12 version:4976 64 16 14 scene_ptr:4962 96 16 15 player_ptr:4969";
  *(_QWORD *)(v3 + 16) = Group::isBanSpawnByOneoff;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -219021312;
  v5[536862723] = -202178560;
  if ( !Group::isOneOffByConfig(this, type, config_id) )
  {
    v6 = 0;
  }
  else
  {
    *(_DWORD *)(v3 + 32) = 0;
    if ( !Group::getOneoffResetVersionByConfigID(this, type, config_id, (uint32_t *)(v3 + 32)) )
    {
      common::milog::MiLogStream::create(
        &v23,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/group/group.cpp",
        "isBanSpawnByOneoff",
        4958);
      v7 = proto::ProtEntityType_Name[abi:cxx11](type);
      v8 = std::string::c_str(v7);
      common::milog::MiLogStream::operator()(&v23, off_25ABDD80, v8, config_id);
      common::milog::MiLogStream::~MiLogStream(&v23);
      v6 = 0;
    }
    else
    {
      Group::getScene((const Group *const)(v3 + 64));
      if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v3 + 64), 0LL) )
      {
        common::milog::MiLogStream::create(
          &v23,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/group/group.cpp",
          "isBanSpawnByOneoff",
          4965);
        v9 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
               &v23,
               (const char (*)[31])"group scene is nullptr, group:");
        operator<<(v9, this);
        common::milog::MiLogStream::~MiLogStream(&v23);
        v6 = 0;
      }
      else
      {
        std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        Scene::getOwnPlayer((const Scene *const)(v3 + 96));
        if ( std::operator==<Player>((const std::shared_ptr<Player> *)(v3 + 96), 0LL) )
        {
          common::milog::MiLogStream::create(
            &v23,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/group/group.cpp",
            "isBanSpawnByOneoff",
            4972);
          v10 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                  &v23,
                  (const char (*)[36])"group player_ptr is nullptr, group:");
          operator<<(v10, this);
          common::milog::MiLogStream::~MiLogStream(&v23);
          v6 = 0;
        }
        else
        {
          *(_DWORD *)(v3 + 48) = 0;
          v11 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
          SceneComp = Player::getSceneComp(v11);
          if ( *(_BYTE *)(((unsigned __int64)&this->group_id_ >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&this->group_id_ >> 3) + 0x7FFF8000) <= 3 )
          {
            SceneComp = (PlayerSceneComp *)&this->group_id_;
            __asan_report_load4();
          }
          group_id = this->group_id_;
          if ( *(_BYTE *)(((unsigned __int64)&this->dungeon_id_ >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)this + 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->dungeon_id_ >> 3)
                                                                + 0x7FFF8000) )
          {
            SceneComp = (PlayerSceneComp *)&this->dungeon_id_;
            __asan_report_load4();
          }
          dungeon_id = this->dungeon_id_;
          if ( *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) <= 3 )
          {
            SceneComp = (PlayerSceneComp *)&this->scene_id_;
            __asan_report_load4();
          }
          if ( PlayerSceneComp::getOneoffVersion(
                 SceneComp,
                 type,
                 this->scene_id_,
                 dungeon_id,
                 group_id,
                 config_id,
                 (uint32_t *)(v3 + 48)) )
          {
            common::milog::MiLogStream::create(
              &v23,
              &common::milog::MiLogDefault::default_log_obj_,
              1u,
              "./src/group/group.cpp",
              "isBanSpawnByOneoff",
              4979);
            if ( *(_BYTE *)(((unsigned __int64)&this->group_id_ >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&this->group_id_ >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4();
            }
            v20 = this->group_id_;
            if ( *(_BYTE *)(((unsigned __int64)&this->dungeon_id_ >> 3) + 0x7FFF8000) != 0
              && (char)((((_BYTE)this + 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->dungeon_id_ >> 3)
                                                                  + 0x7FFF8000) )
            {
              __asan_report_load4();
            }
            v15 = this->dungeon_id_;
            if ( *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4();
            }
            scene_id = this->scene_id_;
            v17 = proto::ProtEntityType_Name[abi:cxx11](type);
            v18 = (const char *)std::string::c_str(v17);
            common::milog::MiLogStream::operator()(
              &v23,
              "oneoff reset config_version=%u vs record_version=%u for type=%s config_id=%u scene_id=%u dungeon_id=%u gro"
              "up_id=%u config_id=%u",
              *(unsigned int *)(v3 + 32),
              *(unsigned int *)(v3 + 48),
              v18,
              config_id,
              scene_id,
              v15,
              v20,
              config_id);
            common::milog::MiLogStream::~MiLogStream(&v23);
            v6 = *(_DWORD *)(v3 + 32) <= *(_DWORD *)(v3 + 48);
          }
          else
          {
            v6 = 0;
          }
        }
        std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v3 + 96));
      }
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 64));
    }
  }
  result = v6;
  if ( v24 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4989: range 0000000015FDD922-0000000015FDDD1E
bool __cdecl Group::isBanLootByOneoff(const Group *const this, proto::ProtEntityType type, uint32_t config_id)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  bool OneoffVersion; // r14
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  Player *v9; // rax
  PlayerSceneComp *SceneComp; // rdi
  uint32_t group_id; // r8d
  uint32_t dungeon_id; // ecx
  bool result; // al
  common::milog::MiLogStream v16; // [rsp+10h] [rbp-D0h] BYREF
  char v17[176]; // [rsp+30h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 4 12 version:5010 64 16 14 scene_ptr:4996 96 16 15 player_ptr:5003";
  *(_QWORD *)(v3 + 16) = Group::isBanLootByOneoff;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -219021312;
  v5[536862723] = -202178560;
  if ( !Group::isOneOffByConfig(this, type, config_id) )
  {
    OneoffVersion = 0;
  }
  else
  {
    Group::getScene((const Group *const)(v3 + 64));
    if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v3 + 64), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v16,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/group/group.cpp",
        "isBanLootByOneoff",
        4999);
      v7 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
             &v16,
             (const char (*)[31])"group scene is nullptr, group:");
      operator<<(v7, this);
      common::milog::MiLogStream::~MiLogStream(&v16);
      OneoffVersion = 0;
    }
    else
    {
      std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      Scene::getOwnPlayer((const Scene *const)(v3 + 96));
      if ( std::operator==<Player>((const std::shared_ptr<Player> *)(v3 + 96), 0LL) )
      {
        common::milog::MiLogStream::create(
          &v16,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/group/group.cpp",
          "isBanLootByOneoff",
          5006);
        v8 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
               &v16,
               (const char (*)[36])"group player_ptr is nullptr, group:");
        operator<<(v8, this);
        common::milog::MiLogStream::~MiLogStream(&v16);
        OneoffVersion = 0;
      }
      else
      {
        *(_DWORD *)(v3 + 48) = 0;
        v9 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
        SceneComp = Player::getSceneComp(v9);
        if ( *(_BYTE *)(((unsigned __int64)&this->group_id_ >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&this->group_id_ >> 3) + 0x7FFF8000) <= 3 )
        {
          SceneComp = (PlayerSceneComp *)&this->group_id_;
          __asan_report_load4();
        }
        group_id = this->group_id_;
        if ( *(_BYTE *)(((unsigned __int64)&this->dungeon_id_ >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)this + 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->dungeon_id_ >> 3) + 0x7FFF8000) )
        {
          SceneComp = (PlayerSceneComp *)&this->dungeon_id_;
          __asan_report_load4();
        }
        dungeon_id = this->dungeon_id_;
        if ( *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&this->scene_id_ >> 3) + 0x7FFF8000) <= 3 )
        {
          SceneComp = (PlayerSceneComp *)&this->scene_id_;
          __asan_report_load4();
        }
        OneoffVersion = PlayerSceneComp::getOneoffVersion(
                          SceneComp,
                          type,
                          this->scene_id_,
                          dungeon_id,
                          group_id,
                          config_id,
                          (uint32_t *)(v3 + 48));
      }
      std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v3 + 96));
    }
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 64));
  }
  result = OneoffVersion;
  if ( v17 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5016: range 0000000015FDDD20-0000000015FDE0FF
bool __cdecl Group::getOneoffResetVersionByConfigID(
        const Group *const this,
        proto::ProtEntityType type,
        uint32_t config_id,
        uint32_t *version)
{
  const std::string *v4; // rax
  const char *v5; // rax
  const std::string *v7; // rax
  const char *v8; // rax
  uint32_t oneoff_reset_version; // ecx
  const std::string *v10; // rax
  const char *v11; // rax
  uint32_t v12; // ecx
  const std::string *v13; // rax
  const char *v14; // rax
  const GroupScriptConfig *script_config_ptr; // [rsp+28h] [rbp-48h]
  const GadgetScriptConfig *gadget_config_ptr; // [rsp+30h] [rbp-40h]
  const MonsterScriptConfig *monster_config_ptr; // [rsp+38h] [rbp-38h]
  common::milog::MiLogStream v20; // [rsp+40h] [rbp-30h] BYREF

  script_config_ptr = Group::getScriptConfig(this);
  if ( script_config_ptr )
  {
    if ( type == PROT_ENTITY_MONSTER )
    {
      monster_config_ptr = GroupScriptConfig::findMonsterConfig(script_config_ptr, config_id);
      if ( monster_config_ptr )
      {
        if ( *(_BYTE *)(((unsigned __int64)&monster_config_ptr->oneoff_reset_version >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&monster_config_ptr->oneoff_reset_version >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4();
        }
        oneoff_reset_version = monster_config_ptr->oneoff_reset_version;
        if ( *(_BYTE *)(((unsigned __int64)version >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)version & 7) + 3) >= *(_BYTE *)(((unsigned __int64)version >> 3) + 0x7FFF8000) )
        {
          __asan_report_store4(version);
        }
        *version = oneoff_reset_version;
        return 1;
      }
      else
      {
        common::milog::MiLogStream::create(
          &v20,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/group/group.cpp",
          "getOneoffResetVersionByConfigID",
          5029);
        v7 = proto::ProtEntityType_Name[abi:cxx11](PROT_ENTITY_MONSTER);
        v8 = (const char *)std::string::c_str(v7);
        common::milog::MiLogStream::operator()(&v20, "monster config not found for type=%s config_id=%u", v8, config_id);
        common::milog::MiLogStream::~MiLogStream(&v20);
        return 0;
      }
    }
    else if ( type == PROT_ENTITY_GADGET )
    {
      gadget_config_ptr = GroupScriptConfig::findGadgetConfig(script_config_ptr, config_id);
      if ( gadget_config_ptr )
      {
        if ( *(_BYTE *)(((unsigned __int64)&gadget_config_ptr->oneoff_reset_version >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)gadget_config_ptr - 20) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&gadget_config_ptr->oneoff_reset_version >> 3)
                                                                           + 0x7FFF8000) )
        {
          __asan_report_load4();
        }
        v12 = gadget_config_ptr->oneoff_reset_version;
        if ( *(_BYTE *)(((unsigned __int64)version >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)version & 7) + 3) >= *(_BYTE *)(((unsigned __int64)version >> 3) + 0x7FFF8000) )
        {
          __asan_report_store4(version);
        }
        *version = v12;
        return 1;
      }
      else
      {
        common::milog::MiLogStream::create(
          &v20,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/group/group.cpp",
          "getOneoffResetVersionByConfigID",
          5041);
        v10 = proto::ProtEntityType_Name[abi:cxx11](PROT_ENTITY_GADGET);
        v11 = (const char *)std::string::c_str(v10);
        common::milog::MiLogStream::operator()(&v20, "gadget config not found for type=%s config_id=%u", v11, config_id);
        common::milog::MiLogStream::~MiLogStream(&v20);
        return 0;
      }
    }
    else
    {
      common::milog::MiLogStream::create(
        &v20,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/group/group.cpp",
        "getOneoffResetVersionByConfigID",
        5048);
      v13 = proto::ProtEntityType_Name[abi:cxx11](type);
      v14 = (const char *)std::string::c_str(v13);
      common::milog::MiLogStream::operator()(&v20, "invalid type=%s for config_id=%u", v14, config_id);
      common::milog::MiLogStream::~MiLogStream(&v20);
      return 0;
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v20,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "getOneoffResetVersionByConfigID",
      5020);
    v4 = proto::ProtEntityType_Name[abi:cxx11](type);
    v5 = (const char *)std::string::c_str(v4);
    common::milog::MiLogStream::operator()(&v20, "group config not found for type=%s config_id=%u", v5, config_id);
    common::milog::MiLogStream::~MiLogStream(&v20);
    return 0;
  }
};

// Line 5053: range 0000000015FDE100-0000000015FDE44F
bool __cdecl Group::isOneOffByConfig(const Group *const this, proto::ProtEntityType type, uint32_t config_id)
{
  const std::string *v3; // rax
  const char *v4; // rax
  const std::string *v6; // rax
  const char *v7; // rax
  const std::string *v8; // rax
  const char *v9; // rax
  const std::string *v10; // rax
  const char *v11; // rax
  const GroupScriptConfig *script_config_ptr; // [rsp+18h] [rbp-48h]
  const GadgetScriptConfig *gadget_config_ptr; // [rsp+20h] [rbp-40h]
  const MonsterScriptConfig *monster_config_ptr; // [rsp+28h] [rbp-38h]
  common::milog::MiLogStream v16; // [rsp+30h] [rbp-30h] BYREF

  script_config_ptr = Group::getScriptConfig(this);
  if ( script_config_ptr )
  {
    if ( type == PROT_ENTITY_MONSTER )
    {
      monster_config_ptr = GroupScriptConfig::findMonsterConfig(script_config_ptr, config_id);
      if ( monster_config_ptr )
      {
        if ( *(_BYTE *)(((unsigned __int64)&monster_config_ptr->is_oneoff >> 3) + 0x7FFF8000) != 0
          && (((unsigned __int8)monster_config_ptr + 97) & 7) >= *(_BYTE *)(((unsigned __int64)&monster_config_ptr->is_oneoff >> 3)
                                                                          + 0x7FFF8000) )
        {
          __asan_report_load1(&monster_config_ptr->is_oneoff);
        }
        return monster_config_ptr->is_oneoff;
      }
      else
      {
        common::milog::MiLogStream::create(
          &v16,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/group/group.cpp",
          "isOneOffByConfig",
          5066);
        v6 = proto::ProtEntityType_Name[abi:cxx11](PROT_ENTITY_MONSTER);
        v7 = (const char *)std::string::c_str(v6);
        common::milog::MiLogStream::operator()(&v16, "monster config not found for type=%s config_id=%u", v7, config_id);
        common::milog::MiLogStream::~MiLogStream(&v16);
        return 0;
      }
    }
    else if ( type == PROT_ENTITY_GADGET )
    {
      gadget_config_ptr = GroupScriptConfig::findGadgetConfig(script_config_ptr, config_id);
      if ( gadget_config_ptr )
      {
        if ( *(_BYTE *)(((unsigned __int64)&gadget_config_ptr->is_oneoff >> 3) + 0x7FFF8000) != 0
          && (((unsigned __int8)gadget_config_ptr + 74) & 7) >= *(_BYTE *)(((unsigned __int64)&gadget_config_ptr->is_oneoff >> 3)
                                                                         + 0x7FFF8000) )
        {
          __asan_report_load1(&gadget_config_ptr->is_oneoff);
        }
        return gadget_config_ptr->is_oneoff;
      }
      else
      {
        common::milog::MiLogStream::create(
          &v16,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/group/group.cpp",
          "isOneOffByConfig",
          5077);
        v8 = proto::ProtEntityType_Name[abi:cxx11](PROT_ENTITY_GADGET);
        v9 = (const char *)std::string::c_str(v8);
        common::milog::MiLogStream::operator()(&v16, "gadget config not found for type=%s config_id=%u", v9, config_id);
        common::milog::MiLogStream::~MiLogStream(&v16);
        return 0;
      }
    }
    else
    {
      common::milog::MiLogStream::create(
        &v16,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/group/group.cpp",
        "isOneOffByConfig",
        5083);
      v10 = proto::ProtEntityType_Name[abi:cxx11](type);
      v11 = (const char *)std::string::c_str(v10);
      common::milog::MiLogStream::operator()(&v16, "invalid type=%s for config_id=%u", v11, config_id);
      common::milog::MiLogStream::~MiLogStream(&v16);
      return 0;
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v16,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "isOneOffByConfig",
      5057);
    v3 = proto::ProtEntityType_Name[abi:cxx11](type);
    v4 = (const char *)std::string::c_str(v3);
    common::milog::MiLogStream::operator()(&v16, "group config not found for type=%s config_id=%u", v4, config_id);
    common::milog::MiLogStream::~MiLogStream(&v16);
    return 0;
  }
};

// Line 5088: range 0000000015FDE450-0000000015FDE53C
bool __cdecl Group::isIgnoreWorldLevelRevise(const Group *const this)
{
  common::milog::MiLogStream *v1; // rdx
  const GroupInfoScriptConfig *group_info_config_ptr; // [rsp+18h] [rbp-38h]
  common::milog::MiLogStream v4; // [rsp+20h] [rbp-30h] BYREF

  group_info_config_ptr = Group::getInfoScriptConfig(this);
  if ( group_info_config_ptr )
  {
    if ( *(char *)(((unsigned __int64)&group_info_config_ptr->is_ignore_world_level_revise >> 3) + 0x7FFF8000) < 0 )
      __asan_report_load1(&group_info_config_ptr->is_ignore_world_level_revise);
    return group_info_config_ptr->is_ignore_world_level_revise;
  }
  else
  {
    common::milog::MiLogStream::create(
      &v4,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "isIgnoreWorldLevelRevise",
      5092);
    v1 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
           &v4,
           (const char (*)[30])"group_info_config_ptr is null");
    operator<<(v1, this);
    common::milog::MiLogStream::~MiLogStream(&v4);
    return 0;
  }
};

// Line 5100: range 0000000015FDE53E-0000000015FDE926
uint32_t __fastcall Group::getAdjustedLevel(const Group *const this, uint32_t base_level)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  common::milog::MiLogStream *v5; // rax
  uint32_t result; // eax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  const GroupInfoScriptConfig *group_info_config_ptr; // [rsp+18h] [rbp-A8h]
  common::milog::MiLogStream v15; // [rsp+20h] [rbp-A0h] BYREF
  char v16[128]; // [rsp+40h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 4 21 rely_world_level:5113 64 4 15 base_level:5099";
  *(_QWORD *)(v2 + 16) = Group::getAdjustedLevel;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -202116348;
  *(_DWORD *)(v2 + 64) = base_level;
  group_info_config_ptr = Group::getInfoScriptConfig(this);
  if ( group_info_config_ptr )
  {
    if ( *(char *)(((unsigned __int64)&group_info_config_ptr->is_ignore_world_level_revise >> 3) + 0x7FFF8000) < 0 )
      __asan_report_load1(&group_info_config_ptr->is_ignore_world_level_revise);
    if ( group_info_config_ptr->is_ignore_world_level_revise )
    {
      result = *(_DWORD *)(v2 + 64);
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->init_param_.world_level >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&this->init_param_.world_level >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4();
      }
      *(_DWORD *)(v2 + 48) = this->init_param_.world_level;
      if ( *(_BYTE *)(((unsigned __int64)&this->rely_start_world_level_limit_activity_id_ >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&this->rely_start_world_level_limit_activity_id_ >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4();
      }
      if ( this->rely_start_world_level_limit_activity_id_ )
      {
        if ( *(_BYTE *)(((unsigned __int64)&this->init_param_.rely_activity_world_level_limit >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)this - 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->init_param_.rely_activity_world_level_limit >> 3)
                                                              + 0x7FFF8000) )
        {
          __asan_report_load4();
        }
        *(_DWORD *)(v2 + 48) = this->init_param_.rely_activity_world_level_limit;
      }
      common::milog::MiLogStream::create(
        &v15,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/group/group.cpp",
        "getAdjustedLevel",
        5118);
      v7 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
             &v15,
             (const char (*)[24])"[LVL] rely_world_level:");
      v8 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v2 + 48));
      v9 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v8, (const char (*)[14])", base_level:");
      v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v2 + 64));
      v11 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v10, (const char (*)[14])" activity_id:");
      v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v11,
              &this->rely_start_world_level_limit_activity_id_);
      v13 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v12, (const char (*)[11])" group_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, &this->group_id_);
      common::milog::MiLogStream::~MiLogStream(&v15);
      result = PlayerWorld::getAdjustedLevel(*(_DWORD *)(v2 + 48), *(_DWORD *)(v2 + 64));
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v15,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/group/group.cpp",
      "getAdjustedLevel",
      5104);
    v5 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
           &v15,
           (const char (*)[37])"getInfoScriptConfig fails, group_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, &this->group_id_);
    common::milog::MiLogStream::~MiLogStream(&v15);
    result = *(_DWORD *)(v2 + 64);
  }
  if ( v16 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 5123: range 0000000015FDE928-0000000015FDED8E
void __cdecl Group::operatePlayerAbilityGroup(
        Group *const this,
        const Challenge *challenge,
        bool is_add,
        std::unordered_set<unsigned int> *p_uid_set)
{
  unsigned __int64 v4; // r12
  __int64 v5; // rax
  unsigned __int64 v6; // r13
  GameserverService *v7; // rax
  uint32_t v8; // ecx
  Player *v10; // rax
  PlayerAbilityGroupComp *AbilityGroupComp; // rcx
  Player *v12; // rax
  PlayerAbilityGroupComp *v13; // rax
  Player *v14; // rax
  PlayerAbilityGroupComp *v15; // rax
  Player *v16; // rax
  PlayerAbilityGroupComp *v17; // rax
  Player *v18; // rax
  PlayerAbilityGroupComp *v19; // rax
  common::milog::MiLogStream *v20; // rax
  std::map<unsigned int,int>::iterator __for_begin; // [rsp+20h] [rbp-C0h] BYREF
  std::map<unsigned int,int>::iterator __for_end; // [rsp+28h] [rbp-B8h] BYREF
  std::map<unsigned int,int> *__for_range; // [rsp+30h] [rbp-B0h]
  std::pair<unsigned int const,int> *__in; // [rsp+38h] [rbp-A8h]
  std::tuple_element<0,std::pair<unsigned int const,int> >::type *uid; // [rsp+40h] [rbp-A0h]
  std::tuple_element<1,std::pair<unsigned int const,int> >::type *_; // [rsp+48h] [rbp-98h]
  common::milog::MiLogStream v29; // [rsp+50h] [rbp-90h] BYREF
  char v30[112]; // [rsp+70h] [rbp-70h] BYREF

  v4 = (unsigned __int64)v30;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 16 15 player_ptr:5126";
  *(_QWORD *)(v4 + 16) = Group::operatePlayerAbilityGroup;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202178560;
  __for_range = &this->viewing_uid_map_;
  __for_begin._M_node = std::map<unsigned int,int>::begin(&this->viewing_uid_map_)._M_node;
  __for_end._M_node = std::map<unsigned int,int>::end(&this->viewing_uid_map_)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    __in = std::_Rb_tree_iterator<std::pair<unsigned int const,int>>::operator*(&__for_begin);
    uid = std::get<0ul,unsigned int const,int>(__in);
    _ = std::get<1ul,unsigned int const,int>(__in);
    v7 = ServiceBox::findService<GameserverService>();
    v8 = (unsigned int)GameserverService::getGameThreadLocal(v7) + 16;
    if ( *(_BYTE *)(((unsigned __int64)uid >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)uid & 7) + 3) >= *(_BYTE *)(((unsigned __int64)uid >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4();
    }
    PlayerMgr::findOnlinePlayer((PlayerMgr *const)(v4 + 32), v8);
    if ( std::operator!=<Player>((const std::shared_ptr<Player> *)(v4 + 32), 0LL)
      && (std::unordered_set<unsigned int>::empty(p_uid_set)
       || common::tools::MiscUtils::isContains<std::unordered_set<unsigned int>,unsigned int>(p_uid_set, uid)) )
    {
      v10 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
      AbilityGroupComp = Player::getAbilityGroupComp(v10);
      if ( *(_BYTE *)(((unsigned __int64)&this->group_id_ >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&this->group_id_ >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4();
      }
      PlayerAbilityGroupComp::markAbilityGroupSource(AbilityGroupComp, ABILITY_GROUP_SOURCE_CHALLENGE, this->group_id_);
      v12 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
      v13 = Player::getAbilityGroupComp(v12);
      if ( is_add )
      {
        PlayerAbilityGroupComp::addTeamAbilityGroup(v13, &challenge->team_ability_group_vec, 0);
        v14 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
        v15 = Player::getAbilityGroupComp(v14);
        PlayerAbilityGroupComp::addNoneFilterAbilityGroup(v15, &challenge->ability_group_vec, 0);
      }
      else
      {
        PlayerAbilityGroupComp::delTeamAbilityGroup(v13, &challenge->team_ability_group_vec);
        v16 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
        v17 = Player::getAbilityGroupComp(v16);
        PlayerAbilityGroupComp::delNoneFilterAbilityGroup(v17, &challenge->ability_group_vec);
      }
      v18 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
      v19 = Player::getAbilityGroupComp(v18);
      PlayerAbilityGroupComp::tryRefreshAbilityGroup(v19);
      common::milog::MiLogStream::create(
        &v29,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/group/group.cpp",
        "operatePlayerAbilityGroup",
        5147);
      v20 = common::milog::MiLogStream::operator<<<char [54],(char *[54])0>(
              &v29,
              (const char (*)[54])"[ABILITY_GROUP] group operateAbilityGroupsBatch, uid:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v20, uid);
      common::milog::MiLogStream::~MiLogStream(&v29);
    }
    std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v4 + 32));
    std::_Rb_tree_iterator<std::pair<unsigned int const,int>>::operator++(&__for_begin);
  }
  if ( v30 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 5154: range 0000000015FDED90-0000000015FDF19A
int32_t __cdecl Group::createSightGroups(Group *const this, uint32_t num)
{
  int32_t v2; // r14d
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  unsigned __int64 v5; // r13
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  bool isSightGroupClosed; // r15
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  int v10; // r15d
  EntitySightGroup *v11; // rcx
  std::remove_reference<std::shared_ptr<EntitySightGroup>&>::type *v12; // rax
  int32_t result; // eax
  uint32_t i; // [rsp+24h] [rbp-9Ch]
  const GroupInfoScriptConfig *group_info_config_ptr; // [rsp+28h] [rbp-98h]
  common::milog::MiLogStream v16; // [rsp+30h] [rbp-90h] BYREF
  char v17[112]; // [rsp+50h] [rbp-70h] BYREF

  v3 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 16 20 sight_group_ptr:5172";
  *(_QWORD *)(v3 + 16) = Group::createSightGroups;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202178560;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v3 + 32));
  v6 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
  isSightGroupClosed = FeatureSwitchMgr::isSightGroupClosed(&v6->feature_switch_mgr);
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 32));
  if ( isSightGroupClosed )
  {
    common::milog::MiLogStream::create(
      &v16,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/group/group.cpp",
      "createSightGroups",
      5158);
    common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
      &v16,
      (const char (*)[34])"[FEATURE_SWITCH] SightGroupClosed");
    common::milog::MiLogStream::~MiLogStream(&v16);
    v2 = 0;
  }
  else
  {
    group_info_config_ptr = Group::getInfoScriptConfig(this);
    if ( group_info_config_ptr )
    {
      for ( i = 0; i < num; ++i )
      {
        common::tools::perf::make_shared<EntitySightGroup>();
        if ( std::operator==<EntitySightGroup>((const std::shared_ptr<EntitySightGroup> *)(v3 + 32), 0LL) )
        {
          common::milog::MiLogStream::create(
            &v16,
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/group/group.cpp",
            "createSightGroups",
            5175);
          v8 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(&v16, (const char (*)[7])"group:");
          v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, &this->group_id_);
          common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
            v9,
            (const char (*)[28])" create sight_group failed.");
          common::milog::MiLogStream::~MiLogStream(&v16);
          v2 = -1;
          v10 = 0;
        }
        else
        {
          v11 = std::__shared_ptr_access<EntitySightGroup,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<EntitySightGroup,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
          if ( *(_BYTE *)(((unsigned __int64)&group_info_config_ptr->vision_type >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&group_info_config_ptr->vision_type >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4();
          }
          EntitySightGroup::setGroupVisionType(v11, group_info_config_ptr->vision_type);
          v12 = std::move<std::shared_ptr<EntitySightGroup> &>((std::shared_ptr<EntitySightGroup> *)(v3 + 32));
          std::vector<std::shared_ptr<EntitySightGroup>>::push_back(&this->sight_group_ptr_vec_, v12);
          v10 = 1;
        }
        std::shared_ptr<EntitySightGroup>::~shared_ptr((std::shared_ptr<EntitySightGroup> *const)(v3 + 32));
        if ( v10 != 1 )
          goto LABEL_18;
      }
      v2 = 0;
    }
    else
    {
      common::milog::MiLogStream::create(
        &v16,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/group/group.cpp",
        "createSightGroups",
        5166);
      common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
        &v16,
        (const char (*)[31])"getGroupInfoScriptConfig fails");
      common::milog::MiLogStream::~MiLogStream(&v16);
      v2 = -1;
    }
  }
LABEL_18:
  result = v2;
  if ( v17 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5185: range 0000000015FDF19C-0000000015FDF386
// local variable allocation has failed, the output may be wrong!
EntitySightGroupPtr __cdecl Group::getSightGroup(Group *const this, int32_t index)
{
  unsigned int v2; // edx
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v3; // rax
  bool isSightGroupClosed; // bl
  EntitySightGroupPtr result; // rax
  const std::shared_ptr<EntitySightGroup> *v7; // rdx
  unsigned int indexa; // [rsp+Ch] [rbp-64h]
  int array_index; // [rsp+2Ch] [rbp-44h]
  std::shared_ptr<Config> v10; // [rsp+30h] [rbp-40h] BYREF
  common::milog::MiLogStream v11; // [rsp+40h] [rbp-30h] BYREF

  indexa = v2;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v10);
  v3 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v10);
  isSightGroupClosed = FeatureSwitchMgr::isSightGroupClosed(&v3->feature_switch_mgr);
  std::shared_ptr<Config>::~shared_ptr(&v10);
  if ( isSightGroupClosed )
  {
    common::milog::MiLogStream::create(
      &v11,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/group/group.cpp",
      "getSightGroup",
      5189);
    common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
      &v11,
      (const char (*)[34])"[FEATURE_SWITCH] SightGroupClosed");
    common::milog::MiLogStream::~MiLogStream(&v11);
    std::shared_ptr<EntitySightGroup>::shared_ptr((std::shared_ptr<EntitySightGroup> *const)this, 0LL);
  }
  else
  {
    array_index = indexa - 1;
    if ( (int)(indexa - 1) < 0
      || array_index >= std::vector<std::shared_ptr<EntitySightGroup>>::size((const std::vector<std::shared_ptr<EntitySightGroup>> *const)(*(_QWORD *)&index + 1616LL)) )
    {
      common::milog::MiLogStream::create(
        &v11,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/group/group.cpp",
        "getSightGroup",
        5197);
      common::milog::MiLogStream::operator()(&v11, "index:%d invalid", indexa);
      common::milog::MiLogStream::~MiLogStream(&v11);
      std::shared_ptr<EntitySightGroup>::shared_ptr((std::shared_ptr<EntitySightGroup> *const)this, 0LL);
    }
    else
    {
      v7 = std::vector<std::shared_ptr<EntitySightGroup>>::operator[](
             (std::vector<std::shared_ptr<EntitySightGroup>> *const)(*(_QWORD *)&index + 1616LL),
             array_index);
      std::shared_ptr<EntitySightGroup>::shared_ptr((std::shared_ptr<EntitySightGroup> *const)this, v7);
    }
  }
  result._M_ptr = (std::__shared_ptr<EntitySightGroup,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 5205: range 0000000015FDF388-0000000015FDF45D
void __fastcall Group::addMultistagePlay(Group *const this, uint64_t play_key)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  char v5[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 8 13 play_key:5204";
  *(_QWORD *)(v2 + 16) = Group::addMultistagePlay;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116352;
  *(_QWORD *)(v2 + 32) = play_key;
  std::set<unsigned long>::insert(
    &this->multistage_play_key_set_,
    (const std::set<long unsigned int>::value_type *)(v2 + 32));
  if ( v5 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 5210: range 0000000015FDF45E-0000000015FDF4AB
bool __cdecl Group::isForceCleanSubEntity(Group *const this)
{
  if ( *(char *)(((unsigned __int64)&this->init_param_.is_force_clean_sub_entity >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&this->init_param_.is_force_clean_sub_entity);
  return this->init_param_.is_force_clean_sub_entity;
};

// Line 5215: range 0000000015FDF4AC-0000000015FDF710
void __fastcall Group::addSubEntityIdToOriginOwnerMap(Group *const this, uint32_t config_id, uint32_t entity_id)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r13
  std::unordered_map<unsigned int,std::set<unsigned int>>::mapped_type *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  std::set<unsigned int> *v12; // rax
  common::milog::MiLogStream v14; // [rsp+10h] [rbp-A0h] BYREF
  char v15[128]; // [rsp+30h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 14 config_id:5214 64 4 14 entity_id:5214";
  *(_QWORD *)(v3 + 16) = Group::addSubEntityIdToOriginOwnerMap;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116348;
  *(_DWORD *)(v3 + 48) = config_id;
  *(_DWORD *)(v3 + 64) = entity_id;
  if ( Group::isForceCleanSubEntity(this) )
  {
    v6 = std::unordered_map<unsigned int,std::set<unsigned int>>::operator[](
           &this->origin_owner_2_eid_set_map_,
           (const std::unordered_map<unsigned int,std::set<unsigned int>>::key_type *)(v3 + 48));
    if ( std::set<unsigned int>::size(v6) > 0x64 )
    {
      common::milog::MiLogStream::create(
        &v14,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/group/group.cpp",
        "addSubEntityIdToOriginOwnerMap",
        5223);
      v7 = common::milog::MiLogStream::operator<<<char [58],(char *[58])0>(
             &v14,
             (const char (*)[58])"origin_owner_2_eid_set_map_ size is too large, group_id: ");
      v8 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, &this->group_id_);
      v9 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v8, (const char (*)[13])" config_id: ");
      v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v3 + 48));
      v11 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v10, (const char (*)[13])" entity_id: ");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v3 + 64));
      common::milog::MiLogStream::~MiLogStream(&v14);
      Group::delSubEntityIdByOriginOwnerConfigId(this, *(_DWORD *)(v3 + 48));
    }
    v12 = std::unordered_map<unsigned int,std::set<unsigned int>>::operator[](
            &this->origin_owner_2_eid_set_map_,
            (const std::unordered_map<unsigned int,std::set<unsigned int>>::key_type *)(v3 + 48));
    std::set<unsigned int>::emplace<unsigned int &>(v12, (unsigned int *)(v3 + 64), (unsigned int *)v12);
  }
  if ( v15 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 5230: range 0000000015FDF712-0000000015FDF89E
void __fastcall Group::removeSubEntityIdFromOriginOwnerMap(Group *const this, uint32_t config_id, uint32_t entity_id)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::__detail::_Node_iterator<std::pair<unsigned int const,std::set<unsigned int> >,false,false>::pointer v6; // rax
  std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<unsigned int> >,false> __y; // [rsp+18h] [rbp-88h] BYREF
  char v9[128]; // [rsp+20h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 4 14 config_id:5229 48 4 14 entity_id:5229 64 8 9 iter:5235";
  *(_QWORD *)(v3 + 16) = Group::removeSubEntityIdFromOriginOwnerMap;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -202116352;
  *(_DWORD *)(v3 + 32) = config_id;
  *(_DWORD *)(v3 + 48) = entity_id;
  if ( Group::isForceCleanSubEntity(this) )
  {
    *(std::unordered_map<unsigned int,std::set<unsigned int>>::iterator *)(v3 + 64) = std::unordered_map<unsigned int,std::set<unsigned int>>::find(
                                                                                        &this->origin_owner_2_eid_set_map_,
                                                                                        (const std::unordered_map<unsigned int,std::set<unsigned int>>::key_type *)(v3 + 32));
    __y._M_cur = std::unordered_map<unsigned int,std::set<unsigned int>>::end(&this->origin_owner_2_eid_set_map_)._M_cur;
    if ( std::__detail::operator!=<std::pair<unsigned int const,std::set<unsigned int>>,false>(
           (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<unsigned int> >,false> *)(v3 + 64),
           &__y) )
    {
      v6 = std::__detail::_Node_iterator<std::pair<unsigned int const,std::set<unsigned int>>,false,false>::operator->((const std::__detail::_Node_iterator<std::pair<unsigned int const,std::set<unsigned int> >,false,false> *const)(v3 + 64));
      std::set<unsigned int>::erase(&v6->second, (const std::set<unsigned int>::key_type *)(v3 + 48));
    }
  }
  if ( v9 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 5244: range 0000000015FDF8A0-0000000015FDFC1B
void __fastcall Group::delSubEntityIdByOriginOwnerConfigId(Group *const this, uint32_t config_id)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  std::__detail::_Node_iterator<std::pair<unsigned int const,std::set<unsigned int> >,false,false>::pointer v5; // rax
  std::_Rb_tree_const_iterator<unsigned int>::reference v6; // rdx
  Scene *v7; // rax
  unsigned int entity_id; // [rsp+14h] [rbp-10Ch]
  std::set<unsigned int>::iterator __for_begin; // [rsp+18h] [rbp-108h] BYREF
  std::set<unsigned int>::iterator __for_end; // [rsp+20h] [rbp-100h] BYREF
  std::set<unsigned int> *__for_range; // [rsp+28h] [rbp-F8h]
  char v12[240]; // [rsp+30h] [rbp-F0h] BYREF

  v2 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "4 32 4 14 config_id:5243 48 8 9 iter:5254 80 16 14 scene_ptr:5249 112 48 12 eid_set:5259";
  *(_QWORD *)(v2 + 16) = Group::delSubEntityIdByOriginOwnerConfigId;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61956;
  v4[536862721] = -234881024;
  v4[536862722] = 62194;
  v4[536862723] = 62194;
  v4[536862725] = -202116109;
  *(_DWORD *)(v2 + 32) = config_id;
  if ( Group::isForceCleanSubEntity(this) )
  {
    Group::getScene((const Group *const)(v2 + 80));
    if ( !std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v2 + 80)) )
    {
      *(std::unordered_map<unsigned int,std::set<unsigned int>>::iterator *)(v2 + 48) = std::unordered_map<unsigned int,std::set<unsigned int>>::find(
                                                                                          &this->origin_owner_2_eid_set_map_,
                                                                                          (const std::unordered_map<unsigned int,std::set<unsigned int>>::key_type *)(v2 + 32));
      __for_end._M_node = (std::_Rb_tree_const_iterator<unsigned int>::_Base_ptr)std::unordered_map<unsigned int,std::set<unsigned int>>::end(&this->origin_owner_2_eid_set_map_)._M_cur;
      if ( !std::__detail::operator==<std::pair<unsigned int const,std::set<unsigned int>>,false>(
              (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<unsigned int> >,false> *)(v2 + 48),
              (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<unsigned int> >,false> *)&__for_end) )
      {
        v5 = std::__detail::_Node_iterator<std::pair<unsigned int const,std::set<unsigned int>>,false,false>::operator->((const std::__detail::_Node_iterator<std::pair<unsigned int const,std::set<unsigned int> >,false,false> *const)(v2 + 48));
        std::set<unsigned int>::set((std::set<unsigned int> *const)(v2 + 112), &v5->second);
        __for_range = (std::set<unsigned int> *)(v2 + 112);
        __for_begin._M_node = std::set<unsigned int>::begin((const std::set<unsigned int> *const)(v2 + 112))._M_node;
        __for_end._M_node = std::set<unsigned int>::end(__for_range)._M_node;
        while ( std::operator!=(&__for_begin, &__for_end) )
        {
          v6 = std::_Rb_tree_const_iterator<unsigned int>::operator*(&__for_begin);
          if ( *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v6 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4();
          }
          entity_id = *v6;
          v7 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 80));
          Scene::delEntity(v7, entity_id, &VisionContext::miss_context);
          std::_Rb_tree_const_iterator<unsigned int>::operator++(&__for_begin);
        }
        std::unordered_map<unsigned int,std::set<unsigned int>>::erase(
          &this->origin_owner_2_eid_set_map_,
          (const std::unordered_map<unsigned int,std::set<unsigned int>>::key_type *)(v2 + 32));
        std::set<unsigned int>::~set((std::set<unsigned int> *const)(v2 + 112));
      }
    }
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v2 + 80));
  }
  if ( v12 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 5268: range 0000000015FDFC1C-0000000015FDFF43
void __cdecl Group::onBeforeRemove(Group *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  common::milog::MiLogStream *v4; // rdx
  Scene *v5; // rax
  SceneMultistagePlayComp *MultistagePlayComp; // rdi
  std::set<long unsigned int> *p_multistage_play_key_set; // rcx
  TimeAxis *v8; // rax
  std::unordered_map<std::string,std::shared_ptr<TimeAxis>>::iterator __for_begin; // [rsp+10h] [rbp-C0h] BYREF
  std::unordered_map<std::string,std::shared_ptr<TimeAxis>>::iterator __for_end; // [rsp+18h] [rbp-B8h] BYREF
  std::unordered_map<std::string,std::shared_ptr<TimeAxis>> *__for_range; // [rsp+20h] [rbp-B0h]
  std::pair<const std::string,std::shared_ptr<TimeAxis> > *__in; // [rsp+28h] [rbp-A8h]
  std::tuple_element<0,std::pair<const std::string,std::shared_ptr<TimeAxis> > >::type *_; // [rsp+30h] [rbp-A0h]
  std::tuple_element<1,std::pair<const std::string,std::shared_ptr<TimeAxis> > >::type *time_axis_ptr; // [rsp+38h] [rbp-98h]
  common::milog::MiLogStream v16; // [rsp+40h] [rbp-90h] BYREF
  char v17[112]; // [rsp+60h] [rbp-70h] BYREF

  v1 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 16 14 scene_ptr:5269";
  *(_QWORD *)(v1 + 16) = Group::onBeforeRemove;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202178560;
  Group::getScene((const Group *const)(v1 + 32));
  if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v1 + 32), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v16,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "onBeforeRemove",
      5272);
    v4 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
           &v16,
           (const char (*)[31])"group scene is nullptr, group:");
    operator<<(v4, this);
    common::milog::MiLogStream::~MiLogStream(&v16);
  }
  else
  {
    v5 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
    MultistagePlayComp = Scene::getMultistagePlayComp(v5);
    p_multistage_play_key_set = &this->multistage_play_key_set_;
    if ( *(_BYTE *)(((unsigned __int64)&this->group_id_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->group_id_ >> 3) + 0x7FFF8000) <= 3 )
    {
      MultistagePlayComp = (SceneMultistagePlayComp *)&this->group_id_;
      __asan_report_load4();
    }
    SceneMultistagePlayComp::onGroupRemove(MultistagePlayComp, this->group_id_, p_multistage_play_key_set);
    std::unordered_map<std::string,int>::clear(&this->temp_variable_map_);
    __for_range = &this->time_axis_map_;
    __for_begin._M_cur = std::unordered_map<std::string,std::shared_ptr<TimeAxis>>::begin(&this->time_axis_map_)._M_cur;
    __for_end._M_cur = std::unordered_map<std::string,std::shared_ptr<TimeAxis>>::end(&this->time_axis_map_)._M_cur;
    while ( std::__detail::operator!=<std::pair<std::string const,std::shared_ptr<TimeAxis>>,true>(
              &__for_begin,
              &__for_end) )
    {
      __in = std::__detail::_Node_iterator<std::pair<std::string const,std::shared_ptr<TimeAxis>>,false,true>::operator*(&__for_begin);
      _ = std::get<0ul,std::string const,std::shared_ptr<TimeAxis>>(__in);
      time_axis_ptr = std::get<1ul,std::string const,std::shared_ptr<TimeAxis>>(__in);
      if ( std::operator!=<TimeAxis>(0LL, time_axis_ptr) )
      {
        v8 = std::__shared_ptr_access<TimeAxis,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TimeAxis,(__gnu_cxx::_Lock_policy)2,false,false> *const)time_axis_ptr);
        TimeAxis::end(v8);
      }
      std::__detail::_Node_iterator<std::pair<std::string const,std::shared_ptr<TimeAxis>>,false,true>::operator++(&__for_begin);
    }
    std::unordered_map<std::string,std::shared_ptr<TimeAxis>>::clear(&this->time_axis_map_);
  }
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v1 + 32));
  if ( v17 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 5289: range 0000000015FDFF44-0000000015FE0015
bool __fastcall Group::isPointOccupied(const Group *const this, uint32_t point_config_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  bool result; // al
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 20 point_config_id:5288";
  *(_QWORD *)(v2 + 16) = Group::isPointOccupied;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  *(_DWORD *)(v2 + 32) = point_config_id;
  result = common::tools::MiscUtils::isContains<std::unordered_set<unsigned int> const,unsigned int>(
             &this->occupied_point_set_,
             (const unsigned int *)(v2 + 32));
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5294: range 0000000015FE0016-0000000015FE0199
void __fastcall Group::occupyPoint(Group *const this, uint32_t point_config_id)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream v8; // [rsp+10h] [rbp-80h] BYREF
  char v9[96]; // [rsp+30h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 20 point_config_id:5293";
  *(_QWORD *)(v2 + 16) = Group::occupyPoint;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  *(_DWORD *)(v2 + 32) = point_config_id;
  std::unordered_set<unsigned int>::insert(
    &this->occupied_point_set_,
    (const std::unordered_set<unsigned int>::value_type *)(v2 + 32));
  common::milog::MiLogStream::create(
    &v8,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/group/group.cpp",
    "occupyPoint",
    5296);
  v5 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(&v8, (const char (*)[7])"point ");
  v6 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, (const unsigned int *)(v2 + 32));
  v7 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v6, (const char (*)[12])" occupied. ");
  operator<<(v7, this);
  common::milog::MiLogStream::~MiLogStream(&v8);
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 5300: range 0000000015FE019A-0000000015FE0343
void __cdecl Group::fireWillUnloadEvent(Group *const this)
{
  std::shared_ptr<Event> *v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r13
  uint32_t suite_index; // r14d
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rdx
  int32_t *p_param1; // rax
  char v7[112]; // [rsp+10h] [rbp-70h] BYREF

  v1 = (std::shared_ptr<Event> *)v7;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = (std::shared_ptr<Event> *)v2;
  }
  v1->_M_ptr = (std::__shared_ptr<Event,(__gnu_cxx::_Lock_policy)2>::element_type *)1102416563;
  v1->_M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)"1 32 16 14 event_ptr:5301";
  v1[1]._M_ptr = (std::__shared_ptr<Event,(__gnu_cxx::_Lock_policy)2>::element_type *)Group::fireWillUnloadEvent;
  v3 = (unsigned __int64)v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202178560;
  EventUtil::createEvent(v1 + 2, 30);
  if ( std::operator!=<Event>(v1 + 2, 0LL) )
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    suite_index = this->suite_index_;
    v5 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v1[2]);
    p_param1 = &v5->param1;
    if ( *(_BYTE *)(((unsigned __int64)p_param1 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)p_param1 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_param1 >> 3) + 0x7FFF8000) )
    {
      __asan_report_store4(p_param1);
    }
    v5->param1 = suite_index;
    Group::handleEvent(this, v1 + 2);
  }
  std::shared_ptr<Event>::~shared_ptr(v1 + 2);
  if ( v7 == (char *)v1 )
  {
    *(_QWORD *)(((unsigned __int64)v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    v1->_M_ptr = (std::__shared_ptr<Event,(__gnu_cxx::_Lock_policy)2>::element_type *)1172321806;
    *(_QWORD *)(((unsigned __int64)v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 5310: range 0000000015FE0344-0000000015FE0537
void __cdecl Group::fireWillRefreshEvent(Group *const this, uint32_t target_suite_index)
{
  std::shared_ptr<Event> *v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  uint32_t suite_index; // r14d
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rdx
  int32_t *p_param1; // rax
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  char v9[112]; // [rsp+10h] [rbp-70h] BYREF

  v2 = (std::shared_ptr<Event> *)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = (std::shared_ptr<Event> *)v3;
  }
  v2->_M_ptr = (std::__shared_ptr<Event,(__gnu_cxx::_Lock_policy)2>::element_type *)1102416563;
  v2->_M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)"1 32 16 14 event_ptr:5311";
  v2[1]._M_ptr = (std::__shared_ptr<Event,(__gnu_cxx::_Lock_policy)2>::element_type *)Group::fireWillRefreshEvent;
  v4 = (unsigned __int64)v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  EventUtil::createEvent(v2 + 2, 31);
  if ( std::operator!=<Event>(v2 + 2, 0LL) )
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->suite_index_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    suite_index = this->suite_index_;
    v6 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v2[2]);
    p_param1 = &v6->param1;
    if ( *(_BYTE *)(((unsigned __int64)p_param1 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)p_param1 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_param1 >> 3) + 0x7FFF8000) )
    {
      __asan_report_store4(p_param1);
    }
    v6->param1 = suite_index;
    v8 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v2[2]);
    if ( *(_BYTE *)(((unsigned __int64)&v8->param2 >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&v8->param2 >> 3) + 0x7FFF8000) <= 3 )
    {
      v8 = (std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *)__asan_report_store4(&v8->param2);
    }
    v8->param2 = target_suite_index;
    Group::handleEvent(this, v2 + 2);
  }
  std::shared_ptr<Event>::~shared_ptr(v2 + 2);
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    v2->_M_ptr = (std::__shared_ptr<Event,(__gnu_cxx::_Lock_policy)2>::element_type *)1172321806;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 5321: range 0000000015FE0538-0000000015FE067A
TimeAxisPtr __cdecl Group::findTimeAxis(Group *const this, const std::string *axis_key)
{
  const std::string *v2; // rdx
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  TimeAxisPtr result; // rax
  std::shared_ptr<TimeAxis> *p_second; // rdx
  const std::string *axis_keya; // [rsp+8h] [rbp-88h]
  std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<TimeAxis> >,true> __y; // [rsp+28h] [rbp-68h] BYREF
  char v10[96]; // [rsp+30h] [rbp-60h] BYREF

  axis_keya = v2;
  v3 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 8 9 iter:5322";
  *(_QWORD *)(v3 + 16) = Group::findTimeAxis;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116352;
  *(std::unordered_map<std::string,std::shared_ptr<TimeAxis>>::iterator *)(v3 + 32) = std::unordered_map<std::string,std::shared_ptr<TimeAxis>>::find(
                                                                                        (std::unordered_map<std::string,std::shared_ptr<TimeAxis>> *const)(&axis_key[54]._anon_0._M_allocated_capacity + 1),
                                                                                        axis_keya);
  __y._M_cur = std::unordered_map<std::string,std::shared_ptr<TimeAxis>>::end((std::unordered_map<std::string,std::shared_ptr<TimeAxis>> *const)(&axis_key[54]._anon_0._M_allocated_capacity + 1))._M_cur;
  if ( std::__detail::operator==<std::pair<std::string const,std::shared_ptr<TimeAxis>>,true>(
         (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<TimeAxis> >,true> *)(v3 + 32),
         &__y) )
  {
    std::shared_ptr<TimeAxis>::shared_ptr((std::shared_ptr<TimeAxis> *const)this, 0LL);
  }
  else
  {
    p_second = &std::__detail::_Node_iterator<std::pair<std::string const,std::shared_ptr<TimeAxis>>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<TimeAxis> >,false,true> *const)(v3 + 32))->second;
    std::shared_ptr<TimeAxis>::shared_ptr((std::shared_ptr<TimeAxis> *const)this, p_second);
  }
  if ( v10 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<TimeAxis,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 5331: range 0000000015FE0D54-0000000015FE156A
int32_t __cdecl Group::initTimeAxis(
        Group *const this,
        const std::string *key,
        const std::vector<unsigned int> *timer_vec,
        bool is_loop)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  int32_t v7; // r14d
  TimeAxis *v8; // rax
  std::vector<unsigned int> *p_timer_vec; // rdx
  std::__shared_ptr_access<TimeAxis,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rdx
  std::__shared_ptr_access<TimeAxis,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rdx
  bool *p_is_loop; // rax
  std::__shared_ptr_access<TimeAxis,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  std::__shared_ptr_access<TimeAxis,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  common::milog::MiLogStream *v15; // rdx
  std::__shared_ptr_access<TimeAxis,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  std::vector<unsigned int>::reference v17; // rdx
  common::milog::MiLogStream *v18; // rdx
  std::__shared_ptr_access<TimeAxis,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // rax
  common::milog::MiLogStream *v20; // rdx
  std::__shared_ptr_access<TimeAxis,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  SceneTimer *v22; // rax
  common::milog::MiLogStream *v23; // rdx
  std::shared_ptr<TimeAxis> *v24; // rax
  common::milog::MiLogStream *v25; // rdx
  int32_t result; // eax
  uint32_t time_gap; // [rsp+2Ch] [rbp-144h]
  std::enable_shared_from_this<Group> v30; // [rsp+30h] [rbp-140h] BYREF
  std::shared_ptr<Scene> v31; // [rsp+40h] [rbp-130h] BYREF
  common::milog::MiLogStream v32; // [rsp+50h] [rbp-120h] BYREF
  Group::initTimeAxis::<lambda(uint64_t)> __args_0; // [rsp+70h] [rbp-100h] BYREF
  char v34[208]; // [rsp+A0h] [rbp-D0h] BYREF

  v4 = (unsigned __int64)v34;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(160LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 32 16 14 scene_ptr:5332 64 16 14 group_wtr:5338 96 16 22 old_time_axis_ptr:5339 128 16 18 time_axis_ptr:5346";
  *(_QWORD *)(v4 + 16) = Group::initTimeAxis;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -219021312;
  v6[536862722] = -219021312;
  v6[536862723] = -219021312;
  v6[536862724] = -202178560;
  Group::getScene((const Group *const)(v4 + 32));
  if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v4 + 32)) )
  {
    common::milog::MiLogStream::create(
      &v32,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "initTimeAxis",
      5335);
    common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
      &v32,
      (const char (*)[25])"[TimeAix] getScene fails");
    common::milog::MiLogStream::~MiLogStream(&v32);
    v7 = -1;
  }
  else
  {
    std::enable_shared_from_this<Group>::shared_from_this(&v30);
    std::weak_ptr<Group>::weak_ptr<Group,void>(
      (std::weak_ptr<Group> *const)(v4 + 64),
      (const std::shared_ptr<Group> *)&v30);
    std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)&v30);
    Group::findTimeAxis((Group *const)(v4 + 96), (const std::string *)this);
    if ( std::operator!=<TimeAxis>(0LL, (const std::shared_ptr<TimeAxis> *)(v4 + 96)) )
    {
      v8 = std::__shared_ptr_access<TimeAxis,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TimeAxis,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
      TimeAxis::end(v8);
      std::unordered_map<std::string,std::shared_ptr<TimeAxis>>::erase(&this->time_axis_map_, key);
    }
    common::tools::perf::make_shared<TimeAxis>();
    p_timer_vec = &std::__shared_ptr_access<TimeAxis,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TimeAxis,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128))->timer_vec;
    std::vector<unsigned int>::operator=(p_timer_vec, timer_vec);
    v10 = std::__shared_ptr_access<TimeAxis,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TimeAxis,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
    std::string::operator=(v10, key);
    v11 = std::__shared_ptr_access<TimeAxis,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TimeAxis,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
    p_is_loop = &v11->is_loop;
    if ( *(_BYTE *)(((unsigned __int64)p_is_loop >> 3) + 0x7FFF8000) != 0
      && ((unsigned __int8)p_is_loop & 7) >= *(_BYTE *)(((unsigned __int64)p_is_loop >> 3) + 0x7FFF8000) )
    {
      __asan_report_store1(p_is_loop);
    }
    v11->is_loop = is_loop;
    std::string::basic_string(&__args_0, key);
    std::weak_ptr<Group>::weak_ptr(&__args_0.__group_wtr, (const std::weak_ptr<Group> *)(v4 + 64));
    common::tools::perf::make_shared<SceneTimer,std::shared_ptr<Scene> &,Group::initTimeAxis(std::string const&,std::vector<unsigned int> const&,bool)::{lambda(unsigned long)#1}>(
      &v31,
      (Group::initTimeAxis::<lambda(uint64_t)> *)(v4 + 32),
      (std::shared_ptr<Scene> *)&__args_0,
      (Group::initTimeAxis::<lambda(uint64_t)> *)(v4 + 32));
    v13 = std::__shared_ptr_access<TimeAxis,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TimeAxis,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
    std::shared_ptr<SceneTimer>::operator=(&v13->timer_ptr, (std::shared_ptr<SceneTimer> *)&v31);
    std::shared_ptr<SceneTimer>::~shared_ptr((std::shared_ptr<SceneTimer> *const)&v31);
    Group::initTimeAxis(std::string const&,std::vector<unsigned int> const&,bool)::{lambda(unsigned long)#1}::~vector(&__args_0);
    v14 = std::__shared_ptr_access<TimeAxis,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TimeAxis,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
    if ( std::vector<unsigned int>::empty(&v14->timer_vec) )
    {
      common::milog::MiLogStream::create(
        &v32,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/group/group.cpp",
        "initTimeAxis",
        5393);
      v15 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
              &v32,
              (const char (*)[34])"[TimeAix] time_vec is empty, key:");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v15, key);
      common::milog::MiLogStream::~MiLogStream(&v32);
      v7 = -1;
    }
    else
    {
      v16 = std::__shared_ptr_access<TimeAxis,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TimeAxis,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
      v17 = std::vector<unsigned int>::operator[](&v16->timer_vec, 0LL);
      if ( *(_BYTE *)(((unsigned __int64)v17 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v17 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v17 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4();
      }
      time_gap = *v17;
      if ( *v17 )
      {
        v19 = std::__shared_ptr_access<TimeAxis,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TimeAxis,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
        if ( std::operator==<SceneTimer>(0LL, &v19->timer_ptr) )
        {
          common::milog::MiLogStream::create(
            &v32,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/group/group.cpp",
            "initTimeAxis",
            5405);
          v20 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
                  &v32,
                  (const char (*)[34])"[TimeAix] timer_ptr is null, key:");
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v20, key);
          common::milog::MiLogStream::~MiLogStream(&v32);
          v7 = -1;
        }
        else
        {
          v21 = std::__shared_ptr_access<TimeAxis,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TimeAxis,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
          v22 = std::__shared_ptr_access<SceneTimer,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SceneTimer,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v21->timer_ptr);
          if ( SceneTimer::startMS(v22, time_gap, 0, "./src/group/group.cpp", "initTimeAxis", 5409) )
          {
            common::milog::MiLogStream::create(
              &v32,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/group/group.cpp",
              "initTimeAxis",
              5411);
            v23 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                    &v32,
                    (const char (*)[42])"[TimeAix] timer_ptr->startMS failed, key:");
            common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v23, key);
            common::milog::MiLogStream::~MiLogStream(&v32);
            v7 = -1;
          }
          else
          {
            v24 = std::unordered_map<std::string,std::shared_ptr<TimeAxis>>::operator[](&this->time_axis_map_, key);
            std::shared_ptr<TimeAxis>::operator=(v24, (const std::shared_ptr<TimeAxis> *)(v4 + 128));
            common::milog::MiLogStream::create(
              &v32,
              &common::milog::MiLogDefault::default_log_obj_,
              1u,
              "./src/group/group.cpp",
              "initTimeAxis",
              5416);
            v25 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                    &v32,
                    (const char (*)[36])"[TimeAix] time_axis init succ, key:");
            common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v25, key);
            common::milog::MiLogStream::~MiLogStream(&v32);
            v7 = 0;
          }
        }
      }
      else
      {
        common::milog::MiLogStream::create(
          &v32,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/group/group.cpp",
          "initTimeAxis",
          5400);
        v18 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                &v32,
                (const char (*)[31])"[TimeAix] first gap is 0, key:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v18, key);
        common::milog::MiLogStream::~MiLogStream(&v32);
        v7 = -1;
      }
    }
    std::shared_ptr<TimeAxis>::~shared_ptr((std::shared_ptr<TimeAxis> *const)(v4 + 128));
    std::shared_ptr<TimeAxis>::~shared_ptr((std::shared_ptr<TimeAxis> *const)(v4 + 96));
    std::weak_ptr<Group>::~weak_ptr((std::weak_ptr<Group> *const)(v4 + 64));
  }
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v4 + 32));
  result = v7;
  if ( v34 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 5350: range 0000000015FE067C-0000000015FE0D26
void __cdecl Group::initTimeAxis(std::string const&,std::vector<unsigned int> const&,bool)::{lambda(unsigned long)#1}::operator()(
        const Group::initTimeAxis::<lambda(uint64_t)> *const __closure,
        uint64_t now_ms)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  common::milog::MiLogStream *v5; // rdx
  std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  common::milog::MiLogStream *v7; // rdx
  std::__shared_ptr_access<TimeAxis,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  TimeAxis *v9; // rax
  common::milog::MiLogStream *v10; // rdx
  std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  uint32_t OwnerPlayerUid; // r14d
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rdx
  uint32_t *p_uid; // rax
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rdx
  int32_t *p_param1; // rax
  std::__shared_ptr_access<TimeAxis,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // rax
  int32_t loop_count; // r14d
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  Group *v21; // rax
  Group *v22; // rdx
  common::milog::MiLogStream *v23; // r14
  std::__shared_ptr_access<TimeAxis,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rdx
  uint32_t cue_idx; // [rsp+18h] [rbp-F8h]
  common::milog::MiLogStream v28; // [rsp+20h] [rbp-F0h] BYREF
  char v29[208]; // [rsp+40h] [rbp-D0h] BYREF

  v2 = (unsigned __int64)v29;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(160LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "4 48 1 12 is_done:5366 64 16 14 group_ptr:5352 96 16 10 t_ptr:5359 128 16 14 event_ptr:5373";
  *(_QWORD *)(v2 + 16) = Group::initTimeAxis(std::string const&,std::vector<unsigned int> const&,bool)::{lambda(unsigned long)#1}::operator();
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862724] = -202178560;
  std::weak_ptr<Group>::lock((const std::weak_ptr<Group> *const)(v2 + 64));
  if ( std::operator==<Group>(0LL, (const std::shared_ptr<Group> *)(v2 + 64)) )
  {
    common::milog::MiLogStream::create(
      &v28,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "operator()",
      5356);
    v5 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
           &v28,
           (const char (*)[44])"[TimeAix] group_wtr.lock() is nullptr, key:");
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v5, &__closure->__key);
    common::milog::MiLogStream::~MiLogStream(&v28);
  }
  else
  {
    v6 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
    Group::findTimeAxis((Group *const)(v2 + 96), (const std::string *)v6);
    if ( std::operator==<TimeAxis>(0LL, (const std::shared_ptr<TimeAxis> *)(v2 + 96)) )
    {
      common::milog::MiLogStream::create(
        &v28,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/group/group.cpp",
        "operator()",
        5362);
      v7 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
             &v28,
             (const char (*)[28])"[TimeAix] cannot find, key:");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v7, &__closure->__key);
      common::milog::MiLogStream::~MiLogStream(&v28);
    }
    else
    {
      v8 = std::__shared_ptr_access<TimeAxis,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TimeAxis,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
      if ( *(_BYTE *)(((unsigned __int64)&v8->idx >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v8->idx >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4();
      }
      cue_idx = v8->idx;
      *(_BYTE *)(v2 + 48) = 0;
      v9 = std::__shared_ptr_access<TimeAxis,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TimeAxis,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
      if ( TimeAxis::onTimerCue(v9, (bool *)(v2 + 48)) )
      {
        common::milog::MiLogStream::create(
          &v28,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/group/group.cpp",
          "operator()",
          5370);
        v10 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
                &v28,
                (const char (*)[34])"[TimeAix] onTimerCue failed, key:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v10, &__closure->__key);
        common::milog::MiLogStream::~MiLogStream(&v28);
      }
      else
      {
        EventUtil::createEvent((std::shared_ptr<Event> *)(v2 + 128), 72);
        if ( std::operator!=<Event>(0LL, (const std::shared_ptr<Event> *)(v2 + 128)) )
        {
          v11 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
          OwnerPlayerUid = Group::getOwnerPlayerUid(v11);
          v13 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 128));
          p_uid = &v13->uid;
          if ( *(_BYTE *)(((unsigned __int64)p_uid >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)p_uid & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_uid >> 3) + 0x7FFF8000) )
          {
            __asan_report_store4(p_uid);
          }
          v13->uid = OwnerPlayerUid;
          v15 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 128));
          std::string::operator=(&v15->source_name, __closure);
          v16 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 128));
          p_param1 = &v16->param1;
          if ( *(_BYTE *)(((unsigned __int64)p_param1 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)p_param1 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_param1 >> 3) + 0x7FFF8000) )
          {
            __asan_report_store4(p_param1);
          }
          v16->param1 = cue_idx + 1;
          v18 = std::__shared_ptr_access<TimeAxis,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TimeAxis,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
          if ( *(_BYTE *)(((unsigned __int64)&v18->loop_count >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&v18->loop_count >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4();
          }
          loop_count = v18->loop_count;
          v20 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 128));
          if ( *(_BYTE *)(((unsigned __int64)&v20->param2 >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&v20->param2 >> 3) + 0x7FFF8000) <= 3 )
          {
            v20 = (std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *)__asan_report_store4(&v20->param2);
          }
          v20->param2 = loop_count;
          v21 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
          Group::handleEvent(v21, (EventPtr *)(v2 + 128));
        }
        if ( *(_BYTE *)(v2 + 48) )
        {
          v22 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
          Group::endTimeAxis(v22, &__closure->__key);
        }
        common::milog::MiLogStream::create(
          &v28,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/group/group.cpp",
          "operator()",
          5388);
        v23 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
                &v28,
                (const char (*)[39])"[TimeAix] TimeAxis wait for next, idx:");
        v24 = std::__shared_ptr_access<TimeAxis,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TimeAxis,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
        v25 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v23, &v24->idx);
        v26 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v25, (const char (*)[6])" key:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v26, &__closure->__key);
        common::milog::MiLogStream::~MiLogStream(&v28);
        std::shared_ptr<Event>::~shared_ptr((std::shared_ptr<Event> *const)(v2 + 128));
      }
    }
    std::shared_ptr<TimeAxis>::~shared_ptr((std::shared_ptr<TimeAxis> *const)(v2 + 96));
  }
  std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v2 + 64));
  if ( v29 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 5350: range 00000000160436A4-00000000160436E4
void __cdecl Group::initTimeAxis(std::string const&,std::vector<unsigned int> const&,bool)::{lambda(unsigned long)#1}::vector(
        Group::initTimeAxis::<lambda(uint64_t)> *const this,
        Group::initTimeAxis::<lambda(uint64_t)> *a2)
{
  std::string::basic_string(this, a2);
  std::weak_ptr<Group>::weak_ptr(&this->__group_wtr, &a2->__group_wtr);
};

// Line 5350: range 000000001604472A-000000001604476A
void __cdecl Group::initTimeAxis(std::string const&,std::vector<unsigned int> const&,bool)::{lambda(unsigned long)#1}::vector(
        Group::initTimeAxis::<lambda(uint64_t)> *const this,
        const Group::initTimeAxis::<lambda(uint64_t)> *a2)
{
  std::string::basic_string(this, a2);
  std::weak_ptr<Group>::weak_ptr(&this->__group_wtr, &a2->__group_wtr);
};

// Line 5350: range 0000000015FE0D28-0000000015FE0D52
void __cdecl Group::initTimeAxis(std::string const&,std::vector<unsigned int> const&,bool)::{lambda(unsigned long)#1}::~vector(
        Group::initTimeAxis::<lambda(uint64_t)> *const this)
{
  std::weak_ptr<Group>::~weak_ptr(&this->__group_wtr);
  std::string::~string(this);
};

// Line 5421: range 0000000015FE156C-0000000015FE17CB
int32_t __cdecl Group::endTimeAxis(Group *const this, const std::string *key)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  common::milog::MiLogStream *v5; // rdx
  int32_t v6; // r14d
  TimeAxis *v7; // rax
  common::milog::MiLogStream *v8; // rdx
  int32_t result; // eax
  common::milog::MiLogStream v10; // [rsp+10h] [rbp-90h] BYREF
  char v11[112]; // [rsp+30h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 18 time_axis_ptr:5422";
  *(_QWORD *)(v2 + 16) = Group::endTimeAxis;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  Group::findTimeAxis((Group *const)(v2 + 32), (const std::string *)this);
  if ( std::operator==<TimeAxis>(0LL, (const std::shared_ptr<TimeAxis> *)(v2 + 32)) )
  {
    common::milog::MiLogStream::create(
      &v10,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/group/group.cpp",
      "endTimeAxis",
      5425);
    v5 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
           &v10,
           (const char (*)[27])"TimeAxis cannot find, key:");
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v5, key);
    common::milog::MiLogStream::~MiLogStream(&v10);
    v6 = -1;
  }
  else
  {
    v7 = std::__shared_ptr_access<TimeAxis,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TimeAxis,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    TimeAxis::end(v7);
    std::unordered_map<std::string,std::shared_ptr<TimeAxis>>::erase(&this->time_axis_map_, key);
    common::milog::MiLogStream::create(
      &v10,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/group/group.cpp",
      "endTimeAxis",
      5430);
    v8 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
           &v10,
           (const char (*)[33])"[TimeAix] endTimeAxis succ, key:");
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, key);
    common::milog::MiLogStream::~MiLogStream(&v10);
    v6 = 0;
  }
  std::shared_ptr<TimeAxis>::~shared_ptr((std::shared_ptr<TimeAxis> *const)(v2 + 32));
  result = v6;
  if ( v11 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5435: range 0000000015FE17CC-0000000015FE19CF
int32_t __cdecl Group::endAllTimeAxis(Group *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  _DWORD *v3; // r12
  int32_t result; // eax
  std::unordered_map<std::string,std::shared_ptr<TimeAxis>>::iterator __for_begin; // [rsp+10h] [rbp-E0h] BYREF
  std::unordered_map<std::string,std::shared_ptr<TimeAxis>>::iterator __for_end; // [rsp+18h] [rbp-D8h] BYREF
  std::unordered_map<std::string,std::shared_ptr<TimeAxis>> *__for_range; // [rsp+20h] [rbp-D0h]
  std::pair<const std::string,std::shared_ptr<TimeAxis> > *__in; // [rsp+28h] [rbp-C8h]
  std::tuple_element<0,std::pair<const std::string,std::shared_ptr<TimeAxis> > >::type *key; // [rsp+30h] [rbp-C0h]
  std::tuple_element<1,std::pair<const std::string,std::shared_ptr<TimeAxis> > >::type *_; // [rsp+38h] [rbp-B8h]
  char v11[176]; // [rsp+40h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 56 18 time_axis_map:5436";
  *(_QWORD *)(v1 + 16) = Group::endAllTimeAxis;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862722] = -218103808;
  v3[536862723] = -202116109;
  std::unordered_map<std::string,std::shared_ptr<TimeAxis>>::unordered_map(
    (std::unordered_map<std::string,std::shared_ptr<TimeAxis>> *const)(v1 + 32),
    &this->time_axis_map_);
  __for_range = (std::unordered_map<std::string,std::shared_ptr<TimeAxis>> *)(v1 + 32);
  __for_begin._M_cur = std::unordered_map<std::string,std::shared_ptr<TimeAxis>>::begin((std::unordered_map<std::string,std::shared_ptr<TimeAxis>> *const)(v1 + 32))._M_cur;
  __for_end._M_cur = std::unordered_map<std::string,std::shared_ptr<TimeAxis>>::end((std::unordered_map<std::string,std::shared_ptr<TimeAxis>> *const)(v1 + 32))._M_cur;
  while ( std::__detail::operator!=<std::pair<std::string const,std::shared_ptr<TimeAxis>>,true>(
            &__for_begin,
            &__for_end) )
  {
    __in = std::__detail::_Node_iterator<std::pair<std::string const,std::shared_ptr<TimeAxis>>,false,true>::operator*(&__for_begin);
    key = std::get<0ul,std::string const,std::shared_ptr<TimeAxis>>(__in);
    _ = std::get<1ul,std::string const,std::shared_ptr<TimeAxis>>(__in);
    Group::endTimeAxis(this, key);
    std::__detail::_Node_iterator<std::pair<std::string const,std::shared_ptr<TimeAxis>>,false,true>::operator++(&__for_begin);
  }
  std::unordered_map<std::string,std::shared_ptr<TimeAxis>>::~unordered_map((std::unordered_map<std::string,std::shared_ptr<TimeAxis>> *const)(v1 + 32));
  result = 0;
  if ( v11 == (char *)v1 )
  {
    *(_DWORD *)((v1 >> 3) + 0x7FFF8000) = 0;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5445: range 0000000015FE19D0-0000000015FE1CC6
int32_t __cdecl Group::pauseTimeAxis(Group *const this, const std::string *key)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  common::milog::MiLogStream *v5; // rdx
  int32_t v6; // r14d
  std::__shared_ptr_access<TimeAxis,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  common::milog::MiLogStream *v8; // rdx
  std::__shared_ptr_access<TimeAxis,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  std::__shared_ptr_access<SceneTimer,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  common::milog::MiLogStream *v11; // rdx
  int32_t result; // eax
  common::milog::MiLogStream v13; // [rsp+10h] [rbp-90h] BYREF
  char v14[112]; // [rsp+30h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 18 time_axis_ptr:5446";
  *(_QWORD *)(v2 + 16) = Group::pauseTimeAxis;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  Group::findTimeAxis((Group *const)(v2 + 32), (const std::string *)this);
  if ( std::operator==<TimeAxis>(0LL, (const std::shared_ptr<TimeAxis> *)(v2 + 32)) )
  {
    common::milog::MiLogStream::create(
      &v13,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "pauseTimeAxis",
      5449);
    v5 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
           &v13,
           (const char (*)[27])"TimeAxis cannot find, key:");
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v5, key);
    common::milog::MiLogStream::~MiLogStream(&v13);
    v6 = -1;
  }
  else
  {
    v7 = std::__shared_ptr_access<TimeAxis,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TimeAxis,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    if ( std::operator==<SceneTimer>(&v7->timer_ptr, 0LL) )
    {
      common::milog::MiLogStream::create(
        &v13,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/group/group.cpp",
        "pauseTimeAxis",
        5454);
      v8 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
             &v13,
             (const char (*)[33])"TimeAxis timer_ptr is null, key:");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, key);
      common::milog::MiLogStream::~MiLogStream(&v13);
      v6 = -1;
    }
    else
    {
      v9 = std::__shared_ptr_access<TimeAxis,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TimeAxis,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
      v10 = std::__shared_ptr_access<SceneTimer,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SceneTimer,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v9->timer_ptr);
      common::tools::MiTimer::cancel(v10);
      common::milog::MiLogStream::create(
        &v13,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/group/group.cpp",
        "pauseTimeAxis",
        5458);
      v11 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
              &v13,
              (const char (*)[35])"[TimeAix] pauseTimeAxis succ, key:");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v11, key);
      common::milog::MiLogStream::~MiLogStream(&v13);
      v6 = 0;
    }
  }
  std::shared_ptr<TimeAxis>::~shared_ptr((std::shared_ptr<TimeAxis> *const)(v2 + 32));
  result = v6;
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5463: range 0000000015FE1CC8-0000000015FE1E84
int32_t __cdecl Group::continueTimeAxis(Group *const this, const std::string *key)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  common::milog::MiLogStream *v5; // rdx
  int32_t v6; // r14d
  TimeAxis *v7; // rax
  int32_t result; // eax
  common::milog::MiLogStream v9; // [rsp+10h] [rbp-90h] BYREF
  char v10[112]; // [rsp+30h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 18 time_axis_ptr:5464";
  *(_QWORD *)(v2 + 16) = Group::continueTimeAxis;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  Group::findTimeAxis((Group *const)(v2 + 32), (const std::string *)this);
  if ( std::operator==<TimeAxis>(0LL, (const std::shared_ptr<TimeAxis> *)(v2 + 32)) )
  {
    common::milog::MiLogStream::create(
      &v9,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "continueTimeAxis",
      5467);
    v5 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
           &v9,
           (const char (*)[27])"TimeAxis cannot find, key:");
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v5, key);
    common::milog::MiLogStream::~MiLogStream(&v9);
    v6 = -1;
  }
  else
  {
    v7 = std::__shared_ptr_access<TimeAxis,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TimeAxis,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    v6 = TimeAxis::continueTimer(v7);
  }
  std::shared_ptr<TimeAxis>::~shared_ptr((std::shared_ptr<TimeAxis> *const)(v2 + 32));
  result = v6;
  if ( v10 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5475: range 0000000015FE1E86-0000000015FE2679
void __cdecl Group::cleanGatherTimeoutRefreshTime(Group *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  common::milog::MiLogStream *v4; // rax
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  common::milog::MiLogStream *v12; // rax
  const RefreshPolicyExcelConfigMgr *p_refresh_policy_config_mgr; // rdi
  uint32_t v14; // esi
  bool isTimeToRefresh; // r14
  std::_Rb_tree_const_iterator<unsigned int>::reference v16; // rdx
  uint32_t now; // [rsp+1Ch] [rbp-1A4h]
  std::map<unsigned int,unsigned int>::iterator __for_begin; // [rsp+20h] [rbp-1A0h] BYREF
  std::map<unsigned int,unsigned int>::iterator __for_end; // [rsp+28h] [rbp-198h] BYREF
  const GroupScriptConfig *group_script_config_ptr; // [rsp+30h] [rbp-190h]
  std::map<unsigned int,unsigned int> *__for_range; // [rsp+38h] [rbp-188h]
  std::set<unsigned int> *__for_range_0; // [rsp+40h] [rbp-180h]
  std::pair<unsigned int const,unsigned int> *__in; // [rsp+48h] [rbp-178h]
  std::tuple_element<0,std::pair<unsigned int const,unsigned int> >::type *config_id; // [rsp+50h] [rbp-170h]
  std::tuple_element<1,std::pair<unsigned int const,unsigned int> >::type *refresh_time; // [rsp+58h] [rbp-168h]
  const GadgetScriptConfig *gadget_script_config_ptr; // [rsp+60h] [rbp-160h]
  const data::GatherExcelConfig *gather_excel_config_ptr; // [rsp+68h] [rbp-158h]
  std::shared_ptr<Config> v29; // [rsp+70h] [rbp-150h] BYREF
  std::shared_ptr<Config> v30; // [rsp+80h] [rbp-140h] BYREF
  common::milog::MiLogStream v31; // [rsp+90h] [rbp-130h] BYREF
  common::milog::MiLogStream v32; // [rsp+B0h] [rbp-110h] BYREF
  common::milog::MiLogStream v33; // [rsp+D0h] [rbp-F0h] BYREF
  common::milog::MiLogStream v34; // [rsp+F0h] [rbp-D0h] BYREF
  char v35[176]; // [rsp+110h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v35;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 32 4 14 config_id:5516 48 48 23 timeout_config_set:5483";
  *(_QWORD *)(v1 + 16) = Group::cleanGatherTimeoutRefreshTime;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = 61956;
  v3[536862723] = -202116109;
  group_script_config_ptr = Group::getScriptConfig(this);
  if ( group_script_config_ptr )
  {
    now = common::tools::TimeUtils::getNow();
    std::set<unsigned int>::set((std::set<unsigned int> *const)(v1 + 48));
    __for_range = &this->gather_refresh_time_map_;
    __for_begin._M_node = std::map<unsigned int,unsigned int>::begin(&this->gather_refresh_time_map_)._M_node;
    __for_end._M_node = std::map<unsigned int,unsigned int>::end(&this->gather_refresh_time_map_)._M_node;
    while ( std::operator!=(&__for_begin, &__for_end) )
    {
      __in = std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator*(&__for_begin);
      config_id = std::get<0ul,unsigned int const,unsigned int>(__in);
      refresh_time = std::get<1ul,unsigned int const,unsigned int>(__in);
      if ( *(_BYTE *)(((unsigned __int64)config_id >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)config_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)config_id >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4();
      }
      gadget_script_config_ptr = GroupScriptConfig::findGadgetConfig(group_script_config_ptr, *config_id);
      if ( gadget_script_config_ptr )
      {
        if ( *(_BYTE *)(((unsigned __int64)&gadget_script_config_ptr->point_type >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)gadget_script_config_ptr + 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&gadget_script_config_ptr->point_type >> 3)
                                                                                  + 0x7FFF8000) )
        {
          __asan_report_load4();
        }
        *(_DWORD *)(v1 + 32) = gadget_script_config_ptr->point_type;
        if ( *(_DWORD *)(v1 + 32) )
        {
          ServiceBox::findService<GameserverService>();
          GameserverService::getConfig((GameserverService *const)&v29);
          v11 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v29);
          gather_excel_config_ptr = data::GatherExcelConfigMgrBase::findGatherExcelConfig(
                                      &v11->design_config.txt_config_mgr.gather_config_mgr,
                                      *(_DWORD *)(v1 + 32));
          std::shared_ptr<Config>::~shared_ptr(&v29);
          if ( gather_excel_config_ptr )
          {
            ServiceBox::findService<GameserverService>();
            GameserverService::getConfig((GameserverService *const)&v30);
            p_refresh_policy_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v30)->design_config.txt_config_mgr.refresh_policy_config_mgr;
            if ( *(_BYTE *)(((unsigned __int64)refresh_time >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)refresh_time & 7) + 3) >= *(_BYTE *)(((unsigned __int64)refresh_time >> 3)
                                                                             + 0x7FFF8000) )
            {
              p_refresh_policy_config_mgr = (const RefreshPolicyExcelConfigMgr *)refresh_time;
              __asan_report_load4();
            }
            v14 = *refresh_time;
            if ( *(_BYTE *)(((unsigned __int64)&gather_excel_config_ptr->refresh_id >> 3) + 0x7FFF8000) != 0
              && (char)((((_BYTE)gather_excel_config_ptr + 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&gather_excel_config_ptr->refresh_id >> 3)
                                                                                     + 0x7FFF8000) )
            {
              p_refresh_policy_config_mgr = (const RefreshPolicyExcelConfigMgr *)&gather_excel_config_ptr->refresh_id;
              __asan_report_load4();
            }
            isTimeToRefresh = RefreshPolicyExcelConfigMgr::isTimeToRefresh(
                                p_refresh_policy_config_mgr,
                                gather_excel_config_ptr->refresh_id,
                                v14,
                                now);
            std::shared_ptr<Config>::~shared_ptr(&v30);
            if ( isTimeToRefresh )
              std::set<unsigned int>::insert((std::set<unsigned int> *const)(v1 + 48), config_id);
          }
          else
          {
            common::milog::MiLogStream::create(
              &v34,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/group/group.cpp",
              "cleanGatherTimeoutRefreshTime",
              5508);
            v12 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
                    &v34,
                    (const char (*)[40])"findGatherExcelConfig fails, gather_id:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v1 + 32));
            common::milog::MiLogStream::~MiLogStream(&v34);
          }
        }
        else
        {
          common::milog::MiLogStream::create(
            &v33,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/group/group.cpp",
            "cleanGatherTimeoutRefreshTime",
            5502);
          v10 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
                  &v33,
                  (const char (*)[38])"gather id should not be 0, config_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, config_id);
          common::milog::MiLogStream::~MiLogStream(&v33);
        }
      }
      else
      {
        if ( *(_BYTE *)(((unsigned __int64)config_id >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)config_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)config_id >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4();
        }
        if ( GroupScriptConfig::isGarbageConfigId(group_script_config_ptr, *config_id) )
        {
          common::milog::MiLogStream::create(
            &v31,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/group/group.cpp",
            "cleanGatherTimeoutRefreshTime",
            5491);
          v4 = common::milog::MiLogStream::operator<<<char [54],(char *[54])0>(
                 &v31,
                 (const char (*)[54])"gather garbage findGatherExcelConfig failed group_id:");
          v5 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v4, &this->group_id_);
          v6 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v5, (const char (*)[13])" config_id: ");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, config_id);
          common::milog::MiLogStream::~MiLogStream(&v31);
        }
        else
        {
          common::milog::MiLogStream::create(
            &v32,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/group/group.cpp",
            "cleanGatherTimeoutRefreshTime",
            5495);
          v7 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
                 &v32,
                 (const char (*)[35])"findGadgetConfig fails, config_id:");
          v8 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, config_id);
          v9 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v8, (const char (*)[11])" group_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, &this->group_id_);
          common::milog::MiLogStream::~MiLogStream(&v32);
        }
      }
      std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator++(&__for_begin);
    }
    __for_range_0 = (std::set<unsigned int> *)(v1 + 48);
    __for_begin._M_node = (std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >::_Base_ptr)std::set<unsigned int>::begin((const std::set<unsigned int> *const)(v1 + 48))._M_node;
    __for_end._M_node = (std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >::_Base_ptr)std::set<unsigned int>::end(__for_range_0)._M_node;
    while ( std::operator!=(
              (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)&__for_begin,
              (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)&__for_end) )
    {
      v16 = std::_Rb_tree_const_iterator<unsigned int>::operator*((const std::_Rb_tree_const_iterator<unsigned int> *const)&__for_begin);
      if ( *(_BYTE *)(((unsigned __int64)v16 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v16 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v16 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4();
      }
      *(_DWORD *)(v1 + 32) = *v16;
      std::map<unsigned int,unsigned int>::erase(
        &this->gather_refresh_time_map_,
        (const std::map<unsigned int,unsigned int>::key_type *)(v1 + 32));
      std::_Rb_tree_const_iterator<unsigned int>::operator++((std::_Rb_tree_const_iterator<unsigned int> *const)&__for_begin);
    }
    std::set<unsigned int>::~set((std::set<unsigned int> *const)(v1 + 48));
  }
  if ( v35 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF800C) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 5523: range 0000000015FE267A-0000000015FE28B0
int32_t __cdecl Group::getTempVariableValue(Group *const this, const std::string *name, int32_t *value)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  common::milog::MiLogStream *v6; // rdx
  int32_t result; // eax
  std::__detail::_Node_iterator<std::pair<const std::string,int>,false,true>::pointer v8; // rax
  int32_t second; // ecx
  std::__detail::_Node_iterator_base<std::pair<const std::string,int>,true> __y; // [rsp+28h] [rbp-88h] BYREF
  common::milog::MiLogStream v12; // [rsp+30h] [rbp-80h] BYREF
  char v13[96]; // [rsp+50h] [rbp-60h] BYREF

  v3 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 8 9 iter:5524";
  *(_QWORD *)(v3 + 16) = Group::getTempVariableValue;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116352;
  *(std::unordered_map<std::string,int>::iterator *)(v3 + 32) = std::unordered_map<std::string,int>::find(
                                                                  &this->temp_variable_map_,
                                                                  name);
  __y._M_cur = std::unordered_map<std::string,int>::end(&this->temp_variable_map_)._M_cur;
  if ( std::__detail::operator==<std::pair<std::string const,int>,true>(
         (const std::__detail::_Node_iterator_base<std::pair<const std::string,int>,true> *)(v3 + 32),
         &__y) )
  {
    common::milog::MiLogStream::create(
      &v12,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/group/group.cpp",
      "getTempVariableValue",
      5527);
    v6 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
           &v12,
           (const char (*)[31])"Temp variable not found, name:");
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v6, name);
    common::milog::MiLogStream::~MiLogStream(&v12);
    result = -1;
  }
  else
  {
    v8 = std::__detail::_Node_iterator<std::pair<std::string const,int>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,int>,false,true> *const)(v3 + 32));
    if ( *(_BYTE *)(((unsigned __int64)&v8->second >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&v8->second >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    second = v8->second;
    if ( *(_BYTE *)(((unsigned __int64)value >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)value & 7) + 3) >= *(_BYTE *)(((unsigned __int64)value >> 3) + 0x7FFF8000) )
    {
      __asan_report_store4(value);
    }
    *value = second;
    result = 0;
  }
  if ( v13 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5535: range 0000000015FE28B2-0000000015FE2DE5
__int64 __fastcall Group::setTempVariableValue(Group *const this, const std::string *name, int32_t value)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // rax
  unsigned int v7; // r14d
  std::__detail::_Node_iterator<std::pair<const std::string,int>,false,true>::pointer v8; // rax
  int v9; // r14d
  std::unordered_map<std::string,int>::mapped_type *v10; // rax
  _DWORD *v11; // rdx
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  int32_t v17; // r14d
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // rdx
  int32_t *p_param1; // rax
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  __int64 result; // rax
  int32_t old_value; // [rsp+24h] [rbp-DCh]
  std::__detail::_Node_iterator_base<std::pair<const std::string,int>,true> __y; // [rsp+28h] [rbp-D8h] BYREF
  common::milog::MiLogStream v25; // [rsp+30h] [rbp-D0h] BYREF
  char v26[176]; // [rsp+50h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v26;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 4 10 value:5534 64 8 9 iter:5542 96 16 12 evt_ptr:5551";
  *(_QWORD *)(v3 + 16) = Group::setTempVariableValue;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218959360;
  v5[536862723] = -202178560;
  *(_DWORD *)(v3 + 48) = value;
  if ( common::tools::MiscUtils::isContains<std::unordered_map<std::string,int>,std::string>(&this->variable_map_, name) )
  {
    common::milog::MiLogStream::create(
      &v25,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "setTempVariableValue",
      5538);
    v6 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
           &v25,
           (const char (*)[38])"variable_map contains set name, name:");
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v6, name);
    common::milog::MiLogStream::~MiLogStream(&v25);
    v7 = -1;
  }
  else
  {
    old_value = 0;
    *(std::unordered_map<std::string,int>::iterator *)(v3 + 64) = std::unordered_map<std::string,int>::find(
                                                                    &this->temp_variable_map_,
                                                                    name);
    __y._M_cur = std::unordered_map<std::string,int>::end(&this->temp_variable_map_)._M_cur;
    if ( std::__detail::operator!=<std::pair<std::string const,int>,true>(
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,int>,true> *)(v3 + 64),
           &__y) )
    {
      v8 = std::__detail::_Node_iterator<std::pair<std::string const,int>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,int>,false,true> *const)(v3 + 64));
      if ( *(_BYTE *)(((unsigned __int64)&v8->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v8->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4();
      }
      old_value = v8->second;
    }
    v9 = *(_DWORD *)(v3 + 48);
    v10 = std::unordered_map<std::string,int>::operator[](&this->temp_variable_map_, name);
    v11 = v10;
    if ( *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v10 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) )
    {
      __asan_report_store4(v10);
    }
    *v11 = v9;
    common::milog::MiLogStream::create(
      &v25,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/group/group.cpp",
      "setTempVariableValue",
      5549);
    v12 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
            &v25,
            (const char (*)[28])"setTempVariableValue, name:");
    v13 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v12, name);
    v14 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v13, (const char (*)[9])", value:");
    v15 = common::milog::MiLogStream::operator<<<int,(int *)0>(v14, (const int *)(v3 + 48));
    operator<<(v15, this);
    common::milog::MiLogStream::~MiLogStream(&v25);
    EventUtil::createEvent((std::shared_ptr<Event> *)(v3 + 96), 3);
    if ( std::operator==<Event>((const std::shared_ptr<Event> *)(v3 + 96), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v25,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/group/group.cpp",
        "setTempVariableValue",
        5554);
      common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(&v25, (const char (*)[18])"createEvent fails");
      common::milog::MiLogStream::~MiLogStream(&v25);
      v7 = -1;
    }
    else
    {
      v16 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
      std::string::operator=(&v16->source_name, name);
      v17 = *(_DWORD *)(v3 + 48);
      v18 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
      p_param1 = &v18->param1;
      if ( *(_BYTE *)(((unsigned __int64)p_param1 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)p_param1 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_param1 >> 3) + 0x7FFF8000) )
      {
        __asan_report_store4(p_param1);
      }
      v18->param1 = v17;
      v20 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
      if ( *(_BYTE *)(((unsigned __int64)&v20->param2 >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v20->param2 >> 3) + 0x7FFF8000) <= 3 )
      {
        v20 = (std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *)__asan_report_store4(&v20->param2);
      }
      v20->param2 = old_value;
      Group::handleEvent(this, (EventPtr *)(v3 + 96));
      v7 = 0;
    }
    std::shared_ptr<Event>::~shared_ptr((std::shared_ptr<Event> *const)(v3 + 96));
  }
  result = v7;
  if ( v26 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5565: range 0000000015FE2DE6-0000000015FE3389
__int64 __fastcall Group::changeTempVariableValue(Group *const this, const std::string *name, int32_t delta)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // rax
  unsigned int v7; // r14d
  std::__detail::_Node_iterator<std::pair<const std::string,int>,false,true>::pointer v8; // rax
  int v9; // r14d
  std::__detail::_Node_iterator<std::pair<const std::string,int>,false,true>::pointer v10; // rax
  SelectType_8 v11; // r14d
  std::__detail::_Node_iterator<std::pair<const std::string,int>,false,true>::pointer v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // r14
  std::__detail::_Node_iterator<std::pair<const std::string,int>,false,true>::pointer v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  std::__detail::_Node_iterator<std::pair<const std::string,int>,false,true>::pointer v21; // rax
  int second; // r14d
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v23; // rdx
  int32_t *p_param1; // rax
  std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v25; // rax
  __int64 result; // rax
  int32_t old_value; // [rsp+24h] [rbp-DCh]
  std::__detail::_Node_iterator_base<std::pair<const std::string,int>,true> __y; // [rsp+28h] [rbp-D8h] BYREF
  common::milog::MiLogStream v30; // [rsp+30h] [rbp-D0h] BYREF
  char v31[176]; // [rsp+50h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v31;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 4 10 delta:5564 64 8 9 iter:5566 96 16 12 evt_ptr:5577";
  *(_QWORD *)(v3 + 16) = Group::changeTempVariableValue;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218959360;
  v5[536862723] = -202178560;
  *(_DWORD *)(v3 + 48) = delta;
  *(std::unordered_map<std::string,int>::iterator *)(v3 + 64) = std::unordered_map<std::string,int>::find(
                                                                  &this->temp_variable_map_,
                                                                  name);
  __y._M_cur = std::unordered_map<std::string,int>::end(&this->temp_variable_map_)._M_cur;
  if ( std::__detail::operator==<std::pair<std::string const,int>,true>(
         (const std::__detail::_Node_iterator_base<std::pair<const std::string,int>,true> *)(v3 + 64),
         &__y) )
  {
    common::milog::MiLogStream::create(
      &v30,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/group/group.cpp",
      "changeTempVariableValue",
      5569);
    v6 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
           &v30,
           (const char (*)[31])"Temp variable not found, name:");
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v6, name);
    common::milog::MiLogStream::~MiLogStream(&v30);
    v7 = -1;
  }
  else
  {
    v8 = std::__detail::_Node_iterator<std::pair<std::string const,int>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,int>,false,true> *const)(v3 + 64));
    if ( *(_BYTE *)(((unsigned __int64)&v8->second >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&v8->second >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    old_value = v8->second;
    v9 = *(_DWORD *)(v3 + 48);
    v10 = std::__detail::_Node_iterator<std::pair<std::string const,int>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,int>,false,true> *const)(v3 + 64));
    if ( *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    v11 = SAFE_ADD<int,int>(v10->second, v9);
    v12 = std::__detail::_Node_iterator<std::pair<std::string const,int>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,int>,false,true> *const)(v3 + 64));
    if ( *(_BYTE *)(((unsigned __int64)&v12->second >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&v12->second >> 3) + 0x7FFF8000) <= 3 )
    {
      v12 = (std::__detail::_Node_iterator<std::pair<const std::string,int>,false,true>::pointer)__asan_report_store4(&v12->second);
    }
    v12->second = v11;
    common::milog::MiLogStream::create(
      &v30,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/group/group.cpp",
      "changeTempVariableValue",
      5575);
    v13 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
            &v30,
            (const char (*)[31])"changeTempVariableValue, name:");
    v14 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v13, name);
    v15 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v14, (const char (*)[9])", value:");
    v16 = std::__detail::_Node_iterator<std::pair<std::string const,int>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,int>,false,true> *const)(v3 + 64));
    v17 = common::milog::MiLogStream::operator<<<int,(int *)0>(v15, &v16->second);
    v18 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v17, (const char (*)[9])", delta:");
    v19 = common::milog::MiLogStream::operator<<<int,(int *)0>(v18, (const int *)(v3 + 48));
    operator<<(v19, this);
    common::milog::MiLogStream::~MiLogStream(&v30);
    EventUtil::createEvent((std::shared_ptr<Event> *)(v3 + 96), 3);
    if ( std::operator==<Event>((const std::shared_ptr<Event> *)(v3 + 96), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v30,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/group/group.cpp",
        "changeTempVariableValue",
        5580);
      common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(&v30, (const char (*)[18])"createEvent fails");
      common::milog::MiLogStream::~MiLogStream(&v30);
      v7 = -1;
    }
    else
    {
      v20 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
      std::string::operator=(&v20->source_name, name);
      v21 = std::__detail::_Node_iterator<std::pair<std::string const,int>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,int>,false,true> *const)(v3 + 64));
      if ( *(_BYTE *)(((unsigned __int64)&v21->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v21->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4();
      }
      second = v21->second;
      v23 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
      p_param1 = &v23->param1;
      if ( *(_BYTE *)(((unsigned __int64)p_param1 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)p_param1 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_param1 >> 3) + 0x7FFF8000) )
      {
        __asan_report_store4(p_param1);
      }
      v23->param1 = second;
      v25 = std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
      if ( *(_BYTE *)(((unsigned __int64)&v25->param2 >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v25->param2 >> 3) + 0x7FFF8000) <= 3 )
      {
        v25 = (std::__shared_ptr_access<Event,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *)__asan_report_store4(&v25->param2);
      }
      v25->param2 = old_value;
      Group::handleEvent(this, (EventPtr *)(v3 + 96));
      v7 = 0;
    }
    std::shared_ptr<Event>::~shared_ptr((std::shared_ptr<Event> *const)(v3 + 96));
  }
  result = v7;
  if ( v31 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5591: range 0000000015FE338A-0000000015FE3C08
// local variable allocation has failed, the output may be wrong!
void __fastcall Group::writeSuiteChangeLog(Group *const this, uint32_t prev_suite, SuiteLogContext log_context)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  QuestExcelConfigMgr *p_quest_config_mgr; // rcx
  bool v7; // r14
  common::milog::MiLogStream *v8; // rax
  Player *v9; // rax
  PlayerBasicComp *BasicComp; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyGroupSuiteChange,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rcx
  std::__shared_ptr_access<proto_log::PlayerLogBodyGroupSuiteChange,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rcx
  std::__shared_ptr_access<proto_log::PlayerLogBodyGroupSuiteChange,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyGroupSuiteChange,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rcx
  std::__shared_ptr_access<proto_log::PlayerLogBodyGroupSuiteChange,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rcx
  std::__shared_ptr_access<proto_log::PlayerLogBodyGroupSuiteChange,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rcx
  std::__shared_ptr_access<proto_log::PlayerLogBodyGroupSuiteChange,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rcx
  std::__shared_ptr_access<proto_log::PlayerLogBodyGroupSuiteChange,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // rcx
  std::__shared_ptr_access<proto_log::PlayerLogBodyGroupSuiteChange,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // rcx
  std::__shared_ptr_access<proto_log::PlayerLogBodyGroupSuiteChange,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rcx
  std::__shared_ptr_access<proto_log::PlayerLogBodyGroupSuiteChange,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rcx
  Player *v22; // r14
  std::string v23; // [rsp+0h] [rbp-140h] OVERLAPPED BYREF
  std::shared_ptr<google::protobuf::Message> v24; // [rsp+20h] [rbp-120h] BYREF
  common::milog::MiLogStream v25; // [rsp+30h] [rbp-110h] BYREF
  char v26[240]; // [rsp+50h] [rbp-F0h] BYREF

  v23._M_string_length = (std::string::size_type)this;
  HIDWORD(v23._M_dataplus._M_p) = prev_suite;
  v3 = (unsigned __int64)v26;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 48 1 11 holder:5615 64 16 15 player_ptr:5603 96 16 12 log_ptr:5616 128 28 16 log_context:5590";
  *(_QWORD *)(v3 + 16) = Group::writeSuiteChangeLog;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753551;
  v5[536862722] = -219021312;
  v5[536862723] = -219021312;
  v5[536862724] = 0x4000000;
  v5[536862725] = -202116109;
  *(SuiteLogContext *)(v3 + 128) = log_context;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v24);
  p_quest_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v24)->design_config.txt_config_mgr.quest_config_mgr;
  if ( *(_BYTE *)(((v23._M_string_length + 24) >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((v23._M_string_length + 24) >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4();
  }
  v7 = !QuestExcelConfigMgr::isQuestGroupID(p_quest_config_mgr, *(_DWORD *)(v23._M_string_length + 24));
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)&v24);
  if ( !v7 )
  {
    if ( *(_BYTE *)(((v23._M_string_length + 32) >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((v23._M_string_length + 32) >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    if ( HIDWORD(v23._M_dataplus._M_p) != *(_DWORD *)(v23._M_string_length + 32) )
    {
      Group::getOwnerPlayer((const Group *const)(v3 + 64));
      if ( std::operator==<Player>(0LL, (const std::shared_ptr<Player> *)(v3 + 64)) )
      {
        common::milog::MiLogStream::create(
          &v25,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/group/group.cpp",
          "writeSuiteChangeLog",
          5606);
        v8 = common::milog::MiLogStream::operator<<<Group,(Group*)0>(&v25, (const Group *)v23._M_string_length);
        common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v8, (const char (*)[16])" owner null ptr");
        common::milog::MiLogStream::~MiLogStream(&v25);
      }
      else
      {
        if ( *(_BYTE *)(((v23._M_string_length + 76) >> 3) + 0x7FFF8000) != 0
          && (char)(((LOBYTE(v23._M_string_length) + 76) & 7) + 3) >= *(_BYTE *)(((v23._M_string_length + 76) >> 3)
                                                                               + 0x7FFF8000) )
        {
          __asan_report_load4();
        }
        if ( !*(_DWORD *)(v23._M_string_length + 76) )
        {
          v9 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
          BasicComp = Player::getBasicComp(v9);
          PlayerBasicComp::getNextTransNo[abi:cxx11]((std::string *)&v25, BasicComp);
          StatLogUtils::ContextHolder::ContextHolder((StatLogUtils::ContextHolder *const)(v3 + 48), 0xC81u, v23);
          std::string::~string(&v25);
          common::tools::perf::make_shared<proto_log::PlayerLogBodyGroupSuiteChange>();
          v11 = std::__shared_ptr_access<proto_log::PlayerLogBodyGroupSuiteChange,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyGroupSuiteChange,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
          if ( *(_BYTE *)(((v23._M_string_length + 72) >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((v23._M_string_length + 72) >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4();
          }
          proto_log::PlayerLogBodyGroupSuiteChange::set_scene_id(v11, *(_DWORD *)(v23._M_string_length + 72));
          v12 = std::__shared_ptr_access<proto_log::PlayerLogBodyGroupSuiteChange,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyGroupSuiteChange,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
          if ( *(_BYTE *)(((v23._M_string_length + 24) >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((v23._M_string_length + 24) >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4();
          }
          proto_log::PlayerLogBodyGroupSuiteChange::set_group_id(v12, *(_DWORD *)(v23._M_string_length + 24));
          v13 = std::__shared_ptr_access<proto_log::PlayerLogBodyGroupSuiteChange,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyGroupSuiteChange,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
          proto_log::PlayerLogBodyGroupSuiteChange::set_old_suite(v13, HIDWORD(v23._M_dataplus._M_p));
          v14 = std::__shared_ptr_access<proto_log::PlayerLogBodyGroupSuiteChange,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyGroupSuiteChange,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
          if ( *(_BYTE *)(((v23._M_string_length + 32) >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((v23._M_string_length + 32) >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4();
          }
          proto_log::PlayerLogBodyGroupSuiteChange::set_new_suite(v14, *(_DWORD *)(v23._M_string_length + 32));
          v15 = std::__shared_ptr_access<proto_log::PlayerLogBodyGroupSuiteChange,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyGroupSuiteChange,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
          if ( *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) != 0
            && (char)(((v3 + 0x80) & 7) + 3) >= *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4();
          }
          proto_log::PlayerLogBodyGroupSuiteChange::set_reason(v15, *(_DWORD *)(v3 + 128));
          v16 = std::__shared_ptr_access<proto_log::PlayerLogBodyGroupSuiteChange,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyGroupSuiteChange,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
          if ( *(_BYTE *)(((v3 + 132) >> 3) + 0x7FFF8000) != 0
            && (char)(((v3 - 124) & 7) + 3) >= *(_BYTE *)(((v3 + 132) >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4();
          }
          proto_log::PlayerLogBodyGroupSuiteChange::set_refresh_id(v16, *(_DWORD *)(v3 + 132));
          v17 = std::__shared_ptr_access<proto_log::PlayerLogBodyGroupSuiteChange,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyGroupSuiteChange,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
          if ( *(_BYTE *)(((v3 + 136) >> 3) + 0x7FFF8000) != 0
            && (char)(((v3 - 120) & 7) + 3) >= *(_BYTE *)(((v3 + 136) >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4();
          }
          proto_log::PlayerLogBodyGroupSuiteChange::set_quest_id(v17, *(_DWORD *)(v3 + 136));
          v18 = std::__shared_ptr_access<proto_log::PlayerLogBodyGroupSuiteChange,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyGroupSuiteChange,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
          if ( *(_BYTE *)(((v3 + 140) >> 3) + 0x7FFF8000) != 0
            && (char)(((v3 - 116) & 7) + 3) >= *(_BYTE *)(((v3 + 140) >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4();
          }
          proto_log::PlayerLogBodyGroupSuiteChange::set_activity_id(v18, *(_DWORD *)(v3 + 140));
          v19 = std::__shared_ptr_access<proto_log::PlayerLogBodyGroupSuiteChange,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyGroupSuiteChange,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
          if ( *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) != 0
            && (char)(((v3 - 112) & 7) + 3) >= *(_BYTE *)(((v3 + 144) >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4();
          }
          proto_log::PlayerLogBodyGroupSuiteChange::set_schedule_id(v19, *(_DWORD *)(v3 + 144));
          v20 = std::__shared_ptr_access<proto_log::PlayerLogBodyGroupSuiteChange,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyGroupSuiteChange,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
          if ( *(_BYTE *)(((v3 + 148) >> 3) + 0x7FFF8000) != 0
            && (char)(((v3 - 108) & 7) + 3) >= *(_BYTE *)(((v3 + 148) >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4();
          }
          proto_log::PlayerLogBodyGroupSuiteChange::set_call_group_id(v20, *(_DWORD *)(v3 + 148));
          v21 = std::__shared_ptr_access<proto_log::PlayerLogBodyGroupSuiteChange,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyGroupSuiteChange,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
          if ( *(_BYTE *)(((v3 + 152) >> 3) + 0x7FFF8000) != 0
            && (char)(((v3 - 104) & 7) + 3) >= *(_BYTE *)(((v3 + 152) >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4();
          }
          proto_log::PlayerLogBodyGroupSuiteChange::set_wq_parent_quest_id(v21, *(_DWORD *)(v3 + 152));
          v22 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
          std::shared_ptr<google::protobuf::Message>::shared_ptr(&v24, 0LL);
          std::shared_ptr<google::protobuf::Message>::shared_ptr<proto_log::PlayerLogBodyGroupSuiteChange,void>(
            (std::shared_ptr<google::protobuf::Message> *const)&v23._anon_0,
            (const std::shared_ptr<proto_log::PlayerLogBodyGroupSuiteChange> *)(v3 + 96));
          Player::printStatLog(v22, (MessagePtr *)&v23._anon_0, &v24, 0xEu);
          std::shared_ptr<google::protobuf::Message>::~shared_ptr((std::shared_ptr<google::protobuf::Message> *const)&v23._anon_0);
          std::shared_ptr<google::protobuf::Message>::~shared_ptr(&v24);
          std::shared_ptr<proto_log::PlayerLogBodyGroupSuiteChange>::~shared_ptr((std::shared_ptr<proto_log::PlayerLogBodyGroupSuiteChange> *const)(v3 + 96));
          StatLogUtils::ContextHolder::~ContextHolder((StatLogUtils::ContextHolder *const)(v3 + 48));
        }
      }
      std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v3 + 64));
    }
  }
  if ( v26 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 5632: range 0000000015FE3C0A-0000000015FE3D04
std::vector<unsigned int> *__cdecl Group::getViewingPlayerUids(
        std::vector<unsigned int> *retstr,
        const Group *const this)
{
  std::vector<unsigned int>::size_type v2; // rdx
  std::map<unsigned int,int>::const_iterator __for_begin; // [rsp+10h] [rbp-40h] BYREF
  std::map<unsigned int,int>::const_iterator __for_end; // [rsp+18h] [rbp-38h] BYREF
  const std::map<unsigned int,int> *__for_range; // [rsp+20h] [rbp-30h]
  const std::pair<unsigned int const,int> *v7; // [rsp+28h] [rbp-28h]
  std::tuple_element<0,const std::pair<unsigned int const,int> >::type *uid; // [rsp+30h] [rbp-20h]
  std::tuple_element<1,const std::pair<unsigned int const,int> >::type *_; // [rsp+38h] [rbp-18h]

  std::vector<unsigned int>::vector(retstr);
  v2 = std::map<unsigned int,int>::size(&this->viewing_uid_map_);
  std::vector<unsigned int>::reserve(retstr, v2);
  __for_range = &this->viewing_uid_map_;
  __for_begin._M_node = std::map<unsigned int,int>::begin(&this->viewing_uid_map_)._M_node;
  __for_end._M_node = std::map<unsigned int,int>::end(&this->viewing_uid_map_)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v7 = std::_Rb_tree_const_iterator<std::pair<unsigned int const,int>>::operator*(&__for_begin);
    uid = std::get<0ul,unsigned int const,int>(v7);
    _ = (std::tuple_element<1,const std::pair<unsigned int const,int> >::type *)std::get<1ul,unsigned int const,int>(v7);
    std::vector<unsigned int>::push_back(retstr, uid);
    std::_Rb_tree_const_iterator<std::pair<unsigned int const,int>>::operator++(&__for_begin);
  }
  return retstr;
};

// Line 5643: range 0000000015FE3D06-0000000015FE429E
uint32_t __cdecl Group::getFinalReviseLevel(const Group *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  common::milog::MiLogStream *v4; // rax
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream *v6; // rax
  uint32_t result; // eax
  const ReviseLevelGrowExcelConfigMgr *p_revise_level_grow_config_mgr; // rdi
  uint32_t v9; // edx
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  std::shared_ptr<Config> v20; // [rsp+10h] [rbp-B0h] BYREF
  common::milog::MiLogStream v21; // [rsp+20h] [rbp-A0h] BYREF
  char v22[128]; // [rsp+40h] [rbp-80h] BYREF

  v1 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(96LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "3 32 4 21 rely_world_level:5655 48 4 21 rely_activity_id:5656 64 4 17 revise_level:5661";
  *(_QWORD *)(v1 + 16) = Group::getFinalReviseLevel;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234556924;
  v3[536862722] = -202116348;
  if ( *(_BYTE *)(((unsigned __int64)&this->revise_level_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->revise_level_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4();
  }
  if ( this->revise_level_ )
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->init_param_.input_revise_level_growth_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->init_param_.input_revise_level_growth_id >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    if ( this->init_param_.input_revise_level_growth_id )
    {
      common::milog::MiLogStream::create(
        &v21,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/group/group.cpp",
        "getFinalReviseLevel",
        5648);
      v4 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v21, (const char (*)[15])" revise_level:");
      v5 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v4, &this->revise_level_);
      v6 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
             v5,
             (const char (*)[25])", while input growth_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
        v6,
        &this->init_param_.input_revise_level_growth_id);
      common::milog::MiLogStream::~MiLogStream(&v21);
    }
    if ( *(_BYTE *)(((unsigned __int64)&this->revise_level_ >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->revise_level_ >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    result = this->revise_level_;
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->init_param_.input_revise_level_growth_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&this->init_param_.input_revise_level_growth_id >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    if ( this->init_param_.input_revise_level_growth_id )
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->init_param_.world_level >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&this->init_param_.world_level >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4();
      }
      *(_DWORD *)(v1 + 32) = this->init_param_.world_level;
      *(_DWORD *)(v1 + 48) = Group::getRelyStartWorldLevelLimitActivityId(this);
      if ( *(_DWORD *)(v1 + 48) )
      {
        if ( *(_BYTE *)(((unsigned __int64)&this->init_param_.rely_activity_world_level_limit >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)this - 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->init_param_.rely_activity_world_level_limit >> 3)
                                                              + 0x7FFF8000) )
        {
          __asan_report_load4();
        }
        *(_DWORD *)(v1 + 32) = this->init_param_.rely_activity_world_level_limit;
      }
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)&v20);
      p_revise_level_grow_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v20)->design_config.txt_config_mgr.revise_level_grow_config_mgr;
      v9 = *(_DWORD *)(v1 + 32);
      if ( *(_BYTE *)(((unsigned __int64)&this->init_param_.input_revise_level_growth_id >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&this->init_param_.input_revise_level_growth_id >> 3) + 0x7FFF8000) <= 3 )
      {
        p_revise_level_grow_config_mgr = (const ReviseLevelGrowExcelConfigMgr *)&this->init_param_.input_revise_level_growth_id;
        __asan_report_load4();
      }
      *(_DWORD *)(v1 + 64) = ReviseLevelGrowExcelConfigMgr::findReviseLevel(
                               p_revise_level_grow_config_mgr,
                               this->init_param_.input_revise_level_growth_id,
                               v9);
      std::shared_ptr<Config>::~shared_ptr(&v20);
      common::milog::MiLogStream::create(
        &v21,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/group/group.cpp",
        "getFinalReviseLevel",
        5662);
      v10 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v21, (const char (*)[15])" revise_level=");
      v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v1 + 64));
      v12 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v11, (const char (*)[12])" growth_id:");
      v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v12,
              &this->init_param_.input_revise_level_growth_id);
      v14 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
              v13,
              (const char (*)[20])", rely_world_level:");
      v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, (const unsigned int *)(v1 + 32));
      v16 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
              v15,
              (const char (*)[20])", rely_activity_id:");
      v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, (const unsigned int *)(v1 + 48));
      v18 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v17, (const char (*)[11])" group_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, &this->group_id_);
      common::milog::MiLogStream::~MiLogStream(&v21);
      result = *(_DWORD *)(v1 + 64);
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->revise_level_ >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&this->revise_level_ >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4();
      }
      result = this->revise_level_;
    }
  }
  if ( v22 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 5670: range 0000000015FE42A0-0000000015FE4787
void __cdecl Group::modifyGadgetParamByArgs(
        Group *const this,
        GadgetParam *gadget_param,
        const GadgetScriptConfig *gadget_script_config)
{
  GadgetExcelConfigMgr *p_gadget_config_mgr; // rcx
  int type; // eax
  std::vector<unsigned int>::const_reference v5; // rdx
  uint32_t v6; // ecx
  std::vector<unsigned int>::const_reference v7; // rdx
  uint32_t v8; // ecx
  uint32_t ProjectorEntityId; // edx
  std::vector<unsigned int>::const_reference v10; // rdx
  uint32_t v11; // ecx
  const data::GadgetExcelConfig *gadget_excel_config_ptr; // [rsp+28h] [rbp-48h]
  std::shared_ptr<Config> v14; // [rsp+30h] [rbp-40h] BYREF
  common::milog::MiLogStream v15; // [rsp+40h] [rbp-30h] BYREF

  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v14);
  p_gadget_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v14)->design_config.txt_config_mgr.gadget_config_mgr;
  if ( *(_BYTE *)(((unsigned __int64)&gadget_script_config->gadget_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)gadget_script_config + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&gadget_script_config->gadget_id >> 3)
                                                                       + 0x7FFF8000) )
  {
    __asan_report_load4();
  }
  gadget_excel_config_ptr = data::GadgetExcelConfigMgrBase::findGadgetExcelConfig(
                              p_gadget_config_mgr,
                              gadget_script_config->gadget_id);
  std::shared_ptr<Config>::~shared_ptr(&v14);
  if ( gadget_excel_config_ptr )
  {
    if ( *(_BYTE *)(((unsigned __int64)&gadget_excel_config_ptr->type >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)gadget_excel_config_ptr + 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&gadget_excel_config_ptr->type >> 3)
                                                                             + 0x7FFF8000) )
    {
      __asan_report_load4();
    }
    type = gadget_excel_config_ptr->type;
    if ( type == 72 )
    {
      if ( std::vector<unsigned int>::size(&gadget_script_config->argument_vec) )
      {
        v10 = std::vector<unsigned int>::operator[](&gadget_script_config->argument_vec, 0LL);
        if ( *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v10 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4();
        }
        v11 = *v10;
        if ( *(_BYTE *)(((unsigned __int64)&gadget_param->coin_collect_operator_param >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&gadget_param->coin_collect_operator_param >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_store4(&gadget_param->coin_collect_operator_param);
        }
        gadget_param->coin_collect_operator_param.level_id = v11;
      }
      else
      {
        common::milog::MiLogStream::create(
          &v15,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/group/group.cpp",
          "modifyGadgetParamByArgs",
          5703);
        common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
          &v15,
          (const char (*)[42])"coincollect should have a level_id config");
        common::milog::MiLogStream::~MiLogStream(&v15);
      }
    }
    else if ( type <= 72 )
    {
      if ( type == 56 )
      {
        if ( std::vector<unsigned int>::size(&gadget_script_config->argument_vec) )
        {
          v5 = std::vector<unsigned int>::operator[](&gadget_script_config->argument_vec, 0LL);
          if ( *(_BYTE *)(((unsigned __int64)v5 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v5 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v5 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4();
          }
          v6 = *v5;
          if ( *(_BYTE *)(((unsigned __int64)&gadget_param->echo_shell >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&gadget_param->echo_shell >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_store4(&gadget_param->echo_shell);
          }
          gadget_param->echo_shell.voice_id = v6;
        }
        else
        {
          common::milog::MiLogStream::create(
            &v15,
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/group/group.cpp",
            "modifyGadgetParamByArgs",
            5682);
          common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
            &v15,
            (const char (*)[41])"echo shell should have a voice_id config");
          common::milog::MiLogStream::~MiLogStream(&v15);
        }
      }
      else if ( type == 59 )
      {
        if ( std::vector<unsigned int>::size(&gadget_script_config->argument_vec) )
        {
          v7 = std::vector<unsigned int>::operator[](&gadget_script_config->argument_vec, 0LL);
          if ( *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v7 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4();
          }
          v8 = *v7;
          if ( *(_BYTE *)(((unsigned __int64)&gadget_param->screen >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)gadget_param - 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&gadget_param->screen >> 3)
                                                                        + 0x7FFF8000) )
          {
            __asan_report_store4(&gadget_param->screen);
          }
          gadget_param->screen.live_id = v8;
          ProjectorEntityId = Group::getProjectorEntityId(this);
          if ( *(_BYTE *)(((unsigned __int64)&gadget_param->screen.projector_entity_id >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&gadget_param->screen.projector_entity_id >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_store4(&gadget_param->screen.projector_entity_id);
          }
          gadget_param->screen.projector_entity_id = ProjectorEntityId;
        }
        else
        {
          common::milog::MiLogStream::create(
            &v15,
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/group/group.cpp",
            "modifyGadgetParamByArgs",
            5692);
          common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
            &v15,
            (const char (*)[36])"screen should have a live_id config");
          common::milog::MiLogStream::~MiLogStream(&v15);
        }
      }
    }
  }
};

// Line 5716: range 0000000015FE4788-0000000015FE4A5D
void __cdecl Group::setIsReplaceable(Group *const this, bool is_replaceable)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  common::milog::MiLogStream *v5; // rdx
  Scene *v6; // rax
  unsigned __int64 BlockGroupComp; // rax
  unsigned __int64 v8; // rdx
  void (__fastcall *v9)(unsigned __int64, _QWORD); // r8
  common::milog::MiLogStream v10; // [rsp+10h] [rbp-80h] BYREF
  char v11[96]; // [rsp+30h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 14 scene_ptr:5722";
  *(_QWORD *)(v2 + 16) = Group::setIsReplaceable;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  if ( *(char *)(((unsigned __int64)&this->is_replaceable_ >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&this->is_replaceable_);
  if ( is_replaceable != this->is_replaceable_ )
  {
    if ( *(char *)(((unsigned __int64)&this->is_replaceable_ >> 3) + 0x7FFF8000) < 0 )
      __asan_report_store1(&this->is_replaceable_);
    this->is_replaceable_ = is_replaceable;
    Group::getScene((const Group *const)(v2 + 32));
    if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v2 + 32)) )
    {
      common::milog::MiLogStream::create(
        &v10,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/group/group.cpp",
        "setIsReplaceable",
        5725);
      v5 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
             &v10,
             (const char (*)[18])"scene_ptr is null");
      operator<<(v5, this);
      common::milog::MiLogStream::~MiLogStream(&v10);
    }
    else
    {
      v6 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
      BlockGroupComp = (unsigned __int64)Scene::getBlockGroupComp(v6);
      if ( *(_BYTE *)((BlockGroupComp >> 3) + 0x7FFF8000) )
        BlockGroupComp = __asan_report_load8();
      v8 = *(_QWORD *)BlockGroupComp + 280LL;
      if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
        BlockGroupComp = __asan_report_load8();
      v9 = *(void (__fastcall **)(unsigned __int64, _QWORD))v8;
      if ( *(_BYTE *)(((unsigned __int64)&this->group_id_ >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&this->group_id_ >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4();
      }
      v9(BlockGroupComp, this->group_id_);
    }
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v2 + 32));
  }
  if ( v11 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 5732: range 0000000015FE4B2A-0000000015FE4C19
void __cdecl Group::setAllGatherDelByGm(Group *const this)
{
  common::milog::MiLogStream *v1; // rax
  common::milog::MiLogStream *v2; // rax
  std::function<ForeachPolicy(Entity&)> p_func; // [rsp+10h] [rbp-30h] BYREF

  std::function<ForeachPolicy ()(Entity &)>::function<Group::setAllGatherDelByGm(void)::{lambda(Entity &)#1},void,void>(
    &p_func,
    (Group::setAllGatherDelByGm::<lambda(Entity&)>)this);
  Group::foreachEntity(this, &p_func);
  std::function<ForeachPolicy ()(Entity &)>::~function(&p_func);
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)&p_func,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/group/group.cpp",
    "setAllGatherDelByGm",
    5740);
  v1 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
         (common::milog::MiLogStream *const)&p_func,
         (const char (*)[11])"group_id: ");
  v2 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v1, &this->group_id_);
  common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(v2, (const char (*)[25])off_25ABF8A0);
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&p_func);
};

// Line 5733: range 0000000015FE4A5E-0000000015FE4B28
ForeachPolicy __cdecl Group::setAllGatherDelByGm(void)::{lambda(Entity &)#1}::operator()(
        const Group::setAllGatherDelByGm::<lambda(Entity&)> *const __closure,
        Entity *entity)
{
  unsigned __int64 v2; // rax
  void (__fastcall *v3)(Entity *, VisionContext *); // rbx
  Group *this; // rbx
  uint32_t ConfigId; // eax
  VisionContext v7; // [rsp+14h] [rbp-1Ch] BYREF

  if ( *(_BYTE *)(((unsigned __int64)entity >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  v2 = (unsigned __int64)(entity->_vptr_DescribalBase + 16);
  if ( *(_BYTE *)((v2 >> 3) + 0x7FFF8000) )
    v2 = __asan_report_load8();
  v3 = *(void (__fastcall **)(Entity *, VisionContext *))v2;
  VisionContext::VisionContext(&v7, VISION_DIE);
  v3(entity, &v7);
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  this = __closure->__this;
  ConfigId = Entity::getConfigId(entity);
  Group::setGatherRefreshTime(this, ConfigId);
  return 0;
};

// Line 5744: range 0000000015FE4D78-0000000015FE4E60
void __cdecl Group::setAllMonsterKilledByGm(Group *const this)
{
  Group::setAllMonsterKilledByGm::<lambda(Entity&)> v1; // si
  common::milog::MiLogStream *v2; // rax
  common::milog::MiLogStream *v3; // rax
  std::function<ForeachPolicy(Entity&)> p_func; // [rsp+20h] [rbp-30h] BYREF

  std::function<ForeachPolicy ()(Entity &)>::function<Group::setAllMonsterKilledByGm(void)::{lambda(Entity &)#1},void,void>(
    &p_func,
    v1);
  Group::foreachEntity(this, &p_func);
  std::function<ForeachPolicy ()(Entity &)>::~function(&p_func);
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)&p_func,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/group/group.cpp",
    "setAllMonsterKilledByGm",
    5755);
  v2 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
         (common::milog::MiLogStream *const)&p_func,
         (const char (*)[11])"group_id: ");
  v3 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v2, &this->group_id_);
  common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(v3, (const char (*)[29])off_25ABF940);
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&p_func);
};

// Line 5745: range 0000000015FE4C1A-0000000015FE4D76
ForeachPolicy __cdecl Group::setAllMonsterKilledByGm(void)::{lambda(Entity &)#1}::operator()(
        const Group::setAllMonsterKilledByGm::<lambda(Entity&)> *const __closure,
        Entity *entity)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  ForeachPolicy result; // eax
  std::shared_ptr<Entity> v7; // [rsp+10h] [rbp-80h] BYREF
  char v8[112]; // [rsp+20h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 16 monster_ptr:5747";
  *(_QWORD *)(v2 + 16) = Group::setAllMonsterKilledByGm(void)::{lambda(Entity &)#1}::operator();
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  toThisPtr<Entity>((Entity *)&v7);
  std::dynamic_pointer_cast<Monster,Entity>((const std::shared_ptr<Entity> *)(v2 + 32));
  std::shared_ptr<Entity>::~shared_ptr(&v7);
  if ( std::operator!=<Monster>((const std::shared_ptr<Monster> *)(v2 + 32), 0LL) )
  {
    v5 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    Creature::subCurHpToZero(v5, CHANGE_HP_SUB_GM, 1);
  }
  std::shared_ptr<Monster>::~shared_ptr((std::shared_ptr<Monster> *const)(v2 + 32));
  result = FOREACH_CONTINUE;
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5759: range 0000000015FE4E62-0000000015FE5249
GroupEntityParam *__fastcall Group::genGroupEntityParam(
        GroupEntityParam *retstr,
        Group *const this,
        uint32_t config_id)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  uint32_t v6; // ecx
  __int64 v7; // rdx
  __int64 v8; // rdx
  std::__detail::_Node_iterator_base<std::pair<unsigned int const,GroupEntityOverrideParam>,false> __y; // [rsp+28h] [rbp-98h] BYREF
  const std::unordered_map<unsigned int,GroupEntityOverrideParam> *entity_override_param_map; // [rsp+30h] [rbp-90h]
  const GroupEntityOverrideParam *entity_override_param; // [rsp+38h] [rbp-88h]
  char v14[128]; // [rsp+40h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 14 config_id:5758 64 8 9 iter:5763";
  *(_QWORD *)(v3 + 16) = Group::genGroupEntityParam;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116352;
  *(_DWORD *)(v3 + 48) = config_id;
  GroupEntityParam::GroupEntityParam(retstr);
  v6 = *(_DWORD *)(v3 + 48);
  if ( *(_BYTE *)(((unsigned __int64)retstr >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)retstr >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(retstr);
  }
  retstr->config_id = v6;
  entity_override_param_map = &this->override_param_.entity_override_param_map;
  *(std::unordered_map<unsigned int,GroupEntityOverrideParam>::const_iterator *)(v3 + 64) = std::unordered_map<unsigned int,GroupEntityOverrideParam>::find(
                                                                                              &this->override_param_.entity_override_param_map,
                                                                                              (const std::unordered_map<unsigned int,GroupEntityOverrideParam>::key_type *)(v3 + 48));
  __y._M_cur = std::unordered_map<unsigned int,GroupEntityOverrideParam>::end(entity_override_param_map)._M_cur;
  if ( !std::__detail::operator==<std::pair<unsigned int const,GroupEntityOverrideParam>,false>(
          (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,GroupEntityOverrideParam>,false> *)(v3 + 64),
          &__y) )
  {
    entity_override_param = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,GroupEntityOverrideParam>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,GroupEntityOverrideParam>,false,false> *const)(v3 + 64))->second;
    if ( (((unsigned __int8)retstr + 12) & 7) >= *(_BYTE *)(((unsigned __int64)&retstr->pos_opt >> 3) + 0x7FFF8000)
      && *(_BYTE *)(((unsigned __int64)&retstr->pos_opt >> 3) + 0x7FFF8000) != 0
      || *(_BYTE *)(((unsigned __int64)(&retstr->pos_opt._M_payload._M_engaged + 3) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)retstr + 27) & 7) >= *(_BYTE *)(((unsigned __int64)(&retstr->pos_opt._M_payload._M_engaged
                                                                              + 3) >> 3)
                                                          + 0x7FFF8000) )
    {
      __asan_report_store_n(&retstr->pos_opt, 16LL);
    }
    if ( ((unsigned __int8)entity_override_param & 7) >= *(_BYTE *)(((unsigned __int64)entity_override_param >> 3)
                                                                  + 0x7FFF8000)
      && *(_BYTE *)(((unsigned __int64)entity_override_param >> 3) + 0x7FFF8000) != 0
      || *(_BYTE *)(((unsigned __int64)(&entity_override_param->pos_opt._M_payload._M_engaged + 3) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)entity_override_param + 15) & 7) >= *(_BYTE *)(((unsigned __int64)(&entity_override_param->pos_opt._M_payload._M_engaged
                                                                                             + 3) >> 3)
                                                                         + 0x7FFF8000) )
    {
      __asan_report_load_n(entity_override_param, 16LL);
    }
    v7 = *(_QWORD *)&entity_override_param->pos_opt._M_payload._M_payload._M_value.z;
    *(_QWORD *)retstr->pos_opt._M_payload._M_payload._M_empty.gap0 = *(_QWORD *)entity_override_param->pos_opt._M_payload._M_payload._M_empty.gap0;
    *(_QWORD *)&retstr->pos_opt._M_payload._M_payload._M_value.z = v7;
    if ( (((unsigned __int8)retstr + 28) & 7) >= *(_BYTE *)(((unsigned __int64)&retstr->rot_opt >> 3) + 0x7FFF8000)
      && *(_BYTE *)(((unsigned __int64)&retstr->rot_opt >> 3) + 0x7FFF8000) != 0
      || *(_BYTE *)(((unsigned __int64)(&retstr->rot_opt._M_payload._M_engaged + 3) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)retstr + 43) & 7) >= *(_BYTE *)(((unsigned __int64)(&retstr->rot_opt._M_payload._M_engaged
                                                                              + 3) >> 3)
                                                          + 0x7FFF8000) )
    {
      __asan_report_store_n(&retstr->rot_opt, 16LL);
    }
    if ( (((unsigned __int8)entity_override_param + 16) & 7) >= *(_BYTE *)(((unsigned __int64)&entity_override_param->rot_opt >> 3)
                                                                         + 0x7FFF8000)
      && *(_BYTE *)(((unsigned __int64)&entity_override_param->rot_opt >> 3) + 0x7FFF8000) != 0
      || *(_BYTE *)(((unsigned __int64)(&entity_override_param->rot_opt._M_payload._M_engaged + 3) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)entity_override_param + 31) & 7) >= *(_BYTE *)(((unsigned __int64)(&entity_override_param->rot_opt._M_payload._M_engaged
                                                                                             + 3) >> 3)
                                                                         + 0x7FFF8000) )
    {
      __asan_report_load_n(&entity_override_param->rot_opt, 16LL);
    }
    v8 = *(_QWORD *)&entity_override_param->rot_opt._M_payload._M_payload._M_value.z;
    *(_QWORD *)retstr->rot_opt._M_payload._M_payload._M_empty.gap0 = *(_QWORD *)entity_override_param->rot_opt._M_payload._M_payload._M_empty.gap0;
    *(_QWORD *)&retstr->rot_opt._M_payload._M_payload._M_value.z = v8;
  }
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return retstr;
};

// Line 5775: range 0000000015FE524A-0000000015FE54E5
void __cdecl Group::addAllVariableValueByOne(Group *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  _DWORD *v3; // r12
  common::milog::MiLogStream *v4; // rax
  std::unordered_map<std::string,int>::iterator __for_begin; // [rsp+10h] [rbp-100h] BYREF
  std::unordered_map<std::string,int>::iterator __for_end; // [rsp+18h] [rbp-F8h] BYREF
  std::unordered_map<std::string,int> *__for_range; // [rsp+20h] [rbp-F0h]
  const std::pair<const std::string,int> *v8; // [rsp+28h] [rbp-E8h]
  std::tuple_element<0,const std::pair<const std::string,int> >::type *key; // [rsp+30h] [rbp-E0h]
  std::tuple_element<1,const std::pair<const std::string,int> >::type *value; // [rsp+38h] [rbp-D8h]
  common::milog::MiLogStream v11; // [rsp+40h] [rbp-D0h] BYREF
  char v12[176]; // [rsp+60h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 56 17 variable_map:5777";
  *(_QWORD *)(v1 + 16) = Group::addAllVariableValueByOne;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862722] = -218103808;
  v3[536862723] = -202116109;
  std::unordered_map<std::string,int>::unordered_map(
    (std::unordered_map<std::string,int> *const)(v1 + 32),
    &this->variable_map_);
  __for_range = (std::unordered_map<std::string,int> *)(v1 + 32);
  __for_begin._M_cur = std::unordered_map<std::string,int>::begin((std::unordered_map<std::string,int> *const)(v1 + 32))._M_cur;
  __for_end._M_cur = std::unordered_map<std::string,int>::end((std::unordered_map<std::string,int> *const)(v1 + 32))._M_cur;
  while ( std::__detail::operator!=<std::pair<std::string const,int>,true>(&__for_begin, &__for_end) )
  {
    v8 = std::__detail::_Node_iterator<std::pair<std::string const,int>,false,true>::operator*(&__for_begin);
    key = std::get<0ul,std::string const,int>(v8);
    value = (std::tuple_element<1,const std::pair<const std::string,int> >::type *)std::get<1ul,std::string const,int>(v8);
    if ( (unsigned int)Group::changeVariableValue(this, key, 1) )
    {
      common::milog::MiLogStream::create(
        &v11,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/group/group.cpp",
        "addAllVariableValueByOne",
        5783);
      v4 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
             &v11,
             (const char (*)[39])"addAllVariableValueByOne failed, key: ");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v4, key);
      common::milog::MiLogStream::~MiLogStream(&v11);
      break;
    }
    std::__detail::_Node_iterator<std::pair<std::string const,int>,false,true>::operator++(&__for_begin);
  }
  std::unordered_map<std::string,int>::~unordered_map((std::unordered_map<std::string,int> *const)(v1 + 32));
  if ( v12 == (char *)v1 )
  {
    *(_DWORD *)((v1 >> 3) + 0x7FFF8000) = 0;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 5790: range 0000000015FE5A54-0000000015FE5DFE
void __fastcall Group::setEntitiesLogicState(Group *const this, const std::string *name, int32_t value)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::map<std::string,float>::mapped_type *v6; // rax
  float *v7; // rdx
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  Group::setEntitiesLogicState::<lambda(Entity&)> v10; // [rsp-20h] [rbp-100h]
  float v11; // [rsp+8h] [rbp-D8h]
  common::milog::MiLogStream v13; // [rsp+40h] [rbp-A0h] BYREF
  char v14[128]; // [rsp+60h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 10 value:5789 64 8 28 group_script_config_ptr:5795";
  *(_QWORD *)(v3 + 16) = Group::setEntitiesLogicState;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116352;
  *(_DWORD *)(v3 + 48) = value;
  v11 = (float)*(int *)(v3 + 48);
  v6 = std::map<std::string,float>::operator[](&this->sgv_map_, name);
  v7 = v6;
  if ( *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)v6 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(v6);
  }
  *v7 = v11;
  if ( *(_BYTE *)(((unsigned __int64)&this->is_started_ >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)this + 30) & 7) >= *(_BYTE *)(((unsigned __int64)&this->is_started_ >> 3) + 0x7FFF8000) )
  {
    __asan_report_load1(&this->is_started_);
  }
  if ( this->is_started_ )
  {
    *(_QWORD *)(v3 + 64) = Group::getScriptConfig(this);
    if ( *(_QWORD *)(v3 + 64) )
    {
      v10.__value = (int32_t *)(v3 + 48);
      v10.__name = name;
      v10.__group_script_config_ptr = (const GroupScriptConfig **)(v3 + 64);
      std::function<ForeachPolicy ()(Entity &)>::function<Group::setEntitiesLogicState(std::string const&,int)::{lambda(Entity &)#1},void,void>(
        (std::function<ForeachPolicy(Entity&)> *const)&v13,
        v10);
      Group::foreachEntity(this, (std::function<ForeachPolicy(Entity&)> *)&v13);
      std::function<ForeachPolicy ()(Entity &)>::~function((std::function<ForeachPolicy(Entity&)> *const)&v13);
    }
    else
    {
      common::milog::MiLogStream::create(
        &v13,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/group/group.cpp",
        "setEntitiesLogicState",
        5798);
      v8 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
             &v13,
             (const char (*)[34])"getScriptConfig fails, group_id: ");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, &this->group_id_);
      common::milog::MiLogStream::~MiLogStream(&v13);
    }
  }
  else if ( !std::map<unsigned int,std::shared_ptr<Entity>>::empty(&this->entity_map_) )
  {
    common::milog::MiLogStream::create(
      &v13,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "setEntitiesLogicState",
      5823);
    v9 = common::milog::MiLogStream::operator<<<char [53],(char *[53])0>(
           &v13,
           (const char (*)[53])"group unstarted, entity map is not empty, group_id: ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, &this->group_id_);
    common::milog::MiLogStream::~MiLogStream(&v13);
  }
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 5801: range 0000000015FE54E6-0000000015FE5A52
ForeachPolicy __cdecl Group::setEntitiesLogicState(std::string const&,int)::{lambda(Entity &)#1}::operator()(
        const Group::setEntitiesLogicState::<lambda(Entity&)> *const __closure,
        Entity *entity)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  const std::unordered_map<unsigned int,std::set<std::string>> **group_script_config_ptr; // rax
  const std::unordered_map<unsigned int,std::set<std::string>> **v6; // rax
  const std::string *name; // r14
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<std::string> >,false,false>::pointer v8; // rax
  char v9; // al
  common::milog::MiLogStream *v10; // rcx
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  Creature *p_value; // rdi
  int32_t *value; // rdx
  float v15; // xmm0_4
  common::milog::MiLogStream *v16; // rcx
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rcx
  common::milog::MiLogStream *v19; // r14
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  ForeachPolicy result; // eax
  std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<std::string> >,false> __y; // [rsp+18h] [rbp-D8h] BYREF
  common::milog::MiLogStream v24; // [rsp+20h] [rbp-D0h] BYREF
  char v25[176]; // [rsp+40h] [rbp-B0h] BYREF

  v2 = (unsigned __int64)v25;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 14 config_id:5803 64 8 9 iter:5804 96 16 17 creature_ptr:5810";
  *(_QWORD *)(v2 + 16) = Group::setEntitiesLogicState(std::string const&,int)::{lambda(Entity &)#1}::operator();
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202178560;
  *(_DWORD *)(v2 + 48) = Entity::getConfigId(entity);
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  group_script_config_ptr = (const std::unordered_map<unsigned int,std::set<std::string>> **)__closure->__group_script_config_ptr;
  if ( *(_BYTE *)(((unsigned __int64)__closure->__group_script_config_ptr >> 3) + 0x7FFF8000) )
    group_script_config_ptr = (const std::unordered_map<unsigned int,std::set<std::string>> **)__asan_report_load8();
  *(std::unordered_map<unsigned int,std::set<std::string>>::const_iterator *)(v2 + 64) = std::unordered_map<unsigned int,std::set<std::string>>::find(
                                                                                           *group_script_config_ptr + 15,
                                                                                           (const std::unordered_map<unsigned int,std::set<std::string>>::key_type *)(v2 + 48));
  v6 = (const std::unordered_map<unsigned int,std::set<std::string>> **)__closure->__group_script_config_ptr;
  if ( *(_BYTE *)(((unsigned __int64)__closure->__group_script_config_ptr >> 3) + 0x7FFF8000) )
    v6 = (const std::unordered_map<unsigned int,std::set<std::string>> **)__asan_report_load8();
  __y._M_cur = std::unordered_map<unsigned int,std::set<std::string>>::end(*v6 + 15)._M_cur;
  if ( std::__detail::operator==<std::pair<unsigned int const,std::set<std::string>>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::set<std::string> >,false> *)(v2 + 64),
         &__y) )
  {
    goto LABEL_14;
  }
  if ( *(_BYTE *)(((unsigned __int64)&__closure->__name >> 3) + 0x7FFF8000) )
    __asan_report_load8();
  name = __closure->__name;
  v8 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<std::string>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::set<std::string> >,false,false> *const)(v2 + 64));
  if ( !common::tools::MiscUtils::isContains<std::set<std::string> const,std::string>(&v8->second, name) )
LABEL_14:
    v9 = 1;
  else
    v9 = 0;
  if ( v9 )
  {
    common::milog::MiLogStream::create(
      &v24,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/group/group.cpp",
      "operator()",
      5807);
    v10 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
            &v24,
            (const char (*)[30])"entity not apply logic_state:");
    if ( *(_BYTE *)(((unsigned __int64)&__closure->__name >> 3) + 0x7FFF8000) )
      __asan_report_load8();
    v11 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v10, __closure->__name);
    v12 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v11, (const char (*)[12])" config_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v2 + 48));
    common::milog::MiLogStream::~MiLogStream(&v24);
  }
  else
  {
    toPtr<Creature,Entity>((Entity *)(v2 + 96));
    if ( std::operator!=<Creature>(0LL, (const std::shared_ptr<Creature> *)(v2 + 96)) )
    {
      p_value = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
      if ( *(_BYTE *)(((unsigned __int64)&__closure->__value >> 3) + 0x7FFF8000) )
      {
        p_value = (Creature *)&__closure->__value;
        __asan_report_load8();
      }
      value = __closure->__value;
      if ( *(_BYTE *)(((unsigned __int64)value >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)value & 7) + 3) >= *(_BYTE *)(((unsigned __int64)value >> 3) + 0x7FFF8000) )
      {
        p_value = (Creature *)__closure->__value;
        __asan_report_load4();
      }
      v15 = (float)*value;
      if ( *(_BYTE *)(((unsigned __int64)&__closure->__name >> 3) + 0x7FFF8000) )
      {
        p_value = (Creature *)&__closure->__name;
        __asan_report_load8();
      }
      if ( (unsigned int)Creature::setServerGlobalValue(p_value, (std::string *)__closure->__name, v15, 1) )
      {
        common::milog::MiLogStream::create(
          &v24,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/group/group.cpp",
          "operator()",
          5815);
        v16 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
                &v24,
                (const char (*)[35])"setServerGlobalValue fails, name: ");
        if ( *(_BYTE *)(((unsigned __int64)&__closure->__name >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v17 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v16, __closure->__name);
        v18 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v17, (const char (*)[9])" value: ");
        if ( *(_BYTE *)(((unsigned __int64)&__closure->__value >> 3) + 0x7FFF8000) )
          __asan_report_load8();
        v19 = common::milog::MiLogStream::operator<<<int,(int *)0>(v18, __closure->__value);
        v20 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
        common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v19, v20);
        common::milog::MiLogStream::~MiLogStream(&v24);
      }
    }
    std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v2 + 96));
  }
  result = FOREACH_CONTINUE;
  if ( v25 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5828: range 0000000015FE5E00-0000000015FE5F34
void __cdecl Group::onVariableValueChanged(Group *const this, const std::string *name, int32_t value)
{
  common::milog::MiLogStream *v3; // rdx
  common::milog::MiLogStream *v4; // rax
  common::milog::MiLogStream *v5; // rax
  const VariableScriptConfig *variable_script_config_ptr; // [rsp+28h] [rbp-38h]
  common::milog::MiLogStream v8; // [rsp+30h] [rbp-30h] BYREF

  variable_script_config_ptr = Group::findVariableConfig(this, name);
  if ( variable_script_config_ptr )
  {
    if ( *(_BYTE *)(((unsigned __int64)&variable_script_config_ptr->variable_type >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&variable_script_config_ptr->variable_type >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4();
    }
    if ( variable_script_config_ptr->variable_type == VARIABLE_TYPE_LOGIC_STATE )
      Group::setEntitiesLogicState(this, name, value);
  }
  else
  {
    common::milog::MiLogStream::create(
      &v8,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/group/group.cpp",
      "onVariableValueChanged",
      5832);
    v3 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
           &v8,
           (const char (*)[33])"findVariableConfig fails, name: ");
    v4 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v3, name);
    v5 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v4, (const char (*)[12])" group_id: ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, &this->group_id_);
    common::milog::MiLogStream::~MiLogStream(&v8);
  }
};

// Line 5848: range 0000000015FE5F36-0000000015FE60AF
uint32_t __cdecl Group::getToBinLastRefreshTime(const Group *const this)
{
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v2; // rax
  uint32_t refresh_id; // [rsp+1Ch] [rbp-34h]
  const GroupInfoScriptConfig *group_info_config_ptr; // [rsp+20h] [rbp-30h]
  const data::RefreshPolicyExcelConfig *config_ptr; // [rsp+28h] [rbp-28h]
  std::shared_ptr<Config> v6[2]; // [rsp+30h] [rbp-20h] BYREF

  group_info_config_ptr = Group::getInfoScriptConfig(this);
  if ( !group_info_config_ptr )
    goto LABEL_11;
  if ( *(_BYTE *)(((unsigned __int64)&group_info_config_ptr->refresh_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&group_info_config_ptr->refresh_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4();
  }
  refresh_id = group_info_config_ptr->refresh_id;
  if ( !refresh_id )
    return 0;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)v6);
  v2 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)v6);
  config_ptr = data::RefreshPolicyExcelConfigMgrBase::findRefreshPolicyExcelConfig(
                 &v2->design_config.txt_config_mgr.refresh_policy_config_mgr,
                 refresh_id);
  std::shared_ptr<Config>::~shared_ptr(v6);
  if ( config_ptr )
  {
    if ( *(_BYTE *)(((unsigned __int64)&config_ptr->type >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)config_ptr + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_ptr->type >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4();
    }
    if ( config_ptr->type == REFRESH_NONE )
      return 0;
  }
LABEL_11:
  if ( *(_BYTE *)(((unsigned __int64)&this->last_refresh_time_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->last_refresh_time_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4();
  }
  return this->last_refresh_time_;
};
