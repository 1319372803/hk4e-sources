// File: /data/jenkins/jenkins_hk4e/workspace/hk4e_3.4_dev/gameserver/src/ability/ability_comp.cpp

// Line 66: range 00000000136BCB74-00000000136BCE88
void __cdecl RefreshAbilityGuard::~RefreshAbilityGuard(RefreshAbilityGuard *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  _DWORD *v3; // r13
  const std::weak_ptr<Creature> *v4; // rax
  Creature *v5; // rax
  AbilityComp *AbilityComp; // rax
  std::set<std::weak_ptr<Creature>,std::owner_less<std::weak_ptr<Creature> >,std::allocator<std::weak_ptr<Creature> > >::iterator __for_begin; // [rsp+10h] [rbp-D0h] BYREF
  std::set<std::weak_ptr<Creature>,std::owner_less<std::weak_ptr<Creature> >,std::allocator<std::weak_ptr<Creature> > >::iterator __for_end; // [rsp+18h] [rbp-C8h] BYREF
  std::set<std::weak_ptr<Creature>,std::owner_less<std::weak_ptr<Creature> >,std::allocator<std::weak_ptr<Creature> > > *__for_range; // [rsp+20h] [rbp-C0h]
  char v10[144]; // [rsp+50h] [rbp-90h] BYREF

  v1 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(96LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 32 16 15 creature_wtr:70 64 16 15 creature_ptr:72";
  *(_QWORD *)(v1 + 16) = RefreshAbilityGuard::~RefreshAbilityGuard;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -219021312;
  v3[536862722] = -202178560;
  __for_range = &this->creature_set_;
  __for_begin._M_node = std::set<std::weak_ptr<Creature>,std::owner_less<std::weak_ptr<Creature>>,std::allocator<std::weak_ptr<Creature>>>::begin(&this->creature_set_)._M_node;
  __for_end._M_node = std::set<std::weak_ptr<Creature>,std::owner_less<std::weak_ptr<Creature>>,std::allocator<std::weak_ptr<Creature>>>::end(&this->creature_set_)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v4 = std::_Rb_tree_const_iterator<std::weak_ptr<Creature>>::operator*(&__for_begin);
    std::weak_ptr<Creature>::weak_ptr((std::weak_ptr<Creature> *const)(v1 + 32), v4);
    std::weak_ptr<Creature>::lock((const std::weak_ptr<Creature> *const)(v1 + 64));
    if ( std::operator!=<Creature>(0LL, (const std::shared_ptr<Creature> *)(v1 + 64)) )
    {
      v5 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 64));
      AbilityComp = Creature::getAbilityComp(v5);
      AbilityComp::refreshAbilityOnGuardFinish(AbilityComp);
    }
    std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v1 + 64));
    std::weak_ptr<Creature>::~weak_ptr((std::weak_ptr<Creature> *const)(v1 + 32));
    std::_Rb_tree_const_iterator<std::weak_ptr<Creature>>::operator++(&__for_begin);
  }
  std::set<std::weak_ptr<Creature>,std::owner_less<std::weak_ptr<Creature>>,std::allocator<std::weak_ptr<Creature>>>::~set(&this->creature_set_);
  if ( v10 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 87: range 00000000136BCE8A-00000000136BCF55
void __cdecl RefreshAbilityGuard::addCreature(RefreshAbilityGuard *const this, Creature *creature)
{
  AbilityComp *AbilityComp; // rax
  AbilityComp *v3; // rax
  std::shared_ptr<Creature> __r; // [rsp+10h] [rbp-30h] BYREF
  std::weak_ptr<Creature> __x; // [rsp+20h] [rbp-20h] BYREF

  AbilityComp = Creature::getAbilityComp(creature);
  if ( !AbilityComp::getIsGuarded(AbilityComp) )
  {
    v3 = Creature::getAbilityComp(creature);
    AbilityComp::setIsGuarded(v3, 1);
    toThisPtr<Creature>((Creature *)&__r);
    std::weak_ptr<Creature>::weak_ptr<Creature,void>(&__x, &__r);
    std::set<std::weak_ptr<Creature>,std::owner_less<std::weak_ptr<Creature>>,std::allocator<std::weak_ptr<Creature>>>::insert(
      &this->creature_set_,
      &__x);
    std::weak_ptr<Creature>::~weak_ptr(&__x);
    std::shared_ptr<Creature>::~shared_ptr(&__r);
  }
};

// Line 96: range 00000000136BCF56-00000000136BCF9B
void __cdecl RefreshAbilityGuard::addCreature(RefreshAbilityGuard *const this, CreaturePtr *p_creature_ptr)
{
  Creature *v2; // rdx

  if ( std::operator!=<Creature>(0LL, p_creature_ptr) )
  {
    v2 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_creature_ptr);
    RefreshAbilityGuard::addCreature(this, v2);
  }
};

// Line 104: range 00000000136BCF9C-00000000136BD07F
common::milog::MiLogStream *__cdecl operator<<(
        common::milog::MiLogStream *stream,
        const ElementDurabilityInfo *durability_info)
{
  std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v2; // rdx
  common::milog::MiLogStream *v3; // rax
  common::milog::MiLogStream *v4; // rax
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax

  common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
    stream,
    (const char (*)[34])"[ElementDurabilityInfo: modifier:");
  if ( std::operator!=<ActorModifier>(&durability_info->modifier_ptr, 0LL) )
  {
    v2 = std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)durability_info);
    common::milog::MiLogStream::operator<<<ActorModifier,(ActorModifier*)0>(stream, v2);
  }
  else
  {
    common::milog::MiLogStream::operator<<<char [5],(char *[5])0>(stream, (const char (*)[5])"null");
  }
  v3 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(stream, (const char (*)[15])" reduce_ratio:");
  v4 = common::milog::MiLogStream::operator<<<float,(float *)0>(v3, &durability_info->reduce_ratio);
  v5 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(v4, (const char (*)[23])" remaining_durability:");
  v6 = common::milog::MiLogStream::operator<<<float,(float *)0>(v5, &durability_info->remaining_durability);
  v7 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(v6, (const char (*)[21])" last_tick_time_ms_:");
  common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v7, &durability_info->last_tick_time_ms_);
  return stream;
};

// Line 122: range 00000000136BD080-00000000136BD518
int32_t __cdecl AbilityComp::init(AbilityComp *const this, ScenePtr *p_scene_ptr)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // rbx
  Creature *creature; // rsi
  Creature *v6; // rax
  unsigned __int64 v7; // rax
  Creature *v8; // rsi
  Creature *v9; // rax
  unsigned __int64 v10; // rax
  int32_t result; // eax
  std::shared_ptr<Scene> v13; // [rsp+10h] [rbp-120h] BYREF
  char v14[272]; // [rsp+20h] [rbp-110h] BYREF

  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(224LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 56 24 initial_global_value:124 128 56 31 initial_server_global_value:125";
  *(_QWORD *)(v2 + 16) = AbilityComp::init;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862722] = -234881024;
  v4[536862723] = -218959118;
  v4[536862725] = -218103808;
  v4[536862726] = -202116109;
  std::unordered_map<std::string,DynamicActorValue<std::any>>::unordered_map(
    (std::unordered_map<std::string,DynamicActorValue<std::any>> *const)(v2 + 32),
    &this->dynamic_value_map_);
  std::unordered_map<std::string,DynamicActorValue<std::any>>::unordered_map(
    (std::unordered_map<std::string,DynamicActorValue<std::any>> *const)(v2 + 128),
    &this->server_dynamic_value_map_);
  AbilityComp::clearAbilityComp(this);
  std::unordered_map<std::string,DynamicActorValue<std::any>>::operator=(
    &this->dynamic_value_map_,
    (const std::unordered_map<std::string,DynamicActorValue<std::any>> *)(v2 + 32));
  std::unordered_map<std::string,DynamicActorValue<std::any>>::operator=(
    &this->server_dynamic_value_map_,
    (const std::unordered_map<std::string,DynamicActorValue<std::any>> *)(v2 + 128));
  if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->creature_);
  creature = this->creature_;
  v6 = creature;
  if ( *(_BYTE *)(((unsigned __int64)creature >> 3) + 0x7FFF8000) )
    v6 = (Creature *)__asan_report_load8(this->creature_);
  v7 = *(_QWORD *)v6->baseclass_0 + 24LL;
  if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
    v7 = __asan_report_load8(v7);
  if ( (*(unsigned int (__fastcall **)(Creature *))v7)(creature) == 1 )
  {
    std::shared_ptr<Scene>::shared_ptr(&v13, p_scene_ptr);
    AbilityComp::initTargetAbility(this, &v13);
    std::shared_ptr<Scene>::~shared_ptr(&v13);
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    v8 = this->creature_;
    v9 = v8;
    if ( *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) )
      v9 = (Creature *)__asan_report_load8(this->creature_);
    v10 = *(_QWORD *)v9->baseclass_0 + 24LL;
    if ( *(_BYTE *)((v10 >> 3) + 0x7FFF8000) )
      v10 = __asan_report_load8(v10);
    if ( (*(unsigned int (__fastcall **)(Creature *))v10)(v8) == 9 )
    {
      std::shared_ptr<Scene>::shared_ptr(&v13, p_scene_ptr);
      AbilityComp::initTeamEntityAbility(this, &v13);
    }
    else
    {
      std::shared_ptr<Scene>::shared_ptr(&v13, p_scene_ptr);
      AbilityComp::initAllAbilities(this, &v13);
    }
    std::shared_ptr<Scene>::~shared_ptr(&v13);
  }
  AbilityComp::initAbilityConfigHashValue(this);
  if ( *(char *)(((unsigned __int64)&this->is_init_finish_ >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->is_init_finish_);
  this->is_init_finish_ = 1;
  std::unordered_map<std::string,DynamicActorValue<std::any>>::~unordered_map((std::unordered_map<std::string,DynamicActorValue<std::any>> *const)(v2 + 128));
  std::unordered_map<std::string,DynamicActorValue<std::any>>::~unordered_map((std::unordered_map<std::string,DynamicActorValue<std::any>> *const)(v2 + 32));
  result = 0;
  if ( v14 == (char *)v2 )
  {
    *(_DWORD *)((v2 >> 3) + 0x7FFF8000) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8014) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 148: range 00000000136BD51A-00000000136BD793
bool __cdecl AbilityComp::isContainsAbilityInWhitelist(const AbilityComp *const this, std::string *ability_name_str)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  bool result; // al
  unsigned int *v6; // rax
  uint32_t *v7; // rdx
  std::string *p_second; // rdx
  std::unordered_map<int,std::string>::key_type __x; // [rsp+10h] [rbp-A0h] BYREF
  uint32_t ability_name_hash; // [rsp+14h] [rbp-9Ch]
  std::vector<unsigned int>::const_iterator __for_begin; // [rsp+18h] [rbp-98h] BYREF
  std::vector<unsigned int>::const_iterator __for_end; // [rsp+20h] [rbp-90h] BYREF
  std::__detail::_Node_iterator_base<std::pair<int const,std::string >,false> __y; // [rsp+28h] [rbp-88h] BYREF
  const SecurityConfig *security_config; // [rsp+30h] [rbp-80h]
  const std::vector<unsigned int> *__for_range; // [rsp+38h] [rbp-78h]
  std::shared_ptr<Config> v16; // [rsp+40h] [rbp-70h] BYREF
  char v17[96]; // [rsp+50h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 8 8 iter:156";
  *(_QWORD *)(v2 + 16) = AbilityComp::isContainsAbilityInWhitelist;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116352;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v16);
  security_config = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v16)->security_config;
  std::shared_ptr<Config>::~shared_ptr(&v16);
  if ( std::unordered_map<int,std::string>::empty(&security_config->ability_config_hash_whitelist_map) )
  {
    result = 0;
  }
  else
  {
    __for_range = &this->initial_ability_name_vec_;
    __for_begin._M_current = std::vector<unsigned int>::begin(&this->initial_ability_name_vec_)._M_current;
    __for_end._M_current = std::vector<unsigned int>::end(&this->initial_ability_name_vec_)._M_current;
    while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(&__for_begin, &__for_end) )
    {
      v6 = (unsigned int *)__gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*(&__for_begin);
      v7 = v6;
      if ( *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v6 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v6);
      }
      ability_name_hash = *v7;
      __x = ability_name_hash;
      *(std::unordered_map<int,std::string>::const_iterator *)(v2 + 32) = std::unordered_map<int,std::string>::find(
                                                                            &security_config->ability_config_hash_whitelist_map,
                                                                            &__x);
      __y._M_cur = std::unordered_map<int,std::string>::end(&security_config->ability_config_hash_whitelist_map)._M_cur;
      if ( !std::__detail::operator==<std::pair<int const,std::string>,false>(
              (const std::__detail::_Node_iterator_base<std::pair<int const,std::string >,false> *)(v2 + 32),
              &__y) )
      {
        p_second = &std::__detail::_Node_const_iterator<std::pair<int const,std::string>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<int const,std::string >,false,false> *const)(v2 + 32))->second;
        std::string::operator=(ability_name_str, p_second);
        result = 1;
        goto LABEL_14;
      }
      __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++(&__for_begin);
    }
    result = 0;
  }
LABEL_14:
  if ( v17 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 169: range 00000000136BD794-00000000136BDA35
void __cdecl AbilityComp::initAbilityConfigHashValue(AbilityComp *const this)
{
  JsonConfigMgr *p_json_config_mgr; // rbx
  std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v2; // rax
  int32_t OverrideNameHash; // r12d
  std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v4; // rax
  int32_t AbilityNameHash; // eax
  uint64_t CombinedHash; // rax
  std::pair<int,int> *p_initial_ability_hash_pair; // rcx
  int *p_second; // rcx
  std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  int __x; // [rsp+10h] [rbp-70h] BYREF
  int __y; // [rsp+14h] [rbp-6Ch] BYREF
  std::map<unsigned int,std::shared_ptr<ActorAbility>>::iterator __for_begin; // [rsp+18h] [rbp-68h] BYREF
  std::map<unsigned int,std::shared_ptr<ActorAbility>>::iterator __for_end; // [rsp+20h] [rbp-60h] BYREF
  std::map<unsigned int,std::shared_ptr<ActorAbility>> *__for_range; // [rsp+28h] [rbp-58h]
  const std::pair<unsigned int const,std::shared_ptr<ActorAbility> > *v15; // [rsp+30h] [rbp-50h]
  std::tuple_element<0,const std::pair<unsigned int const,std::shared_ptr<ActorAbility> > >::type *_; // [rsp+38h] [rbp-48h]
  std::tuple_element<1,const std::pair<unsigned int const,std::shared_ptr<ActorAbility> > >::type *ability_ptr; // [rsp+40h] [rbp-40h]
  std::tuple_element<0,std::pair<int,int> >::type *prev_hash_code; // [rsp+48h] [rbp-38h]
  std::tuple_element<1,std::pair<int,int> >::type *hash_code; // [rsp+50h] [rbp-30h]
  std::pair<int,int> __p; // [rsp+58h] [rbp-28h] BYREF
  std::shared_ptr<Config> v21[2]; // [rsp+60h] [rbp-20h] BYREF

  __y = 0;
  __x = 0;
  __p = std::make_pair<int,int>(&__x, &__y);
  std::pair<int,int>::operator=(&this->initial_ability_hash_pair_, &__p);
  std::vector<unsigned int>::clear(&this->initial_ability_name_vec_);
  __for_range = &this->applied_ability_map_;
  __for_begin._M_node = std::map<unsigned int,std::shared_ptr<ActorAbility>>::begin(&this->applied_ability_map_)._M_node;
  __for_end._M_node = std::map<unsigned int,std::shared_ptr<ActorAbility>>::end(__for_range)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v15 = std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<ActorAbility>>>::operator*(&__for_begin);
    _ = std::get<0ul,unsigned int const,std::shared_ptr<ActorAbility>>(v15);
    ability_ptr = (std::tuple_element<1,const std::pair<unsigned int const,std::shared_ptr<ActorAbility> > >::type *)std::get<1ul,unsigned int const,std::shared_ptr<ActorAbility>>(v15);
    if ( std::operator!=<ActorAbility>(0LL, ability_ptr) )
    {
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)v21);
      p_json_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)v21)->design_config.json_config_mgr;
      v2 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)ability_ptr);
      OverrideNameHash = ActorAbility::getOverrideNameHash(v2);
      v4 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)ability_ptr);
      AbilityNameHash = ActorAbility::getAbilityNameHash(v4);
      CombinedHash = getCombinedHash(AbilityNameHash, OverrideNameHash);
      __p = JsonConfigMgr::findAbilityConfigHash(p_json_config_mgr, CombinedHash);
      std::shared_ptr<Config>::~shared_ptr(v21);
      prev_hash_code = std::get<0ul,int,int>(&__p);
      hash_code = std::get<1ul,int,int>(&__p);
      p_initial_ability_hash_pair = &this->initial_ability_hash_pair_;
      if ( *(_BYTE *)(((unsigned __int64)prev_hash_code >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)prev_hash_code & 7) + 3) >= *(_BYTE *)(((unsigned __int64)prev_hash_code >> 3)
                                                                         + 0x7FFF8000) )
      {
        __asan_report_load4(prev_hash_code);
      }
      common::tools::HashUtils::appendHash(*prev_hash_code, (int32_t *)p_initial_ability_hash_pair);
      p_second = &this->initial_ability_hash_pair_.second;
      if ( *(_BYTE *)(((unsigned __int64)hash_code >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)hash_code & 7) + 3) >= *(_BYTE *)(((unsigned __int64)hash_code >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(hash_code);
      }
      common::tools::HashUtils::appendHash(*hash_code, p_second);
      v9 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)ability_ptr);
      __y = ActorAbility::getAbilityNameHash(v9);
      std::vector<unsigned int>::push_back(
        &this->initial_ability_name_vec_,
        (std::vector<unsigned int>::value_type *)&__y);
    }
    std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<ActorAbility>>>::operator++(&__for_begin);
  }
};

// Line 187: range 00000000136BDA36-00000000136BDBB8
void __cdecl AbilityComp::clearAbilityComp(AbilityComp *const this)
{
  int __x; // [rsp+10h] [rbp-10h] BYREF
  int __y; // [rsp+14h] [rbp-Ch] BYREF
  std::pair<int,int> __p; // [rsp+18h] [rbp-8h] BYREF

  AbilityComp::clearAllModifier(this);
  if ( *(_BYTE *)(((unsigned __int64)&this->is_need_refresh_ >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)this + 19) & 7) >= *(_BYTE *)(((unsigned __int64)&this->is_need_refresh_ >> 3) + 0x7FFF8000) )
  {
    __asan_report_store1(&this->is_need_refresh_);
  }
  this->is_need_refresh_ = 0;
  std::map<unsigned int,std::shared_ptr<ActorAbility>>::clear(&this->applied_ability_map_);
  std::unordered_map<data::AbilityState,unsigned int>::clear(&this->state_count_map_);
  std::unordered_set<unsigned int>::clear(&this->ability_name_hash_set_);
  if ( *(char *)(((unsigned __int64)&this->is_init_finish_ >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->is_init_finish_);
  this->is_init_finish_ = 0;
  __y = 0;
  __x = 0;
  __p = std::make_pair<int,int>(&__x, &__y);
  std::pair<int,int>::operator=(&this->initial_ability_hash_pair_, &__p);
  std::vector<unsigned int>::clear(&this->initial_ability_name_vec_);
  std::list<unsigned int>::clear(&this->target_ability_id_list_);
  std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>>::clear(&this->target_ability_id_map_);
  std::unordered_map<unsigned long,unsigned int>::clear(&this->target_ability_name_map_);
  std::unordered_map<unsigned int,std::unordered_map<unsigned int,std::list<std::weak_ptr<BaseTalentMixin>>>>::clear(&this->target_ability_special_map_);
  std::unordered_map<unsigned long,std::weak_ptr<BaseAbilityMixin>>::clear(&this->after_being_hit_mixin_wtr_map_);
  std::map<MixinRegisterFuncType,unsigned int>::clear(&this->mixin_register_func_count_map_);
};

// Line 207: range 00000000136BDBBA-00000000136BE926
int32_t __cdecl AbilityComp::clearAllModifier(AbilityComp *const this)
{
  __m128i v1; // xmm0
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  const std::shared_ptr<ActorModifier> *v5; // rax
  std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  std::vector<std::shared_ptr<BaseAbilityMixin>> *MixinVec; // rdx
  ActorModifier *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rcx
  ActorAbility *v14; // rax
  std::vector<std::shared_ptr<ActorModifier>> *OwnedModifiers; // rax
  FightPropComp *FightPropComp; // rax
  PileBoolValue *IsInvincible; // rax
  common::milog::MiLogStream *v18; // r14
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // r14
  Creature *creature; // rsi
  unsigned __int64 *v22; // rax
  unsigned __int64 v23; // rax
  common::milog::MiLogStream *v24; // rax
  FightPropComp *v25; // rax
  PileBoolValue *IsLockHp; // rax
  common::milog::MiLogStream *v27; // r14
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // r14
  Creature *v30; // rsi
  unsigned __int64 *v31; // rax
  unsigned __int64 v32; // rax
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // rcx
  common::milog::MiLogStream *v35; // rax
  common::milog::MiLogStream *v36; // rcx
  int32_t result; // eax
  __int16 v38; // [rsp+16h] [rbp-19Ah] BYREF
  std::vector<std::shared_ptr<ActorModifier>>::iterator __for_begin_0; // [rsp+18h] [rbp-198h] BYREF
  std::vector<std::shared_ptr<ActorModifier>>::iterator __for_end_0; // [rsp+20h] [rbp-190h] BYREF
  std::initializer_list<bool>::const_iterator __for_begin; // [rsp+28h] [rbp-188h]
  std::initializer_list<bool> *__for_range; // [rsp+30h] [rbp-180h]
  std::initializer_list<bool>::const_iterator __for_end; // [rsp+38h] [rbp-178h]
  std::vector<std::shared_ptr<ActorModifier>> *modifier_vec; // [rsp+40h] [rbp-170h]
  std::vector<std::shared_ptr<ActorModifier>> *__for_range_0; // [rsp+48h] [rbp-168h]
  std::unordered_map<std::string,PileValue> *__for_range_1; // [rsp+50h] [rbp-160h]
  std::map<unsigned int,std::shared_ptr<ActorAbility>> *__for_range_2; // [rsp+58h] [rbp-158h]
  std::pair<unsigned int const,std::shared_ptr<ActorAbility> > *__in; // [rsp+60h] [rbp-150h]
  std::tuple_element<0,std::pair<unsigned int const,std::shared_ptr<ActorAbility> > >::type *ability_id; // [rsp+68h] [rbp-148h]
  std::tuple_element<1,std::pair<unsigned int const,std::shared_ptr<ActorAbility> > >::type *ability_ptr; // [rsp+70h] [rbp-140h]
  const std::pair<const std::string,PileValue> *v51; // [rsp+78h] [rbp-138h]
  std::tuple_element<0,const std::pair<const std::string,PileValue> >::type *prop_key; // [rsp+80h] [rbp-130h]
  std::tuple_element<1,const std::pair<const std::string,PileValue> >::type *pile_value; // [rsp+88h] [rbp-128h]
  std::initializer_list<bool> v54; // [rsp+90h] [rbp-120h] BYREF
  common::milog::MiLogStream v55; // [rsp+A0h] [rbp-110h] BYREF
  common::milog::MiLogStream v56; // [rsp+C0h] [rbp-F0h] BYREF
  char v57[208]; // [rsp+E0h] [rbp-D0h] BYREF

  v2 = (unsigned __int64)v57;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(160LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 32 4 9 value:229 48 16 16 modifier_ptr:215 80 48 20 fight_prop_guard:208";
  *(_QWORD *)(v2 + 16) = AbilityComp::clearAllModifier;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61956;
  v4[536862722] = 62194;
  v4[536862724] = -202116109;
  FightPropGuard::FightPropGuard((FightPropGuard *const)(v2 + 80));
  if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->creature_);
  FightPropGuard::addCreature((FightPropGuard *const)(v2 + 80), this->creature_, 1);
  v38 = 1;
  v54._M_len = 2LL;
  v54._M_array = (std::initializer_list<bool>::iterator)&v38;
  __for_range = &v54;
  __for_begin = std::initializer_list<bool>::begin(&v54);
  __for_end = std::initializer_list<bool>::end(__for_range);
  while ( __for_begin != __for_end )
  {
    if ( *(_BYTE *)(((unsigned __int64)__for_begin >> 3) + 0x7FFF8000) != 0
      && ((unsigned __int8)__for_begin & 7) >= *(_BYTE *)(((unsigned __int64)__for_begin >> 3) + 0x7FFF8000) )
    {
      __asan_report_load1(__for_begin);
    }
    modifier_vec = AbilityComp::getAppliedModifierVec(this, *__for_begin);
    __for_range_0 = modifier_vec;
    __for_begin_0._M_current = std::vector<std::shared_ptr<ActorModifier>>::begin(modifier_vec)._M_current;
    __for_end_0._M_current = std::vector<std::shared_ptr<ActorModifier>>::end(__for_range_0)._M_current;
    while ( __gnu_cxx::operator!=<std::shared_ptr<ActorModifier> *,std::vector<std::shared_ptr<ActorModifier>>>(
              &__for_begin_0,
              &__for_end_0) )
    {
      v5 = __gnu_cxx::__normal_iterator<std::shared_ptr<ActorModifier> *,std::vector<std::shared_ptr<ActorModifier>>>::operator*(&__for_begin_0);
      std::shared_ptr<ActorModifier>::shared_ptr((std::shared_ptr<ActorModifier> *const)(v2 + 48), v5);
      if ( std::operator!=<ActorModifier>(0LL, (const std::shared_ptr<ActorModifier> *)(v2 + 48)) )
      {
        v6 = std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 48));
        MixinVec = BaseActorActionContext::getMixinVec(v6);
        AbilityComp::removeMixins(this, MixinVec);
        v8 = std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 48));
        ActorModifier::detach(v8);
      }
      std::shared_ptr<ActorModifier>::~shared_ptr((std::shared_ptr<ActorModifier> *const)(v2 + 48));
      __gnu_cxx::__normal_iterator<std::shared_ptr<ActorModifier> *,std::vector<std::shared_ptr<ActorModifier>>>::operator++(&__for_begin_0);
    }
    std::vector<std::shared_ptr<ActorModifier>>::clear(modifier_vec);
    ++__for_begin;
  }
  __for_range_1 = &this->property_map_;
  __for_begin_0._M_current = (std::shared_ptr<ActorModifier> *)std::unordered_map<std::string,PileValue>::begin(&this->property_map_)._M_cur;
  __for_end_0._M_current = (std::shared_ptr<ActorModifier> *)std::unordered_map<std::string,PileValue>::end(__for_range_1)._M_cur;
  while ( std::__detail::operator!=<std::pair<std::string const,PileValue>,true>(
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,PileValue>,true> *)&__for_begin_0,
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,PileValue>,true> *)&__for_end_0) )
  {
    v51 = std::__detail::_Node_iterator<std::pair<std::string const,PileValue>,false,true>::operator*((const std::__detail::_Node_iterator<std::pair<const std::string,PileValue>,false,true> *const)&__for_begin_0);
    prop_key = std::get<0ul,std::string const,PileValue>(v51);
    pile_value = (std::tuple_element<1,const std::pair<const std::string,PileValue> >::type *)std::get<1ul,std::string const,PileValue>(v51);
    *(float *)v1.m128i_i32 = PileValue::getValue(pile_value);
    *(_DWORD *)(v2 + 32) = _mm_cvtsi128_si32(v1);
    if ( std::fabs(*(float *)(v2 + 32)) > 0.001 )
    {
      common::milog::MiLogStream::create(
        &v56,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/ability/ability_comp.cpp",
        "clearAllModifier",
        232);
      v9 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(&v56, (const char (*)[10])"prop_key:");
      v10 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v9, prop_key);
      v11 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v10, (const char (*)[8])" value:");
      v12 = common::milog::MiLogStream::operator<<<float,(float *)0>(v11, (const float *)(v2 + 32));
      v13 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v12, (const char (*)[11])" creature:");
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v13, this->creature_);
      common::milog::MiLogStream::~MiLogStream(&v56);
    }
    v1 = (__m128i)_mm_xor_ps((__m128)*(unsigned int *)(v2 + 32), (__m128)0x80000000);
    AbilityComp::modifyCorrespondingFightProp(this, prop_key, *(float *)v1.m128i_i32);
    std::__detail::_Node_iterator<std::pair<std::string const,PileValue>,false,true>::operator++((std::__detail::_Node_iterator<std::pair<const std::string,PileValue>,false,true> *const)&__for_begin_0);
  }
  std::unordered_map<std::string,PileValue>::clear(&this->property_map_);
  std::unordered_map<std::string,DynamicActorValue<std::any>>::clear(&this->dynamic_value_map_);
  std::unordered_map<std::string,DynamicActorValue<std::any>>::clear(&this->server_dynamic_value_map_);
  std::unordered_map<data::ElementType,std::vector<std::shared_ptr<ActorModifier>>>::clear(&this->element_modifier_map_);
  std::vector<ElementDurabilityInfo>::clear(&this->modifier_durability_vec_);
  __for_range_2 = &this->applied_ability_map_;
  __for_begin_0._M_current = (std::shared_ptr<ActorModifier> *)std::map<unsigned int,std::shared_ptr<ActorAbility>>::begin(&this->applied_ability_map_)._M_node;
  __for_end_0._M_current = (std::shared_ptr<ActorModifier> *)std::map<unsigned int,std::shared_ptr<ActorAbility>>::end(__for_range_2)._M_node;
  while ( std::operator!=(
            (const std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<ActorAbility> > >::_Self *)&__for_begin_0,
            (const std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<ActorAbility> > >::_Self *)&__for_end_0) )
  {
    __in = std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<ActorAbility>>>::operator*((const std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<ActorAbility> > > *const)&__for_begin_0);
    ability_id = std::get<0ul,unsigned int const,std::shared_ptr<ActorAbility>>(__in);
    ability_ptr = std::get<1ul,unsigned int const,std::shared_ptr<ActorAbility>>(__in);
    if ( std::operator!=<ActorAbility>(0LL, ability_ptr) )
    {
      v14 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)ability_ptr);
      OwnedModifiers = ActorAbility::getOwnedModifiers(v14);
      std::vector<std::shared_ptr<ActorModifier>>::clear(OwnedModifiers);
    }
    std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<ActorAbility>>>::operator++((std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<ActorAbility> > > *const)&__for_begin_0);
  }
  if ( AbilityComp::containsState(this, Invincible) )
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    FightPropComp = Creature::getFightPropComp(this->creature_);
    IsInvincible = FightPropComp::getIsInvincible(FightPropComp);
    PileBoolValue::set(IsInvincible, 1, 0);
    common::milog::MiLogStream::create(
      &v55,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/ability/ability_comp.cpp",
      "clearAllModifier",
      253);
    v18 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
            &v55,
            (const char (*)[21])"creature runtime_id:");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    *(_DWORD *)(v2 + 32) = Entity::getEntityId((const Entity *const)this->creature_);
    v19 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, (const unsigned int *)(v2 + 32));
    v20 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v19, (const char (*)[2])" ");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    creature = this->creature_;
    v22 = (unsigned __int64 *)creature;
    if ( *(_BYTE *)(((unsigned __int64)creature >> 3) + 0x7FFF8000) )
      v22 = (unsigned __int64 *)__asan_report_load8(this->creature_);
    v23 = *v22;
    if ( *(_BYTE *)((v23 >> 3) + 0x7FFF8000) )
      v23 = __asan_report_load8(v23);
    (*(void (__fastcall **)(common::milog::MiLogStream *, Creature *))v23)(&v56, creature);
    v24 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v20, (const std::string *)&v56);
    common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(v24, (const char (*)[25])" remove invincible state");
    std::string::~string(&v56);
    common::milog::MiLogStream::~MiLogStream(&v55);
  }
  if ( AbilityComp::containsState(this, LockHP) )
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    v25 = Creature::getFightPropComp(this->creature_);
    IsLockHp = FightPropComp::getIsLockHp(v25);
    PileBoolValue::set(IsLockHp, 0, 0);
    common::milog::MiLogStream::create(
      &v55,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/ability/ability_comp.cpp",
      "clearAllModifier",
      258);
    v27 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
            &v55,
            (const char (*)[21])"creature runtime_id:");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    *(_DWORD *)(v2 + 32) = Entity::getEntityId((const Entity *const)this->creature_);
    v28 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v27, (const unsigned int *)(v2 + 32));
    v29 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v28, (const char (*)[2])" ");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    v30 = this->creature_;
    v31 = (unsigned __int64 *)v30;
    if ( *(_BYTE *)(((unsigned __int64)v30 >> 3) + 0x7FFF8000) )
      v31 = (unsigned __int64 *)__asan_report_load8(this->creature_);
    v32 = *v31;
    if ( *(_BYTE *)((v32 >> 3) + 0x7FFF8000) )
      v32 = __asan_report_load8(v32);
    (*(void (__fastcall **)(common::milog::MiLogStream *, Creature *))v32)(&v56, v30);
    v33 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v29, (const std::string *)&v56);
    common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(v33, (const char (*)[21])" remove lockHP state");
    std::string::~string(&v56);
    common::milog::MiLogStream::~MiLogStream(&v55);
  }
  if ( *(_BYTE *)(((unsigned __int64)&this->ability_state_ >> 3) + 0x7FFF8000) )
    __asan_report_store8(&this->ability_state_);
  this->ability_state_ = 0LL;
  common::milog::MiLogStream::create(
    &v56,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/ability/ability_comp.cpp",
    "clearAllModifier",
    262);
  v34 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(&v56, (const char (*)[19])"is_client_inited_:");
  if ( *(_BYTE *)(((unsigned __int64)&this->is_client_inited_ >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)this + 17) & 7) >= *(_BYTE *)(((unsigned __int64)&this->is_client_inited_ >> 3) + 0x7FFF8000) )
  {
    __asan_report_load1(&this->is_client_inited_);
  }
  v35 = common::milog::MiLogStream::operator<<(v34, this->is_client_inited_);
  v36 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v35, (const char (*)[11])" creature:");
  if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->creature_);
  common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v36, this->creature_);
  common::milog::MiLogStream::~MiLogStream(&v56);
  if ( *(_BYTE *)(((unsigned __int64)&this->is_client_inited_ >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)this + 17) & 7) >= *(_BYTE *)(((unsigned __int64)&this->is_client_inited_ >> 3) + 0x7FFF8000) )
  {
    __asan_report_store1(&this->is_client_inited_);
  }
  this->is_client_inited_ = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->last_dash_modifier_applied_player_time_ms_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->last_dash_modifier_applied_player_time_ms_ >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_store4(&this->last_dash_modifier_applied_player_time_ms_);
  }
  this->last_dash_modifier_applied_player_time_ms_ = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->dash_modifier_count_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->dash_modifier_count_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->dash_modifier_count_);
  }
  this->dash_modifier_count_ = 0;
  FightPropGuard::~FightPropGuard((FightPropGuard *const)(v2 + 80));
  result = 0;
  if ( v57 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 272: range 00000000136BE928-00000000136C032E
void __cdecl AbilityComp::print(AbilityComp *const this, PlayerPtr *p_player_ptr)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  Creature *creature; // rsi
  unsigned __int64 *v6; // rax
  unsigned __int64 v7; // rax
  __int64 v8; // rax
  __int64 v9; // r14
  std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  uint32_t AbilityId; // eax
  __int64 v12; // rax
  __int64 v13; // r14
  std::__shared_ptr_access<ConfigAbilityImpl,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  __int64 v15; // rax
  __int64 v16; // rcx
  __int64 v17; // rax
  __int64 v18; // r14
  unsigned __int64 v19; // rax
  __int64 v20; // rax
  const char *v21; // rax
  __int64 v22; // rax
  __int64 v23; // rcx
  __int64 v24; // rax
  __int64 v25; // rax
  __int64 v26; // rax
  __int64 v27; // rax
  __int64 v28; // rax
  __int64 v29; // r14
  __int64 v30; // rax
  __int64 v31; // rax
  __int64 v32; // rax
  __int64 v33; // rax
  __int64 v34; // rax
  __int64 v35; // r14
  float v36; // xmm0_4
  __int64 v37; // rax
  __int64 v38; // rax
  __int64 v39; // rax
  __int64 v40; // rax
  __int64 v41; // rax
  __int64 v42; // r14
  unsigned int v43; // eax
  __int64 v44; // rax
  std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v45; // rax
  JsonConfigMgr *p_json_config_mgr; // rcx
  __int64 v47; // rax
  __int64 v48; // rax
  __int64 v49; // rax
  __int64 v50; // rax
  __int64 v51; // r14
  __int64 v52; // rax
  __int64 v53; // rax
  __int64 v54; // rax
  __int64 v55; // rax
  __int64 v56; // rax
  __int64 v57; // r14
  float v58; // xmm0_4
  __int64 v59; // rax
  __int64 v60; // r14
  ActorAbility *v61; // rax
  float ServerOverrideParam; // xmm0_4
  __int64 v63; // rax
  __int64 v64; // rax
  __int64 v65; // rax
  __int64 v66; // rax
  __int64 v67; // rax
  __int64 v68; // r14
  unsigned int v69; // eax
  __int64 v70; // rax
  std::vector<std::shared_ptr<ActorModifier>>::size_type v71; // r14
  const std::shared_ptr<ActorModifier> *v72; // rax
  __int64 v73; // r14
  std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v74; // rax
  uint32_t ModifierId; // eax
  __int64 v76; // rax
  __int64 v77; // r14
  std::__shared_ptr_access<ConfigAbilityModifierImpl,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v78; // rdx
  int32_t *p_config_local_id; // rax
  __int64 v80; // rax
  __int64 v81; // r14
  std::__shared_ptr_access<ConfigAbilityModifierImpl,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v82; // rax
  __int64 v83; // rax
  __int64 v84; // r14
  std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v85; // rax
  uint32_t v86; // eax
  __int64 v87; // rax
  __int64 v88; // r14
  std::__shared_ptr_access<ConfigAbilityImpl,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v89; // rax
  __int64 v90; // rax
  __int64 v91; // rax
  __int64 v92; // rax
  __int64 v93; // r14
  float v94; // xmm0_4
  __int64 v95; // rax
  __int64 v96; // rax
  __int64 v97; // rax
  __int64 v98; // r14
  float v99; // xmm0_4
  __int64 v100; // rax
  __int64 v101; // rax
  __int64 v102; // rax
  __int64 v103; // r14
  float v104; // xmm0_4
  __int64 v105; // rax
  FightPropComp *FightPropComp; // rax
  Creature *v107; // rsi
  unsigned __int64 *v108; // rax
  unsigned __int64 v109; // rax
  __int64 v110; // rax
  common::milog::MiLogStream *v111; // rax
  Player *v112; // rax
  std::allocator<char> __a; // [rsp+14h] [rbp-49Ch] BYREF
  bool is_server_modifier; // [rsp+15h] [rbp-49Bh]
  __int16 v116; // [rsp+16h] [rbp-49Ah] BYREF
  int32_t index; // [rsp+18h] [rbp-498h]
  uint32_t i; // [rsp+1Ch] [rbp-494h]
  std::map<unsigned int,std::shared_ptr<ActorAbility>>::iterator __for_begin; // [rsp+20h] [rbp-490h] BYREF
  std::map<unsigned int,std::shared_ptr<ActorAbility>>::iterator __for_end; // [rsp+28h] [rbp-488h] BYREF
  std::unordered_map<unsigned int,std::shared_ptr<data::BaseActionContainer>>::iterator __for_begin_0; // [rsp+30h] [rbp-480h] BYREF
  std::unordered_map<unsigned int,std::shared_ptr<data::BaseActionContainer>>::iterator __for_end_0; // [rsp+38h] [rbp-478h] BYREF
  std::initializer_list<bool>::const_iterator __for_begin_1; // [rsp+40h] [rbp-470h]
  std::map<unsigned int,std::shared_ptr<ActorAbility>> *__for_range; // [rsp+48h] [rbp-468h]
  std::initializer_list<bool> *__for_range_3; // [rsp+50h] [rbp-460h]
  std::initializer_list<bool>::const_iterator __for_end_1; // [rsp+58h] [rbp-458h]
  std::vector<std::shared_ptr<ActorModifier>> *modifier_vec; // [rsp+60h] [rbp-450h]
  std::unordered_map<std::string,DynamicActorValue<std::any>> *__for_range_4; // [rsp+68h] [rbp-448h]
  std::unordered_map<std::string,DynamicActorValue<std::any>> *__for_range_5; // [rsp+70h] [rbp-440h]
  std::unordered_map<std::string,PileValue> *__for_range_6; // [rsp+78h] [rbp-438h]
  std::vector<std::string> *__for_range_7; // [rsp+80h] [rbp-430h]
  std::string *log; // [rsp+88h] [rbp-428h]
  std::pair<const std::string,PileValue> *v133; // [rsp+90h] [rbp-420h]
  std::tuple_element<0,std::pair<const std::string,PileValue> >::type *key_3; // [rsp+98h] [rbp-418h]
  std::tuple_element<1,std::pair<const std::string,PileValue> >::type *value_2; // [rsp+A0h] [rbp-410h]
  std::pair<const std::string,DynamicActorValue<std::any> > *v136; // [rsp+A8h] [rbp-408h]
  std::tuple_element<0,std::pair<const std::string,DynamicActorValue<std::any> > >::type *key_2; // [rsp+B0h] [rbp-400h]
  std::tuple_element<1,std::pair<const std::string,DynamicActorValue<std::any> > >::type *value_1; // [rsp+B8h] [rbp-3F8h]
  std::pair<const std::string,DynamicActorValue<std::any> > *v139; // [rsp+C0h] [rbp-3F0h]
  std::tuple_element<0,std::pair<const std::string,DynamicActorValue<std::any> > >::type *key_1; // [rsp+C8h] [rbp-3E8h]
  std::tuple_element<1,std::pair<const std::string,DynamicActorValue<std::any> > >::type *value_0; // [rsp+D0h] [rbp-3E0h]
  std::pair<unsigned int const,std::shared_ptr<ActorAbility> > *__in; // [rsp+D8h] [rbp-3D8h]
  std::tuple_element<0,std::pair<unsigned int const,std::shared_ptr<ActorAbility> > >::type *ability_id; // [rsp+E0h] [rbp-3D0h]
  std::tuple_element<1,std::pair<unsigned int const,std::shared_ptr<ActorAbility> > >::type *ability_ptr; // [rsp+E8h] [rbp-3C8h]
  std::unordered_map<unsigned int,std::shared_ptr<data::BaseActionContainer>> *__for_range_0; // [rsp+F0h] [rbp-3C0h]
  std::unordered_map<std::string,data::DynamicArgument> *__for_range_1; // [rsp+F8h] [rbp-3B8h]
  const std::map<int,std::any> *override_map; // [rsp+100h] [rbp-3B0h]
  const std::map<int,std::any> *__for_range_2; // [rsp+108h] [rbp-3A8h]
  const std::pair<int const,std::any> *v149; // [rsp+110h] [rbp-3A0h]
  std::tuple_element<0,const std::pair<int const,std::any> >::type *key_hash; // [rsp+118h] [rbp-398h]
  std::tuple_element<1,const std::pair<int const,std::any> >::type *value; // [rsp+120h] [rbp-390h]
  const std::type_info *type_0; // [rsp+128h] [rbp-388h]
  const std::string *key_0; // [rsp+130h] [rbp-380h]
  std::pair<const std::string,data::DynamicArgument> *v154; // [rsp+138h] [rbp-378h]
  std::tuple_element<0,std::pair<const std::string,data::DynamicArgument> >::type *key; // [rsp+140h] [rbp-370h]
  std::tuple_element<1,std::pair<const std::string,data::DynamicArgument> >::type *ability_special; // [rsp+148h] [rbp-368h]
  const std::type_info *type; // [rsp+150h] [rbp-360h]
  std::pair<unsigned int const,std::shared_ptr<data::BaseActionContainer> > *v158; // [rsp+158h] [rbp-358h]
  std::tuple_element<0,std::pair<unsigned int const,std::shared_ptr<data::BaseActionContainer> > >::type *local_id; // [rsp+160h] [rbp-350h]
  std::tuple_element<1,std::pair<unsigned int const,std::shared_ptr<data::BaseActionContainer> > >::type *invoke_site_ptr; // [rsp+168h] [rbp-348h]
  std::initializer_list<bool> v161; // [rsp+170h] [rbp-340h] BYREF
  std::string sep; // [rsp+180h] [rbp-330h] BYREF
  char v163[784]; // [rsp+1A0h] [rbp-310h] BYREF

  v2 = (unsigned __int64)v163;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(736LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "7 32 16 16 modifier_ptr:335 64 16 28 config_modifier_impl_ptr:340 96 16 22 parent_ability_ptr:34"
                        "4 128 16 27 config_ability_impl_ptr:347 160 24 11 log_vec:374 224 32 14 server_log:373 288 376 6 os:273";
  *(_QWORD *)(v2 + 16) = AbilityComp::print;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862724] = -219021312;
  v4[536862725] = -234881024;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862740] = -218103808;
  v4[536862741] = -202116109;
  v4[536862742] = -202116109;
  std::ostringstream::basic_ostringstream(v2 + 288);
  if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->creature_);
  creature = this->creature_;
  v6 = (unsigned __int64 *)creature;
  if ( *(_BYTE *)(((unsigned __int64)creature >> 3) + 0x7FFF8000) )
    v6 = (unsigned __int64 *)__asan_report_load8(this->creature_);
  v7 = *v6;
  if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
    v7 = __asan_report_load8(v7);
  (*(void (__fastcall **)(std::string *, Creature *))v7)(&sep, creature);
  v8 = std::operator<<<char>(v2 + 288, &sep);
  std::operator<<<std::char_traits<char>>(v8, "================= begin =================\n");
  std::string::~string(&sep);
  __for_range = &this->applied_ability_map_;
  __for_begin._M_node = std::map<unsigned int,std::shared_ptr<ActorAbility>>::begin(&this->applied_ability_map_)._M_node;
  __for_end._M_node = std::map<unsigned int,std::shared_ptr<ActorAbility>>::end(&this->applied_ability_map_)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    __in = std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<ActorAbility>>>::operator*(&__for_begin);
    ability_id = std::get<0ul,unsigned int const,std::shared_ptr<ActorAbility>>(__in);
    ability_ptr = std::get<1ul,unsigned int const,std::shared_ptr<ActorAbility>>(__in);
    std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)ability_ptr);
    ActorAbility::getConfigImpl((const ActorAbility *const)(v2 + 96));
    if ( !std::operator==<ConfigAbilityImpl>((const std::shared_ptr<ConfigAbilityImpl> *)(v2 + 96), 0LL) )
    {
      v9 = std::operator<<<std::char_traits<char>>(v2 + 288, "ability id:");
      v10 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)ability_ptr);
      AbilityId = ActorAbility::getAbilityId(v10);
      v12 = std::ostream::operator<<(v9, AbilityId);
      v13 = std::operator<<<std::char_traits<char>>(v12, ", name:");
      v14 = std::__shared_ptr_access<ConfigAbilityImpl,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ConfigAbilityImpl,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
      v15 = std::operator<<<char>(v13, &v14->ability_name);
      std::operator<<<std::char_traits<char>>(v15, "\n");
      __for_range_0 = &std::__shared_ptr_access<ConfigAbilityImpl,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ConfigAbilityImpl,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96))->invoke_site_map;
      __for_begin_0._M_cur = std::unordered_map<unsigned int,std::shared_ptr<data::BaseActionContainer>>::begin(__for_range_0)._M_cur;
      __for_end_0._M_cur = std::unordered_map<unsigned int,std::shared_ptr<data::BaseActionContainer>>::end(__for_range_0)._M_cur;
      while ( std::__detail::operator!=<std::pair<unsigned int const,std::shared_ptr<data::BaseActionContainer>>,false>(
                &__for_begin_0,
                &__for_end_0) )
      {
        v158 = std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<data::BaseActionContainer>>,false,false>::operator*(&__for_begin_0);
        local_id = std::get<0ul,unsigned int const,std::shared_ptr<data::BaseActionContainer>>(v158);
        invoke_site_ptr = std::get<1ul,unsigned int const,std::shared_ptr<data::BaseActionContainer>>(v158);
        if ( std::operator!=<data::BaseActionContainer>(invoke_site_ptr, 0LL) )
        {
          v16 = std::operator<<<std::char_traits<char>>(v2 + 288, "\t[");
          if ( *(_BYTE *)(((unsigned __int64)local_id >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)local_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)local_id >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(local_id);
          }
          v17 = std::ostream::operator<<(v16, *local_id);
          v18 = std::operator<<<std::char_traits<char>>(v17, "]invoke type:");
          v19 = (unsigned __int64)std::__shared_ptr_access<data::BaseActionContainer,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::BaseActionContainer,(__gnu_cxx::_Lock_policy)2,false,false> *const)invoke_site_ptr);
          if ( !v19 )
          {
            __asan_handle_no_return();
            __cxa_bad_typeid();
          }
          if ( *(_BYTE *)((v19 >> 3) + 0x7FFF8000) )
            v19 = __asan_report_load8(v19);
          v20 = *(_QWORD *)v19;
          if ( *(_BYTE *)(((unsigned __int64)(v20 - 8) >> 3) + 0x7FFF8000) )
            v20 = __asan_report_load8(v20 - 8);
          v21 = std::type_info::name(*(const std::type_info *const *)(v20 - 8));
          v22 = std::operator<<<std::char_traits<char>>(v18, v21);
          v23 = std::operator<<<std::char_traits<char>>(v22, ", local_id:");
          if ( *(_BYTE *)(((unsigned __int64)local_id >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)local_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)local_id >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(local_id);
          }
          v24 = std::ostream::operator<<(v23, *local_id);
          std::operator<<<std::char_traits<char>>(v24, "\n");
        }
        std::__detail::_Node_iterator<std::pair<unsigned int const,std::shared_ptr<data::BaseActionContainer>>,false,false>::operator++(&__for_begin_0);
      }
      index = 1;
      __for_range_1 = &std::__shared_ptr_access<ConfigAbilityImpl,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ConfigAbilityImpl,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96))->ability_specials;
      __for_begin_0._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::BaseActionContainer> >,false>::__node_type *)std::unordered_map<std::string,data::DynamicArgument>::begin(__for_range_1)._M_cur;
      __for_end_0._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::BaseActionContainer> >,false>::__node_type *)std::unordered_map<std::string,data::DynamicArgument>::end(__for_range_1)._M_cur;
      while ( std::__detail::operator!=<std::pair<std::string const,data::DynamicArgument>,true>(
                (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::DynamicArgument>,true> *)&__for_begin_0,
                (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::DynamicArgument>,true> *)&__for_end_0) )
      {
        v154 = std::__detail::_Node_iterator<std::pair<std::string const,data::DynamicArgument>,false,true>::operator*((const std::__detail::_Node_iterator<std::pair<const std::string,data::DynamicArgument>,false,true> *const)&__for_begin_0);
        key = std::get<0ul,std::string const,data::DynamicArgument>(v154);
        ability_special = std::get<1ul,std::string const,data::DynamicArgument>(v154);
        type = std::any::type(&ability_special->value);
        if ( std::type_info::operator==(type, (const std::type_info *)&`typeinfo for'std::string) )
        {
          v25 = std::operator<<<std::char_traits<char>>(v2 + 288, "\t(");
          v26 = std::ostream::operator<<(v25, (unsigned int)index);
          v27 = std::operator<<<std::char_traits<char>>(v26, ")ability_special key:");
          v28 = std::operator<<<char>(v27, key);
          v29 = std::operator<<<std::char_traits<char>>(v28, ", value:");
          safeAnyCast<std::string>(&sep, &ability_special->value);
          v30 = std::operator<<<char>(v29, &sep);
          std::operator<<<std::char_traits<char>>(v30, "\n");
          std::string::~string(&sep);
        }
        else if ( std::type_info::operator==(type, (const std::type_info *)&`typeinfo for'float) )
        {
          v31 = std::operator<<<std::char_traits<char>>(v2 + 288, "\t(");
          v32 = std::ostream::operator<<(v31, (unsigned int)index);
          v33 = std::operator<<<std::char_traits<char>>(v32, ")ability_special key:");
          v34 = std::operator<<<char>(v33, key);
          v35 = std::operator<<<std::char_traits<char>>(v34, ", value:");
          v36 = safeAnyCast<float>(&ability_special->value);
          v37 = std::ostream::operator<<(v35, v36);
          std::operator<<<std::char_traits<char>>(v37, "\n");
        }
        else if ( std::type_info::operator==(type, (const std::type_info *)&`typeinfo for'int) )
        {
          v38 = std::operator<<<std::char_traits<char>>(v2 + 288, "\t(");
          v39 = std::ostream::operator<<(v38, (unsigned int)index);
          v40 = std::operator<<<std::char_traits<char>>(v39, ")ability_special key:");
          v41 = std::operator<<<char>(v40, key);
          v42 = std::operator<<<std::char_traits<char>>(v41, ", value:");
          v43 = safeAnyCast<int>(&ability_special->value);
          v44 = std::ostream::operator<<(v42, v43);
          std::operator<<<std::char_traits<char>>(v44, "\n");
        }
        ++index;
        std::__detail::_Node_iterator<std::pair<std::string const,data::DynamicArgument>,false,true>::operator++((std::__detail::_Node_iterator<std::pair<const std::string,data::DynamicArgument>,false,true> *const)&__for_begin_0);
      }
      index = 1;
      v45 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)ability_ptr);
      override_map = ActorAbility::getOverrideMap(v45);
      __for_range_2 = override_map;
      __for_begin_0._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::BaseActionContainer> >,false>::__node_type *)std::map<int,std::any>::begin(override_map)._M_node;
      __for_end_0._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::BaseActionContainer> >,false>::__node_type *)std::map<int,std::any>::end(__for_range_2)._M_node;
      while ( std::operator!=(
                (const std::_Rb_tree_const_iterator<std::pair<int const,std::any> >::_Self *)&__for_begin_0,
                (const std::_Rb_tree_const_iterator<std::pair<int const,std::any> >::_Self *)&__for_end_0) )
      {
        v149 = std::_Rb_tree_const_iterator<std::pair<int const,std::any>>::operator*((const std::_Rb_tree_const_iterator<std::pair<int const,std::any> > *const)&__for_begin_0);
        key_hash = std::get<0ul,int const,std::any>(v149);
        value = (std::tuple_element<1,const std::pair<int const,std::any> >::type *)std::get<1ul,int const,std::any>(v149);
        type_0 = std::any::type(value);
        ServiceBox::findService<GameserverService>();
        GameserverService::getConfig((GameserverService *const)(v2 + 128));
        p_json_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 128))->design_config.json_config_mgr;
        if ( *(_BYTE *)(((unsigned __int64)key_hash >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)key_hash & 7) + 3) >= *(_BYTE *)(((unsigned __int64)key_hash >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(key_hash);
        }
        key_0 = JsonConfigMgr::getAbilityStringFromHash[abi:cxx11](p_json_config_mgr, *key_hash);
        std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v2 + 128));
        if ( std::type_info::operator==(type_0, (const std::type_info *)&`typeinfo for'std::string) )
        {
          v47 = std::operator<<<std::char_traits<char>>(v2 + 288, "\t<");
          v48 = std::ostream::operator<<(v47, (unsigned int)index);
          v49 = std::operator<<<std::char_traits<char>>(v48, ">override key:");
          v50 = std::operator<<<char>(v49, key_0);
          v51 = std::operator<<<std::char_traits<char>>(v50, ", value:");
          safeAnyCast<std::string>(&sep, value);
          v52 = std::operator<<<char>(v51, &sep);
          std::operator<<<std::char_traits<char>>(v52, "\n");
          std::string::~string(&sep);
        }
        else if ( std::type_info::operator==(type_0, (const std::type_info *)&`typeinfo for'float) )
        {
          v53 = std::operator<<<std::char_traits<char>>(v2 + 288, "\t<");
          v54 = std::ostream::operator<<(v53, (unsigned int)index);
          v55 = std::operator<<<std::char_traits<char>>(v54, ">override key:");
          v56 = std::operator<<<char>(v55, key_0);
          v57 = std::operator<<<std::char_traits<char>>(v56, ", value:");
          v58 = safeAnyCast<float>(value);
          v59 = std::ostream::operator<<(v57, v58);
          v60 = std::operator<<<std::char_traits<char>>(v59, " server_value:");
          v61 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)ability_ptr);
          ServerOverrideParam = ActorAbility::getServerOverrideParam(v61, key_0);
          v63 = std::ostream::operator<<(v60, ServerOverrideParam);
          std::operator<<<std::char_traits<char>>(v63, "\n");
        }
        else if ( std::type_info::operator==(type_0, (const std::type_info *)&`typeinfo for'int) )
        {
          v64 = std::operator<<<std::char_traits<char>>(v2 + 288, "\t<");
          v65 = std::ostream::operator<<(v64, (unsigned int)index);
          v66 = std::operator<<<std::char_traits<char>>(v65, ">override key:");
          v67 = std::operator<<<char>(v66, key_0);
          v68 = std::operator<<<std::char_traits<char>>(v67, ", value:");
          v69 = safeAnyCast<int>(value);
          v70 = std::ostream::operator<<(v68, v69);
          std::operator<<<std::char_traits<char>>(v70, "\n");
        }
        ++index;
        std::_Rb_tree_const_iterator<std::pair<int const,std::any>>::operator++((std::_Rb_tree_const_iterator<std::pair<int const,std::any> > *const)&__for_begin_0);
      }
    }
    std::shared_ptr<ConfigAbilityImpl>::~shared_ptr((std::shared_ptr<ConfigAbilityImpl> *const)(v2 + 96));
    std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<ActorAbility>>>::operator++(&__for_begin);
  }
  std::operator<<<std::char_traits<char>>(v2 + 288, "======================================\n");
  v116 = 1;
  v161._M_len = 2LL;
  v161._M_array = (std::initializer_list<bool>::iterator)&v116;
  __for_range_3 = &v161;
  __for_begin_1 = std::initializer_list<bool>::begin(&v161);
  __for_end_1 = std::initializer_list<bool>::end(__for_range_3);
  while ( __for_begin_1 != __for_end_1 )
  {
    if ( *(_BYTE *)(((unsigned __int64)__for_begin_1 >> 3) + 0x7FFF8000) != 0
      && ((unsigned __int8)__for_begin_1 & 7) >= *(_BYTE *)(((unsigned __int64)__for_begin_1 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load1(__for_begin_1);
    }
    is_server_modifier = *__for_begin_1;
    modifier_vec = AbilityComp::getAppliedModifierVec(this, is_server_modifier);
    for ( i = 0; ; ++i )
    {
      v71 = i;
      if ( v71 >= std::vector<std::shared_ptr<ActorModifier>>::size(modifier_vec) )
        break;
      v72 = std::vector<std::shared_ptr<ActorModifier>>::operator[](modifier_vec, i);
      std::shared_ptr<ActorModifier>::shared_ptr((std::shared_ptr<ActorModifier> *const)(v2 + 32), v72);
      if ( !std::operator==<ActorModifier>((const std::shared_ptr<ActorModifier> *)(v2 + 32), 0LL) )
      {
        std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
        ActorModifier::getConfigImpl((const ActorModifier *const)(v2 + 64));
        if ( std::operator!=<ConfigAbilityModifierImpl>(
               (const std::shared_ptr<ConfigAbilityModifierImpl> *)(v2 + 64),
               0LL) )
        {
          v73 = std::operator<<<std::char_traits<char>>(v2 + 288, "modifier id:");
          v74 = std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
          ModifierId = ActorModifier::getModifierId(v74);
          v76 = std::ostream::operator<<(v73, ModifierId);
          v77 = std::operator<<<std::char_traits<char>>(v76, ", config_local_id:");
          v78 = std::__shared_ptr_access<ConfigAbilityModifierImpl,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ConfigAbilityModifierImpl,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
          p_config_local_id = &v78->config_local_id;
          if ( *(_BYTE *)(((unsigned __int64)p_config_local_id >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)p_config_local_id & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_config_local_id >> 3)
                                                                                + 0x7FFF8000) )
          {
            __asan_report_load4(p_config_local_id);
          }
          v80 = std::ostream::operator<<(v77, (unsigned int)v78->config_local_id);
          v81 = std::operator<<<std::char_traits<char>>(v80, ", name:");
          v82 = std::__shared_ptr_access<ConfigAbilityModifierImpl,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ConfigAbilityModifierImpl,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
          v83 = std::operator<<<char>(v81, &v82->modifier_name);
          std::operator<<<std::char_traits<char>>(v83, "\n");
          std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
          ActorModifier::getParentAbility((const ActorModifier *const)(v2 + 96));
          if ( std::operator!=<ActorAbility>((const std::shared_ptr<ActorAbility> *)(v2 + 96), 0LL) )
          {
            std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
            ActorAbility::getConfigImpl((const ActorAbility *const)(v2 + 128));
            if ( std::operator!=<ConfigAbilityImpl>((const std::shared_ptr<ConfigAbilityImpl> *)(v2 + 128), 0LL) )
            {
              v84 = std::operator<<<std::char_traits<char>>(v2 + 288, "\tparent ability id:");
              v85 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
              v86 = ActorAbility::getAbilityId(v85);
              v87 = std::ostream::operator<<(v84, v86);
              v88 = std::operator<<<std::char_traits<char>>(v87, ", name:");
              v89 = std::__shared_ptr_access<ConfigAbilityImpl,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ConfigAbilityImpl,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 128));
              v90 = std::operator<<<char>(v88, &v89->ability_name);
              std::operator<<<std::char_traits<char>>(v90, "\n");
            }
            std::shared_ptr<ConfigAbilityImpl>::~shared_ptr((std::shared_ptr<ConfigAbilityImpl> *const)(v2 + 128));
          }
          std::shared_ptr<ActorAbility>::~shared_ptr((std::shared_ptr<ActorAbility> *const)(v2 + 96));
        }
        std::shared_ptr<ConfigAbilityModifierImpl>::~shared_ptr((std::shared_ptr<ConfigAbilityModifierImpl> *const)(v2 + 64));
      }
      std::shared_ptr<ActorModifier>::~shared_ptr((std::shared_ptr<ActorModifier> *const)(v2 + 32));
    }
    ++__for_begin_1;
  }
  std::operator<<<std::char_traits<char>>(v2 + 288, "======================================\n");
  __for_range_4 = &this->dynamic_value_map_;
  __for_begin_0._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::BaseActionContainer> >,false>::__node_type *)std::unordered_map<std::string,DynamicActorValue<std::any>>::begin(&this->dynamic_value_map_)._M_cur;
  __for_end_0._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::BaseActionContainer> >,false>::__node_type *)std::unordered_map<std::string,DynamicActorValue<std::any>>::end(__for_range_4)._M_cur;
  while ( std::__detail::operator!=<std::pair<std::string const,DynamicActorValue<std::any>>,true>(
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,DynamicActorValue<std::any> >,true> *)&__for_begin_0,
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,DynamicActorValue<std::any> >,true> *)&__for_end_0) )
  {
    v139 = std::__detail::_Node_iterator<std::pair<std::string const,DynamicActorValue<std::any>>,false,true>::operator*((const std::__detail::_Node_iterator<std::pair<const std::string,DynamicActorValue<std::any> >,false,true> *const)&__for_begin_0);
    key_1 = std::get<0ul,std::string const,DynamicActorValue<std::any>>(v139);
    value_0 = std::get<1ul,std::string const,DynamicActorValue<std::any>>(v139);
    v91 = std::operator<<<std::char_traits<char>>(v2 + 288, "global value, key:");
    v92 = std::operator<<<char>(v91, key_1);
    v93 = std::operator<<<std::char_traits<char>>(v92, ", value:");
    DynamicActorValue<std::any>::getValue((const DynamicActorValue<std::any> *const)(v2 + 128));
    v94 = safeAnyCast<float>((const std::any *)(v2 + 128));
    v95 = std::ostream::operator<<(v93, v94);
    std::operator<<<std::char_traits<char>>(v95, "\n");
    std::any::~any((std::any *const)(v2 + 128));
    std::__detail::_Node_iterator<std::pair<std::string const,DynamicActorValue<std::any>>,false,true>::operator++((std::__detail::_Node_iterator<std::pair<const std::string,DynamicActorValue<std::any> >,false,true> *const)&__for_begin_0);
  }
  __for_range_5 = &this->server_dynamic_value_map_;
  __for_begin_0._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::BaseActionContainer> >,false>::__node_type *)std::unordered_map<std::string,DynamicActorValue<std::any>>::begin(&this->server_dynamic_value_map_)._M_cur;
  __for_end_0._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::BaseActionContainer> >,false>::__node_type *)std::unordered_map<std::string,DynamicActorValue<std::any>>::end(__for_range_5)._M_cur;
  while ( std::__detail::operator!=<std::pair<std::string const,DynamicActorValue<std::any>>,true>(
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,DynamicActorValue<std::any> >,true> *)&__for_begin_0,
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,DynamicActorValue<std::any> >,true> *)&__for_end_0) )
  {
    v136 = std::__detail::_Node_iterator<std::pair<std::string const,DynamicActorValue<std::any>>,false,true>::operator*((const std::__detail::_Node_iterator<std::pair<const std::string,DynamicActorValue<std::any> >,false,true> *const)&__for_begin_0);
    key_2 = std::get<0ul,std::string const,DynamicActorValue<std::any>>(v136);
    value_1 = std::get<1ul,std::string const,DynamicActorValue<std::any>>(v136);
    v96 = std::operator<<<std::char_traits<char>>(v2 + 288, "server global value, key:");
    v97 = std::operator<<<char>(v96, key_2);
    v98 = std::operator<<<std::char_traits<char>>(v97, ", value:");
    DynamicActorValue<std::any>::getValue((const DynamicActorValue<std::any> *const)(v2 + 128));
    v99 = safeAnyCast<float>((const std::any *)(v2 + 128));
    v100 = std::ostream::operator<<(v98, v99);
    std::operator<<<std::char_traits<char>>(v100, "\n");
    std::any::~any((std::any *const)(v2 + 128));
    std::__detail::_Node_iterator<std::pair<std::string const,DynamicActorValue<std::any>>,false,true>::operator++((std::__detail::_Node_iterator<std::pair<const std::string,DynamicActorValue<std::any> >,false,true> *const)&__for_begin_0);
  }
  std::operator<<<std::char_traits<char>>(v2 + 288, "======================================\n");
  __for_range_6 = &this->property_map_;
  __for_begin_0._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::BaseActionContainer> >,false>::__node_type *)std::unordered_map<std::string,PileValue>::begin(&this->property_map_)._M_cur;
  __for_end_0._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::BaseActionContainer> >,false>::__node_type *)std::unordered_map<std::string,PileValue>::end(__for_range_6)._M_cur;
  while ( std::__detail::operator!=<std::pair<std::string const,PileValue>,true>(
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,PileValue>,true> *)&__for_begin_0,
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,PileValue>,true> *)&__for_end_0) )
  {
    v133 = std::__detail::_Node_iterator<std::pair<std::string const,PileValue>,false,true>::operator*((const std::__detail::_Node_iterator<std::pair<const std::string,PileValue>,false,true> *const)&__for_begin_0);
    key_3 = std::get<0ul,std::string const,PileValue>(v133);
    value_2 = std::get<1ul,std::string const,PileValue>(v133);
    v101 = std::operator<<<std::char_traits<char>>(v2 + 288, "property, key:");
    v102 = std::operator<<<char>(v101, key_3);
    v103 = std::operator<<<std::char_traits<char>>(v102, ", value:");
    v104 = PileValue::getValue(value_2);
    v105 = std::ostream::operator<<(v103, v104);
    std::operator<<<std::char_traits<char>>(v105, "\n");
    std::__detail::_Node_iterator<std::pair<std::string const,PileValue>,false,true>::operator++((std::__detail::_Node_iterator<std::pair<const std::string,PileValue>,false,true> *const)&__for_begin_0);
  }
  std::operator<<<std::char_traits<char>>(v2 + 288, "======================================\n");
  if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->creature_);
  FightPropComp = Creature::getFightPropComp(this->creature_);
  FightPropComp::getFightPropDebugStr(FightPropComp, (std::ostringstream *)(v2 + 288));
  if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->creature_);
  v107 = this->creature_;
  v108 = (unsigned __int64 *)v107;
  if ( *(_BYTE *)(((unsigned __int64)v107 >> 3) + 0x7FFF8000) )
    v108 = (unsigned __int64 *)__asan_report_load8(this->creature_);
  v109 = *v108;
  if ( *(_BYTE *)((v109 >> 3) + 0x7FFF8000) )
    v109 = __asan_report_load8(v109);
  (*(void (__fastcall **)(std::string *, Creature *))v109)(&sep, v107);
  v110 = std::operator<<<char>(v2 + 288, &sep);
  std::operator<<<std::char_traits<char>>(v110, "================= end =================");
  std::string::~string(&sep);
  std::ostringstream::str(v2 + 224, v2 + 288);
  std::vector<std::string>::vector((std::vector<std::string> *const)(v2 + 160));
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&sep, "\n", &__a);
  common::tools::StringUtils::split((const std::string *)(v2 + 224), &sep, (std::vector<std::string> *)(v2 + 160), 0);
  std::string::~string(&sep);
  std::allocator<char>::~allocator(&__a);
  __for_range_7 = (std::vector<std::string> *)(v2 + 160);
  __for_begin_0._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::BaseActionContainer> >,false>::__node_type *)std::vector<std::string>::begin((std::vector<std::string> *const)(v2 + 160))._M_current;
  __for_end_0._M_cur = (std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::shared_ptr<data::BaseActionContainer> >,false>::__node_type *)std::vector<std::string>::end(__for_range_7)._M_current;
  while ( __gnu_cxx::operator!=<std::string *,std::vector<std::string>>(
            (const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)&__for_begin_0,
            (const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *)&__for_end_0) )
  {
    log = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator*((const __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *const)&__for_begin_0);
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&sep,
      &common::milog::MiLogDefault::default_log_obj_,
      0x11u,
      "./src/ability/ability_comp.cpp",
      "print",
      378);
    v111 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
             (common::milog::MiLogStream *const)&sep,
             (const char (*)[12])"[ABI_INFO] ");
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v111, log);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&sep);
    __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator++((__gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> > *const)&__for_begin_0);
  }
  if ( std::operator!=<Player>(p_player_ptr, 0LL) )
  {
    v112 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_player_ptr);
    Player::notifyServerLog(v112, SERVER_LOG_ABILITY, LOG_LEVEL_NONE, (const std::string *)(v2 + 224));
  }
  std::vector<std::string>::~vector((std::vector<std::string> *const)(v2 + 160));
  std::string::~string((void *)(v2 + 224));
  std::ostringstream::~ostringstream(v2 + 288);
  if ( v163 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8050) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8058) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8058) = -168430091;
  }
};

// Line 390: range 00000000136C0330-00000000136C033A
void __cdecl AbilityComp::onClientInitBegin(AbilityComp *const this)
{
  ;
};

// Line 395: range 00000000136C033C-00000000136C04E6
void __cdecl AbilityComp::onClientInitFinish(AbilityComp *const this)
{
  common::milog::MiLogStream *v1; // rcx
  common::milog::MiLogStream *v2; // rax
  common::milog::MiLogStream *v3; // rcx
  common::milog::MiLogStream v4; // [rsp+10h] [rbp-30h] BYREF

  common::milog::MiLogStream::create(
    &v4,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/ability/ability_comp.cpp",
    "onClientInitFinish",
    397);
  v1 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(&v4, (const char (*)[19])"is_client_inited_:");
  if ( *(_BYTE *)(((unsigned __int64)&this->is_client_inited_ >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)this + 17) & 7) >= *(_BYTE *)(((unsigned __int64)&this->is_client_inited_ >> 3) + 0x7FFF8000) )
  {
    __asan_report_load1(&this->is_client_inited_);
  }
  v2 = common::milog::MiLogStream::operator<<(v1, this->is_client_inited_);
  v3 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v2, (const char (*)[11])" creature:");
  if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->creature_);
  common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v3, this->creature_);
  common::milog::MiLogStream::~MiLogStream(&v4);
  if ( *(_BYTE *)(((unsigned __int64)&this->is_client_inited_ >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)this + 17) & 7) >= *(_BYTE *)(((unsigned __int64)&this->is_client_inited_ >> 3) + 0x7FFF8000) )
  {
    __asan_report_load1(&this->is_client_inited_);
  }
  if ( !this->is_client_inited_ )
    AbilityComp::initAbilityConfigHashValue(this);
  if ( *(_BYTE *)(((unsigned __int64)&this->is_client_inited_ >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)this + 17) & 7) >= *(_BYTE *)(((unsigned __int64)&this->is_client_inited_ >> 3) + 0x7FFF8000) )
  {
    __asan_report_store1(&this->is_client_inited_);
  }
  this->is_client_inited_ = 1;
};

// Line 408: range 00000000136C04E8-00000000136C0784
int32_t __cdecl AbilityComp::onLogin(AbilityComp *const this)
{
  std::shared_ptr<ActorModifier> *v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r13
  const std::shared_ptr<ActorModifier> *v4; // rax
  ActorModifier *v5; // rax
  int32_t result; // eax
  __int16 v7; // [rsp+1Eh] [rbp-B2h] BYREF
  std::vector<std::shared_ptr<ActorModifier>>::iterator __for_begin_0; // [rsp+20h] [rbp-B0h] BYREF
  std::vector<std::shared_ptr<ActorModifier>>::iterator __for_end_0; // [rsp+28h] [rbp-A8h] BYREF
  std::initializer_list<bool>::const_iterator __for_begin; // [rsp+30h] [rbp-A0h]
  uint64_t now_ms; // [rsp+38h] [rbp-98h]
  std::initializer_list<bool> *__for_range; // [rsp+40h] [rbp-90h]
  std::initializer_list<bool>::const_iterator __for_end; // [rsp+48h] [rbp-88h]
  std::vector<std::shared_ptr<ActorModifier>> *modifier_vec; // [rsp+50h] [rbp-80h]
  std::vector<std::shared_ptr<ActorModifier>> *__for_range_0; // [rsp+58h] [rbp-78h]
  std::initializer_list<bool> v16; // [rsp+60h] [rbp-70h] BYREF
  char v17[96]; // [rsp+70h] [rbp-60h] BYREF

  v1 = (std::shared_ptr<ActorModifier> *)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = (std::shared_ptr<ActorModifier> *)v2;
  }
  v1->_M_ptr = (std::__shared_ptr<ActorModifier,(__gnu_cxx::_Lock_policy)2>::element_type *)1102416563;
  v1->_M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)"1 32 16 16 modifier_ptr:413";
  v1[1]._M_ptr = (std::__shared_ptr<ActorModifier,(__gnu_cxx::_Lock_policy)2>::element_type *)AbilityComp::onLogin;
  v3 = (unsigned __int64)v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202178560;
  now_ms = common::tools::TimeUtils::getNowMs();
  v7 = 1;
  v16._M_len = 2LL;
  v16._M_array = (std::initializer_list<bool>::iterator)&v7;
  __for_range = &v16;
  __for_begin = std::initializer_list<bool>::begin(&v16);
  __for_end = std::initializer_list<bool>::end(__for_range);
  while ( __for_begin != __for_end )
  {
    if ( *(_BYTE *)(((unsigned __int64)__for_begin >> 3) + 0x7FFF8000) != 0
      && ((unsigned __int8)__for_begin & 7) >= *(_BYTE *)(((unsigned __int64)__for_begin >> 3) + 0x7FFF8000) )
    {
      __asan_report_load1(__for_begin);
    }
    modifier_vec = AbilityComp::getAppliedModifierVec(this, *__for_begin);
    __for_range_0 = modifier_vec;
    __for_begin_0._M_current = std::vector<std::shared_ptr<ActorModifier>>::begin(modifier_vec)._M_current;
    __for_end_0._M_current = std::vector<std::shared_ptr<ActorModifier>>::end(__for_range_0)._M_current;
    while ( __gnu_cxx::operator!=<std::shared_ptr<ActorModifier> *,std::vector<std::shared_ptr<ActorModifier>>>(
              &__for_begin_0,
              &__for_end_0) )
    {
      v4 = __gnu_cxx::__normal_iterator<std::shared_ptr<ActorModifier> *,std::vector<std::shared_ptr<ActorModifier>>>::operator*(&__for_begin_0);
      std::shared_ptr<ActorModifier>::shared_ptr(v1 + 2, v4);
      if ( std::operator!=<ActorModifier>(v1 + 2, 0LL) )
      {
        v5 = std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v1[2]);
        ActorModifier::onLogin(v5, now_ms);
      }
      std::shared_ptr<ActorModifier>::~shared_ptr(v1 + 2);
      __gnu_cxx::__normal_iterator<std::shared_ptr<ActorModifier> *,std::vector<std::shared_ptr<ActorModifier>>>::operator++(&__for_begin_0);
    }
    ++__for_begin;
  }
  result = 0;
  if ( v17 == (char *)v1 )
  {
    *(_QWORD *)(((unsigned __int64)v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    v1->_M_ptr = (std::__shared_ptr<ActorModifier,(__gnu_cxx::_Lock_policy)2>::element_type *)1172321806;
    *(_QWORD *)(((unsigned __int64)v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 426: range 00000000136C0786-00000000136C0AA3
int32_t __cdecl AbilityComp::onDisconnect(AbilityComp *const this)
{
  std::shared_ptr<ActorModifier> *v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r13
  const std::shared_ptr<ActorModifier> *v4; // rax
  ActorModifier *v5; // rax
  int32_t result; // eax
  __int16 v7; // [rsp+16h] [rbp-AAh] BYREF
  std::vector<std::shared_ptr<ActorModifier>>::iterator __for_begin_0; // [rsp+18h] [rbp-A8h] BYREF
  std::vector<std::shared_ptr<ActorModifier>>::iterator __for_end_0; // [rsp+20h] [rbp-A0h] BYREF
  std::initializer_list<bool>::const_iterator __for_begin; // [rsp+28h] [rbp-98h]
  std::initializer_list<bool> *__for_range; // [rsp+30h] [rbp-90h]
  std::initializer_list<bool>::const_iterator __for_end; // [rsp+38h] [rbp-88h]
  std::vector<std::shared_ptr<ActorModifier>> *modifier_vec; // [rsp+40h] [rbp-80h]
  std::vector<std::shared_ptr<ActorModifier>> *__for_range_0; // [rsp+48h] [rbp-78h]
  std::initializer_list<bool> v15; // [rsp+50h] [rbp-70h] BYREF
  char v16[96]; // [rsp+60h] [rbp-60h] BYREF

  v1 = (std::shared_ptr<ActorModifier> *)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = (std::shared_ptr<ActorModifier> *)v2;
  }
  v1->_M_ptr = (std::__shared_ptr<ActorModifier,(__gnu_cxx::_Lock_policy)2>::element_type *)1102416563;
  v1->_M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)"1 32 16 16 modifier_ptr:430";
  v1[1]._M_ptr = (std::__shared_ptr<ActorModifier,(__gnu_cxx::_Lock_policy)2>::element_type *)AbilityComp::onDisconnect;
  v3 = (unsigned __int64)v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202178560;
  v7 = 1;
  v15._M_len = 2LL;
  v15._M_array = (std::initializer_list<bool>::iterator)&v7;
  __for_range = &v15;
  __for_begin = std::initializer_list<bool>::begin(&v15);
  __for_end = std::initializer_list<bool>::end(__for_range);
  while ( __for_begin != __for_end )
  {
    if ( *(_BYTE *)(((unsigned __int64)__for_begin >> 3) + 0x7FFF8000) != 0
      && ((unsigned __int8)__for_begin & 7) >= *(_BYTE *)(((unsigned __int64)__for_begin >> 3) + 0x7FFF8000) )
    {
      __asan_report_load1(__for_begin);
    }
    modifier_vec = AbilityComp::getAppliedModifierVec(this, *__for_begin);
    __for_range_0 = modifier_vec;
    __for_begin_0._M_current = std::vector<std::shared_ptr<ActorModifier>>::begin(modifier_vec)._M_current;
    __for_end_0._M_current = std::vector<std::shared_ptr<ActorModifier>>::end(__for_range_0)._M_current;
    while ( __gnu_cxx::operator!=<std::shared_ptr<ActorModifier> *,std::vector<std::shared_ptr<ActorModifier>>>(
              &__for_begin_0,
              &__for_end_0) )
    {
      v4 = __gnu_cxx::__normal_iterator<std::shared_ptr<ActorModifier> *,std::vector<std::shared_ptr<ActorModifier>>>::operator*(&__for_begin_0);
      std::shared_ptr<ActorModifier>::shared_ptr(v1 + 2, v4);
      if ( std::operator!=<ActorModifier>(v1 + 2, 0LL) )
      {
        v5 = std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v1[2]);
        ActorModifier::onDisconnect(v5);
      }
      std::shared_ptr<ActorModifier>::~shared_ptr(v1 + 2);
      __gnu_cxx::__normal_iterator<std::shared_ptr<ActorModifier> *,std::vector<std::shared_ptr<ActorModifier>>>::operator++(&__for_begin_0);
    }
    ++__for_begin;
  }
  if ( *(_BYTE *)(((unsigned __int64)&this->last_dash_modifier_applied_player_time_ms_ >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->last_dash_modifier_applied_player_time_ms_ >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_store4(&this->last_dash_modifier_applied_player_time_ms_);
  }
  this->last_dash_modifier_applied_player_time_ms_ = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->dash_modifier_count_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->dash_modifier_count_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->dash_modifier_count_);
  }
  this->dash_modifier_count_ = 0;
  result = 0;
  if ( v16 == (char *)v1 )
  {
    *(_QWORD *)(((unsigned __int64)v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    v1->_M_ptr = (std::__shared_ptr<ActorModifier,(__gnu_cxx::_Lock_policy)2>::element_type *)1172321806;
    *(_QWORD *)(((unsigned __int64)v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 445: range 00000000136C0BCA-00000000136C1979
int32_t __cdecl AbilityComp::toClient(const AbilityComp *const this, proto::AbilitySyncStateInfo *ability_info)
{
  int32_t v2; // r15d
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // rcx
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rcx
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rcx
  Creature *creature; // rsi
  Creature *v12; // rax
  unsigned __int64 v13; // rax
  Creature *v14; // rsi
  Creature *v15; // rax
  unsigned __int64 v16; // rax
  std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  char v18; // al
  std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // rax
  common::milog::MiLogStream *v20; // rbx
  std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  const std::shared_ptr<ActorModifier> *v22; // rax
  int v23; // r14d
  std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v24; // rax
  common::milog::MiLogStream *v25; // r14
  std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v26; // rax
  Scene *v27; // rax
  float ReducedElementDurability; // xmm0_4
  int32_t result; // eax
  __int16 v31; // [rsp+2Eh] [rbp-192h] BYREF
  std::vector<std::shared_ptr<ActorModifier>>::const_iterator __for_begin_1; // [rsp+30h] [rbp-190h] BYREF
  std::vector<std::shared_ptr<ActorModifier>>::const_iterator __for_end_1; // [rsp+38h] [rbp-188h] BYREF
  std::unordered_map<std::string,DynamicActorValue<std::any>>::const_iterator __for_begin; // [rsp+40h] [rbp-180h] BYREF
  std::unordered_map<std::string,DynamicActorValue<std::any>>::const_iterator __for_end; // [rsp+48h] [rbp-178h] BYREF
  proto::AbilityScalarValueEntry *value_entry_ptr; // [rsp+50h] [rbp-170h]
  std::initializer_list<bool>::const_iterator __for_begin_0; // [rsp+58h] [rbp-168h]
  const std::unordered_map<std::string,DynamicActorValue<std::any>> *__for_range; // [rsp+60h] [rbp-160h]
  const std::map<unsigned int,std::shared_ptr<ActorAbility>> *__for_range_0; // [rsp+68h] [rbp-158h]
  std::initializer_list<bool> *__for_range_1; // [rsp+70h] [rbp-150h]
  std::initializer_list<bool>::const_iterator __for_end_0; // [rsp+78h] [rbp-148h]
  const std::vector<std::shared_ptr<ActorModifier>> *modifier_vec; // [rsp+80h] [rbp-140h]
  const std::vector<std::shared_ptr<ActorModifier>> *__for_range_2; // [rsp+88h] [rbp-138h]
  proto::AbilityAppliedModifier *proto_modifier; // [rsp+90h] [rbp-130h]
  uint64_t cur_scene_time_ms; // [rsp+98h] [rbp-128h]
  const std::vector<ElementDurabilityInfo> *__for_range_3; // [rsp+A0h] [rbp-120h]
  const ElementDurabilityInfo *element_durability_info; // [rsp+A8h] [rbp-118h]
  proto::ModifierDurability *proto_modifier_durability; // [rsp+B0h] [rbp-110h]
  const std::pair<unsigned int const,std::shared_ptr<ActorAbility> > *v49; // [rsp+B8h] [rbp-108h]
  std::tuple_element<0,const std::pair<unsigned int const,std::shared_ptr<ActorAbility> > >::type *ability_id; // [rsp+C0h] [rbp-100h]
  std::tuple_element<1,const std::pair<unsigned int const,std::shared_ptr<ActorAbility> > >::type *ability_ptr; // [rsp+C8h] [rbp-F8h]
  proto::AbilityAppliedAbility *proto_ability; // [rsp+D0h] [rbp-F0h]
  const std::pair<const std::string,DynamicActorValue<std::any> > *v53; // [rsp+D8h] [rbp-E8h]
  std::tuple_element<0,const std::pair<const std::string,DynamicActorValue<std::any> > >::type *key; // [rsp+E0h] [rbp-E0h]
  std::tuple_element<1,const std::pair<const std::string,DynamicActorValue<std::any> > >::type *value; // [rsp+E8h] [rbp-D8h]
  proto::AbilityScalarValueEntry *value_entry; // [rsp+F0h] [rbp-D0h]
  proto::AbilityString *proto_key; // [rsp+F8h] [rbp-C8h]
  std::initializer_list<bool> v58; // [rsp+100h] [rbp-C0h] BYREF
  common::milog::MiLogStream v59; // [rsp+110h] [rbp-B0h] BYREF
  char v60[144]; // [rsp+130h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v60;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 32 16 16 modifier_ptr:494 64 16 13 scene_ptr:506";
  *(_QWORD *)(v3 + 16) = AbilityComp::toClient;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -219021312;
  v5[536862722] = -202178560;
  common::milog::MiLogStream::create(
    &v59,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/ability/ability_comp.cpp",
    "toClient",
    447);
  v6 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(&v59, (const char (*)[19])"is_client_inited_:");
  if ( *(_BYTE *)(((unsigned __int64)&this->is_client_inited_ >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)this + 17) & 7) >= *(_BYTE *)(((unsigned __int64)&this->is_client_inited_ >> 3) + 0x7FFF8000) )
  {
    __asan_report_load1(&this->is_client_inited_);
  }
  v7 = common::milog::MiLogStream::operator<<(v6, this->is_client_inited_);
  v8 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v7, (const char (*)[11])" creature:");
  if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->creature_);
  common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v8, this->creature_);
  common::milog::MiLogStream::~MiLogStream(&v59);
  if ( *(_BYTE *)(((unsigned __int64)&this->is_client_inited_ >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)this + 17) & 7) >= *(_BYTE *)(((unsigned __int64)&this->is_client_inited_ >> 3) + 0x7FFF8000) )
  {
    __asan_report_load1(&this->is_client_inited_);
  }
  proto::AbilitySyncStateInfo::set_is_inited(ability_info, this->is_client_inited_);
  __for_range = &this->dynamic_value_map_;
  __for_begin._M_cur = std::unordered_map<std::string,DynamicActorValue<std::any>>::begin(&this->dynamic_value_map_)._M_cur;
  __for_end._M_cur = std::unordered_map<std::string,DynamicActorValue<std::any>>::end(&this->dynamic_value_map_)._M_cur;
  while ( std::__detail::operator!=<std::pair<std::string const,DynamicActorValue<std::any>>,true>(
            &__for_begin,
            &__for_end) )
  {
    v53 = std::__detail::_Node_const_iterator<std::pair<std::string const,DynamicActorValue<std::any>>,false,true>::operator*(&__for_begin);
    key = std::get<0ul,std::string const,DynamicActorValue<std::any>>(v53);
    value = (std::tuple_element<1,const std::pair<const std::string,DynamicActorValue<std::any> > >::type *)std::get<1ul,std::string const,DynamicActorValue<std::any>>(v53);
    if ( !AbilityComp::isServerGlobalValueKey(this, key) )
      value_entry_ptr = proto::AbilitySyncStateInfo::add_dynamic_value_map(ability_info);
    else
      value_entry_ptr = proto::AbilitySyncStateInfo::add_sgv_dynamic_value_map(ability_info);
    if ( !value_entry_ptr )
    {
      common::milog::MiLogStream::create(
        &v59,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "toClient",
        464);
      v9 = common::milog::MiLogStream::operator<<<char [48],(char *[48])0>(
             &v59,
             (const char (*)[48])"ability_info add dynamic_value_map  fails, key:");
      v10 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v9, key);
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
LABEL_18:
      common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v10, this->creature_);
      common::milog::MiLogStream::~MiLogStream(&v59);
      v2 = -1;
      goto LABEL_73;
    }
    value_entry = value_entry_ptr;
    proto_key = proto::AbilityScalarValueEntry::mutable_key(value_entry_ptr);
    if ( abilityStringFromStdString(key, proto_key) )
    {
      common::milog::MiLogStream::create(
        &v59,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "toClient",
        472);
      v10 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
              &v59,
              (const char (*)[33])"abilityStringFromStdString fails");
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      goto LABEL_18;
    }
    DynamicActorValue<std::any>::getValue((const DynamicActorValue<std::any> *const)(v3 + 64));
    anyToScalarValueEntry((const std::any *)(v3 + 64), value_entry);
    std::any::~any((std::any *const)(v3 + 64));
    std::__detail::_Node_const_iterator<std::pair<std::string const,DynamicActorValue<std::any>>,false,true>::operator++(&__for_begin);
  }
  __for_range_0 = &this->applied_ability_map_;
  __for_begin._M_cur = (std::__detail::_Node_iterator_base<std::pair<const std::string,DynamicActorValue<std::any> >,true>::__node_type *)std::map<unsigned int,std::shared_ptr<ActorAbility>>::begin(&this->applied_ability_map_)._M_node;
  __for_end._M_cur = (std::__detail::_Node_iterator_base<std::pair<const std::string,DynamicActorValue<std::any> >,true>::__node_type *)std::map<unsigned int,std::shared_ptr<ActorAbility>>::end(__for_range_0)._M_node;
  while ( std::operator!=(
            (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::shared_ptr<ActorAbility> > >::_Self *)&__for_begin,
            (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::shared_ptr<ActorAbility> > >::_Self *)&__for_end) )
  {
    v49 = std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::shared_ptr<ActorAbility>>>::operator*((const std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::shared_ptr<ActorAbility> > > *const)&__for_begin);
    ability_id = std::get<0ul,unsigned int const,std::shared_ptr<ActorAbility>>(v49);
    ability_ptr = (std::tuple_element<1,const std::pair<unsigned int const,std::shared_ptr<ActorAbility> > >::type *)std::get<1ul,unsigned int const,std::shared_ptr<ActorAbility>>(v49);
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    creature = this->creature_;
    v12 = creature;
    if ( *(_BYTE *)(((unsigned __int64)creature >> 3) + 0x7FFF8000) )
      v12 = (Creature *)__asan_report_load8(this->creature_);
    v13 = *(_QWORD *)v12->baseclass_0 + 24LL;
    if ( *(_BYTE *)((v13 >> 3) + 0x7FFF8000) )
      v13 = __asan_report_load8(v13);
    if ( (*(unsigned int (__fastcall **)(Creature *))v13)(creature) == 1 )
      goto LABEL_42;
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    v14 = this->creature_;
    v15 = v14;
    if ( *(_BYTE *)(((unsigned __int64)v14 >> 3) + 0x7FFF8000) )
      v15 = (Creature *)__asan_report_load8(this->creature_);
    v16 = *(_QWORD *)v15->baseclass_0 + 24LL;
    if ( *(_BYTE *)((v16 >> 3) + 0x7FFF8000) )
      v16 = __asan_report_load8(v16);
    if ( (*(unsigned int (__fastcall **)(Creature *))v16)(v14) == 9
      || (v17 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)ability_ptr),
          ActorAbility::hasOverride(v17)) )
    {
LABEL_42:
      v18 = 0;
    }
    else
    {
      v18 = 1;
    }
    if ( !v18 )
    {
      proto_ability = proto::AbilitySyncStateInfo::add_applied_abilities(ability_info);
      v19 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)ability_ptr);
      if ( ActorAbility::toClient(v19, proto_ability) )
      {
        common::milog::MiLogStream::create(
          &v59,
          &common::milog::MiLogDefault::default_log_obj_,
          0x13u,
          "./src/ability/ability_comp.cpp",
          "toClient",
          487);
        v20 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                &v59,
                (const char (*)[15])"toClient fails");
        v21 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)ability_ptr);
        common::milog::MiLogStream::operator<<<ActorAbility,(ActorAbility*)0>(v20, v21);
        common::milog::MiLogStream::~MiLogStream(&v59);
        v2 = -1;
        goto LABEL_73;
      }
    }
    std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::shared_ptr<ActorAbility>>>::operator++((std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::shared_ptr<ActorAbility> > > *const)&__for_begin);
  }
  v31 = 1;
  v58._M_len = 2LL;
  v58._M_array = (std::initializer_list<bool>::iterator)&v31;
  __for_range_1 = &v58;
  __for_begin_0 = std::initializer_list<bool>::begin(&v58);
  __for_end_0 = std::initializer_list<bool>::end(__for_range_1);
  while ( __for_begin_0 != __for_end_0 )
  {
    if ( *(_BYTE *)(((unsigned __int64)__for_begin_0 >> 3) + 0x7FFF8000) != 0
      && ((unsigned __int8)__for_begin_0 & 7) >= *(_BYTE *)(((unsigned __int64)__for_begin_0 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load1(__for_begin_0);
    }
    modifier_vec = AbilityComp::getAppliedModifierVec(this, *__for_begin_0);
    __for_range_2 = modifier_vec;
    __for_begin_1._M_current = std::vector<std::shared_ptr<ActorModifier>>::begin(modifier_vec)._M_current;
    __for_end_1._M_current = std::vector<std::shared_ptr<ActorModifier>>::end(__for_range_2)._M_current;
    while ( __gnu_cxx::operator!=<std::shared_ptr<ActorModifier> const*,std::vector<std::shared_ptr<ActorModifier>>>(
              &__for_begin_1,
              &__for_end_1) )
    {
      v22 = __gnu_cxx::__normal_iterator<std::shared_ptr<ActorModifier> const*,std::vector<std::shared_ptr<ActorModifier>>>::operator*(&__for_begin_1);
      std::shared_ptr<ActorModifier>::shared_ptr((std::shared_ptr<ActorModifier> *const)(v3 + 32), v22);
      if ( std::operator==<ActorModifier>((const std::shared_ptr<ActorModifier> *)(v3 + 32), 0LL) )
      {
        v23 = 0;
      }
      else
      {
        proto_modifier = proto::AbilitySyncStateInfo::add_applied_modifiers(ability_info);
        v24 = std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
        if ( ActorModifier::toClient(v24, proto_modifier) )
        {
          common::milog::MiLogStream::create(
            &v59,
            &common::milog::MiLogDefault::default_log_obj_,
            0x13u,
            "./src/ability/ability_comp.cpp",
            "toClient",
            503);
          v25 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                  &v59,
                  (const char (*)[15])"toClient fails");
          v26 = std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
          common::milog::MiLogStream::operator<<<ActorModifier,(ActorModifier*)0>(v25, v26);
          common::milog::MiLogStream::~MiLogStream(&v59);
          v2 = -1;
          v23 = 1;
        }
        else
        {
          if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->creature_);
          Entity::getScene((const Entity *const)(v3 + 64));
          if ( std::operator!=<Scene>((const std::shared_ptr<Scene> *)(v3 + 64), 0LL) )
          {
            v27 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
            cur_scene_time_ms = Scene::getSceneDiscreteTimeMs(v27);
            __for_range_3 = &this->modifier_durability_vec_;
            __for_begin._M_cur = (std::__detail::_Node_iterator_base<std::pair<const std::string,DynamicActorValue<std::any> >,true>::__node_type *)std::vector<ElementDurabilityInfo>::begin(&this->modifier_durability_vec_)._M_current;
            __for_end._M_cur = (std::__detail::_Node_iterator_base<std::pair<const std::string,DynamicActorValue<std::any> >,true>::__node_type *)std::vector<ElementDurabilityInfo>::end(__for_range_3)._M_current;
            while ( __gnu_cxx::operator!=<ElementDurabilityInfo const*,std::vector<ElementDurabilityInfo>>(
                      (const __gnu_cxx::__normal_iterator<const ElementDurabilityInfo*,std::vector<ElementDurabilityInfo> > *)&__for_begin,
                      (const __gnu_cxx::__normal_iterator<const ElementDurabilityInfo*,std::vector<ElementDurabilityInfo> > *)&__for_end) )
            {
              element_durability_info = __gnu_cxx::__normal_iterator<ElementDurabilityInfo const*,std::vector<ElementDurabilityInfo>>::operator*((const __gnu_cxx::__normal_iterator<const ElementDurabilityInfo*,std::vector<ElementDurabilityInfo> > *const)&__for_begin);
              if ( std::operator==<ActorModifier,ActorModifier>(
                     &element_durability_info->modifier_ptr,
                     (const std::shared_ptr<ActorModifier> *)(v3 + 32)) )
              {
                proto_modifier_durability = proto::AbilityAppliedModifier::mutable_modifier_durability(proto_modifier);
                if ( *(_BYTE *)(((unsigned __int64)&element_durability_info->reduce_ratio >> 3) + 0x7FFF8000) != 0
                  && *(_BYTE *)(((unsigned __int64)&element_durability_info->reduce_ratio >> 3) + 0x7FFF8000) <= 3 )
                {
                  __asan_report_load4(&element_durability_info->reduce_ratio);
                }
                proto::ModifierDurability::set_reduce_ratio(
                  proto_modifier_durability,
                  element_durability_info->reduce_ratio);
                ReducedElementDurability = AbilityComp::getReducedElementDurability(
                                             this,
                                             element_durability_info,
                                             cur_scene_time_ms);
                proto::ModifierDurability::set_remaining_durability(proto_modifier_durability, ReducedElementDurability);
                break;
              }
              __gnu_cxx::__normal_iterator<ElementDurabilityInfo const*,std::vector<ElementDurabilityInfo>>::operator++((__gnu_cxx::__normal_iterator<const ElementDurabilityInfo*,std::vector<ElementDurabilityInfo> > *const)&__for_begin);
            }
          }
          std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 64));
          v23 = 2;
        }
      }
      std::shared_ptr<ActorModifier>::~shared_ptr((std::shared_ptr<ActorModifier> *const)(v3 + 32));
      if ( v23 && v23 != 2 )
        goto LABEL_73;
      __gnu_cxx::__normal_iterator<std::shared_ptr<ActorModifier> const*,std::vector<std::shared_ptr<ActorModifier>>>::operator++(&__for_begin_1);
    }
    ++__for_begin_0;
  }
  std::function<ForeachPolicy ()(BaseAbilityMixin const&)>::function<AbilityComp::toClient(proto::AbilitySyncStateInfo &)::{lambda(BaseAbilityMixin const&)#1},void,void>(
    (std::function<ForeachPolicy(const BaseAbilityMixin&)> *const)&v59,
    (AbilityComp::toClient::<lambda(const BaseAbilityMixin&)>)ability_info);
  AbilityComp::foreachMixin(this, (std::function<ForeachPolicy(const BaseAbilityMixin&)> *)&v59);
  std::function<ForeachPolicy ()(BaseAbilityMixin const&)>::~function((std::function<ForeachPolicy(const BaseAbilityMixin&)> *const)&v59);
  v2 = 0;
LABEL_73:
  result = v2;
  if ( v60 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 523: range 00000000136C0AA4-00000000136C0BC9
ForeachPolicy __cdecl AbilityComp::toClient(proto::AbilitySyncStateInfo &)const::{lambda(BaseAbilityMixin const&)#1}::operator()(
        const AbilityComp::toClient::<lambda(const BaseAbilityMixin&)> *const __closure,
        const BaseAbilityMixin *mixin)
{
  unsigned __int64 v2; // rax
  unsigned __int64 v4; // rax
  proto::AbilityMixinRecoverInfo *info; // [rsp+18h] [rbp-8h]

  if ( *(_BYTE *)(((unsigned __int64)mixin >> 3) + 0x7FFF8000) )
    __asan_report_load8(mixin);
  v2 = (unsigned __int64)(mixin->_vptr_BaseAbilityMixin + 10);
  if ( *(_BYTE *)((v2 >> 3) + 0x7FFF8000) )
    v2 = __asan_report_load8(mixin->_vptr_BaseAbilityMixin + 10);
  if ( (*(unsigned __int8 (__fastcall **)(const BaseAbilityMixin *))v2)(mixin) != 1 )
    return 0;
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8(__closure);
  info = proto::AbilitySyncStateInfo::add_mixin_recover_infos(__closure->__ability_info);
  BaseAbilityMixin::fillCommonRecoverInfo(mixin, info);
  if ( *(_BYTE *)(((unsigned __int64)mixin >> 3) + 0x7FFF8000) )
    __asan_report_load8(mixin);
  v4 = (unsigned __int64)(mixin->_vptr_BaseAbilityMixin + 12);
  if ( *(_BYTE *)((v4 >> 3) + 0x7FFF8000) )
    v4 = __asan_report_load8(mixin->_vptr_BaseAbilityMixin + 12);
  (*(void (__fastcall **)(const BaseAbilityMixin *, proto::AbilityMixinRecoverInfo *))v4)(mixin, info);
  return 0;
};

// Line 542: range 00000000136C197A-00000000136C1FAF
int32_t __cdecl AbilityComp::initAllAbilities(AbilityComp *const this, ScenePtr *p_scene_ptr)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  common::milog::MiLogStream *v5; // rcx
  bool v6; // r14
  common::milog::MiLogStream *v7; // rcx
  int32_t v8; // r14d
  __gnu_cxx::__normal_iterator<std::pair<unsigned int,unsigned int>*,std::vector<std::pair<unsigned int,unsigned int>> >::reference v9; // rax
  std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<ActorAbility> > >::_Base_ptr *v10; // rdx
  std::tuple_element<1,std::pair<unsigned int,unsigned int> >::type *v11; // rax
  uint32_t v12; // esi
  ActorAbility *v13; // r14
  Avatar *v14; // rax
  int32_t result; // eax
  std::vector<std::pair<unsigned int,unsigned int>>::iterator __for_begin; // [rsp+10h] [rbp-120h] BYREF
  std::map<unsigned int,std::shared_ptr<ActorAbility>>::iterator __for_begin_0; // [rsp+18h] [rbp-118h] BYREF
  std::vector<std::pair<unsigned int,unsigned int>> *__for_range; // [rsp+20h] [rbp-110h]
  std::map<unsigned int,std::shared_ptr<ActorAbility>> *__for_range_0; // [rsp+28h] [rbp-108h]
  std::pair<unsigned int const,std::shared_ptr<ActorAbility> > *__in; // [rsp+30h] [rbp-100h]
  std::tuple_element<0,std::pair<unsigned int const,std::shared_ptr<ActorAbility> > >::type *_; // [rsp+38h] [rbp-F8h]
  std::tuple_element<1,std::pair<unsigned int const,std::shared_ptr<ActorAbility> > >::type *ability_ptr; // [rsp+40h] [rbp-F0h]
  std::tuple_element<0,std::pair<unsigned int,unsigned int> >::type *ability_name_hash; // [rsp+48h] [rbp-E8h]
  std::tuple_element<1,std::pair<unsigned int,unsigned int> >::type *override_name_hash; // [rsp+50h] [rbp-E0h]
  std::map<unsigned int,std::shared_ptr<ActorAbility>>::iterator __for_end; // [rsp+58h] [rbp-D8h] BYREF
  common::milog::MiLogStream v26; // [rsp+60h] [rbp-D0h] BYREF
  char v27[176]; // [rsp+80h] [rbp-B0h] BYREF

  v2 = (unsigned __int64)v27;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 16 20 owner_avatar_ptr:556 64 24 22 target_ability_vec:546";
  *(_QWORD *)(v2 + 16) = AbilityComp::initAllAbilities;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862722] = -218103808;
  v4[536862723] = -202116109;
  common::milog::MiLogStream::create(
    &v26,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/ability/ability_comp.cpp",
    "initAllAbilities",
    544);
  v5 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(&v26, (const char (*)[12])"init start:");
  if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->creature_);
  common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v5, this->creature_);
  common::milog::MiLogStream::~MiLogStream(&v26);
  std::vector<std::pair<unsigned int,unsigned int>>::vector((std::vector<std::pair<unsigned int,unsigned int>> *const)(v2 + 64));
  std::shared_ptr<Scene>::shared_ptr((std::shared_ptr<Scene> *const)(v2 + 32), p_scene_ptr);
  v6 = AbilityComp::getAllCommonAbility(this, (TargetAbilityVec *)(v2 + 64), (ScenePtr *)(v2 + 32)) != 0;
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v2 + 32));
  if ( v6 )
  {
    common::milog::MiLogStream::create(
      &v26,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "initAllAbilities",
      549);
    v7 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
           &v26,
           (const char (*)[37])"getAllSkillDepotExtraAbilities fails");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v7, this->creature_);
    common::milog::MiLogStream::~MiLogStream(&v26);
    v8 = -1;
  }
  else
  {
    __for_range = (std::vector<std::pair<unsigned int,unsigned int>> *)(v2 + 64);
    __for_begin._M_current = std::vector<std::pair<unsigned int,unsigned int>>::begin((std::vector<std::pair<unsigned int,unsigned int>> *const)(v2 + 64))._M_current;
    __for_begin_0._M_node = (std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<ActorAbility> > >::_Base_ptr)std::vector<std::pair<unsigned int,unsigned int>>::end((std::vector<std::pair<unsigned int,unsigned int>> *const)(v2 + 64))._M_current;
    while ( __gnu_cxx::operator!=<std::pair<unsigned int,unsigned int> *,std::vector<std::pair<unsigned int,unsigned int>>>(
              &__for_begin,
              (const __gnu_cxx::__normal_iterator<std::pair<unsigned int,unsigned int>*,std::vector<std::pair<unsigned int,unsigned int>> > *)&__for_begin_0) )
    {
      v9 = __gnu_cxx::__normal_iterator<std::pair<unsigned int,unsigned int> *,std::vector<std::pair<unsigned int,unsigned int>>>::operator*(&__for_begin);
      v10 = (std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<ActorAbility> > >::_Base_ptr *)v9;
      if ( ((unsigned __int8)v9 & 7) >= *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000)
        && *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) != 0
        || *(_BYTE *)((((unsigned __int64)&v9->second + 3) >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)v9 + 7) & 7) >= *(_BYTE *)((((unsigned __int64)&v9->second + 3) >> 3) + 0x7FFF8000) )
      {
        __asan_report_load_n(v9, 8LL);
      }
      __for_end._M_node = *v10;
      ability_name_hash = std::get<0ul,unsigned int,unsigned int>((std::pair<unsigned int,unsigned int> *)&__for_end);
      v11 = std::get<1ul,unsigned int,unsigned int>((std::pair<unsigned int,unsigned int> *)&__for_end);
      override_name_hash = v11;
      if ( *(_BYTE *)(((unsigned __int64)v11 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v11 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v11 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v11);
      }
      v12 = *override_name_hash;
      if ( *(_BYTE *)(((unsigned __int64)ability_name_hash >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)ability_name_hash & 7) + 3) >= *(_BYTE *)(((unsigned __int64)ability_name_hash >> 3)
                                                                            + 0x7FFF8000) )
      {
        __asan_report_load4(ability_name_hash);
      }
      AbilityComp::addNewAbility(this, *ability_name_hash, v12);
      __gnu_cxx::__normal_iterator<std::pair<unsigned int,unsigned int> *,std::vector<std::pair<unsigned int,unsigned int>>>::operator++(&__for_begin);
    }
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    Creature::getOwner<Avatar>((const Creature *const)(v2 + 32));
    if ( std::operator!=<Avatar>(0LL, (const std::shared_ptr<Avatar> *)(v2 + 32)) )
    {
      __for_range_0 = &this->applied_ability_map_;
      __for_begin_0._M_node = std::map<unsigned int,std::shared_ptr<ActorAbility>>::begin(&this->applied_ability_map_)._M_node;
      __for_end._M_node = std::map<unsigned int,std::shared_ptr<ActorAbility>>::end(__for_range_0)._M_node;
      while ( std::operator!=(&__for_begin_0, &__for_end) )
      {
        __in = std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<ActorAbility>>>::operator*(&__for_begin_0);
        _ = std::get<0ul,unsigned int const,std::shared_ptr<ActorAbility>>(__in);
        ability_ptr = std::get<1ul,unsigned int const,std::shared_ptr<ActorAbility>>(__in);
        if ( std::operator!=<ActorAbility>(0LL, ability_ptr) )
        {
          v13 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)ability_ptr);
          v14 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
          ActorAbility::initOverrideMapByOwnerAvatar(v13, v14);
        }
        std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<ActorAbility>>>::operator++(&__for_begin_0);
      }
    }
    v8 = 0;
    std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v2 + 32));
  }
  std::vector<std::pair<unsigned int,unsigned int>>::~vector((std::vector<std::pair<unsigned int,unsigned int>> *const)(v2 + 64));
  result = v8;
  if ( v27 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 572: range 00000000136C1FB0-00000000136C2864
int32_t __cdecl AbilityComp::initTargetAbility(AbilityComp *const this, ScenePtr *p_scene_ptr)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  common::milog::MiLogStream *v5; // rcx
  int32_t v6; // r14d
  bool v7; // r14
  common::milog::MiLogStream *v8; // rcx
  Creature *creature; // rsi
  Creature *v10; // rax
  unsigned __int64 v11; // rax
  common::milog::MiLogStream *v12; // rcx
  Player *v13; // rax
  PlayerAbilityGroupComp *AbilityGroupComp; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  TalentComp *TalentComp; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  EquipComp *EquipComp; // rax
  Player *v19; // rax
  PlayerAbilityGroupComp *v20; // r14
  __gnu_cxx::__normal_iterator<std::pair<unsigned int,unsigned int>*,std::vector<std::pair<unsigned int,unsigned int>> >::reference v21; // rax
  std::pair<unsigned int,unsigned int> *v22; // rdx
  std::tuple_element<1,std::pair<unsigned int,unsigned int> >::type *v23; // rax
  uint32_t v24; // esi
  int32_t result; // eax
  std::vector<std::pair<unsigned int,unsigned int>>::iterator __for_begin; // [rsp+10h] [rbp-170h] BYREF
  std::vector<std::pair<unsigned int,unsigned int>>::iterator __for_end; // [rsp+18h] [rbp-168h] BYREF
  std::vector<std::pair<unsigned int,unsigned int>> *__for_range; // [rsp+20h] [rbp-160h]
  std::tuple_element<0,std::pair<unsigned int,unsigned int> >::type *ability_name_hash; // [rsp+28h] [rbp-158h]
  std::tuple_element<1,std::pair<unsigned int,unsigned int> >::type *override_name_hash; // [rsp+30h] [rbp-150h]
  std::pair<unsigned int,unsigned int> __in; // [rsp+38h] [rbp-148h] BYREF
  std::shared_ptr<Scene> v32; // [rsp+40h] [rbp-140h] BYREF
  common::milog::MiLogStream v33; // [rsp+50h] [rbp-130h] BYREF
  char v34[272]; // [rsp+70h] [rbp-110h] BYREF

  v2 = (unsigned __int64)v34;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(224LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "4 32 16 14 avatar_ptr:573 64 16 14 player_ptr:587 96 24 22 target_ability_vec:580 160 24 21 targ"
                        "et_talent_vec:581";
  *(_QWORD *)(v2 + 16) = AbilityComp::initTargetAbility;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862722] = -219021312;
  v4[536862723] = -234881024;
  v4[536862724] = -218959118;
  v4[536862725] = -218103808;
  v4[536862726] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->creature_);
  toPtr<Avatar,Creature>((Creature *)(v2 + 32));
  if ( std::operator==<Avatar>(0LL, (const std::shared_ptr<Avatar> *)(v2 + 32)) )
  {
    common::milog::MiLogStream::create(
      &v33,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/ability/ability_comp.cpp",
      "initTargetAbility",
      576);
    v5 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
           &v33,
           (const char (*)[25])"creature is not avatar, ");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v5, this->creature_);
    common::milog::MiLogStream::~MiLogStream(&v33);
    v6 = -1;
  }
  else
  {
    std::vector<std::pair<unsigned int,unsigned int>>::vector((std::vector<std::pair<unsigned int,unsigned int>> *const)(v2 + 96));
    std::vector<std::string>::vector((std::vector<std::string> *const)(v2 + 160));
    std::shared_ptr<Scene>::shared_ptr(&v32, p_scene_ptr);
    v7 = AbilityComp::getAllCommonAbility(this, (TargetAbilityVec *)(v2 + 96), &v32) != 0;
    std::shared_ptr<Scene>::~shared_ptr(&v32);
    if ( v7 )
    {
      common::milog::MiLogStream::create(
        &v33,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/ability/ability_comp.cpp",
        "initTargetAbility",
        584);
      v8 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
             &v33,
             (const char (*)[37])"getAllSkillDepotExtraAbilities fails");
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v8, this->creature_);
      common::milog::MiLogStream::~MiLogStream(&v33);
      v6 = -1;
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      creature = this->creature_;
      v10 = creature;
      if ( *(_BYTE *)(((unsigned __int64)creature >> 3) + 0x7FFF8000) )
        v10 = (Creature *)__asan_report_load8(this->creature_);
      v11 = *(_QWORD *)v10->baseclass_0 + 152LL;
      if ( *(_BYTE *)((v11 >> 3) + 0x7FFF8000) )
        v11 = __asan_report_load8(v11);
      (*(void (__fastcall **)(unsigned __int64, Creature *))v11)(v2 + 64, creature);
      if ( std::operator==<Player>(0LL, (const std::shared_ptr<Player> *)(v2 + 64)) )
      {
        common::milog::MiLogStream::create(
          &v33,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/ability/ability_comp.cpp",
          "initTargetAbility",
          590);
        v12 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                &v33,
                (const char (*)[26])"player is null, creature:");
        if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->creature_);
        common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v12, this->creature_);
        common::milog::MiLogStream::~MiLogStream(&v33);
        v6 = -1;
      }
      else
      {
        v13 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
        AbilityGroupComp = Player::getAbilityGroupComp(v13);
        std::shared_ptr<Avatar>::shared_ptr(
          (std::shared_ptr<Avatar> *const)&v32,
          (const std::shared_ptr<Avatar> *)(v2 + 32));
        PlayerAbilityGroupComp::getCurSkillDepotAbilitiesFromAbilityGroup(
          AbilityGroupComp,
          (TargetAbilityVec *)(v2 + 96),
          (AvatarPtr *)&v32);
        std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)&v32);
        v15 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
        TalentComp = Avatar::getTalentComp(v15);
        TalentComp::getAllTargetAbilitiesFromTalentComp(
          TalentComp,
          (TargetAbilityVec *)(v2 + 96),
          &this->target_ability_special_map_);
        v17 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
        EquipComp = Avatar::getEquipComp(v17);
        EquipComp::getAllTargetAbilitiesFromEquipComp(
          EquipComp,
          (TargetAbilityVec *)(v2 + 96),
          &this->target_ability_special_map_);
        v19 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
        v20 = Player::getAbilityGroupComp(v19);
        std::shared_ptr<Avatar>::shared_ptr(
          (std::shared_ptr<Avatar> *const)&v32,
          (const std::shared_ptr<Avatar> *)(v2 + 32));
        PlayerAbilityGroupComp::getAllTargetAbilitiesAndTalentsFromAbilityGroup(
          v20,
          (TargetAbilityVec *)(v2 + 96),
          (TargetTalentVec *)(v2 + 160),
          (AvatarPtr *)&v32);
        std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)&v32);
        __for_range = (std::vector<std::pair<unsigned int,unsigned int>> *)(v2 + 96);
        __for_begin._M_current = std::vector<std::pair<unsigned int,unsigned int>>::begin((std::vector<std::pair<unsigned int,unsigned int>> *const)(v2 + 96))._M_current;
        __for_end._M_current = std::vector<std::pair<unsigned int,unsigned int>>::end((std::vector<std::pair<unsigned int,unsigned int>> *const)(v2 + 96))._M_current;
        while ( __gnu_cxx::operator!=<std::pair<unsigned int,unsigned int> *,std::vector<std::pair<unsigned int,unsigned int>>>(
                  &__for_begin,
                  &__for_end) )
        {
          v21 = __gnu_cxx::__normal_iterator<std::pair<unsigned int,unsigned int> *,std::vector<std::pair<unsigned int,unsigned int>>>::operator*(&__for_begin);
          v22 = v21;
          if ( ((unsigned __int8)v21 & 7) >= *(_BYTE *)(((unsigned __int64)v21 >> 3) + 0x7FFF8000)
            && *(_BYTE *)(((unsigned __int64)v21 >> 3) + 0x7FFF8000) != 0
            || *(_BYTE *)((((unsigned __int64)&v21->second + 3) >> 3) + 0x7FFF8000) != 0
            && (((unsigned __int8)v21 + 7) & 7) >= *(_BYTE *)((((unsigned __int64)&v21->second + 3) >> 3) + 0x7FFF8000) )
          {
            __asan_report_load_n(v21, 8LL);
          }
          __in = *v22;
          ability_name_hash = std::get<0ul,unsigned int,unsigned int>(&__in);
          v23 = std::get<1ul,unsigned int,unsigned int>(&__in);
          override_name_hash = v23;
          if ( *(_BYTE *)(((unsigned __int64)v23 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v23 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v23 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v23);
          }
          v24 = *override_name_hash;
          if ( *(_BYTE *)(((unsigned __int64)ability_name_hash >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)ability_name_hash & 7) + 3) >= *(_BYTE *)(((unsigned __int64)ability_name_hash >> 3)
                                                                                + 0x7FFF8000) )
          {
            __asan_report_load4(ability_name_hash);
          }
          AbilityComp::addTargetAbility(this, *ability_name_hash, v24);
          __gnu_cxx::__normal_iterator<std::pair<unsigned int,unsigned int> *,std::vector<std::pair<unsigned int,unsigned int>>>::operator++(&__for_begin);
        }
        v6 = 0;
      }
      std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v2 + 64));
    }
    std::vector<std::string>::~vector((std::vector<std::string> *const)(v2 + 160));
    std::vector<std::pair<unsigned int,unsigned int>>::~vector((std::vector<std::pair<unsigned int,unsigned int>> *const)(v2 + 96));
  }
  std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v2 + 32));
  result = v6;
  if ( v34 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 605: range 00000000136C2866-00000000136C2FC1
int32_t __cdecl AbilityComp::initTeamEntityAbility(AbilityComp *const this, ScenePtr *p_scene_ptr)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  common::milog::MiLogStream *v5; // rcx
  int32_t v6; // r14d
  bool v7; // r14
  common::milog::MiLogStream *v8; // rcx
  Creature *creature; // rsi
  Creature *v10; // rax
  unsigned __int64 v11; // rax
  common::milog::MiLogStream *v12; // rcx
  Player *v13; // rax
  PlayerAbilityGroupComp *AbilityGroupComp; // r14
  __gnu_cxx::__normal_iterator<std::pair<unsigned int,unsigned int>*,std::vector<std::pair<unsigned int,unsigned int>> >::reference v15; // rax
  std::pair<unsigned int,unsigned int> *v16; // rdx
  std::tuple_element<1,std::pair<unsigned int,unsigned int> >::type *v17; // rax
  uint32_t v18; // esi
  int32_t result; // eax
  std::vector<std::pair<unsigned int,unsigned int>>::iterator __for_begin; // [rsp+10h] [rbp-130h] BYREF
  std::vector<std::pair<unsigned int,unsigned int>>::iterator __for_end; // [rsp+18h] [rbp-128h] BYREF
  std::vector<std::pair<unsigned int,unsigned int>> *__for_range; // [rsp+20h] [rbp-120h]
  std::tuple_element<0,std::pair<unsigned int,unsigned int> >::type *ability_name_hash; // [rsp+28h] [rbp-118h]
  std::tuple_element<1,std::pair<unsigned int,unsigned int> >::type *override_name_hash; // [rsp+30h] [rbp-110h]
  std::pair<unsigned int,unsigned int> __in; // [rsp+38h] [rbp-108h] BYREF
  std::shared_ptr<Scene> v26; // [rsp+40h] [rbp-100h] BYREF
  common::milog::MiLogStream v27; // [rsp+50h] [rbp-F0h] BYREF
  char v28[208]; // [rsp+70h] [rbp-D0h] BYREF

  v2 = (unsigned __int64)v28;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(160LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 32 16 19 team_entity_ptr:606 64 16 14 player_ptr:619 96 24 22 target_ability_vec:613";
  *(_QWORD *)(v2 + 16) = AbilityComp::initTeamEntityAbility;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862722] = -219021312;
  v4[536862723] = -218103808;
  v4[536862724] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->creature_);
  toPtr<AvatarTeamEntity,Creature>((Creature *)(v2 + 32));
  if ( std::operator==<AvatarTeamEntity>(0LL, (const std::shared_ptr<AvatarTeamEntity> *)(v2 + 32)) )
  {
    common::milog::MiLogStream::create(
      &v27,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/ability/ability_comp.cpp",
      "initTeamEntityAbility",
      609);
    v5 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
           &v27,
           (const char (*)[35])"creature is not AvatarTeamEntity, ");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v5, this->creature_);
    common::milog::MiLogStream::~MiLogStream(&v27);
    v6 = -1;
  }
  else
  {
    std::vector<std::pair<unsigned int,unsigned int>>::vector((std::vector<std::pair<unsigned int,unsigned int>> *const)(v2 + 96));
    std::shared_ptr<Scene>::shared_ptr(&v26, p_scene_ptr);
    v7 = AbilityComp::getAllCommonAbility(this, (TargetAbilityVec *)(v2 + 96), &v26) != 0;
    std::shared_ptr<Scene>::~shared_ptr(&v26);
    if ( v7 )
    {
      common::milog::MiLogStream::create(
        &v27,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "initTeamEntityAbility",
        616);
      v8 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
             &v27,
             (const char (*)[37])"getAllSkillDepotExtraAbilities fails");
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v8, this->creature_);
      common::milog::MiLogStream::~MiLogStream(&v27);
      v6 = -1;
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      creature = this->creature_;
      v10 = creature;
      if ( *(_BYTE *)(((unsigned __int64)creature >> 3) + 0x7FFF8000) )
        v10 = (Creature *)__asan_report_load8(this->creature_);
      v11 = *(_QWORD *)v10->baseclass_0 + 152LL;
      if ( *(_BYTE *)((v11 >> 3) + 0x7FFF8000) )
        v11 = __asan_report_load8(v11);
      (*(void (__fastcall **)(unsigned __int64, Creature *))v11)(v2 + 64, creature);
      if ( std::operator==<Player>(0LL, (const std::shared_ptr<Player> *)(v2 + 64)) )
      {
        common::milog::MiLogStream::create(
          &v27,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/ability/ability_comp.cpp",
          "initTeamEntityAbility",
          622);
        v12 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                &v27,
                (const char (*)[26])"player is null, creature:");
        if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->creature_);
        common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v12, this->creature_);
        common::milog::MiLogStream::~MiLogStream(&v27);
        v6 = -1;
      }
      else
      {
        v13 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
        AbilityGroupComp = Player::getAbilityGroupComp(v13);
        std::shared_ptr<AvatarTeamEntity>::shared_ptr(
          (std::shared_ptr<AvatarTeamEntity> *const)&v26,
          (const std::shared_ptr<AvatarTeamEntity> *)(v2 + 32));
        PlayerAbilityGroupComp::getTeamTargetAbilitiesFromAbilityGroup(
          AbilityGroupComp,
          (TargetAbilityVec *)(v2 + 96),
          (AvatarTeamEntityPtr *)&v26);
        std::shared_ptr<AvatarTeamEntity>::~shared_ptr((std::shared_ptr<AvatarTeamEntity> *const)&v26);
        __for_range = (std::vector<std::pair<unsigned int,unsigned int>> *)(v2 + 96);
        __for_begin._M_current = std::vector<std::pair<unsigned int,unsigned int>>::begin((std::vector<std::pair<unsigned int,unsigned int>> *const)(v2 + 96))._M_current;
        __for_end._M_current = std::vector<std::pair<unsigned int,unsigned int>>::end((std::vector<std::pair<unsigned int,unsigned int>> *const)(v2 + 96))._M_current;
        while ( __gnu_cxx::operator!=<std::pair<unsigned int,unsigned int> *,std::vector<std::pair<unsigned int,unsigned int>>>(
                  &__for_begin,
                  &__for_end) )
        {
          v15 = __gnu_cxx::__normal_iterator<std::pair<unsigned int,unsigned int> *,std::vector<std::pair<unsigned int,unsigned int>>>::operator*(&__for_begin);
          v16 = v15;
          if ( ((unsigned __int8)v15 & 7) >= *(_BYTE *)(((unsigned __int64)v15 >> 3) + 0x7FFF8000)
            && *(_BYTE *)(((unsigned __int64)v15 >> 3) + 0x7FFF8000) != 0
            || *(_BYTE *)((((unsigned __int64)&v15->second + 3) >> 3) + 0x7FFF8000) != 0
            && (((unsigned __int8)v15 + 7) & 7) >= *(_BYTE *)((((unsigned __int64)&v15->second + 3) >> 3) + 0x7FFF8000) )
          {
            __asan_report_load_n(v15, 8LL);
          }
          __in = *v16;
          ability_name_hash = std::get<0ul,unsigned int,unsigned int>(&__in);
          v17 = std::get<1ul,unsigned int,unsigned int>(&__in);
          override_name_hash = v17;
          if ( *(_BYTE *)(((unsigned __int64)v17 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v17 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v17 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v17);
          }
          v18 = *override_name_hash;
          if ( *(_BYTE *)(((unsigned __int64)ability_name_hash >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)ability_name_hash & 7) + 3) >= *(_BYTE *)(((unsigned __int64)ability_name_hash >> 3)
                                                                                + 0x7FFF8000) )
          {
            __asan_report_load4(ability_name_hash);
          }
          AbilityComp::addTargetAbility(this, *ability_name_hash, v18);
          __gnu_cxx::__normal_iterator<std::pair<unsigned int,unsigned int> *,std::vector<std::pair<unsigned int,unsigned int>>>::operator++(&__for_begin);
        }
        v6 = 0;
      }
      std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v2 + 64));
    }
    std::vector<std::pair<unsigned int,unsigned int>>::~vector((std::vector<std::pair<unsigned int,unsigned int>> *const)(v2 + 96));
  }
  std::shared_ptr<AvatarTeamEntity>::~shared_ptr((std::shared_ptr<AvatarTeamEntity> *const)(v2 + 32));
  result = v6;
  if ( v28 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 636: range 00000000136C2FC2-00000000136C3284
int32_t __cdecl AbilityComp::getAllCommonAbility(
        AbilityComp *const this,
        TargetAbilityVec *target_ability_vec,
        ScenePtr *p_scene_ptr)
{
  common::milog::MiLogStream *v3; // rcx
  bool v5; // bl
  common::milog::MiLogStream *v6; // rcx
  std::shared_ptr<Scene> v8; // [rsp+20h] [rbp-40h] BYREF
  common::milog::MiLogStream v9; // [rsp+30h] [rbp-30h] BYREF

  if ( AbilityComp::getAllPreDynamicConfigAbilities(this, target_ability_vec) )
  {
    common::milog::MiLogStream::create(
      &v9,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "getAllCommonAbility",
      639);
    v3 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
           &v9,
           (const char (*)[38])"getAllPreDynamicConfigAbilities fails");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
LABEL_4:
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v3, this->creature_);
    common::milog::MiLogStream::~MiLogStream(&v9);
    return -1;
  }
  if ( AbilityComp::getAllStaticConfigAbilities(this, target_ability_vec) )
  {
    common::milog::MiLogStream::create(
      &v9,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "getAllCommonAbility",
      644);
    v3 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
           &v9,
           (const char (*)[34])"getAllStaticConfigAbilities fails");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    goto LABEL_4;
  }
  std::shared_ptr<Scene>::shared_ptr(&v8, p_scene_ptr);
  v5 = AbilityComp::getAllDynamicConfigAbilities(this, target_ability_vec, &v8) != 0;
  std::shared_ptr<Scene>::~shared_ptr(&v8);
  if ( !v5 )
    return 0;
  common::milog::MiLogStream::create(
    &v9,
    &common::milog::MiLogDefault::default_log_obj_,
    0x13u,
    "./src/ability/ability_comp.cpp",
    "getAllCommonAbility",
    649);
  v6 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
         &v9,
         (const char (*)[35])"getAllDynamicConfigAbilities fails");
  if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->creature_);
  common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v6, this->creature_);
  common::milog::MiLogStream::~MiLogStream(&v9);
  return -1;
};

// Line 657: range 00000000136C3286-00000000136C3C24
__int64 __fastcall AbilityComp::addTargetAbility(
        AbilityComp *const this,
        uint32_t ability_name_hash,
        uint32_t override_name_hash)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  unsigned int *v6; // rcx
  std::pair<unsigned int,unsigned int> *v7; // r8
  std::pair<std::__detail::_Node_iterator<std::pair<unsigned int const,std::pair<unsigned int,unsigned int> >,false,false>,bool> v8; // rax
  unsigned __int64 *v9; // rcx
  unsigned int *v10; // r8
  std::pair<std::__detail::_Node_iterator<std::pair<long unsigned int const,unsigned int>,false,false>,bool> v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // r14
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  const std::string *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // r14
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  const std::string *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rcx
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v31; // r14
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v32; // rax
  const std::string *v33; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v34; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v35; // r14
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v36; // rax
  const std::string *v37; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v38; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v39; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v40; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v41; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v42; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v43; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v44; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v45; // r14
  Creature *creature; // rsi
  unsigned __int64 *v47; // rax
  unsigned __int64 v48; // rax
  Player *v49; // rax
  __int64 result; // rax
  std::allocator<char> __a; // [rsp+15h] [rbp-14Bh] BYREF
  bool ability_id_inserted; // [rsp+16h] [rbp-14Ah]
  bool ability_name_inserted; // [rsp+17h] [rbp-149h]
  std::pair<unsigned int,unsigned int> CombinedHash; // [rsp+18h] [rbp-148h] BYREF
  std::shared_ptr<Config> v56; // [rsp+20h] [rbp-140h] BYREF
  std::string str; // [rsp+30h] [rbp-130h] BYREF
  char v58[272]; // [rsp+50h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v58;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 48 4 14 ability_id:664 64 4 21 ability_name_hash:656 80 4 22 override_name_hash:656 96 16 7 os"
                        "s:676 128 16 14 player_ptr:683 160 32 5 s:681";
  *(_QWORD *)(v3 + 16) = AbilityComp::addTargetAbility;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862723] = -219021312;
  v5[536862724] = -219021312;
  v5[536862726] = -202116109;
  *(_DWORD *)(v3 + 64) = ability_name_hash;
  *(_DWORD *)(v3 + 80) = override_name_hash;
  if ( !(_BYTE)`guard variable for'AbilityComp::addTargetAbility(unsigned int,unsigned int)::default_override_name_hash
    && __cxa_guard_acquire(&`guard variable for'AbilityComp::addTargetAbility(unsigned int,unsigned int)::default_override_name_hash) )
  {
    std::allocator<char>::allocator(&__a);
    std::string::basic_string<std::allocator<char>>(&str, "Default", &__a);
    AbilityComp::addTargetAbility(unsigned int,unsigned int)::default_override_name_hash = getStringHash(&str);
    __cxa_guard_release(&`guard variable for'AbilityComp::addTargetAbility(unsigned int,unsigned int)::default_override_name_hash);
    std::string::~string(&str);
    std::allocator<char>::~allocator(&__a);
  }
  if ( !*(_DWORD *)(v3 + 80) )
    *(_DWORD *)(v3 + 80) = AbilityComp::addTargetAbility(unsigned int,unsigned int)::default_override_name_hash;
  if ( *(_BYTE *)(((unsigned __int64)&this->last_ability_id_ >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->last_ability_id_ >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->last_ability_id_);
  }
  *(_DWORD *)(v3 + 48) = ++this->last_ability_id_;
  std::list<unsigned int>::push_back(
    &this->target_ability_id_list_,
    (const std::list<unsigned int>::value_type *)(v3 + 48));
  CombinedHash = std::make_pair<unsigned int &,unsigned int &>((unsigned int *)(v3 + 64), (unsigned int *)(v3 + 80));
  v8 = std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>>::emplace<unsigned int &,std::pair<unsigned int,unsigned int>>(
         &this->target_ability_id_map_,
         (unsigned int *)(v3 + 48),
         &CombinedHash,
         v6,
         v7);
  ability_id_inserted = v8.second;
  CombinedHash = (std::pair<unsigned int,unsigned int>)getCombinedHash(*(_DWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
  v11 = std::unordered_map<unsigned long,unsigned int>::emplace<unsigned long,unsigned int &>(
          &this->target_ability_name_map_,
          (unsigned __int64 *)&CombinedHash,
          (unsigned int *)(v3 + 48),
          v9,
          v10);
  ability_name_inserted = v11.second;
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)&str,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/ability/ability_comp.cpp",
    "addTargetAbility",
    669);
  v12 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
          (common::milog::MiLogStream *const)&str,
          (const char (*)[19])"ability_name_hash:");
  v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v3 + 64));
  v14 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v13, (const char (*)[15])" ability_name:");
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v56);
  v15 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v56);
  v16 = JsonConfigMgr::getAbilityStringFromHash[abi:cxx11](&v15->design_config.json_config_mgr, *(_DWORD *)(v3 + 64));
  v17 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v14, v16);
  v18 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(v17, (const char (*)[21])" override_name_hash:");
  v19 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, (const unsigned int *)(v3 + 80));
  v20 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v19, (const char (*)[16])" override_name:");
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v3 + 128));
  v21 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
  v22 = JsonConfigMgr::getAbilityStringFromHash[abi:cxx11](&v21->design_config.json_config_mgr, *(_DWORD *)(v3 + 80));
  v23 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v20, v22);
  v24 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v23, " ability_id:");
  v25 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v24, (const unsigned int *)(v3 + 48));
  v26 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(v25, " ability_id_inserted:");
  v27 = common::milog::MiLogStream::operator<<(v26, ability_id_inserted);
  v28 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(v27, " ability_name_inserted:");
  v29 = common::milog::MiLogStream::operator<<(v28, ability_name_inserted);
  v30 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v29, (const char (*)[11])" creature:");
  if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->creature_);
  common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v30, this->creature_);
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 128));
  std::shared_ptr<Config>::~shared_ptr(&v56);
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&str);
  if ( !ability_id_inserted || !ability_name_inserted )
  {
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 96));
    v31 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
            (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 96),
            "duplicate ability:");
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v56);
    v32 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v56);
    v33 = JsonConfigMgr::getAbilityStringFromHash[abi:cxx11](&v32->design_config.json_config_mgr, *(_DWORD *)(v3 + 64));
    v34 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v31, v33);
    v35 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v34, " override:");
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)(v3 + 128));
    v36 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
    v37 = JsonConfigMgr::getAbilityStringFromHash[abi:cxx11](&v36->design_config.json_config_mgr, *(_DWORD *)(v3 + 80));
    v38 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v35, v37);
    v39 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v38, aAbilityId_0[0]);
    v40 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v39, *(_DWORD *)(v3 + 48));
    v41 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v40, aAbilityIdInser[0]);
    v42 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v41, ability_id_inserted);
    v43 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v42, aAbilityNameIns[0]);
    v44 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v43, ability_name_inserted);
    v45 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v44, " creature:");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    creature = this->creature_;
    v47 = (unsigned __int64 *)creature;
    if ( *(_BYTE *)(((unsigned __int64)creature >> 3) + 0x7FFF8000) )
      v47 = (unsigned __int64 *)__asan_report_load8(this->creature_);
    v48 = *v47;
    if ( *(_BYTE *)((v48 >> 3) + 0x7FFF8000) )
      v48 = __asan_report_load8(v48);
    (*(void (__fastcall **)(std::string *, Creature *))v48)(&str, creature);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v45, &str);
    std::string::~string(&str);
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 128));
    std::shared_ptr<Config>::~shared_ptr(&v56);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
      (std::string *)(v3 + 160),
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 96));
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&str,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/ability/ability_comp.cpp",
      "addTargetAbility",
      682);
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
      (common::milog::MiLogStream *const)&str,
      (const std::string *)(v3 + 160));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&str);
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    Entity::findSceneOwnPlayer((const Entity *const)(v3 + 128));
    if ( std::operator!=<Player>(0LL, (const std::shared_ptr<Player> *)(v3 + 128)) )
    {
      v49 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
      Player::notifyGMServerLog(v49, SERVER_LOG_NONE, LOG_LEVEL_ERROR_0, (const std::string *)(v3 + 160));
    }
    std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v3 + 128));
    std::string::~string((void *)(v3 + 160));
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 96));
  }
  result = 0LL;
  if ( v58 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 693: range 00000000136C3C26-00000000136C41B3
__int64 __fastcall AbilityComp::removeTargetAbility(
        AbilityComp *const this,
        uint32_t ability_name_hash,
        uint32_t override_name_hash)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::list<unsigned int>::size_type v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // r14
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  const std::string *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // r14
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  const std::string *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rcx
  __int64 result; // rax
  std::allocator<char> __a; // [rsp+15h] [rbp-11Bh] BYREF
  bool ability_id_removed; // [rsp+16h] [rbp-11Ah]
  bool ability_name_removed; // [rsp+17h] [rbp-119h]
  size_t old_size; // [rsp+18h] [rbp-118h]
  std::shared_ptr<Config> v34; // [rsp+20h] [rbp-110h] BYREF
  std::shared_ptr<Config> v35; // [rsp+30h] [rbp-100h] BYREF
  std::string str; // [rsp+40h] [rbp-F0h] BYREF
  char v37[208]; // [rsp+60h] [rbp-D0h] BYREF

  v3 = (unsigned __int64)v37;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(160LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 48 4 14 ability_id:701 64 4 21 ability_name_hash:692 80 4 22 override_name_hash:692 96 8 30 co"
                        "mbined_ability_name_hash:700 128 8 17 removed_count:706";
  *(_QWORD *)(v3 + 16) = AbilityComp::removeTargetAbility;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862723] = -218959360;
  v5[536862724] = -202116352;
  *(_DWORD *)(v3 + 64) = ability_name_hash;
  *(_DWORD *)(v3 + 80) = override_name_hash;
  if ( !(_BYTE)`guard variable for'AbilityComp::removeTargetAbility(unsigned int,unsigned int)::default_override_name_hash
    && __cxa_guard_acquire(&`guard variable for'AbilityComp::removeTargetAbility(unsigned int,unsigned int)::default_override_name_hash) )
  {
    std::allocator<char>::allocator(&__a);
    std::string::basic_string<std::allocator<char>>(&str, "Default", &__a);
    AbilityComp::removeTargetAbility(unsigned int,unsigned int)::default_override_name_hash = getStringHash(&str);
    __cxa_guard_release(&`guard variable for'AbilityComp::removeTargetAbility(unsigned int,unsigned int)::default_override_name_hash);
    std::string::~string(&str);
    std::allocator<char>::~allocator(&__a);
  }
  if ( !*(_DWORD *)(v3 + 80) )
    *(_DWORD *)(v3 + 80) = AbilityComp::removeTargetAbility(unsigned int,unsigned int)::default_override_name_hash;
  *(_QWORD *)(v3 + 96) = getCombinedHash(*(_DWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
  *(_DWORD *)(v3 + 48) = common::tools::MiscUtils::findMapWithDefaultValue<std::unordered_map<unsigned long,unsigned int>>(
                           &this->target_ability_name_map_,
                           (const std::unordered_map<long unsigned int,unsigned int>::key_type *)(v3 + 96),
                           0);
  ability_id_removed = std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>>::erase(
                         &this->target_ability_id_map_,
                         (const std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>>::key_type *)(v3 + 48)) != 0;
  ability_name_removed = std::unordered_map<unsigned long,unsigned int>::erase(
                           &this->target_ability_name_map_,
                           (const std::unordered_map<long unsigned int,unsigned int>::key_type *)(v3 + 96)) != 0;
  old_size = std::list<unsigned int>::size(&this->target_ability_id_list_);
  std::list<unsigned int>::remove(
    &this->target_ability_id_list_,
    (const std::list<unsigned int>::value_type *)(v3 + 48));
  v6 = std::list<unsigned int>::size(&this->target_ability_id_list_);
  *(_QWORD *)(v3 + 128) = old_size - v6;
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)&str,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/ability/ability_comp.cpp",
    "removeTargetAbility",
    708);
  v7 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
         (common::milog::MiLogStream *const)&str,
         (const char (*)[19])"ability_name_hash:");
  v8 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v3 + 64));
  v9 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v8, (const char (*)[15])" ability_name:");
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v34);
  v10 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v34);
  v11 = JsonConfigMgr::getAbilityStringFromHash[abi:cxx11](&v10->design_config.json_config_mgr, *(_DWORD *)(v3 + 64));
  v12 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v9, v11);
  v13 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(v12, (const char (*)[21])" override_name_hash:");
  v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v3 + 80));
  v15 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v14, (const char (*)[16])" override_name:");
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v35);
  v16 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v35);
  v17 = JsonConfigMgr::getAbilityStringFromHash[abi:cxx11](&v16->design_config.json_config_mgr, *(_DWORD *)(v3 + 80));
  v18 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v15, v17);
  v19 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v18, " ability_id:");
  v20 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, (const unsigned int *)(v3 + 48));
  v21 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(v20, (const char (*)[21])" ability_id_removed:");
  v22 = common::milog::MiLogStream::operator<<(v21, ability_id_removed);
  v23 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
          v22,
          (const char (*)[23])" ability_name_removed:");
  v24 = common::milog::MiLogStream::operator<<(v23, ability_name_removed);
  v25 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v24, (const char (*)[16])" removed_count:");
  v26 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
          v25,
          (const unsigned __int64 *)(v3 + 128));
  v27 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v26, (const char (*)[11])" creature:");
  if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->creature_);
  common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v27, this->creature_);
  std::shared_ptr<Config>::~shared_ptr(&v35);
  std::shared_ptr<Config>::~shared_ptr(&v34);
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&str);
  result = 0LL;
  if ( v37 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 718: range 00000000136C41B4-00000000136C4530
int32_t __cdecl AbilityComp::addAbilitySpecial(AbilityComp *const this, BaseTalentMixin *base_talent_mixin)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  common::milog::MiLogStream *v5; // rcx
  int32_t v6; // r14d
  std::__shared_ptr_access<TalentModifyAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  std::__shared_ptr_access<TalentModifyAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  common::milog::MiLogStream *v9; // rcx
  int32_t result; // eax
  std::unordered_map<unsigned int,std::unordered_map<unsigned int,std::list<std::weak_ptr<BaseTalentMixin>>>>::key_type __k; // [rsp+1Ch] [rbp-B4h] BYREF
  std::unordered_map<unsigned int,std::list<std::weak_ptr<BaseTalentMixin>>> *ability_special_map; // [rsp+20h] [rbp-B0h]
  std::list<std::weak_ptr<BaseTalentMixin>> *talent_mixin_list; // [rsp+28h] [rbp-A8h]
  std::weak_ptr<BaseTalentMixin> __x; // [rsp+30h] [rbp-A0h] BYREF
  common::milog::MiLogStream v15; // [rsp+40h] [rbp-90h] BYREF
  char v16[112]; // [rsp+60h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 20 talent_mixin_ptr:719";
  *(_QWORD *)(v2 + 16) = AbilityComp::addAbilitySpecial;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  toPtr<TalentModifyAbilityMixin,BaseTalentMixin>((BaseTalentMixin *)(v2 + 32));
  if ( std::operator==<TalentModifyAbilityMixin>(0LL, (const std::shared_ptr<TalentModifyAbilityMixin> *)(v2 + 32)) )
  {
    common::milog::MiLogStream::create(
      &v15,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/ability/ability_comp.cpp",
      "addAbilitySpecial",
      722);
    v5 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
           &v15,
           (const char (*)[32])"talent_mixin is null, creature:");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v5, this->creature_);
    common::milog::MiLogStream::~MiLogStream(&v15);
    v6 = -1;
  }
  else
  {
    v7 = std::__shared_ptr_access<TalentModifyAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TalentModifyAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    __k = TalentModifyAbilityMixin::getAbilityNameHash(v7);
    ability_special_map = std::unordered_map<unsigned int,std::unordered_map<unsigned int,std::list<std::weak_ptr<BaseTalentMixin>>>>::operator[](
                            &this->target_ability_special_map_,
                            &__k);
    v8 = std::__shared_ptr_access<TalentModifyAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TalentModifyAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    __k = TalentModifyAbilityMixin::getParamSpecialHash(v8);
    talent_mixin_list = std::unordered_map<unsigned int,std::list<std::weak_ptr<BaseTalentMixin>>>::operator[](
                          ability_special_map,
                          &__k);
    if ( std::list<std::weak_ptr<BaseTalentMixin>>::size(talent_mixin_list) <= 0x64 )
    {
      std::weak_ptr<BaseTalentMixin>::weak_ptr<TalentModifyAbilityMixin,void>(
        &__x,
        (const std::shared_ptr<TalentModifyAbilityMixin> *)(v2 + 32));
      std::list<std::weak_ptr<BaseTalentMixin>>::push_back(talent_mixin_list, &__x);
      std::weak_ptr<BaseTalentMixin>::~weak_ptr(&__x);
      v6 = 0;
    }
    else
    {
      common::milog::MiLogStream::create(
        &v15,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/ability/ability_comp.cpp",
        "addAbilitySpecial",
        729);
      v9 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
             &v15,
             (const char (*)[41])"talent_mixin_list is too long, creature:");
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v9, this->creature_);
      common::milog::MiLogStream::~MiLogStream(&v15);
      v6 = -1;
    }
  }
  std::shared_ptr<TalentModifyAbilityMixin>::~shared_ptr((std::shared_ptr<TalentModifyAbilityMixin> *const)(v2 + 32));
  result = v6;
  if ( v16 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 737: range 00000000136C45D8-00000000136C48E1
int32_t __cdecl AbilityComp::removeAbilitySpecial(AbilityComp *const this, BaseTalentMixin *base_talent_mixin)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  common::milog::MiLogStream *v5; // rcx
  int32_t v6; // r14d
  std::__shared_ptr_access<TalentModifyAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  std::__shared_ptr_access<TalentModifyAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  std::__shared_ptr_access<TalentModifyAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  std::__shared_ptr_access<TalentModifyAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  int32_t result; // eax
  std::unordered_map<unsigned int,std::unordered_map<unsigned int,std::list<std::weak_ptr<BaseTalentMixin>>>>::key_type __k; // [rsp+1Ch] [rbp-A4h] BYREF
  std::unordered_map<unsigned int,std::list<std::weak_ptr<BaseTalentMixin>>> *ability_special_map; // [rsp+20h] [rbp-A0h]
  std::list<std::weak_ptr<BaseTalentMixin>> *talent_mixin_list; // [rsp+28h] [rbp-98h]
  common::milog::MiLogStream v15; // [rsp+30h] [rbp-90h] BYREF
  char v16[112]; // [rsp+50h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 20 talent_mixin_ptr:738";
  *(_QWORD *)(v2 + 16) = AbilityComp::removeAbilitySpecial;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  toPtr<TalentModifyAbilityMixin,BaseTalentMixin>((BaseTalentMixin *)(v2 + 32));
  if ( std::operator==<TalentModifyAbilityMixin>(0LL, (const std::shared_ptr<TalentModifyAbilityMixin> *)(v2 + 32)) )
  {
    common::milog::MiLogStream::create(
      &v15,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/ability/ability_comp.cpp",
      "removeAbilitySpecial",
      741);
    v5 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
           &v15,
           (const char (*)[32])"talent_mixin is null, creature:");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v5, this->creature_);
    common::milog::MiLogStream::~MiLogStream(&v15);
    v6 = -1;
  }
  else
  {
    v7 = std::__shared_ptr_access<TalentModifyAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TalentModifyAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    __k = TalentModifyAbilityMixin::getAbilityNameHash(v7);
    ability_special_map = std::unordered_map<unsigned int,std::unordered_map<unsigned int,std::list<std::weak_ptr<BaseTalentMixin>>>>::operator[](
                            &this->target_ability_special_map_,
                            &__k);
    v8 = std::__shared_ptr_access<TalentModifyAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TalentModifyAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    __k = TalentModifyAbilityMixin::getParamSpecialHash(v8);
    talent_mixin_list = std::unordered_map<unsigned int,std::list<std::weak_ptr<BaseTalentMixin>>>::operator[](
                          ability_special_map,
                          &__k);
    std::list<std::weak_ptr<BaseTalentMixin>>::remove_if<AbilityComp::removeAbilitySpecial(BaseTalentMixin&)::{lambda(std::weak_ptr<BaseTalentMixin> const&)#1}>(
      talent_mixin_list,
      (AbilityComp::removeAbilitySpecial::<lambda(const BaseTalentMixinWtr&)>)(v2 + 32));
    if ( std::list<std::weak_ptr<BaseTalentMixin>>::empty(talent_mixin_list) )
    {
      v9 = std::__shared_ptr_access<TalentModifyAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TalentModifyAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
      __k = TalentModifyAbilityMixin::getParamSpecialHash(v9);
      std::unordered_map<unsigned int,std::list<std::weak_ptr<BaseTalentMixin>>>::erase(ability_special_map, &__k);
    }
    if ( std::unordered_map<unsigned int,std::list<std::weak_ptr<BaseTalentMixin>>>::empty(ability_special_map) )
    {
      v10 = std::__shared_ptr_access<TalentModifyAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TalentModifyAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
      __k = TalentModifyAbilityMixin::getAbilityNameHash(v10);
      std::unordered_map<unsigned int,std::unordered_map<unsigned int,std::list<std::weak_ptr<BaseTalentMixin>>>>::erase(
        &this->target_ability_special_map_,
        &__k);
    }
    v6 = 0;
  }
  std::shared_ptr<TalentModifyAbilityMixin>::~shared_ptr((std::shared_ptr<TalentModifyAbilityMixin> *const)(v2 + 32));
  result = v6;
  if ( v16 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 746: range 00000000136C4532-00000000136C45D6
bool __cdecl AbilityComp::removeAbilitySpecial(BaseTalentMixin &)::{lambda(std::weak_ptr<BaseTalentMixin> const&)#1}::operator()(
        const AbilityComp::removeAbilitySpecial::<lambda(const BaseTalentMixinWtr&)> *const __closure,
        const BaseTalentMixinWtr *talent_mixin_wtr)
{
  char v2; // r12
  std::shared_ptr<TalentModifyAbilityMixin> *talent_mixin_ptr; // rbx
  bool v4; // bl
  std::weak_ptr<BaseTalentMixin> v6; // [rsp+10h] [rbp-20h] BYREF

  v2 = 0;
  if ( std::__weak_ptr<BaseTalentMixin,(__gnu_cxx::_Lock_policy)2>::expired(talent_mixin_wtr) )
    goto LABEL_5;
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8(__closure);
  talent_mixin_ptr = __closure->__talent_mixin_ptr;
  std::weak_ptr<BaseTalentMixin>::lock(&v6);
  v2 = 1;
  if ( std::operator==<BaseTalentMixin,TalentModifyAbilityMixin>(
         (const std::shared_ptr<BaseTalentMixin> *)&v6,
         talent_mixin_ptr) )
  {
LABEL_5:
    v4 = 1;
  }
  else
  {
    v4 = 0;
  }
  if ( v2 )
    std::shared_ptr<BaseTalentMixin>::~shared_ptr((std::shared_ptr<BaseTalentMixin> *const)&v6);
  return v4;
};

// Line 763: range 00000000136C48E2-00000000136C4C21
void __cdecl AbilityComp::getProtoAbilityControlBlock(
        AbilityComp *const this,
        proto::AbilityControlBlock *proto_ability_control_block)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  int v5; // eax
  std::_List_iterator<unsigned int>::reference v6; // rax
  _DWORD *v7; // rdx
  std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>>::mapped_type *v8; // rax
  std::pair<unsigned int,unsigned int> *v9; // rdx
  std::list<unsigned int>::iterator __for_begin; // [rsp+10h] [rbp-A0h] BYREF
  std::list<unsigned int>::iterator __for_end; // [rsp+18h] [rbp-98h] BYREF
  google::protobuf::RepeatedPtrField<proto::AbilityEmbryo> *proto_ability_embryo_list; // [rsp+20h] [rbp-90h]
  std::list<unsigned int> *__for_range; // [rsp+28h] [rbp-88h]
  std::tuple_element<0,std::pair<unsigned int,unsigned int> >::type *ability_name_hash; // [rsp+30h] [rbp-80h]
  std::tuple_element<1,std::pair<unsigned int,unsigned int> >::type *override_name_hash; // [rsp+38h] [rbp-78h]
  proto::AbilityEmbryo *proto_ability_embryo; // [rsp+40h] [rbp-70h]
  std::pair<unsigned int,unsigned int> __in; // [rsp+48h] [rbp-68h] BYREF
  char v18[96]; // [rsp+50h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 ability_id:766";
  *(_QWORD *)(v2 + 16) = AbilityComp::getProtoAbilityControlBlock;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  proto_ability_embryo_list = proto::AbilityControlBlock::mutable_ability_embryo_list(proto_ability_control_block);
  v5 = std::list<unsigned int>::size(&this->target_ability_id_list_);
  google::protobuf::RepeatedPtrField<proto::AbilityEmbryo>::Reserve(proto_ability_embryo_list, v5);
  __for_range = &this->target_ability_id_list_;
  __for_begin._M_node = std::list<unsigned int>::begin(&this->target_ability_id_list_)._M_node;
  __for_end._M_node = std::list<unsigned int>::end(&this->target_ability_id_list_)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v6 = std::_List_iterator<unsigned int>::operator*(&__for_begin);
    v7 = v6;
    if ( *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v6 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v6);
    }
    *(_DWORD *)(v2 + 32) = *v7;
    v8 = std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>>::operator[](
           &this->target_ability_id_map_,
           (const std::unordered_map<unsigned int,std::pair<unsigned int,unsigned int>>::key_type *)(v2 + 32));
    v9 = v8;
    if ( ((unsigned __int8)v8 & 7) >= *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000)
      && *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) != 0
      || *(_BYTE *)((((unsigned __int64)&v8->second + 3) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)v8 + 7) & 7) >= *(_BYTE *)((((unsigned __int64)&v8->second + 3) >> 3) + 0x7FFF8000) )
    {
      __asan_report_load_n(v8, 8LL);
    }
    __in = *v9;
    ability_name_hash = std::get<0ul,unsigned int,unsigned int>(&__in);
    override_name_hash = std::get<1ul,unsigned int,unsigned int>(&__in);
    proto_ability_embryo = google::protobuf::RepeatedPtrField<proto::AbilityEmbryo>::Add(proto_ability_embryo_list);
    proto::AbilityEmbryo::set_ability_id(proto_ability_embryo, *(_DWORD *)(v2 + 32));
    if ( *(_BYTE *)(((unsigned __int64)ability_name_hash >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)ability_name_hash & 7) + 3) >= *(_BYTE *)(((unsigned __int64)ability_name_hash >> 3)
                                                                          + 0x7FFF8000) )
    {
      __asan_report_load4(ability_name_hash);
    }
    proto::AbilityEmbryo::set_ability_name_hash(proto_ability_embryo, *ability_name_hash);
    if ( *(_BYTE *)(((unsigned __int64)override_name_hash >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)override_name_hash & 7) + 3) >= *(_BYTE *)(((unsigned __int64)override_name_hash >> 3)
                                                                           + 0x7FFF8000) )
    {
      __asan_report_load4(override_name_hash);
    }
    proto::AbilityEmbryo::set_ability_override_name_hash(proto_ability_embryo, *override_name_hash);
    std::_List_iterator<unsigned int>::operator++(&__for_begin);
  }
  if ( v18 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 778: range 00000000136C4C22-00000000136C5173
void __cdecl AbilityComp::refreshAbilityOnGuardFinish(AbilityComp *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  Creature *creature; // rsi
  Creature *v5; // rax
  unsigned __int64 v6; // rax
  common::milog::MiLogStream *v7; // rcx
  uint32_t EntityId; // eax
  proto::AbilityControlBlock *v9; // rdx
  Player *v10; // rax
  char v11[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 32 16 14 player_ptr:791 64 32 10 notify:803";
  *(_QWORD *)(v1 + 16) = AbilityComp::refreshAbilityOnGuardFinish;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -219021312;
  v3[536862723] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)&this->is_guarded_ >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)this + 18) & 7) >= *(_BYTE *)(((unsigned __int64)&this->is_guarded_ >> 3) + 0x7FFF8000) )
  {
    __asan_report_load1(&this->is_guarded_);
  }
  if ( this->is_guarded_ )
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->is_guarded_ >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)this + 18) & 7) >= *(_BYTE *)(((unsigned __int64)&this->is_guarded_ >> 3) + 0x7FFF8000) )
    {
      __asan_report_store1(&this->is_guarded_);
    }
    this->is_guarded_ = 0;
    if ( *(_BYTE *)(((unsigned __int64)&this->is_need_refresh_ >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)this + 19) & 7) >= *(_BYTE *)(((unsigned __int64)&this->is_need_refresh_ >> 3) + 0x7FFF8000) )
    {
      __asan_report_load1(&this->is_need_refresh_);
    }
    if ( this->is_need_refresh_ )
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->is_need_refresh_ >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)this + 19) & 7) >= *(_BYTE *)(((unsigned __int64)&this->is_need_refresh_ >> 3) + 0x7FFF8000) )
      {
        __asan_report_store1(&this->is_need_refresh_);
      }
      this->is_need_refresh_ = 0;
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      creature = this->creature_;
      v5 = creature;
      if ( *(_BYTE *)(((unsigned __int64)creature >> 3) + 0x7FFF8000) )
        v5 = (Creature *)__asan_report_load8(this->creature_);
      v6 = *(_QWORD *)v5->baseclass_0 + 152LL;
      if ( *(_BYTE *)((v6 >> 3) + 0x7FFF8000) )
        v6 = __asan_report_load8(v6);
      (*(void (__fastcall **)(unsigned __int64, Creature *))v6)(v1 + 32, creature);
      if ( std::operator==<Player>(0LL, (const std::shared_ptr<Player> *)(v1 + 32)) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v1 + 64),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/ability/ability_comp.cpp",
          "refreshAbilityOnGuardFinish",
          794);
        v7 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
               (common::milog::MiLogStream *const)(v1 + 64),
               (const char (*)[26])"player is null, creature:");
        if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->creature_);
      }
      else
      {
        if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->creature_);
        if ( Entity::getEntityId((const Entity *const)this->creature_) )
        {
          proto::AbilityChangeNotify::AbilityChangeNotify((proto::AbilityChangeNotify *const)(v1 + 64));
          if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->creature_);
          EntityId = Entity::getEntityId((const Entity *const)this->creature_);
          proto::AbilityChangeNotify::set_entity_id((proto::AbilityChangeNotify *const)(v1 + 64), EntityId);
          v9 = proto::AbilityChangeNotify::mutable_ability_control_block((proto::AbilityChangeNotify *const)(v1 + 64));
          AbilityComp::getProtoAbilityControlBlock(this, v9);
          v10 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
          Player::sendProto(v10, (const google::protobuf::Message *)(v1 + 64));
          proto::AbilityChangeNotify::~AbilityChangeNotify((proto::AbilityChangeNotify *const)(v1 + 64));
          goto LABEL_33;
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v1 + 64),
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/ability/ability_comp.cpp",
          "refreshAbilityOnGuardFinish",
          799);
        v7 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
               (common::milog::MiLogStream *const)(v1 + 64),
               (const char (*)[34])"entity is not in scene, creature:");
        if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->creature_);
      }
      common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v7, this->creature_);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v1 + 64));
LABEL_33:
      std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v1 + 32));
    }
  }
  if ( v11 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF800C) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 811: range 00000000136C5174-00000000136C5D62
int32_t __cdecl AbilityComp::getAllStaticConfigAbilities(AbilityComp *const this, TargetAbilityVec *target_ability_vec)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  int *v6; // r8
  Creature *creature; // rsi
  Creature *v8; // rax
  unsigned __int64 v9; // rax
  int *v10; // r8
  int *v11; // r8
  int *v12; // r8
  int *v13; // r8
  int *v14; // r8
  int *v15; // r8
  int *v16; // r8
  Creature *v17; // rsi
  Creature *v18; // rax
  unsigned __int64 v19; // rax
  std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  char v21; // al
  _BOOL4 v22; // r14d
  int *v23; // r8
  int32_t result; // eax
  int __args_0; // [rsp+1Ch] [rbp-144h] BYREF
  int StringHash; // [rsp+20h] [rbp-140h] BYREF
  proto::ProtEntityType entity_type; // [rsp+24h] [rbp-13Ch]
  std::vector<std::string>::const_iterator __for_begin; // [rsp+28h] [rbp-138h] BYREF
  std::vector<std::string>::const_iterator __for_end; // [rsp+30h] [rbp-130h] BYREF
  const data::ConfigGlobalCombat *config_global_combat; // [rsp+38h] [rbp-128h]
  const std::vector<std::string> *__for_range; // [rsp+40h] [rbp-120h]
  const std::string *ability_name; // [rsp+48h] [rbp-118h]
  const std::vector<std::string> *__for_range_6; // [rsp+50h] [rbp-110h]
  const std::string *ability_name_6; // [rsp+58h] [rbp-108h]
  const std::vector<std::string> *__for_range_5; // [rsp+60h] [rbp-100h]
  const std::string *ability_name_5; // [rsp+68h] [rbp-F8h]
  const std::vector<std::string> *__for_range_0; // [rsp+70h] [rbp-F0h]
  const std::vector<std::string> *__for_range_1; // [rsp+78h] [rbp-E8h]
  const std::vector<std::string> *__for_range_2; // [rsp+80h] [rbp-E0h]
  const std::vector<std::string> *__for_range_3; // [rsp+88h] [rbp-D8h]
  const std::vector<std::string> *__for_range_4; // [rsp+90h] [rbp-D0h]
  const std::string *ability_name_4; // [rsp+98h] [rbp-C8h]
  const std::string *ability_name_3; // [rsp+A0h] [rbp-C0h]
  const std::string *ability_name_2; // [rsp+A8h] [rbp-B8h]
  const std::string *ability_name_1; // [rsp+B0h] [rbp-B0h]
  const std::string *ability_name_0; // [rsp+B8h] [rbp-A8h]
  std::vector<data::ConfigEntityAbilityEntry> *__for_range_7; // [rsp+C0h] [rbp-A0h]
  data::ConfigEntityAbilityEntry *entry; // [rsp+C8h] [rbp-98h]
  char v50[144]; // [rsp+D0h] [rbp-90h] BYREF

  v2 = (unsigned __int64)v50;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 16 21 dungeon_scene_ptr:839 64 16 15 monster_ptr:866";
  *(_QWORD *)(v2 + 16) = AbilityComp::getAllStaticConfigAbilities;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862722] = -202178560;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v2 + 64));
  v5 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
  config_global_combat = JsonConfigMgr::getGlobalCombatConfig(&v5->design_config.json_config_mgr);
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v2 + 64));
  if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->creature_);
  if ( Creature::getIsNonHumanoidMove(this->creature_) )
  {
    __for_range = &config_global_combat->default_abilities.non_humanoid_move_abilities;
    __for_begin._M_current = std::vector<std::string>::begin(&config_global_combat->default_abilities.non_humanoid_move_abilities)._M_current;
    __for_end._M_current = std::vector<std::string>::end(&config_global_combat->default_abilities.non_humanoid_move_abilities)._M_current;
    while ( __gnu_cxx::operator!=<std::string const*,std::vector<std::string>>(&__for_begin, &__for_end) )
    {
      ability_name = __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator*(&__for_begin);
      StringHash = 0;
      __args_0 = getStringHash(ability_name);
      std::vector<std::pair<unsigned int,unsigned int>>::emplace_back<int,int>(
        target_ability_vec,
        &__args_0,
        &StringHash,
        &__args_0,
        v6);
      __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator++(&__for_begin);
    }
  }
  if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->creature_);
  creature = this->creature_;
  v8 = creature;
  if ( *(_BYTE *)(((unsigned __int64)creature >> 3) + 0x7FFF8000) )
    v8 = (Creature *)__asan_report_load8(this->creature_);
  v9 = *(_QWORD *)v8->baseclass_0 + 24LL;
  if ( *(_BYTE *)((v9 >> 3) + 0x7FFF8000) )
    v9 = __asan_report_load8(v9);
  entity_type = (*(unsigned int (__fastcall **)(Creature *))v9)(creature);
  switch ( entity_type )
  {
    case PROT_ENTITY_SCENE:
      __for_range_0 = &config_global_combat->default_abilities.level_element_abilities;
      __for_begin._M_current = std::vector<std::string>::begin(&config_global_combat->default_abilities.level_element_abilities)._M_current;
      __for_end._M_current = std::vector<std::string>::end(__for_range_0)._M_current;
      while ( __gnu_cxx::operator!=<std::string const*,std::vector<std::string>>(&__for_begin, &__for_end) )
      {
        ability_name_0 = __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator*(&__for_begin);
        StringHash = 0;
        __args_0 = getStringHash(ability_name_0);
        std::vector<std::pair<unsigned int,unsigned int>>::emplace_back<int,int>(
          target_ability_vec,
          &__args_0,
          &StringHash,
          &__args_0,
          v10);
        __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator++(&__for_begin);
      }
      __for_range_1 = &config_global_combat->default_abilities.level_default_abilities;
      __for_begin._M_current = std::vector<std::string>::begin(&config_global_combat->default_abilities.level_default_abilities)._M_current;
      __for_end._M_current = std::vector<std::string>::end(__for_range_1)._M_current;
      while ( __gnu_cxx::operator!=<std::string const*,std::vector<std::string>>(&__for_begin, &__for_end) )
      {
        ability_name_1 = __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator*(&__for_begin);
        StringHash = 0;
        __args_0 = getStringHash(ability_name_1);
        std::vector<std::pair<unsigned int,unsigned int>>::emplace_back<int,int>(
          target_ability_vec,
          &__args_0,
          &StringHash,
          &__args_0,
          v11);
        __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator++(&__for_begin);
      }
      __for_range_2 = &config_global_combat->default_abilities.level_item_abilities;
      __for_begin._M_current = std::vector<std::string>::begin(&config_global_combat->default_abilities.level_item_abilities)._M_current;
      __for_end._M_current = std::vector<std::string>::end(__for_range_2)._M_current;
      while ( __gnu_cxx::operator!=<std::string const*,std::vector<std::string>>(&__for_begin, &__for_end) )
      {
        ability_name_2 = __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator*(&__for_begin);
        StringHash = 0;
        __args_0 = getStringHash(ability_name_2);
        std::vector<std::pair<unsigned int,unsigned int>>::emplace_back<int,int>(
          target_ability_vec,
          &__args_0,
          &StringHash,
          &__args_0,
          v12);
        __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator++(&__for_begin);
      }
      __for_range_3 = &config_global_combat->default_abilities.level_sbuff_abilities;
      __for_begin._M_current = std::vector<std::string>::begin(&config_global_combat->default_abilities.level_sbuff_abilities)._M_current;
      __for_end._M_current = std::vector<std::string>::end(__for_range_3)._M_current;
      while ( __gnu_cxx::operator!=<std::string const*,std::vector<std::string>>(&__for_begin, &__for_end) )
      {
        ability_name_3 = __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator*(&__for_begin);
        StringHash = 0;
        __args_0 = getStringHash(ability_name_3);
        std::vector<std::pair<unsigned int,unsigned int>>::emplace_back<int,int>(
          target_ability_vec,
          &__args_0,
          &StringHash,
          &__args_0,
          v13);
        __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator++(&__for_begin);
      }
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      Entity::getScene((const Entity *const)(v2 + 64));
      std::dynamic_pointer_cast<DungeonScene,Scene>((const std::shared_ptr<Scene> *)(v2 + 32));
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v2 + 64));
      if ( std::operator!=<DungeonScene>(0LL, (const std::shared_ptr<DungeonScene> *)(v2 + 32)) )
      {
        __for_range_4 = &config_global_combat->default_abilities.dungeon_abilities;
        __for_begin._M_current = std::vector<std::string>::begin(&config_global_combat->default_abilities.dungeon_abilities)._M_current;
        __for_end._M_current = std::vector<std::string>::end(__for_range_4)._M_current;
        while ( __gnu_cxx::operator!=<std::string const*,std::vector<std::string>>(&__for_begin, &__for_end) )
        {
          ability_name_4 = __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator*(&__for_begin);
          StringHash = 0;
          __args_0 = getStringHash(ability_name_4);
          std::vector<std::pair<unsigned int,unsigned int>>::emplace_back<int,int>(
            target_ability_vec,
            &__args_0,
            &StringHash,
            &__args_0,
            v14);
          __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator++(&__for_begin);
        }
      }
      std::shared_ptr<DungeonScene>::~shared_ptr((std::shared_ptr<DungeonScene> *const)(v2 + 32));
      break;
    case PROT_ENTITY_TEAM:
      __for_range_5 = &config_global_combat->default_abilities.default_team_abilities;
      __for_begin._M_current = std::vector<std::string>::begin(&config_global_combat->default_abilities.default_team_abilities)._M_current;
      __for_end._M_current = std::vector<std::string>::end(__for_range_5)._M_current;
      while ( __gnu_cxx::operator!=<std::string const*,std::vector<std::string>>(&__for_begin, &__for_end) )
      {
        ability_name_5 = __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator*(&__for_begin);
        StringHash = 0;
        __args_0 = getStringHash(ability_name_5);
        std::vector<std::pair<unsigned int,unsigned int>>::emplace_back<int,int>(
          target_ability_vec,
          &__args_0,
          &StringHash,
          &__args_0,
          v15);
        __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator++(&__for_begin);
      }
      break;
    case PROT_ENTITY_MP_LEVEL:
      __for_range_6 = &config_global_combat->default_abilities.default_mplevel_abilities;
      __for_begin._M_current = std::vector<std::string>::begin(&config_global_combat->default_abilities.default_mplevel_abilities)._M_current;
      __for_end._M_current = std::vector<std::string>::end(__for_range_6)._M_current;
      while ( __gnu_cxx::operator!=<std::string const*,std::vector<std::string>>(&__for_begin, &__for_end) )
      {
        ability_name_6 = __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator*(&__for_begin);
        StringHash = 0;
        __args_0 = getStringHash(ability_name_6);
        std::vector<std::pair<unsigned int,unsigned int>>::emplace_back<int,int>(
          target_ability_vec,
          &__args_0,
          &StringHash,
          &__args_0,
          v16);
        __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator++(&__for_begin);
      }
      break;
  }
  __for_range_7 = &this->ability_entry_vec_;
  __for_begin._M_current = (const std::string *)std::vector<data::ConfigEntityAbilityEntry>::begin(&this->ability_entry_vec_)._M_current;
  __for_end._M_current = (const std::string *)std::vector<data::ConfigEntityAbilityEntry>::end(__for_range_7)._M_current;
  while ( __gnu_cxx::operator!=<data::ConfigEntityAbilityEntry *,std::vector<data::ConfigEntityAbilityEntry>>(
            (const __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry*,std::vector<data::ConfigEntityAbilityEntry> > *)&__for_begin,
            (const __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry*,std::vector<data::ConfigEntityAbilityEntry> > *)&__for_end) )
  {
    entry = __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry *,std::vector<data::ConfigEntityAbilityEntry>>::operator*((const __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry*,std::vector<data::ConfigEntityAbilityEntry> > *const)&__for_begin);
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    v17 = this->creature_;
    v18 = v17;
    if ( *(_BYTE *)(((unsigned __int64)v17 >> 3) + 0x7FFF8000) )
      v18 = (Creature *)__asan_report_load8(this->creature_);
    v19 = *(_QWORD *)v18->baseclass_0 + 24LL;
    if ( *(_BYTE *)((v19 >> 3) + 0x7FFF8000) )
      v19 = __asan_report_load8(v19);
    if ( (*(unsigned int (__fastcall **)(Creature *))v19)(v17) != 2 )
      goto LABEL_63;
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    toPtr<Monster,Creature>((Creature *)(v2 + 64));
    if ( !std::operator!=<Monster>((const std::shared_ptr<Monster> *)(v2 + 64), 0LL) )
      goto LABEL_61;
    v20 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
    if ( !Monster::getIsLightConfig(v20) )
      goto LABEL_61;
    if ( *(char *)(((unsigned __int64)&entry->light_weight_remove >> 3) + 0x7FFF8000) < 0 )
      __asan_report_load1(&entry->light_weight_remove);
    if ( entry->light_weight_remove )
      v21 = 1;
    else
LABEL_61:
      v21 = 0;
    v22 = v21 == 0;
    std::shared_ptr<Monster>::~shared_ptr((std::shared_ptr<Monster> *const)(v2 + 64));
    if ( v22 )
    {
LABEL_63:
      StringHash = getStringHash(&entry->ability_override);
      __args_0 = getStringHash(&entry->ability_name);
      std::vector<std::pair<unsigned int,unsigned int>>::emplace_back<int,int>(
        target_ability_vec,
        &__args_0,
        &StringHash,
        &__args_0,
        v23);
    }
    __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry *,std::vector<data::ConfigEntityAbilityEntry>>::operator++((__gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry*,std::vector<data::ConfigEntityAbilityEntry> > *const)&__for_begin);
  }
  result = 0;
  if ( v50 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 879: range 00000000136C5D64-00000000136C6285
int32_t __cdecl AbilityComp::getAllPreDynamicConfigAbilities(
        AbilityComp *const this,
        TargetAbilityVec *target_ability_vec)
{
  int32_t v2; // r14d
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  Creature *creature; // rsi
  Creature *v7; // rax
  unsigned __int64 v8; // rax
  std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  std::_Rb_tree_const_iterator<unsigned int>::reference v10; // rax
  _DWORD *v11; // rdx
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  common::milog::MiLogStream *v13; // rax
  int v14; // r15d
  int *v15; // r8
  int32_t result; // eax
  int __args_0; // [rsp+20h] [rbp-110h] BYREF
  int v19; // [rsp+24h] [rbp-10Ch] BYREF
  std::set<unsigned int>::iterator __for_begin; // [rsp+28h] [rbp-108h] BYREF
  std::set<unsigned int>::iterator __for_end; // [rsp+30h] [rbp-100h] BYREF
  std::vector<std::string>::const_iterator __for_begin_0; // [rsp+38h] [rbp-F8h] BYREF
  std::vector<std::string>::const_iterator __for_end_0; // [rsp+40h] [rbp-F0h] BYREF
  const std::set<unsigned int> *affix_set; // [rsp+48h] [rbp-E8h]
  const std::set<unsigned int> *__for_range; // [rsp+50h] [rbp-E0h]
  const data::MonsterAffixExcelConfig *affix_config_ptr; // [rsp+58h] [rbp-D8h]
  const std::vector<std::string> *__for_range_0; // [rsp+60h] [rbp-D0h]
  const std::string *abi_name; // [rsp+68h] [rbp-C8h]
  std::shared_ptr<Config> v29; // [rsp+70h] [rbp-C0h] BYREF
  common::milog::MiLogStream v30; // [rsp+80h] [rbp-B0h] BYREF
  char v31[144]; // [rsp+A0h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v31;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 12 affix_id:886 64 16 15 monster_ptr:882";
  *(_QWORD *)(v3 + 16) = AbilityComp::getAllPreDynamicConfigAbilities;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->creature_);
  creature = this->creature_;
  v7 = creature;
  if ( *(_BYTE *)(((unsigned __int64)creature >> 3) + 0x7FFF8000) )
    v7 = (Creature *)__asan_report_load8(this->creature_);
  v8 = *(_QWORD *)v7->baseclass_0 + 24LL;
  if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
    v8 = __asan_report_load8(v8);
  if ( (*(unsigned int (__fastcall **)(Creature *))v8)(creature) != 2 )
    goto LABEL_29;
  if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->creature_);
  toPtr<Monster,Creature>((Creature *)(v3 + 64));
  if ( std::operator!=<Monster>((const std::shared_ptr<Monster> *)(v3 + 64), 0LL) )
  {
    v9 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    affix_set = Monster::getAffixSet(v9);
    __for_range = affix_set;
    __for_begin._M_node = std::set<unsigned int>::begin(affix_set)._M_node;
    __for_end._M_node = std::set<unsigned int>::end(affix_set)._M_node;
    while ( std::operator!=(&__for_begin, &__for_end) )
    {
      v10 = std::_Rb_tree_const_iterator<unsigned int>::operator*(&__for_begin);
      v11 = v10;
      if ( *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v10 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v10);
      }
      *(_DWORD *)(v3 + 48) = *v11;
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)&v29);
      v12 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v29);
      affix_config_ptr = data::MonsterExcelConfigMgrBase::findMonsterAffixExcelConfig(
                           &v12->design_config.txt_config_mgr.monster_config_mgr,
                           *(_DWORD *)(v3 + 48));
      std::shared_ptr<Config>::~shared_ptr(&v29);
      if ( !affix_config_ptr )
      {
        common::milog::MiLogStream::create(
          &v30,
          &common::milog::MiLogDefault::default_log_obj_,
          0x13u,
          "./src/ability/ability_comp.cpp",
          "getAllPreDynamicConfigAbilities",
          891);
        v13 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
                &v30,
                (const char (*)[45])"findMonsterAffixExcelConfig fails, affix_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v3 + 48));
        common::milog::MiLogStream::~MiLogStream(&v30);
        v2 = -1;
        v14 = 0;
        goto LABEL_28;
      }
      if ( *(_BYTE *)(((unsigned __int64)&affix_config_ptr->pre_add >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)affix_config_ptr + 73) & 7) >= *(_BYTE *)(((unsigned __int64)&affix_config_ptr->pre_add >> 3)
                                                                      + 0x7FFF8000) )
      {
        __asan_report_load1(&affix_config_ptr->pre_add);
      }
      if ( affix_config_ptr->pre_add )
      {
        __for_range_0 = &affix_config_ptr->ability_name;
        __for_begin_0._M_current = std::vector<std::string>::begin(&affix_config_ptr->ability_name)._M_current;
        __for_end_0._M_current = std::vector<std::string>::end(__for_range_0)._M_current;
        while ( __gnu_cxx::operator!=<std::string const*,std::vector<std::string>>(&__for_begin_0, &__for_end_0) )
        {
          abi_name = __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator*(&__for_begin_0);
          v19 = 0;
          __args_0 = getStringHash(abi_name);
          std::vector<std::pair<unsigned int,unsigned int>>::emplace_back<int,int>(
            target_ability_vec,
            &__args_0,
            &v19,
            &__args_0,
            v15);
          __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator++(&__for_begin_0);
        }
      }
      std::_Rb_tree_const_iterator<unsigned int>::operator++(&__for_begin);
    }
  }
  v14 = 1;
LABEL_28:
  std::shared_ptr<Monster>::~shared_ptr((std::shared_ptr<Monster> *const)(v3 + 64));
  if ( v14 == 1 )
LABEL_29:
    v2 = 0;
  result = v2;
  if ( v31 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 909: range 00000000136C6286-00000000136C72E7
int32_t __cdecl AbilityComp::getAllDynamicConfigAbilities(
        AbilityComp *const this,
        TargetAbilityVec *target_ability_vec,
        ScenePtr *p_scene_ptr)
{
  int32_t v3; // r14d
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  Creature *creature; // rsi
  Creature *v9; // rax
  unsigned __int64 v10; // rax
  int v11; // eax
  std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  int *v13; // r8
  std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  std::_Rb_tree_const_iterator<unsigned int>::reference v15; // rax
  _DWORD *v16; // rdx
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  common::milog::MiLogStream *v18; // rax
  int v19; // r15d
  int *v20; // r8
  std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  common::milog::MiLogStream *v23; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v24; // rax
  int v25; // r15d
  std::__shared_ptr_access<SceneEntity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v26; // rax
  int *v27; // r8
  common::milog::MiLogStream *v28; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v29; // rax
  int v30; // r15d
  std::__shared_ptr_access<SceneEntity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v31; // rax
  int *v32; // r8
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v33; // rax
  int *v34; // r8
  common::milog::MiLogStream *v35; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v36; // rax
  int v37; // r15d
  std::__shared_ptr_access<SceneEntity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v38; // rax
  int *v39; // r8
  int32_t result; // eax
  std::set<unsigned int>::iterator __for_begin; // [rsp+28h] [rbp-1F8h] BYREF
  std::set<unsigned int>::iterator __for_end; // [rsp+30h] [rbp-1F0h] BYREF
  std::vector<std::string>::const_iterator __for_begin_0; // [rsp+38h] [rbp-1E8h] BYREF
  std::vector<std::string>::const_iterator __for_end_0; // [rsp+40h] [rbp-1E0h] BYREF
  const data::ConfigGlobalCombat *config_global_combat; // [rsp+48h] [rbp-1D8h]
  std::vector<std::shared_ptr<data::ConfigLevelEntity>> *__for_range_6; // [rsp+50h] [rbp-1D0h]
  const std::shared_ptr<data::ConfigLevelEntity> *config_level_entity_ptr_1; // [rsp+58h] [rbp-1C8h]
  std::vector<data::ConfigEntityAbilityEntry> *__for_range_7; // [rsp+60h] [rbp-1C0h]
  const data::ConfigEntityAbilityEntry *ability_entry_1; // [rsp+68h] [rbp-1B8h]
  const std::set<unsigned int> *affix_set; // [rsp+70h] [rbp-1B0h]
  const std::set<unsigned int> *__for_range; // [rsp+78h] [rbp-1A8h]
  const data::MonsterAffixExcelConfig *affix_config_ptr; // [rsp+80h] [rbp-1A0h]
  const std::vector<std::string> *__for_range_0; // [rsp+88h] [rbp-198h]
  const std::string *abi_name; // [rsp+90h] [rbp-190h]
  std::vector<std::shared_ptr<data::ConfigLevelEntity>> *__for_range_1; // [rsp+98h] [rbp-188h]
  const std::shared_ptr<data::ConfigLevelEntity> *config_level_entity_ptr; // [rsp+A0h] [rbp-180h]
  std::vector<data::ConfigEntityAbilityEntry> *__for_range_2; // [rsp+A8h] [rbp-178h]
  const data::ConfigEntityAbilityEntry *ability_entry; // [rsp+B0h] [rbp-170h]
  std::vector<std::shared_ptr<data::ConfigLevelEntity>> *__for_range_3; // [rsp+B8h] [rbp-168h]
  const data::ConfigGlobalCombat *config_global_combat_0; // [rsp+C0h] [rbp-160h]
  const std::vector<std::string> *__for_range_5; // [rsp+C8h] [rbp-158h]
  const std::string *ability_name; // [rsp+D0h] [rbp-150h]
  const std::shared_ptr<data::ConfigLevelEntity> *config_level_entity_ptr_0; // [rsp+D8h] [rbp-148h]
  std::vector<data::ConfigEntityAbilityEntry> *__for_range_4; // [rsp+E0h] [rbp-140h]
  const data::ConfigEntityAbilityEntry *ability_entry_0; // [rsp+E8h] [rbp-138h]
  common::milog::MiLogStream v68; // [rsp+F0h] [rbp-130h] BYREF
  char v69[272]; // [rsp+110h] [rbp-110h] BYREF

  v4 = (unsigned __int64)v69;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(224LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "6 48 4 12 affix_id:923 64 4 22 ability_name_hash:1025 80 4 26 ability_override_hash:1026 96 16 2"
                        "0 scene_entity_ptr:979 128 16 21 scene_entity_ptr:1010 160 24 21 level_entity_vec:1016";
  *(_QWORD *)(v4 + 16) = AbilityComp::getAllDynamicConfigAbilities;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -234556924;
  v6[536862723] = -219021312;
  v6[536862724] = -219021312;
  v6[536862725] = -218103808;
  v6[536862726] = -202116109;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v4 + 128));
  v7 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
  config_global_combat = JsonConfigMgr::getGlobalCombatConfig(&v7->design_config.json_config_mgr);
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 128));
  if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->creature_);
  creature = this->creature_;
  v9 = creature;
  if ( *(_BYTE *)(((unsigned __int64)creature >> 3) + 0x7FFF8000) )
    v9 = (Creature *)__asan_report_load8(this->creature_);
  v10 = *(_QWORD *)v9->baseclass_0 + 24LL;
  if ( *(_BYTE *)((v10 >> 3) + 0x7FFF8000) )
    v10 = __asan_report_load8(v10);
  v11 = (*(__int64 (__fastcall **)(Creature *))v10)(creature);
  if ( v11 == 9 )
  {
    if ( std::operator!=<Scene>(p_scene_ptr, 0LL) )
    {
      std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_scene_ptr);
      Scene::getSceneEntity((const Scene *const)(v4 + 128));
      if ( std::operator==<SceneEntity>((const std::shared_ptr<SceneEntity> *)(v4 + 128), 0LL) )
      {
        common::milog::MiLogStream::create(
          &v68,
          &common::milog::MiLogDefault::default_log_obj_,
          0x13u,
          "./src/ability/ability_comp.cpp",
          "getAllDynamicConfigAbilities",
          1013);
        v35 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                &v68,
                (const char (*)[25])"scene_entity_ptr is null");
        v36 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_scene_ptr);
        common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v35, v36);
        common::milog::MiLogStream::~MiLogStream(&v68);
        v3 = -1;
        v37 = 0;
      }
      else
      {
        v38 = std::__shared_ptr_access<SceneEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SceneEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
        SceneEntity::findConfigLevelEntityPtrVec(
          (std::vector<std::shared_ptr<data::ConfigLevelEntity>> *)(v4 + 160),
          v38);
        __for_range_6 = (std::vector<std::shared_ptr<data::ConfigLevelEntity>> *)(v4 + 160);
        __for_begin._M_node = (std::_Rb_tree_const_iterator<unsigned int>::_Base_ptr)std::vector<std::shared_ptr<data::ConfigLevelEntity>>::begin((std::vector<std::shared_ptr<data::ConfigLevelEntity>> *const)(v4 + 160))._M_current;
        __for_end._M_node = (std::_Rb_tree_const_iterator<unsigned int>::_Base_ptr)std::vector<std::shared_ptr<data::ConfigLevelEntity>>::end((std::vector<std::shared_ptr<data::ConfigLevelEntity>> *const)(v4 + 160))._M_current;
        while ( __gnu_cxx::operator!=<std::shared_ptr<data::ConfigLevelEntity> *,std::vector<std::shared_ptr<data::ConfigLevelEntity>>>(
                  (const __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigLevelEntity>*,std::vector<std::shared_ptr<data::ConfigLevelEntity>> > *)&__for_begin,
                  (const __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigLevelEntity>*,std::vector<std::shared_ptr<data::ConfigLevelEntity>> > *)&__for_end) )
        {
          config_level_entity_ptr_1 = __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigLevelEntity> *,std::vector<std::shared_ptr<data::ConfigLevelEntity>>>::operator*((const __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigLevelEntity>*,std::vector<std::shared_ptr<data::ConfigLevelEntity>> > *const)&__for_begin);
          if ( !std::operator==<data::ConfigLevelEntity>(config_level_entity_ptr_1, 0LL) )
          {
            __for_range_7 = &std::__shared_ptr_access<data::ConfigLevelEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigLevelEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_level_entity_ptr_1)->team_abilities;
            __for_begin_0._M_current = (const std::string *)std::vector<data::ConfigEntityAbilityEntry>::begin(__for_range_7)._M_current;
            __for_end_0._M_current = (const std::string *)std::vector<data::ConfigEntityAbilityEntry>::end(__for_range_7)._M_current;
            while ( __gnu_cxx::operator!=<data::ConfigEntityAbilityEntry *,std::vector<data::ConfigEntityAbilityEntry>>(
                      (const __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry*,std::vector<data::ConfigEntityAbilityEntry> > *)&__for_begin_0,
                      (const __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry*,std::vector<data::ConfigEntityAbilityEntry> > *)&__for_end_0) )
            {
              ability_entry_1 = __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry *,std::vector<data::ConfigEntityAbilityEntry>>::operator*((const __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry*,std::vector<data::ConfigEntityAbilityEntry> > *const)&__for_begin_0);
              *(_DWORD *)(v4 + 64) = getStringHash(&ability_entry_1->ability_name);
              *(_DWORD *)(v4 + 80) = getStringHash(&ability_entry_1->ability_override);
              std::vector<std::pair<unsigned int,unsigned int>>::emplace_back<int &,int &>(
                target_ability_vec,
                (int *)(v4 + 64),
                (int *)(v4 + 80),
                (int *)(v4 + 64),
                v39);
              __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry *,std::vector<data::ConfigEntityAbilityEntry>>::operator++((__gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry*,std::vector<data::ConfigEntityAbilityEntry> > *const)&__for_begin_0);
            }
          }
          __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigLevelEntity> *,std::vector<std::shared_ptr<data::ConfigLevelEntity>>>::operator++((__gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigLevelEntity>*,std::vector<std::shared_ptr<data::ConfigLevelEntity>> > *const)&__for_begin);
        }
        std::vector<std::shared_ptr<data::ConfigLevelEntity>>::~vector((std::vector<std::shared_ptr<data::ConfigLevelEntity>> *const)(v4 + 160));
        v37 = 1;
      }
      std::shared_ptr<SceneEntity>::~shared_ptr((std::shared_ptr<SceneEntity> *const)(v4 + 128));
      if ( v37 != 1 )
        goto LABEL_82;
    }
LABEL_81:
    v3 = 0;
    goto LABEL_82;
  }
  if ( v11 > 9 )
    goto LABEL_81;
  if ( v11 == 1 )
  {
    if ( std::operator!=<Scene>(p_scene_ptr, 0LL) )
    {
      std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_scene_ptr);
      Scene::getSceneEntity((const Scene *const)(v4 + 96));
      if ( std::operator==<SceneEntity>((const std::shared_ptr<SceneEntity> *)(v4 + 96), 0LL) )
      {
        common::milog::MiLogStream::create(
          &v68,
          &common::milog::MiLogDefault::default_log_obj_,
          0x13u,
          "./src/ability/ability_comp.cpp",
          "getAllDynamicConfigAbilities",
          982);
        v28 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                &v68,
                (const char (*)[25])"scene_entity_ptr is null");
        v29 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_scene_ptr);
        common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v28, v29);
        common::milog::MiLogStream::~MiLogStream(&v68);
        v3 = -1;
        v30 = 0;
      }
      else
      {
        v31 = std::__shared_ptr_access<SceneEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SceneEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
        SceneEntity::findConfigLevelEntityPtrVec(
          (std::vector<std::shared_ptr<data::ConfigLevelEntity>> *)(v4 + 160),
          v31);
        __for_range_3 = (std::vector<std::shared_ptr<data::ConfigLevelEntity>> *)(v4 + 160);
        __for_begin._M_node = (std::_Rb_tree_const_iterator<unsigned int>::_Base_ptr)std::vector<std::shared_ptr<data::ConfigLevelEntity>>::begin((std::vector<std::shared_ptr<data::ConfigLevelEntity>> *const)(v4 + 160))._M_current;
        __for_end._M_node = (std::_Rb_tree_const_iterator<unsigned int>::_Base_ptr)std::vector<std::shared_ptr<data::ConfigLevelEntity>>::end((std::vector<std::shared_ptr<data::ConfigLevelEntity>> *const)(v4 + 160))._M_current;
        while ( __gnu_cxx::operator!=<std::shared_ptr<data::ConfigLevelEntity> *,std::vector<std::shared_ptr<data::ConfigLevelEntity>>>(
                  (const __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigLevelEntity>*,std::vector<std::shared_ptr<data::ConfigLevelEntity>> > *)&__for_begin,
                  (const __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigLevelEntity>*,std::vector<std::shared_ptr<data::ConfigLevelEntity>> > *)&__for_end) )
        {
          config_level_entity_ptr_0 = __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigLevelEntity> *,std::vector<std::shared_ptr<data::ConfigLevelEntity>>>::operator*((const __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigLevelEntity>*,std::vector<std::shared_ptr<data::ConfigLevelEntity>> > *const)&__for_begin);
          if ( !std::operator==<data::ConfigLevelEntity>(config_level_entity_ptr_0, 0LL) )
          {
            __for_range_4 = &std::__shared_ptr_access<data::ConfigLevelEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigLevelEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_level_entity_ptr_0)->avatar_abilities;
            __for_begin_0._M_current = (const std::string *)std::vector<data::ConfigEntityAbilityEntry>::begin(__for_range_4)._M_current;
            __for_end_0._M_current = (const std::string *)std::vector<data::ConfigEntityAbilityEntry>::end(__for_range_4)._M_current;
            while ( __gnu_cxx::operator!=<data::ConfigEntityAbilityEntry *,std::vector<data::ConfigEntityAbilityEntry>>(
                      (const __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry*,std::vector<data::ConfigEntityAbilityEntry> > *)&__for_begin_0,
                      (const __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry*,std::vector<data::ConfigEntityAbilityEntry> > *)&__for_end_0) )
            {
              ability_entry_0 = __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry *,std::vector<data::ConfigEntityAbilityEntry>>::operator*((const __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry*,std::vector<data::ConfigEntityAbilityEntry> > *const)&__for_begin_0);
              *(_DWORD *)(v4 + 64) = getStringHash(&ability_entry_0->ability_name);
              *(_DWORD *)(v4 + 80) = getStringHash(&ability_entry_0->ability_override);
              std::vector<std::pair<unsigned int,unsigned int>>::emplace_back<int &,int &>(
                target_ability_vec,
                (int *)(v4 + 64),
                (int *)(v4 + 80),
                (int *)(v4 + 64),
                v32);
              __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry *,std::vector<data::ConfigEntityAbilityEntry>>::operator++((__gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry*,std::vector<data::ConfigEntityAbilityEntry> > *const)&__for_begin_0);
            }
          }
          __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigLevelEntity> *,std::vector<std::shared_ptr<data::ConfigLevelEntity>>>::operator++((__gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigLevelEntity>*,std::vector<std::shared_ptr<data::ConfigLevelEntity>> > *const)&__for_begin);
        }
        ServiceBox::findService<GameserverService>();
        GameserverService::getConfig((GameserverService *const)(v4 + 128));
        v33 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
        config_global_combat_0 = JsonConfigMgr::getGlobalCombatConfig(&v33->design_config.json_config_mgr);
        std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 128));
        __for_range_5 = &config_global_combat_0->default_abilities.default_avatar_abilities;
        __for_begin_0._M_current = std::vector<std::string>::begin(&config_global_combat_0->default_abilities.default_avatar_abilities)._M_current;
        __for_end_0._M_current = std::vector<std::string>::end(__for_range_5)._M_current;
        while ( __gnu_cxx::operator!=<std::string const*,std::vector<std::string>>(&__for_begin_0, &__for_end_0) )
        {
          ability_name = __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator*(&__for_begin_0);
          *(_DWORD *)(v4 + 64) = getStringHash(ability_name);
          *(_DWORD *)(v4 + 80) = 0;
          std::vector<std::pair<unsigned int,unsigned int>>::emplace_back<int &,int>(
            target_ability_vec,
            (int *)(v4 + 64),
            (int *)(v4 + 80),
            (int *)(v4 + 64),
            v34);
          __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator++(&__for_begin_0);
        }
        std::vector<std::shared_ptr<data::ConfigLevelEntity>>::~vector((std::vector<std::shared_ptr<data::ConfigLevelEntity>> *const)(v4 + 160));
        v30 = 1;
      }
      std::shared_ptr<SceneEntity>::~shared_ptr((std::shared_ptr<SceneEntity> *const)(v4 + 96));
      if ( v30 != 1 )
        goto LABEL_82;
    }
    goto LABEL_81;
  }
  if ( v11 != 2 )
    goto LABEL_81;
  if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->creature_);
  toPtr<Monster,Creature>((Creature *)(v4 + 96));
  if ( std::operator!=<Monster>((const std::shared_ptr<Monster> *)(v4 + 96), 0LL) )
  {
    v12 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
    if ( Monster::getIsElite(v12) )
    {
      *(_DWORD *)(v4 + 80) = 0;
      *(_DWORD *)(v4 + 64) = getStringHash(&config_global_combat->default_abilities.monter_elite_ability_name);
      std::vector<std::pair<unsigned int,unsigned int>>::emplace_back<int,int>(
        target_ability_vec,
        (int *)(v4 + 64),
        (int *)(v4 + 80),
        (int *)(v4 + 64),
        v13);
    }
    v14 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
    affix_set = Monster::getAffixSet(v14);
    __for_range = affix_set;
    __for_begin._M_node = std::set<unsigned int>::begin(affix_set)._M_node;
    __for_end._M_node = std::set<unsigned int>::end(affix_set)._M_node;
    while ( std::operator!=(&__for_begin, &__for_end) )
    {
      v15 = std::_Rb_tree_const_iterator<unsigned int>::operator*(&__for_begin);
      v16 = v15;
      if ( *(_BYTE *)(((unsigned __int64)v15 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v15 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v15 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v15);
      }
      *(_DWORD *)(v4 + 48) = *v16;
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)(v4 + 128));
      v17 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
      affix_config_ptr = data::MonsterExcelConfigMgrBase::findMonsterAffixExcelConfig(
                           &v17->design_config.txt_config_mgr.monster_config_mgr,
                           *(_DWORD *)(v4 + 48));
      std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v4 + 128));
      if ( !affix_config_ptr )
      {
        common::milog::MiLogStream::create(
          &v68,
          &common::milog::MiLogDefault::default_log_obj_,
          0x13u,
          "./src/ability/ability_comp.cpp",
          "getAllDynamicConfigAbilities",
          928);
        v18 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
                &v68,
                (const char (*)[45])"findMonsterAffixExcelConfig fails, affix_id:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, (const unsigned int *)(v4 + 48));
        common::milog::MiLogStream::~MiLogStream(&v68);
        v3 = -1;
        v19 = 0;
        goto LABEL_51;
      }
      if ( *(_BYTE *)(((unsigned __int64)&affix_config_ptr->pre_add >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)affix_config_ptr + 73) & 7) >= *(_BYTE *)(((unsigned __int64)&affix_config_ptr->pre_add >> 3)
                                                                      + 0x7FFF8000) )
      {
        __asan_report_load1(&affix_config_ptr->pre_add);
      }
      if ( !affix_config_ptr->pre_add )
      {
        __for_range_0 = &affix_config_ptr->ability_name;
        __for_begin_0._M_current = std::vector<std::string>::begin(&affix_config_ptr->ability_name)._M_current;
        __for_end_0._M_current = std::vector<std::string>::end(__for_range_0)._M_current;
        while ( __gnu_cxx::operator!=<std::string const*,std::vector<std::string>>(&__for_begin_0, &__for_end_0) )
        {
          abi_name = __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator*(&__for_begin_0);
          *(_DWORD *)(v4 + 80) = 0;
          *(_DWORD *)(v4 + 64) = getStringHash(abi_name);
          std::vector<std::pair<unsigned int,unsigned int>>::emplace_back<int,int>(
            target_ability_vec,
            (int *)(v4 + 64),
            (int *)(v4 + 80),
            (int *)(v4 + 64),
            v20);
          __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator++(&__for_begin_0);
        }
      }
      std::_Rb_tree_const_iterator<unsigned int>::operator++(&__for_begin);
    }
  }
  if ( std::operator==<Scene>(0LL, p_scene_ptr) )
    goto LABEL_50;
  if ( std::operator!=<Monster>(0LL, (const std::shared_ptr<Monster> *)(v4 + 96)) )
  {
    v21 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
    if ( Monster::getMonsterType(v21) == MONSTER_PARTNER )
      goto LABEL_50;
  }
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_scene_ptr);
  Scene::getSceneEntity((const Scene *const)(v4 + 128));
  if ( std::operator==<SceneEntity>((const std::shared_ptr<SceneEntity> *)(v4 + 128), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v68,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "getAllDynamicConfigAbilities",
      955);
    v23 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
            &v68,
            (const char (*)[25])"scene_entity_ptr is null");
    v24 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_scene_ptr);
    common::milog::MiLogStream::operator<<<Scene,(Scene*)0>(v23, v24);
    common::milog::MiLogStream::~MiLogStream(&v68);
    v3 = -1;
    v25 = 0;
  }
  else
  {
    v26 = std::__shared_ptr_access<SceneEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SceneEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
    SceneEntity::findConfigLevelEntityPtrVec((std::vector<std::shared_ptr<data::ConfigLevelEntity>> *)(v4 + 160), v26);
    __for_range_1 = (std::vector<std::shared_ptr<data::ConfigLevelEntity>> *)(v4 + 160);
    __for_begin._M_node = (std::_Rb_tree_const_iterator<unsigned int>::_Base_ptr)std::vector<std::shared_ptr<data::ConfigLevelEntity>>::begin((std::vector<std::shared_ptr<data::ConfigLevelEntity>> *const)(v4 + 160))._M_current;
    __for_end._M_node = (std::_Rb_tree_const_iterator<unsigned int>::_Base_ptr)std::vector<std::shared_ptr<data::ConfigLevelEntity>>::end(__for_range_1)._M_current;
    while ( __gnu_cxx::operator!=<std::shared_ptr<data::ConfigLevelEntity> *,std::vector<std::shared_ptr<data::ConfigLevelEntity>>>(
              (const __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigLevelEntity>*,std::vector<std::shared_ptr<data::ConfigLevelEntity>> > *)&__for_begin,
              (const __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigLevelEntity>*,std::vector<std::shared_ptr<data::ConfigLevelEntity>> > *)&__for_end) )
    {
      config_level_entity_ptr = __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigLevelEntity> *,std::vector<std::shared_ptr<data::ConfigLevelEntity>>>::operator*((const __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigLevelEntity>*,std::vector<std::shared_ptr<data::ConfigLevelEntity>> > *const)&__for_begin);
      if ( !std::operator==<data::ConfigLevelEntity>(config_level_entity_ptr, 0LL) )
      {
        __for_range_2 = &std::__shared_ptr_access<data::ConfigLevelEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigLevelEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_level_entity_ptr)->monster_abilities;
        __for_begin_0._M_current = (const std::string *)std::vector<data::ConfigEntityAbilityEntry>::begin(__for_range_2)._M_current;
        __for_end_0._M_current = (const std::string *)std::vector<data::ConfigEntityAbilityEntry>::end(__for_range_2)._M_current;
        while ( __gnu_cxx::operator!=<data::ConfigEntityAbilityEntry *,std::vector<data::ConfigEntityAbilityEntry>>(
                  (const __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry*,std::vector<data::ConfigEntityAbilityEntry> > *)&__for_begin_0,
                  (const __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry*,std::vector<data::ConfigEntityAbilityEntry> > *)&__for_end_0) )
        {
          ability_entry = __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry *,std::vector<data::ConfigEntityAbilityEntry>>::operator*((const __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry*,std::vector<data::ConfigEntityAbilityEntry> > *const)&__for_begin_0);
          *(_DWORD *)(v4 + 64) = getStringHash(&ability_entry->ability_name);
          *(_DWORD *)(v4 + 80) = getStringHash(&ability_entry->ability_override);
          std::vector<std::pair<unsigned int,unsigned int>>::emplace_back<int &,int &>(
            target_ability_vec,
            (int *)(v4 + 64),
            (int *)(v4 + 80),
            (int *)(v4 + 64),
            v27);
          __gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry *,std::vector<data::ConfigEntityAbilityEntry>>::operator++((__gnu_cxx::__normal_iterator<data::ConfigEntityAbilityEntry*,std::vector<data::ConfigEntityAbilityEntry> > *const)&__for_begin_0);
        }
      }
      __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigLevelEntity> *,std::vector<std::shared_ptr<data::ConfigLevelEntity>>>::operator++((__gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigLevelEntity>*,std::vector<std::shared_ptr<data::ConfigLevelEntity>> > *const)&__for_begin);
    }
    std::vector<std::shared_ptr<data::ConfigLevelEntity>>::~vector((std::vector<std::shared_ptr<data::ConfigLevelEntity>> *const)(v4 + 160));
    v25 = 1;
  }
  std::shared_ptr<SceneEntity>::~shared_ptr((std::shared_ptr<SceneEntity> *const)(v4 + 128));
  if ( v25 == 1 )
LABEL_50:
    v19 = 1;
  else
    v19 = 0;
LABEL_51:
  std::shared_ptr<Monster>::~shared_ptr((std::shared_ptr<Monster> *const)(v4 + 96));
  if ( v19 )
    goto LABEL_81;
LABEL_82:
  result = v3;
  if ( v69 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 1040: range 00000000136C72E8-00000000136C7653
int32_t __cdecl AbilityComp::getAllSkillDepotExtraAbilities(
        AbilityComp *const this,
        TargetAbilityVec *target_ability_vec)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t v5; // r14d
  AvatarSkillExcelConfigMgr *p_avatar_skill_config_mgr; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  uint32_t SkillDepotId; // eax
  common::milog::MiLogStream *v9; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  int *v11; // r8
  int32_t result; // eax
  int __args_0; // [rsp+10h] [rbp-D0h] BYREF
  unsigned int val; // [rsp+14h] [rbp-CCh] BYREF
  std::vector<std::string>::const_iterator __for_begin; // [rsp+18h] [rbp-C8h] BYREF
  std::vector<std::string>::const_iterator __for_end; // [rsp+20h] [rbp-C0h] BYREF
  const data::AvatarSkillDepotExcelConfig *skill_depot_config_ptr; // [rsp+28h] [rbp-B8h]
  const std::vector<std::string> *__for_range; // [rsp+30h] [rbp-B0h]
  const std::string *ability_name; // [rsp+38h] [rbp-A8h]
  std::shared_ptr<Config> v20; // [rsp+40h] [rbp-A0h] BYREF
  common::milog::MiLogStream v21; // [rsp+50h] [rbp-90h] BYREF
  char v22[112]; // [rsp+70h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 15 avatar_ptr:1041";
  *(_QWORD *)(v2 + 16) = AbilityComp::getAllSkillDepotExtraAbilities;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->creature_);
  toPtr<Avatar,Creature>((Creature *)(v2 + 32));
  if ( std::operator==<Avatar>(0LL, (const std::shared_ptr<Avatar> *)(v2 + 32)) )
  {
    v5 = 0;
  }
  else
  {
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v20);
    p_avatar_skill_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v20)->design_config.txt_config_mgr.avatar_skill_config_mgr;
    v7 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    SkillDepotId = Avatar::getSkillDepotId(v7);
    skill_depot_config_ptr = data::AvatarSkillExcelConfigMgrBase::findAvatarSkillDepotExcelConfig(
                               p_avatar_skill_config_mgr,
                               SkillDepotId);
    std::shared_ptr<Config>::~shared_ptr(&v20);
    if ( skill_depot_config_ptr )
    {
      __for_range = &skill_depot_config_ptr->extra_abilities;
      __for_begin._M_current = std::vector<std::string>::begin(&skill_depot_config_ptr->extra_abilities)._M_current;
      __for_end._M_current = std::vector<std::string>::end(&skill_depot_config_ptr->extra_abilities)._M_current;
      while ( __gnu_cxx::operator!=<std::string const*,std::vector<std::string>>(&__for_begin, &__for_end) )
      {
        ability_name = __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator*(&__for_begin);
        if ( (unsigned __int8)std::string::empty(ability_name) != 1 )
        {
          val = 0;
          __args_0 = getStringHash(ability_name);
          std::vector<std::pair<unsigned int,unsigned int>>::emplace_back<int,int>(
            target_ability_vec,
            &__args_0,
            (int *)&val,
            &__args_0,
            v11);
        }
        __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator++(&__for_begin);
      }
      v5 = 0;
    }
    else
    {
      common::milog::MiLogStream::create(
        &v21,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "getAllSkillDepotExtraAbilities",
        1049);
      v9 = common::milog::MiLogStream::operator<<<char [54],(char *[54])0>(
             &v21,
             (const char (*)[54])"findAvatarSkillDepotExcelConfig fail, skill_depot_id:");
      v10 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
      val = Avatar::getSkillDepotId(v10);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, &val);
      common::milog::MiLogStream::~MiLogStream(&v21);
      v5 = -1;
    }
  }
  std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v2 + 32));
  result = v5;
  if ( v22 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1064: range 00000000136C7654-00000000136C7BD7
int32_t __cdecl AbilityComp::addAllSkillDepotTargetAbility(AbilityComp *const this)
{
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  int32_t v4; // r14d
  Creature *creature; // rsi
  Creature *v6; // rax
  unsigned __int64 v7; // rax
  common::milog::MiLogStream *v8; // rcx
  Player *v9; // rax
  PlayerAbilityGroupComp *AbilityGroupComp; // r14
  __gnu_cxx::__normal_iterator<std::pair<unsigned int,unsigned int>*,std::vector<std::pair<unsigned int,unsigned int>> >::reference v11; // rax
  std::pair<unsigned int,unsigned int> *v12; // rdx
  std::tuple_element<1,std::pair<unsigned int,unsigned int> >::type *v13; // rax
  uint32_t v14; // esi
  int32_t result; // eax
  std::vector<std::pair<unsigned int,unsigned int>>::iterator __for_begin; // [rsp+10h] [rbp-130h] BYREF
  std::vector<std::pair<unsigned int,unsigned int>>::iterator __for_end; // [rsp+18h] [rbp-128h] BYREF
  std::vector<std::pair<unsigned int,unsigned int>> *__for_range; // [rsp+20h] [rbp-120h]
  std::tuple_element<0,std::pair<unsigned int,unsigned int> >::type *ability_name_hash; // [rsp+28h] [rbp-118h]
  std::tuple_element<1,std::pair<unsigned int,unsigned int> >::type *override_name_hash; // [rsp+30h] [rbp-110h]
  std::pair<unsigned int,unsigned int> __in; // [rsp+38h] [rbp-108h] BYREF
  std::shared_ptr<Avatar> p_avatar_ptr; // [rsp+40h] [rbp-100h] BYREF
  common::milog::MiLogStream v23; // [rsp+50h] [rbp-F0h] BYREF
  char v24[208]; // [rsp+70h] [rbp-D0h] BYREF

  v1 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_2(160LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "3 32 16 15 avatar_ptr:1065 64 16 15 player_ptr:1071 96 24 23 target_ability_vec:1070";
  *(_QWORD *)(v1 + 16) = AbilityComp::addAllSkillDepotTargetAbility;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -219021312;
  v3[536862722] = -219021312;
  v3[536862723] = -218103808;
  v3[536862724] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->creature_);
  toPtr<Avatar,Creature>((Creature *)(v1 + 32));
  if ( std::operator==<Avatar>(0LL, (const std::shared_ptr<Avatar> *)(v1 + 32)) )
  {
    v4 = 0;
  }
  else
  {
    std::vector<std::pair<unsigned int,unsigned int>>::vector((std::vector<std::pair<unsigned int,unsigned int>> *const)(v1 + 96));
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    creature = this->creature_;
    v6 = creature;
    if ( *(_BYTE *)(((unsigned __int64)creature >> 3) + 0x7FFF8000) )
      v6 = (Creature *)__asan_report_load8(this->creature_);
    v7 = *(_QWORD *)v6->baseclass_0 + 152LL;
    if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
      v7 = __asan_report_load8(v7);
    (*(void (__fastcall **)(unsigned __int64, Creature *))v7)(v1 + 64, creature);
    if ( std::operator==<Player>(0LL, (const std::shared_ptr<Player> *)(v1 + 64)) )
    {
      common::milog::MiLogStream::create(
        &v23,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/ability/ability_comp.cpp",
        "addAllSkillDepotTargetAbility",
        1074);
      v8 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
             &v23,
             (const char (*)[26])"player is null, creature:");
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v8, this->creature_);
      common::milog::MiLogStream::~MiLogStream(&v23);
      v4 = -1;
    }
    else
    {
      v9 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 64));
      AbilityGroupComp = Player::getAbilityGroupComp(v9);
      std::shared_ptr<Avatar>::shared_ptr(&p_avatar_ptr, (const std::shared_ptr<Avatar> *)(v1 + 32));
      PlayerAbilityGroupComp::getCurSkillDepotAbilitiesFromAbilityGroup(
        AbilityGroupComp,
        (TargetAbilityVec *)(v1 + 96),
        &p_avatar_ptr);
      std::shared_ptr<Avatar>::~shared_ptr(&p_avatar_ptr);
      __for_range = (std::vector<std::pair<unsigned int,unsigned int>> *)(v1 + 96);
      __for_begin._M_current = std::vector<std::pair<unsigned int,unsigned int>>::begin((std::vector<std::pair<unsigned int,unsigned int>> *const)(v1 + 96))._M_current;
      __for_end._M_current = std::vector<std::pair<unsigned int,unsigned int>>::end((std::vector<std::pair<unsigned int,unsigned int>> *const)(v1 + 96))._M_current;
      while ( __gnu_cxx::operator!=<std::pair<unsigned int,unsigned int> *,std::vector<std::pair<unsigned int,unsigned int>>>(
                &__for_begin,
                &__for_end) )
      {
        v11 = __gnu_cxx::__normal_iterator<std::pair<unsigned int,unsigned int> *,std::vector<std::pair<unsigned int,unsigned int>>>::operator*(&__for_begin);
        v12 = v11;
        if ( ((unsigned __int8)v11 & 7) >= *(_BYTE *)(((unsigned __int64)v11 >> 3) + 0x7FFF8000)
          && *(_BYTE *)(((unsigned __int64)v11 >> 3) + 0x7FFF8000) != 0
          || *(_BYTE *)((((unsigned __int64)&v11->second + 3) >> 3) + 0x7FFF8000) != 0
          && (((unsigned __int8)v11 + 7) & 7) >= *(_BYTE *)((((unsigned __int64)&v11->second + 3) >> 3) + 0x7FFF8000) )
        {
          __asan_report_load_n(v11, 8LL);
        }
        __in = *v12;
        ability_name_hash = std::get<0ul,unsigned int,unsigned int>(&__in);
        v13 = std::get<1ul,unsigned int,unsigned int>(&__in);
        override_name_hash = v13;
        if ( *(_BYTE *)(((unsigned __int64)v13 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v13 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v13 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v13);
        }
        v14 = *override_name_hash;
        if ( *(_BYTE *)(((unsigned __int64)ability_name_hash >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)ability_name_hash & 7) + 3) >= *(_BYTE *)(((unsigned __int64)ability_name_hash >> 3)
                                                                              + 0x7FFF8000) )
        {
          __asan_report_load4(ability_name_hash);
        }
        AbilityComp::addTargetAbility(this, *ability_name_hash, v14);
        __gnu_cxx::__normal_iterator<std::pair<unsigned int,unsigned int> *,std::vector<std::pair<unsigned int,unsigned int>>>::operator++(&__for_begin);
      }
      v4 = 0;
    }
    std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v1 + 64));
    std::vector<std::pair<unsigned int,unsigned int>>::~vector((std::vector<std::pair<unsigned int,unsigned int>> *const)(v1 + 96));
  }
  std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v1 + 32));
  result = v4;
  if ( v24 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 1087: range 00000000136C7BD8-00000000136C815B
int32_t __cdecl AbilityComp::removeAllSkillDepotTargetAbility(AbilityComp *const this)
{
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  int32_t v4; // r14d
  Creature *creature; // rsi
  Creature *v6; // rax
  unsigned __int64 v7; // rax
  common::milog::MiLogStream *v8; // rcx
  Player *v9; // rax
  PlayerAbilityGroupComp *AbilityGroupComp; // r14
  __gnu_cxx::__normal_iterator<std::pair<unsigned int,unsigned int>*,std::vector<std::pair<unsigned int,unsigned int>> >::reference v11; // rax
  std::pair<unsigned int,unsigned int> *v12; // rdx
  std::tuple_element<1,std::pair<unsigned int,unsigned int> >::type *v13; // rax
  uint32_t v14; // esi
  int32_t result; // eax
  std::vector<std::pair<unsigned int,unsigned int>>::iterator __for_begin; // [rsp+10h] [rbp-130h] BYREF
  std::vector<std::pair<unsigned int,unsigned int>>::iterator __for_end; // [rsp+18h] [rbp-128h] BYREF
  std::vector<std::pair<unsigned int,unsigned int>> *__for_range; // [rsp+20h] [rbp-120h]
  std::tuple_element<0,std::pair<unsigned int,unsigned int> >::type *ability_name_hash; // [rsp+28h] [rbp-118h]
  std::tuple_element<1,std::pair<unsigned int,unsigned int> >::type *override_name_hash; // [rsp+30h] [rbp-110h]
  std::pair<unsigned int,unsigned int> __in; // [rsp+38h] [rbp-108h] BYREF
  std::shared_ptr<Avatar> p_avatar_ptr; // [rsp+40h] [rbp-100h] BYREF
  common::milog::MiLogStream v23; // [rsp+50h] [rbp-F0h] BYREF
  char v24[208]; // [rsp+70h] [rbp-D0h] BYREF

  v1 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_2(160LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "3 32 16 15 avatar_ptr:1088 64 16 15 player_ptr:1094 96 24 23 target_ability_vec:1093";
  *(_QWORD *)(v1 + 16) = AbilityComp::removeAllSkillDepotTargetAbility;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -219021312;
  v3[536862722] = -219021312;
  v3[536862723] = -218103808;
  v3[536862724] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->creature_);
  toPtr<Avatar,Creature>((Creature *)(v1 + 32));
  if ( std::operator==<Avatar>(0LL, (const std::shared_ptr<Avatar> *)(v1 + 32)) )
  {
    v4 = 0;
  }
  else
  {
    std::vector<std::pair<unsigned int,unsigned int>>::vector((std::vector<std::pair<unsigned int,unsigned int>> *const)(v1 + 96));
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    creature = this->creature_;
    v6 = creature;
    if ( *(_BYTE *)(((unsigned __int64)creature >> 3) + 0x7FFF8000) )
      v6 = (Creature *)__asan_report_load8(this->creature_);
    v7 = *(_QWORD *)v6->baseclass_0 + 152LL;
    if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
      v7 = __asan_report_load8(v7);
    (*(void (__fastcall **)(unsigned __int64, Creature *))v7)(v1 + 64, creature);
    if ( std::operator==<Player>(0LL, (const std::shared_ptr<Player> *)(v1 + 64)) )
    {
      common::milog::MiLogStream::create(
        &v23,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/ability/ability_comp.cpp",
        "removeAllSkillDepotTargetAbility",
        1097);
      v8 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
             &v23,
             (const char (*)[26])"player is null, creature:");
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v8, this->creature_);
      common::milog::MiLogStream::~MiLogStream(&v23);
      v4 = -1;
    }
    else
    {
      v9 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 64));
      AbilityGroupComp = Player::getAbilityGroupComp(v9);
      std::shared_ptr<Avatar>::shared_ptr(&p_avatar_ptr, (const std::shared_ptr<Avatar> *)(v1 + 32));
      PlayerAbilityGroupComp::getCurSkillDepotAbilitiesFromAbilityGroup(
        AbilityGroupComp,
        (TargetAbilityVec *)(v1 + 96),
        &p_avatar_ptr);
      std::shared_ptr<Avatar>::~shared_ptr(&p_avatar_ptr);
      __for_range = (std::vector<std::pair<unsigned int,unsigned int>> *)(v1 + 96);
      __for_begin._M_current = std::vector<std::pair<unsigned int,unsigned int>>::begin((std::vector<std::pair<unsigned int,unsigned int>> *const)(v1 + 96))._M_current;
      __for_end._M_current = std::vector<std::pair<unsigned int,unsigned int>>::end((std::vector<std::pair<unsigned int,unsigned int>> *const)(v1 + 96))._M_current;
      while ( __gnu_cxx::operator!=<std::pair<unsigned int,unsigned int> *,std::vector<std::pair<unsigned int,unsigned int>>>(
                &__for_begin,
                &__for_end) )
      {
        v11 = __gnu_cxx::__normal_iterator<std::pair<unsigned int,unsigned int> *,std::vector<std::pair<unsigned int,unsigned int>>>::operator*(&__for_begin);
        v12 = v11;
        if ( ((unsigned __int8)v11 & 7) >= *(_BYTE *)(((unsigned __int64)v11 >> 3) + 0x7FFF8000)
          && *(_BYTE *)(((unsigned __int64)v11 >> 3) + 0x7FFF8000) != 0
          || *(_BYTE *)((((unsigned __int64)&v11->second + 3) >> 3) + 0x7FFF8000) != 0
          && (((unsigned __int8)v11 + 7) & 7) >= *(_BYTE *)((((unsigned __int64)&v11->second + 3) >> 3) + 0x7FFF8000) )
        {
          __asan_report_load_n(v11, 8LL);
        }
        __in = *v12;
        ability_name_hash = std::get<0ul,unsigned int,unsigned int>(&__in);
        v13 = std::get<1ul,unsigned int,unsigned int>(&__in);
        override_name_hash = v13;
        if ( *(_BYTE *)(((unsigned __int64)v13 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v13 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v13 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v13);
        }
        v14 = *override_name_hash;
        if ( *(_BYTE *)(((unsigned __int64)ability_name_hash >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)ability_name_hash & 7) + 3) >= *(_BYTE *)(((unsigned __int64)ability_name_hash >> 3)
                                                                              + 0x7FFF8000) )
        {
          __asan_report_load4(ability_name_hash);
        }
        AbilityComp::removeTargetAbility(this, *ability_name_hash, v14);
        __gnu_cxx::__normal_iterator<std::pair<unsigned int,unsigned int> *,std::vector<std::pair<unsigned int,unsigned int>>>::operator++(&__for_begin);
      }
      v4 = 0;
    }
    std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v1 + 64));
    std::vector<std::pair<unsigned int,unsigned int>>::~vector((std::vector<std::pair<unsigned int,unsigned int>> *const)(v1 + 96));
  }
  std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v1 + 32));
  result = v4;
  if ( v24 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 1110: range 00000000136C815C-00000000136C826C
int32_t __cdecl AbilityComp::addNewAbility(
        AbilityComp *const this,
        uint32_t ability_name_hash,
        uint32_t override_name_hash)
{
  std::map<int,std::any> *EmptyAnyMap; // rcx
  std::allocator<char> __a; // [rsp+1Fh] [rbp-31h] BYREF
  std::string str; // [rsp+20h] [rbp-30h] BYREF

  if ( !(_BYTE)`guard variable for'AbilityComp::addNewAbility(unsigned int,unsigned int)::default_override_name_hash
    && __cxa_guard_acquire(&`guard variable for'AbilityComp::addNewAbility(unsigned int,unsigned int)::default_override_name_hash) )
  {
    std::allocator<char>::allocator(&__a);
    std::string::basic_string<std::allocator<char>>(&str, "Default", &__a);
    AbilityComp::addNewAbility(unsigned int,unsigned int)::default_override_name_hash = getStringHash(&str);
    __cxa_guard_release(&`guard variable for'AbilityComp::addNewAbility(unsigned int,unsigned int)::default_override_name_hash);
    std::string::~string(&str);
    std::allocator<char>::~allocator(&__a);
  }
  if ( !override_name_hash )
    override_name_hash = AbilityComp::addNewAbility(unsigned int,unsigned int)::default_override_name_hash;
  EmptyAnyMap = getEmptyAnyMap();
  return AbilityComp::addNewAbility(this, ability_name_hash, override_name_hash, EmptyAnyMap, 0);
};

// Line 1120: range 00000000136C826E-00000000136C881C
__int64 __fastcall AbilityComp::addNewAbility(
        AbilityComp *const this,
        uint32_t ability_name_hash,
        uint32_t override_name_hash,
        const std::map<int,std::any> *override_map,
        uint32_t ability_id)
{
  unsigned __int64 v5; // r12
  __int64 v6; // rax
  _DWORD *v7; // r13
  unsigned int v8; // eax
  common::milog::MiLogStream *v9; // r14
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  const std::string *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // r14
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  const std::string *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  unsigned int v20; // r14d
  common::milog::MiLogStream *v21; // r14
  std::__shared_ptr_access<data::ConfigAbility,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v22; // rax
  common::milog::MiLogStream *v23; // rcx
  unsigned int v24; // r14d
  uint32_t v25; // eax
  common::milog::MiLogStream *v26; // r14
  std::__shared_ptr_access<data::ConfigAbility,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v27; // rax
  common::milog::MiLogStream *v28; // rcx
  __int64 result; // rax
  uint32_t override_mapa; // [rsp+8h] [rbp-F8h]
  std::shared_ptr<Config> v32; // [rsp+20h] [rbp-E0h] BYREF
  common::milog::MiLogStream v33; // [rsp+30h] [rbp-D0h] BYREF
  char v34[176]; // [rsp+50h] [rbp-B0h] BYREF

  override_mapa = (unsigned int)override_map;
  v5 = (unsigned __int64)v34;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_1(128LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "4 32 4 22 ability_name_hash:1119 48 4 23 override_name_hash:1119 64 16 23 config_ability_ptr:112"
                        "1 96 16 16 ability_ptr:1135";
  *(_QWORD *)(v5 + 16) = AbilityComp::addNewAbility;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234556924;
  v7[536862722] = -219021312;
  v7[536862723] = -202178560;
  *(_DWORD *)(v5 + 32) = ability_name_hash;
  *(_DWORD *)(v5 + 48) = override_name_hash;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v5 + 96));
  v8 = (unsigned int)std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 96));
  JsonConfigMgr::findAbilityConfig((const JsonConfigMgr *const)(v5 + 64), v8 + 93080, *(_DWORD *)(v5 + 32));
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v5 + 96));
  if ( std::operator==<data::ConfigAbility>((const std::shared_ptr<data::ConfigAbility> *)(v5 + 64), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v33,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "addNewAbility",
      1124);
    v9 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
           &v33,
           (const char (*)[42])"config_ability_ptr is null, ability_name:");
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v32);
    v10 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v32);
    v11 = JsonConfigMgr::getAbilityStringFromHash[abi:cxx11](&v10->design_config.json_config_mgr, *(_DWORD *)(v5 + 32));
    v12 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v9, v11);
    v13 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
            v12,
            (const char (*)[20])" ability_name_hash:");
    v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v5 + 32));
    v15 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v14, (const char (*)[16])" override_name:");
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)(v5 + 96));
    v16 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 96));
    v17 = JsonConfigMgr::getAbilityStringFromHash[abi:cxx11](&v16->design_config.json_config_mgr, *(_DWORD *)(v5 + 48));
    v18 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v15, v17);
    v19 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
            v18,
            (const char (*)[21])" override_name_hash:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, (const unsigned int *)(v5 + 48));
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v5 + 96));
    std::shared_ptr<Config>::~shared_ptr(&v32);
    common::milog::MiLogStream::~MiLogStream(&v33);
    v20 = -1;
  }
  else if ( common::tools::MiscUtils::isContains<std::unordered_set<unsigned int>,unsigned int>(
              &this->ability_name_hash_set_,
              (const unsigned int *)(v5 + 32)) )
  {
    common::milog::MiLogStream::create(
      &v33,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "addNewAbility",
      1132);
    v21 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
            &v33,
            (const char (*)[19])"duplicate ability:");
    v22 = std::__shared_ptr_access<data::ConfigAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 64));
    v23 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v21, &v22->ability_name);
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v23, this->creature_);
    common::milog::MiLogStream::~MiLogStream(&v33);
    v20 = -1;
  }
  else
  {
    v24 = *(_DWORD *)(v5 + 48);
    v25 = (unsigned int)std::__shared_ptr_access<data::ConfigAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::ConfigAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 64));
    AbilityComp::addAbility(
      (AbilityComp *const)(v5 + 96),
      (data::ConfigAbility *)this,
      v25,
      (const std::map<int,std::any> *)v24,
      override_mapa);
    if ( std::operator==<ActorAbility>((const std::shared_ptr<ActorAbility> *)(v5 + 96), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v33,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "addNewAbility",
        1138);
      v26 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              &v33,
              (const char (*)[27])"addAbility fails. ability:");
      v27 = std::__shared_ptr_access<data::ConfigAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 64));
      v28 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v26, &v27->ability_name);
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v28, this->creature_);
      common::milog::MiLogStream::~MiLogStream(&v33);
      v20 = -1;
    }
    else
    {
      v20 = 0;
    }
    std::shared_ptr<ActorAbility>::~shared_ptr((std::shared_ptr<ActorAbility> *const)(v5 + 96));
  }
  std::shared_ptr<data::ConfigAbility>::~shared_ptr((std::shared_ptr<data::ConfigAbility> *const)(v5 + 64));
  result = v20;
  if ( v34 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1145: range 00000000136C881E-00000000136C8C3B
AbilityComp *__fastcall AbilityComp::addAbility(
        AbilityComp *const this,
        data::ConfigAbility *config_ability,
        __int64 override_name_hash,
        const std::map<int,std::any> *override_map,
        uint32_t ability_id,
        int a6)
{
  unsigned __int64 p_M_node_count; // r12
  __int64 v7; // rax
  _DWORD *v8; // r13
  unsigned __int64 v9; // rax
  uint32_t v10; // r14d
  ActorAbility *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rcx
  uint32_t override_name_hasha; // [rsp+14h] [rbp-DCh]
  std::map<unsigned int,std::shared_ptr<ActorAbility>> v20; // [rsp+38h] [rbp-B8h] BYREF

  override_name_hasha = (unsigned int)override_map;
  p_M_node_count = (unsigned __int64)&v20._M_t._M_impl._M_node_count;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v7 = __asan_stack_malloc_1(96LL);
    if ( v7 )
      p_M_node_count = v7;
  }
  *(_QWORD *)p_M_node_count = 1102416563LL;
  *(_QWORD *)(p_M_node_count + 8) = "2 48 4 15 ability_id:1144 64 16 16 ability_ptr:1149";
  *(_QWORD *)(p_M_node_count + 16) = AbilityComp::addAbility;
  v8 = (_DWORD *)(p_M_node_count >> 3);
  v8[536862720] = -235802127;
  v8[536862721] = -234556943;
  v8[536862722] = -202178560;
  *(_DWORD *)(p_M_node_count + 48) = a6;
  if ( *(_BYTE *)((((unsigned __int64)&config_ability->_M_weak_this._M_refcount._M_pi + 5) >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)config_ability + 21) & 7) >= *(_BYTE *)((((unsigned __int64)&config_ability->_M_weak_this._M_refcount._M_pi
                                                                  + 5) >> 3)
                                                                + 0x7FFF8000) )
  {
    __asan_report_load1((char *)&config_ability->_M_weak_this._M_refcount._M_pi + 5);
  }
  if ( BYTE5(config_ability->_M_weak_this._M_refcount._M_pi) )
  {
    std::shared_ptr<ActorAbility>::shared_ptr((std::shared_ptr<ActorAbility> *const)this, 0LL);
  }
  else
  {
    AbilityComp::createAbility(
      (AbilityComp *const)(p_M_node_count + 64),
      config_ability,
      override_name_hash,
      (const std::map<int,std::any> *)override_name_hasha);
    if ( std::operator==<ActorAbility>((const std::shared_ptr<ActorAbility> *)(p_M_node_count + 64), 0LL) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&v20._M_t._M_impl.std::_Rb_tree_header,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "addAbility",
        1152);
      common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
        (common::milog::MiLogStream *const)&v20._M_t._M_impl.std::_Rb_tree_header,
        (const char (*)[20])"ability_ptr is null");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v20._M_t._M_impl.std::_Rb_tree_header);
      std::shared_ptr<ActorAbility>::shared_ptr((std::shared_ptr<ActorAbility> *const)this, 0LL);
    }
    else
    {
      if ( !*(_DWORD *)(p_M_node_count + 48) )
      {
        if ( std::map<unsigned int,std::shared_ptr<ActorAbility>>::empty((const std::map<unsigned int,std::shared_ptr<ActorAbility>> *const)&config_ability->on_removed._M_impl._M_end_of_storage) )
        {
          *(_DWORD *)(p_M_node_count + 48) = 1;
        }
        else
        {
          std::map<unsigned int,std::shared_ptr<ActorAbility>>::rbegin(&v20);
          v9 = (unsigned __int64)std::reverse_iterator<std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<ActorAbility>>>>::operator->((const std::reverse_iterator<std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<ActorAbility> > > > *const)&v20);
          if ( *(_BYTE *)((v9 >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)((v9 >> 3) + 0x7FFF8000) <= 3 )
            v9 = __asan_report_load4(v9);
          *(_DWORD *)(p_M_node_count + 48) = *(_DWORD *)v9 + 1;
        }
      }
      v10 = *(_DWORD *)(p_M_node_count + 48);
      v11 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_M_node_count + 64));
      AbilityComp::attachAbility((AbilityComp *const)config_ability, v11, v10);
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&v20._M_t._M_impl.std::_Rb_tree_header,
        &common::milog::MiLogDefault::default_log_obj_,
        0x11u,
        "./src/ability/ability_comp.cpp",
        "addAbility",
        1168);
      v12 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
              (common::milog::MiLogStream *const)&v20._M_t._M_impl.std::_Rb_tree_header,
              (const char (*)[23])"[ABILITY] add ability:");
      v13 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
              v12,
              (const std::string *)(override_name_hash + 24));
      v14 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v13, " ability_id:");
      v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v14,
              (const unsigned int *)(p_M_node_count + 48));
      if ( *(_BYTE *)(((unsigned __int64)&config_ability->std::enable_shared_from_this<data::ConfigAbility> >> 3)
                    + 0x7FFF8000) )
        __asan_report_load8(&config_ability->std::enable_shared_from_this<data::ConfigAbility>);
      common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(
        v15,
        (const Creature *)config_ability->_M_weak_this._M_ptr);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v20._M_t._M_impl.std::_Rb_tree_header);
      std::shared_ptr<ActorAbility>::shared_ptr(
        (std::shared_ptr<ActorAbility> *const)this,
        (std::shared_ptr<ActorAbility> *)(p_M_node_count + 64));
    }
    std::shared_ptr<ActorAbility>::~shared_ptr((std::shared_ptr<ActorAbility> *const)(p_M_node_count + 64));
  }
  if ( &v20._M_t._M_impl._M_node_count == (std::size_t *)p_M_node_count )
  {
    *(_QWORD *)((p_M_node_count >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((p_M_node_count >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)p_M_node_count = 1172321806LL;
    *(_QWORD *)((p_M_node_count >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((p_M_node_count >> 3) + 0x7FFF8008) = -168430091;
  }
  return this;
};

// Line 1175: range 00000000136C8C3C-00000000136C8ECE
// local variable allocation has failed, the output may be wrong!
ActorAbilityPtr __cdecl AbilityComp::createAbility(
        AbilityComp *const this,
        data::ConfigAbility *config_ability,
        uint32_t override_name_hash,
        const std::map<int,std::any> *override_map)
{
  const std::map<int,std::any> *v4; // r8
  unsigned __int64 v5; // rbx
  __int64 v6; // rax
  unsigned __int64 v7; // r13
  ActorAbility *v8; // rdi
  ActorAbilityPtr result; // rax
  const std::map<int,std::any> *override_mapa; // [rsp+8h] [rbp-A8h]
  uint32_t override_name_hasha; // [rsp+14h] [rbp-9Ch]
  data::ConfigAbility *config_abilitya; // [rsp+18h] [rbp-98h]
  common::milog::MiLogStream v14; // [rsp+30h] [rbp-80h] BYREF
  char v15[96]; // [rsp+50h] [rbp-60h] BYREF

  config_abilitya = *(data::ConfigAbility **)&override_name_hash;
  override_name_hasha = (unsigned int)override_map;
  override_mapa = v4;
  v5 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_0(64LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "1 32 16 16 ability_ptr:1176";
  *(_QWORD *)(v5 + 16) = AbilityComp::createAbility;
  v7 = v5 >> 3;
  *(_DWORD *)(v7 + 2147450880) = -235802127;
  *(_DWORD *)(v7 + 2147450884) = -202178560;
  common::tools::perf::make_shared<ActorAbility>();
  if ( std::operator==<ActorAbility>((const std::shared_ptr<ActorAbility> *)(v5 + 32), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v14,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "createAbility",
      1179);
    common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(&v14, (const char (*)[20])"ability_ptr is null");
    common::milog::MiLogStream::~MiLogStream(&v14);
    std::shared_ptr<ActorAbility>::shared_ptr((std::shared_ptr<ActorAbility> *const)this, 0LL);
  }
  else
  {
    v8 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 32));
    if ( *(_BYTE *)(((unsigned __int64)&config_ability->std::enable_shared_from_this<data::ConfigAbility> >> 3)
                  + 0x7FFF8000) )
    {
      v8 = (ActorAbility *)&config_ability->std::enable_shared_from_this<data::ConfigAbility>;
      __asan_report_load8(&config_ability->std::enable_shared_from_this<data::ConfigAbility>);
    }
    if ( ActorAbility::init(
           v8,
           (Creature *)config_ability->_M_weak_this._M_ptr,
           config_abilitya,
           override_name_hasha,
           override_mapa) )
    {
      common::milog::MiLogStream::create(
        &v14,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "createAbility",
        1184);
      common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(&v14, (const char (*)[11])"init fails");
      common::milog::MiLogStream::~MiLogStream(&v14);
      std::shared_ptr<ActorAbility>::shared_ptr((std::shared_ptr<ActorAbility> *const)this, 0LL);
    }
    else
    {
      std::shared_ptr<ActorAbility>::shared_ptr(
        (std::shared_ptr<ActorAbility> *const)this,
        (std::shared_ptr<ActorAbility> *)(v5 + 32));
    }
  }
  std::shared_ptr<ActorAbility>::~shared_ptr((std::shared_ptr<ActorAbility> *const)(v5 + 32));
  if ( v15 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<ActorAbility,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 1193: range 00000000136C8ED0-00000000136C8FE0
bool __cdecl AbilityComp::hasAbility(AbilityComp *const this, const std::string *ability_name)
{
  ActorAbility *v3; // rax
  std::map<unsigned int,std::shared_ptr<ActorAbility>>::iterator __for_begin; // [rsp+18h] [rbp-38h] BYREF
  std::map<unsigned int,std::shared_ptr<ActorAbility>>::iterator __for_end; // [rsp+20h] [rbp-30h] BYREF
  std::map<unsigned int,std::shared_ptr<ActorAbility>> *__for_range; // [rsp+28h] [rbp-28h]
  std::pair<unsigned int const,std::shared_ptr<ActorAbility> > *__in; // [rsp+30h] [rbp-20h]
  std::tuple_element<0,std::pair<unsigned int const,std::shared_ptr<ActorAbility> > >::type *ability_id; // [rsp+38h] [rbp-18h]
  std::tuple_element<1,std::pair<unsigned int const,std::shared_ptr<ActorAbility> > >::type *ability_ptr; // [rsp+40h] [rbp-10h]
  const data::ConfigAbility *config_ability; // [rsp+48h] [rbp-8h]

  if ( (unsigned __int8)std::string::empty(ability_name) )
    return 0;
  if ( std::map<unsigned int,std::shared_ptr<ActorAbility>>::empty(&this->applied_ability_map_) )
    return 0;
  __for_range = &this->applied_ability_map_;
  __for_begin._M_node = std::map<unsigned int,std::shared_ptr<ActorAbility>>::begin(&this->applied_ability_map_)._M_node;
  __for_end._M_node = std::map<unsigned int,std::shared_ptr<ActorAbility>>::end(&this->applied_ability_map_)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    __in = std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<ActorAbility>>>::operator*(&__for_begin);
    ability_id = std::get<0ul,unsigned int const,std::shared_ptr<ActorAbility>>(__in);
    ability_ptr = std::get<1ul,unsigned int const,std::shared_ptr<ActorAbility>>(__in);
    v3 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)ability_ptr);
    config_ability = ActorAbility::getConfigRef(v3);
    if ( std::operator==<char>(&config_ability->ability_name, ability_name) )
      return 1;
    std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<ActorAbility>>>::operator++(&__for_begin);
  }
  return 0;
};

// Line 1210: range 00000000136C8FE2-00000000136C939A
__int64 __fastcall AbilityComp::removeAbility(AbilityComp *const this, uint32_t ability_id)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream *v6; // rcx
  unsigned int v7; // r14d
  std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<ActorAbility> > >::pointer v8; // rax
  std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  std::vector<std::shared_ptr<BaseAbilityMixin>> *MixinVec; // rax
  ActorAbility *v11; // rax
  std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  common::milog::MiLogStream *v13; // r14
  std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  __int64 result; // rax
  std::unordered_set<unsigned int>::key_type __x; // [rsp+14h] [rbp-DCh] BYREF
  std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<ActorAbility> > >::_Self __y; // [rsp+18h] [rbp-D8h] BYREF
  common::milog::MiLogStream v18; // [rsp+20h] [rbp-D0h] BYREF
  char v19[176]; // [rsp+40h] [rbp-B0h] BYREF

  v2 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 15 ability_id:1209 64 8 7 it:1211 96 16 16 ability_ptr:1217";
  *(_QWORD *)(v2 + 16) = AbilityComp::removeAbility;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202178560;
  *(_DWORD *)(v2 + 48) = ability_id;
  *(std::map<unsigned int,std::shared_ptr<ActorAbility>>::iterator *)(v2 + 64) = std::map<unsigned int,std::shared_ptr<ActorAbility>>::find(
                                                                                   &this->applied_ability_map_,
                                                                                   (const std::map<unsigned int,std::shared_ptr<ActorAbility>>::key_type *)(v2 + 48));
  __y._M_node = std::map<unsigned int,std::shared_ptr<ActorAbility>>::end(&this->applied_ability_map_)._M_node;
  if ( std::operator==(
         (const std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<ActorAbility> > >::_Self *)(v2 + 64),
         &__y) )
  {
    common::milog::MiLogStream::create(
      &v18,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "removeAbility",
      1214);
    v5 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(&v18, (const char (*)[23])off_25033BC0);
    v6 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v5, (const unsigned int *)(v2 + 48));
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v6, this->creature_);
    common::milog::MiLogStream::~MiLogStream(&v18);
    v7 = -1;
  }
  else
  {
    v8 = std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<ActorAbility>>>::operator->((const std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<ActorAbility> > > *const)(v2 + 64));
    std::shared_ptr<ActorAbility>::shared_ptr((std::shared_ptr<ActorAbility> *const)(v2 + 96), &v8->second);
    v9 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
    MixinVec = BaseActorActionContext::getMixinVec(v9);
    AbilityComp::removeMixins(this, MixinVec);
    v11 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
    ActorAbility::detach(v11);
    std::map<unsigned int,std::shared_ptr<ActorAbility>>::erase[abi:cxx11](
      &this->applied_ability_map_,
      *(std::map<unsigned int,std::shared_ptr<ActorAbility>>::iterator *)(v2 + 64));
    v12 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
    __x = ActorAbility::getAbilityNameHash(v12);
    std::unordered_set<unsigned int>::erase(&this->ability_name_hash_set_, &__x);
    common::milog::MiLogStream::create(
      &v18,
      &common::milog::MiLogDefault::default_log_obj_,
      0x11u,
      "./src/ability/ability_comp.cpp",
      "removeAbility",
      1222);
    v13 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
            &v18,
            (const char (*)[33])"[ABILITY] del ability_name_hash:");
    v14 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
    __x = ActorAbility::getAbilityNameHash(v14);
    common::milog::MiLogStream::operator<<<int,(int *)0>(v13, (const int *)&__x);
    common::milog::MiLogStream::~MiLogStream(&v18);
    v7 = 0;
    std::shared_ptr<ActorAbility>::~shared_ptr((std::shared_ptr<ActorAbility> *const)(v2 + 96));
  }
  result = v7;
  if ( v19 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1227: range 00000000136C939C-00000000136C93C9
int32_t __cdecl AbilityComp::removeAbility(AbilityComp *const this, ActorAbility *ability)
{
  uint32_t AbilityId; // edx

  AbilityId = ActorAbility::getAbilityId(ability);
  return AbilityComp::removeAbility(this, AbilityId);
};

// Line 1233: range 00000000136C93CA-00000000136C94E3
ActorAbilityPtr __cdecl AbilityComp::findAppliedAbility(AbilityComp *const this, const std::string *ability_name)
{
  const std::string *v2; // rdx
  ActorAbility *v3; // rax
  std::string *p_ability_name; // rdx
  ActorAbilityPtr result; // rax
  const std::string *ability_namea; // [rsp+8h] [rbp-48h]
  std::map<unsigned int,std::shared_ptr<ActorAbility>>::iterator __for_begin; // [rsp+20h] [rbp-30h] BYREF
  std::map<unsigned int,std::shared_ptr<ActorAbility>>::iterator __for_end; // [rsp+28h] [rbp-28h] BYREF
  std::map<unsigned int,std::shared_ptr<ActorAbility>> *__for_range; // [rsp+30h] [rbp-20h]
  std::pair<unsigned int const,std::shared_ptr<ActorAbility> > *__in; // [rsp+38h] [rbp-18h]
  std::tuple_element<0,std::pair<unsigned int const,std::shared_ptr<ActorAbility> > >::type *ability_id; // [rsp+40h] [rbp-10h]
  std::tuple_element<1,std::pair<unsigned int const,std::shared_ptr<ActorAbility> > >::type *ability_ptr; // [rsp+48h] [rbp-8h]

  ability_namea = v2;
  __for_range = (std::map<unsigned int,std::shared_ptr<ActorAbility>> *)(&ability_name[7]._anon_0._M_allocated_capacity
                                                                       + 1);
  __for_begin._M_node = std::map<unsigned int,std::shared_ptr<ActorAbility>>::begin((std::map<unsigned int,std::shared_ptr<ActorAbility>> *const)(&ability_name[7]._anon_0._M_allocated_capacity + 1))._M_node;
  __for_end._M_node = std::map<unsigned int,std::shared_ptr<ActorAbility>>::end((std::map<unsigned int,std::shared_ptr<ActorAbility>> *const)(&ability_name[7]._anon_0._M_allocated_capacity + 1))._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    __in = std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<ActorAbility>>>::operator*(&__for_begin);
    ability_id = std::get<0ul,unsigned int const,std::shared_ptr<ActorAbility>>(__in);
    ability_ptr = std::get<1ul,unsigned int const,std::shared_ptr<ActorAbility>>(__in);
    if ( std::operator!=<ActorAbility>(ability_ptr, 0LL) )
    {
      v3 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)ability_ptr);
      p_ability_name = &ActorAbility::getConfigRef(v3)->ability_name;
      if ( std::operator==<char>(p_ability_name, ability_namea) )
      {
        std::shared_ptr<ActorAbility>::shared_ptr((std::shared_ptr<ActorAbility> *const)this, ability_ptr);
        goto LABEL_11;
      }
    }
    std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<ActorAbility>>>::operator++(&__for_begin);
  }
  std::shared_ptr<ActorAbility>::shared_ptr((std::shared_ptr<ActorAbility> *const)this, 0LL);
LABEL_11:
  result._M_ptr = (std::__shared_ptr<ActorAbility,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 1244: range 00000000136C94E4-00000000136C9671
AbilityComp *__fastcall AbilityComp::findAppliedAbility(AbilityComp *const this, __int64 applied_ability_id, int a3)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<ActorAbility> > >::pointer v6; // rax
  std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<ActorAbility> > >::_Self __y; // [rsp+28h] [rbp-88h] BYREF
  char v10[128]; // [rsp+30h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 23 applied_ability_id:1243 64 8 7 it:1245";
  *(_QWORD *)(v3 + 16) = AbilityComp::findAppliedAbility;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116352;
  *(_DWORD *)(v3 + 48) = a3;
  *(std::map<unsigned int,std::shared_ptr<ActorAbility>>::iterator *)(v3 + 64) = std::map<unsigned int,std::shared_ptr<ActorAbility>>::find(
                                                                                   (std::map<unsigned int,std::shared_ptr<ActorAbility>> *const)(applied_ability_id + 248),
                                                                                   (const std::map<unsigned int,std::shared_ptr<ActorAbility>>::key_type *)(v3 + 48));
  __y._M_node = std::map<unsigned int,std::shared_ptr<ActorAbility>>::end((std::map<unsigned int,std::shared_ptr<ActorAbility>> *const)(applied_ability_id + 248))._M_node;
  if ( std::operator==(
         (const std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<ActorAbility> > >::_Self *)(v3 + 64),
         &__y) )
  {
    std::shared_ptr<ActorAbility>::shared_ptr((std::shared_ptr<ActorAbility> *const)this, 0LL);
  }
  else
  {
    v6 = std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<ActorAbility>>>::operator->((const std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<ActorAbility> > > *const)(v3 + 64));
    std::shared_ptr<ActorAbility>::shared_ptr((std::shared_ptr<ActorAbility> *const)this, &v6->second);
  }
  if ( v10 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return this;
};

// Line 1255: range 00000000136C9672-00000000136C98D1
__int64 __fastcall AbilityComp::attachAbility(AbilityComp *const this, ActorAbility *ability, uint32_t ability_id)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  common::milog::MiLogStream *v6; // rax
  __int64 result; // rax
  std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  std::vector<std::shared_ptr<BaseAbilityMixin>> *MixinVec; // rax
  std::unordered_set<unsigned int>::value_type __x; // [rsp+24h] [rbp-9Ch] BYREF
  ActorAbilityPtr *ability_ptr; // [rsp+28h] [rbp-98h]
  std::shared_ptr<ActorAbility> __r; // [rsp+30h] [rbp-90h] BYREF
  common::milog::MiLogStream v14; // [rsp+40h] [rbp-80h] BYREF
  char v15[96]; // [rsp+60h] [rbp-60h] BYREF

  v3 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 4 15 ability_id:1254";
  *(_QWORD *)(v3 + 16) = AbilityComp::attachAbility;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116348;
  *(_DWORD *)(v3 + 32) = ability_id;
  ability_ptr = std::map<unsigned int,std::shared_ptr<ActorAbility>>::operator[](
                  &this->applied_ability_map_,
                  (const std::map<unsigned int,std::shared_ptr<ActorAbility>>::key_type *)(v3 + 32));
  if ( std::operator!=<ActorAbility>(ability_ptr, 0LL) )
  {
    common::milog::MiLogStream::create(
      &v14,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "attachAbility",
      1259);
    v6 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
           &v14,
           (const char (*)[33])"ability is not null, ability_id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, (const unsigned int *)(v3 + 32));
    common::milog::MiLogStream::~MiLogStream(&v14);
    result = 0xFFFFFFFFLL;
  }
  else
  {
    toThisPtr<ActorAbility>((ActorAbility *)&__r);
    std::shared_ptr<ActorAbility>::operator=(ability_ptr, &__r);
    std::shared_ptr<ActorAbility>::~shared_ptr(&__r);
    ActorAbility::setAbilityId(ability, *(_DWORD *)(v3 + 32));
    ActorAbility::attach(ability);
    __x = ActorAbility::getAbilityNameHash(ability);
    std::unordered_set<unsigned int>::insert(&this->ability_name_hash_set_, &__x);
    v8 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)ability_ptr);
    MixinVec = BaseActorActionContext::getMixinVec(v8);
    AbilityComp::addMixins(this, MixinVec);
    result = 0LL;
  }
  if ( v15 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1272: range 00000000136C98D2-00000000136C9C27
int32_t __cdecl AbilityComp::foreachAbility(
        AbilityComp *const this,
        std::function<ForeachPolicy(ActorAbility&)> *p_func)
{
  int32_t v2; // r15d
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  std::map<unsigned int,std::shared_ptr<ActorAbility>>::size_type v6; // rax
  int v7; // r14d
  ActorAbility *v8; // rdx
  int32_t result; // eax
  std::map<unsigned int,std::shared_ptr<ActorAbility>>::iterator __for_begin; // [rsp+20h] [rbp-F0h] BYREF
  std::map<unsigned int,std::shared_ptr<ActorAbility>>::iterator __for_end; // [rsp+28h] [rbp-E8h] BYREF
  std::map<unsigned int,std::shared_ptr<ActorAbility>> *__for_range; // [rsp+30h] [rbp-E0h]
  std::vector<std::weak_ptr<ActorAbility>> *__for_range_0; // [rsp+38h] [rbp-D8h]
  std::weak_ptr<ActorAbility> *applied_ability_wtr; // [rsp+40h] [rbp-D0h]
  std::pair<unsigned int const,std::shared_ptr<ActorAbility> > *__in; // [rsp+48h] [rbp-C8h]
  std::tuple_element<0,std::pair<unsigned int const,std::shared_ptr<ActorAbility> > >::type *applied_ability_id; // [rsp+50h] [rbp-C0h]
  std::tuple_element<1,std::pair<unsigned int const,std::shared_ptr<ActorAbility> > >::type *applied_ability_ptr; // [rsp+58h] [rbp-B8h]
  char v18[176]; // [rsp+60h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 32 16 24 applied_ability_ptr:1282 64 24 24 applied_ability_vec:1274";
  *(_QWORD *)(v3 + 16) = AbilityComp::foreachAbility;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -219021312;
  v5[536862722] = -218103808;
  v5[536862723] = -202116109;
  std::vector<std::weak_ptr<ActorAbility>>::vector((std::vector<std::weak_ptr<ActorAbility>> *const)(v3 + 64));
  v6 = std::map<unsigned int,std::shared_ptr<ActorAbility>>::size(&this->applied_ability_map_);
  std::vector<std::weak_ptr<ActorAbility>>::reserve((std::vector<std::weak_ptr<ActorAbility>> *const)(v3 + 64), v6);
  __for_range = &this->applied_ability_map_;
  __for_begin._M_node = std::map<unsigned int,std::shared_ptr<ActorAbility>>::begin(&this->applied_ability_map_)._M_node;
  __for_end._M_node = std::map<unsigned int,std::shared_ptr<ActorAbility>>::end(&this->applied_ability_map_)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    __in = std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<ActorAbility>>>::operator*(&__for_begin);
    applied_ability_id = std::get<0ul,unsigned int const,std::shared_ptr<ActorAbility>>(__in);
    applied_ability_ptr = std::get<1ul,unsigned int const,std::shared_ptr<ActorAbility>>(__in);
    std::vector<std::weak_ptr<ActorAbility>>::emplace_back<std::shared_ptr<ActorAbility> &>(
      (std::vector<std::weak_ptr<ActorAbility>> *const)(v3 + 64),
      applied_ability_ptr,
      applied_ability_ptr);
    std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<ActorAbility>>>::operator++(&__for_begin);
  }
  __for_range_0 = (std::vector<std::weak_ptr<ActorAbility>> *)(v3 + 64);
  __for_begin._M_node = (std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<ActorAbility> > >::_Base_ptr)std::vector<std::weak_ptr<ActorAbility>>::begin((std::vector<std::weak_ptr<ActorAbility>> *const)(v3 + 64))._M_current;
  __for_end._M_node = (std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<ActorAbility> > >::_Base_ptr)std::vector<std::weak_ptr<ActorAbility>>::end(__for_range_0)._M_current;
  while ( __gnu_cxx::operator!=<std::weak_ptr<ActorAbility> *,std::vector<std::weak_ptr<ActorAbility>>>(
            (const __gnu_cxx::__normal_iterator<std::weak_ptr<ActorAbility>*,std::vector<std::weak_ptr<ActorAbility>> > *)&__for_begin,
            (const __gnu_cxx::__normal_iterator<std::weak_ptr<ActorAbility>*,std::vector<std::weak_ptr<ActorAbility>> > *)&__for_end) )
  {
    applied_ability_wtr = __gnu_cxx::__normal_iterator<std::weak_ptr<ActorAbility> *,std::vector<std::weak_ptr<ActorAbility>>>::operator*((const __gnu_cxx::__normal_iterator<std::weak_ptr<ActorAbility>*,std::vector<std::weak_ptr<ActorAbility>> > *const)&__for_begin);
    std::weak_ptr<ActorAbility>::lock((const std::weak_ptr<ActorAbility> *const)(v3 + 32));
    if ( std::operator==<ActorAbility>((const std::shared_ptr<ActorAbility> *)(v3 + 32), 0LL) )
    {
      v7 = 0;
    }
    else
    {
      v8 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
      if ( std::function<ForeachPolicy ()(ActorAbility &)>::operator()(p_func, v8) )
      {
        v2 = 1;
        v7 = 1;
      }
      else
      {
        v7 = 2;
      }
    }
    std::shared_ptr<ActorAbility>::~shared_ptr((std::shared_ptr<ActorAbility> *const)(v3 + 32));
    if ( v7 && v7 != 2 )
      goto LABEL_18;
    __gnu_cxx::__normal_iterator<std::weak_ptr<ActorAbility> *,std::vector<std::weak_ptr<ActorAbility>>>::operator++((__gnu_cxx::__normal_iterator<std::weak_ptr<ActorAbility>*,std::vector<std::weak_ptr<ActorAbility>> > *const)&__for_begin);
  }
  v2 = 0;
LABEL_18:
  std::vector<std::weak_ptr<ActorAbility>>::~vector((std::vector<std::weak_ptr<ActorAbility>> *const)(v3 + 64));
  result = v2;
  if ( v18 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1300: range 00000000136C9C28-00000000136CA887
AbilityComp *__fastcall AbilityComp::addModifierOnIndex(
        AbilityComp *const this,
        AbilityComp *p_ability_ptr,
        const std::shared_ptr<ActorAbility> *p_config_ability_ptr,
        const std::shared_ptr<ConfigAbilityImpl> *config_modifier,
        data::ConfigAbilityModifier *index,
        uint32_t modifer_apply_entity_id,
        int is_server_modifier,
        bool is_durability_zero,
        bool a9)
{
  unsigned __int64 v9; // r13
  __int64 v10; // rax
  _DWORD *v11; // r12
  ActorModifier *v12; // r15
  std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *creature; // r14
  std::vector<std::shared_ptr<ActorModifier>>::size_type v14; // r14
  std::shared_ptr<ActorModifier> *v15; // rax
  ActorModifier *v16; // rax
  ActorModifier *v17; // rax
  ActorModifier *v18; // rax
  ActorModifier *v19; // rax
  ActorModifier *v20; // rax
  std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  std::vector<std::shared_ptr<BaseAbilityMixin>> *MixinVec; // rax
  __m128i v23; // xmm0
  std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v24; // rax
  ActorAbility *v25; // r14
  ActorAbility *v26; // r14
  float *v27; // rax
  float *v28; // rdx
  GameserverService *v29; // rax
  GameserverService *v30; // rax
  common::milog::MiLogStream *v31; // r14
  std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v32; // rax
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rax
  common::milog::MiLogStream *v36; // rax
  common::milog::MiLogStream *v37; // rax
  common::milog::MiLogStream *v38; // rax
  common::milog::MiLogStream *v39; // rax
  common::milog::MiLogStream *v40; // rax
  common::milog::MiLogStream *v41; // rax
  common::milog::MiLogStream *v42; // rax
  common::milog::MiLogStream *v43; // rax
  common::milog::MiLogStream *v44; // rcx
  common::milog::MiLogStream *v45; // rax
  common::milog::MiLogStream *v46; // rax
  common::milog::MiLogStream *v47; // rax
  common::milog::MiLogStream *v48; // rax
  common::milog::MiLogStream *v49; // rax
  common::milog::MiLogStream *v50; // rax
  float v51; // r14d
  ActorModifier *v52; // rax
  ActorModifier *v53; // rax
  float duration; // [rsp+8h] [rbp-158h]
  float durationa; // [rsp+8h] [rbp-158h]
  float __a; // [rsp+40h] [rbp-120h] BYREF
  float __b; // [rsp+44h] [rbp-11Ch] BYREF
  std::vector<std::shared_ptr<ActorModifier>> *modifier_vec; // [rsp+48h] [rbp-118h]
  std::shared_ptr<ActorAbility> p_parent_ability_ptr; // [rsp+50h] [rbp-110h] BYREF
  std::shared_ptr<ConfigAbilityImpl> p_config_impl_ptr; // [rsp+60h] [rbp-100h] BYREF
  common::milog::MiLogStream v66; // [rsp+70h] [rbp-F0h] BYREF
  char v67[208]; // [rsp+90h] [rbp-D0h] BYREF

  v9 = (unsigned __int64)v67;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v10 = __asan_stack_malloc_2(160LL);
    if ( v10 )
      v9 = v10;
  }
  *(_QWORD *)v9 = 1102416563LL;
  *(_QWORD *)(v9 + 8) = "6 32 4 15 durability:1327 48 4 13 duration:1328 64 4 10 index:1299 80 4 28 modifer_apply_entity_"
                        "id:1299 96 16 17 modifier_ptr:1302 128 16 15 source_ptr:1331";
  *(_QWORD *)(v9 + 16) = AbilityComp::addModifierOnIndex;
  v11 = (_DWORD *)(v9 >> 3);
  v11[536862720] = -235802127;
  v11[536862721] = -234556924;
  v11[536862722] = -234556924;
  v11[536862723] = -219021312;
  v11[536862724] = -202178560;
  *(_DWORD *)(v9 + 64) = modifer_apply_entity_id;
  *(_DWORD *)(v9 + 80) = is_server_modifier;
  modifier_vec = AbilityComp::getAppliedModifierVec(p_ability_ptr, is_durability_zero);
  common::tools::perf::make_shared<ActorModifier>();
  if ( std::operator==<ActorModifier>((const std::shared_ptr<ActorModifier> *)(v9 + 96), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v66,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "addModifierOnIndex",
      1305);
    common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(&v66, (const char (*)[21])"modifier_ptr is null");
    common::milog::MiLogStream::~MiLogStream(&v66);
    std::shared_ptr<ActorModifier>::shared_ptr((std::shared_ptr<ActorModifier> *const)this, 0LL);
  }
  else
  {
    v12 = std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v9 + 96));
    if ( *(_BYTE *)(((unsigned __int64)&p_ability_ptr->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&p_ability_ptr->creature_);
    creature = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)p_ability_ptr->creature_;
    std::shared_ptr<ConfigAbilityImpl>::shared_ptr(&p_config_impl_ptr, config_modifier);
    std::shared_ptr<ActorAbility>::shared_ptr(&p_parent_ability_ptr, p_config_ability_ptr);
    LOBYTE(creature) = ActorModifier::init(v12, &p_parent_ability_ptr, &p_config_impl_ptr, (Creature *)creature, index) != 0;
    std::shared_ptr<ActorAbility>::~shared_ptr(&p_parent_ability_ptr);
    std::shared_ptr<ConfigAbilityImpl>::~shared_ptr(&p_config_impl_ptr);
    if ( (_BYTE)creature )
    {
      common::milog::MiLogStream::create(
        &v66,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "addModifierOnIndex",
        1310);
      common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(&v66, (const char (*)[11])"init fails");
      common::milog::MiLogStream::~MiLogStream(&v66);
      std::shared_ptr<ActorModifier>::shared_ptr((std::shared_ptr<ActorModifier> *const)this, 0LL);
    }
    else
    {
      v14 = *(unsigned int *)(v9 + 64);
      if ( v14 >= std::vector<std::shared_ptr<ActorModifier>>::size(modifier_vec) )
        std::vector<std::shared_ptr<ActorModifier>>::resize(modifier_vec, (unsigned int)(*(_DWORD *)(v9 + 64) + 1));
      v15 = std::vector<std::shared_ptr<ActorModifier>>::operator[](modifier_vec, *(unsigned int *)(v9 + 64));
      std::shared_ptr<ActorModifier>::operator=(v15, (const std::shared_ptr<ActorModifier> *)(v9 + 96));
      v16 = std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v9 + 96));
      ActorModifier::setApplyEntityId(v16, *(_DWORD *)(v9 + 80));
      v17 = std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v9 + 96));
      ActorModifier::setModifierId(v17, *(_DWORD *)(v9 + 64) + 1);
      v18 = std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v9 + 96));
      ActorModifier::setIsServerBuffModifier(v18, is_durability_zero);
      v19 = std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v9 + 96));
      ActorModifier::setDurablityIsZero(v19, a9);
      v20 = std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v9 + 96));
      ActorModifier::attach(v20);
      v21 = std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v9 + 96));
      MixinVec = BaseActorActionContext::getMixinVec(v21);
      AbilityComp::addMixins(p_ability_ptr, MixinVec);
      *(_DWORD *)(v9 + 32) = 1065353216;
      v23 = (__m128i)0x3F800000u;
      *(_DWORD *)(v9 + 48) = 1065353216;
      if ( std::operator!=<ActorAbility>(p_config_ability_ptr, 0LL) )
      {
        v24 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_config_ability_ptr);
        if ( ActorAbility::getIsLevelElementAbility(v24) )
        {
          if ( *(_BYTE *)(((unsigned __int64)&p_ability_ptr->creature_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&p_ability_ptr->creature_);
          toPtr<Creature,Creature>((Creature *)(v9 + 128));
        }
        else
        {
          std::shared_ptr<Creature>::shared_ptr((std::shared_ptr<Creature> *const)(v9 + 128), 0LL);
        }
        v25 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_config_ability_ptr);
        std::shared_ptr<DieCreatureRecord>::shared_ptr(
          (std::shared_ptr<DieCreatureRecord> *const)&p_config_impl_ptr,
          0LL);
        std::shared_ptr<Creature>::shared_ptr(
          (std::shared_ptr<Creature> *const)&p_parent_ability_ptr,
          (const std::shared_ptr<Creature> *)(v9 + 128));
        *(float *)v23.m128i_i32 = ActorAbility::evaluate(
                                    v25,
                                    &index->element_durability,
                                    (CreaturePtr *)&p_parent_ability_ptr,
                                    (DieCreatureRecordPtr *)&p_config_impl_ptr);
        *(_DWORD *)(v9 + 32) = _mm_cvtsi128_si32(v23);
        std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)&p_parent_ability_ptr);
        std::shared_ptr<DieCreatureRecord>::~shared_ptr((std::shared_ptr<DieCreatureRecord> *const)&p_config_impl_ptr);
        v26 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_config_ability_ptr);
        std::shared_ptr<DieCreatureRecord>::shared_ptr(
          (std::shared_ptr<DieCreatureRecord> *const)&p_config_impl_ptr,
          0LL);
        std::shared_ptr<Creature>::shared_ptr(
          (std::shared_ptr<Creature> *const)&p_parent_ability_ptr,
          (const std::shared_ptr<Creature> *)(v9 + 128));
        *(float *)v23.m128i_i32 = ActorAbility::evaluate(
                                    v26,
                                    &index->duration,
                                    (CreaturePtr *)&p_parent_ability_ptr,
                                    (DieCreatureRecordPtr *)&p_config_impl_ptr);
        *(_DWORD *)(v9 + 48) = _mm_cvtsi128_si32(v23);
        std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)&p_parent_ability_ptr);
        std::shared_ptr<DieCreatureRecord>::~shared_ptr((std::shared_ptr<DieCreatureRecord> *const)&p_config_impl_ptr);
        if ( *(float *)(v9 + 48) > 0.0 )
        {
          if ( *(_BYTE *)(((unsigned __int64)&index->state >> 3) + 0x7FFF8000) )
            __asan_report_load8(&index->state);
          if ( index->state == ElementFreeze )
          {
            if ( *(_BYTE *)(((unsigned __int64)&p_ability_ptr->creature_ >> 3) + 0x7FFF8000) )
              __asan_report_load8(&p_ability_ptr->creature_);
            __b = 1.0 - Creature::getProp(p_ability_ptr->creature_, FIGHT_PROP_FREEZE_SHORTEN);
            __a = 0.0;
            v27 = (float *)std::max<float>(&__a, &__b);
            v28 = v27;
            if ( *(_BYTE *)(((unsigned __int64)v27 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)v27 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v27 >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(v27);
            }
            *(float *)(v9 + 48) = *(float *)(v9 + 48) * *v28;
          }
          else
          {
            if ( *(_BYTE *)(((unsigned __int64)&index->state >> 3) + 0x7FFF8000) )
              __asan_report_load8(&index->state);
            if ( index->state == ElementPetrifaction )
              *(float *)(v9 + 48) = 0.0 * *(float *)(v9 + 48);
          }
          v29 = ServiceBox::findService<GameserverService>();
          if ( AbilityDataMgr::isModifierDebuff(&v29->ability_data_mgr, index) )
          {
            v30 = ServiceBox::findService<GameserverService>();
            *(float *)(v9 + 48) = AbilityComp::getProperty(
                                    p_ability_ptr,
                                    &v30->ability_data_mgr.ACTOR_DEBUFF_DURATION_RATIO_DELTA)
                                * *(float *)(v9 + 48);
          }
          if ( *(_BYTE *)(((unsigned __int64)&index->state >> 3) + 0x7FFF8000) )
            __asan_report_load8(&index->state);
          duration = AbilityComp::getAbilityStateDurationRatio(p_ability_ptr, index->state);
          if ( *(_BYTE *)(((unsigned __int64)&index->element_type >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&index->element_type >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&index->element_type);
          }
          *(float *)(v9 + 48) = *(float *)(v9 + 48)
                              * (float)(duration
                                      * AbilityComp::getElementTypeDurationRatio(p_ability_ptr, index->element_type));
        }
        std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v9 + 128));
      }
      common::milog::MiLogStream::create(
        &v66,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/ability/ability_comp.cpp",
        "addModifierOnIndex",
        1351);
      v31 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(&v66, (const char (*)[23])off_25033EE0);
      v32 = std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v9 + 96));
      v33 = common::milog::MiLogStream::operator<<<ActorModifier,(ActorModifier*)0>(v31, v32);
      v34 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v33, (const char (*)[12])"durability:");
      v35 = common::milog::MiLogStream::operator<<<float,(float *)0>(v34, (const float *)(v9 + 32));
      v36 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v35, (const char (*)[11])" duration:");
      v37 = common::milog::MiLogStream::operator<<<float,(float *)0>(v36, (const float *)(v9 + 48));
      v38 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
              v37,
              (const char (*)[20])"is_server_modifier:");
      v39 = common::milog::MiLogStream::operator<<(v38, is_durability_zero);
      v40 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
              v39,
              (const char (*)[21])" is_durability_zero:");
      common::milog::MiLogStream::operator<<(v40, a9);
      common::milog::MiLogStream::~MiLogStream(&v66);
      common::milog::MiLogStream::create(
        &v66,
        &common::milog::MiLogDefault::default_log_obj_,
        0x11u,
        "./src/ability/ability_comp.cpp",
        "addModifierOnIndex",
        1352);
      v41 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              &v66,
              (const char (*)[24])"[ABILITY] add modifier:");
      v42 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v41, &index->modifier_name);
      v43 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v42, (const char (*)[11])off_25034060);
      v44 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v43, (const unsigned int *)(v9 + 64));
      if ( *(_BYTE *)(((unsigned __int64)&p_ability_ptr->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&p_ability_ptr->creature_);
      v45 = common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v44, p_ability_ptr->creature_);
      v46 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
              v45,
              (const char (*)[18])" apply_entity_id:");
      v47 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v46, (const unsigned int *)(v9 + 80));
      v48 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
              v47,
              (const char (*)[21])" is_server_modifier:");
      v49 = common::milog::MiLogStream::operator<<(v48, is_durability_zero);
      v50 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
              v49,
              (const char (*)[21])" is_durability_zero:");
      common::milog::MiLogStream::operator<<(v50, a9);
      common::milog::MiLogStream::~MiLogStream(&v66);
      durationa = *(float *)(v9 + 48);
      v51 = *(float *)(v9 + 32);
      v52 = std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v9 + 96));
      AbilityComp::onElementModifierApplied(p_ability_ptr, v52, v51, durationa);
      v53 = std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v9 + 96));
      AbilityComp::tryRecordDashModifierApplied(p_ability_ptr, v53);
      std::shared_ptr<ActorModifier>::shared_ptr(
        (std::shared_ptr<ActorModifier> *const)this,
        (std::shared_ptr<ActorModifier> *)(v9 + 96));
    }
  }
  std::shared_ptr<ActorModifier>::~shared_ptr((std::shared_ptr<ActorModifier> *const)(v9 + 96));
  if ( v67 == (char *)v9 )
  {
    *(_QWORD *)((v9 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v9 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v9 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v9 = 1172321806LL;
    *(_QWORD *)((v9 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v9 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v9 >> 3) + 0x7FFF8010) = -168430091;
  }
  return this;
};

// Line 1361: range 00000000136CA888-00000000136CAAE4
AbilityComp *__fastcall AbilityComp::findAppliedModifier(
        AbilityComp *const this,
        AbilityComp *applied_modifier_id,
        int is_server_modifier,
        bool a4)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r13
  std::vector<std::shared_ptr<ActorModifier>>::size_type v7; // r15
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rcx
  const std::shared_ptr<ActorModifier> *v10; // rax
  std::vector<std::shared_ptr<ActorModifier>> *modifier_vec; // [rsp+28h] [rbp-98h]
  common::milog::MiLogStream v15; // [rsp+30h] [rbp-90h] BYREF
  char v16[112]; // [rsp+50h] [rbp-70h] BYREF

  v4 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 4 24 applied_modifier_id:1360";
  *(_QWORD *)(v4 + 16) = AbilityComp::findAppliedModifier;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116348;
  *(_DWORD *)(v4 + 32) = is_server_modifier;
  modifier_vec = AbilityComp::getAppliedModifierVec(applied_modifier_id, a4);
  if ( *(_DWORD *)(v4 + 32) )
  {
    v7 = (unsigned int)(*(_DWORD *)(v4 + 32) - 1);
    if ( v7 < std::vector<std::shared_ptr<ActorModifier>>::size(modifier_vec) )
    {
      v10 = std::vector<std::shared_ptr<ActorModifier>>::operator[](
              modifier_vec,
              (unsigned int)(*(_DWORD *)(v4 + 32) - 1));
      std::shared_ptr<ActorModifier>::shared_ptr((std::shared_ptr<ActorModifier> *const)this, v10);
    }
    else
    {
      common::milog::MiLogStream::create(
        &v15,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "findAppliedModifier",
        1369);
      v8 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
             &v15,
             (const char (*)[29])"invalid applied_modifier_id:");
      v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v4 + 32));
      if ( *(_BYTE *)(((unsigned __int64)&applied_modifier_id->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&applied_modifier_id->creature_);
      common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v9, applied_modifier_id->creature_);
      common::milog::MiLogStream::~MiLogStream(&v15);
      std::shared_ptr<ActorModifier>::shared_ptr((std::shared_ptr<ActorModifier> *const)this, 0LL);
    }
  }
  else
  {
    std::shared_ptr<ActorModifier>::shared_ptr((std::shared_ptr<ActorModifier> *const)this, 0LL);
  }
  if ( v16 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return this;
};

// Line 1377: range 00000000136CAAE6-00000000136CB024
__int64 __fastcall AbilityComp::removeModifierOnIndex(AbilityComp *const this, uint32_t index, bool is_server_modifier)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  std::vector<std::shared_ptr<ActorModifier>>::size_type v6; // r14
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rcx
  unsigned int v9; // r14d
  const std::shared_ptr<ActorModifier> *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rcx
  ActorModifier *v13; // rax
  std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  std::vector<std::shared_ptr<BaseAbilityMixin>> *MixinVec; // rax
  ActorModifier *v16; // rax
  ActorModifier *v17; // rax
  ActorModifier *v18; // rax
  ActorModifier *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rcx
  std::shared_ptr<ActorModifier> *v24; // rax
  __int64 result; // rax
  std::vector<std::shared_ptr<ActorModifier>> *modifier_vec; // [rsp+10h] [rbp-D0h]
  data::ConfigAbilityModifier *config_modifier; // [rsp+18h] [rbp-C8h]
  std::shared_ptr<ActorModifier> __r; // [rsp+20h] [rbp-C0h] BYREF
  common::milog::MiLogStream v30; // [rsp+30h] [rbp-B0h] BYREF
  char v31[144]; // [rsp+50h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v31;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 10 index:1376 64 16 17 modifier_ptr:1384";
  *(_QWORD *)(v3 + 16) = AbilityComp::removeModifierOnIndex;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  *(_DWORD *)(v3 + 48) = index;
  modifier_vec = AbilityComp::getAppliedModifierVec(this, is_server_modifier);
  v6 = *(unsigned int *)(v3 + 48);
  if ( v6 < std::vector<std::shared_ptr<ActorModifier>>::size(modifier_vec) )
  {
    v10 = std::vector<std::shared_ptr<ActorModifier>>::operator[](modifier_vec, *(unsigned int *)(v3 + 48));
    std::shared_ptr<ActorModifier>::shared_ptr((std::shared_ptr<ActorModifier> *const)(v3 + 64), v10);
    if ( std::operator==<ActorModifier>((const std::shared_ptr<ActorModifier> *)(v3 + 64), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v30,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "removeModifierOnIndex",
        1387);
      v11 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              &v30,
              (const char (*)[27])"modifier is null on index:");
      v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v3 + 48));
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v12, this->creature_);
      common::milog::MiLogStream::~MiLogStream(&v30);
      v9 = -1;
    }
    else
    {
      v13 = std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      AbilityComp::tryRecordDashModifierRemoved(this, v13);
      v14 = std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      MixinVec = BaseActorActionContext::getMixinVec(v14);
      AbilityComp::removeMixins(this, MixinVec);
      v16 = std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      ActorModifier::detach(v16);
      v17 = std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      AbilityComp::removeFilterElementModifier(this, v17);
      v18 = std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      AbilityComp::removeModifierElement(this, v18);
      v19 = std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      config_modifier = ActorModifier::getConfigRef(v19);
      common::milog::MiLogStream::create(
        &v30,
        &common::milog::MiLogDefault::default_log_obj_,
        0x11u,
        "./src/ability/ability_comp.cpp",
        "removeModifierOnIndex",
        1397);
      v20 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              &v30,
              (const char (*)[27])"[ABILITY] remove modifier:");
      v21 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v20, &config_modifier->modifier_name);
      v22 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v21, (const char (*)[12])", on index:");
      v23 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v22, (const unsigned int *)(v3 + 48));
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v23, this->creature_);
      common::milog::MiLogStream::~MiLogStream(&v30);
      std::shared_ptr<ActorModifier>::shared_ptr(&__r, 0LL);
      v24 = std::vector<std::shared_ptr<ActorModifier>>::operator[](modifier_vec, *(unsigned int *)(v3 + 48));
      std::shared_ptr<ActorModifier>::operator=(v24, &__r);
      std::shared_ptr<ActorModifier>::~shared_ptr(&__r);
      v9 = 0;
    }
    std::shared_ptr<ActorModifier>::~shared_ptr((std::shared_ptr<ActorModifier> *const)(v3 + 64));
  }
  else
  {
    common::milog::MiLogStream::create(
      &v30,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "removeModifierOnIndex",
      1381);
    v7 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v30, (const char (*)[15])"invalid index:");
    v8 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v3 + 48));
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v8, this->creature_);
    common::milog::MiLogStream::~MiLogStream(&v30);
    v9 = -1;
  }
  result = v9;
  if ( v31 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 1405: range 00000000136CB026-00000000136CB3F2
int32_t __cdecl AbilityComp::foreachModifier(
        AbilityComp *const this,
        std::function<ForeachPolicy(ActorModifier&)> *p_func)
{
  int32_t v2; // r15d
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  std::vector<std::shared_ptr<ActorModifier>>::size_type v6; // r14
  std::vector<std::shared_ptr<ActorModifier>>::size_type v7; // rax
  ActorModifier *v8; // rdx
  int v9; // r14d
  int32_t result; // eax
  std::vector<std::shared_ptr<ActorModifier>>::iterator __for_begin; // [rsp+20h] [rbp-F0h] BYREF
  std::vector<std::shared_ptr<ActorModifier>>::iterator __for_end; // [rsp+28h] [rbp-E8h] BYREF
  std::vector<std::shared_ptr<ActorModifier>> *__for_range; // [rsp+30h] [rbp-E0h]
  std::vector<std::shared_ptr<ActorModifier>> *__for_range_0; // [rsp+38h] [rbp-D8h]
  std::vector<std::weak_ptr<ActorModifier>> *__for_range_1; // [rsp+40h] [rbp-D0h]
  std::weak_ptr<ActorModifier> *modifier_wtr; // [rsp+48h] [rbp-C8h]
  std::shared_ptr<ActorModifier> *modifier_ptr_0; // [rsp+50h] [rbp-C0h]
  std::shared_ptr<ActorModifier> *modifier_ptr; // [rsp+58h] [rbp-B8h]
  char v19[176]; // [rsp+60h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 32 16 17 modifier_ptr:1418 64 24 29 applied_modifier_wtr_vec:1406";
  *(_QWORD *)(v3 + 16) = AbilityComp::foreachModifier;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -219021312;
  v5[536862722] = -218103808;
  v5[536862723] = -202116109;
  std::vector<std::weak_ptr<ActorModifier>>::vector((std::vector<std::weak_ptr<ActorModifier>> *const)(v3 + 64));
  v6 = std::vector<std::shared_ptr<ActorModifier>>::size(&this->applied_modifier_vec_);
  v7 = std::vector<std::shared_ptr<ActorModifier>>::size(&this->applied_server_modifier_vec_);
  std::vector<std::weak_ptr<ActorModifier>>::reserve(
    (std::vector<std::weak_ptr<ActorModifier>> *const)(v3 + 64),
    v6 + v7);
  __for_range = &this->applied_modifier_vec_;
  __for_begin._M_current = std::vector<std::shared_ptr<ActorModifier>>::begin(&this->applied_modifier_vec_)._M_current;
  __for_end._M_current = std::vector<std::shared_ptr<ActorModifier>>::end(&this->applied_modifier_vec_)._M_current;
  while ( __gnu_cxx::operator!=<std::shared_ptr<ActorModifier> *,std::vector<std::shared_ptr<ActorModifier>>>(
            &__for_begin,
            &__for_end) )
  {
    modifier_ptr = __gnu_cxx::__normal_iterator<std::shared_ptr<ActorModifier> *,std::vector<std::shared_ptr<ActorModifier>>>::operator*(&__for_begin);
    std::vector<std::weak_ptr<ActorModifier>>::emplace_back<std::shared_ptr<ActorModifier> &>(
      (std::vector<std::weak_ptr<ActorModifier>> *const)(v3 + 64),
      modifier_ptr,
      modifier_ptr);
    __gnu_cxx::__normal_iterator<std::shared_ptr<ActorModifier> *,std::vector<std::shared_ptr<ActorModifier>>>::operator++(&__for_begin);
  }
  __for_range_0 = &this->applied_server_modifier_vec_;
  __for_begin._M_current = std::vector<std::shared_ptr<ActorModifier>>::begin(&this->applied_server_modifier_vec_)._M_current;
  __for_end._M_current = std::vector<std::shared_ptr<ActorModifier>>::end(__for_range_0)._M_current;
  while ( __gnu_cxx::operator!=<std::shared_ptr<ActorModifier> *,std::vector<std::shared_ptr<ActorModifier>>>(
            &__for_begin,
            &__for_end) )
  {
    modifier_ptr_0 = __gnu_cxx::__normal_iterator<std::shared_ptr<ActorModifier> *,std::vector<std::shared_ptr<ActorModifier>>>::operator*(&__for_begin);
    std::vector<std::weak_ptr<ActorModifier>>::emplace_back<std::shared_ptr<ActorModifier> &>(
      (std::vector<std::weak_ptr<ActorModifier>> *const)(v3 + 64),
      modifier_ptr_0,
      modifier_ptr_0);
    __gnu_cxx::__normal_iterator<std::shared_ptr<ActorModifier> *,std::vector<std::shared_ptr<ActorModifier>>>::operator++(&__for_begin);
  }
  __for_range_1 = (std::vector<std::weak_ptr<ActorModifier>> *)(v3 + 64);
  __for_begin._M_current = (std::shared_ptr<ActorModifier> *)std::vector<std::weak_ptr<ActorModifier>>::begin((std::vector<std::weak_ptr<ActorModifier>> *const)(v3 + 64))._M_current;
  __for_end._M_current = (std::shared_ptr<ActorModifier> *)std::vector<std::weak_ptr<ActorModifier>>::end(__for_range_1)._M_current;
  while ( __gnu_cxx::operator!=<std::weak_ptr<ActorModifier> *,std::vector<std::weak_ptr<ActorModifier>>>(
            (const __gnu_cxx::__normal_iterator<std::weak_ptr<ActorModifier>*,std::vector<std::weak_ptr<ActorModifier>> > *)&__for_begin,
            (const __gnu_cxx::__normal_iterator<std::weak_ptr<ActorModifier>*,std::vector<std::weak_ptr<ActorModifier>> > *)&__for_end) )
  {
    modifier_wtr = __gnu_cxx::__normal_iterator<std::weak_ptr<ActorModifier> *,std::vector<std::weak_ptr<ActorModifier>>>::operator*((const __gnu_cxx::__normal_iterator<std::weak_ptr<ActorModifier>*,std::vector<std::weak_ptr<ActorModifier>> > *const)&__for_begin);
    std::weak_ptr<ActorModifier>::lock((const std::weak_ptr<ActorModifier> *const)(v3 + 32));
    if ( std::operator!=<ActorModifier>((const std::shared_ptr<ActorModifier> *)(v3 + 32), 0LL)
      && (v8 = std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32)),
          std::function<ForeachPolicy ()(ActorModifier &)>::operator()(p_func, v8)) )
    {
      v2 = 1;
      v9 = 0;
    }
    else
    {
      v9 = 1;
    }
    std::shared_ptr<ActorModifier>::~shared_ptr((std::shared_ptr<ActorModifier> *const)(v3 + 32));
    if ( v9 != 1 )
      goto LABEL_19;
    __gnu_cxx::__normal_iterator<std::weak_ptr<ActorModifier> *,std::vector<std::weak_ptr<ActorModifier>>>::operator++((__gnu_cxx::__normal_iterator<std::weak_ptr<ActorModifier>*,std::vector<std::weak_ptr<ActorModifier>> > *const)&__for_begin);
  }
  v2 = 0;
LABEL_19:
  std::vector<std::weak_ptr<ActorModifier>>::~vector((std::vector<std::weak_ptr<ActorModifier>> *const)(v3 + 64));
  result = v2;
  if ( v19 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1433: range 00000000136CB3F4-00000000136CBB14
int32_t __cdecl AbilityComp::avatarSkillStartHandler(
        AbilityComp *const this,
        const data::AvatarSkillStart *config_action,
        ActionParam *param)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rcx
  int32_t v7; // r14d
  common::milog::MiLogStream *v8; // rcx
  __m128i v9; // xmm0
  ActorAbility *v10; // r14
  ActorAbility *v11; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  SkillComp *SkillComp; // rcx
  unsigned __int64 v14; // rax
  unsigned __int64 v15; // rdx
  Player *v16; // rax
  PlayerEventComp *EventComp; // r15
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // rax
  unsigned __int64 *v20; // r8
  const unsigned int *v21; // r9
  int32_t result; // eax
  char v24[12]; // [rsp+24h] [rbp-15Ch] BYREF
  std::shared_ptr<Creature> p_global_value_source_ptr; // [rsp+30h] [rbp-150h] BYREF
  std::shared_ptr<DieCreatureRecord> p_record_ptr; // [rsp+40h] [rbp-140h] BYREF
  common::milog::MiLogStream v27; // [rsp+50h] [rbp-130h] BYREF
  char v28[272]; // [rsp+70h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v28;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 16 15 avatar_ptr:1439 64 16 15 player_ptr:1450 96 96 16 start_param:1445";
  *(_QWORD *)(v3 + 16) = AbilityComp::avatarSkillStartHandler;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -219021312;
  v5[536862722] = -219021312;
  v5[536862726] = -202116109;
  if ( std::operator==<ActorAbility>(&param->ability_ptr, 0LL) )
  {
    common::milog::MiLogStream::create(
      &v27,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "avatarSkillStartHandler",
      1436);
    v6 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
           &v27,
           (const char (*)[26])"param.ability_ptr is null");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v6, this->creature_);
    common::milog::MiLogStream::~MiLogStream(&v27);
    v7 = -1;
  }
  else
  {
    std::dynamic_pointer_cast<Avatar,Creature>((const std::shared_ptr<Creature> *)(v3 + 32));
    if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v3 + 32), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v27,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "avatarSkillStartHandler",
        1442);
      v8 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
             &v27,
             (const char (*)[19])"avatar_ptr is null");
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v8, this->creature_);
      common::milog::MiLogStream::~MiLogStream(&v27);
      v7 = -1;
    }
    else
    {
      memset((void *)(v3 + 96), 0, 0x60uLL);
      *(_DWORD *)(v3 + 96) = 1065353216;
      v9 = (__m128i)0x3F800000u;
      *(_DWORD *)(v3 + 100) = 1065353216;
      v10 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)param);
      std::shared_ptr<DieCreatureRecord>::shared_ptr(&p_record_ptr, 0LL);
      std::shared_ptr<Creature>::shared_ptr(&p_global_value_source_ptr, 0LL);
      *(float *)v9.m128i_i32 = ActorAbility::evaluate(
                                 v10,
                                 &config_action->cd_ratio,
                                 &p_global_value_source_ptr,
                                 &p_record_ptr);
      *(_DWORD *)(v3 + 96) = _mm_cvtsi128_si32(v9);
      std::shared_ptr<Creature>::~shared_ptr(&p_global_value_source_ptr);
      std::shared_ptr<DieCreatureRecord>::~shared_ptr(&p_record_ptr);
      v11 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)param);
      std::shared_ptr<DieCreatureRecord>::shared_ptr(&p_record_ptr, 0LL);
      std::shared_ptr<Creature>::shared_ptr(&p_global_value_source_ptr, 0LL);
      *(float *)v9.m128i_i32 = ActorAbility::evaluate(
                                 v11,
                                 &config_action->cost_stamina_ratio,
                                 &p_global_value_source_ptr,
                                 &p_record_ptr);
      *(_DWORD *)(v3 + 100) = _mm_cvtsi128_si32(v9);
      std::shared_ptr<Creature>::~shared_ptr(&p_global_value_source_ptr);
      std::shared_ptr<DieCreatureRecord>::~shared_ptr(&p_record_ptr);
      ActionParam::operator=((ActionParam *const)(v3 + 104), param);
      v12 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
      SkillComp = Avatar::getSkillComp(v12);
      if ( *(_BYTE *)(((unsigned __int64)&config_action->skill_id >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&config_action->skill_id >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&config_action->skill_id);
      }
      SkillComp::onSkillStart(SkillComp, config_action->skill_id, (const SkillStartParam *)(v3 + 96));
      v14 = (unsigned __int64)std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
      if ( *(_BYTE *)((v14 >> 3) + 0x7FFF8000) )
        v14 = __asan_report_load8(v14);
      v15 = *(_QWORD *)v14 + 152LL;
      if ( *(_BYTE *)((v15 >> 3) + 0x7FFF8000) )
        v14 = __asan_report_load8(*(_QWORD *)v14 + 152LL);
      (*(void (__fastcall **)(unsigned __int64, unsigned __int64))v15)(v3 + 64, v14);
      if ( !std::operator==<Player>((const std::shared_ptr<Player> *)(v3 + 64), 0LL) )
      {
        v16 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        EventComp = Player::getEventComp(v16);
        v18 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
        *(_QWORD *)&v24[4] = Avatar::getGuid(v18);
        v19 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
        *(_DWORD *)v24 = Entity::getEntityId((const Entity *const)v19);
        common::tools::perf::make_shared<AbilityAvatarSkillStartEvent,unsigned int,unsigned long,unsigned int const&>(
          (unsigned int *)&p_global_value_source_ptr,
          (unsigned __int64 *)v24,
          (const unsigned int *)&v24[4],
          &config_action->skill_id,
          v20,
          v21);
        std::shared_ptr<BaseEvent>::shared_ptr<AbilityAvatarSkillStartEvent,void>(
          (std::shared_ptr<BaseEvent> *const)&p_record_ptr,
          (std::shared_ptr<AbilityAvatarSkillStartEvent> *)&p_global_value_source_ptr);
        PlayerEventComp::notifyEvent(EventComp, (BaseEventPtr *)&p_record_ptr);
        std::shared_ptr<BaseEvent>::~shared_ptr((std::shared_ptr<BaseEvent> *const)&p_record_ptr);
        std::shared_ptr<AbilityAvatarSkillStartEvent>::~shared_ptr((std::shared_ptr<AbilityAvatarSkillStartEvent> *const)&p_global_value_source_ptr);
      }
      v7 = 0;
      std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v3 + 64));
      SkillStartParam::~SkillStartParam((SkillStartParam *const)(v3 + 96));
    }
    std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 32));
  }
  result = v7;
  if ( v28 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 1461: range 00000000136CBB16-00000000136CC34E
int32_t __cdecl AbilityComp::avatarShareCDSkillStartHandler(
        AbilityComp *const this,
        const data::AvatarShareCDSkillStart *config_action,
        ActionParam *param)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rcx
  int32_t v7; // r14d
  common::milog::MiLogStream *v8; // rcx
  unsigned __int64 v9; // rax
  unsigned __int64 v10; // rdx
  common::milog::MiLogStream *v11; // rcx
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  common::milog::MiLogStream *v13; // rax
  Player *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  Player *v18; // rax
  PlayerEventComp *EventComp; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  unsigned __int64 *v22; // r8
  unsigned int *v23; // r9
  int32_t result; // eax
  char v26[12]; // [rsp+24h] [rbp-12Ch] BYREF
  const data::AvatarSkillExcelConfig *avatar_skill_config_ptr; // [rsp+30h] [rbp-120h]
  PlayerShareCDComp *share_cd_comp; // [rsp+38h] [rbp-118h]
  std::shared_ptr<AbilityAvatarSkillStartEvent> __r; // [rsp+40h] [rbp-110h] BYREF
  std::shared_ptr<Config> v30; // [rsp+50h] [rbp-100h] BYREF
  common::milog::MiLogStream v31; // [rsp+60h] [rbp-F0h] BYREF
  char v32[208]; // [rsp+80h] [rbp-D0h] BYREF

  v3 = (unsigned __int64)v32;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(160LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 48 4 13 skill_id:1480 64 4 16 share_cd_id:1487 80 4 18 share_cd_type:1488 96 16 15 avatar_ptr:"
                        "1467 128 16 15 player_ptr:1473";
  *(_QWORD *)(v3 + 16) = AbilityComp::avatarShareCDSkillStartHandler;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862723] = -219021312;
  v5[536862724] = -202178560;
  if ( std::operator==<ActorAbility>(0LL, &param->ability_ptr) )
  {
    common::milog::MiLogStream::create(
      &v31,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "avatarShareCDSkillStartHandler",
      1464);
    v6 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
           &v31,
           (const char (*)[26])"param.ability_ptr is null");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v6, this->creature_);
    common::milog::MiLogStream::~MiLogStream(&v31);
    v7 = -1;
  }
  else
  {
    std::dynamic_pointer_cast<Avatar,Creature>((const std::shared_ptr<Creature> *)(v3 + 96));
    if ( std::operator==<Avatar>(0LL, (const std::shared_ptr<Avatar> *)(v3 + 96)) )
    {
      common::milog::MiLogStream::create(
        &v31,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "avatarShareCDSkillStartHandler",
        1470);
      v8 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
             &v31,
             (const char (*)[19])"avatar_ptr is null");
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v8, this->creature_);
      common::milog::MiLogStream::~MiLogStream(&v31);
      v7 = -1;
    }
    else
    {
      v9 = (unsigned __int64)std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
      if ( *(_BYTE *)((v9 >> 3) + 0x7FFF8000) )
        v9 = __asan_report_load8(v9);
      v10 = *(_QWORD *)v9 + 152LL;
      if ( *(_BYTE *)((v10 >> 3) + 0x7FFF8000) )
        v9 = __asan_report_load8(*(_QWORD *)v9 + 152LL);
      (*(void (__fastcall **)(unsigned __int64, unsigned __int64))v10)(v3 + 128, v9);
      if ( std::operator==<Player>(0LL, (const std::shared_ptr<Player> *)(v3 + 128)) )
      {
        common::milog::MiLogStream::create(
          &v31,
          &common::milog::MiLogDefault::default_log_obj_,
          0x13u,
          "./src/ability/ability_comp.cpp",
          "avatarShareCDSkillStartHandler",
          1476);
        v11 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                &v31,
                (const char (*)[19])"player_ptr is null");
        if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->creature_);
        common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v11, this->creature_);
        common::milog::MiLogStream::~MiLogStream(&v31);
        v7 = -1;
      }
      else
      {
        if ( *(_BYTE *)(((unsigned __int64)&config_action->skill_id >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&config_action->skill_id >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&config_action->skill_id);
        }
        *(_DWORD *)(v3 + 48) = config_action->skill_id;
        ServiceBox::findService<GameserverService>();
        GameserverService::getConfig((GameserverService *const)&v30);
        v12 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v30);
        avatar_skill_config_ptr = data::AvatarSkillExcelConfigMgrBase::findAvatarSkillExcelConfig(
                                    &v12->design_config.txt_config_mgr.avatar_skill_config_mgr,
                                    *(_DWORD *)(v3 + 48));
        std::shared_ptr<Config>::~shared_ptr(&v30);
        if ( avatar_skill_config_ptr )
        {
          if ( *(_BYTE *)(((unsigned __int64)&avatar_skill_config_ptr->share_cdid >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&avatar_skill_config_ptr->share_cdid >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&avatar_skill_config_ptr->share_cdid);
          }
          *(_DWORD *)(v3 + 64) = avatar_skill_config_ptr->share_cdid;
          if ( *(_BYTE *)(((unsigned __int64)&config_action->share_cdtype >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)config_action - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_action->share_cdtype >> 3)
                                                                          + 0x7FFF8000) )
          {
            __asan_report_load4(&config_action->share_cdtype);
          }
          *(_DWORD *)(v3 + 80) = config_action->share_cdtype;
          v14 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
          share_cd_comp = Player::getShareCDComp(v14);
          if ( PlayerShareCDComp::checkShareCD(share_cd_comp, *(_DWORD *)(v3 + 64)) )
          {
            common::milog::MiLogStream::create(
              &v31,
              &common::milog::MiLogDefault::default_log_obj_,
              0x13u,
              "./src/ability/ability_comp.cpp",
              "avatarShareCDSkillStartHandler",
              1493);
            v15 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
                    &v31,
                    (const char (*)[34])"shareCD check fail, share_cd_id: ");
            v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v15,
                    (const unsigned int *)(v3 + 64));
            v17 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                    v16,
                    (const char (*)[17])" share_cd_type: ");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(v3 + 80));
            common::milog::MiLogStream::~MiLogStream(&v31);
            v7 = -1;
          }
          else
          {
            PlayerShareCDComp::updateShareCD(share_cd_comp, *(_DWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
            v18 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
            EventComp = Player::getEventComp(v18);
            v20 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
            *(_QWORD *)&v26[4] = Avatar::getGuid(v20);
            v21 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
            *(_DWORD *)v26 = Entity::getEntityId((const Entity *const)v21);
            common::tools::perf::make_shared<AbilityAvatarSkillStartEvent,unsigned int,unsigned long,unsigned int &>(
              (unsigned int *)&__r,
              (unsigned __int64 *)v26,
              (unsigned int *)&v26[4],
              (unsigned int *)(v3 + 48),
              v22,
              v23);
            std::shared_ptr<BaseEvent>::shared_ptr<AbilityAvatarSkillStartEvent,void>(
              (std::shared_ptr<BaseEvent> *const)&v30,
              &__r);
            PlayerEventComp::notifyEvent(EventComp, (BaseEventPtr *)&v30);
            std::shared_ptr<BaseEvent>::~shared_ptr((std::shared_ptr<BaseEvent> *const)&v30);
            std::shared_ptr<AbilityAvatarSkillStartEvent>::~shared_ptr(&__r);
            v7 = 0;
          }
        }
        else
        {
          common::milog::MiLogStream::create(
            &v31,
            &common::milog::MiLogDefault::default_log_obj_,
            0x13u,
            "./src/ability/ability_comp.cpp",
            "avatarShareCDSkillStartHandler",
            1484);
          v13 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
                  &v31,
                  (const char (*)[44])"findAvatarSkillExcelConfig fails, skill_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v3 + 48));
          common::milog::MiLogStream::~MiLogStream(&v31);
          v7 = -1;
        }
      }
      std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v3 + 128));
    }
    std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 96));
  }
  result = v7;
  if ( v32 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 1504: range 00000000136CC350-00000000136CC3F1
int32_t __cdecl AbilityComp::debugLogHandler(
        AbilityComp *const this,
        const data::DebugLog *config_action,
        ActionParam *param)
{
  common::milog::MiLogStream *v3; // rax
  common::milog::MiLogStream v5; // [rsp+20h] [rbp-30h] BYREF

  common::milog::MiLogStream::create(
    &v5,
    &common::milog::MiLogDefault::default_log_obj_,
    0x11u,
    "./src/ability/ability_comp.cpp",
    "debugLogHandler",
    1505);
  v3 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v5, (const char (*)[15])"[ACTION_DEBUG]");
  common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v3, &config_action->content);
  common::milog::MiLogStream::~MiLogStream(&v5);
  return 0;
};

// Line 1510: range 00000000136CC3F2-00000000136CC496
float __cdecl AbilityComp::calcHealHpAmount(const data::HealHP *config_action, ActionParam *param)
{
  float v3; // [rsp+Ch] [rbp-44h]
  std::shared_ptr<ActorAbility> p_ability_ptr; // [rsp+20h] [rbp-30h] BYREF
  std::shared_ptr<Creature> p_target_ptr; // [rsp+30h] [rbp-20h] BYREF

  std::shared_ptr<Creature>::shared_ptr(&p_target_ptr, &param->target_ptr);
  std::shared_ptr<ActorAbility>::shared_ptr(&p_ability_ptr, &param->ability_ptr);
  v3 = AbilityComp::calcHealHpAmount(config_action, &p_ability_ptr, &p_target_ptr);
  std::shared_ptr<ActorAbility>::~shared_ptr(&p_ability_ptr);
  std::shared_ptr<Creature>::~shared_ptr(&p_target_ptr);
  return v3;
};

// Line 1515: range 00000000136CC498-00000000136CCEB0
float __cdecl AbilityComp::calcHealHpAmount(
        const data::HealHP *config_action,
        ActorAbilityPtr *p_ability_ptr,
        CreaturePtr *p_target_ptr)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r13
  __m128i v6; // xmm0
  ActorAbility *v7; // r14
  ActorAbility *v8; // r14
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  ActorAbility *v10; // r14
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  ActorAbility *v12; // r14
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  ActorAbility *v14; // r14
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  float result; // xmm0_4
  float v19; // [rsp+4h] [rbp-ECh]
  float Prop; // [rsp+4h] [rbp-ECh]
  float hp_amount; // [rsp+28h] [rbp-C8h]
  float hp_amounta; // [rsp+28h] [rbp-C8h]
  float ability_ratio; // [rsp+2Ch] [rbp-C4h]
  std::shared_ptr<Creature> p_global_value_source_ptr; // [rsp+40h] [rbp-B0h] BYREF
  std::shared_ptr<DieCreatureRecord> p_record_ptr; // [rsp+50h] [rbp-A0h] BYREF
  common::milog::MiLogStream v27; // [rsp+60h] [rbp-90h] BYREF
  char v28[112]; // [rsp+80h] [rbp-70h] BYREF

  v3 = (unsigned __int64)v28;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 16 15 caster_ptr:1526";
  *(_QWORD *)(v3 + 16) = AbilityComp::calcHealHpAmount;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202178560;
  if ( std::operator==<ActorAbility>(p_ability_ptr, 0LL) )
  {
    common::milog::MiLogStream::create(
      &v27,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "calcHealHpAmount",
      1518);
    common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(&v27, (const char (*)[20])"ability_ptr is null");
    common::milog::MiLogStream::~MiLogStream(&v27);
    v19 = 0.0;
  }
  else if ( std::operator==<Creature>(p_target_ptr, 0LL) )
  {
    common::milog::MiLogStream::create(
      &v27,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "calcHealHpAmount",
      1523);
    common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(&v27, (const char (*)[19])"target_ptr is null");
    common::milog::MiLogStream::~MiLogStream(&v27);
    v19 = 0.0;
  }
  else
  {
    std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_ability_ptr);
    ActorAbility::getCaster((ActorAbility *const)(v3 + 32));
    if ( std::operator==<Creature>((const std::shared_ptr<Creature> *)(v3 + 32), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v27,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "calcHealHpAmount",
        1529);
      common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(&v27, (const char (*)[19])"caster_ptr is null");
      common::milog::MiLogStream::~MiLogStream(&v27);
      v19 = 0.0;
    }
    else
    {
      v6 = 0LL;
      hp_amount = 0.0;
      if ( *(char *)(((unsigned __int64)&config_action->amount.is_json_loaded >> 3) + 0x7FFF8000) < 0 )
        __asan_report_load1(&config_action->amount.is_json_loaded);
      if ( config_action->amount.is_json_loaded )
      {
        v7 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_ability_ptr);
        std::shared_ptr<DieCreatureRecord>::shared_ptr(&p_record_ptr, 0LL);
        std::shared_ptr<Creature>::shared_ptr(&p_global_value_source_ptr, 0LL);
        *(float *)v6.m128i_i32 = ActorAbility::evaluate(
                                   v7,
                                   &config_action->amount,
                                   &p_global_value_source_ptr,
                                   &p_record_ptr);
        hp_amount = COERCE_FLOAT(_mm_cvtsi128_si32(v6));
        std::shared_ptr<Creature>::~shared_ptr(&p_global_value_source_ptr);
        std::shared_ptr<DieCreatureRecord>::~shared_ptr(&p_record_ptr);
      }
      if ( *(char *)(((unsigned __int64)&config_action->amount_by_caster_max_hpratio.is_json_loaded >> 3) + 0x7FFF8000) < 0 )
        __asan_report_load1(&config_action->amount_by_caster_max_hpratio.is_json_loaded);
      if ( config_action->amount_by_caster_max_hpratio.is_json_loaded )
      {
        v8 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_ability_ptr);
        std::shared_ptr<DieCreatureRecord>::shared_ptr(&p_record_ptr, 0LL);
        std::shared_ptr<Creature>::shared_ptr(&p_global_value_source_ptr, 0LL);
        *(float *)v6.m128i_i32 = ActorAbility::evaluate(
                                   v8,
                                   &config_action->amount_by_caster_max_hpratio,
                                   &p_global_value_source_ptr,
                                   &p_record_ptr);
        std::shared_ptr<Creature>::~shared_ptr(&p_global_value_source_ptr);
        std::shared_ptr<DieCreatureRecord>::~shared_ptr(&p_record_ptr);
        v9 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
        hp_amount = (float)(Creature::getProp(v9, FIGHT_PROP_MAX_HP) * COERCE_FLOAT(_mm_cvtsi128_si32(v6))) + hp_amount;
      }
      if ( *(char *)(((unsigned __int64)&config_action->amount_by_caster_attack_ratio.is_json_loaded >> 3) + 0x7FFF8000) < 0 )
        __asan_report_load1(&config_action->amount_by_caster_attack_ratio.is_json_loaded);
      if ( config_action->amount_by_caster_attack_ratio.is_json_loaded )
      {
        v10 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_ability_ptr);
        std::shared_ptr<DieCreatureRecord>::shared_ptr(&p_record_ptr, 0LL);
        std::shared_ptr<Creature>::shared_ptr(&p_global_value_source_ptr, 0LL);
        *(float *)v6.m128i_i32 = ActorAbility::evaluate(
                                   v10,
                                   &config_action->amount_by_caster_attack_ratio,
                                   &p_global_value_source_ptr,
                                   &p_record_ptr);
        std::shared_ptr<Creature>::~shared_ptr(&p_global_value_source_ptr);
        std::shared_ptr<DieCreatureRecord>::~shared_ptr(&p_record_ptr);
        v11 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
        hp_amount = (float)(Creature::getProp(v11, FIGHT_PROP_CUR_ATTACK) * COERCE_FLOAT(_mm_cvtsi128_si32(v6)))
                  + hp_amount;
      }
      if ( *(char *)(((unsigned __int64)&config_action->amount_by_target_max_hpratio.is_json_loaded >> 3) + 0x7FFF8000) < 0 )
        __asan_report_load1(&config_action->amount_by_target_max_hpratio.is_json_loaded);
      if ( config_action->amount_by_target_max_hpratio.is_json_loaded )
      {
        v12 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_ability_ptr);
        std::shared_ptr<DieCreatureRecord>::shared_ptr(&p_record_ptr, 0LL);
        std::shared_ptr<Creature>::shared_ptr(&p_global_value_source_ptr, 0LL);
        *(float *)v6.m128i_i32 = ActorAbility::evaluate(
                                   v12,
                                   &config_action->amount_by_target_max_hpratio,
                                   &p_global_value_source_ptr,
                                   &p_record_ptr);
        std::shared_ptr<Creature>::~shared_ptr(&p_global_value_source_ptr);
        std::shared_ptr<DieCreatureRecord>::~shared_ptr(&p_record_ptr);
        v13 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_target_ptr);
        hp_amount = (float)(Creature::getProp(v13, FIGHT_PROP_MAX_HP) * COERCE_FLOAT(_mm_cvtsi128_si32(v6))) + hp_amount;
      }
      if ( *(char *)(((unsigned __int64)&config_action->amount_by_target_current_hpratio.is_json_loaded >> 3)
                   + 0x7FFF8000) < 0 )
        __asan_report_load1(&config_action->amount_by_target_current_hpratio.is_json_loaded);
      if ( config_action->amount_by_target_current_hpratio.is_json_loaded )
      {
        v14 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_ability_ptr);
        std::shared_ptr<DieCreatureRecord>::shared_ptr(&p_record_ptr, 0LL);
        std::shared_ptr<Creature>::shared_ptr(&p_global_value_source_ptr, 0LL);
        *(float *)v6.m128i_i32 = ActorAbility::evaluate(
                                   v14,
                                   &config_action->amount_by_target_current_hpratio,
                                   &p_global_value_source_ptr,
                                   &p_record_ptr);
        std::shared_ptr<Creature>::~shared_ptr(&p_global_value_source_ptr);
        std::shared_ptr<DieCreatureRecord>::~shared_ptr(&p_record_ptr);
        v15 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_target_ptr);
        hp_amount = (float)(Creature::getProp(v15, FIGHT_PROP_CUR_HP) * COERCE_FLOAT(_mm_cvtsi128_si32(v6))) + hp_amount;
      }
      ability_ratio = 1.0;
      if ( *(char *)(((unsigned __int64)&config_action->ignore_ability_property >> 3) + 0x7FFF8000) < 0 )
        __asan_report_load1(&config_action->ignore_ability_property);
      if ( !config_action->ignore_ability_property )
      {
        v16 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
        Prop = Creature::getProp(v16, FIGHT_PROP_HEAL_ADD);
        v17 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_target_ptr);
        ability_ratio = (float)(Creature::getProp(v17, FIGHT_PROP_HEALED_ADD) + Prop) + 1.0;
      }
      if ( *(_BYTE *)(((unsigned __int64)&config_action->heal_ratio >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)config_action + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_action->heal_ratio >> 3)
                                                                     + 0x7FFF8000) )
      {
        __asan_report_load4(&config_action->heal_ratio);
      }
      hp_amounta = (float)(config_action->heal_ratio * ability_ratio) * hp_amount;
      if ( hp_amounta < 0.0 )
        hp_amounta = 0.0;
      v19 = hp_amounta;
    }
    std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 32));
  }
  result = v19;
  if ( v28 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1572: range 00000000136CCEB2-00000000136CD4C5
int32_t __cdecl AbilityComp::healHPHandler(
        AbilityComp *const this,
        const data::HealHP *config_action,
        ActionParam *param)
{
  __m128i v3; // xmm0
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rcx
  int32_t v8; // r14d
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  Creature *v10; // rax
  FightPropComp *FightPropComp; // rax
  PileBoolValue *IsLockHealHp; // rax
  common::milog::MiLogStream *v13; // r14
  unsigned __int64 v14; // rax
  void (__fastcall **v15)(common::milog::MiLogStream *, unsigned __int64); // rdx
  unsigned __int64 v16; // rax
  Creature *v17; // r14
  Creature *v18; // rdi
  int32_t result; // eax
  float hp_amount; // [rsp+2Ch] [rbp-164h]
  std::shared_ptr<FightPropNtfParam> __r; // [rsp+30h] [rbp-160h] BYREF
  common::milog::MiLogStream v23; // [rsp+40h] [rbp-150h] BYREF
  common::milog::MiLogStream v24; // [rsp+60h] [rbp-130h] BYREF
  char v25[272]; // [rsp+80h] [rbp-110h] BYREF

  v4 = (unsigned __int64)v25;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(224LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 32 16 15 target_ptr:1573 64 16 21 notify_param_ptr:1590 96 96 22 change_hp_context:1597";
  *(_QWORD *)(v4 + 16) = AbilityComp::healHPHandler;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -219021312;
  v6[536862722] = -219021312;
  v6[536862726] = -202116109;
  std::shared_ptr<Creature>::shared_ptr((std::shared_ptr<Creature> *const)(v4 + 32), &param->target_ptr);
  if ( std::operator==<Creature>((const std::shared_ptr<Creature> *)(v4 + 32), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v24,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "healHPHandler",
      1576);
    v7 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(&v24, (const char (*)[19])"target_ptr is null");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v7, this->creature_);
    common::milog::MiLogStream::~MiLogStream(&v24);
    v8 = -1;
  }
  else
  {
    v9 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
    if ( Creature::getLifeState(v9) == LIFE_DEAD )
    {
      v8 = 0;
    }
    else
    {
      v10 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
      FightPropComp = Creature::getFightPropComp(v10);
      IsLockHealHp = FightPropComp::getIsLockHealHp(FightPropComp);
      if ( PileBoolValue::getValue(IsLockHealHp) )
      {
        common::milog::MiLogStream::create(
          &v23,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/ability/ability_comp.cpp",
          "healHPHandler",
          1587);
        v13 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                &v23,
                (const char (*)[27])"heal hp is locked, target:");
        v14 = (unsigned __int64)std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
        if ( *(_BYTE *)((v14 >> 3) + 0x7FFF8000) )
          v14 = __asan_report_load8(v14);
        v15 = *(void (__fastcall ***)(common::milog::MiLogStream *, unsigned __int64))v14;
        if ( *(_BYTE *)((*(_QWORD *)v14 >> 3) + 0x7FFF8000LL) )
          v14 = __asan_report_load8(*(_QWORD *)v14);
        (*v15)(&v24, v14);
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v13, (const std::string *)&v24);
        std::string::~string(&v24);
        common::milog::MiLogStream::~MiLogStream(&v23);
        v8 = 0;
      }
      else
      {
        *(_QWORD *)(v4 + 64) = 0LL;
        *(_QWORD *)(v4 + 72) = 0LL;
        if ( *(char *)(((unsigned __int64)&config_action->mute_heal_effect >> 3) + 0x7FFF8000) < 0 )
          __asan_report_load1(&config_action->mute_heal_effect);
        if ( !config_action->mute_heal_effect )
        {
          common::tools::perf::make_shared<FightPropNtfParam>();
          std::shared_ptr<FightPropNtfParam>::operator=((std::shared_ptr<FightPropNtfParam> *const)(v4 + 64), &__r);
          std::shared_ptr<FightPropNtfParam>::~shared_ptr(&__r);
          v16 = (unsigned __int64)std::__shared_ptr_access<FightPropNtfParam,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FightPropNtfParam,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
          if ( *(_BYTE *)((v16 >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)((v16 >> 3) + 0x7FFF8000) <= 3 )
            v16 = __asan_report_store4(v16);
          *(_DWORD *)v16 = 3;
        }
        *(float *)v3.m128i_i32 = AbilityComp::calcHealHpAmount(config_action, param);
        hp_amount = COERCE_FLOAT(_mm_cvtsi128_si32(v3));
        ChangeHpContext::ChangeHpContext((ChangeHpContext *const)(v4 + 96));
        *(_DWORD *)(v4 + 96) = 101;
        std::weak_ptr<ActorAbility>::operator=<ActorAbility>(
          (std::weak_ptr<ActorAbility> *const)(v4 + 160),
          &param->ability_ptr);
        v17 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
        std::shared_ptr<FightPropNtfParam>::shared_ptr(&__r, (const std::shared_ptr<FightPropNtfParam> *)(v4 + 64));
        Creature::changeCurHp(v17, hp_amount, (ChangeHpContext *)(v4 + 96), 1, &__r);
        std::shared_ptr<FightPropNtfParam>::~shared_ptr(&__r);
        AbilityComp::notifyClientBeingHealed(this, param, hp_amount, *(float *)(v4 + 184), 0);
        v18 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
        StatLogReporter::onCreatureBeHealed(v18, param, (const ChangeHpContext *)(v4 + 96), hp_amount);
        v8 = 0;
        ChangeHpContext::~ChangeHpContext((ChangeHpContext *const)(v4 + 96));
        std::shared_ptr<FightPropNtfParam>::~shared_ptr((std::shared_ptr<FightPropNtfParam> *const)(v4 + 64));
      }
    }
  }
  std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v4 + 32));
  result = v8;
  if ( v25 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 1610: range 00000000136CD4C6-00000000136CDB0F
int32_t __cdecl AbilityComp::reviveAvatarHandler(
        AbilityComp *const this,
        const data::ReviveAvatar *config_action,
        ActionParam *param)
{
  __m128i v3; // xmm0
  unsigned __int64 v4; // r12
  __int64 v5; // rax
  _DWORD *v6; // r13
  common::milog::MiLogStream *v7; // rcx
  int32_t v8; // r14d
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  common::milog::MiLogStream *v10; // r14
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  common::milog::MiLogStream *v12; // rcx
  unsigned __int64 v13; // rax
  unsigned __int64 v14; // rdx
  common::milog::MiLogStream *v15; // rcx
  Player *v16; // rax
  PlayerAvatarComp *AvatarComp; // rax
  Avatar *v18; // rax
  Avatar *v19; // rax
  Avatar *v20; // r14
  uint32_t EntityId; // eax
  int32_t result; // eax
  common::milog::MiLogStream v24; // [rsp+30h] [rbp-D0h] BYREF
  char v25[176]; // [rsp+50h] [rbp-B0h] BYREF

  v4 = (unsigned __int64)v25;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(128LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 32 16 15 target_ptr:1612 64 16 15 avatar_ptr:1623 96 16 15 player_ptr:1629";
  *(_QWORD *)(v4 + 16) = AbilityComp::reviveAvatarHandler;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -219021312;
  v6[536862722] = -219021312;
  v6[536862723] = -202178560;
  std::shared_ptr<Creature>::shared_ptr((std::shared_ptr<Creature> *const)(v4 + 32), &param->target_ptr);
  if ( std::operator==<Creature>((const std::shared_ptr<Creature> *)(v4 + 32), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v24,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "reviveAvatarHandler",
      1615);
    v7 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(&v24, (const char (*)[19])"target_ptr is null");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
LABEL_7:
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v7, this->creature_);
    common::milog::MiLogStream::~MiLogStream(&v24);
    v8 = -1;
    goto LABEL_31;
  }
  v9 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
  if ( Creature::getLifeState(v9) != LIFE_DEAD )
  {
    common::milog::MiLogStream::create(
      &v24,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "reviveAvatarHandler",
      1620);
    v10 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
            &v24,
            (const char (*)[19])"invalid life state");
    v11 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
    v7 = common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v10, v11);
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    goto LABEL_7;
  }
  std::dynamic_pointer_cast<Avatar,Creature>((const std::shared_ptr<Creature> *)(v4 + 64));
  if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v4 + 64), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v24,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "reviveAvatarHandler",
      1626);
    v12 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
            &v24,
            (const char (*)[19])"avatar_ptr is null");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v12, this->creature_);
    common::milog::MiLogStream::~MiLogStream(&v24);
    v8 = -1;
  }
  else
  {
    v13 = (unsigned __int64)std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
    if ( *(_BYTE *)((v13 >> 3) + 0x7FFF8000) )
      v13 = __asan_report_load8(v13);
    v14 = *(_QWORD *)v13 + 152LL;
    if ( *(_BYTE *)((v14 >> 3) + 0x7FFF8000) )
      v13 = __asan_report_load8(*(_QWORD *)v13 + 152LL);
    (*(void (__fastcall **)(unsigned __int64, unsigned __int64))v14)(v4 + 96, v13);
    if ( std::operator==<Player>((const std::shared_ptr<Player> *)(v4 + 96), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v24,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "reviveAvatarHandler",
        1632);
      v15 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
              &v24,
              (const char (*)[19])"player_ptr is null");
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v15, this->creature_);
      common::milog::MiLogStream::~MiLogStream(&v24);
      v8 = -1;
    }
    else
    {
      v16 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
      AvatarComp = Player::getAvatarComp(v16);
      if ( (unsigned int)(PlayerAvatarComp::getDieType(AvatarComp) - 4) > 1 )
      {
        v18 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
        Avatar::setIsReviveAfterDie(v18, 1);
        *(float *)v3.m128i_i32 = AbilityComp::calcHealHpAmount(config_action, param);
        v19 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
        Avatar::setReviveHpAfterDie(v19, COERCE_FLOAT(_mm_cvtsi128_si32(v3)));
        v20 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
        if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->creature_);
        EntityId = Entity::getEntityId((const Entity *const)this->creature_);
        Avatar::setReviveSourceEntityId(v20, EntityId);
        v8 = 0;
      }
      else
      {
        v8 = 0;
      }
    }
    std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v4 + 96));
  }
  std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 64));
LABEL_31:
  std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v4 + 32));
  result = v8;
  if ( v25 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1653: range 00000000136CE1B8-00000000136CF375
int32_t __cdecl AbilityComp::reviveDeadAvatarHandler(
        AbilityComp *const this,
        const data::ReviveDeadAvatar *config_action,
        ActionParam *param)
{
  int32_t v3; // r14d
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rcx
  common::milog::MiLogStream *v8; // rcx
  common::milog::MiLogStream *v9; // rcx
  common::milog::MiLogStream *v10; // rcx
  common::milog::MiLogStream *v11; // rcx
  Scene *v12; // r15
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  uint32_t Uid; // eax
  common::milog::MiLogStream *v15; // r14
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // rax
  uint32_t SkillComp; // ecx
  common::milog::MiLogStream *v20; // r14
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v24; // rax
  int v25; // r15d
  Skill *v26; // rax
  Skill *v27; // rax
  common::milog::MiLogStream *v28; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v29; // rax
  Player *v30; // rax
  PlayerAvatarComp *AvatarComp; // r14
  Player *v32; // rax
  PlayerAvatarComp *v33; // r14
  char v34; // al
  __m128i v35; // xmm0
  ActorAbility *v36; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v37; // rax
  SkillComp *v38; // rcx
  unsigned __int64 v39; // rax
  unsigned __int64 v40; // rdx
  Player *v41; // rax
  PlayerEventComp *EventComp; // r15
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v43; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v44; // rax
  unsigned __int64 *v45; // r8
  const unsigned int *v46; // r9
  int32_t result; // eax
  char v49[12]; // [rsp+24h] [rbp-2CCh] BYREF
  std::shared_ptr<Creature> p_global_value_source_ptr; // [rsp+30h] [rbp-2C0h] BYREF
  common::milog::MiLogStream v51; // [rsp+40h] [rbp-2B0h] BYREF
  char v52[656]; // [rsp+60h] [rbp-290h] BYREF

  v4 = (unsigned __int64)v52;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_4(608LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "13 48 4 15 revive_num:1709 64 12 12 ori_pos:1685 96 12 14 dummy_rot:1686 128 16 16 ability_ptr:1"
                        "654 160 16 15 target_ptr:1660 192 16 15 caster_ptr:1666 224 16 14 scene_ptr:1672 256 16 15 playe"
                        "r_ptr:1678 288 16 22 caster_avatar_ptr:1684 320 16 22 caster_player_ptr:1763 352 16 14 skill_ptr"
                        ":1694 384 64 9 func:1710 480 96 16 start_param:1758";
  *(_QWORD *)(v4 + 16) = AbilityComp::reviveDeadAvatarHandler;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -219020288;
  v6[536862723] = -219020288;
  v6[536862724] = -219021312;
  v6[536862725] = -219021312;
  v6[536862726] = -219021312;
  v6[536862727] = -219021312;
  v6[536862728] = -219021312;
  v6[536862729] = -219021312;
  v6[536862730] = -219021312;
  v6[536862731] = -219021312;
  v6[536862734] = -218959118;
  v6[536862738] = -202116109;
  std::shared_ptr<ActorAbility>::shared_ptr((std::shared_ptr<ActorAbility> *const)(v4 + 128), &param->ability_ptr);
  if ( std::operator==<ActorAbility>((const std::shared_ptr<ActorAbility> *)(v4 + 128), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v51,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "reviveDeadAvatarHandler",
      1657);
    v7 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
           &v51,
           (const char (*)[20])"ability_ptr is null");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v7, this->creature_);
    common::milog::MiLogStream::~MiLogStream(&v51);
    v3 = -1;
  }
  else
  {
    std::shared_ptr<Creature>::shared_ptr((std::shared_ptr<Creature> *const)(v4 + 160), &param->target_ptr);
    if ( std::operator==<Creature>((const std::shared_ptr<Creature> *)(v4 + 160), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v51,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "reviveDeadAvatarHandler",
        1663);
      v8 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
             &v51,
             (const char (*)[19])"target_ptr is null");
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v8, this->creature_);
      common::milog::MiLogStream::~MiLogStream(&v51);
      v3 = -1;
    }
    else
    {
      std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
      ActorAbility::getCaster((ActorAbility *const)(v4 + 192));
      if ( std::operator==<Creature>((const std::shared_ptr<Creature> *)(v4 + 192), 0LL) )
      {
        common::milog::MiLogStream::create(
          &v51,
          &common::milog::MiLogDefault::default_log_obj_,
          0x13u,
          "./src/ability/ability_comp.cpp",
          "reviveDeadAvatarHandler",
          1669);
        v9 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
               &v51,
               (const char (*)[19])"caster_ptr is null");
        if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->creature_);
        common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v9, this->creature_);
        common::milog::MiLogStream::~MiLogStream(&v51);
        v3 = -1;
      }
      else
      {
        std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 160));
        Entity::getScene((const Entity *const)(v4 + 224));
        if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v4 + 224), 0LL) )
        {
          common::milog::MiLogStream::create(
            &v51,
            &common::milog::MiLogDefault::default_log_obj_,
            0x13u,
            "./src/ability/ability_comp.cpp",
            "reviveDeadAvatarHandler",
            1675);
          v10 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                  &v51,
                  (const char (*)[18])"scene_ptr is null");
          if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->creature_);
          common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v10, this->creature_);
          common::milog::MiLogStream::~MiLogStream(&v51);
          v3 = -1;
        }
        else
        {
          std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 160));
          Creature::findOriginalPlayerIncludeTrialAvatar((Creature *const)(v4 + 256));
          if ( std::operator==<Player>((const std::shared_ptr<Player> *)(v4 + 256), 0LL) )
          {
            common::milog::MiLogStream::create(
              &v51,
              &common::milog::MiLogDefault::default_log_obj_,
              0x13u,
              "./src/ability/ability_comp.cpp",
              "reviveDeadAvatarHandler",
              1681);
            v11 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                    &v51,
                    (const char (*)[19])"player_ptr is null");
            if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
              __asan_report_load8(&this->creature_);
            common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v11, this->creature_);
            common::milog::MiLogStream::~MiLogStream(&v51);
            v3 = -1;
          }
          else
          {
            std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 192));
            Creature::findTopOwnerOrSelf((Creature *const)(v4 + 352));
            std::dynamic_pointer_cast<Avatar,Creature>((const std::shared_ptr<Creature> *)(v4 + 288));
            std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v4 + 352));
            Vector3::Vector3((Vector3 *const)(v4 + 64), 0.0, 0.0, 0.0);
            Vector3::Vector3((Vector3 *const)(v4 + 96), 0.0, 0.0, 0.0);
            v12 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 224));
            v13 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 256));
            Uid = Player::getUid(v13);
            if ( Scene::getPlayerLocation(v12, Uid, (Vector3 *)(v4 + 64), (Vector3 *)(v4 + 96)) )
            {
              common::milog::MiLogStream::create(
                &v51,
                &common::milog::MiLogDefault::default_log_obj_,
                0x13u,
                "./src/ability/ability_comp.cpp",
                "reviveDeadAvatarHandler",
                1689);
              v15 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                      &v51,
                      (const char (*)[36])off_25034C00);
              v16 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 256));
              operator<<(v15, v16);
              common::milog::MiLogStream::~MiLogStream(&v51);
              v3 = -1;
            }
            else
            {
              if ( *(_BYTE *)(((unsigned __int64)&config_action->skill_id >> 3) + 0x7FFF8000) != 0
                && (char)((((_BYTE)config_action + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_action->skill_id >> 3)
                                                                             + 0x7FFF8000) )
              {
                __asan_report_load4(&config_action->skill_id);
              }
              if ( !config_action->skill_id
                || !std::operator!=<Avatar>((const std::shared_ptr<Avatar> *)(v4 + 288), 0LL) )
              {
                goto LABEL_41;
              }
              v18 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 288));
              SkillComp = (unsigned int)Avatar::getSkillComp(v18);
              if ( *(_BYTE *)(((unsigned __int64)&config_action->skill_id >> 3) + 0x7FFF8000) != 0
                && (char)((((_BYTE)config_action + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_action->skill_id >> 3)
                                                                             + 0x7FFF8000) )
              {
                __asan_report_load4(&config_action->skill_id);
              }
              SkillComp::findSkill((const SkillComp *const)(v4 + 352), SkillComp);
              if ( std::operator==<Skill>(0LL, (const std::shared_ptr<Skill> *)(v4 + 352)) )
              {
                common::milog::MiLogStream::create(
                  &v51,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/ability/ability_comp.cpp",
                  "reviveDeadAvatarHandler",
                  1697);
                v20 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                        &v51,
                        (const char (*)[28])"skill_ptr is null, player_:");
                v21 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 256));
                v22 = operator<<(v20, v21);
                v23 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v22, (const char (*)[9])" avatar:");
                v24 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 288));
                common::milog::MiLogStream::operator<<<Avatar,(Avatar*)0>(v23, v24);
                common::milog::MiLogStream::~MiLogStream(&v51);
                v3 = -1;
                v25 = 0;
              }
              else
              {
                v26 = std::__shared_ptr_access<Skill,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Skill,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 352));
                Skill::updateCdTime(v26);
                v27 = std::__shared_ptr_access<Skill,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Skill,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 352));
                if ( Skill::checkUse(v27) )
                {
                  common::milog::MiLogStream::create(
                    &v51,
                    &common::milog::MiLogDefault::default_log_obj_,
                    1u,
                    "./src/ability/ability_comp.cpp",
                    "reviveDeadAvatarHandler",
                    1704);
                  v28 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
                          &v51,
                          (const char (*)[35])"do not do skill due to cd, avatar:");
                  v29 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 288));
                  common::milog::MiLogStream::operator<<<Avatar,(Avatar*)0>(v28, v29);
                  common::milog::MiLogStream::~MiLogStream(&v51);
                  v3 = 0;
                  v25 = 0;
                }
                else
                {
                  v25 = 1;
                }
              }
              std::shared_ptr<Skill>::~shared_ptr((std::shared_ptr<Skill> *const)(v4 + 352));
              if ( v25 == 1 )
              {
LABEL_41:
                *(_DWORD *)(v4 + 48) = 0;
                *(_QWORD *)(v4 + 384) = config_action;
                *(_QWORD *)(v4 + 392) = v4 + 128;
                *(_QWORD *)(v4 + 400) = v4 + 288;
                *(_QWORD *)(v4 + 408) = v4 + 48;
                *(_QWORD *)(v4 + 416) = v4 + 224;
                *(_QWORD *)(v4 + 424) = *(_QWORD *)(v4 + 64);
                *(_DWORD *)(v4 + 432) = *(_DWORD *)(v4 + 72);
                *(_QWORD *)(v4 + 440) = param;
                if ( *(_BYTE *)(((unsigned __int64)&config_action->is_revive_other_player_avatar >> 3) + 0x7FFF8000) != 0
                  && (((unsigned __int8)config_action + 49) & 7) >= *(_BYTE *)(((unsigned __int64)&config_action->is_revive_other_player_avatar >> 3)
                                                                             + 0x7FFF8000) )
                {
                  __asan_report_load1(&config_action->is_revive_other_player_avatar);
                }
                if ( config_action->is_revive_other_player_avatar )
                {
                  v30 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 256));
                  AvatarComp = Player::getAvatarComp(v30);
                  std::function<ForeachPolicy ()(Avatar &)>::function<AbilityComp::reviveDeadAvatarHandler(data::ReviveDeadAvatar const&,ActionParam &)::{lambda(Avatar &)#1},void,void>(
                    (std::function<ForeachPolicy(Avatar&)> *const)&v51,
                    *(AbilityComp::reviveDeadAvatarHandler::<lambda(Avatar&)> *)(v4 + 384));
                  PlayerAvatarComp::foreachAvatarInSceneTeam(AvatarComp, (std::function<ForeachPolicy(Avatar&)> *)&v51);
                }
                else
                {
                  v32 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 256));
                  v33 = Player::getAvatarComp(v32);
                  std::function<ForeachPolicy ()(Avatar &)>::function<AbilityComp::reviveDeadAvatarHandler(data::ReviveDeadAvatar const&,ActionParam &)::{lambda(Avatar &)#1},void,void>(
                    (std::function<ForeachPolicy(Avatar&)> *const)&v51,
                    *(AbilityComp::reviveDeadAvatarHandler::<lambda(Avatar&)> *)(v4 + 384));
                  PlayerAvatarComp::foreachMyAvatarInSceneTeam(v33, (std::function<ForeachPolicy(Avatar&)> *)&v51);
                }
                std::function<ForeachPolicy ()(Avatar &)>::~function((std::function<ForeachPolicy(Avatar&)> *const)&v51);
                if ( !*(_DWORD *)(v4 + 48) )
                  goto LABEL_52;
                if ( *(_BYTE *)(((unsigned __int64)&config_action->skill_id >> 3) + 0x7FFF8000) != 0
                  && (char)((((_BYTE)config_action + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_action->skill_id >> 3)
                                                                               + 0x7FFF8000) )
                {
                  __asan_report_load4(&config_action->skill_id);
                }
                if ( config_action->skill_id
                  && std::operator!=<Avatar>((const std::shared_ptr<Avatar> *)(v4 + 288), 0LL) )
                {
                  v34 = 1;
                }
                else
                {
LABEL_52:
                  v34 = 0;
                }
                if ( v34 )
                {
                  memset((void *)(v4 + 480), 0, 0x60uLL);
                  *(_DWORD *)(v4 + 480) = 1065353216;
                  v35 = (__m128i)0x3F800000u;
                  *(_DWORD *)(v4 + 484) = 1065353216;
                  v36 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
                  std::shared_ptr<DieCreatureRecord>::shared_ptr(
                    (std::shared_ptr<DieCreatureRecord> *const)(v4 + 352),
                    0LL);
                  std::shared_ptr<Creature>::shared_ptr(&p_global_value_source_ptr, 0LL);
                  *(float *)v35.m128i_i32 = ActorAbility::evaluate(
                                              v36,
                                              &config_action->cd_ratio,
                                              &p_global_value_source_ptr,
                                              (DieCreatureRecordPtr *)(v4 + 352));
                  *(_DWORD *)(v4 + 480) = _mm_cvtsi128_si32(v35);
                  std::shared_ptr<Creature>::~shared_ptr(&p_global_value_source_ptr);
                  std::shared_ptr<DieCreatureRecord>::~shared_ptr((std::shared_ptr<DieCreatureRecord> *const)(v4 + 352));
                  *(_DWORD *)(v4 + 484) = 1065353216;
                  ActionParam::operator=((ActionParam *const)(v4 + 488), param);
                  v37 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 288));
                  v38 = Avatar::getSkillComp(v37);
                  if ( *(_BYTE *)(((unsigned __int64)&config_action->skill_id >> 3) + 0x7FFF8000) != 0
                    && (char)((((_BYTE)config_action + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_action->skill_id >> 3)
                                                                                 + 0x7FFF8000) )
                  {
                    __asan_report_load4(&config_action->skill_id);
                  }
                  SkillComp::onSkillStart(v38, config_action->skill_id, (const SkillStartParam *)(v4 + 480));
                  v39 = (unsigned __int64)std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 288));
                  if ( *(_BYTE *)((v39 >> 3) + 0x7FFF8000) )
                    v39 = __asan_report_load8(v39);
                  v40 = *(_QWORD *)v39 + 152LL;
                  if ( *(_BYTE *)((v40 >> 3) + 0x7FFF8000) )
                    v39 = __asan_report_load8(*(_QWORD *)v39 + 152LL);
                  (*(void (__fastcall **)(unsigned __int64, unsigned __int64))v40)(v4 + 320, v39);
                  if ( std::operator!=<Player>((const std::shared_ptr<Player> *)(v4 + 320), 0LL) )
                  {
                    v41 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 320));
                    EventComp = Player::getEventComp(v41);
                    v43 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 288));
                    *(_QWORD *)&v49[4] = Avatar::getGuid(v43);
                    v44 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 288));
                    *(_DWORD *)v49 = Entity::getEntityId((const Entity *const)v44);
                    common::tools::perf::make_shared<AbilityAvatarSkillStartEvent,unsigned int,unsigned long,unsigned int const&>(
                      (unsigned int *)&p_global_value_source_ptr,
                      (unsigned __int64 *)v49,
                      (const unsigned int *)&v49[4],
                      &config_action->skill_id,
                      v45,
                      v46);
                    std::shared_ptr<BaseEvent>::shared_ptr<AbilityAvatarSkillStartEvent,void>(
                      (std::shared_ptr<BaseEvent> *const)(v4 + 352),
                      (std::shared_ptr<AbilityAvatarSkillStartEvent> *)&p_global_value_source_ptr);
                    PlayerEventComp::notifyEvent(EventComp, (BaseEventPtr *)(v4 + 352));
                    std::shared_ptr<BaseEvent>::~shared_ptr((std::shared_ptr<BaseEvent> *const)(v4 + 352));
                    std::shared_ptr<AbilityAvatarSkillStartEvent>::~shared_ptr((std::shared_ptr<AbilityAvatarSkillStartEvent> *const)&p_global_value_source_ptr);
                  }
                  std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v4 + 320));
                  SkillStartParam::~SkillStartParam((SkillStartParam *const)(v4 + 480));
                }
                v3 = 0;
              }
            }
            std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 288));
          }
          std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v4 + 256));
        }
        std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v4 + 224));
      }
      std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v4 + 192));
    }
    std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v4 + 160));
  }
  std::shared_ptr<ActorAbility>::~shared_ptr((std::shared_ptr<ActorAbility> *const)(v4 + 128));
  result = v3;
  if ( v52 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8038) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8048) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8048) = -168430091;
  }
  return result;
};

// Line 1710: range 00000000136CDB10-00000000136CE1B6
ForeachPolicy __cdecl AbilityComp::reviveDeadAvatarHandler(data::ReviveDeadAvatar const&,ActionParam &)::{lambda(Avatar &)#1}::operator()(
        const AbilityComp::reviveDeadAvatarHandler::<lambda(Avatar&)> *const __closure,
        Avatar *avatar)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // rbx
  __m128i v5; // xmm0
  Scene *v6; // r14
  uint32_t Uid; // eax
  float Distance; // xmm0_4
  const data::ReviveDeadAvatar *config_action; // rax
  char v10; // dl
  ScenePtr *scene_ptr; // r14
  AbilityComp *AbilityComp; // r14
  uint32_t EntityId; // esi
  unsigned __int64 revive_num; // rax
  ForeachPolicy result; // eax
  float hp_amount; // [rsp+14h] [rbp-14Ch]
  float delta_hp; // [rsp+1Ch] [rbp-144h]
  std::shared_ptr<Avatar> __r; // [rsp+20h] [rbp-140h] BYREF
  std::shared_ptr<ActorAbility> p_ability_ptr; // [rsp+30h] [rbp-130h] BYREF
  std::shared_ptr<Scene> __a; // [rsp+40h] [rbp-120h] BYREF
  char v21[272]; // [rsp+50h] [rbp-110h] BYREF

  v2 = (unsigned __int64)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(224LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 32 12 8 pos:1720 64 12 8 rot:1721 96 96 12 context:1738";
  *(_QWORD *)(v2 + 16) = AbilityComp::reviveDeadAvatarHandler(data::ReviveDeadAvatar const&,ActionParam &)::{lambda(Avatar &)#1}::operator();
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219020288;
  v4[536862722] = -219020288;
  v4[536862726] = -202116109;
  if ( Creature::getLifeState(avatar) == LIFE_DEAD && !Avatar::isBanRevive(avatar) )
  {
    Vector3::Vector3((Vector3 *const)(v2 + 32), 0.0, 0.0, 0.0);
    v5 = 0LL;
    Vector3::Vector3((Vector3 *const)(v2 + 64), 0.0, 0.0, 0.0);
    if ( *(_BYTE *)(((unsigned __int64)&__closure->__scene_ptr >> 3) + 0x7FFF8000) )
      __asan_report_load8(&__closure->__scene_ptr);
    v6 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)__closure->__scene_ptr);
    Uid = Avatar::getUid(avatar);
    if ( !Scene::getPlayerLocation(v6, Uid, (Vector3 *)(v2 + 32), (Vector3 *)(v2 + 64)) )
    {
      Distance = getDistance((const Vector3 *)(v2 + 32), &__closure->__ori_pos);
      if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
        __asan_report_load8(__closure);
      config_action = __closure->__config_action;
      v10 = *(_BYTE *)(((unsigned __int64)&__closure->__config_action->range >> 3) + 0x7FFF8000);
      if ( v10 != 0 && v10 <= 3 )
        config_action = (const data::ReviveDeadAvatar *)__asan_report_load4(&__closure->__config_action->range);
      if ( Distance <= config_action->range )
      {
        if ( *(_BYTE *)(((unsigned __int64)&__closure->__scene_ptr >> 3) + 0x7FFF8000) )
          __asan_report_load8(&__closure->__scene_ptr);
        scene_ptr = __closure->__scene_ptr;
        Entity::getScene((const Entity *const)&__a);
        LOBYTE(scene_ptr) = std::operator!=<Scene,Scene>(&__a, scene_ptr);
        std::shared_ptr<Scene>::~shared_ptr(&__a);
        if ( !(_BYTE)scene_ptr )
        {
          toThisPtr<Avatar>((Avatar *)&__r);
          std::shared_ptr<Creature>::shared_ptr<Avatar,void>((std::shared_ptr<Creature> *const)&__a, &__r);
          if ( *(_BYTE *)(((unsigned __int64)&__closure->__ability_ptr >> 3) + 0x7FFF8000) )
            __asan_report_load8(&__closure->__ability_ptr);
          std::shared_ptr<ActorAbility>::shared_ptr(&p_ability_ptr, __closure->__ability_ptr);
          if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
            __asan_report_load8(__closure);
          *(float *)v5.m128i_i32 = AbilityComp::calcHealHpAmount(
                                     (const data::HealHP *)__closure->__config_action,
                                     &p_ability_ptr,
                                     (CreaturePtr *)&__a);
          hp_amount = COERCE_FLOAT(_mm_cvtsi128_si32(v5));
          std::shared_ptr<ActorAbility>::~shared_ptr(&p_ability_ptr);
          std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)&__a);
          std::shared_ptr<Avatar>::~shared_ptr(&__r);
          *(float *)v5.m128i_i32 = Creature::getCurHp(avatar);
          std::shared_ptr<FightPropNtfParam>::shared_ptr((std::shared_ptr<FightPropNtfParam> *const)&__a, 0LL);
          Creature::changeCurHp(avatar, hp_amount, CHANGE_HP_ADD_REVIVE, 1, (FightPropNtfParamPtr *)&__a);
          std::shared_ptr<FightPropNtfParam>::~shared_ptr((std::shared_ptr<FightPropNtfParam> *const)&__a);
          delta_hp = Creature::getCurHp(avatar) - COERCE_FLOAT(_mm_cvtsi128_si32(v5));
          ChangeHpContext::ChangeHpContext((ChangeHpContext *const)(v2 + 96));
          if ( *(_BYTE *)(((unsigned __int64)&__closure->__caster_avatar_ptr >> 3) + 0x7FFF8000) )
            __asan_report_load8(&__closure->__caster_avatar_ptr);
          std::shared_ptr<Creature>::operator=<Avatar>(
            (std::shared_ptr<Creature> *const)(v2 + 104),
            __closure->__caster_avatar_ptr);
          Avatar::setLifeAlive(avatar, 0x68u, (ChangeHpContext *)(v2 + 96), 1);
          AbilityComp = Creature::getAbilityComp(avatar);
          EntityId = Entity::getEntityId((const Entity *const)avatar);
          if ( *(_BYTE *)(((unsigned __int64)&__closure->__param >> 3) + 0x7FFF8000) )
            __asan_report_load8(&__closure->__param);
          AbilityComp::notifyClientBeingHealed(AbilityComp, __closure->__param, hp_amount, delta_hp, EntityId);
          if ( *(_BYTE *)(((unsigned __int64)&__closure->__revive_num >> 3) + 0x7FFF8000) )
            __asan_report_load8(&__closure->__revive_num);
          revive_num = (unsigned __int64)__closure->__revive_num;
          if ( *(_BYTE *)((revive_num >> 3) + 0x7FFF8000) != 0
            && (char)((revive_num & 7) + 3) >= *(_BYTE *)((revive_num >> 3) + 0x7FFF8000) )
          {
            revive_num = __asan_report_load4(__closure->__revive_num);
          }
          ++*(_DWORD *)revive_num;
          ChangeHpContext::~ChangeHpContext((ChangeHpContext *const)(v2 + 96));
        }
      }
    }
  }
  result = FOREACH_CONTINUE;
  if ( v21 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 1774: range 00000000136CF376-00000000136D0495
int32_t __cdecl AbilityComp::createGadgetHandler(
        AbilityComp *const this,
        const data::CreateGadget *config_action,
        ActionParam *param)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rcx
  int32_t v7; // r14d
  common::milog::MiLogStream *v8; // r14
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  common::milog::MiLogStream *v10; // rcx
  common::milog::MiLogStream *v11; // rcx
  common::milog::MiLogStream *v12; // rcx
  const proto::Vector *v13; // rax
  const proto::Vector *v14; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  CreaturePtr *p_target_ptr; // rax
  Scene *v23; // rax
  uint32_t camp_id; // ecx
  data::TargetType camp_target_type; // ecx
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v26; // rax
  uint32_t EntityId; // ecx
  common::milog::MiLogStream *v29; // rcx
  Creature *v30; // r14
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v31; // rax
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v32; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v33; // rax
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v34; // rax
  Entity *v35; // r14
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v36; // rax
  uint32_t GroupVisionType; // eax
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v38; // rax
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v39; // rax
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v40; // r14
  unsigned __int64 v41; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v42; // rsi
  void (__fastcall *v44)(std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, VisionContext *); // [rsp+0h] [rbp-570h]
  uint32_t owner_auth_peer_id; // [rsp+24h] [rbp-54Ch]
  const proto::AbilityInvokeEntry *entry_ptr; // [rsp+28h] [rbp-548h]
  const std::string *ability_data_str; // [rsp+30h] [rbp-540h]
  common::milog::MiLogStream v49; // [rsp+40h] [rbp-530h] BYREF
  char v50[1296]; // [rsp+60h] [rbp-510h] BYREF

  v3 = (unsigned __int64)v50;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_5(1248LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "8 32 12 8 pos:1805 64 12 8 rot:1806 96 16 15 source_ptr:1775 128 16 14 scene_ptr:1786 160 16 15 "
                        "gadget_ptr:1838 192 16 15 avatar_ptr:1848 224 40 30 meta_action_create_gadget:1799 304 816 17 gadget_param:1819";
  *(_QWORD *)(v3 + 16) = AbilityComp::createGadgetHandler;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -219020288;
  v5[536862722] = -219020288;
  v5[536862723] = -219021312;
  v5[536862724] = -219021312;
  v5[536862725] = -219021312;
  v5[536862726] = -219021312;
  v5[536862728] = -218959360;
  v5[536862729] = 62194;
  v5[536862755] = -202116109;
  v5[536862756] = -202116109;
  v5[536862757] = -202116109;
  v5[536862758] = -202116109;
  std::shared_ptr<Creature>::shared_ptr((std::shared_ptr<Creature> *const)(v3 + 96), &param->source_ptr);
  if ( std::operator==<Creature>((const std::shared_ptr<Creature> *)(v3 + 96), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v49,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "createGadgetHandler",
      1778);
    v6 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(&v49, (const char (*)[19])"source_ptr is null");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v6, this->creature_);
    common::milog::MiLogStream::~MiLogStream(&v49);
    v7 = -1;
    goto LABEL_86;
  }
  if ( *(char *)(((unsigned __int64)&config_action->by_server >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&config_action->by_server);
  if ( config_action->by_server )
  {
    std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
    Entity::getScene((const Entity *const)(v3 + 128));
    if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v3 + 128), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v49,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "createGadgetHandler",
        1789);
      v11 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
              &v49,
              (const char (*)[18])"scene_ptr is null");
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
LABEL_17:
      common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v11, this->creature_);
      common::milog::MiLogStream::~MiLogStream(&v49);
      v7 = -1;
LABEL_85:
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 128));
      goto LABEL_86;
    }
    if ( *(_BYTE *)(((unsigned __int64)&param->entry_ptr >> 3) + 0x7FFF8000) )
      __asan_report_load8(&param->entry_ptr);
    entry_ptr = param->entry_ptr;
    if ( !entry_ptr )
    {
      common::milog::MiLogStream::create(
        &v49,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "createGadgetHandler",
        1795);
      v11 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
              &v49,
              (const char (*)[18])"entry_ptr is null");
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      goto LABEL_17;
    }
    ability_data_str = proto::AbilityInvokeEntry::ability_data[abi:cxx11](entry_ptr);
    proto::AbilityActionCreateGadget::AbilityActionCreateGadget((proto::AbilityActionCreateGadget *const)(v3 + 224));
    if ( (unsigned __int8)google::protobuf::MessageLite::ParseFromString(v3 + 224, ability_data_str) != 1 )
    {
      common::milog::MiLogStream::create(
        &v49,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "createGadgetHandler",
        1802);
      v12 = common::milog::MiLogStream::operator<<<char [48],(char *[48])0>(
              &v49,
              (const char (*)[48])"AbilityActionCreateGadget ParseFromString fails");
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
    }
    else
    {
      v13 = proto::AbilityActionCreateGadget::pos((const proto::AbilityActionCreateGadget *const)(v3 + 224));
      Vector3::Vector3((Vector3 *const)(v3 + 32), v13);
      v14 = proto::AbilityActionCreateGadget::rot((const proto::AbilityActionCreateGadget *const)(v3 + 224));
      Vector3::Vector3((Vector3 *const)(v3 + 64), v14);
      v15 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
      if ( Scene::isPosValid(v15, (const Vector3 *)(v3 + 32)) )
      {
        if ( !Vector3::isValidRot((const Vector3 *const)(v3 + 64)) )
        {
          common::milog::MiLogStream::create(
            &v49,
            &common::milog::MiLogDefault::default_log_obj_,
            0x13u,
            "./src/ability/ability_comp.cpp",
            "createGadgetHandler",
            1815);
          v17 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                  &v49,
                  (const char (*)[17])"invalid rot, x: ");
          v18 = common::milog::MiLogStream::operator<<<float,(float *)0>(v17, (const float *)(v3 + 64));
          v19 = common::milog::MiLogStream::operator<<<char [5],(char *[5])0>(v18, (const char (*)[5])off_25035020);
          v20 = common::milog::MiLogStream::operator<<<float,(float *)0>(v19, (const float *)(v3 + 68));
          v21 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v20, (const char (*)[9])" rot.z: ");
          common::milog::MiLogStream::operator<<<float,(float *)0>(v21, (const float *)(v3 + 72));
          common::milog::MiLogStream::~MiLogStream(&v49);
          v7 = -1;
        }
        else
        {
          GadgetParam::GadgetParam((GadgetParam *const)(v3 + 304));
          if ( *(_BYTE *)(((unsigned __int64)&config_action->gadget_id >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)config_action - 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_action->gadget_id >> 3)
                                                                         + 0x7FFF8000) )
          {
            __asan_report_load4(&config_action->gadget_id);
          }
          *(_DWORD *)(v3 + 304) = config_action->gadget_id;
          *(_QWORD *)(v3 + 316) = *(_QWORD *)(v3 + 32);
          *(_DWORD *)(v3 + 324) = *(_DWORD *)(v3 + 40);
          *(_QWORD *)(v3 + 328) = *(_QWORD *)(v3 + 64);
          *(_DWORD *)(v3 + 336) = *(_DWORD *)(v3 + 72);
          if ( *(char *)(((unsigned __int64)&config_action->owner_is_target >> 3) + 0x7FFF8000) < 0 )
            __asan_report_load1(&config_action->owner_is_target);
          if ( config_action->owner_is_target )
            p_target_ptr = &param->target_ptr;
          else
            p_target_ptr = (CreaturePtr *)(v3 + 96);
          std::shared_ptr<Creature>::operator=((std::shared_ptr<Creature> *const)(v3 + 376), p_target_ptr);
          *(_DWORD *)(v3 + 400) = proto::AbilityActionCreateGadget::room_id((const proto::AbilityActionCreateGadget *const)(v3 + 224));
          v23 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
          *(_DWORD *)(v3 + 312) = Scene::genNewEntityId(v23, PROT_ENTITY_GADGET);
          if ( *(_BYTE *)(((v3 + 580) >> 3) + 0x7FFF8000) != 0
            && (char)((v3 - 32 + 100) & 7) >= *(_BYTE *)(((v3 + 580) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store1(v3 + 580);
          }
          *(_BYTE *)(v3 + 580) = 1;
          if ( *(_BYTE *)(((unsigned __int64)&config_action->camp_id >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&config_action->camp_id >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&config_action->camp_id);
          }
          camp_id = config_action->camp_id;
          if ( *(_BYTE *)(((v3 + 584) >> 3) + 0x7FFF8000) != 0
            && (char)(((v3 + 72) & 7) + 3) >= *(_BYTE *)(((v3 + 584) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store4(v3 + 584);
          }
          *(_DWORD *)(v3 + 584) = camp_id;
          if ( *(_BYTE *)(((unsigned __int64)&config_action->camp_target_type >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)config_action - 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_action->camp_target_type >> 3)
                                                                         + 0x7FFF8000) )
          {
            __asan_report_load4(&config_action->camp_target_type);
          }
          camp_target_type = config_action->camp_target_type;
          if ( *(_BYTE *)(((v3 + 588) >> 3) + 0x7FFF8000) != 0
            && (char)(((v3 + 76) & 7) + 3) >= *(_BYTE *)(((v3 + 588) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store4(v3 + 588);
          }
          *(_DWORD *)(v3 + 588) = camp_target_type;
          if ( std::operator!=<Creature>(&param->target_ptr, 0LL) )
          {
            v26 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)&param->target_ptr);
            EntityId = Entity::getEntityId((const Entity *const)v26);
            if ( *(_BYTE *)(((v3 + 592) >> 3) + 0x7FFF8000) != 0
              && (char)(((v3 + 80) & 7) + 3) >= *(_BYTE *)(((v3 + 592) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store4(v3 + 592);
            }
            *(_DWORD *)(v3 + 592) = EntityId;
          }
          if ( *(char *)(((unsigned __int64)&config_action->sight_group_with_owner >> 3) + 0x7FFF8000) < 0 )
            __asan_report_load1(&config_action->sight_group_with_owner);
          if ( config_action->sight_group_with_owner
            && std::__shared_ptr<Creature,(__gnu_cxx::_Lock_policy)2>::operator bool((const std::__shared_ptr<Creature,(__gnu_cxx::_Lock_policy)2> *const)(v3 + 376)) )
          {
            std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 376));
            Entity::getOrCreateSightGroup((Entity *const)(v3 + 192));
            std::shared_ptr<EntitySightGroup>::operator=(
              (std::shared_ptr<EntitySightGroup> *const)(v3 + 440),
              (std::shared_ptr<EntitySightGroup> *)(v3 + 192));
            std::shared_ptr<EntitySightGroup>::~shared_ptr((std::shared_ptr<EntitySightGroup> *const)(v3 + 192));
          }
          EntityMgr::createGadget((const GadgetParam *)(v3 + 160));
          if ( std::operator==<Gadget>((const std::shared_ptr<Gadget> *)(v3 + 160), 0LL) )
          {
            common::milog::MiLogStream::create(
              &v49,
              &common::milog::MiLogDefault::default_log_obj_,
              0x13u,
              "./src/ability/ability_comp.cpp",
              "createGadgetHandler",
              1841);
            v29 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                    &v49,
                    (const char (*)[19])"createGadget fails");
            if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
              __asan_report_load8(&this->creature_);
            common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v29, this->creature_);
            common::milog::MiLogStream::~MiLogStream(&v49);
            v7 = -1;
          }
          else
          {
            if ( std::operator!=<Creature>(0LL, (const std::shared_ptr<Creature> *)(v3 + 376)) )
            {
              v30 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 376));
              v31 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
              Creature::addSubCreature(v30, v31);
              v32 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 376));
              owner_auth_peer_id = Creature::getAuthorityPeerId(v32);
              std::dynamic_pointer_cast<Avatar,Creature>((const std::shared_ptr<Creature> *)(v3 + 192));
              if ( std::operator!=<Avatar>((const std::shared_ptr<Avatar> *)(v3 + 192), 0LL) )
              {
                v33 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
                owner_auth_peer_id = Avatar::getPeerId(v33);
              }
              v34 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
              Creature::setAuthorityPeerId(v34, owner_auth_peer_id);
              v35 = (Entity *)std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
              v36 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 376));
              GroupVisionType = Entity::getGroupVisionType((const Entity *const)v36);
              Entity::setGroupVisionType(v35, GroupVisionType);
              std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 192));
            }
            if ( *(_BYTE *)(((unsigned __int64)&config_action->life_by_owner_is_alive >> 3) + 0x7FFF8000) != 0
              && (((unsigned __int8)config_action - 108) & 7) >= *(_BYTE *)(((unsigned __int64)&config_action->life_by_owner_is_alive >> 3)
                                                                          + 0x7FFF8000) )
            {
              __asan_report_load1(&config_action->life_by_owner_is_alive);
            }
            if ( config_action->life_by_owner_is_alive )
              goto LABEL_77;
            if ( *(_BYTE *)(((unsigned __int64)&config_action->life_by_owner_v2 >> 3) + 0x7FFF8000) != 0
              && (((unsigned __int8)config_action - 70) & 7) >= *(_BYTE *)(((unsigned __int64)&config_action->life_by_owner_v2 >> 3)
                                                                         + 0x7FFF8000) )
            {
              __asan_report_load1(&config_action->life_by_owner_v2);
            }
            if ( config_action->life_by_owner_v2 )
            {
LABEL_77:
              v38 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
              Creature::setIsAliveByOwner(v38, 1);
            }
            v39 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
            v40 = v39;
            if ( *(_BYTE *)(((unsigned __int64)v39 >> 3) + 0x7FFF8000) )
              __asan_report_load8(v39);
            v41 = *(_QWORD *)v40->baseclass_0 + 56LL;
            if ( *(_BYTE *)((v41 >> 3) + 0x7FFF8000) )
              v41 = __asan_report_load8(*(_QWORD *)v40->baseclass_0 + 56LL);
            v44 = *(void (__fastcall **)(std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, VisionContext *))v41;
            v42 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
            v44(v40, v42, &VisionContext::meet_context);
            v7 = 0;
          }
          std::shared_ptr<Gadget>::~shared_ptr((std::shared_ptr<Gadget> *const)(v3 + 160));
          GadgetParam::~GadgetParam((GadgetParam *const)(v3 + 304));
        }
        goto LABEL_84;
      }
      common::milog::MiLogStream::create(
        &v49,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "createGadgetHandler",
        1809);
      v16 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(&v49, (const char (*)[13])"invalid pos:");
      v12 = operator<<(v16, (const Vector3 *)(v3 + 32));
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
    }
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v12, this->creature_);
    common::milog::MiLogStream::~MiLogStream(&v49);
    v7 = -1;
LABEL_84:
    proto::AbilityActionCreateGadget::~AbilityActionCreateGadget((proto::AbilityActionCreateGadget *const)(v3 + 224));
    goto LABEL_85;
  }
  common::milog::MiLogStream::create(
    &v49,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/ability/ability_comp.cpp",
    "createGadgetHandler",
    1783);
  v8 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
         &v49,
         (const char (*)[35])"CreateGadget is not exec on server");
  v9 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
  v10 = common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v8, v9);
  if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->creature_);
  common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v10, this->creature_);
  common::milog::MiLogStream::~MiLogStream(&v49);
  v7 = 0;
LABEL_86:
  std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 96));
  if ( v50 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF808C) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8094) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    __asan_stack_free_5(v3, 1248LL, v50);
  }
  return v7;
};

// Line 1866: range 00000000136D0496-00000000136D1213
int32_t __cdecl AbilityComp::createMovingPlatformHandler(
        AbilityComp *const this,
        const data::CreateMovingPlatform *config_action,
        ActionParam *param)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rcx
  int32_t v7; // r14d
  common::milog::MiLogStream *v8; // rcx
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  unsigned __int64 Position; // rax
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  unsigned __int64 Rotation; // rax
  CreaturePtr *p_target_ptr; // rax
  Scene *v14; // rax
  uint32_t camp_id; // ecx
  data::TargetType camp_target_type; // ecx
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  uint32_t EntityId; // ecx
  __int64 v19; // rdx
  common::milog::MiLogStream *v21; // rcx
  Creature *v22; // r14
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v23; // rax
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v24; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v25; // rax
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v26; // rax
  Entity *v27; // r14
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v28; // rax
  uint32_t GroupVisionType; // eax
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v30; // rax
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v31; // rax
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v32; // r14
  unsigned __int64 v33; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v34; // rsi
  void (__fastcall *v36)(std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, VisionContext *); // [rsp+0h] [rbp-4E0h]
  uint32_t owner_auth_peer_id; // [rsp+24h] [rbp-4BCh]
  common::milog::MiLogStream v39; // [rsp+30h] [rbp-4B0h] BYREF
  char v40[1168]; // [rsp+50h] [rbp-490h] BYREF

  v3 = (unsigned __int64)v40;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_5(1120LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 48 16 15 source_ptr:1867 80 16 14 scene_ptr:1873 112 16 15 gadget_ptr:1908 144 16 15 avatar_pt"
                        "r:1918 176 816 17 gadget_param:1879";
  *(_QWORD *)(v3 + 16) = AbilityComp::createMovingPlatformHandler;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61937;
  v5[536862722] = 62194;
  v5[536862723] = 62194;
  v5[536862724] = 62194;
  v5[536862725] = 62194;
  v5[536862751] = -202116109;
  v5[536862752] = -202116109;
  v5[536862753] = -202116109;
  v5[536862754] = -202116109;
  std::shared_ptr<Creature>::shared_ptr((std::shared_ptr<Creature> *const)(v3 + 48), &param->source_ptr);
  if ( std::operator==<Creature>((const std::shared_ptr<Creature> *)(v3 + 48), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v39,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "createMovingPlatformHandler",
      1870);
    v6 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
           &v39,
           (const char (*)[30])"source_ptr is null, creature:");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v6, this->creature_);
    common::milog::MiLogStream::~MiLogStream(&v39);
    v7 = -1;
  }
  else
  {
    std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 48));
    Entity::getScene((const Entity *const)(v3 + 80));
    if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v3 + 80), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v39,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "createMovingPlatformHandler",
        1876);
      v8 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
             &v39,
             (const char (*)[29])"scene_ptr is null, creature:");
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v8, this->creature_);
      common::milog::MiLogStream::~MiLogStream(&v39);
      v7 = -1;
    }
    else
    {
      GadgetParam::GadgetParam((GadgetParam *const)(v3 + 176));
      if ( *(_BYTE *)(((unsigned __int64)&config_action->gadget_id >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)config_action - 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_action->gadget_id >> 3)
                                                                     + 0x7FFF8000) )
      {
        __asan_report_load4(&config_action->gadget_id);
      }
      *(_DWORD *)(v3 + 176) = config_action->gadget_id;
      v9 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 48));
      Position = (unsigned __int64)Entity::getPosition((const Entity *const)v9);
      if ( (char)(Position & 7) >= *(_BYTE *)((Position >> 3) + 0x7FFF8000)
        && *(_BYTE *)((Position >> 3) + 0x7FFF8000) != 0
        || *(_BYTE *)(((Position + 11) >> 3) + 0x7FFF8000) != 0
        && (char)((Position + 11) & 7) >= *(_BYTE *)(((Position + 11) >> 3) + 0x7FFF8000) )
      {
        Position = __asan_report_load_n(Position, 12LL);
      }
      *(_QWORD *)(v3 + 188) = *(_QWORD *)Position;
      *(_DWORD *)(v3 + 196) = *(_DWORD *)(Position + 8);
      v11 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 48));
      Rotation = (unsigned __int64)Entity::getRotation((const Entity *const)v11);
      if ( (char)(Rotation & 7) >= *(_BYTE *)((Rotation >> 3) + 0x7FFF8000)
        && *(_BYTE *)((Rotation >> 3) + 0x7FFF8000) != 0
        || *(_BYTE *)(((Rotation + 11) >> 3) + 0x7FFF8000) != 0
        && (char)((Rotation + 11) & 7) >= *(_BYTE *)(((Rotation + 11) >> 3) + 0x7FFF8000) )
      {
        Rotation = __asan_report_load_n(Rotation, 12LL);
      }
      *(_QWORD *)(v3 + 200) = *(_QWORD *)Rotation;
      *(_DWORD *)(v3 + 208) = *(_DWORD *)(Rotation + 8);
      if ( *(char *)(((unsigned __int64)&config_action->owner_is_target >> 3) + 0x7FFF8000) < 0 )
        __asan_report_load1(&config_action->owner_is_target);
      if ( config_action->owner_is_target )
        p_target_ptr = &param->target_ptr;
      else
        p_target_ptr = (CreaturePtr *)(v3 + 48);
      std::shared_ptr<Creature>::operator=((std::shared_ptr<Creature> *const)(v3 + 248), p_target_ptr);
      v14 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80));
      *(_DWORD *)(v3 + 184) = Scene::genNewEntityId(v14, PROT_ENTITY_GADGET);
      if ( *(_BYTE *)(((v3 + 452) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 - 60) & 7) >= *(_BYTE *)(((v3 + 452) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store1(v3 + 452);
      }
      *(_BYTE *)(v3 + 452) = 1;
      if ( *(_BYTE *)(((unsigned __int64)&config_action->camp_id >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&config_action->camp_id >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&config_action->camp_id);
      }
      camp_id = config_action->camp_id;
      if ( *(_BYTE *)(((v3 + 456) >> 3) + 0x7FFF8000) != 0
        && (char)(((v3 - 60 + 4) & 7) + 3) >= *(_BYTE *)(((v3 + 456) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store4(v3 + 456);
      }
      *(_DWORD *)(v3 + 456) = camp_id;
      if ( *(_BYTE *)(((unsigned __int64)&config_action->camp_target_type >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)config_action - 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_action->camp_target_type >> 3)
                                                                     + 0x7FFF8000) )
      {
        __asan_report_load4(&config_action->camp_target_type);
      }
      camp_target_type = config_action->camp_target_type;
      if ( *(_BYTE *)(((v3 + 460) >> 3) + 0x7FFF8000) != 0
        && (char)(((v3 - 60 + 8) & 7) + 3) >= *(_BYTE *)(((v3 + 460) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store4(v3 + 460);
      }
      *(_DWORD *)(v3 + 460) = camp_target_type;
      if ( std::operator!=<Creature>(&param->target_ptr, 0LL) )
      {
        v17 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)&param->target_ptr);
        EntityId = Entity::getEntityId((const Entity *const)v17);
        if ( *(_BYTE *)(((v3 + 464) >> 3) + 0x7FFF8000) != 0
          && (char)(((v3 - 60 + 12) & 7) + 3) >= *(_BYTE *)(((v3 + 464) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store4(v3 + 464);
        }
        *(_DWORD *)(v3 + 464) = EntityId;
      }
      *(_DWORD *)(v3 + 404) = 2;
      *(_BYTE *)(v3 + 412) = 0;
      if ( *(char *)(((unsigned __int64)&config_action->enable_rotation_offset >> 3) + 0x7FFF8000) < 0 )
        __asan_report_load1(&config_action->enable_rotation_offset);
      if ( config_action->enable_rotation_offset )
      {
        *(Quaternion *)(v3 + 416) = Quaternion::fromRotation((const Vector3 *)(v3 + 200));
      }
      else
      {
        if ( (char)((unsigned __int64)&Quaternion::identity & 7) >= *(_BYTE *)(((unsigned __int64)&Quaternion::identity >> 3)
                                                                             + 0x7FFF8000)
          && *(_BYTE *)(((unsigned __int64)&Quaternion::identity >> 3) + 0x7FFF8000) != 0
          || *(_BYTE *)((((unsigned __int64)&Quaternion::identity.w + 3) >> 3) + 0x7FFF8000) != 0
          && (((unsigned __int8)&Quaternion::identity.w + 3) & 7) >= *(_BYTE *)((((unsigned __int64)&Quaternion::identity.w
                                                                                + 3) >> 3)
                                                                              + 0x7FFF8000) )
        {
          __asan_report_load_n(&Quaternion::identity, 16LL);
        }
        v19 = *(_QWORD *)&Quaternion::identity.z;
        *(_QWORD *)(v3 + 416) = *(_QWORD *)&Quaternion::identity.x;
        *(_QWORD *)(v3 + 424) = v19;
      }
      *(_QWORD *)(v3 + 432) = *(_QWORD *)(v3 + 188);
      *(_DWORD *)(v3 + 440) = *(_DWORD *)(v3 + 196);
      if ( *(char *)(((unsigned __int64)&config_action->sight_group_with_owner >> 3) + 0x7FFF8000) < 0 )
        __asan_report_load1(&config_action->sight_group_with_owner);
      if ( config_action->sight_group_with_owner
        && std::__shared_ptr<Creature,(__gnu_cxx::_Lock_policy)2>::operator bool((const std::__shared_ptr<Creature,(__gnu_cxx::_Lock_policy)2> *const)(v3 + 248)) )
      {
        std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 248));
        Entity::getOrCreateSightGroup((Entity *const)(v3 + 144));
        std::shared_ptr<EntitySightGroup>::operator=(
          (std::shared_ptr<EntitySightGroup> *const)(v3 + 312),
          (std::shared_ptr<EntitySightGroup> *)(v3 + 144));
        std::shared_ptr<EntitySightGroup>::~shared_ptr((std::shared_ptr<EntitySightGroup> *const)(v3 + 144));
      }
      EntityMgr::createGadget((const GadgetParam *)(v3 + 112));
      if ( std::operator==<Gadget>((const std::shared_ptr<Gadget> *)(v3 + 112), 0LL) )
      {
        common::milog::MiLogStream::create(
          &v39,
          &common::milog::MiLogDefault::default_log_obj_,
          0x13u,
          "./src/ability/ability_comp.cpp",
          "createMovingPlatformHandler",
          1911);
        v21 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                &v39,
                (const char (*)[29])"createGadget fail, creature:");
        if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->creature_);
        common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v21, this->creature_);
        common::milog::MiLogStream::~MiLogStream(&v39);
        v7 = -1;
      }
      else
      {
        if ( std::operator!=<Creature>(0LL, (const std::shared_ptr<Creature> *)(v3 + 248)) )
        {
          v22 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 248));
          v23 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
          Creature::addSubCreature(v22, v23);
          v24 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 248));
          owner_auth_peer_id = Creature::getAuthorityPeerId(v24);
          std::dynamic_pointer_cast<Avatar,Creature>((const std::shared_ptr<Creature> *)(v3 + 144));
          if ( std::operator!=<Avatar>((const std::shared_ptr<Avatar> *)(v3 + 144), 0LL) )
          {
            v25 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 144));
            owner_auth_peer_id = Avatar::getPeerId(v25);
          }
          v26 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
          Creature::setAuthorityPeerId(v26, owner_auth_peer_id);
          v27 = (Entity *)std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
          v28 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 248));
          GroupVisionType = Entity::getGroupVisionType((const Entity *const)v28);
          Entity::setGroupVisionType(v27, GroupVisionType);
          std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 144));
        }
        if ( *(_BYTE *)(((unsigned __int64)&config_action->life_by_owner_is_alive >> 3) + 0x7FFF8000) != 0
          && (((unsigned __int8)config_action - 108) & 7) >= *(_BYTE *)(((unsigned __int64)&config_action->life_by_owner_is_alive >> 3)
                                                                      + 0x7FFF8000) )
        {
          __asan_report_load1(&config_action->life_by_owner_is_alive);
        }
        if ( config_action->life_by_owner_is_alive )
          goto LABEL_66;
        if ( *(_BYTE *)(((unsigned __int64)&config_action->life_by_owner_v2 >> 3) + 0x7FFF8000) != 0
          && (((unsigned __int8)config_action - 70) & 7) >= *(_BYTE *)(((unsigned __int64)&config_action->life_by_owner_v2 >> 3)
                                                                     + 0x7FFF8000) )
        {
          __asan_report_load1(&config_action->life_by_owner_v2);
        }
        if ( config_action->life_by_owner_v2 )
        {
LABEL_66:
          v30 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
          Creature::setIsAliveByOwner(v30, 1);
        }
        v31 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
        v32 = v31;
        if ( *(_BYTE *)(((unsigned __int64)v31 >> 3) + 0x7FFF8000) )
          __asan_report_load8(v31);
        v33 = *(_QWORD *)v32->baseclass_0 + 56LL;
        if ( *(_BYTE *)((v33 >> 3) + 0x7FFF8000) )
          v33 = __asan_report_load8(*(_QWORD *)v32->baseclass_0 + 56LL);
        v36 = *(void (__fastcall **)(std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, VisionContext *))v33;
        v34 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80));
        v36(v32, v34, &VisionContext::meet_context);
        v7 = 0;
      }
      std::shared_ptr<Gadget>::~shared_ptr((std::shared_ptr<Gadget> *const)(v3 + 112));
      GadgetParam::~GadgetParam((GadgetParam *const)(v3 + 176));
    }
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 80));
  }
  std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 48));
  if ( v40 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF807C) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8084) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    __asan_stack_free_5(v3, 1120LL, v40);
  }
  return v7;
};

// Line 1936: range 00000000136D1426-00000000136D1C76
int32_t __cdecl AbilityComp::killSelfHandler(
        AbilityComp *const this,
        const data::KillSelf *config_action,
        ActionParam *param)
{
  int32_t v3; // r14d
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rcx
  bool v8; // r15
  int v9; // r15d
  common::tools::TimeoutFunc *v10; // r15
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  Creature *v12; // rax
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // r14
  unsigned __int64 v15; // rax
  void (__fastcall *v16)(std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, VisionContext *); // r15
  int32_t result; // eax
  bool is_repeated; // [rsp+14h] [rbp-21Ch]
  int is_repeateda; // [rsp+14h] [rbp-21Ch]
  VisionContext v21; // [rsp+34h] [rbp-1FCh] BYREF
  EcsBase<Gadget,GadgetCompBase,28> v22; // [rsp+40h] [rbp-1F0h] BYREF
  AbilityComp::killSelfHandler::<lambda(uint64_t)> v23; // [rsp+70h] [rbp-1C0h] BYREF
  char v24[336]; // [rsp+E0h] [rbp-150h] BYREF

  v4 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(288LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "5 32 16 15 target_ptr:1937 64 16 15 gadget_ptr:1943 96 16 15 target_wtr:1958 128 16 14 scene_ptr"
                        ":1959 160 96 12 context:1949";
  *(_QWORD *)(v4 + 16) = AbilityComp::killSelfHandler;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -219021312;
  v6[536862722] = -219021312;
  v6[536862723] = -219021312;
  v6[536862724] = -219021312;
  v6[536862728] = -202116109;
  std::shared_ptr<Creature>::shared_ptr((std::shared_ptr<Creature> *const)(v4 + 32), &param->target_ptr);
  if ( !std::operator==<Creature>((const std::shared_ptr<Creature> *)(v4 + 32), 0LL) )
  {
    std::dynamic_pointer_cast<Gadget,Creature>((const std::shared_ptr<Creature> *)(v4 + 64));
    is_repeated = 0;
    v8 = 0;
    if ( std::operator!=<Gadget>((const std::shared_ptr<Gadget> *)(v4 + 64), 0LL) )
    {
      std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
      EcsBase<Gadget,GadgetCompBase,28u>::findComp<GadgetClientComp>(&v22);
      is_repeated = 1;
      if ( std::operator!=<GadgetClientComp>((const std::shared_ptr<GadgetClientComp> *)&v22, 0LL) )
        v8 = 1;
    }
    if ( is_repeated )
      std::shared_ptr<GadgetClientComp>::~shared_ptr((std::shared_ptr<GadgetClientComp> *const)&v22);
    if ( v8 )
    {
      v3 = 0;
LABEL_42:
      std::shared_ptr<Gadget>::~shared_ptr((std::shared_ptr<Gadget> *const)(v4 + 64));
      goto LABEL_43;
    }
    ChangeHpContext::ChangeHpContext((ChangeHpContext *const)(v4 + 160));
    *(_DWORD *)(v4 + 160) = 12;
    if ( *(char *)(((unsigned __int64)&config_action->ban_drop >> 3) + 0x7FFF8000) < 0 )
      __asan_report_load1(&config_action->ban_drop);
    *(_BYTE *)(v4 + 216) = config_action->ban_drop;
    if ( *(_BYTE *)(((unsigned __int64)&config_action->ban_hppercentage_drop >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)config_action - 110) & 7) >= *(_BYTE *)(((unsigned __int64)&config_action->ban_hppercentage_drop >> 3)
                                                                  + 0x7FFF8000) )
    {
      __asan_report_load1(&config_action->ban_hppercentage_drop);
    }
    *(_BYTE *)(v4 + 218) = config_action->ban_hppercentage_drop;
    if ( *(_BYTE *)(((unsigned __int64)&config_action->kill_self_type >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)config_action - 108) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_action->kill_self_type >> 3)
                                                                    + 0x7FFF8000) )
    {
      __asan_report_load4(&config_action->kill_self_type);
    }
    *(_DWORD *)(v4 + 244) = config_action->kill_self_type;
    std::weak_ptr<ActorAbility>::operator=<ActorAbility>(
      (std::weak_ptr<ActorAbility> *const)(v4 + 224),
      &param->ability_ptr);
    if ( *(_BYTE *)(((unsigned __int64)&config_action->duration >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&config_action->duration >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&config_action->duration);
    }
    if ( config_action->duration > 0.0 && (int)(1000.0 * config_action->duration) )
    {
      std::weak_ptr<Creature>::weak_ptr<Creature,void>(
        (std::weak_ptr<Creature> *const)(v4 + 96),
        (const std::shared_ptr<Creature> *)(v4 + 32));
      std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
      Entity::getScene((const Entity *const)(v4 + 128));
      if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v4 + 128), 0LL) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&v22.comp_vec_._M_impl._M_end_of_storage,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/ability/ability_comp.cpp",
          "killSelfHandler",
          1962);
        common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
          (common::milog::MiLogStream *const)&v22.comp_vec_._M_impl._M_end_of_storage,
          (const char (*)[45])"create timer failed.cur scene_ptr is nullptr");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v22.comp_vec_._M_impl._M_end_of_storage);
        v3 = -1;
        v9 = 0;
      }
      else
      {
        v10 = (common::tools::TimeoutFunc *)std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
        if ( *(_BYTE *)(((unsigned __int64)&config_action->duration >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&config_action->duration >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&config_action->duration);
        }
        is_repeateda = (int)(1000.0 * config_action->duration);
        ChangeHpContext::ChangeHpContext(&v23.__context, (const ChangeHpContext *)(v4 + 160));
        std::weak_ptr<Creature>::weak_ptr(&v23.__target_wtr, (const std::weak_ptr<Creature> *)(v4 + 96));
        std::function<void ()(unsigned long)>::function<AbilityComp::killSelfHandler(data::KillSelf const&,ActionParam &)::{lambda(unsigned long)#1},void,void>(
          (std::function<void(long unsigned int)> *const)&v22.comp_vec_._M_impl._M_end_of_storage,
          &v23);
        Scene::addSceneUnixTimerMS(
          (Scene *const)&v22,
          v10,
          (uint32_t)&v22.comp_vec_._M_impl._M_end_of_storage,
          is_repeateda);
        std::shared_ptr<common::tools::TimerProxy>::~shared_ptr((std::shared_ptr<common::tools::TimerProxy> *const)&v22);
        std::function<void ()(unsigned long)>::~function((std::function<void(long unsigned int)> *const)&v22.comp_vec_._M_impl._M_end_of_storage);
        AbilityComp::killSelfHandler(data::KillSelf const&,ActionParam &)::{lambda(unsigned long)#1}::~ActionParam(&v23);
        v9 = 1;
      }
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v4 + 128));
      std::weak_ptr<Creature>::~weak_ptr((std::weak_ptr<Creature> *const)(v4 + 96));
      if ( v9 != 1 )
        goto LABEL_41;
    }
    else
    {
      v11 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
      if ( Creature::getLifeState(v11) == LIFE_ALIVE )
      {
        v12 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
        Creature::subCurHpToZero(v12, (ChangeHpContext *)(v4 + 160), 1);
      }
      v13 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
      v14 = v13;
      if ( *(_BYTE *)(((unsigned __int64)v13 >> 3) + 0x7FFF8000) )
        __asan_report_load8(v13);
      v15 = *(_QWORD *)v14->baseclass_0 + 128LL;
      if ( *(_BYTE *)((v15 >> 3) + 0x7FFF8000) )
        v15 = __asan_report_load8(*(_QWORD *)v14->baseclass_0 + 128LL);
      v16 = *(void (__fastcall **)(std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, VisionContext *))v15;
      VisionContext::VisionContext(&v21, VISION_DIE);
      v16(v14, &v21);
    }
    v3 = 0;
LABEL_41:
    ChangeHpContext::~ChangeHpContext((ChangeHpContext *const)(v4 + 160));
    goto LABEL_42;
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)&v22.comp_vec_._M_impl._M_end_of_storage,
    &common::milog::MiLogDefault::default_log_obj_,
    0x13u,
    "./src/ability/ability_comp.cpp",
    "killSelfHandler",
    1940);
  v7 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
         (common::milog::MiLogStream *const)&v22.comp_vec_._M_impl._M_end_of_storage,
         (const char (*)[19])"target_ptr is null");
  if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->creature_);
  common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v7, this->creature_);
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v22.comp_vec_._M_impl._M_end_of_storage);
  v3 = -1;
LABEL_43:
  std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v4 + 32));
  result = v3;
  if ( v24 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 1965: range 00000000137F3768-00000000137F37A8
void __cdecl AbilityComp::killSelfHandler(data::KillSelf const&,ActionParam &)::{lambda(unsigned long)#1}::ActionParam(
        AbilityComp::killSelfHandler::<lambda(uint64_t)> *const this,
        AbilityComp::killSelfHandler::<lambda(uint64_t)> *a2)
{
  ChangeHpContext::ChangeHpContext(&this->__context, &a2->__context);
  std::weak_ptr<Creature>::weak_ptr(&this->__target_wtr, &a2->__target_wtr);
};

// Line 1965: range 00000000137F3874-00000000137F38B4
void __cdecl AbilityComp::killSelfHandler(data::KillSelf const&,ActionParam &)::{lambda(unsigned long)#1}::ActionParam(
        AbilityComp::killSelfHandler::<lambda(uint64_t)> *const this,
        const AbilityComp::killSelfHandler::<lambda(uint64_t)> *a2)
{
  ChangeHpContext::ChangeHpContext(&this->__context, &a2->__context);
  std::weak_ptr<Creature>::weak_ptr(&this->__target_wtr, &a2->__target_wtr);
};

// Line 1965: range 00000000136D1214-00000000136D13F9
void __cdecl AbilityComp::killSelfHandler(data::KillSelf const&,ActionParam &)::{lambda(unsigned long)#1}::operator()(
        AbilityComp::killSelfHandler::<lambda(uint64_t)> *const __closure,
        uint64_t now_ms)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  Creature *v6; // rcx
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // r14
  unsigned __int64 v9; // rax
  void (__fastcall *v10)(std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, VisionContext *); // r15
  VisionContext v11; // [rsp+24h] [rbp-7Ch] BYREF
  char v12[112]; // [rsp+30h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 15 target_ptr:1967";
  *(_QWORD *)(v2 + 16) = AbilityComp::killSelfHandler(data::KillSelf const&,ActionParam &)::{lambda(unsigned long)#1}::operator();
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  std::weak_ptr<Creature>::lock((const std::weak_ptr<Creature> *const)(v2 + 32));
  if ( std::operator!=<Creature>((const std::shared_ptr<Creature> *)(v2 + 32), 0LL) )
  {
    v5 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    if ( Creature::getLifeState(v5) == LIFE_ALIVE )
    {
      v6 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
      Creature::subCurHpToZero(v6, &__closure->__context, 1);
    }
    v7 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    v8 = v7;
    if ( *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) )
      __asan_report_load8(v7);
    v9 = *(_QWORD *)v8->baseclass_0 + 128LL;
    if ( *(_BYTE *)((v9 >> 3) + 0x7FFF8000) )
      v9 = __asan_report_load8(*(_QWORD *)v8->baseclass_0 + 128LL);
    v10 = *(void (__fastcall **)(std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, VisionContext *))v9;
    VisionContext::VisionContext(&v11, VISION_DIE);
    v10(v8, &v11);
  }
  std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v2 + 32));
  if ( v12 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 1965: range 00000000136D13FA-00000000136D1424
void __cdecl AbilityComp::killSelfHandler(data::KillSelf const&,ActionParam &)::{lambda(unsigned long)#1}::~ActionParam(
        AbilityComp::killSelfHandler::<lambda(uint64_t)> *const this)
{
  std::weak_ptr<Creature>::~weak_ptr(&this->__target_wtr);
  ChangeHpContext::~ChangeHpContext(&this->__context);
};

// Line 1991: range 00000000136D1C78-00000000136D210C
int32_t __cdecl AbilityComp::triggerDropEquipPartsHandler(
        AbilityComp *const this,
        const data::TriggerDropEquipParts *config_action,
        ActionParam *param)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // rcx
  int32_t v7; // r14d
  common::milog::MiLogStream *v8; // rcx
  Monster *v9; // rax
  Monster *v10; // rax
  int32_t result; // eax
  std::vector<std::string>::const_iterator __for_begin; // [rsp+20h] [rbp-F0h] BYREF
  std::vector<std::string>::const_iterator __for_end; // [rsp+28h] [rbp-E8h] BYREF
  const std::vector<std::string> *__for_range; // [rsp+30h] [rbp-E0h]
  const std::string *equip_part; // [rsp+38h] [rbp-D8h]
  common::milog::MiLogStream v17; // [rsp+40h] [rbp-D0h] BYREF
  char v18[176]; // [rsp+60h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 16 15 target_ptr:1992 64 16 14 scene_ptr:1998 96 16 16 monster_ptr:2004";
  *(_QWORD *)(v3 + 16) = AbilityComp::triggerDropEquipPartsHandler;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -219021312;
  v5[536862722] = -219021312;
  v5[536862723] = -202178560;
  std::shared_ptr<Creature>::shared_ptr((std::shared_ptr<Creature> *const)(v3 + 32), &param->target_ptr);
  if ( std::operator==<Creature>((const std::shared_ptr<Creature> *)(v3 + 32), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v17,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "triggerDropEquipPartsHandler",
      1995);
    v6 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(&v17, (const char (*)[19])"target_ptr is null");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v6, this->creature_);
    common::milog::MiLogStream::~MiLogStream(&v17);
    v7 = -1;
  }
  else
  {
    std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
    Entity::getScene((const Entity *const)(v3 + 64));
    if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v3 + 64), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v17,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "triggerDropEquipPartsHandler",
        2001);
      v8 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
             &v17,
             (const char (*)[18])"scene_ptr is null");
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v8, this->creature_);
      common::milog::MiLogStream::~MiLogStream(&v17);
      v7 = -1;
    }
    else
    {
      std::dynamic_pointer_cast<Monster,Creature>((const std::shared_ptr<Creature> *)(v3 + 96));
      if ( std::operator==<Monster>((const std::shared_ptr<Monster> *)(v3 + 96), 0LL) )
      {
        v7 = 0;
      }
      else
      {
        if ( *(char *)(((unsigned __int64)&config_action->drop_all >> 3) + 0x7FFF8000) < 0 )
          __asan_report_load1(&config_action->drop_all);
        if ( config_action->drop_all )
        {
          v9 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
          Monster::delAllWeaponGadgets(v9, 0);
        }
        else
        {
          __for_range = &config_action->equip_parts;
          __for_begin._M_current = std::vector<std::string>::begin(&config_action->equip_parts)._M_current;
          __for_end._M_current = std::vector<std::string>::end(&config_action->equip_parts)._M_current;
          while ( __gnu_cxx::operator!=<std::string const*,std::vector<std::string>>(&__for_begin, &__for_end) )
          {
            equip_part = __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator*(&__for_begin);
            v10 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
            Monster::delWeaponGadget(v10, equip_part, 0, 0);
            __gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>::operator++(&__for_begin);
          }
        }
        v7 = 0;
      }
      std::shared_ptr<Monster>::~shared_ptr((std::shared_ptr<Monster> *const)(v3 + 96));
    }
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 64));
  }
  std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 32));
  result = v7;
  if ( v18 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2025: range 00000000136D210E-00000000136D24B6
int32_t __cdecl AbilityComp::triggerThrowEquipPartHandler(
        AbilityComp *const this,
        const data::TriggerThrowEquipPart *config_action,
        ActionParam *param)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // rcx
  int32_t v7; // r14d
  common::milog::MiLogStream *v8; // rcx
  Monster *v9; // rax
  int32_t result; // eax
  common::milog::MiLogStream v12; // [rsp+20h] [rbp-D0h] BYREF
  char v13[176]; // [rsp+40h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 16 15 target_ptr:2026 64 16 14 scene_ptr:2032 96 16 16 monster_ptr:2038";
  *(_QWORD *)(v3 + 16) = AbilityComp::triggerThrowEquipPartHandler;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -219021312;
  v5[536862722] = -219021312;
  v5[536862723] = -202178560;
  std::shared_ptr<Creature>::shared_ptr((std::shared_ptr<Creature> *const)(v3 + 32), &param->target_ptr);
  if ( std::operator==<Creature>((const std::shared_ptr<Creature> *)(v3 + 32), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v12,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "triggerThrowEquipPartHandler",
      2029);
    v6 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(&v12, (const char (*)[19])"target_ptr is null");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v6, this->creature_);
    common::milog::MiLogStream::~MiLogStream(&v12);
    v7 = -1;
  }
  else
  {
    std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
    Entity::getScene((const Entity *const)(v3 + 64));
    if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v3 + 64), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v12,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "triggerThrowEquipPartHandler",
        2035);
      v8 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
             &v12,
             (const char (*)[18])"scene_ptr is null");
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v8, this->creature_);
      common::milog::MiLogStream::~MiLogStream(&v12);
      v7 = -1;
    }
    else
    {
      std::dynamic_pointer_cast<Monster,Creature>((const std::shared_ptr<Creature> *)(v3 + 96));
      if ( !std::operator==<Monster>((const std::shared_ptr<Monster> *)(v3 + 96), 0LL) )
      {
        v9 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
        Monster::delWeaponGadget(v9, &config_action->equip_part, 0, 0);
      }
      v7 = 0;
      std::shared_ptr<Monster>::~shared_ptr((std::shared_ptr<Monster> *const)(v3 + 96));
    }
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 64));
  }
  std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 32));
  result = v7;
  if ( v13 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2049: range 00000000136D24B8-00000000136D2B73
int32_t __cdecl AbilityComp::triggerCreateGadgetToEquipPartHandler(
        AbilityComp *const this,
        const data::TriggerCreateGadgetToEquipPart *config_action,
        ActionParam *param)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rcx
  int32_t v7; // r14d
  common::milog::MiLogStream *v8; // rcx
  uint32_t v9; // esi
  char v10; // cl
  common::milog::MiLogStream *v11; // r14
  std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  common::milog::MiLogStream *v13; // rcx
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  uint32_t EntityId; // eax
  std::__shared_ptr_access<WeaponGadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  uint32_t v17; // eax
  Entity *v18; // rax
  int32_t result; // eax
  std::shared_ptr<MonsterWeaponGadget> __r; // [rsp+20h] [rbp-160h] BYREF
  common::milog::MiLogStream v23; // [rsp+30h] [rbp-150h] BYREF
  char v24[304]; // [rsp+50h] [rbp-130h] BYREF

  v3 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(256LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 48 16 15 target_ptr:2050 80 16 14 scene_ptr:2056 112 16 16 monster_ptr:2062 144 16 22 weapon_g"
                        "adget_ptr:2067 176 40 11 notify:2073";
  *(_QWORD *)(v3 + 16) = AbilityComp::triggerCreateGadgetToEquipPartHandler;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61937;
  v5[536862722] = 62194;
  v5[536862723] = 62194;
  v5[536862724] = 62194;
  v5[536862725] = 62194;
  v5[536862726] = -218103808;
  v5[536862727] = -202116109;
  std::shared_ptr<Creature>::shared_ptr((std::shared_ptr<Creature> *const)(v3 + 48), &param->target_ptr);
  if ( std::operator==<Creature>((const std::shared_ptr<Creature> *)(v3 + 48), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v23,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "triggerCreateGadgetToEquipPartHandler",
      2053);
    v6 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(&v23, (const char (*)[19])"target_ptr is null");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v6, this->creature_);
    common::milog::MiLogStream::~MiLogStream(&v23);
    v7 = -1;
  }
  else
  {
    std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 48));
    Entity::getScene((const Entity *const)(v3 + 80));
    if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v3 + 80), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v23,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "triggerCreateGadgetToEquipPartHandler",
        2059);
      v8 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
             &v23,
             (const char (*)[18])"scene_ptr is null");
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v8, this->creature_);
      common::milog::MiLogStream::~MiLogStream(&v23);
      v7 = -1;
    }
    else
    {
      std::dynamic_pointer_cast<Monster,Creature>((const std::shared_ptr<Creature> *)(v3 + 112));
      if ( std::operator==<Monster>((const std::shared_ptr<Monster> *)(v3 + 112), 0LL) )
      {
        v7 = 0;
      }
      else
      {
        v9 = (unsigned int)std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
        v10 = (_BYTE)config_action - 112;
        if ( *(_BYTE *)(((unsigned __int64)&config_action->gadget_id >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&config_action->gadget_id >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&config_action->gadget_id);
        }
        Monster::addWeaponGadget((Monster *const)&__r, v9, (const std::string *)config_action->gadget_id, v10);
        std::shared_ptr<WeaponGadget>::shared_ptr<MonsterWeaponGadget,void>(
          (std::shared_ptr<WeaponGadget> *const)(v3 + 144),
          &__r);
        std::shared_ptr<MonsterWeaponGadget>::~shared_ptr(&__r);
        if ( std::operator==<WeaponGadget>((const std::shared_ptr<WeaponGadget> *)(v3 + 144), 0LL) )
        {
          common::milog::MiLogStream::create(
            &v23,
            &common::milog::MiLogDefault::default_log_obj_,
            0x13u,
            "./src/ability/ability_comp.cpp",
            "triggerCreateGadgetToEquipPartHandler",
            2070);
          v11 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                  &v23,
                  (const char (*)[22])"addWeaponGadget fails");
          v12 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
          v13 = common::milog::MiLogStream::operator<<<Monster,(Monster*)0>(v11, v12);
          if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->creature_);
          common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v13, this->creature_);
          common::milog::MiLogStream::~MiLogStream(&v23);
          v7 = -1;
        }
        else
        {
          proto::TriggerCreateGadgetToEquipPartNotify::TriggerCreateGadgetToEquipPartNotify((proto::TriggerCreateGadgetToEquipPartNotify *const)(v3 + 176));
          v14 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 48));
          EntityId = Entity::getEntityId((const Entity *const)v14);
          proto::TriggerCreateGadgetToEquipPartNotify::set_entity_id(
            (proto::TriggerCreateGadgetToEquipPartNotify *const)(v3 + 176),
            EntityId);
          v16 = std::__shared_ptr_access<WeaponGadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<WeaponGadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 144));
          v17 = Entity::getEntityId((const Entity *const)v16);
          proto::TriggerCreateGadgetToEquipPartNotify::set_gadget_entity_id(
            (proto::TriggerCreateGadgetToEquipPartNotify *const)(v3 + 176),
            v17);
          if ( *(_BYTE *)(((unsigned __int64)&config_action->gadget_id >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&config_action->gadget_id >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&config_action->gadget_id);
          }
          proto::TriggerCreateGadgetToEquipPartNotify::set_gadget_id(
            (proto::TriggerCreateGadgetToEquipPartNotify *const)(v3 + 176),
            config_action->gadget_id);
          proto::TriggerCreateGadgetToEquipPartNotify::set_equip_part(
            (proto::TriggerCreateGadgetToEquipPartNotify *const)(v3 + 176),
            &config_action->equip_part);
          v18 = (Entity *)std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 48));
          Entity::notifyViewingPlayers<proto::TriggerCreateGadgetToEquipPartNotify>(
            v18,
            (proto::TriggerCreateGadgetToEquipPartNotify *)(v3 + 176),
            0);
          v7 = 0;
          proto::TriggerCreateGadgetToEquipPartNotify::~TriggerCreateGadgetToEquipPartNotify((proto::TriggerCreateGadgetToEquipPartNotify *const)(v3 + 176));
        }
        std::shared_ptr<WeaponGadget>::~shared_ptr((std::shared_ptr<WeaponGadget> *const)(v3 + 144));
      }
      std::shared_ptr<Monster>::~shared_ptr((std::shared_ptr<Monster> *const)(v3 + 112));
    }
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 80));
  }
  std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 48));
  result = v7;
  if ( v24 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2084: range 00000000136D2B74-00000000136D3F9A
int32_t __cdecl AbilityComp::summonHandler(
        AbilityComp *const this,
        const data::Summon *config_action,
        ActionParam *param)
{
  unsigned __int64 p_entity; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  unsigned __int64 v7; // rax
  unsigned __int64 v8; // rdx
  int v9; // eax
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  common::milog::MiLogStream *v11; // r14
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  common::milog::MiLogStream *v13; // rcx
  Monster *v14; // rcx
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // r14
  std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  common::milog::MiLogStream *v18; // rcx
  common::milog::MiLogStream *v19; // rcx
  const proto::Vector *v20; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rcx
  const proto::Vector *v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rax
  std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v31; // rax
  __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> >::reference v32; // rax
  _DWORD *v33; // rdx
  ActorAbility *v34; // rax
  Scene *v35; // rax
  common::milog::MiLogStream *v37; // rcx
  std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v38; // r14
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v39; // rax
  uint32_t AuthorityPeerId; // eax
  Entity *v41; // r14
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v42; // rax
  uint32_t GroupVisionType; // eax
  std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *p_alive_by_owner; // rdi
  std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v45; // rax
  std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v46; // r14
  unsigned __int64 v47; // rax
  void (__fastcall *v48)(std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, VisionContext *); // r15
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v49; // rax
  Monster *v50; // rax
  Monster *v51; // r14
  Monster *v52; // rax
  int32_t result; // eax
  std::vector<unsigned int>::const_iterator __for_begin; // [rsp+28h] [rbp-338h] BYREF
  std::vector<unsigned int>::const_iterator __for_end; // [rsp+30h] [rbp-330h] BYREF
  const proto::AbilityInvokeEntry *entry_ptr; // [rsp+38h] [rbp-328h]
  const std::string *ability_data_str; // [rsp+40h] [rbp-320h]
  const std::vector<unsigned int> *__for_range; // [rsp+48h] [rbp-318h]
  Vector3 v60; // [rsp+54h] [rbp-30Ch] BYREF
  Entity __r; // [rsp+60h] [rbp-300h] BYREF

  p_entity = (unsigned __int64)&__r.animator_comp_.entity_;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(672LL);
    if ( v4 )
      p_entity = v4;
  }
  *(_QWORD *)p_entity = 1102416563LL;
  *(_QWORD *)(p_entity + 8) = "7 32 4 13 affix_id:2160 48 16 15 target_ptr:2085 80 16 21 host_monster_ptr:2091 112 16 14 "
                              "scene_ptr:2119 144 16 16 monster_ptr:2175 176 40 31 meta_ability_action_summon:2132 256 35"
                              "2 18 monster_param:2138";
  *(_QWORD *)(p_entity + 16) = AbilityComp::summonHandler;
  v5 = (_DWORD *)(p_entity >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61956;
  v5[536862722] = 62194;
  v5[536862723] = 62194;
  v5[536862724] = 62194;
  v5[536862725] = 62194;
  v5[536862726] = -234881024;
  v5[536862727] = -218959118;
  v5[536862739] = -202116109;
  v5[536862740] = -202116109;
  std::shared_ptr<Creature>::shared_ptr((std::shared_ptr<Creature> *const)(p_entity + 48), &param->target_ptr);
  if ( std::operator==<Creature>((const std::shared_ptr<Creature> *)(p_entity + 48), 0LL) )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&__r._M_weak_this._M_refcount,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "summonHandler",
      2088);
    common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
      (common::milog::MiLogStream *const)&__r._M_weak_this._M_refcount,
      (const char (*)[19])"target_ptr is null");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&__r._M_weak_this._M_refcount);
    v6 = -1;
    goto LABEL_97;
  }
  *(_QWORD *)(p_entity + 80) = 0LL;
  *(_QWORD *)(p_entity + 88) = 0LL;
  v7 = (unsigned __int64)std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_entity + 48));
  if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
    v7 = __asan_report_load8(v7);
  v8 = *(_QWORD *)v7 + 24LL;
  if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
    v7 = __asan_report_load8(*(_QWORD *)v7 + 24LL);
  v9 = (*(__int64 (__fastcall **)(unsigned __int64))v8)(v7);
  if ( v9 == 2 )
  {
    std::dynamic_pointer_cast<Monster,Creature>((const std::shared_ptr<Creature> *)(p_entity + 144));
    std::shared_ptr<Monster>::operator=(
      (std::shared_ptr<Monster> *const)(p_entity + 80),
      (std::shared_ptr<Monster> *)(p_entity + 144));
    std::shared_ptr<Monster>::~shared_ptr((std::shared_ptr<Monster> *const)(p_entity + 144));
  }
  else if ( v9 == 4 )
  {
    v10 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_entity + 48));
    if ( Creature::getOwnerEntityId(v10) )
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      Entity::findEntityInSameScene<Monster>((const Entity *const)(p_entity + 144), (uint32_t)this->creature_);
      std::shared_ptr<Monster>::operator=(
        (std::shared_ptr<Monster> *const)(p_entity + 80),
        (std::shared_ptr<Monster> *)(p_entity + 144));
      std::shared_ptr<Monster>::~shared_ptr((std::shared_ptr<Monster> *const)(p_entity + 144));
    }
  }
  if ( !std::operator==<Monster>((const std::shared_ptr<Monster> *)(p_entity + 80), 0LL) )
  {
    v14 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_entity + 80));
    if ( *(_BYTE *)(((unsigned __int64)&config_action->summon_tag >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&config_action->summon_tag >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&config_action->summon_tag);
    }
    if ( !Monster::canAddSummonMonster(v14, config_action->summon_tag) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&__r._M_weak_this._M_refcount,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "summonHandler",
        2116);
      v15 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
              (common::milog::MiLogStream *const)&__r._M_weak_this._M_refcount,
              (const char (*)[38])off_250357A0);
      v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, &config_action->summon_tag);
      v17 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_entity + 80));
      v13 = common::milog::MiLogStream::operator<<<Monster,(Monster*)0>(v16, v17);
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      goto LABEL_21;
    }
    std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_entity + 48));
    Entity::getScene((const Entity *const)(p_entity + 112));
    if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(p_entity + 112), 0LL) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&__r._M_weak_this._M_refcount,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "summonHandler",
        2122);
      v18 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
              (common::milog::MiLogStream *const)&__r._M_weak_this._M_refcount,
              (const char (*)[18])"scene_ptr is null");
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
LABEL_31:
      common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v18, this->creature_);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&__r._M_weak_this._M_refcount);
      v6 = -1;
LABEL_95:
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(p_entity + 112));
      goto LABEL_96;
    }
    if ( *(_BYTE *)(((unsigned __int64)&param->entry_ptr >> 3) + 0x7FFF8000) )
      __asan_report_load8(&param->entry_ptr);
    entry_ptr = param->entry_ptr;
    if ( !entry_ptr )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&__r._M_weak_this._M_refcount,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "summonHandler",
        2128);
      v18 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
              (common::milog::MiLogStream *const)&__r._M_weak_this._M_refcount,
              (const char (*)[18])"entry_ptr is null");
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      goto LABEL_31;
    }
    ability_data_str = proto::AbilityInvokeEntry::ability_data[abi:cxx11](entry_ptr);
    proto::AbilityActionSummon::AbilityActionSummon((proto::AbilityActionSummon *const)(p_entity + 176));
    if ( (unsigned __int8)google::protobuf::MessageLite::ParseFromString(p_entity + 176, ability_data_str) != 1 )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&__r._M_weak_this._M_refcount,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "summonHandler",
        2135);
      v19 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
              (common::milog::MiLogStream *const)&__r._M_weak_this._M_refcount,
              (const char (*)[42])"AbilityActionSummon ParseFromString fails");
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v19, this->creature_);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&__r._M_weak_this._M_refcount);
      v6 = -1;
      goto LABEL_94;
    }
    MonsterParam::MonsterParam((MonsterParam *const)(p_entity + 256));
    if ( *(_BYTE *)(((unsigned __int64)&config_action->monster_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&config_action->monster_id >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&config_action->monster_id);
    }
    *(_DWORD *)(p_entity + 256) = config_action->monster_id;
    v20 = proto::AbilityActionSummon::pos((const proto::AbilityActionSummon *const)(p_entity + 176));
    Vector3::Vector3(&v60, v20);
    *(Vector3 *)(p_entity + 268) = v60;
    v21 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_entity + 112));
    if ( !Scene::isPosValid(v21, (const Vector3 *)(p_entity + 268)) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&__r._M_weak_this._M_refcount,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "summonHandler",
        2143);
      v22 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
              (common::milog::MiLogStream *const)&__r._M_weak_this._M_refcount,
              (const char (*)[36])"summon monster pos is invalid, pos:");
      v23 = operator<<(v22, (const Vector3 *)(p_entity + 268));
      v24 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v23, (const char (*)[11])" creature:");
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
    }
    else
    {
      v25 = proto::AbilityActionSummon::rot((const proto::AbilityActionSummon *const)(p_entity + 176));
      Vector3::Vector3(&v60, v25);
      *(Vector3 *)(p_entity + 280) = v60;
      if ( !Vector3::isValidRot((const Vector3 *const)(p_entity + 280)) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&__r._M_weak_this._M_refcount,
          &common::milog::MiLogDefault::default_log_obj_,
          0x13u,
          "./src/ability/ability_comp.cpp",
          "summonHandler",
          2150);
        v26 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                (common::milog::MiLogStream *const)&__r._M_weak_this._M_refcount,
                (const char (*)[17])"invalid rot, x: ");
        v27 = common::milog::MiLogStream::operator<<<float,(float *)0>(v26, (const float *)(p_entity + 280));
        v28 = common::milog::MiLogStream::operator<<<char [5],(char *[5])0>(v27, (const char (*)[5])off_25035020);
        v29 = common::milog::MiLogStream::operator<<<float,(float *)0>(v28, (const float *)(p_entity + 284));
        v30 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v29, (const char (*)[9])" rot.z: ");
        common::milog::MiLogStream::operator<<<float,(float *)0>(v30, (const float *)(p_entity + 288));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&__r._M_weak_this._M_refcount);
        v6 = -1;
        goto LABEL_93;
      }
      v31 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_entity + 80));
      *(_DWORD *)(p_entity + 292) = Creature::getLevel(v31);
      if ( !std::operator==<ActorAbility>(&param->ability_ptr, 0LL) )
      {
        if ( *(_BYTE *)(((unsigned __int64)&config_action->is_elite >> 3) + 0x7FFF8000) != 0
          && (((unsigned __int8)config_action - 83) & 7) >= *(_BYTE *)(((unsigned __int64)&config_action->is_elite >> 3)
                                                                     + 0x7FFF8000) )
        {
          __asan_report_load1(&config_action->is_elite);
        }
        *(_BYTE *)(p_entity + 345) = config_action->is_elite;
        __for_range = &config_action->affix_list;
        __for_begin._M_current = std::vector<unsigned int>::begin(&config_action->affix_list)._M_current;
        __for_end._M_current = std::vector<unsigned int>::end(&config_action->affix_list)._M_current;
        while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(&__for_begin, &__for_end) )
        {
          v32 = __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*(&__for_begin);
          v33 = v32;
          if ( *(_BYTE *)(((unsigned __int64)v32 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v32 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v32 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v32);
          }
          *(_DWORD *)(p_entity + 32) = *v33;
          std::set<unsigned int>::insert(
            (std::set<unsigned int> *const)(p_entity + 352),
            (const std::set<unsigned int>::value_type *)(p_entity + 32));
          __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++(&__for_begin);
        }
        v34 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)param);
        *(_DWORD *)(p_entity + 292) += ActorAbility::evaluate(v34, &config_action->level_delta);
        if ( *(_BYTE *)(((unsigned __int64)&config_action->summon_tag >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&config_action->summon_tag >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&config_action->summon_tag);
        }
        *(_DWORD *)(p_entity + 400) = config_action->summon_tag;
        std::shared_ptr<Creature>::operator=<Monster>(
          (std::shared_ptr<Creature> *const)(p_entity + 328),
          (const std::shared_ptr<Monster> *)(p_entity + 80));
        if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->creature_);
        *(_DWORD *)(p_entity + 408) = Entity::getEntityId((const Entity *const)this->creature_);
        if ( *(_BYTE *)(((unsigned __int64)&config_action->born_slot_index >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&config_action->born_slot_index >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&config_action->born_slot_index);
        }
        *(_DWORD *)(p_entity + 412) = config_action->born_slot_index;
        v35 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_entity + 112));
        *(_DWORD *)(p_entity + 264) = Scene::genNewEntityId(v35, PROT_ENTITY_MONSTER);
        if ( *(_BYTE *)(((unsigned __int64)&config_action->sight_group_with_owner >> 3) + 0x7FFF8000) != 0
          && (((unsigned __int8)config_action - 6) & 7) >= *(_BYTE *)(((unsigned __int64)&config_action->sight_group_with_owner >> 3)
                                                                    + 0x7FFF8000) )
        {
          __asan_report_load1(&config_action->sight_group_with_owner);
        }
        if ( config_action->sight_group_with_owner
          && std::__shared_ptr<Creature,(__gnu_cxx::_Lock_policy)2>::operator bool((const std::__shared_ptr<Creature,(__gnu_cxx::_Lock_policy)2> *const)(p_entity + 328)) )
        {
          std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_entity + 328));
          Entity::getOrCreateSightGroup(&__r);
          std::shared_ptr<EntitySightGroup>::operator=(
            (std::shared_ptr<EntitySightGroup> *const)(p_entity + 472),
            (std::shared_ptr<EntitySightGroup> *)&__r);
          std::shared_ptr<EntitySightGroup>::~shared_ptr((std::shared_ptr<EntitySightGroup> *const)&__r);
        }
        EntityMgr::createMonster((const MonsterParam *)(p_entity + 144));
        if ( std::operator==<Monster>((const std::shared_ptr<Monster> *)(p_entity + 144), 0LL) )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&__r._M_weak_this._M_refcount,
            &common::milog::MiLogDefault::default_log_obj_,
            0x13u,
            "./src/ability/ability_comp.cpp",
            "summonHandler",
            2178);
          v37 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                  (common::milog::MiLogStream *const)&__r._M_weak_this._M_refcount,
                  (const char (*)[20])"createMonster fails");
          if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->creature_);
          common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v37, this->creature_);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&__r._M_weak_this._M_refcount);
          v6 = -1;
        }
        else
        {
          if ( std::operator!=<Creature>((const std::shared_ptr<Creature> *)(p_entity + 328), 0LL) )
          {
            v38 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_entity + 144));
            v39 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_entity + 328));
            AuthorityPeerId = Creature::getAuthorityPeerId(v39);
            Creature::setAuthorityPeerId(v38, AuthorityPeerId);
            v41 = (Entity *)std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_entity + 144));
            v42 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_entity + 328));
            GroupVisionType = Entity::getGroupVisionType((const Entity *const)v42);
            Entity::setGroupVisionType(v41, GroupVisionType);
          }
          p_alive_by_owner = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_entity + 144));
          if ( *(_BYTE *)(((unsigned __int64)&config_action->alive_by_owner >> 3) + 0x7FFF8000) != 0
            && (((unsigned __int8)config_action - 84) & 7) >= *(_BYTE *)(((unsigned __int64)&config_action->alive_by_owner >> 3)
                                                                       + 0x7FFF8000) )
          {
            p_alive_by_owner = (std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *)&config_action->alive_by_owner;
            __asan_report_load1(&config_action->alive_by_owner);
          }
          Creature::setIsAliveByOwner(p_alive_by_owner, config_action->alive_by_owner);
          v45 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_entity + 144));
          v46 = v45;
          if ( *(_BYTE *)(((unsigned __int64)v45 >> 3) + 0x7FFF8000) )
            __asan_report_load8(v45);
          v47 = *(_QWORD *)v46->baseclass_0 + 56LL;
          if ( *(_BYTE *)((v47 >> 3) + 0x7FFF8000) )
            v47 = __asan_report_load8(*(_QWORD *)v46->baseclass_0 + 56LL);
          v48 = *(void (__fastcall **)(std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, VisionContext *))v47;
          v49 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_entity + 112));
          v48(v46, v49, &VisionContext::meet_context);
          if ( *(char *)(((unsigned __int64)&config_action->has_drop >> 3) + 0x7FFF8000) < 0 )
            __asan_report_load1(&config_action->has_drop);
          if ( !config_action->has_drop )
          {
            v50 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_entity + 144));
            Monster::setIsBanAllDrop(v50, 1);
          }
          v51 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_entity + 80));
          v52 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_entity + 144));
          Monster::addSummonMonster(v51, v52);
          v6 = 0;
        }
        std::shared_ptr<Monster>::~shared_ptr((std::shared_ptr<Monster> *const)(p_entity + 144));
        goto LABEL_93;
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&__r._M_weak_this._M_refcount,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "summonHandler",
        2156);
      v24 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
              (common::milog::MiLogStream *const)&__r._M_weak_this._M_refcount,
              (const char (*)[20])"ability_ptr is null");
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
    }
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v24, this->creature_);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&__r._M_weak_this._M_refcount);
    v6 = -1;
LABEL_93:
    MonsterParam::~MonsterParam((MonsterParam *const)(p_entity + 256));
LABEL_94:
    proto::AbilityActionSummon::~AbilityActionSummon((proto::AbilityActionSummon *const)(p_entity + 176));
    goto LABEL_95;
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)&__r._M_weak_this._M_refcount,
    &common::milog::MiLogDefault::default_log_obj_,
    0x13u,
    "./src/ability/ability_comp.cpp",
    "summonHandler",
    2111);
  v11 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
          (common::milog::MiLogStream *const)&__r._M_weak_this._M_refcount,
          (const char (*)[24])off_25035760);
  v12 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_entity + 48));
  v13 = common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v11, v12);
  if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->creature_);
LABEL_21:
  common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v13, this->creature_);
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&__r._M_weak_this._M_refcount);
  v6 = -1;
LABEL_96:
  std::shared_ptr<Monster>::~shared_ptr((std::shared_ptr<Monster> *const)(p_entity + 80));
LABEL_97:
  std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(p_entity + 48));
  result = v6;
  if ( &__r.animator_comp_.entity_ == (Entity **)p_entity )
  {
    *(_QWORD *)((p_entity >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((p_entity >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((p_entity >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((p_entity >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((p_entity >> 3) + 0x7FFF804C) = 0LL;
  }
  else
  {
    *(_QWORD *)p_entity = 1172321806LL;
    *(_QWORD *)((p_entity >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((p_entity >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((p_entity >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((p_entity >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((p_entity >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((p_entity >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((p_entity >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((p_entity >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((p_entity >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((p_entity >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((p_entity >> 3) + 0x7FFF8050) = -168430091;
  }
  return result;
};

// Line 2199: range 00000000136D3F9C-00000000136D4330
int32_t __cdecl AbilityComp::addServerBuffHandler(
        AbilityComp *const this,
        const data::AddServerBuff *config_action,
        ActionParam *param)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  common::milog::MiLogStream *v6; // rcx
  int32_t v7; // r14d
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  BuffComp *BuffComp; // rcx
  common::milog::MiLogStream *v10; // rax
  int32_t result; // eax
  int buff_time_ms; // [rsp+2Ch] [rbp-94h]
  common::milog::MiLogStream v13; // [rsp+30h] [rbp-90h] BYREF
  char v14[112]; // [rsp+50h] [rbp-70h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 16 15 avatar_ptr:2200";
  *(_QWORD *)(v3 + 16) = AbilityComp::addServerBuffHandler;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202178560;
  std::dynamic_pointer_cast<Avatar,Creature>((const std::shared_ptr<Creature> *)(v3 + 32));
  if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v3 + 32), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v13,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "addServerBuffHandler",
      2203);
    v6 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(&v13, (const char (*)[19])"avatar_ptr is null");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
LABEL_7:
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v6, this->creature_);
    common::milog::MiLogStream::~MiLogStream(&v13);
    v7 = -1;
    goto LABEL_17;
  }
  if ( *(_BYTE *)(((unsigned __int64)&config_action->time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)config_action - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_action->time >> 3)
                                                                  + 0x7FFF8000) )
  {
    __asan_report_load4(&config_action->time);
  }
  buff_time_ms = (int)(float)(1000.0 * config_action->time);
  v8 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
  BuffComp = Avatar::getBuffComp(v8);
  if ( *(_BYTE *)(((unsigned __int64)&config_action->sbuff_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&config_action->sbuff_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&config_action->sbuff_id);
  }
  if ( BuffComp::addBuff(BuffComp, config_action->sbuff_id, buff_time_ms) )
  {
    common::milog::MiLogStream::create(
      &v13,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "addServerBuffHandler",
      2209);
    v10 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
            &v13,
            (const char (*)[25])"addBuff fails, sbuff_id:");
    v6 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, &config_action->sbuff_id);
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    goto LABEL_7;
  }
  v7 = 0;
LABEL_17:
  std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 32));
  result = v7;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2217: range 00000000136D4332-00000000136D4953
int32_t __cdecl AbilityComp::removeServerBuffHandler(
        AbilityComp *const this,
        const data::RemoveServerBuff *config_action,
        ActionParam *param)
{
  int32_t v3; // r14d
  unsigned __int64 v4; // r12
  __int64 v5; // rax
  _DWORD *v6; // r13
  common::milog::MiLogStream *v7; // rcx
  unsigned __int64 v8; // rax
  unsigned __int64 v9; // rdx
  Player *v10; // rax
  PlayerAvatarComp *AvatarComp; // rcx
  char v12; // al
  Player *v13; // rax
  PlayerAvatarComp *v14; // rcx
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rcx
  int v17; // r15d
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // rax
  BuffComp *BuffComp; // rcx
  common::milog::MiLogStream *v20; // rax
  int32_t result; // eax
  common::milog::MiLogStream v22; // [rsp+20h] [rbp-B0h] BYREF
  char v23[144]; // [rsp+40h] [rbp-90h] BYREF

  v4 = (unsigned __int64)v23;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(96LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "2 32 16 15 avatar_ptr:2218 64 16 15 player_ptr:2226";
  *(_QWORD *)(v4 + 16) = AbilityComp::removeServerBuffHandler;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -219021312;
  v6[536862722] = -202178560;
  std::dynamic_pointer_cast<Avatar,Creature>((const std::shared_ptr<Creature> *)(v4 + 32));
  if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v4 + 32), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v22,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "removeServerBuffHandler",
      2221);
    v7 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(&v22, (const char (*)[19])"avatar_ptr is null");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
LABEL_7:
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v7, this->creature_);
    common::milog::MiLogStream::~MiLogStream(&v22);
    v3 = -1;
    goto LABEL_38;
  }
  if ( *(_BYTE *)(((unsigned __int64)&config_action->is_team_buff >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)config_action - 116) & 7) >= *(_BYTE *)(((unsigned __int64)&config_action->is_team_buff >> 3)
                                                                + 0x7FFF8000) )
  {
    __asan_report_load1(&config_action->is_team_buff);
  }
  if ( !config_action->is_team_buff )
  {
    v18 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
    BuffComp = Avatar::getBuffComp(v18);
    if ( *(_BYTE *)(((unsigned __int64)&config_action->sbuff_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&config_action->sbuff_id >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&config_action->sbuff_id);
    }
    if ( BuffComp::delBuff(BuffComp, config_action->sbuff_id) )
    {
      common::milog::MiLogStream::create(
        &v22,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "removeServerBuffHandler",
        2240);
      v20 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
              &v22,
              (const char (*)[25])"delBuff fails, sbuff_id:");
      v7 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v20, &config_action->sbuff_id);
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      goto LABEL_7;
    }
    goto LABEL_37;
  }
  v8 = (unsigned __int64)std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
  if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
    v8 = __asan_report_load8(v8);
  v9 = *(_QWORD *)v8 + 152LL;
  if ( *(_BYTE *)((v9 >> 3) + 0x7FFF8000) )
    v8 = __asan_report_load8(*(_QWORD *)v8 + 152LL);
  (*(void (__fastcall **)(unsigned __int64, unsigned __int64))v9)(v4 + 64, v8);
  if ( !std::operator!=<Player>((const std::shared_ptr<Player> *)(v4 + 64), 0LL) )
    goto LABEL_20;
  v10 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
  AvatarComp = Player::getAvatarComp(v10);
  if ( *(_BYTE *)(((unsigned __int64)&config_action->sbuff_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&config_action->sbuff_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&config_action->sbuff_id);
  }
  if ( PlayerAvatarComp::isHasTeamBuff(AvatarComp, config_action->sbuff_id) )
    v12 = 1;
  else
LABEL_20:
    v12 = 0;
  if ( !v12 )
    goto LABEL_28;
  v13 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
  v14 = Player::getAvatarComp(v13);
  if ( *(_BYTE *)(((unsigned __int64)&config_action->sbuff_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&config_action->sbuff_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&config_action->sbuff_id);
  }
  if ( PlayerAvatarComp::delTeamBuff(v14, config_action->sbuff_id) )
  {
    common::milog::MiLogStream::create(
      &v22,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "removeServerBuffHandler",
      2231);
    v15 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
            &v22,
            (const char (*)[25])"delBuff fails, sbuff_id:");
    v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, &config_action->sbuff_id);
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v16, this->creature_);
    common::milog::MiLogStream::~MiLogStream(&v22);
    v3 = -1;
    v17 = 0;
  }
  else
  {
LABEL_28:
    v17 = 1;
  }
  std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v4 + 64));
  if ( v17 == 1 )
LABEL_37:
    v3 = 0;
LABEL_38:
  std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 32));
  result = v3;
  if ( v23 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 2249: range 00000000136D4954-00000000136D5116
int32_t __cdecl AbilityComp::modifyAvatarSkillCDHandler(
        AbilityComp *const this,
        const data::ModifyAvatarSkillCD *config_action,
        ActionParam *param)
{
  __m128i v3; // xmm0
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rcx
  int32_t v8; // r14d
  common::milog::MiLogStream *v9; // rcx
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  SkillComp *SkillComp; // rcx
  __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int> >::reference v12; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  uint32_t v14; // eax
  ActorAbility *v15; // r14
  ActorAbility *v16; // r14
  const std::shared_ptr<Skill> *v17; // rax
  Skill *v18; // rax
  int32_t result; // eax
  float cd_delta; // [rsp+24h] [rbp-14Ch]
  float cd_ratio; // [rsp+28h] [rbp-148h]
  std::vector<unsigned int>::const_iterator __for_begin; // [rsp+30h] [rbp-140h] BYREF
  std::vector<unsigned int>::const_iterator __for_end; // [rsp+38h] [rbp-138h] BYREF
  const std::vector<unsigned int> *__for_range; // [rsp+40h] [rbp-130h]
  std::vector<std::shared_ptr<Skill>> *__for_range_0; // [rsp+48h] [rbp-128h]
  std::shared_ptr<Creature> p_global_value_source_ptr; // [rsp+50h] [rbp-120h] BYREF
  common::milog::MiLogStream v28; // [rsp+60h] [rbp-110h] BYREF
  char v29[240]; // [rsp+80h] [rbp-F0h] BYREF

  v4 = (unsigned __int64)v29;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(192LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 32 16 15 avatar_ptr:2250 64 16 16 ability_ptr:2256 96 16 14 skill_ptr:2278 128 24 14 skill_vec:2262";
  *(_QWORD *)(v4 + 16) = AbilityComp::modifyAvatarSkillCDHandler;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -219021312;
  v6[536862722] = -219021312;
  v6[536862723] = -219021312;
  v6[536862724] = -218103808;
  v6[536862725] = -202116109;
  std::dynamic_pointer_cast<Avatar,Creature>((const std::shared_ptr<Creature> *)(v4 + 32));
  if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v4 + 32), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v28,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "modifyAvatarSkillCDHandler",
      2253);
    v7 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(&v28, (const char (*)[19])"avatar_ptr is null");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v7, this->creature_);
    common::milog::MiLogStream::~MiLogStream(&v28);
    v8 = -1;
  }
  else
  {
    std::shared_ptr<ActorAbility>::shared_ptr((std::shared_ptr<ActorAbility> *const)(v4 + 64), &param->ability_ptr);
    if ( std::operator==<ActorAbility>((const std::shared_ptr<ActorAbility> *)(v4 + 64), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v28,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "modifyAvatarSkillCDHandler",
        2259);
      v9 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
             &v28,
             (const char (*)[20])"ability_ptr is null");
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v9, this->creature_);
      common::milog::MiLogStream::~MiLogStream(&v28);
      v8 = -1;
    }
    else
    {
      std::vector<std::shared_ptr<Skill>>::vector((std::vector<std::shared_ptr<Skill>> *const)(v4 + 128));
      if ( *(_BYTE *)(((unsigned __int64)&config_action->skill_id >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&config_action->skill_id >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&config_action->skill_id);
      }
      if ( config_action->skill_id )
      {
        v10 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
        SkillComp = Avatar::getSkillComp(v10);
        if ( *(_BYTE *)(((unsigned __int64)&config_action->skill_id >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&config_action->skill_id >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&config_action->skill_id);
        }
        SkillComp::getSkillsOnSameSlot(
          SkillComp,
          config_action->skill_id,
          (std::vector<std::shared_ptr<Skill>> *)(v4 + 128));
      }
      __for_range = &config_action->skill_slot;
      __for_begin._M_current = std::vector<unsigned int>::begin(&config_action->skill_slot)._M_current;
      __for_end._M_current = std::vector<unsigned int>::end(&config_action->skill_slot)._M_current;
      while ( __gnu_cxx::operator!=<unsigned int const*,std::vector<unsigned int>>(&__for_begin, &__for_end) )
      {
        v12 = __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator*(&__for_begin);
        if ( *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v12 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v12);
        }
        v13 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
        v14 = (unsigned int)Avatar::getSkillComp(v13);
        SkillComp::findSkillBySlot((const SkillComp *const)(v4 + 96), v14);
        if ( std::operator!=<Skill>((const std::shared_ptr<Skill> *)(v4 + 96), 0LL) )
          std::vector<std::shared_ptr<Skill>>::push_back(
            (std::vector<std::shared_ptr<Skill>> *const)(v4 + 128),
            (const std::vector<std::shared_ptr<Skill>>::value_type *)(v4 + 96));
        std::shared_ptr<Skill>::~shared_ptr((std::shared_ptr<Skill> *const)(v4 + 96));
        __gnu_cxx::__normal_iterator<unsigned int const*,std::vector<unsigned int>>::operator++(&__for_begin);
      }
      v15 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
      std::shared_ptr<DieCreatureRecord>::shared_ptr((std::shared_ptr<DieCreatureRecord> *const)(v4 + 96), 0LL);
      std::shared_ptr<Creature>::shared_ptr(&p_global_value_source_ptr, 0LL);
      *(float *)v3.m128i_i32 = ActorAbility::evaluate(
                                 v15,
                                 &config_action->cd_delta,
                                 &p_global_value_source_ptr,
                                 (DieCreatureRecordPtr *)(v4 + 96));
      cd_delta = COERCE_FLOAT(_mm_cvtsi128_si32(v3));
      std::shared_ptr<Creature>::~shared_ptr(&p_global_value_source_ptr);
      std::shared_ptr<DieCreatureRecord>::~shared_ptr((std::shared_ptr<DieCreatureRecord> *const)(v4 + 96));
      v16 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
      std::shared_ptr<DieCreatureRecord>::shared_ptr((std::shared_ptr<DieCreatureRecord> *const)(v4 + 96), 0LL);
      std::shared_ptr<Creature>::shared_ptr(&p_global_value_source_ptr, 0LL);
      *(float *)v3.m128i_i32 = ActorAbility::evaluate(
                                 v16,
                                 &config_action->cd_ratio,
                                 &p_global_value_source_ptr,
                                 (DieCreatureRecordPtr *)(v4 + 96));
      cd_ratio = COERCE_FLOAT(_mm_cvtsi128_si32(v3));
      std::shared_ptr<Creature>::~shared_ptr(&p_global_value_source_ptr);
      std::shared_ptr<DieCreatureRecord>::~shared_ptr((std::shared_ptr<DieCreatureRecord> *const)(v4 + 96));
      __for_range_0 = (std::vector<std::shared_ptr<Skill>> *)(v4 + 128);
      __for_begin._M_current = (const unsigned int *)std::vector<std::shared_ptr<Skill>>::begin((std::vector<std::shared_ptr<Skill>> *const)(v4 + 128))._M_current;
      __for_end._M_current = (const unsigned int *)std::vector<std::shared_ptr<Skill>>::end(__for_range_0)._M_current;
      while ( __gnu_cxx::operator!=<std::shared_ptr<Skill> *,std::vector<std::shared_ptr<Skill>>>(
                (const __gnu_cxx::__normal_iterator<std::shared_ptr<Skill>*,std::vector<std::shared_ptr<Skill>> > *)&__for_begin,
                (const __gnu_cxx::__normal_iterator<std::shared_ptr<Skill>*,std::vector<std::shared_ptr<Skill>> > *)&__for_end) )
      {
        v17 = __gnu_cxx::__normal_iterator<std::shared_ptr<Skill> *,std::vector<std::shared_ptr<Skill>>>::operator*((const __gnu_cxx::__normal_iterator<std::shared_ptr<Skill>*,std::vector<std::shared_ptr<Skill>> > *const)&__for_begin);
        std::shared_ptr<Skill>::shared_ptr((std::shared_ptr<Skill> *const)(v4 + 96), v17);
        if ( std::operator!=<Skill>(0LL, (const std::shared_ptr<Skill> *)(v4 + 96)) )
        {
          v18 = std::__shared_ptr_access<Skill,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Skill,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
          Skill::changeCurrentSkillCdTime(v18, cd_delta, cd_ratio);
        }
        std::shared_ptr<Skill>::~shared_ptr((std::shared_ptr<Skill> *const)(v4 + 96));
        __gnu_cxx::__normal_iterator<std::shared_ptr<Skill> *,std::vector<std::shared_ptr<Skill>>>::operator++((__gnu_cxx::__normal_iterator<std::shared_ptr<Skill>*,std::vector<std::shared_ptr<Skill>> > *const)&__for_begin);
      }
      v8 = 0;
      std::vector<std::shared_ptr<Skill>>::~vector((std::vector<std::shared_ptr<Skill>> *const)(v4 + 128));
    }
    std::shared_ptr<ActorAbility>::~shared_ptr((std::shared_ptr<ActorAbility> *const)(v4 + 64));
  }
  std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 32));
  result = v8;
  if ( v29 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2290: range 00000000136D5118-00000000136D5926
int32_t __cdecl AbilityComp::useItemHandler(
        AbilityComp *const this,
        const data::UseItem *config_action,
        ActionParam *param)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rcx
  int32_t v7; // r14d
  common::milog::MiLogStream *v8; // rcx
  unsigned __int64 v9; // rax
  unsigned __int64 v10; // rdx
  common::milog::MiLogStream *v11; // rcx
  Player *v12; // rax
  PlayerItemComp *ItemComp; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rcx
  const unsigned int *v19; // rax
  _DWORD *v20; // rdx
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  Player *v27; // rax
  PlayerItemComp *v28; // rax
  int32_t result; // eax
  common::milog::MiLogStream v31; // [rsp+20h] [rbp-110h] BYREF
  char v32[240]; // [rsp+40h] [rbp-F0h] BYREF

  v3 = (unsigned __int64)v32;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 48 4 13 have_num:2311 64 8 11 reason:2324 96 16 15 avatar_ptr:2296 128 16 15 player_ptr:2302 1"
                        "60 16 15 item_param:2308";
  *(_QWORD *)(v3 + 16) = AbilityComp::useItemHandler;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218959360;
  v5[536862723] = -219021312;
  v5[536862724] = -219021312;
  v5[536862725] = -202178560;
  if ( std::operator!=<Creature,Creature>(&param->source_ptr, &param->target_ptr) )
  {
    common::milog::MiLogStream::create(
      &v31,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "useItemHandler",
      2293);
    v6 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
           &v31,
           (const char (*)[41])"useitem need source_ptr equal target_ptr");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v6, this->creature_);
    common::milog::MiLogStream::~MiLogStream(&v31);
    v7 = -1;
  }
  else
  {
    std::dynamic_pointer_cast<Avatar,Creature>((const std::shared_ptr<Creature> *)(v3 + 96));
    if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v3 + 96), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v31,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "useItemHandler",
        2299);
      v8 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
             &v31,
             (const char (*)[19])"avatar_ptr is null");
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v8, this->creature_);
      common::milog::MiLogStream::~MiLogStream(&v31);
      v7 = -1;
    }
    else
    {
      v9 = (unsigned __int64)std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
      if ( *(_BYTE *)((v9 >> 3) + 0x7FFF8000) )
        v9 = __asan_report_load8(v9);
      v10 = *(_QWORD *)v9 + 152LL;
      if ( *(_BYTE *)((v10 >> 3) + 0x7FFF8000) )
        v9 = __asan_report_load8(*(_QWORD *)v9 + 152LL);
      (*(void (__fastcall **)(unsigned __int64, unsigned __int64))v10)(v3 + 128, v9);
      if ( std::operator==<Player>((const std::shared_ptr<Player> *)(v3 + 128), 0LL) )
      {
        common::milog::MiLogStream::create(
          &v31,
          &common::milog::MiLogDefault::default_log_obj_,
          0x13u,
          "./src/ability/ability_comp.cpp",
          "useItemHandler",
          2305);
        v11 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                &v31,
                (const char (*)[19])"player_ptr is null");
        if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->creature_);
        common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v11, this->creature_);
        common::milog::MiLogStream::~MiLogStream(&v31);
        v7 = -1;
      }
      else
      {
        *(_DWORD *)(v3 + 160) = 0;
        *(_DWORD *)(v3 + 164) = 0;
        *(_DWORD *)(v3 + 168) = 0;
        *(_DWORD *)(v3 + 172) = 0;
        if ( *(_BYTE *)(((unsigned __int64)&config_action->item_id >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&config_action->item_id >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&config_action->item_id);
        }
        *(_DWORD *)(v3 + 160) = config_action->item_id;
        if ( *(_BYTE *)(((unsigned __int64)&config_action->item_num >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)config_action - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_action->item_num >> 3)
                                                                        + 0x7FFF8000) )
        {
          __asan_report_load4(&config_action->item_num);
        }
        *(_DWORD *)(v3 + 164) = config_action->item_num;
        v12 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
        ItemComp = Player::getItemComp(v12);
        *(_DWORD *)(v3 + 48) = PlayerItemComp::getPackMaterialCount(ItemComp, *(_DWORD *)(v3 + 160));
        if ( *(_DWORD *)(v3 + 164) > *(_DWORD *)(v3 + 48) )
        {
          common::milog::MiLogStream::create(
            &v31,
            &common::milog::MiLogDefault::default_log_obj_,
            0x13u,
            "./src/ability/ability_comp.cpp",
            "useItemHandler",
            2315);
          v14 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(&v31, (const char (*)[18])off_25035C40);
          v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, &config_action->item_id);
          v16 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v15, (const char (*)[7])", num:");
          v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, &config_action->item_num);
          v18 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                  v17,
                  (const char (*)[14])", not enough.");
          if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->creature_);
          common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v18, this->creature_);
          common::milog::MiLogStream::~MiLogStream(&v31);
        }
        v19 = std::min<unsigned int>((const unsigned int *)(v3 + 48), (const unsigned int *)(v3 + 164));
        v20 = v19;
        if ( *(_BYTE *)(((unsigned __int64)v19 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v19 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v19 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v19);
        }
        *(_DWORD *)(v3 + 164) = *v20;
        if ( *(_DWORD *)(v3 + 164) )
        {
          SubItemReason::SubItemReason((SubItemReason *const)(v3 + 64), ACTION_REASON_ABILITY);
          v27 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
          v28 = Player::getItemComp(v27);
          v7 = PlayerItemComp::subItem(v28, (const ItemParam *)(v3 + 160), (const SubItemReason *)(v3 + 64));
        }
        else
        {
          common::milog::MiLogStream::create(
            &v31,
            &common::milog::MiLogDefault::default_log_obj_,
            0x13u,
            "./src/ability/ability_comp.cpp",
            "useItemHandler",
            2321);
          v21 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(&v31, (const char (*)[18])off_25035C40);
          v22 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v21, &config_action->item_id);
          v23 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v22, (const char (*)[7])", num:");
          v24 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v23, &config_action->item_num);
          v25 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v24, (const char (*)[11])" have_num:");
          v26 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v25,
                  (const unsigned int *)(v3 + 48));
          common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v26, (const char (*)[14])", not enough.");
          common::milog::MiLogStream::~MiLogStream(&v31);
          v7 = 0;
        }
      }
      std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v3 + 128));
    }
    std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 96));
  }
  result = v7;
  if ( v32 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2329: range 00000000136D5927-00000000136D6A18
float __cdecl calcLoseHpAmount(const data::LoseHP *config_action, ActionParam *param)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  __m128i v5; // xmm0
  int v6; // r14d
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  __m128i v9; // xmm0
  ActorAbility *v10; // r14
  float *v11; // rax
  float *v12; // rdx
  ActorAbility *v13; // r14
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  float Prop; // xmm0_4
  float v16; // xmm1_4
  ActorAbility *v17; // r14
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // rax
  float v19; // xmm0_4
  float v20; // xmm1_4
  int v21; // r14d
  ActorAbility *v22; // r14
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v23; // rax
  float v24; // xmm0_4
  float v25; // xmm1_4
  ActorAbility *v26; // r14
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v27; // rax
  float v28; // xmm0_4
  float v29; // xmm1_4
  ActorAbility *v30; // r14
  const float *v32; // rax
  unsigned int *v33; // rdx
  __m128i v34; // xmm0
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v35; // rax
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v36; // rax
  float *v37; // rax
  float *v38; // rdx
  const float *v39; // rax
  _DWORD *v40; // rdx
  const float *v41; // rax
  _DWORD *v42; // rdx
  float result; // xmm0_4
  float v44; // [rsp+Ch] [rbp-184h]
  float CurHp; // [rsp+Ch] [rbp-184h]
  float v46; // [rsp+24h] [rbp-16Ch] BYREF
  float v47; // [rsp+28h] [rbp-168h] BYREF
  float __a; // [rsp+2Ch] [rbp-164h] BYREF
  float __b; // [rsp+30h] [rbp-160h] BYREF
  float amount_by_caster_max_hpratio; // [rsp+34h] [rbp-15Ch]
  float amount_by_caster_attack_ratio; // [rsp+38h] [rbp-158h]
  float amount_by_target_max_hpratio_0; // [rsp+3Ch] [rbp-154h]
  float amount_by_target_current_hpratio_0; // [rsp+40h] [rbp-150h]
  float amount_by_target_max_hpratio; // [rsp+44h] [rbp-14Ch]
  float amount_by_target_current_hpratio; // [rsp+48h] [rbp-148h]
  float max_hp; // [rsp+4Ch] [rbp-144h]
  std::shared_ptr<Creature> p_global_value_source_ptr; // [rsp+50h] [rbp-140h] BYREF
  common::milog::MiLogStream v58; // [rsp+60h] [rbp-130h] BYREF
  char v59[272]; // [rsp+80h] [rbp-110h] BYREF

  v2 = (unsigned __int64)v59;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(224LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "7 48 4 14 hp_amount:2330 64 4 19 hp_limbo_ratio:2331 80 4 18 max_hp_amount:2412 96 16 16 ability"
                        "_ptr:2332 128 16 15 caster_ptr:2367 160 16 15 target_ptr:2387 192 16 15 target_ptr:2339";
  *(_QWORD *)(v2 + 16) = calcLoseHpAmount;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -234556924;
  v4[536862723] = -219021312;
  v4[536862724] = -219021312;
  v4[536862725] = -219021312;
  v4[536862726] = -202178560;
  *(_DWORD *)(v2 + 48) = 0;
  v5 = 0LL;
  *(_DWORD *)(v2 + 64) = 0;
  std::shared_ptr<ActorAbility>::shared_ptr((std::shared_ptr<ActorAbility> *const)(v2 + 96), &param->ability_ptr);
  if ( std::operator==<ActorAbility>((const std::shared_ptr<ActorAbility> *)(v2 + 96), 0LL) )
  {
    if ( *(char *)(((unsigned __int64)&config_action->amount.is_json_loaded >> 3) + 0x7FFF8000) < 0 )
      __asan_report_load1(&config_action->amount.is_json_loaded);
    if ( config_action->amount.is_json_loaded )
    {
      if ( *(_BYTE *)(((unsigned __int64)&config_action->amount >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&config_action->amount >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&config_action->amount);
      }
      *(float *)(v2 + 48) = *(float *)(v2 + 48) + config_action->amount.fixed_value;
    }
    std::shared_ptr<Creature>::shared_ptr((std::shared_ptr<Creature> *const)(v2 + 192), &param->target_ptr);
    if ( std::operator==<Creature>((const std::shared_ptr<Creature> *)(v2 + 192), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v58,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "calcLoseHpAmount",
        2342);
      common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(&v58, (const char (*)[19])"target_ptr is null");
      common::milog::MiLogStream::~MiLogStream(&v58);
      v44 = *(float *)(v2 + 48);
      v6 = 0;
    }
    else
    {
      if ( *(char *)(((unsigned __int64)&config_action->amount_by_target_max_hpratio.is_json_loaded >> 3) + 0x7FFF8000) < 0 )
        __asan_report_load1(&config_action->amount_by_target_max_hpratio.is_json_loaded);
      if ( config_action->amount_by_target_max_hpratio.is_json_loaded )
      {
        if ( *(_BYTE *)(((unsigned __int64)&config_action->amount_by_target_max_hpratio >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&config_action->amount_by_target_max_hpratio >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&config_action->amount_by_target_max_hpratio);
        }
        amount_by_target_max_hpratio = config_action->amount_by_target_max_hpratio.fixed_value;
        v7 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 192));
        *(float *)(v2 + 48) = *(float *)(v2 + 48)
                            + (float)(Creature::getProp(v7, FIGHT_PROP_MAX_HP) * amount_by_target_max_hpratio);
      }
      if ( *(char *)(((unsigned __int64)&config_action->amount_by_target_current_hpratio.is_json_loaded >> 3)
                   + 0x7FFF8000) < 0 )
        __asan_report_load1(&config_action->amount_by_target_current_hpratio.is_json_loaded);
      if ( config_action->amount_by_target_current_hpratio.is_json_loaded )
      {
        if ( *(_BYTE *)(((unsigned __int64)&config_action->amount_by_target_current_hpratio >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&config_action->amount_by_target_current_hpratio >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&config_action->amount_by_target_current_hpratio);
        }
        amount_by_target_current_hpratio = config_action->amount_by_target_current_hpratio.fixed_value;
        v8 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 192));
        *(float *)(v2 + 48) = *(float *)(v2 + 48)
                            + (float)(Creature::getProp(v8, FIGHT_PROP_CUR_HP) * amount_by_target_current_hpratio);
      }
      if ( *(char *)(((unsigned __int64)&config_action->limbo_by_target_max_hpratio.is_json_loaded >> 3) + 0x7FFF8000) < 0 )
        __asan_report_load1(&config_action->limbo_by_target_max_hpratio.is_json_loaded);
      if ( config_action->limbo_by_target_max_hpratio.is_json_loaded )
      {
        if ( *(_BYTE *)(((unsigned __int64)&config_action->limbo_by_target_max_hpratio >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&config_action->limbo_by_target_max_hpratio >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&config_action->limbo_by_target_max_hpratio);
        }
        *(float *)(v2 + 64) = config_action->limbo_by_target_max_hpratio.fixed_value;
      }
      v6 = 1;
    }
    std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v2 + 192));
    if ( v6 == 1 )
    {
LABEL_66:
      if ( *(float *)(v2 + 64) > 0.00000011920929 && std::operator!=<Creature>(0LL, &param->target_ptr) )
      {
        __b = 1.0;
        __a = 0.0;
        v32 = std::clamp<float>((const float *)(v2 + 64), &__a, &__b);
        v33 = (unsigned int *)v32;
        if ( *(_BYTE *)(((unsigned __int64)v32 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v32 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v32 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v32);
        }
        v34 = (__m128i)*v33;
        *(_DWORD *)(v2 + 64) = v34.m128i_i32[0];
        v35 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)&param->target_ptr);
        *(float *)v34.m128i_i32 = Creature::getMaxHp(v35);
        max_hp = COERCE_FLOAT(_mm_cvtsi128_si32(v34));
        v36 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)&param->target_ptr);
        CurHp = Creature::getCurHp(v36);
        v47 = *(float *)(v2 + 64) * max_hp;
        v46 = 1.0;
        v37 = (float *)std::max<float>(&v46, &v47);
        v38 = v37;
        if ( *(_BYTE *)(((unsigned __int64)v37 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v37 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v37 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v37);
        }
        __b = CurHp - *v38;
        __a = 0.0;
        v39 = std::max<float>(&__a, &__b);
        v40 = v39;
        if ( *(_BYTE *)(((unsigned __int64)v39 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v39 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v39 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v39);
        }
        *(_DWORD *)(v2 + 80) = *v40;
        v41 = std::min<float>((const float *)(v2 + 48), (const float *)(v2 + 80));
        v42 = v41;
        if ( *(_BYTE *)(((unsigned __int64)v41 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v41 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v41 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v41);
        }
        *(_DWORD *)(v2 + 48) = *v42;
      }
      if ( *(float *)(v2 + 48) < 0.0 )
        *(_DWORD *)(v2 + 48) = 0;
      v44 = *(float *)(v2 + 48);
    }
  }
  else
  {
    if ( *(char *)(((unsigned __int64)&config_action->amount.is_json_loaded >> 3) + 0x7FFF8000) < 0 )
      __asan_report_load1(&config_action->amount.is_json_loaded);
    if ( config_action->amount.is_json_loaded )
    {
      v9 = 0LL;
      __b = 0.0;
      v10 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
      std::shared_ptr<DieCreatureRecord>::shared_ptr((std::shared_ptr<DieCreatureRecord> *const)(v2 + 192), 0LL);
      std::shared_ptr<Creature>::shared_ptr(&p_global_value_source_ptr, 0LL);
      *(float *)v9.m128i_i32 = ActorAbility::evaluate(
                                 v10,
                                 &config_action->amount,
                                 &p_global_value_source_ptr,
                                 (DieCreatureRecordPtr *)(v2 + 192));
      LODWORD(__a) = _mm_cvtsi128_si32(v9);
      v11 = (float *)std::max<float>(&__a, &__b);
      v12 = v11;
      if ( *(_BYTE *)(((unsigned __int64)v11 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v11 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v11 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v11);
      }
      v5 = (__m128i)*(unsigned int *)(v2 + 48);
      *(float *)(v2 + 48) = *(float *)v5.m128i_i32 + *v12;
      std::shared_ptr<Creature>::~shared_ptr(&p_global_value_source_ptr);
      std::shared_ptr<DieCreatureRecord>::~shared_ptr((std::shared_ptr<DieCreatureRecord> *const)(v2 + 192));
    }
    std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
    ActorAbility::getCaster((ActorAbility *const)(v2 + 128));
    if ( std::operator!=<Creature>((const std::shared_ptr<Creature> *)(v2 + 128), 0LL) )
    {
      if ( *(char *)(((unsigned __int64)&config_action->amount_by_caster_max_hpratio.is_json_loaded >> 3) + 0x7FFF8000) < 0 )
        __asan_report_load1(&config_action->amount_by_caster_max_hpratio.is_json_loaded);
      if ( config_action->amount_by_caster_max_hpratio.is_json_loaded )
      {
        v13 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
        std::shared_ptr<DieCreatureRecord>::shared_ptr((std::shared_ptr<DieCreatureRecord> *const)(v2 + 192), 0LL);
        std::shared_ptr<Creature>::shared_ptr(&p_global_value_source_ptr, 0LL);
        *(float *)v5.m128i_i32 = ActorAbility::evaluate(
                                   v13,
                                   &config_action->amount_by_caster_max_hpratio,
                                   &p_global_value_source_ptr,
                                   (DieCreatureRecordPtr *)(v2 + 192));
        amount_by_caster_max_hpratio = COERCE_FLOAT(_mm_cvtsi128_si32(v5));
        std::shared_ptr<Creature>::~shared_ptr(&p_global_value_source_ptr);
        std::shared_ptr<DieCreatureRecord>::~shared_ptr((std::shared_ptr<DieCreatureRecord> *const)(v2 + 192));
        v14 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 128));
        Prop = Creature::getProp(v14, FIGHT_PROP_MAX_HP);
        v16 = Prop * amount_by_caster_max_hpratio;
        v5 = (__m128i)*(unsigned int *)(v2 + 48);
        *(float *)(v2 + 48) = *(float *)v5.m128i_i32 + v16;
      }
      if ( *(char *)(((unsigned __int64)&config_action->amount_by_caster_attack_ratio.is_json_loaded >> 3) + 0x7FFF8000) < 0 )
        __asan_report_load1(&config_action->amount_by_caster_attack_ratio.is_json_loaded);
      if ( config_action->amount_by_caster_attack_ratio.is_json_loaded )
      {
        v17 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
        std::shared_ptr<DieCreatureRecord>::shared_ptr((std::shared_ptr<DieCreatureRecord> *const)(v2 + 192), 0LL);
        std::shared_ptr<Creature>::shared_ptr(&p_global_value_source_ptr, 0LL);
        *(float *)v5.m128i_i32 = ActorAbility::evaluate(
                                   v17,
                                   &config_action->amount_by_caster_attack_ratio,
                                   &p_global_value_source_ptr,
                                   (DieCreatureRecordPtr *)(v2 + 192));
        amount_by_caster_attack_ratio = COERCE_FLOAT(_mm_cvtsi128_si32(v5));
        std::shared_ptr<Creature>::~shared_ptr(&p_global_value_source_ptr);
        std::shared_ptr<DieCreatureRecord>::~shared_ptr((std::shared_ptr<DieCreatureRecord> *const)(v2 + 192));
        v18 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 128));
        v19 = Creature::getProp(v18, FIGHT_PROP_CUR_ATTACK);
        v20 = v19 * amount_by_caster_attack_ratio;
        v5 = (__m128i)*(unsigned int *)(v2 + 48);
        *(float *)(v2 + 48) = *(float *)v5.m128i_i32 + v20;
      }
    }
    else
    {
      common::milog::MiLogStream::create(
        &v58,
        &common::milog::MiLogDefault::default_log_obj_,
        0x11u,
        "./src/ability/ability_comp.cpp",
        "calcLoseHpAmount",
        2384);
      common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v58, (const char (*)[15])"caster is null");
      common::milog::MiLogStream::~MiLogStream(&v58);
    }
    std::shared_ptr<Creature>::shared_ptr((std::shared_ptr<Creature> *const)(v2 + 160), &param->target_ptr);
    if ( std::operator==<Creature>((const std::shared_ptr<Creature> *)(v2 + 160), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v58,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "calcLoseHpAmount",
        2390);
      common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(&v58, (const char (*)[19])"target_ptr is null");
      common::milog::MiLogStream::~MiLogStream(&v58);
      v44 = *(float *)(v2 + 48);
      v21 = 0;
    }
    else
    {
      if ( *(char *)(((unsigned __int64)&config_action->amount_by_target_max_hpratio.is_json_loaded >> 3) + 0x7FFF8000) < 0 )
        __asan_report_load1(&config_action->amount_by_target_max_hpratio.is_json_loaded);
      if ( config_action->amount_by_target_max_hpratio.is_json_loaded )
      {
        v22 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
        std::shared_ptr<DieCreatureRecord>::shared_ptr((std::shared_ptr<DieCreatureRecord> *const)(v2 + 192), 0LL);
        std::shared_ptr<Creature>::shared_ptr(&p_global_value_source_ptr, 0LL);
        *(float *)v5.m128i_i32 = ActorAbility::evaluate(
                                   v22,
                                   &config_action->amount_by_target_max_hpratio,
                                   &p_global_value_source_ptr,
                                   (DieCreatureRecordPtr *)(v2 + 192));
        amount_by_target_max_hpratio_0 = COERCE_FLOAT(_mm_cvtsi128_si32(v5));
        std::shared_ptr<Creature>::~shared_ptr(&p_global_value_source_ptr);
        std::shared_ptr<DieCreatureRecord>::~shared_ptr((std::shared_ptr<DieCreatureRecord> *const)(v2 + 192));
        v23 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 160));
        v24 = Creature::getProp(v23, FIGHT_PROP_MAX_HP);
        v25 = v24 * amount_by_target_max_hpratio_0;
        v5 = (__m128i)*(unsigned int *)(v2 + 48);
        *(float *)(v2 + 48) = *(float *)v5.m128i_i32 + v25;
      }
      if ( *(char *)(((unsigned __int64)&config_action->amount_by_target_current_hpratio.is_json_loaded >> 3)
                   + 0x7FFF8000) < 0 )
        __asan_report_load1(&config_action->amount_by_target_current_hpratio.is_json_loaded);
      if ( config_action->amount_by_target_current_hpratio.is_json_loaded )
      {
        v26 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
        std::shared_ptr<DieCreatureRecord>::shared_ptr((std::shared_ptr<DieCreatureRecord> *const)(v2 + 192), 0LL);
        std::shared_ptr<Creature>::shared_ptr(&p_global_value_source_ptr, 0LL);
        *(float *)v5.m128i_i32 = ActorAbility::evaluate(
                                   v26,
                                   &config_action->amount_by_target_current_hpratio,
                                   &p_global_value_source_ptr,
                                   (DieCreatureRecordPtr *)(v2 + 192));
        amount_by_target_current_hpratio_0 = COERCE_FLOAT(_mm_cvtsi128_si32(v5));
        std::shared_ptr<Creature>::~shared_ptr(&p_global_value_source_ptr);
        std::shared_ptr<DieCreatureRecord>::~shared_ptr((std::shared_ptr<DieCreatureRecord> *const)(v2 + 192));
        v27 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 160));
        v28 = Creature::getProp(v27, FIGHT_PROP_CUR_HP);
        v29 = v28 * amount_by_target_current_hpratio_0;
        v5 = (__m128i)*(unsigned int *)(v2 + 48);
        *(float *)(v2 + 48) = *(float *)v5.m128i_i32 + v29;
      }
      if ( *(char *)(((unsigned __int64)&config_action->limbo_by_target_max_hpratio.is_json_loaded >> 3) + 0x7FFF8000) < 0 )
        __asan_report_load1(&config_action->limbo_by_target_max_hpratio.is_json_loaded);
      if ( config_action->limbo_by_target_max_hpratio.is_json_loaded )
      {
        v30 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
        std::shared_ptr<DieCreatureRecord>::shared_ptr((std::shared_ptr<DieCreatureRecord> *const)(v2 + 192), 0LL);
        std::shared_ptr<Creature>::shared_ptr(&p_global_value_source_ptr, 0LL);
        *(float *)v5.m128i_i32 = ActorAbility::evaluate(
                                   v30,
                                   &config_action->limbo_by_target_max_hpratio,
                                   &p_global_value_source_ptr,
                                   (DieCreatureRecordPtr *)(v2 + 192));
        *(_DWORD *)(v2 + 64) = _mm_cvtsi128_si32(v5);
        std::shared_ptr<Creature>::~shared_ptr(&p_global_value_source_ptr);
        std::shared_ptr<DieCreatureRecord>::~shared_ptr((std::shared_ptr<DieCreatureRecord> *const)(v2 + 192));
      }
      v21 = 1;
    }
    std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v2 + 160));
    std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v2 + 128));
    if ( v21 == 1 )
      goto LABEL_66;
  }
  std::shared_ptr<ActorAbility>::~shared_ptr((std::shared_ptr<ActorAbility> *const)(v2 + 96));
  result = v44;
  if ( v59 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 2423: range 00000000136D6A1A-00000000136D753A
int32_t __cdecl AbilityComp::loseHPHandler(
        AbilityComp *const this,
        const data::LoseHP *config_action,
        ActionParam *param)
{
  int32_t v3; // r14d
  __m128i v4; // xmm0
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // rcx
  Creature *v9; // rax
  PileBoolValue *IsInvincible; // rax
  common::milog::MiLogStream *v12; // r14
  unsigned __int64 v13; // rax
  void (__fastcall **v14)(common::milog::MiLogStream *, unsigned __int64); // rdx
  PileBoolValue *IsLockHp; // rax
  unsigned __int64 v17; // rax
  unsigned __int64 v18; // rdx
  char v19; // al
  unsigned __int64 v20; // rax
  unsigned __int64 v21; // rdx
  char v22; // r15
  Player *v23; // rax
  Player *v24; // rax
  PlayerSceneComp *SceneComp; // rax
  common::milog::MiLogStream *v26; // r14
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v27; // rax
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // r14
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v30; // rax
  int v31; // r15d
  unsigned __int64 v32; // rax
  __m128i v33; // xmm0
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v34; // rax
  Creature *v35; // r14
  int32_t result; // eax
  bool v37; // [rsp+17h] [rbp-1B9h]
  float cur_hp; // [rsp+44h] [rbp-18Ch]
  FightPropComp *fight_comp; // [rsp+48h] [rbp-188h]
  std::shared_ptr<Scene> __a; // [rsp+50h] [rbp-180h] BYREF
  common::milog::MiLogStream v42; // [rsp+60h] [rbp-170h] BYREF
  common::milog::MiLogStream v43; // [rsp+80h] [rbp-150h] BYREF
  char v44[304]; // [rsp+A0h] [rbp-130h] BYREF

  v5 = (unsigned __int64)v44;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_2(256LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "4 48 4 14 hp_amount:2457 64 16 15 target_ptr:2424 96 16 21 notify_param_ptr:2454 128 96 8 ctx:2468";
  *(_QWORD *)(v5 + 16) = AbilityComp::loseHPHandler;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234556943;
  v7[536862722] = -219021312;
  v7[536862723] = -219021312;
  v7[536862727] = -202116109;
  std::shared_ptr<Creature>::shared_ptr((std::shared_ptr<Creature> *const)(v5 + 64), &param->target_ptr);
  if ( std::operator==<Creature>((const std::shared_ptr<Creature> *)(v5 + 64), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v43,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "loseHPHandler",
      2427);
    v8 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(&v43, (const char (*)[19])"target_ptr is null");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v8, this->creature_);
    common::milog::MiLogStream::~MiLogStream(&v43);
    v3 = -1;
    goto LABEL_69;
  }
  v9 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 64));
  fight_comp = Creature::getFightPropComp(v9);
  if ( *(_BYTE *)(((unsigned __int64)&config_action->enable_invincible >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)config_action + 73) & 7) >= *(_BYTE *)(((unsigned __int64)&config_action->enable_invincible >> 3)
                                                               + 0x7FFF8000) )
  {
    __asan_report_load1(&config_action->enable_invincible);
  }
  if ( config_action->enable_invincible )
  {
    IsInvincible = FightPropComp::getIsInvincible(fight_comp);
    if ( PileBoolValue::getValue(IsInvincible) )
    {
      common::milog::MiLogStream::create(
        &v42,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/ability/ability_comp.cpp",
        "loseHPHandler",
        2434);
      v12 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              &v42,
              (const char (*)[27])"lose hp invincible target:");
      v13 = (unsigned __int64)std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 64));
      if ( *(_BYTE *)((v13 >> 3) + 0x7FFF8000) )
        v13 = __asan_report_load8(v13);
      v14 = *(void (__fastcall ***)(common::milog::MiLogStream *, unsigned __int64))v13;
      if ( *(_BYTE *)((*(_QWORD *)v13 >> 3) + 0x7FFF8000LL) )
        v13 = __asan_report_load8(*(_QWORD *)v13);
LABEL_19:
      (*v14)(&v43, v13);
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v12, (const std::string *)&v43);
      std::string::~string(&v43);
      common::milog::MiLogStream::~MiLogStream(&v42);
      v3 = 0;
      goto LABEL_69;
    }
  }
  if ( *(_BYTE *)(((unsigned __int64)&config_action->enable_lock_hp >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)config_action + 74) & 7) >= *(_BYTE *)(((unsigned __int64)&config_action->enable_lock_hp >> 3)
                                                               + 0x7FFF8000) )
  {
    __asan_report_load1(&config_action->enable_lock_hp);
  }
  if ( config_action->enable_lock_hp )
  {
    IsLockHp = FightPropComp::getIsLockHp(fight_comp);
    if ( PileBoolValue::getValue(IsLockHp) )
    {
      common::milog::MiLogStream::create(
        &v42,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/ability/ability_comp.cpp",
        "loseHPHandler",
        2440);
      v12 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
              &v42,
              (const char (*)[24])"lose hp lock hp target:");
      v13 = (unsigned __int64)std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 64));
      if ( *(_BYTE *)((v13 >> 3) + 0x7FFF8000) )
        v13 = __asan_report_load8(v13);
      v14 = *(void (__fastcall ***)(common::milog::MiLogStream *, unsigned __int64))v13;
      if ( *(_BYTE *)((*(_QWORD *)v13 >> 3) + 0x7FFF8000LL) )
        v13 = __asan_report_load8(*(_QWORD *)v13);
      goto LABEL_19;
    }
  }
  if ( *(_BYTE *)(((unsigned __int64)&config_action->disable_when_loading >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)config_action + 75) & 7) >= *(_BYTE *)(((unsigned __int64)&config_action->disable_when_loading >> 3)
                                                               + 0x7FFF8000) )
  {
    __asan_report_load1(&config_action->disable_when_loading);
  }
  if ( !config_action->disable_when_loading )
    goto LABEL_41;
  v17 = (unsigned __int64)std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 64));
  if ( *(_BYTE *)((v17 >> 3) + 0x7FFF8000) )
    v17 = __asan_report_load8(v17);
  v18 = *(_QWORD *)v17 + 24LL;
  if ( *(_BYTE *)((v18 >> 3) + 0x7FFF8000) )
    v17 = __asan_report_load8(*(_QWORD *)v17 + 24LL);
  if ( (*(unsigned int (__fastcall **)(unsigned __int64))v18)(v17) == 1 )
    v19 = 1;
  else
LABEL_41:
    v19 = 0;
  if ( !v19 )
    goto LABEL_58;
  v20 = (unsigned __int64)std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 64));
  if ( *(_BYTE *)((v20 >> 3) + 0x7FFF8000) )
    v20 = __asan_report_load8(v20);
  v21 = *(_QWORD *)v20 + 152LL;
  if ( *(_BYTE *)((v21 >> 3) + 0x7FFF8000) )
    v20 = __asan_report_load8(*(_QWORD *)v20 + 152LL);
  (*(void (__fastcall **)(unsigned __int64, unsigned __int64))v21)(v5 + 96, v20);
  v22 = 0;
  v37 = 0;
  if ( std::operator!=<Player>(0LL, (const std::shared_ptr<Player> *)(v5 + 96)) )
  {
    v23 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 96));
    Player::getSceneComp(v23);
    PlayerSceneComp::getDestScene((const PlayerSceneComp *const)&__a);
    v22 = 1;
    if ( std::operator!=<Scene>(0LL, &__a) )
    {
      v24 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 96));
      SceneComp = Player::getSceneComp(v24);
      if ( PlayerSceneComp::getEnterSceneState(SceneComp) > ENTER_SCENE_NOTIFY )
        v37 = 1;
    }
  }
  if ( v22 )
    std::shared_ptr<Scene>::~shared_ptr(&__a);
  if ( v37 )
  {
    common::milog::MiLogStream::create(
      &v43,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/ability/ability_comp.cpp",
      "loseHPHandler",
      2450);
    v26 = common::milog::MiLogStream::operator<<<char [52],(char *[52])0>(
            &v43,
            (const char (*)[52])"target is avatar and player is in transfer, target:");
    v27 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 64));
    v28 = common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v26, v27);
    v29 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v28, (const char (*)[9])" player:");
    v30 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 96));
    operator<<(v29, v30);
    common::milog::MiLogStream::~MiLogStream(&v43);
    v3 = 0;
    v31 = 0;
  }
  else
  {
    v31 = 1;
  }
  std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v5 + 96));
  if ( v31 == 1 )
  {
LABEL_58:
    *(_QWORD *)(v5 + 96) = 0LL;
    *(_QWORD *)(v5 + 104) = 0LL;
    common::tools::perf::make_shared<FightPropNtfParam>();
    std::shared_ptr<FightPropNtfParam>::operator=(
      (std::shared_ptr<FightPropNtfParam> *const)(v5 + 96),
      (std::shared_ptr<FightPropNtfParam> *)&__a);
    std::shared_ptr<FightPropNtfParam>::~shared_ptr((std::shared_ptr<FightPropNtfParam> *const)&__a);
    v32 = (unsigned __int64)std::__shared_ptr_access<FightPropNtfParam,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FightPropNtfParam,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 96));
    if ( *(_BYTE *)((v32 >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)((v32 >> 3) + 0x7FFF8000) <= 3 )
      v32 = __asan_report_store4(v32);
    *(_DWORD *)v32 = 3;
    *(float *)v4.m128i_i32 = calcLoseHpAmount(config_action, param);
    *(_DWORD *)(v5 + 48) = _mm_cvtsi128_si32(v4);
    if ( *(float *)(v5 + 48) <= 9999999.0 )
      v33 = (__m128i)*(unsigned int *)(v5 + 48);
    else
      v33 = (__m128i)0x4B18967Fu;
    *(_DWORD *)(v5 + 48) = v33.m128i_i32[0];
    v34 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 64));
    *(float *)v33.m128i_i32 = Creature::getCurHp(v34);
    cur_hp = COERCE_FLOAT(_mm_cvtsi128_si32(v33));
    if ( *(char *)(((unsigned __int64)&config_action->lethal >> 3) + 0x7FFF8000) < 0 )
      __asan_report_load1(&config_action->lethal);
    if ( (float)(*(float *)(v5 + 48) + 0.0099999998) > cur_hp && !config_action->lethal )
      *(_DWORD *)(v5 + 48) = 0;
    ChangeHpContext::ChangeHpContext((ChangeHpContext *const)(v5 + 128));
    *(_DWORD *)(v5 + 128) = 8;
    std::weak_ptr<ActorAbility>::operator=<ActorAbility>(
      (std::weak_ptr<ActorAbility> *const)(v5 + 192),
      &param->ability_ptr);
    v35 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 64));
    std::shared_ptr<FightPropNtfParam>::shared_ptr(
      (std::shared_ptr<FightPropNtfParam> *const)&__a,
      (const std::shared_ptr<FightPropNtfParam> *)(v5 + 96));
    v3 = Creature::changeCurHp(
           v35,
           -*(float *)(v5 + 48),
           (ChangeHpContext *)(v5 + 128),
           1,
           (FightPropNtfParamPtr *)&__a);
    std::shared_ptr<FightPropNtfParam>::~shared_ptr((std::shared_ptr<FightPropNtfParam> *const)&__a);
    ChangeHpContext::~ChangeHpContext((ChangeHpContext *const)(v5 + 128));
    std::shared_ptr<FightPropNtfParam>::~shared_ptr((std::shared_ptr<FightPropNtfParam> *const)(v5 + 96));
  }
LABEL_69:
  std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v5 + 64));
  result = v3;
  if ( v44 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2476: range 00000000136D753C-00000000136D8E71
int32_t __cdecl AbilityComp::generateElemBallHandler(
        AbilityComp *const this,
        const data::GenerateElemBall *config_action,
        ActionParam *param)
{
  int32_t v3; // r14d
  __m128i v4; // xmm0
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // rcx
  common::milog::MiLogStream *v9; // rcx
  common::milog::MiLogStream *v10; // rcx
  const proto::Vector *v11; // rax
  const proto::Vector *v12; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  data::DropElemBallType drop_type; // eax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  _BOOL4 v22; // r15d
  std::__shared_ptr_access<SceneEntity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v23; // rax
  std::__shared_ptr_access<data::ConfigLevelEntity,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v24; // rdx
  data::DropElemControlType *p_drop_elem_control_type; // rax
  char v26; // al
  int v27; // r15d
  common::milog::MiLogStream *v28; // rcx
  ActorAbility *v29; // r15
  MaterialExcelConfigMgr *p_material_config_mgr; // rcx
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rax
  float *v34; // r8
  float *v35; // r9
  common::milog::MiLogStream *v36; // rax
  common::milog::MiLogStream *v37; // rax
  common::milog::MiLogStream *v38; // rax
  common::milog::MiLogStream *v39; // rax
  common::milog::MiLogStream *v40; // rax
  Scene *v41; // rax
  int v42; // r15d
  Player *v43; // rax
  PlayerItemComp *ItemComp; // rax
  common::milog::MiLogStream *v45; // rax
  common::milog::MiLogStream *v46; // rax
  common::milog::MiLogStream *v47; // rax
  _BOOL4 v48; // r15d
  const std::shared_ptr<Item> *v49; // rax
  Scene *v50; // rax
  common::milog::MiLogStream *v51; // rax
  common::milog::MiLogStream *v52; // rax
  common::milog::MiLogStream *v53; // rax
  int v54; // r15d
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v55; // rax
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v56; // r15
  unsigned __int64 v57; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v58; // rsi
  int32_t result; // eax
  void (__fastcall *v60)(std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, VisionContext *); // [rsp+10h] [rbp-350h]
  float energy_ratio; // [rsp+34h] [rbp-32Ch]
  float energy; // [rsp+38h] [rbp-328h]
  uint32_t count; // [rsp+3Ch] [rbp-324h]
  std::vector<std::shared_ptr<data::ConfigLevelEntity>>::iterator __for_begin; // [rsp+40h] [rbp-320h] BYREF
  std::vector<std::shared_ptr<data::ConfigLevelEntity>>::iterator __for_end; // [rsp+48h] [rbp-318h] BYREF
  size_t idx; // [rsp+50h] [rbp-310h]
  const proto::AbilityInvokeEntry *entry_ptr; // [rsp+58h] [rbp-308h]
  const std::string *ability_data_str; // [rsp+60h] [rbp-300h]
  std::vector<std::shared_ptr<data::ConfigLevelEntity>> *__for_range; // [rsp+68h] [rbp-2F8h]
  std::shared_ptr<data::ConfigLevelEntity> *config_ptr; // [rsp+70h] [rbp-2F0h]
  const data::MaterialExcelConfig *item_config_ptr; // [rsp+78h] [rbp-2E8h]
  const data::ItemUseConfig *item_use_config; // [rsp+80h] [rbp-2E0h]
  const std::map<unsigned int,std::weak_ptr<Player>> *player_map; // [rsp+88h] [rbp-2D8h]
  const std::map<unsigned int,std::weak_ptr<Player>> *__for_range_0; // [rsp+90h] [rbp-2D0h]
  const std::pair<unsigned int const,std::weak_ptr<Player> > *v76; // [rsp+98h] [rbp-2C8h]
  std::tuple_element<0,const std::pair<unsigned int const,std::weak_ptr<Player> > >::type *uid; // [rsp+A0h] [rbp-2C0h]
  std::tuple_element<1,const std::pair<unsigned int const,std::weak_ptr<Player> > >::type *player_wtr; // [rsp+A8h] [rbp-2B8h]
  common::milog::MiLogStream v79; // [rsp+B0h] [rbp-2B0h] BYREF
  char v80[656]; // [rsp+D0h] [rbp-290h] BYREF

  v5 = (unsigned __int64)v80;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_4(608LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "13 48 4 14 elem_type:2563 64 4 20 elem_add_energy:2564 80 4 21 other_add_energy:2565 96 12 8 pos"
                        ":2502 128 12 8 rot:2503 160 16 15 source_ptr:2477 192 16 14 scene_ptr:2483 224 16 15 item_param:"
                        "2601 256 16 15 player_ptr:2614 288 16 15 trifle_ptr:2630 320 24 13 item_vec:2622 384 40 35 meta_"
                        "action_generate_elem_ball:2496 464 112 17 trifle_param:2605";
  *(_QWORD *)(v5 + 16) = AbilityComp::generateElemBallHandler;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234556943;
  v7[536862722] = -234556924;
  v7[536862723] = -219020288;
  v7[536862724] = -219020288;
  v7[536862725] = -219021312;
  v7[536862726] = -219021312;
  v7[536862727] = -219021312;
  v7[536862728] = -219021312;
  v7[536862729] = -219021312;
  v7[536862730] = -234881024;
  v7[536862731] = -218959118;
  v7[536862733] = -218959360;
  v7[536862734] = 62194;
  v7[536862738] = -202116109;
  std::shared_ptr<Creature>::shared_ptr((std::shared_ptr<Creature> *const)(v5 + 160), &param->source_ptr);
  if ( !std::operator==<Creature>((const std::shared_ptr<Creature> *)(v5 + 160), 0LL) )
  {
    std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 160));
    Entity::getScene((const Entity *const)(v5 + 192));
    if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v5 + 192), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v79,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "generateElemBallHandler",
        2486);
      v9 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
             &v79,
             (const char (*)[18])"scene_ptr is null");
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
LABEL_11:
      common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v9, this->creature_);
      common::milog::MiLogStream::~MiLogStream(&v79);
      v3 = -1;
LABEL_113:
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v5 + 192));
      goto LABEL_114;
    }
    if ( *(_BYTE *)(((unsigned __int64)&param->entry_ptr >> 3) + 0x7FFF8000) )
      __asan_report_load8(&param->entry_ptr);
    entry_ptr = param->entry_ptr;
    if ( !entry_ptr )
    {
      common::milog::MiLogStream::create(
        &v79,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "generateElemBallHandler",
        2492);
      v9 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
             &v79,
             (const char (*)[18])"entry_ptr is null");
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      goto LABEL_11;
    }
    ability_data_str = proto::AbilityInvokeEntry::ability_data[abi:cxx11](entry_ptr);
    proto::AbilityActionGenerateElemBall::AbilityActionGenerateElemBall((proto::AbilityActionGenerateElemBall *const)(v5 + 384));
    if ( (unsigned __int8)google::protobuf::MessageLite::ParseFromString(v5 + 384, ability_data_str) != 1 )
    {
      common::milog::MiLogStream::create(
        &v79,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "generateElemBallHandler",
        2499);
      v10 = common::milog::MiLogStream::operator<<<char [48],(char *[48])0>(
              &v79,
              (const char (*)[48])"AbilityActionCreateGadget ParseFromString fails");
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
    }
    else
    {
      v11 = proto::AbilityActionGenerateElemBall::pos((const proto::AbilityActionGenerateElemBall *const)(v5 + 384));
      Vector3::Vector3((Vector3 *const)(v5 + 96), v11);
      v12 = proto::AbilityActionGenerateElemBall::rot((const proto::AbilityActionGenerateElemBall *const)(v5 + 384));
      Vector3::Vector3((Vector3 *const)(v5 + 128), v12);
      v13 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 192));
      if ( Scene::isPosValid(v13, (const Vector3 *)(v5 + 96)) )
      {
        if ( !Vector3::isValidRot((const Vector3 *const)(v5 + 128)) )
        {
          common::milog::MiLogStream::create(
            &v79,
            &common::milog::MiLogDefault::default_log_obj_,
            0x13u,
            "./src/ability/ability_comp.cpp",
            "generateElemBallHandler",
            2512);
          v15 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
                  &v79,
                  (const char (*)[17])"invalid rot, x: ");
          v16 = common::milog::MiLogStream::operator<<<float,(float *)0>(v15, (const float *)(v5 + 128));
          v17 = common::milog::MiLogStream::operator<<<char [5],(char *[5])0>(v16, (const char (*)[5])off_25035020);
          v18 = common::milog::MiLogStream::operator<<<float,(float *)0>(v17, (const float *)(v5 + 132));
          v19 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v18, (const char (*)[9])" rot.z: ");
          common::milog::MiLogStream::operator<<<float,(float *)0>(v19, (const float *)(v5 + 136));
          common::milog::MiLogStream::~MiLogStream(&v79);
          v3 = -1;
        }
        else
        {
          if ( *(_BYTE *)(((unsigned __int64)&config_action->drop_type >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&config_action->drop_type >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&config_action->drop_type);
          }
          drop_type = config_action->drop_type;
          if ( drop_type )
          {
            if ( drop_type == BigWorldOnly )
            {
              v21 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 192));
              if ( Scene::getSceneType(v21) != SCENE_WORLD )
              {
                v3 = 0;
                goto LABEL_112;
              }
            }
          }
          else
          {
            std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 192));
            Scene::getSceneEntity((const Scene *const)(v5 + 288));
            if ( std::operator==<SceneEntity>(0LL, (const std::shared_ptr<SceneEntity> *)(v5 + 288)) )
            {
              v22 = 0;
            }
            else
            {
              v23 = std::__shared_ptr_access<SceneEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SceneEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 288));
              SceneEntity::findConfigLevelEntityPtrVec(
                (std::vector<std::shared_ptr<data::ConfigLevelEntity>> *)(v5 + 320),
                v23);
              __for_range = (std::vector<std::shared_ptr<data::ConfigLevelEntity>> *)(v5 + 320);
              __for_begin._M_current = std::vector<std::shared_ptr<data::ConfigLevelEntity>>::begin((std::vector<std::shared_ptr<data::ConfigLevelEntity>> *const)(v5 + 320))._M_current;
              __for_end._M_current = std::vector<std::shared_ptr<data::ConfigLevelEntity>>::end((std::vector<std::shared_ptr<data::ConfigLevelEntity>> *const)(v5 + 320))._M_current;
              while ( __gnu_cxx::operator!=<std::shared_ptr<data::ConfigLevelEntity> *,std::vector<std::shared_ptr<data::ConfigLevelEntity>>>(
                        &__for_begin,
                        &__for_end) )
              {
                config_ptr = __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigLevelEntity> *,std::vector<std::shared_ptr<data::ConfigLevelEntity>>>::operator*(&__for_begin);
                if ( !std::operator!=<data::ConfigLevelEntity>(config_ptr, 0LL) )
                  goto LABEL_43;
                v24 = std::__shared_ptr_access<data::ConfigLevelEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigLevelEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)config_ptr);
                p_drop_elem_control_type = &v24->drop_elem_control_type;
                if ( *(_BYTE *)(((unsigned __int64)p_drop_elem_control_type >> 3) + 0x7FFF8000) != 0
                  && (char)(((unsigned __int8)p_drop_elem_control_type & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_drop_elem_control_type >> 3)
                                                                                             + 0x7FFF8000) )
                {
                  __asan_report_load4(p_drop_elem_control_type);
                }
                if ( v24->drop_elem_control_type == None_25 )
                  v26 = 1;
                else
LABEL_43:
                  v26 = 0;
                if ( v26 )
                {
                  v3 = 0;
                  v27 = 0;
                  goto LABEL_48;
                }
                __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigLevelEntity> *,std::vector<std::shared_ptr<data::ConfigLevelEntity>>>::operator++(&__for_begin);
              }
              v27 = 1;
LABEL_48:
              std::vector<std::shared_ptr<data::ConfigLevelEntity>>::~vector((std::vector<std::shared_ptr<data::ConfigLevelEntity>> *const)(v5 + 320));
              v22 = v27 == 0;
            }
            std::shared_ptr<SceneEntity>::~shared_ptr((std::shared_ptr<SceneEntity> *const)(v5 + 288));
            if ( v22 )
              goto LABEL_112;
          }
          if ( std::operator==<ActorAbility>(&param->ability_ptr, 0LL) )
          {
            common::milog::MiLogStream::create(
              &v79,
              &common::milog::MiLogDefault::default_log_obj_,
              0x13u,
              "./src/ability/ability_comp.cpp",
              "generateElemBallHandler",
              2549);
            v28 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                    &v79,
                    (const char (*)[23])"ability_ptr is nullptr");
            if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
              __asan_report_load8(&this->creature_);
          }
          else
          {
            v29 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)param);
            std::shared_ptr<DieCreatureRecord>::shared_ptr((std::shared_ptr<DieCreatureRecord> *const)(v5 + 288), 0LL);
            std::shared_ptr<Creature>::shared_ptr((std::shared_ptr<Creature> *const)(v5 + 256), 0LL);
            *(float *)v4.m128i_i32 = ActorAbility::evaluate(
                                       v29,
                                       &config_action->ratio,
                                       (CreaturePtr *)(v5 + 256),
                                       (DieCreatureRecordPtr *)(v5 + 288));
            energy_ratio = COERCE_FLOAT(_mm_cvtsi128_si32(v4));
            std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v5 + 256));
            std::shared_ptr<DieCreatureRecord>::~shared_ptr((std::shared_ptr<DieCreatureRecord> *const)(v5 + 288));
            if ( *(_BYTE *)(((unsigned __int64)&config_action->base_energy >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&config_action->base_energy >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(&config_action->base_energy);
            }
            energy = config_action->base_energy * energy_ratio;
            if ( energy <= 0.0 )
            {
              v3 = -1;
              goto LABEL_112;
            }
            ServiceBox::findService<GameserverService>();
            GameserverService::getConfig((GameserverService *const)(v5 + 288));
            p_material_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 288))->design_config.txt_config_mgr.material_config_mgr;
            if ( *(_BYTE *)(((unsigned __int64)&config_action->config_id >> 3) + 0x7FFF8000) != 0
              && (char)((((_BYTE)config_action - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_action->config_id >> 3)
                                                                            + 0x7FFF8000) )
            {
              __asan_report_load4(&config_action->config_id);
            }
            item_config_ptr = data::MaterialExcelConfigMgrBase::findMaterialExcelConfig(
                                p_material_config_mgr,
                                config_action->config_id);
            std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v5 + 288));
            if ( !item_config_ptr || std::vector<data::ItemUseConfig>::empty(&item_config_ptr->item_use) )
            {
              common::milog::MiLogStream::create(
                &v79,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/ability/ability_comp.cpp",
                "generateElemBallHandler",
                2559);
              v32 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
                      &v79,
                      (const char (*)[39])byte_25036240);
              v33 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v32,
                      &config_action->config_id);
              common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(v33, (const char (*)[41])byte_250362A0);
              common::milog::MiLogStream::~MiLogStream(&v79);
              v3 = -1;
              goto LABEL_112;
            }
            item_use_config = std::vector<data::ItemUseConfig>::operator[](&item_config_ptr->item_use, 0LL);
            *(_DWORD *)(v5 + 48) = 0;
            *(_DWORD *)(v5 + 64) = 0;
            *(_DWORD *)(v5 + 80) = 0;
            if ( *(_BYTE *)(((unsigned __int64)&item_use_config->use_op >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&item_use_config->use_op >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(&item_use_config->use_op);
            }
            if ( item_use_config->use_op == ITEM_USE_ADD_ELEM_ENERGY )
            {
              if ( common::tools::StringUtils::strVecToNum<0u,int,float &,float &>(
                     &item_use_config->use_param,
                     (int *)(v5 + 48),
                     (float *)(v5 + 64),
                     (float *)(v5 + 80),
                     v34,
                     v35) )
              {
                common::milog::MiLogStream::create(
                  &v79,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/ability/ability_comp.cpp",
                  "generateElemBallHandler",
                  2570);
                v36 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
                        &v79,
                        (const char (*)[30])"strVecToNum fails, use_param:");
                common::milog::MiLogStream::operator<<<std::string>(v36, &item_use_config->use_param);
                common::milog::MiLogStream::~MiLogStream(&v79);
                v3 = -1;
                goto LABEL_112;
              }
            }
            else
            {
              if ( *(_BYTE *)(((unsigned __int64)&item_use_config->use_op >> 3) + 0x7FFF8000) != 0
                && *(_BYTE *)(((unsigned __int64)&item_use_config->use_op >> 3) + 0x7FFF8000) <= 3 )
              {
                __asan_report_load4(&item_use_config->use_op);
              }
              if ( item_use_config->use_op != ITEM_USE_ADD_ALL_ENERGY )
              {
                common::milog::MiLogStream::create(
                  &v79,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/ability/ability_comp.cpp",
                  "generateElemBallHandler",
                  2584);
                v38 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
                        &v79,
                        (const char (*)[39])byte_25036240);
                v39 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                        v38,
                        &config_action->config_id);
                common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(v39, (const char (*)[26])byte_25036380);
                common::milog::MiLogStream::~MiLogStream(&v79);
                v3 = -1;
                goto LABEL_112;
              }
              if ( common::tools::StringUtils::strVecToNum<0u,float>(&item_use_config->use_param, (float *)(v5 + 64)) )
              {
                common::milog::MiLogStream::create(
                  &v79,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/ability/ability_comp.cpp",
                  "generateElemBallHandler",
                  2578);
                v37 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                        &v79,
                        (const char (*)[31])"strVecToNum fails,  use_param:");
                common::milog::MiLogStream::operator<<<std::string>(v37, &item_use_config->use_param);
                common::milog::MiLogStream::~MiLogStream(&v79);
                v3 = -1;
                goto LABEL_112;
              }
            }
            if ( *(float *)(v5 + 64) <= 0.0 )
            {
              common::milog::MiLogStream::create(
                &v79,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/ability/ability_comp.cpp",
                "generateElemBallHandler",
                2589);
              v40 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                      &v79,
                      (const char (*)[33])"elem_add_energy <= 0, config_id:");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v40, &config_action->config_id);
              common::milog::MiLogStream::~MiLogStream(&v79);
              v3 = -1;
              goto LABEL_112;
            }
            count = (int)std::ceil(energy / *(float *)(v5 + 64));
            if ( count <= 0x14 )
            {
              *(_DWORD *)(v5 + 224) = 0;
              *(_DWORD *)(v5 + 228) = 0;
              *(_DWORD *)(v5 + 232) = 0;
              *(_DWORD *)(v5 + 236) = 0;
              if ( *(_BYTE *)(((unsigned __int64)&config_action->config_id >> 3) + 0x7FFF8000) != 0
                && (char)((((_BYTE)config_action - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_action->config_id >> 3)
                                                                              + 0x7FFF8000) )
              {
                __asan_report_load4(&config_action->config_id);
              }
              *(_DWORD *)(v5 + 224) = config_action->config_id;
              *(_DWORD *)(v5 + 228) = 1;
              ActionReason::ActionReason((ActionReason *const)(v5 + 320), ACTION_REASON_ABILITY, ITEM_LIMIT_UNLIMITED);
              TrifleParam::TrifleParam((TrifleParam *const)(v5 + 464), (const ActionReason *)(v5 + 320));
              *(_QWORD *)(v5 + 488) = *(_QWORD *)(v5 + 96);
              *(_DWORD *)(v5 + 496) = *(_DWORD *)(v5 + 104);
              *(_QWORD *)(v5 + 500) = *(_QWORD *)(v5 + 128);
              *(_DWORD *)(v5 + 508) = *(_DWORD *)(v5 + 136);
              *(_DWORD *)(v5 + 536) = 1;
              *(_DWORD *)(v5 + 540) = proto::AbilityActionGenerateElemBall::room_id((const proto::AbilityActionGenerateElemBall *const)(v5 + 384));
              v41 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 192));
              player_map = Scene::getAllPlayerMap(v41);
              __for_range_0 = player_map;
              __for_begin._M_current = (std::shared_ptr<data::ConfigLevelEntity> *)std::map<unsigned int,std::weak_ptr<Player>>::begin(player_map)._M_node;
              __for_end._M_current = (std::shared_ptr<data::ConfigLevelEntity> *)std::map<unsigned int,std::weak_ptr<Player>>::end(__for_range_0)._M_node;
              while ( std::operator!=(
                        (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::weak_ptr<Player> > >::_Self *)&__for_begin,
                        (const std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::weak_ptr<Player> > >::_Self *)&__for_end) )
              {
                v76 = std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::weak_ptr<Player>>>::operator*((const std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::weak_ptr<Player> > > *const)&__for_begin);
                uid = std::get<0ul,unsigned int const,std::weak_ptr<Player>>(v76);
                player_wtr = (std::tuple_element<1,const std::pair<unsigned int const,std::weak_ptr<Player> > >::type *)std::get<1ul,unsigned int const,std::weak_ptr<Player>>(v76);
                std::weak_ptr<Player>::lock((const std::weak_ptr<Player> *const)(v5 + 256));
                if ( std::operator==<Player>((const std::shared_ptr<Player> *)(v5 + 256), 0LL) )
                {
                  v42 = 0;
                }
                else
                {
                  if ( *(_BYTE *)(((unsigned __int64)uid >> 3) + 0x7FFF8000) != 0
                    && (char)(((unsigned __int8)uid & 7) + 3) >= *(_BYTE *)(((unsigned __int64)uid >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_load4(uid);
                  }
                  *(_DWORD *)(v5 + 532) = *uid;
                  for ( idx = 0LL; idx < count; ++idx )
                  {
                    v43 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 256));
                    ItemComp = Player::getItemComp(v43);
                    PlayerItemComp::createItem(
                      (std::vector<std::shared_ptr<Item>> *)(v5 + 320),
                      ItemComp,
                      (const ItemParam *)(v5 + 224));
                    if ( std::vector<std::shared_ptr<Item>>::size((const std::vector<std::shared_ptr<Item>> *const)(v5 + 320)) == 1 )
                    {
                      v49 = std::vector<std::shared_ptr<Item>>::operator[](
                              (std::vector<std::shared_ptr<Item>> *const)(v5 + 320),
                              0LL);
                      std::shared_ptr<Item>::operator=((std::shared_ptr<Item> *const)(v5 + 472), v49);
                      v50 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 192));
                      *(_DWORD *)(v5 + 464) = Scene::genNewEntityId(v50, PROT_ENTITY_GADGET);
                      EntityMgr::createTrifle((const TrifleParam *)(v5 + 288));
                      if ( std::operator==<Gadget>((const std::shared_ptr<Gadget> *)(v5 + 288), 0LL) )
                      {
                        common::milog::MiLogStream::create(
                          &v79,
                          &common::milog::MiLogDefault::default_log_obj_,
                          3u,
                          "./src/ability/ability_comp.cpp",
                          "generateElemBallHandler",
                          2633);
                        v51 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                                &v79,
                                (const char (*)[29])"createTrifle fails, item_id:");
                        v52 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                                v51,
                                (const unsigned int *)(v5 + 224));
                        v53 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(
                                v52,
                                (const char (*)[8])" count:");
                        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                          v53,
                          (const unsigned int *)(v5 + 228));
                        common::milog::MiLogStream::~MiLogStream(&v79);
                        v3 = -1;
                        v54 = 0;
                      }
                      else
                      {
                        v55 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 288));
                        v56 = v55;
                        if ( *(_BYTE *)(((unsigned __int64)v55 >> 3) + 0x7FFF8000) )
                          __asan_report_load8(v55);
                        v57 = *(_QWORD *)v56->baseclass_0 + 56LL;
                        if ( *(_BYTE *)((v57 >> 3) + 0x7FFF8000) )
                          v57 = __asan_report_load8(*(_QWORD *)v56->baseclass_0 + 56LL);
                        v60 = *(void (__fastcall **)(std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, VisionContext *))v57;
                        v58 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 192));
                        v60(v56, v58, &VisionContext::meet_context);
                        v54 = 1;
                      }
                      std::shared_ptr<Gadget>::~shared_ptr((std::shared_ptr<Gadget> *const)(v5 + 288));
                      v48 = v54 == 1;
                    }
                    else
                    {
                      common::milog::MiLogStream::create(
                        &v79,
                        &common::milog::MiLogDefault::default_log_obj_,
                        3u,
                        "./src/ability/ability_comp.cpp",
                        "generateElemBallHandler",
                        2625);
                      v45 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                              &v79,
                              (const char (*)[27])"createItem fails, item_id:");
                      v46 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                              v45,
                              (const unsigned int *)(v5 + 224));
                      v47 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(
                              v46,
                              (const char (*)[8])" count:");
                      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                        v47,
                        (const unsigned int *)(v5 + 228));
                      common::milog::MiLogStream::~MiLogStream(&v79);
                      v3 = -1;
                      v48 = 0;
                    }
                    std::vector<std::shared_ptr<Item>>::~vector((std::vector<std::shared_ptr<Item>> *const)(v5 + 320));
                    if ( !v48 )
                    {
                      v42 = 1;
                      goto LABEL_107;
                    }
                  }
                  v42 = 2;
                }
LABEL_107:
                std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v5 + 256));
                if ( v42 && v42 != 2 )
                  goto LABEL_111;
                std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::weak_ptr<Player>>>::operator++((std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::weak_ptr<Player> > > *const)&__for_begin);
              }
              v3 = 0;
LABEL_111:
              TrifleParam::~TrifleParam((TrifleParam *const)(v5 + 464));
              goto LABEL_112;
            }
            common::milog::MiLogStream::create(
              &v79,
              &common::milog::MiLogDefault::default_log_obj_,
              1u,
              "./src/ability/ability_comp.cpp",
              "generateElemBallHandler",
              2596);
            v28 = common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(
                    &v79,
                    (const char (*)[49])off_25036420);
            if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
              __asan_report_load8(&this->creature_);
          }
          common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v28, this->creature_);
          common::milog::MiLogStream::~MiLogStream(&v79);
          v3 = -1;
        }
LABEL_112:
        proto::AbilityActionGenerateElemBall::~AbilityActionGenerateElemBall((proto::AbilityActionGenerateElemBall *const)(v5 + 384));
        goto LABEL_113;
      }
      common::milog::MiLogStream::create(
        &v79,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "generateElemBallHandler",
        2506);
      v14 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(&v79, (const char (*)[13])"invalid pos:");
      v10 = operator<<(v14, (const Vector3 *)(v5 + 96));
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
    }
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v10, this->creature_);
    common::milog::MiLogStream::~MiLogStream(&v79);
    v3 = -1;
    goto LABEL_112;
  }
  common::milog::MiLogStream::create(
    &v79,
    &common::milog::MiLogDefault::default_log_obj_,
    0x13u,
    "./src/ability/ability_comp.cpp",
    "generateElemBallHandler",
    2480);
  v8 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(&v79, (const char (*)[19])"source_ptr is null");
  if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->creature_);
  common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v8, this->creature_);
  common::milog::MiLogStream::~MiLogStream(&v79);
  v3 = -1;
LABEL_114:
  std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v5 + 160));
  result = v3;
  if ( v80 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8034) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8048) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8048) = -168430091;
  }
  return result;
};

// Line 2644: range 00000000136D8E72-00000000136D924B
int32_t __cdecl AbilityComp::executeGadgetLuaHandler(
        AbilityComp *const this,
        const data::ExecuteGadgetLua *config_action,
        ActionParam *param)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v6; // rdx
  common::milog::MiLogStream *v7; // rcx
  int32_t v8; // r14d
  unsigned __int64 v9; // rax
  void (__fastcall **v10)(__int64, unsigned __int64); // rdx
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  Gadget *p_param2; // rdi
  int32_t param2; // edx
  int32_t result; // eax
  uint32_t param3; // [rsp+2Ch] [rbp-D4h]
  common::milog::MiLogStream v17; // [rsp+30h] [rbp-D0h] BYREF
  char v18[176]; // [rsp+50h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 16 15 gadget_ptr:2645 64 16 23 actor_modifier_ptr:2653 96 16 17 creature_ptr:2656";
  *(_QWORD *)(v3 + 16) = AbilityComp::executeGadgetLuaHandler;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -219021312;
  v5[536862722] = -219021312;
  v5[536862723] = -202178560;
  std::dynamic_pointer_cast<Gadget,Creature>((const std::shared_ptr<Creature> *)(v3 + 32));
  if ( std::operator==<Gadget>((const std::shared_ptr<Gadget> *)(v3 + 32), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v17,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "executeGadgetLuaHandler",
      2648);
    v6 = common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(
           &v17,
           (const char (*)[46])"cannot excute gadget lua on non-gadget, param");
    v7 = operator<<(v6, param);
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v7, this->creature_);
    common::milog::MiLogStream::~MiLogStream(&v17);
    v8 = -1;
  }
  else
  {
    param3 = 0;
    std::shared_ptr<ActorModifier>::shared_ptr((std::shared_ptr<ActorModifier> *const)(v3 + 64), &param->modifier_ptr);
    if ( std::operator!=<ActorModifier>((const std::shared_ptr<ActorModifier> *)(v3 + 64), 0LL) )
    {
      v9 = (unsigned __int64)std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      if ( *(_BYTE *)((v9 >> 3) + 0x7FFF8000) )
        v9 = __asan_report_load8(v9);
      v10 = *(void (__fastcall ***)(__int64, unsigned __int64))v9;
      if ( *(_BYTE *)((*(_QWORD *)v9 >> 3) + 0x7FFF8000LL) )
        v9 = __asan_report_load8(*(_QWORD *)v9);
      (*v10)(v3 + 96, v9);
      if ( std::operator!=<Creature>((const std::shared_ptr<Creature> *)(v3 + 96), 0LL) )
      {
        v11 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
        param3 = Entity::getEntityId((const Entity *const)v11);
      }
      std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 96));
    }
    p_param2 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
    if ( *(_BYTE *)(((unsigned __int64)&config_action->param2 >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)config_action - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_action->param2 >> 3)
                                                                    + 0x7FFF8000) )
    {
      p_param2 = (Gadget *)&config_action->param2;
      __asan_report_load4(&config_action->param2);
    }
    param2 = config_action->param2;
    if ( *(_BYTE *)(((unsigned __int64)&config_action->param1 >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&config_action->param1 >> 3) + 0x7FFF8000) <= 3 )
    {
      p_param2 = (Gadget *)&config_action->param1;
      __asan_report_load4(&config_action->param1);
    }
    v8 = Gadget::executeGadgetLua(p_param2, config_action->param1, param2, param3);
    std::shared_ptr<ActorModifier>::~shared_ptr((std::shared_ptr<ActorModifier> *const)(v3 + 64));
  }
  std::shared_ptr<Gadget>::~shared_ptr((std::shared_ptr<Gadget> *const)(v3 + 32));
  result = v8;
  if ( v18 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2667: range 00000000136D924C-00000000136D986D
int32_t __cdecl AbilityComp::addClimateMeterHandler(
        AbilityComp *const this,
        const data::AddClimateMeter *config_action,
        ActionParam *param)
{
  __m128i v3; // xmm0
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  int32_t v7; // r14d
  unsigned __int64 v8; // rax
  unsigned __int64 v9; // rdx
  ActorAbility *v10; // r14
  __int64 v11; // r14
  std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  const std::string *v13; // rax
  __int64 v14; // rax
  Player *v15; // rax
  PlayerBasicComp *BasicComp; // rdi
  int32_t result; // eax
  float delta_climate_meter; // [rsp+2Ch] [rbp-2D4h]
  std::shared_ptr<Creature> p_global_value_source_ptr; // [rsp+30h] [rbp-2D0h] BYREF
  std::shared_ptr<DieCreatureRecord> p_record_ptr; // [rsp+40h] [rbp-2C0h] BYREF
  common::milog::MiLogStream v22; // [rsp+50h] [rbp-2B0h] BYREF
  char v23[656]; // [rsp+70h] [rbp-290h] BYREF

  v4 = (unsigned __int64)v23;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_4(608LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 48 16 16 ability_ptr:2668 80 16 15 target_ptr:2674 112 16 15 player_ptr:2680 144 392 7 ss:2688";
  *(_QWORD *)(v4 + 16) = AbilityComp::addClimateMeterHandler;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = 61937;
  v6[536862722] = 62194;
  v6[536862723] = 62194;
  v6[536862724] = 62194;
  v6[536862736] = -218103808;
  v6[536862737] = -202116109;
  v6[536862738] = -202116109;
  std::shared_ptr<ActorAbility>::shared_ptr((std::shared_ptr<ActorAbility> *const)(v4 + 48), &param->ability_ptr);
  if ( std::operator==<ActorAbility>((const std::shared_ptr<ActorAbility> *)(v4 + 48), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v22,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/ability/ability_comp.cpp",
      "addClimateMeterHandler",
      2671);
    common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(&v22, (const char (*)[20])"ability_ptr is null");
    common::milog::MiLogStream::~MiLogStream(&v22);
    v7 = -1;
  }
  else
  {
    std::shared_ptr<Creature>::shared_ptr((std::shared_ptr<Creature> *const)(v4 + 80), &param->target_ptr);
    if ( std::operator==<Creature>((const std::shared_ptr<Creature> *)(v4 + 80), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v22,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/ability/ability_comp.cpp",
        "addClimateMeterHandler",
        2677);
      common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(&v22, (const char (*)[19])"target_ptr is null");
      common::milog::MiLogStream::~MiLogStream(&v22);
      v7 = -1;
    }
    else
    {
      v8 = (unsigned __int64)std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
      if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
        v8 = __asan_report_load8(v8);
      v9 = *(_QWORD *)v8 + 152LL;
      if ( *(_BYTE *)((v9 >> 3) + 0x7FFF8000) )
        v8 = __asan_report_load8(*(_QWORD *)v8 + 152LL);
      (*(void (__fastcall **)(unsigned __int64, unsigned __int64))v9)(v4 + 112, v8);
      if ( std::operator==<Player>(0LL, (const std::shared_ptr<Player> *)(v4 + 112)) )
      {
        common::milog::MiLogStream::create(
          &v22,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/ability/ability_comp.cpp",
          "addClimateMeterHandler",
          2683);
        common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(&v22, (const char (*)[19])"player_ptr is null");
        common::milog::MiLogStream::~MiLogStream(&v22);
        v7 = -1;
      }
      else
      {
        v10 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 48));
        std::shared_ptr<DieCreatureRecord>::shared_ptr(&p_record_ptr, 0LL);
        std::shared_ptr<Creature>::shared_ptr(&p_global_value_source_ptr, 0LL);
        *(float *)v3.m128i_i32 = ActorAbility::evaluate(
                                   v10,
                                   &config_action->value,
                                   &p_global_value_source_ptr,
                                   &p_record_ptr);
        delta_climate_meter = COERCE_FLOAT(_mm_cvtsi128_si32(v3));
        std::shared_ptr<Creature>::~shared_ptr(&p_global_value_source_ptr);
        std::shared_ptr<DieCreatureRecord>::~shared_ptr(&p_record_ptr);
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream(v4 + 144);
        v11 = std::operator<<<std::char_traits<char>>(v4 + 160, "{ability:");
        v12 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 48));
        v13 = ActorAbility::getName[abi:cxx11](v12);
        v14 = std::operator<<<char>(v11, v13);
        std::operator<<<std::char_traits<char>>(v14, "}");
        v15 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 112));
        BasicComp = Player::getBasicComp(v15);
        if ( *(_BYTE *)(((unsigned __int64)&config_action->climate_type >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&config_action->climate_type >> 3) + 0x7FFF8000) <= 3 )
        {
          BasicComp = (PlayerBasicComp *)&config_action->climate_type;
          __asan_report_load4(&config_action->climate_type);
        }
        PlayerBasicComp::changeCurClimateMeter(BasicComp, config_action->climate_type, delta_climate_meter, 1);
        v7 = 0;
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v4 + 144);
      }
      std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v4 + 112));
    }
    std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v4 + 80));
  }
  std::shared_ptr<ActorAbility>::~shared_ptr((std::shared_ptr<ActorAbility> *const)(v4 + 48));
  result = v7;
  if ( v23 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8040) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8048) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8048) = -168430091;
  }
  return result;
};

// Line 2697: range 00000000136D986E-00000000136D9C35
int32_t __cdecl AbilityComp::resetClimateMeterHandler(
        AbilityComp *const this,
        const data::ResetClimateMeter *config_action,
        ActionParam *param)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t v6; // r14d
  unsigned __int64 v7; // rax
  unsigned __int64 v8; // rdx
  Player *v9; // rax
  PlayerBasicComp *BasicComp; // rax
  int32_t result; // eax
  common::milog::MiLogStream v13; // [rsp+20h] [rbp-D0h] BYREF
  char v14[176]; // [rsp+40h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 16 16 ability_ptr:2698 64 16 15 target_ptr:2704 96 16 15 player_ptr:2710";
  *(_QWORD *)(v3 + 16) = AbilityComp::resetClimateMeterHandler;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -219021312;
  v5[536862722] = -219021312;
  v5[536862723] = -202178560;
  std::shared_ptr<ActorAbility>::shared_ptr((std::shared_ptr<ActorAbility> *const)(v3 + 32), &param->ability_ptr);
  if ( std::operator==<ActorAbility>((const std::shared_ptr<ActorAbility> *)(v3 + 32), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v13,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/ability/ability_comp.cpp",
      "resetClimateMeterHandler",
      2701);
    common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(&v13, (const char (*)[20])"ability_ptr is null");
    common::milog::MiLogStream::~MiLogStream(&v13);
    v6 = -1;
  }
  else
  {
    std::shared_ptr<Creature>::shared_ptr((std::shared_ptr<Creature> *const)(v3 + 64), &param->target_ptr);
    if ( std::operator==<Creature>((const std::shared_ptr<Creature> *)(v3 + 64), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v13,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/ability/ability_comp.cpp",
        "resetClimateMeterHandler",
        2707);
      common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(&v13, (const char (*)[19])"target_ptr is null");
      common::milog::MiLogStream::~MiLogStream(&v13);
      v6 = -1;
    }
    else
    {
      v7 = (unsigned __int64)std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
        v7 = __asan_report_load8(v7);
      v8 = *(_QWORD *)v7 + 152LL;
      if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
        v7 = __asan_report_load8(*(_QWORD *)v7 + 152LL);
      (*(void (__fastcall **)(unsigned __int64, unsigned __int64))v8)(v3 + 96, v7);
      if ( std::operator==<Player>(0LL, (const std::shared_ptr<Player> *)(v3 + 96)) )
      {
        common::milog::MiLogStream::create(
          &v13,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/ability/ability_comp.cpp",
          "resetClimateMeterHandler",
          2713);
        common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(&v13, (const char (*)[19])"player_ptr is null");
        common::milog::MiLogStream::~MiLogStream(&v13);
        v6 = -1;
      }
      else
      {
        v9 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
        BasicComp = Player::getBasicComp(v9);
        PlayerBasicComp::resetCurClimateMeter(BasicComp, 1);
        v6 = 0;
      }
      std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v3 + 96));
    }
    std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 64));
  }
  std::shared_ptr<ActorAbility>::~shared_ptr((std::shared_ptr<ActorAbility> *const)(v3 + 32));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2721: range 00000000136D9C36-00000000136D9FD3
int32_t __cdecl AbilityComp::reviveElemEnergyHandler(
        AbilityComp *const this,
        const data::ReviveElemEnergy *config_action,
        ActionParam *param)
{
  __m128i v3; // xmm0
  unsigned __int64 v4; // r12
  __int64 v5; // rax
  _DWORD *v6; // r13
  int32_t v7; // r14d
  ActorAbility *v8; // r14
  Creature *v9; // r14
  int32_t result; // eax
  std::shared_ptr<Creature> p_global_value_source_ptr; // [rsp+30h] [rbp-D0h] BYREF
  std::shared_ptr<DieCreatureRecord> p_record_ptr; // [rsp+40h] [rbp-C0h] BYREF
  common::milog::MiLogStream v14; // [rsp+50h] [rbp-B0h] BYREF
  char v15[144]; // [rsp+70h] [rbp-90h] BYREF

  v4 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(96LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "2 32 16 16 ability_ptr:2722 64 16 15 target_ptr:2728";
  *(_QWORD *)(v4 + 16) = AbilityComp::reviveElemEnergyHandler;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -219021312;
  v6[536862722] = -202178560;
  std::shared_ptr<ActorAbility>::shared_ptr((std::shared_ptr<ActorAbility> *const)(v4 + 32), &param->ability_ptr);
  if ( std::operator==<ActorAbility>((const std::shared_ptr<ActorAbility> *)(v4 + 32), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v14,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/ability/ability_comp.cpp",
      "reviveElemEnergyHandler",
      2725);
    common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(&v14, (const char (*)[20])"ability_ptr is null");
    common::milog::MiLogStream::~MiLogStream(&v14);
    v7 = -1;
  }
  else
  {
    std::shared_ptr<Creature>::shared_ptr((std::shared_ptr<Creature> *const)(v4 + 64), &param->target_ptr);
    if ( std::operator==<Creature>((const std::shared_ptr<Creature> *)(v4 + 64), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v14,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/ability/ability_comp.cpp",
        "reviveElemEnergyHandler",
        2731);
      common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(&v14, (const char (*)[19])"target_ptr is null");
      common::milog::MiLogStream::~MiLogStream(&v14);
      v7 = -1;
    }
    else
    {
      v8 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
      std::shared_ptr<DieCreatureRecord>::shared_ptr(&p_record_ptr, 0LL);
      std::shared_ptr<Creature>::shared_ptr(&p_global_value_source_ptr, 0LL);
      *(float *)v3.m128i_i32 = ActorAbility::evaluate(
                                 v8,
                                 &config_action->value,
                                 &p_global_value_source_ptr,
                                 &p_record_ptr);
      std::shared_ptr<Creature>::~shared_ptr(&p_global_value_source_ptr);
      std::shared_ptr<DieCreatureRecord>::~shared_ptr(&p_record_ptr);
      v9 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
      std::shared_ptr<FightPropNtfParam>::shared_ptr((std::shared_ptr<FightPropNtfParam> *const)&p_record_ptr, 0LL);
      Creature::changeCurEnergy(v9, COERCE_FLOAT(_mm_cvtsi128_si32(v3)), 1, (FightPropNtfParamPtr *)&p_record_ptr);
      std::shared_ptr<FightPropNtfParam>::~shared_ptr((std::shared_ptr<FightPropNtfParam> *const)&p_record_ptr);
      v7 = 0;
    }
    std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v4 + 64));
  }
  std::shared_ptr<ActorAbility>::~shared_ptr((std::shared_ptr<ActorAbility> *const)(v4 + 32));
  result = v7;
  if ( v15 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 2741: range 00000000136D9FD4-00000000136DA941
int32_t __cdecl AbilityComp::changeEnviroWeatherHander(
        AbilityComp *const this,
        const data::ChangeEnviroWeather *config_action,
        ActionParam *param)
{
  int32_t v3; // r15d
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rcx
  unsigned __int64 v8; // rax
  unsigned __int64 v9; // rdx
  void (__fastcall *v10)(unsigned __int64, unsigned __int64, _QWORD); // r8
  unsigned __int64 v11; // rax
  unsigned __int64 v12; // rdx
  Player *v13; // rax
  int v14; // r14d
  int v15; // r14d
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  common::milog::MiLogStream *v17; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // rax
  common::milog::MiLogStream *v19; // rcx
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // r14
  unsigned __int64 v22; // rax
  const Vector3 *Position; // rdx
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // r14
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v27; // rax
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rcx
  WeatherArea *v30; // rcx
  WeatherArea *v31; // rcx
  std::__shared_ptr_access<WeatherArea,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v32; // rax
  int32_t result; // eax
  void (__fastcall *v34)(std::shared_ptr<WeatherArea> *, std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, const Vector3 *, _QWORD); // [rsp+10h] [rbp-130h]
  unsigned int val; // [rsp+34h] [rbp-10Ch] BYREF
  std::shared_ptr<WeatherArea> __r; // [rsp+40h] [rbp-100h] BYREF
  common::milog::MiLogStream v38; // [rsp+50h] [rbp-F0h] BYREF
  char v39[208]; // [rsp+70h] [rbp-D0h] BYREF

  v4 = (unsigned __int64)v39;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(160LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 32 16 14 scene_ptr:2742 64 16 21 weather_area_ptr:2749 96 16 15 avatar_ptr:2758 128 16 15 player_ptr:2761";
  *(_QWORD *)(v4 + 16) = AbilityComp::changeEnviroWeatherHander;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -219021312;
  v6[536862722] = -219021312;
  v6[536862723] = -219021312;
  v6[536862724] = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->creature_);
  Entity::getScene((const Entity *const)(v4 + 32));
  if ( !std::operator==<Scene>((const std::shared_ptr<Scene> *)(v4 + 32), 0LL) )
  {
    *(_QWORD *)(v4 + 64) = 0LL;
    *(_QWORD *)(v4 + 72) = 0LL;
    if ( *(_BYTE *)(((unsigned __int64)&config_action->area_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&config_action->area_id >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&config_action->area_id);
    }
    if ( config_action->area_id )
    {
      v8 = (unsigned __int64)std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
      if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
        v8 = __asan_report_load8(v8);
      v9 = *(_QWORD *)v8 + 344LL;
      if ( *(_BYTE *)((v9 >> 3) + 0x7FFF8000) )
        v8 = __asan_report_load8(*(_QWORD *)v8 + 344LL);
      v10 = *(void (__fastcall **)(unsigned __int64, unsigned __int64, _QWORD))v9;
      if ( *(_BYTE *)(((unsigned __int64)&config_action->area_id >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&config_action->area_id >> 3) + 0x7FFF8000) <= 3 )
      {
        v8 = __asan_report_load4(&config_action->area_id);
      }
      v10(v4 + 128, v8, config_action->area_id);
      std::shared_ptr<WeatherArea>::operator=(
        (std::shared_ptr<WeatherArea> *const)(v4 + 64),
        (std::shared_ptr<WeatherArea> *)(v4 + 128));
      std::shared_ptr<WeatherArea>::~shared_ptr((std::shared_ptr<WeatherArea> *const)(v4 + 128));
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      toPtr<Avatar,Creature>((Creature *)(v4 + 96));
      if ( !std::operator!=<Avatar>((const std::shared_ptr<Avatar> *)(v4 + 96), 0LL) )
        goto LABEL_32;
      v11 = (unsigned __int64)std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
      if ( *(_BYTE *)((v11 >> 3) + 0x7FFF8000) )
        v11 = __asan_report_load8(v11);
      v12 = *(_QWORD *)v11 + 152LL;
      if ( *(_BYTE *)((v12 >> 3) + 0x7FFF8000) )
        v11 = __asan_report_load8(*(_QWORD *)v11 + 152LL);
      (*(void (__fastcall **)(unsigned __int64, unsigned __int64))v12)(v4 + 128, v11);
      if ( std::operator!=<Player>((const std::shared_ptr<Player> *)(v4 + 128), 0LL) )
      {
        v13 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
        Player::getSceneComp(v13);
        PlayerSceneComp::getWeatherArea((const PlayerSceneComp *const)&__r);
        std::shared_ptr<WeatherArea>::operator=((std::shared_ptr<WeatherArea> *const)(v4 + 64), &__r);
        std::shared_ptr<WeatherArea>::~shared_ptr(&__r);
        v14 = 0;
      }
      else
      {
        v14 = 1;
      }
      std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v4 + 128));
      if ( v14 == 1 )
      {
LABEL_32:
        v16 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
        if ( Scene::getScriptConfig(v16) )
        {
          v20 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
          v21 = v20;
          if ( *(_BYTE *)(((unsigned __int64)v20 >> 3) + 0x7FFF8000) )
            __asan_report_load8(v20);
          v22 = (unsigned __int64)(v21->_vptr_DescribalBase + 47);
          if ( *(_BYTE *)((v22 >> 3) + 0x7FFF8000) )
            v22 = __asan_report_load8(v21->_vptr_DescribalBase + 47);
          v34 = *(void (__fastcall **)(std::shared_ptr<WeatherArea> *, std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, const Vector3 *, _QWORD))v22;
          if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->creature_);
          Position = Entity::getPosition((const Entity *const)this->creature_);
          v34(&__r, v21, Position, 0LL);
          std::shared_ptr<WeatherArea>::operator=((std::shared_ptr<WeatherArea> *const)(v4 + 64), &__r);
          std::shared_ptr<WeatherArea>::~shared_ptr(&__r);
          v15 = 2;
        }
        else
        {
          common::milog::MiLogStream::create(
            &v38,
            &common::milog::MiLogDefault::default_log_obj_,
            0x13u,
            "./src/ability/ability_comp.cpp",
            "changeEnviroWeatherHander",
            2772);
          v17 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                  &v38,
                  (const char (*)[32])"getScriptConfig fail, scene_id:");
          v18 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
          val = Scene::getSceneId(v18);
          v19 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, &val);
          if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->creature_);
          common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v19, this->creature_);
          common::milog::MiLogStream::~MiLogStream(&v38);
          v3 = -1;
          v15 = 1;
        }
      }
      else
      {
        v15 = 0;
      }
      std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 96));
      if ( v15 && v15 != 2 )
        goto LABEL_54;
    }
    if ( std::operator==<WeatherArea>((const std::shared_ptr<WeatherArea> *)(v4 + 64), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v38,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "changeEnviroWeatherHander",
        2781);
      v24 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
              &v38,
              (const char (*)[31])"weather_area is null, area_id:");
      v25 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v24, &config_action->area_id);
      v26 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v25, (const char (*)[11])" scene_id:");
      v27 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
      val = Scene::getSceneId(v27);
      v28 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v26, &val);
      v29 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v28, (const char (*)[9])" entity:");
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v29, this->creature_);
      common::milog::MiLogStream::~MiLogStream(&v38);
      v3 = -1;
    }
    else
    {
      v30 = std::__shared_ptr_access<WeatherArea,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<WeatherArea,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
      if ( *(_BYTE *)(((unsigned __int64)&config_action->climate_type >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)config_action - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_action->climate_type >> 3)
                                                                      + 0x7FFF8000) )
      {
        __asan_report_load4(&config_action->climate_type);
      }
      WeatherArea::setAbilityClimateType(v30, config_action->climate_type);
      v31 = std::__shared_ptr_access<WeatherArea,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<WeatherArea,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
      if ( *(_BYTE *)(((unsigned __int64)&config_action->trans_duration >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&config_action->trans_duration >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&config_action->trans_duration);
      }
      WeatherArea::setTransDuration(v31, config_action->trans_duration);
      v32 = std::__shared_ptr_access<WeatherArea,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<WeatherArea,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
      WeatherArea::notifyWeatherToPlayers(v32);
      v3 = 0;
    }
LABEL_54:
    std::shared_ptr<WeatherArea>::~shared_ptr((std::shared_ptr<WeatherArea> *const)(v4 + 64));
    goto LABEL_55;
  }
  common::milog::MiLogStream::create(
    &v38,
    &common::milog::MiLogDefault::default_log_obj_,
    0x13u,
    "./src/ability/ability_comp.cpp",
    "changeEnviroWeatherHander",
    2745);
  v7 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
         &v38,
         (const char (*)[29])"target not in scene! entity:");
  if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->creature_);
  common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v7, this->creature_);
  common::milog::MiLogStream::~MiLogStream(&v38);
  v3 = -1;
LABEL_55:
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v4 + 32));
  result = v3;
  if ( v39 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 2793: range 00000000136DA942-00000000136DB003
int32_t __cdecl AbilityComp::equipAffixStartHandler(
        AbilityComp *const this,
        const data::EquipAffixStart *config_action,
        ActionParam *param)
{
  __m128i v3; // xmm0
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rcx
  int32_t v8; // r14d
  common::milog::MiLogStream *v9; // rcx
  ActorAbility *v10; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  EquipComp *EquipComp; // rdi
  std::__shared_ptr_access<proto::AvatarEquipAffixStartNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  uint64_t Guid; // rax
  std::__shared_ptr_access<proto::AvatarEquipAffixStartNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  unsigned __int64 v17; // rax
  unsigned __int64 v18; // rdx
  common::milog::MiLogStream *v19; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  Player *v21; // r14
  int32_t result; // eax
  float affix_cd; // [rsp+2Ch] [rbp-114h]
  unsigned __int64 val; // [rsp+30h] [rbp-110h] BYREF
  proto::AvatarEquipAffixInfo *equip_affix_info; // [rsp+38h] [rbp-108h]
  std::shared_ptr<DieCreatureRecord> p_record_ptr; // [rsp+40h] [rbp-100h] BYREF
  common::milog::MiLogStream v28; // [rsp+50h] [rbp-F0h] BYREF
  char v29[208]; // [rsp+70h] [rbp-D0h] BYREF

  v4 = (unsigned __int64)v29;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(160LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 48 4 17 left_cd_time:2806 64 16 15 avatar_ptr:2799 96 16 15 notify_ptr:2810 128 16 15 player_ptr:2815";
  *(_QWORD *)(v4 + 16) = AbilityComp::equipAffixStartHandler;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -219021312;
  v6[536862723] = -219021312;
  v6[536862724] = -202178560;
  if ( std::operator==<ActorAbility>(&param->ability_ptr, 0LL) )
  {
    common::milog::MiLogStream::create(
      &v28,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "equipAffixStartHandler",
      2796);
    v7 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
           &v28,
           (const char (*)[26])"param.ability_ptr is null");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v7, this->creature_);
    common::milog::MiLogStream::~MiLogStream(&v28);
    v8 = -1;
  }
  else
  {
    std::dynamic_pointer_cast<Avatar,Creature>((const std::shared_ptr<Creature> *)(v4 + 64));
    if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v4 + 64), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v28,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "equipAffixStartHandler",
        2802);
      v9 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
             &v28,
             (const char (*)[19])"avatar_ptr is null");
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v9, this->creature_);
      common::milog::MiLogStream::~MiLogStream(&v28);
      v8 = -1;
    }
    else
    {
      v10 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)param);
      std::shared_ptr<DieCreatureRecord>::shared_ptr(&p_record_ptr, 0LL);
      std::shared_ptr<Creature>::shared_ptr((std::shared_ptr<Creature> *const)(v4 + 128), 0LL);
      *(float *)v3.m128i_i32 = ActorAbility::evaluate(v10, &config_action->cd, (CreaturePtr *)(v4 + 128), &p_record_ptr);
      affix_cd = COERCE_FLOAT(_mm_cvtsi128_si32(v3));
      std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v4 + 128));
      std::shared_ptr<DieCreatureRecord>::~shared_ptr(&p_record_ptr);
      *(_DWORD *)(v4 + 48) = 0;
      v11 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
      EquipComp = Avatar::getEquipComp(v11);
      if ( *(_BYTE *)(((unsigned __int64)&config_action->equip_affix_data_id >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&config_action->equip_affix_data_id >> 3) + 0x7FFF8000) <= 3 )
      {
        EquipComp = (EquipComp *)&config_action->equip_affix_data_id;
        __asan_report_load4(&config_action->equip_affix_data_id);
      }
      EquipComp::onAffixStart(EquipComp, config_action->equip_affix_data_id, affix_cd, (uint32_t *)(v4 + 48));
      common::tools::perf::make_shared<proto::AvatarEquipAffixStartNotify>();
      v13 = std::__shared_ptr_access<proto::AvatarEquipAffixStartNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::AvatarEquipAffixStartNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
      v14 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
      Guid = Avatar::getGuid(v14);
      proto::AvatarEquipAffixStartNotify::set_avatar_guid(v13, Guid);
      v16 = std::__shared_ptr_access<proto::AvatarEquipAffixStartNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::AvatarEquipAffixStartNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
      equip_affix_info = proto::AvatarEquipAffixStartNotify::mutable_equip_affix_info(v16);
      if ( *(_BYTE *)(((unsigned __int64)&config_action->equip_affix_data_id >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&config_action->equip_affix_data_id >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&config_action->equip_affix_data_id);
      }
      proto::AvatarEquipAffixInfo::set_equip_affix_id(equip_affix_info, config_action->equip_affix_data_id);
      proto::AvatarEquipAffixInfo::set_left_cd_time(equip_affix_info, *(_DWORD *)(v4 + 48));
      v17 = (unsigned __int64)std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
      if ( *(_BYTE *)((v17 >> 3) + 0x7FFF8000) )
        v17 = __asan_report_load8(v17);
      v18 = *(_QWORD *)v17 + 152LL;
      if ( *(_BYTE *)((v18 >> 3) + 0x7FFF8000) )
        v17 = __asan_report_load8(*(_QWORD *)v17 + 152LL);
      (*(void (__fastcall **)(unsigned __int64, unsigned __int64))v18)(v4 + 128, v17);
      if ( std::operator==<Player>(0LL, (const std::shared_ptr<Player> *)(v4 + 128)) )
      {
        common::milog::MiLogStream::create(
          &v28,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/ability/ability_comp.cpp",
          "equipAffixStartHandler",
          2818);
        v19 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                &v28,
                (const char (*)[31])"getPlayer failed, avatar_guid:");
        v20 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
        val = Avatar::getGuid(v20);
        common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v19, &val);
        common::milog::MiLogStream::~MiLogStream(&v28);
        v8 = -1;
      }
      else
      {
        v21 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
        std::dynamic_pointer_cast<google::protobuf::Message const,proto::AvatarEquipAffixStartNotify>((const std::shared_ptr<proto::AvatarEquipAffixStartNotify> *)&p_record_ptr);
        Player::sendMessage(v21, (common::minet::ConstMessagePtr *)&p_record_ptr, 0LL);
        std::shared_ptr<google::protobuf::Message const>::~shared_ptr((std::shared_ptr<const google::protobuf::Message> *const)&p_record_ptr);
        v8 = 0;
      }
      std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v4 + 128));
      std::shared_ptr<proto::AvatarEquipAffixStartNotify>::~shared_ptr((std::shared_ptr<proto::AvatarEquipAffixStartNotify> *const)(v4 + 96));
    }
    std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 64));
  }
  result = v8;
  if ( v29 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 2827: range 00000000136DB004-00000000136DB239
int32_t __cdecl AbilityComp::serverLuaCallHandler(
        AbilityComp *const this,
        const data::ServerLuaCall *config_action,
        ActionParam *param)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  common::milog::MiLogStream *v6; // rcx
  int32_t v7; // r14d
  Scene *v8; // rcx
  int32_t result; // eax
  common::milog::MiLogStream v11; // [rsp+20h] [rbp-90h] BYREF
  char v12[112]; // [rsp+40h] [rbp-70h] BYREF

  v3 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 16 14 scene_ptr:2828";
  *(_QWORD *)(v3 + 16) = AbilityComp::serverLuaCallHandler;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->creature_);
  Entity::getScene((const Entity *const)(v3 + 32));
  if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v3 + 32), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v11,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "serverLuaCallHandler",
      2831);
    v6 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
           &v11,
           (const char (*)[22])"scene_ptr is nullptr.");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v6, this->creature_);
    common::milog::MiLogStream::~MiLogStream(&v11);
    v7 = -1;
  }
  else
  {
    v8 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
    v7 = Scene::handleAbilityLuaCall(v8, config_action, param);
  }
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 32));
  result = v7;
  if ( v12 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2839: range 00000000136DB23A-00000000136DB46F
int32_t __cdecl AbilityComp::serverLuaTriggerEventHandler(
        AbilityComp *const this,
        const data::ServerLuaTriggerEvent *config_action,
        ActionParam *param)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  common::milog::MiLogStream *v6; // rcx
  int32_t v7; // r14d
  Scene *v8; // rcx
  int32_t result; // eax
  common::milog::MiLogStream v11; // [rsp+20h] [rbp-90h] BYREF
  char v12[112]; // [rsp+40h] [rbp-70h] BYREF

  v3 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 16 14 scene_ptr:2840";
  *(_QWORD *)(v3 + 16) = AbilityComp::serverLuaTriggerEventHandler;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->creature_);
  Entity::getScene((const Entity *const)(v3 + 32));
  if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v3 + 32), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v11,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "serverLuaTriggerEventHandler",
      2843);
    v6 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
           &v11,
           (const char (*)[22])"scene_ptr is nullptr.");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v6, this->creature_);
    common::milog::MiLogStream::~MiLogStream(&v11);
    v7 = -1;
  }
  else
  {
    v8 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
    v7 = Scene::handleAbilityLuaTriggerEvent(v8, config_action, param);
  }
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 32));
  result = v7;
  if ( v12 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2851: range 00000000136DB470-00000000136DB882
int32_t __cdecl AbilityComp::killPlayTeamEntityHandler(AbilityComp *const this, ActionParam *param)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  common::milog::MiLogStream *v5; // rcx
  int32_t v6; // r14d
  common::milog::MiLogStream *v7; // rcx
  Scene *v8; // r14
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  uint32_t Uid; // eax
  int32_t result; // eax
  std::enable_shared_from_this<Entity> v12; // [rsp+10h] [rbp-E0h] BYREF
  common::milog::MiLogStream v13; // [rsp+20h] [rbp-D0h] BYREF
  char v14[176]; // [rsp+40h] [rbp-B0h] BYREF

  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 32 16 14 scene_ptr:2852 64 16 15 player_ptr:2858 96 16 15 entity_ptr:2864";
  *(_QWORD *)(v2 + 16) = AbilityComp::killPlayTeamEntityHandler;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862722] = -219021312;
  v4[536862723] = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->creature_);
  Entity::getScene((const Entity *const)(v2 + 32));
  if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v2 + 32), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v13,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "killPlayTeamEntityHandler",
      2855);
    v5 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
           &v13,
           (const char (*)[22])"scene_ptr is nullptr.");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v5, this->creature_);
    common::milog::MiLogStream::~MiLogStream(&v13);
    v6 = -1;
  }
  else
  {
    std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    Scene::getOwnPlayer((const Scene *const)(v2 + 64));
    if ( std::operator==<Player>(0LL, (const std::shared_ptr<Player> *)(v2 + 64)) )
    {
      common::milog::MiLogStream::create(
        &v13,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "killPlayTeamEntityHandler",
        2861);
      v7 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
             &v13,
             (const char (*)[23])"player_ptr is nullptr.");
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v7, this->creature_);
      common::milog::MiLogStream::~MiLogStream(&v13);
      v6 = -1;
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      std::enable_shared_from_this<Entity>::shared_from_this(&v12);
      std::dynamic_pointer_cast<Entity,Entity>((const std::shared_ptr<Entity> *)(v2 + 96));
      std::shared_ptr<Entity>::~shared_ptr((std::shared_ptr<Entity> *const)&v12);
      v8 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
      v9 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
      Uid = Player::getUid(v9);
      v6 = Scene::delPlayTeamEntity(v8, Uid, (EntityPtr *)(v2 + 96));
      std::shared_ptr<Entity>::~shared_ptr((std::shared_ptr<Entity> *const)(v2 + 96));
    }
    std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v2 + 64));
  }
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v2 + 32));
  result = v6;
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2870: range 00000000136DB884-00000000136DBD16
void __cdecl AbilityComp::setGlobalValueToOverrideMapHandler(
        AbilityComp *const this,
        const data::SetGlobalValueToOverrideMap *config_action,
        ActionParam *param)
{
  __m128i v3; // xmm0
  std::shared_ptr<Creature> *v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r13
  common::milog::MiLogStream *v7; // rcx
  common::milog::MiLogStream *v9; // rcx
  Creature *v10; // rax
  __m128i v11; // xmm0
  ActorAbility *v12; // rax
  unsigned int final_value; // [rsp+24h] [rbp-ACh]
  const AbilityComp *target_ability_comp; // [rsp+28h] [rbp-A8h]
  std::shared_ptr<Creature> __r; // [rsp+30h] [rbp-A0h] BYREF
  common::milog::MiLogStream v17; // [rsp+40h] [rbp-90h] BYREF
  char v18[112]; // [rsp+60h] [rbp-70h] BYREF

  v4 = (std::shared_ptr<Creature> *)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = (std::shared_ptr<Creature> *)v5;
  }
  v4->_M_ptr = (std::__shared_ptr<Creature,(__gnu_cxx::_Lock_policy)2>::element_type *)1102416563;
  v4->_M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)"1 32 16 15 target_ptr:2876";
  v4[1]._M_ptr = (std::__shared_ptr<Creature,(__gnu_cxx::_Lock_policy)2>::element_type *)AbilityComp::setGlobalValueToOverrideMapHandler;
  v6 = (unsigned __int64)v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202178560;
  if ( std::operator==<ActorAbility>(0LL, &param->ability_ptr) )
  {
    common::milog::MiLogStream::create(
      &v17,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "setGlobalValueToOverrideMapHandler",
      2873);
    v7 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
           &v17,
           (const char (*)[23])"ability_ptr is nullptr");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v7, this->creature_);
    common::milog::MiLogStream::~MiLogStream(&v17);
  }
  else
  {
    std::shared_ptr<Creature>::shared_ptr(v4 + 2, &param->target_ptr);
    if ( *(_BYTE *)(((unsigned __int64)&config_action->is_from_owner >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)config_action - 116) & 7) >= *(_BYTE *)(((unsigned __int64)&config_action->is_from_owner >> 3)
                                                                  + 0x7FFF8000) )
    {
      __asan_report_load1(&config_action->is_from_owner);
    }
    if ( config_action->is_from_owner && std::operator!=<Creature>(0LL, v4 + 2) )
    {
      std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v4[2]);
      Creature::findTopOwner((const Creature *const)&__r);
      std::shared_ptr<Creature>::operator=(v4 + 2, &__r);
      std::shared_ptr<Creature>::~shared_ptr(&__r);
    }
    if ( std::operator==<Creature>(0LL, v4 + 2) )
    {
      common::milog::MiLogStream::create(
        &v17,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "setGlobalValueToOverrideMapHandler",
        2883);
      v9 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
             &v17,
             (const char (*)[22])"target ptr is nullptr");
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v9, this->creature_);
      common::milog::MiLogStream::~MiLogStream(&v17);
    }
    else
    {
      v10 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v4[2]);
      target_ability_comp = Creature::getAbilityComp(v10);
      if ( AbilityComp::hasDynamicValue(target_ability_comp, &config_action->global_value_key) )
      {
        *(float *)v3.m128i_i32 = AbilityComp::getDynamicValue<float>(
                                   target_ability_comp,
                                   &config_action->global_value_key);
        final_value = _mm_cvtsi128_si32(v3);
        if ( *(_BYTE *)(((unsigned __int64)&config_action->ability_formula >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&config_action->ability_formula >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&config_action->ability_formula);
        }
        v11 = _mm_cvtsi32_si128(final_value);
        *(float *)v11.m128i_i32 = AbilityComp::calcAbilityFormula(
                                    this,
                                    config_action->ability_formula,
                                    *(float *)v11.m128i_i32);
        v12 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)param);
        ActorAbility::setServerFloatParam(v12, &config_action->override_map_key, COERCE_FLOAT(_mm_cvtsi128_si32(v11)));
      }
    }
    std::shared_ptr<Creature>::~shared_ptr(v4 + 2);
  }
  if ( v18 == (char *)v4 )
  {
    *(_QWORD *)(((unsigned __int64)v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    v4->_M_ptr = (std::__shared_ptr<Creature,(__gnu_cxx::_Lock_policy)2>::element_type *)1172321806;
    *(_QWORD *)(((unsigned __int64)v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 2897: range 00000000136DC51C-00000000136DD3F9
void __cdecl AbilityComp::setTeamFightPropertyToOverrideMapKeyHandler(
        AbilityComp *const this,
        const data::SetTeamFightPropertyToOverrideMapKey *config_action,
        ActionParam *param)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rbx
  Creature *creature; // rsi
  unsigned __int64 *v8; // rax
  unsigned __int64 v9; // rax
  unsigned __int64 *v10; // rax
  const char *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // r14
  Creature *v14; // rsi
  unsigned __int64 *v15; // rax
  unsigned __int64 v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // r14
  unsigned __int64 v19; // rax
  void (__fastcall **v20)(common::milog::MiLogStream *, unsigned __int64); // rdx
  __m128i v21; // xmm0
  Player *v22; // rax
  common::milog::MiLogStream *v23; // rcx
  Scene *v24; // rsi
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v25; // rax
  unsigned int *v26; // rdx
  SceneTeam *v27; // r14
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rax
  ActorAbility *v31; // r14
  ActorAbility *v32; // r14
  const float *v33; // rax
  _DWORD *v34; // rdx
  ActorAbility *v35; // rax
  float __lo; // [rsp+2Ch] [rbp-214h] BYREF
  float __hi; // [rsp+30h] [rbp-210h] BYREF
  unsigned int uid; // [rsp+34h] [rbp-20Ch]
  std::vector<unsigned int>::iterator __for_begin; // [rsp+38h] [rbp-208h] BYREF
  std::vector<unsigned int>::iterator __for_end; // [rsp+40h] [rbp-200h] BYREF
  std::vector<unsigned int> *__for_range; // [rsp+48h] [rbp-1F8h]
  std::shared_ptr<Creature> v44; // [rsp+50h] [rbp-1F0h] BYREF
  std::shared_ptr<DieCreatureRecord> v45; // [rsp+60h] [rbp-1E0h] BYREF
  std::shared_ptr<Creature> p_global_value_source_ptr; // [rsp+70h] [rbp-1D0h] BYREF
  std::shared_ptr<DieCreatureRecord> p_record_ptr; // [rsp+80h] [rbp-1C0h] BYREF
  common::milog::MiLogStream v48; // [rsp+90h] [rbp-1B0h] BYREF
  common::milog::MiLogStream v49; // [rsp+B0h] [rbp-190h] BYREF
  common::milog::MiLogStream v50; // [rsp+D0h] [rbp-170h] BYREF
  char v51[336]; // [rsp+F0h] [rbp-150h] BYREF

  v3 = (unsigned __int64)v51;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(288LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "7 32 1 19 is_value_exist:2931 48 4 20 fight_prop_type:2918 64 4 16 final_value:2932 80 16 14 sce"
                        "ne_ptr:2924 112 16 19 scene_team_ptr:2959 144 24 16 player_uids:2965 208 48 9 func:2933";
  *(_QWORD *)(v3 + 16) = AbilityComp::setTeamFightPropertyToOverrideMapKeyHandler;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556927;
  v5[536862722] = 61956;
  v5[536862723] = 62194;
  v5[536862724] = 62194;
  v5[536862725] = -218959360;
  v5[536862726] = 62194;
  v5[536862728] = -202116109;
  if ( (unsigned __int8)std::string::empty(&config_action->override_map_key) )
  {
    common::milog::MiLogStream::create(
      &v50,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "setTeamFightPropertyToOverrideMapKeyHandler",
      2900);
    common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
      &v50,
      (const char (*)[26])"override_map_key is empty");
    common::milog::MiLogStream::~MiLogStream(&v50);
    goto LABEL_60;
  }
  if ( std::operator==<Player>(0LL, &param->from_player_ptr) )
  {
    common::milog::MiLogStream::create(
      &v50,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "setTeamFightPropertyToOverrideMapKeyHandler",
      2905);
    common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(&v50, (const char (*)[24])"from player ptr is null");
    common::milog::MiLogStream::~MiLogStream(&v50);
    goto LABEL_60;
  }
  if ( std::operator==<ActorAbility>(0LL, &param->ability_ptr) )
  {
    common::milog::MiLogStream::create(
      &v49,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "setTeamFightPropertyToOverrideMapKeyHandler",
      2910);
    v6 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
           &v49,
           (const char (*)[23])"ability_ptr is nullptr");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    creature = this->creature_;
    v8 = (unsigned __int64 *)creature;
    if ( *(_BYTE *)(((unsigned __int64)creature >> 3) + 0x7FFF8000) )
      v8 = (unsigned __int64 *)__asan_report_load8(this->creature_);
    v9 = *v8;
    if ( *(_BYTE *)((v9 >> 3) + 0x7FFF8000) )
      v9 = __asan_report_load8(v9);
LABEL_15:
    (*(void (__fastcall **)(common::milog::MiLogStream *, Creature *))v9)(&v50, creature);
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v6, (const std::string *)&v50);
    std::string::~string(&v50);
    common::milog::MiLogStream::~MiLogStream(&v49);
    goto LABEL_60;
  }
  if ( std::operator==<Creature>(0LL, &param->target_ptr) )
  {
    common::milog::MiLogStream::create(
      &v49,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "setTeamFightPropertyToOverrideMapKeyHandler",
      2915);
    v6 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
           &v49,
           (const char (*)[27])"target_ptr fail! creature:");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    creature = this->creature_;
    v10 = (unsigned __int64 *)creature;
    if ( *(_BYTE *)(((unsigned __int64)creature >> 3) + 0x7FFF8000) )
      v10 = (unsigned __int64 *)__asan_report_load8(this->creature_);
    v9 = *v10;
    if ( *(_BYTE *)((v9 >> 3) + 0x7FFF8000) )
      v9 = __asan_report_load8(v9);
    goto LABEL_15;
  }
  v11 = (const char *)std::string::c_str(&config_action->fight_property);
  if ( data::enumNameToVal(v11, (data::FightPropType *)(v3 + 48)) )
  {
    common::milog::MiLogStream::create(
      &v50,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "setTeamFightPropertyToOverrideMapKeyHandler",
      2921);
    v12 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
            &v50,
            (const char (*)[32])"strToEnum fail, fight_property:");
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v12, &config_action->fight_property);
    common::milog::MiLogStream::~MiLogStream(&v50);
  }
  else
  {
    std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)&param->target_ptr);
    Entity::getScene((const Entity *const)(v3 + 80));
    if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v3 + 80)) )
    {
      common::milog::MiLogStream::create(
        &v48,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "setTeamFightPropertyToOverrideMapKeyHandler",
        2927);
      v13 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
              &v48,
              (const char (*)[25])"getScene fail! creature:");
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      v14 = this->creature_;
      v15 = (unsigned __int64 *)v14;
      if ( *(_BYTE *)(((unsigned __int64)v14 >> 3) + 0x7FFF8000) )
        v15 = (unsigned __int64 *)__asan_report_load8(this->creature_);
      v16 = *v15;
      if ( *(_BYTE *)((v16 >> 3) + 0x7FFF8000) )
        v16 = __asan_report_load8(v16);
      (*(void (__fastcall **)(common::milog::MiLogStream *, Creature *))v16)(&v49, v14);
      v17 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v13, (const std::string *)&v49);
      v18 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v17, (const char (*)[9])" target:");
      v19 = (unsigned __int64)std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)&param->target_ptr);
      if ( *(_BYTE *)((v19 >> 3) + 0x7FFF8000) )
        v19 = __asan_report_load8(v19);
      v20 = *(void (__fastcall ***)(common::milog::MiLogStream *, unsigned __int64))v19;
      if ( *(_BYTE *)((*(_QWORD *)v19 >> 3) + 0x7FFF8000LL) )
        v19 = __asan_report_load8(*(_QWORD *)v19);
      (*v20)(&v50, v19);
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v18, (const std::string *)&v50);
      std::string::~string(&v50);
      std::string::~string(&v49);
      common::milog::MiLogStream::~MiLogStream(&v48);
    }
    else
    {
      *(_BYTE *)(v3 + 32) = 0;
      v21 = 0LL;
      *(_DWORD *)(v3 + 64) = 0;
      *(_QWORD *)(v3 + 208) = this;
      *(_QWORD *)(v3 + 216) = v3 + 32;
      *(_QWORD *)(v3 + 224) = config_action;
      *(_QWORD *)(v3 + 232) = v3 + 64;
      *(_QWORD *)(v3 + 240) = v3 + 48;
      *(_QWORD *)(v3 + 248) = param;
      v22 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)&param->from_player_ptr);
      Player::getAvatarComp(v22);
      PlayerAvatarComp::findSceneTeam((PlayerAvatarComp *const)(v3 + 112));
      if ( std::operator==<SceneTeam>(0LL, (const std::shared_ptr<SceneTeam> *)(v3 + 112)) )
      {
        common::milog::MiLogStream::create(
          &v50,
          &common::milog::MiLogDefault::default_log_obj_,
          0x13u,
          "./src/ability/ability_comp.cpp",
          "setTeamFightPropertyToOverrideMapKeyHandler",
          2962);
        v23 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                &v50,
                (const char (*)[29])"getSceneTeam fail! creature:");
        if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->creature_);
        common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v23, this->creature_);
        common::milog::MiLogStream::~MiLogStream(&v50);
      }
      else
      {
        v24 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80));
        if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->creature_);
        Scene::getViewingPlayers((std::vector<unsigned int> *)(v3 + 144), v24, (Entity *)this->creature_, 0, 1);
        __for_range = (std::vector<unsigned int> *)(v3 + 144);
        __for_begin._M_current = std::vector<unsigned int>::begin((std::vector<unsigned int> *const)(v3 + 144))._M_current;
        __for_end._M_current = std::vector<unsigned int>::end((std::vector<unsigned int> *const)(v3 + 144))._M_current;
        while ( __gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(&__for_begin, &__for_end) )
        {
          v25 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*(&__for_begin);
          v26 = v25;
          if ( *(_BYTE *)(((unsigned __int64)v25 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v25 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v25 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v25);
          }
          uid = *v26;
          v27 = std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<SceneTeam,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
          std::function<ForeachPolicy ()(Avatar &)>::function<AbilityComp::setTeamFightPropertyToOverrideMapKeyHandler(data::SetTeamFightPropertyToOverrideMapKey const&,ActionParam &)::{lambda(Avatar &)#1},void,void>(
            (std::function<ForeachPolicy(Avatar&)> *const)&v50,
            *(AbilityComp::setTeamFightPropertyToOverrideMapKeyHandler::<lambda(Avatar&)> *)(v3 + 208));
          SceneTeam::foreachAvatar(v27, uid, (std::function<ForeachPolicy(Avatar&)> *)&v50);
          std::function<ForeachPolicy ()(Avatar &)>::~function((std::function<ForeachPolicy(Avatar&)> *const)&v50);
          __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++(&__for_begin);
        }
        if ( *(_BYTE *)(v3 + 32) )
        {
          common::milog::MiLogStream::create(
            &v50,
            &common::milog::MiLogDefault::default_log_obj_,
            0x11u,
            "./src/ability/ability_comp.cpp",
            "setTeamFightPropertyToOverrideMapKeyHandler",
            2974);
          v28 = common::milog::MiLogStream::operator<<<char [55],(char *[55])0>(
                  &v50,
                  (const char (*)[55])"setTeamFightPropertyToOverrideMapKey override_map_key:");
          v29 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                  v28,
                  &config_action->override_map_key);
          v30 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v29, (const char (*)[8])" value:");
          common::milog::MiLogStream::operator<<<float,(float *)0>(v30, (const float *)(v3 + 64));
          common::milog::MiLogStream::~MiLogStream(&v50);
          if ( *(char *)(((unsigned __int64)&config_action->use_limit_range >> 3) + 0x7FFF8000) < 0 )
            __asan_report_load1(&config_action->use_limit_range);
          if ( config_action->use_limit_range )
          {
            v31 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)param);
            std::shared_ptr<DieCreatureRecord>::shared_ptr(&p_record_ptr, 0LL);
            std::shared_ptr<Creature>::shared_ptr(&p_global_value_source_ptr, 0LL);
            *(float *)v21.m128i_i32 = ActorAbility::evaluate(
                                        v31,
                                        &config_action->max_value,
                                        &p_global_value_source_ptr,
                                        &p_record_ptr);
            LODWORD(__hi) = _mm_cvtsi128_si32(v21);
            v32 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)param);
            std::shared_ptr<DieCreatureRecord>::shared_ptr(&v45, 0LL);
            std::shared_ptr<Creature>::shared_ptr(&v44, 0LL);
            *(float *)v21.m128i_i32 = ActorAbility::evaluate(v32, &config_action->min_value, &v44, &v45);
            LODWORD(__lo) = _mm_cvtsi128_si32(v21);
            v33 = std::clamp<float>((const float *)(v3 + 64), &__lo, &__hi);
            v34 = v33;
            if ( *(_BYTE *)(((unsigned __int64)v33 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)v33 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v33 >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(v33);
            }
            *(_DWORD *)(v3 + 64) = *v34;
            std::shared_ptr<Creature>::~shared_ptr(&v44);
            std::shared_ptr<DieCreatureRecord>::~shared_ptr(&v45);
            std::shared_ptr<Creature>::~shared_ptr(&p_global_value_source_ptr);
            std::shared_ptr<DieCreatureRecord>::~shared_ptr(&p_record_ptr);
          }
          v35 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)param);
          ActorAbility::setServerFloatParam(v35, &config_action->override_map_key, *(float *)(v3 + 64));
        }
        std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v3 + 144));
      }
      std::shared_ptr<SceneTeam>::~shared_ptr((std::shared_ptr<SceneTeam> *const)(v3 + 112));
    }
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 80));
  }
LABEL_60:
  if ( v51 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = -168430091;
  }
};

// Line 2933: range 00000000136DBD18-00000000136DC51A
ForeachPolicy __cdecl AbilityComp::setTeamFightPropertyToOverrideMapKeyHandler(data::SetTeamFightPropertyToOverrideMapKey const&,ActionParam &)::{lambda(Avatar &)#1}::operator()(
        const AbilityComp::setTeamFightPropertyToOverrideMapKeyHandler::<lambda(Avatar&)> *const __closure,
        Avatar *avatar)
{
  __m128i v2; // xmm0
  bool *is_value_exist; // rdx
  const data::SetTeamFightPropertyToOverrideMapKey *config_action; // rax
  data::SetTeamFightPropertyToOverrideMapKeyType type; // eax
  const FightPropComp *p_fight_prop_type; // rdi
  data::FightPropType *v7; // rdx
  const float *v8; // rdx
  float *v9; // rcx
  int v10; // xmm0_4
  const FightPropComp *FightPropComp; // rdi
  data::FightPropType *fight_prop_type; // rdx
  const float *v13; // rdx
  float *final_value; // rcx
  int v15; // xmm0_4
  common::milog::MiLogStream *v16; // rbx
  AbilityComp *this; // rax
  Creature *creature; // rsi
  AbilityComp *v19; // rax
  unsigned __int64 v20; // rax
  unsigned __int64 v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rbx
  unsigned __int64 v24; // rax
  void (__fastcall **v25)(std::string *, unsigned __int64); // rdx
  const FightPropComp *p_final_value; // rdi
  data::FightPropType *v27; // rdx
  data::FightPropType v28; // eax
  float *v29; // rbx
  int v30; // ecx
  bool *v31; // rdx
  float __b; // [rsp+1Ch] [rbp-74h] BYREF
  common::milog::MiLogStream v35; // [rsp+20h] [rbp-70h] BYREF
  std::string val; // [rsp+40h] [rbp-50h] BYREF
  std::string v37; // [rsp+60h] [rbp-30h] BYREF

  if ( *(_BYTE *)(((unsigned __int64)&__closure->__is_value_exist >> 3) + 0x7FFF8000) )
    __asan_report_load8(&__closure->__is_value_exist);
  is_value_exist = __closure->__is_value_exist;
  if ( *(_BYTE *)(((unsigned __int64)is_value_exist >> 3) + 0x7FFF8000) != 0
    && ((__int64)__closure->__is_value_exist & 7) >= *(_BYTE *)(((unsigned __int64)is_value_exist >> 3) + 0x7FFF8000) )
  {
    __asan_report_load1(__closure->__is_value_exist);
  }
  if ( *is_value_exist )
  {
    if ( *(_BYTE *)(((unsigned __int64)&__closure->__config_action >> 3) + 0x7FFF8000) )
      __asan_report_load8(&__closure->__config_action);
    config_action = __closure->__config_action;
    if ( *(_BYTE *)(((unsigned __int64)&config_action->type >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&config_action->type >> 3) + 0x7FFF8000) <= 3 )
    {
      config_action = (const data::SetTeamFightPropertyToOverrideMapKey *)__asan_report_load4(&config_action->type);
    }
    type = config_action->type;
    if ( type )
    {
      if ( type == Min )
      {
        FightPropComp = Creature::getFightPropComp(avatar);
        if ( *(_BYTE *)(((unsigned __int64)&__closure->__fight_prop_type >> 3) + 0x7FFF8000) )
        {
          FightPropComp = (const FightPropComp *)&__closure->__fight_prop_type;
          __asan_report_load8(&__closure->__fight_prop_type);
        }
        fight_prop_type = __closure->__fight_prop_type;
        if ( *(_BYTE *)(((unsigned __int64)fight_prop_type >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)fight_prop_type & 7) + 3) >= *(_BYTE *)(((unsigned __int64)fight_prop_type >> 3)
                                                                            + 0x7FFF8000) )
        {
          FightPropComp = (const FightPropComp *)__closure->__fight_prop_type;
          __asan_report_load4(FightPropComp);
        }
        *(float *)v2.m128i_i32 = FightPropComp::getPropValue(FightPropComp, *fight_prop_type, 1);
        LODWORD(__b) = _mm_cvtsi128_si32(v2);
        if ( *(_BYTE *)(((unsigned __int64)&__closure->__final_value >> 3) + 0x7FFF8000) )
          __asan_report_load8(&__closure->__final_value);
        v13 = std::min<float>(__closure->__final_value, &__b);
        if ( *(_BYTE *)(((unsigned __int64)&__closure->__final_value >> 3) + 0x7FFF8000) )
          __asan_report_load8(&__closure->__final_value);
        final_value = __closure->__final_value;
        if ( *(_BYTE *)(((unsigned __int64)v13 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v13 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v13 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v13);
        }
        v15 = *(_DWORD *)v13;
        if ( *(_BYTE *)(((unsigned __int64)final_value >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)final_value & 7) + 3) >= *(_BYTE *)(((unsigned __int64)final_value >> 3)
                                                                        + 0x7FFF8000) )
        {
          __asan_report_store4(final_value);
        }
        *(_DWORD *)final_value = v15;
      }
      else
      {
        common::milog::MiLogStream::create(
          &v35,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/ability/ability_comp.cpp",
          "operator()",
          2947);
        v16 = common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
                &v35,
                (const char (*)[47])"config_action type is invalid value! creature:");
        if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
          __asan_report_load8(__closure);
        this = __closure->__this;
        if ( *(_BYTE *)(((unsigned __int64)&__closure->__this->creature_ >> 3) + 0x7FFF8000) )
          this = (AbilityComp *)__asan_report_load8(&__closure->__this->creature_);
        creature = this->creature_;
        if ( *(_BYTE *)(((unsigned __int64)&__closure->__this->creature_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&__closure->__this->creature_);
        v19 = __closure->__this;
        if ( *(_BYTE *)(((unsigned __int64)&__closure->__this->creature_ >> 3) + 0x7FFF8000) )
          v19 = (AbilityComp *)__asan_report_load8(&__closure->__this->creature_);
        v20 = (unsigned __int64)v19->creature_;
        if ( *(_BYTE *)((v20 >> 3) + 0x7FFF8000) )
          v20 = __asan_report_load8(v20);
        v21 = *(_QWORD *)v20;
        if ( *(_BYTE *)((v21 >> 3) + 0x7FFF8000) )
          v21 = __asan_report_load8(v21);
        (*(void (__fastcall **)(std::string *, Creature *))v21)(&val, creature);
        v22 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v16, &val);
        v23 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v22, (const char (*)[9])" target:");
        if ( *(_BYTE *)(((unsigned __int64)&__closure->__param >> 3) + 0x7FFF8000) )
          __asan_report_load8(&__closure->__param);
        v24 = (unsigned __int64)std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)&__closure->__param->target_ptr);
        if ( *(_BYTE *)((v24 >> 3) + 0x7FFF8000) )
          v24 = __asan_report_load8(v24);
        v25 = *(void (__fastcall ***)(std::string *, unsigned __int64))v24;
        if ( *(_BYTE *)((*(_QWORD *)v24 >> 3) + 0x7FFF8000LL) )
          v24 = __asan_report_load8(*(_QWORD *)v24);
        (*v25)(&v37, v24);
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v23, &v37);
        std::string::~string(&v37);
        std::string::~string(&val);
        common::milog::MiLogStream::~MiLogStream(&v35);
      }
    }
    else
    {
      p_fight_prop_type = Creature::getFightPropComp(avatar);
      if ( *(_BYTE *)(((unsigned __int64)&__closure->__fight_prop_type >> 3) + 0x7FFF8000) )
      {
        p_fight_prop_type = (const FightPropComp *)&__closure->__fight_prop_type;
        __asan_report_load8(&__closure->__fight_prop_type);
      }
      v7 = __closure->__fight_prop_type;
      if ( *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v7 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v7 >> 3) + 0x7FFF8000) )
      {
        p_fight_prop_type = (const FightPropComp *)__closure->__fight_prop_type;
        __asan_report_load4(p_fight_prop_type);
      }
      *(float *)v2.m128i_i32 = FightPropComp::getPropValue(p_fight_prop_type, *v7, 1);
      LODWORD(__b) = _mm_cvtsi128_si32(v2);
      if ( *(_BYTE *)(((unsigned __int64)&__closure->__final_value >> 3) + 0x7FFF8000) )
        __asan_report_load8(&__closure->__final_value);
      v8 = std::max<float>(__closure->__final_value, &__b);
      if ( *(_BYTE *)(((unsigned __int64)&__closure->__final_value >> 3) + 0x7FFF8000) )
        __asan_report_load8(&__closure->__final_value);
      v9 = __closure->__final_value;
      if ( *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v8 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v8);
      }
      v10 = *(_DWORD *)v8;
      if ( *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v9 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) )
      {
        __asan_report_store4(v9);
      }
      *(_DWORD *)v9 = v10;
    }
  }
  else
  {
    p_final_value = Creature::getFightPropComp(avatar);
    if ( *(_BYTE *)(((unsigned __int64)&__closure->__fight_prop_type >> 3) + 0x7FFF8000) )
    {
      p_final_value = (const FightPropComp *)&__closure->__fight_prop_type;
      __asan_report_load8(&__closure->__fight_prop_type);
    }
    v27 = __closure->__fight_prop_type;
    if ( *(_BYTE *)(((unsigned __int64)v27 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v27 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v27 >> 3) + 0x7FFF8000) )
    {
      p_final_value = (const FightPropComp *)__closure->__fight_prop_type;
      __asan_report_load4(p_final_value);
    }
    v28 = *v27;
    if ( *(_BYTE *)(((unsigned __int64)&__closure->__final_value >> 3) + 0x7FFF8000) )
    {
      p_final_value = (const FightPropComp *)&__closure->__final_value;
      v28 = (unsigned int)__asan_report_load8(&__closure->__final_value);
    }
    v29 = __closure->__final_value;
    *(float *)v2.m128i_i32 = FightPropComp::getPropValue(p_final_value, v28, 1);
    v30 = _mm_cvtsi128_si32(v2);
    if ( *(_BYTE *)(((unsigned __int64)v29 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v29 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v29 >> 3) + 0x7FFF8000) )
    {
      __asan_report_store4(v29);
    }
    *(_DWORD *)v29 = v30;
  }
  if ( *(_BYTE *)(((unsigned __int64)&__closure->__is_value_exist >> 3) + 0x7FFF8000) )
    __asan_report_load8(&__closure->__is_value_exist);
  v31 = __closure->__is_value_exist;
  if ( *(_BYTE *)(((unsigned __int64)v31 >> 3) + 0x7FFF8000) != 0
    && ((__int64)__closure->__is_value_exist & 7) >= *(_BYTE *)(((unsigned __int64)v31 >> 3) + 0x7FFF8000) )
  {
    __asan_report_store1(__closure->__is_value_exist);
  }
  *v31 = 1;
  return 0;
};

// Line 2985: range 00000000136DD3FA-00000000136DD48D
float __cdecl AbilityComp::calcAbilityFormula(AbilityComp *const this, data::AbilityFormula type, float input_value)
{
  float v3; // xmm0_4

  if ( type != DummyThrowSpeed )
    return input_value;
  v3 = std::sin(0.94247776);
  return std::sqrt((float)(input_value * 30.0) / (float)(10.0 * (float)(10.0 * v3))) - 1.0;
};

// Line 3009: range 00000000136DD48E-00000000136DDADF
void __cdecl AbilityComp::setRandomOverrideMapValueHandler(
        AbilityComp *const this,
        const data::SetRandomOverrideMapValue *config_action,
        ActionParam *param)
{
  __m128i v3; // xmm0
  unsigned __int64 v4; // r12
  __int64 v5; // rax
  _DWORD *v6; // r13
  common::milog::MiLogStream *v7; // rcx
  common::milog::MiLogStream *v8; // rcx
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  ActorAbility *v17; // rax
  const proto::AbilityInvokeEntry *entry_ptr; // [rsp+20h] [rbp-E0h]
  const std::string *ability_data_str; // [rsp+28h] [rbp-D8h]
  common::milog::MiLogStream v21; // [rsp+30h] [rbp-D0h] BYREF
  char v22[176]; // [rsp+50h] [rbp-B0h] BYREF

  v4 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(128LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "2 48 4 10 value:3028 64 24 22 meta_action_param:3022";
  *(_QWORD *)(v4 + 16) = AbilityComp::setRandomOverrideMapValueHandler;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -218103808;
  v6[536862723] = -202116109;
  if ( std::operator==<ActorAbility>(0LL, &param->ability_ptr) )
  {
    common::milog::MiLogStream::create(
      &v21,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "setRandomOverrideMapValueHandler",
      3012);
    v7 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
           &v21,
           (const char (*)[23])"ability_ptr is nullptr");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
LABEL_7:
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v7, this->creature_);
    common::milog::MiLogStream::~MiLogStream(&v21);
    goto LABEL_29;
  }
  if ( *(_BYTE *)(((unsigned __int64)&param->entry_ptr >> 3) + 0x7FFF8000) )
    __asan_report_load8(&param->entry_ptr);
  entry_ptr = param->entry_ptr;
  if ( !entry_ptr )
  {
    common::milog::MiLogStream::create(
      &v21,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "setRandomOverrideMapValueHandler",
      3018);
    v7 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(&v21, (const char (*)[18])"entry_ptr is null");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    goto LABEL_7;
  }
  ability_data_str = proto::AbilityInvokeEntry::ability_data[abi:cxx11](entry_ptr);
  proto::AbilityActionSetRandomOverrideMapValue::AbilityActionSetRandomOverrideMapValue((proto::AbilityActionSetRandomOverrideMapValue *const)(v4 + 64));
  if ( (unsigned __int8)google::protobuf::MessageLite::ParseFromString(v4 + 64, ability_data_str) != 1 )
  {
    common::milog::MiLogStream::create(
      &v21,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "setRandomOverrideMapValueHandler",
      3025);
    v8 = common::milog::MiLogStream::operator<<<char [61],(char *[61])0>(
           &v21,
           (const char (*)[61])"AbilityActionSetRandomOverrideMapValue ParseFromString fails");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
  }
  else
  {
    *(float *)v3.m128i_i32 = proto::AbilityActionSetRandomOverrideMapValue::random_value((const proto::AbilityActionSetRandomOverrideMapValue *const)(v4 + 64));
    *(_DWORD *)(v4 + 48) = _mm_cvtsi128_si32(v3);
    if ( *(_BYTE *)(((unsigned __int64)&config_action->value_range_min >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)config_action - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_action->value_range_min >> 3)
                                                                    + 0x7FFF8000) )
    {
      __asan_report_load4(&config_action->value_range_min);
    }
    if ( config_action->value_range_min <= *(float *)(v4 + 48) )
    {
      if ( *(_BYTE *)(((unsigned __int64)&config_action->value_range_max >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&config_action->value_range_max >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&config_action->value_range_max);
      }
      if ( *(float *)(v4 + 48) <= config_action->value_range_max )
      {
        v17 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)param);
        ActorAbility::setServerFloatParam(v17, &config_action->override_map_key, *(float *)(v4 + 48));
        goto LABEL_28;
      }
    }
    common::milog::MiLogStream::create(
      &v21,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "setRandomOverrideMapValueHandler",
      3031);
    v9 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
           &v21,
           (const char (*)[23])"RandomOverrideMap key:");
    v10 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v9, &config_action->override_map_key);
    v11 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v10, (const char (*)[15])" client value=");
    v12 = common::milog::MiLogStream::operator<<<float,(float *)0>(v11, (const float *)(v4 + 48));
    v13 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v12, (const char (*)[12])" range_min=");
    v14 = common::milog::MiLogStream::operator<<<float,(float *)0>(v13, &config_action->value_range_min);
    v15 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v14, (const char (*)[12])" range_max=");
    v16 = common::milog::MiLogStream::operator<<<float,(float *)0>(v15, &config_action->value_range_max);
    v8 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v16, (const char (*)[11])" creature:");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
  }
  common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v8, this->creature_);
  common::milog::MiLogStream::~MiLogStream(&v21);
LABEL_28:
  proto::AbilityActionSetRandomOverrideMapValue::~AbilityActionSetRandomOverrideMapValue((proto::AbilityActionSetRandomOverrideMapValue *const)(v4 + 64));
LABEL_29:
  if ( v22 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 3039: range 00000000136DDAE0-00000000136DDC82
void __cdecl AbilityComp::setOverrideMapValueHandler(
        AbilityComp *const this,
        const data::SetOverrideMapValue *config_action,
        ActionParam *param)
{
  __m128i v3; // xmm0
  common::milog::MiLogStream *v4; // rcx
  ActorAbility *v5; // rbx
  ActorAbility *v6; // rax
  std::shared_ptr<Creature> p_global_value_source_ptr; // [rsp+30h] [rbp-50h] BYREF
  std::shared_ptr<DieCreatureRecord> p_record_ptr; // [rsp+40h] [rbp-40h] BYREF
  common::milog::MiLogStream v10; // [rsp+50h] [rbp-30h] BYREF

  if ( std::operator==<ActorAbility>(0LL, &param->ability_ptr) )
  {
    common::milog::MiLogStream::create(
      &v10,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "setOverrideMapValueHandler",
      3042);
    v4 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
           &v10,
           (const char (*)[23])"ability_ptr is nullptr");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v4, this->creature_);
    common::milog::MiLogStream::~MiLogStream(&v10);
  }
  else
  {
    v5 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)param);
    std::shared_ptr<DieCreatureRecord>::shared_ptr(&p_record_ptr, 0LL);
    std::shared_ptr<Creature>::shared_ptr(&p_global_value_source_ptr, 0LL);
    *(float *)v3.m128i_i32 = ActorAbility::evaluate(
                               v5,
                               &config_action->value,
                               &p_global_value_source_ptr,
                               &p_record_ptr);
    std::shared_ptr<Creature>::~shared_ptr(&p_global_value_source_ptr);
    std::shared_ptr<DieCreatureRecord>::~shared_ptr(&p_record_ptr);
    v6 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)param);
    ActorAbility::setServerFloatParam(v6, &config_action->override_map_key, COERCE_FLOAT(_mm_cvtsi128_si32(v3)));
  }
};

// Line 3051: range 00000000136DDC84-00000000136DE09D
void __cdecl AbilityComp::setCrystalShieldHpToOverrideMapHandler(
        AbilityComp *const this,
        const data::SetCrystalShieldHpToOverrideMap *config_action,
        ActionParam *param)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  common::milog::MiLogStream *v7; // rcx
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  Creature *v9; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rcx
  ActorAbility *v13; // rax
  float shield_level_co; // [rsp+28h] [rbp-A8h]
  float final_value; // [rsp+2Ch] [rbp-A4h]
  const FightPropComp *fight_comp; // [rsp+30h] [rbp-A0h]
  const data::ElementCoeffExcelConfig *coeff_config_ptr; // [rsp+38h] [rbp-98h]
  std::shared_ptr<Config> v19; // [rsp+40h] [rbp-90h] BYREF
  common::milog::MiLogStream v20; // [rsp+50h] [rbp-80h] BYREF
  char v21[96]; // [rsp+70h] [rbp-60h] BYREF

  v3 = (unsigned __int64)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 4 10 level:3057";
  *(_QWORD *)(v3 + 16) = AbilityComp::setCrystalShieldHpToOverrideMapHandler;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116348;
  if ( std::operator==<Creature>(0LL, &param->target_ptr) || std::operator==<ActorAbility>(0LL, &param->ability_ptr) )
  {
    common::milog::MiLogStream::create(
      &v20,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "setCrystalShieldHpToOverrideMapHandler",
      3054);
    v7 = common::milog::MiLogStream::operator<<<char [48],(char *[48])0>(
           &v20,
           (const char (*)[48])"target_ptr is nullptr or ability_ptr is nullptr");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v7, this->creature_);
    common::milog::MiLogStream::~MiLogStream(&v20);
  }
  else
  {
    v8 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)&param->target_ptr);
    *(_DWORD *)(v3 + 32) = Creature::getLevel(v8);
    v9 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)&param->target_ptr);
    fight_comp = Creature::getFightPropComp(v9);
    FightPropComp::getPropValue(fight_comp, FIGHT_PROP_ELEMENT_MASTERY, 1);
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v19);
    v10 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v19);
    coeff_config_ptr = data::ElementExcelConfigMgrBase::findElementCoeffExcelConfig(
                         &v10->design_config.txt_config_mgr.element_config_mgr,
                         *(_DWORD *)(v3 + 32));
    std::shared_ptr<Config>::~shared_ptr(&v19);
    if ( coeff_config_ptr )
    {
      if ( *(_BYTE *)(((unsigned __int64)&coeff_config_ptr->player_shield_level_co >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&coeff_config_ptr->player_shield_level_co >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&coeff_config_ptr->player_shield_level_co);
      }
      shield_level_co = coeff_config_ptr->player_shield_level_co;
      final_value = (float)(FightPropComp::getCrystalShieldHpDelta(fight_comp) + 1.0) * shield_level_co;
      v13 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)param);
      ActorAbility::setServerFloatParam(v13, &config_action->override_map_key, final_value);
    }
    else
    {
      common::milog::MiLogStream::create(
        &v20,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "setCrystalShieldHpToOverrideMapHandler",
        3063);
      v11 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
              &v20,
              (const char (*)[36])"coeff_config_ptr is nullptr, level=");
      v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v3 + 32));
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v12, this->creature_);
      common::milog::MiLogStream::~MiLogStream(&v20);
    }
  }
  if ( v21 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 3075: range 00000000136DE09E-00000000136DE7BF
void __cdecl AbilityComp::setSystemValueToOverrideMapHandler(
        AbilityComp *const this,
        const data::SetSystemValueToOverrideMap *config_action,
        ActionParam *param)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::milog::MiLogStream *v7; // rcx
  __m128i v8; // xmm0
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  int v10; // r14d
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // r14
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  const Vector3 *Position; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rcx
  data::SystemValuerType type; // eax
  Creature *v19; // rax
  FightPropComp *FightPropComp; // rax
  ActorAbility *v21; // rax
  float value; // [rsp+20h] [rbp-D0h]
  float add_hurt_delta; // [rsp+24h] [rbp-CCh]
  const data::ElementCoeffExcelConfig *coeff_config_ptr; // [rsp+28h] [rbp-C8h]
  std::shared_ptr<Scene> p_scene_ptr; // [rsp+30h] [rbp-C0h] BYREF
  common::milog::MiLogStream v27; // [rsp+40h] [rbp-B0h] BYREF
  char v28[144]; // [rsp+60h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v28;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 10 level:3082 64 16 14 scene_ptr:3085";
  *(_QWORD *)(v3 + 16) = AbilityComp::setSystemValueToOverrideMapHandler;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202178560;
  if ( std::operator==<Creature>(0LL, &param->target_ptr) || std::operator==<ActorAbility>(0LL, &param->ability_ptr) )
  {
    common::milog::MiLogStream::create(
      &v27,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "setSystemValueToOverrideMapHandler",
      3078);
    v7 = common::milog::MiLogStream::operator<<<char [48],(char *[48])0>(
           &v27,
           (const char (*)[48])"target_ptr is nullptr or ability_ptr is nullptr");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v7, this->creature_);
    common::milog::MiLogStream::~MiLogStream(&v27);
  }
  else
  {
    v8 = 0LL;
    value = 0.0;
    v9 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)&param->target_ptr);
    *(_DWORD *)(v3 + 48) = Creature::getLevel(v9);
    if ( *(_BYTE *)(((unsigned __int64)&config_action->type >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&config_action->type >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&config_action->type);
    }
    if ( config_action->type != ElementLevelCo )
      goto LABEL_22;
    std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)&param->target_ptr);
    Entity::getScene((const Entity *const)(v3 + 64));
    if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v3 + 64)) )
    {
      v10 = 0;
    }
    else
    {
      v11 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      if ( Scene::getSceneType(v11) == SCENE_DUNGEON )
      {
        std::shared_ptr<Scene>::shared_ptr(&p_scene_ptr, (const std::shared_ptr<Scene> *)(v3 + 64));
        *(_DWORD *)(v3 + 48) = AbilityComp::getDungeonReviseLevel(&p_scene_ptr);
        std::shared_ptr<Scene>::~shared_ptr(&p_scene_ptr);
      }
      else
      {
        v12 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        v13 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)&param->target_ptr);
        Position = Entity::getPosition((const Entity *const)v13);
        *(_DWORD *)(v3 + 48) = Scene::getAreaLevel(v12, Position);
      }
      v10 = 1;
    }
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 64));
    if ( v10 == 1 )
    {
LABEL_22:
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)&p_scene_ptr);
      v15 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&p_scene_ptr);
      coeff_config_ptr = data::ElementExcelConfigMgrBase::findElementCoeffExcelConfig(
                           &v15->design_config.txt_config_mgr.element_config_mgr,
                           *(_DWORD *)(v3 + 48));
      std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)&p_scene_ptr);
      if ( coeff_config_ptr )
      {
        if ( *(_BYTE *)(((unsigned __int64)&config_action->type >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&config_action->type >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&config_action->type);
        }
        type = config_action->type;
        if ( type == PlayerElementLevelCoWithMastery )
        {
          v19 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)&param->target_ptr);
          FightPropComp = Creature::getFightPropComp(v19);
          *(float *)v8.m128i_i32 = FightPropComp::getElementAddHurtDelta(FightPropComp);
          add_hurt_delta = COERCE_FLOAT(_mm_cvtsi128_si32(v8));
          if ( *(_BYTE *)(((unsigned __int64)&coeff_config_ptr->player_element_level_co >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)coeff_config_ptr + 20) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&coeff_config_ptr->player_element_level_co >> 3)
                                                                            + 0x7FFF8000) )
          {
            __asan_report_load4(&coeff_config_ptr->player_element_level_co);
          }
          value = (float)(add_hurt_delta + 1.0) * coeff_config_ptr->player_element_level_co;
        }
        else if ( type <= PlayerElementLevelCoWithMastery )
        {
          switch ( type )
          {
            case PlayerShieldLevelCo:
              if ( *(_BYTE *)(((unsigned __int64)&coeff_config_ptr->player_shield_level_co >> 3) + 0x7FFF8000) != 0
                && *(_BYTE *)(((unsigned __int64)&coeff_config_ptr->player_shield_level_co >> 3) + 0x7FFF8000) <= 3 )
              {
                __asan_report_load4(&coeff_config_ptr->player_shield_level_co);
              }
              value = coeff_config_ptr->player_shield_level_co;
              break;
            case ElementLevelCo:
              if ( *(_BYTE *)(((unsigned __int64)&coeff_config_ptr->element_level_co >> 3) + 0x7FFF8000) != 0
                && *(_BYTE *)(((unsigned __int64)&coeff_config_ptr->element_level_co >> 3) + 0x7FFF8000) <= 3 )
              {
                __asan_report_load4(&coeff_config_ptr->element_level_co);
              }
              value = coeff_config_ptr->element_level_co;
              break;
            case PlayerElementLevelCo:
              if ( *(_BYTE *)(((unsigned __int64)&coeff_config_ptr->player_element_level_co >> 3) + 0x7FFF8000) != 0
                && (char)((((_BYTE)coeff_config_ptr + 20) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&coeff_config_ptr->player_element_level_co >> 3)
                                                                                + 0x7FFF8000) )
              {
                __asan_report_load4(&coeff_config_ptr->player_element_level_co);
              }
              value = coeff_config_ptr->player_element_level_co;
              break;
          }
        }
        v21 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)param);
        ActorAbility::setServerFloatParam(v21, &config_action->key, value);
      }
      else
      {
        common::milog::MiLogStream::create(
          &v27,
          &common::milog::MiLogDefault::default_log_obj_,
          0x13u,
          "./src/ability/ability_comp.cpp",
          "setSystemValueToOverrideMapHandler",
          3103);
        v16 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                &v27,
                (const char (*)[36])"coeff_config_ptr is nullptr, level=");
        v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v16,
                (const unsigned int *)(v3 + 48));
        if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->creature_);
        common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v17, this->creature_);
        common::milog::MiLogStream::~MiLogStream(&v27);
      }
    }
  }
  if ( v28 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 3139: range 00000000136DE7C0-00000000136DE935
void __cdecl AbilityComp::setGlobalValueByTargetDistanceHandler(
        AbilityComp *const this,
        const data::SetGlobalValueByTargetDistance *config_action,
        ActionParam *param)
{
  __m128i v4; // xmm0
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  const Vector3 *Position; // rbx
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  const Vector3 *v8; // rax
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  const Vector3 *v10; // rbx
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  const Vector3 *v12; // rax
  Creature *v13; // rax
  AbilityComp *AbilityComp; // rax

  if ( !std::operator==<Creature>(0LL, &param->source_ptr) && !std::operator==<Creature>(0LL, &param->target_ptr) )
  {
    v4 = 0LL;
    if ( *(char *)(((unsigned __int64)&config_action->is_xz >> 3) + 0x7FFF8000) < 0 )
      __asan_report_load1(&config_action->is_xz);
    if ( config_action->is_xz )
    {
      v5 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)&param->target_ptr);
      Position = Entity::getPosition((const Entity *const)v5);
      v7 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)&param->source_ptr);
      v8 = Entity::getPosition((const Entity *const)v7);
      *(float *)v4.m128i_i32 = getPlaneDistance(v8, Position);
    }
    else
    {
      v9 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)&param->target_ptr);
      v10 = Entity::getPosition((const Entity *const)v9);
      v11 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)&param->source_ptr);
      v12 = Entity::getPosition((const Entity *const)v11);
      *(float *)v4.m128i_i32 = getDistance(v12, v10);
    }
    v13 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)&param->source_ptr);
    AbilityComp = Creature::getAbilityComp(v13);
    AbilityComp::createOrSetDynamicValue<float>(AbilityComp, &config_action->key, COERCE_FLOAT(_mm_cvtsi128_si32(v4)));
  }
};

// Line 3158: range 00000000136DE936-00000000136DF069
void __cdecl AbilityComp::setCrashDamageHandler(
        AbilityComp *const this,
        const data::SetCrashDamage *config_action,
        ActionParam *param)
{
  __m128i v3; // xmm0
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rcx
  common::milog::MiLogStream *v8; // rcx
  ActorAbility *v9; // rax
  const proto::Vector *v10; // rax
  Creature *v11; // rax
  AbilityComp *AbilityComp; // rax
  unsigned int idx; // [rsp+2Ch] [rbp-164h]
  float value; // [rsp+30h] [rbp-160h]
  const std::string *ability_data_str; // [rsp+38h] [rbp-158h]
  std::string __lhs; // [rsp+40h] [rbp-150h] BYREF
  common::milog::MiLogStream v18; // [rsp+60h] [rbp-130h] BYREF
  char v19[272]; // [rsp+80h] [rbp-110h] BYREF

  v4 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(224LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 48 4 19 ability_define:3184 64 12 8 pos:3183 96 32 22 action_set_damage:3175 160 32 8 key:3187";
  *(_QWORD *)(v4 + 16) = AbilityComp::setCrashDamageHandler;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -219020288;
  v6[536862724] = -218959118;
  v6[536862726] = -202116109;
  if ( std::operator==<Creature>(0LL, &param->target_ptr) )
  {
    common::milog::MiLogStream::create(
      &v18,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "setCrashDamageHandler",
      3161);
    v7 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
           &v18,
           (const char (*)[22])"target_ptr is nullptr");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
LABEL_17:
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v7, this->creature_);
    common::milog::MiLogStream::~MiLogStream(&v18);
    goto LABEL_33;
  }
  if ( std::operator==<ActorAbility>(0LL, &param->ability_ptr) )
  {
    common::milog::MiLogStream::create(
      &v18,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "setCrashDamageHandler",
      3166);
    v7 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
           &v18,
           (const char (*)[23])"ability_ptr is nullptr");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    goto LABEL_17;
  }
  if ( *(_BYTE *)(((unsigned __int64)&param->entry_ptr >> 3) + 0x7FFF8000) )
    __asan_report_load8(&param->entry_ptr);
  if ( !param->entry_ptr )
  {
    common::milog::MiLogStream::create(
      &v18,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "setCrashDamageHandler",
      3171);
    v7 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
           &v18,
           (const char (*)[21])"entry_ptr is nullptr");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    goto LABEL_17;
  }
  if ( *(_BYTE *)(((unsigned __int64)&param->entry_ptr >> 3) + 0x7FFF8000) )
    __asan_report_load8(&param->entry_ptr);
  ability_data_str = proto::AbilityInvokeEntry::ability_data[abi:cxx11](param->entry_ptr);
  proto::AbilityActionSetCrashDamage::AbilityActionSetCrashDamage((proto::AbilityActionSetCrashDamage *const)(v4 + 96));
  if ( (unsigned __int8)google::protobuf::MessageLite::ParseFromString(v4 + 96, ability_data_str) != 1 )
  {
    common::milog::MiLogStream::create(
      &v18,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "setCrashDamageHandler",
      3178);
    v8 = common::milog::MiLogStream::operator<<<char [51],(char *[51])0>(
           &v18,
           (const char (*)[51])"AbilityActionSetCrashDamage ParseFromString failed");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v8, this->creature_);
    common::milog::MiLogStream::~MiLogStream(&v18);
  }
  else
  {
    *(float *)v3.m128i_i32 = proto::AbilityActionSetCrashDamage::damage((const proto::AbilityActionSetCrashDamage *const)(v4 + 96));
    v9 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)param);
    ActorAbility::setServerFloatParam(v9, &config_action->key, COERCE_FLOAT(_mm_cvtsi128_si32(v3)));
    v10 = proto::AbilityActionSetCrashDamage::hit_pos((const proto::AbilityActionSetCrashDamage *const)(v4 + 96));
    Vector3::Vector3((Vector3 *const)(v4 + 64), v10);
    *(_DWORD *)(v4 + 48) = 3;
    for ( idx = 0; idx < *(_DWORD *)(v4 + 48); ++idx )
    {
      std::to_string((std::string *)&v18, idx);
      std::operator+<char>(&__lhs, &config_action->key, "_");
      std::operator+<char>((std::string *)(v4 + 160), &__lhs, (std::string *)&v18);
      std::string::~string(&__lhs);
      std::string::~string(&v18);
      if ( idx )
      {
        if ( idx == 1 )
          value = *(float *)(v4 + 68);
        else
          value = *(float *)(v4 + 72);
      }
      else
      {
        value = *(float *)(v4 + 64);
      }
      v11 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)&param->target_ptr);
      AbilityComp = Creature::getAbilityComp(v11);
      AbilityComp::createOrSetDynamicValue<float>(AbilityComp, (const std::string *)(v4 + 160), value);
      std::string::~string((void *)(v4 + 160));
    }
  }
  proto::AbilityActionSetCrashDamage::~AbilityActionSetCrashDamage((proto::AbilityActionSetCrashDamage *const)(v4 + 96));
LABEL_33:
  if ( v19 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = -168430091;
  }
};

// Line 3207: range 00000000136DF06A-00000000136DF19B
void __cdecl AbilityComp::resetAbilitySpecialHandler(
        AbilityComp *const this,
        const data::ResetAbilitySpecial *config_action,
        ActionParam *param)
{
  __m128i v3; // xmm0
  common::milog::MiLogStream *v4; // rcx
  ActorAbility *v5; // rax
  ActorAbility *v6; // rax
  common::milog::MiLogStream v8; // [rsp+30h] [rbp-30h] BYREF

  if ( std::operator==<ActorAbility>(0LL, &param->ability_ptr) )
  {
    common::milog::MiLogStream::create(
      &v8,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "resetAbilitySpecialHandler",
      3210);
    v4 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
           &v8,
           (const char (*)[23])"ability_ptr is nullptr");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v4, this->creature_);
    common::milog::MiLogStream::~MiLogStream(&v8);
  }
  else
  {
    v5 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)param);
    *(float *)v3.m128i_i32 = ActorAbility::getSpecialFloatParam(v5, &config_action->value_name);
    v6 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)param);
    ActorAbility::setServerFloatParam(v6, &config_action->key_name, COERCE_FLOAT(_mm_cvtsi128_si32(v3)));
  }
};

// Line 3218: range 00000000136DF19C-00000000136DF23C
void __cdecl AbilityComp::changeTag(AbilityComp *const this, const data::ChangeTag *config_action, ActionParam *param)
{
  Creature *creature; // rdi

  if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->creature_);
  creature = this->creature_;
  if ( *(char *)(((unsigned __int64)&config_action->is_add >> 3) + 0x7FFF8000) < 0 )
  {
    creature = (Creature *)&config_action->is_add;
    __asan_report_load1(&config_action->is_add);
  }
  Creature::changeTag(creature, config_action->is_add, &config_action->tag, 1);
};

// Line 3223: range 00000000136DF23E-00000000136DFC1B
void __cdecl AbilityComp::serverMonsterLogHandler(
        AbilityComp *const this,
        const data::ServerMonsterLog *config_action,
        ActionParam *param)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rcx
  common::milog::MiLogStream *v7; // rcx
  std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  Player *v10; // rax
  DungeonScene *v11; // rax
  const std::string *v12; // rax
  Player *v13; // rax
  BaseScenePlayBattle *v14; // rax
  const std::string *v15; // rax
  Player *v16; // rax
  PlayerBasicComp *BasicComp; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyMonsterStateChange,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyMonsterStateChange,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyMonsterStateChange,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyMonsterStateChange,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  std::__shared_ptr_access<proto_log::PlayerLogBodyMonsterStateChange,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v22; // rax
  google::protobuf::RepeatedField<int> *v23; // r14
  const google::protobuf::RepeatedField<int> *v24; // rax
  Player *v25; // r14
  std::string v26; // [rsp+0h] [rbp-250h]
  ActionParam *parama; // [rsp+8h] [rbp-248h]
  google::protobuf::uint32 group_id; // [rsp+28h] [rbp-228h]
  google::protobuf::uint32 monster_id; // [rsp+2Ch] [rbp-224h]
  const proto::AbilityInvokeEntry *entry_ptr; // [rsp+30h] [rbp-220h]
  const std::string *ability_data_str; // [rsp+38h] [rbp-218h]
  std::shared_ptr<google::protobuf::Message> p_body_ptr; // [rsp+40h] [rbp-210h] BYREF
  std::shared_ptr<google::protobuf::Message> p_body_ext_ptr; // [rsp+50h] [rbp-200h] BYREF
  common::milog::MiLogStream v34; // [rsp+60h] [rbp-1F0h] BYREF
  char v35[464]; // [rsp+80h] [rbp-1D0h] BYREF

  *(&v26._anon_0._M_allocated_capacity + 1) = (std::string::size_type)this;
  v26._anon_0._M_allocated_capacity = (std::string::size_type)config_action;
  v26._M_string_length = (std::string::size_type)param;
  v3 = (unsigned __int64)v35;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(416LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "9 32 1 11 holder:3267 48 16 16 monster_ptr:3242 80 16 14 group_ptr:3249 112 16 22 dungeon_scene_"
                        "ptr:3256 144 16 26 scene_play_battle_ptr:3262 176 16 12 log_ptr:3268 208 32 24 dungeon_transacti"
                        "on:3255 272 32 24 mp_play_transaction:3261 336 40 28 meta_action_monster_log:3236";
  *(_QWORD *)(v3 + 16) = AbilityComp::serverMonsterLogHandler;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61953;
  v5[536862722] = 62194;
  v5[536862723] = 62194;
  v5[536862724] = 62194;
  v5[536862725] = 62194;
  v5[536862726] = 62194;
  v5[536862727] = -219021312;
  v5[536862728] = 62194;
  v5[536862729] = -219021312;
  v5[536862730] = 62194;
  v5[536862731] = -218103808;
  v5[536862732] = -202116109;
  if ( std::operator==<Player>(0LL, (const std::shared_ptr<Player> *)(v26._M_string_length + 72)) )
  {
    common::milog::MiLogStream::create(
      &v34,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "serverMonsterLogHandler",
      3226);
    common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(&v34, (const char (*)[24])"from player ptr is null");
    common::milog::MiLogStream::~MiLogStream(&v34);
  }
  else
  {
    if ( *(_BYTE *)(((v26._M_string_length + 64) >> 3) + 0x7FFF8000) )
      __asan_report_load8(v26._M_string_length + 64);
    entry_ptr = *(const proto::AbilityInvokeEntry **)(v26._M_string_length + 64);
    if ( entry_ptr )
    {
      ability_data_str = proto::AbilityInvokeEntry::ability_data[abi:cxx11](entry_ptr);
      proto::AbilityActionServerMonsterLog::AbilityActionServerMonsterLog((proto::AbilityActionServerMonsterLog *const)(v3 + 336));
      if ( (unsigned __int8)google::protobuf::MessageLite::ParseFromString(v3 + 336, ability_data_str) != 1 )
      {
        common::milog::MiLogStream::create(
          &v34,
          &common::milog::MiLogDefault::default_log_obj_,
          0x13u,
          "./src/ability/ability_comp.cpp",
          "serverMonsterLogHandler",
          3239);
        v7 = common::milog::MiLogStream::operator<<<char [53],(char *[53])0>(
               &v34,
               (const char (*)[53])"AbilityActionServerMonsterLog ParseFromString failds");
        if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->creature_);
        common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v7, this->creature_);
        common::milog::MiLogStream::~MiLogStream(&v34);
      }
      else
      {
        std::dynamic_pointer_cast<Monster,Creature>((const std::shared_ptr<Creature> *)(v3 + 48));
        if ( std::operator==<Monster>(0LL, (const std::shared_ptr<Monster> *)(v3 + 48)) )
        {
          common::milog::MiLogStream::create(
            &v34,
            &common::milog::MiLogDefault::default_log_obj_,
            0x13u,
            "./src/ability/ability_comp.cpp",
            "serverMonsterLogHandler",
            3245);
          common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
            &v34,
            (const char (*)[30])"source ptr is not monster ptr");
          common::milog::MiLogStream::~MiLogStream(&v34);
        }
        else
        {
          group_id = 0;
          std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 48));
          Entity::getGroup((const Entity *const)(v3 + 80));
          if ( std::operator!=<Group>(0LL, (const std::shared_ptr<Group> *)(v3 + 80)) )
          {
            v8 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80));
            group_id = Group::getGroupId(v8);
          }
          v9 = std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 48));
          monster_id = Monster::getMonsterId(v9);
          std::string::basic_string(v3 + 208);
          v10 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v26._M_string_length + 72));
          Player::getDungeonComp(v10);
          PlayerDungeonComp::getCurDungeon((PlayerDungeonComp *const)(v3 + 112));
          if ( std::operator!=<DungeonScene>(0LL, (const std::shared_ptr<DungeonScene> *)(v3 + 112)) )
          {
            v11 = std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
            v12 = DungeonScene::getTransaction[abi:cxx11](v11);
            std::string::operator=(v3 + 208, v12);
          }
          std::string::basic_string(v3 + 272);
          v13 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v26._M_string_length + 72));
          Player::getScenePlayComp(v13);
          PlayerScenePlayComp::getCurScenePlayBattle((PlayerScenePlayComp *const)(v3 + 144));
          if ( std::operator!=<BaseScenePlayBattle>(0LL, (const std::shared_ptr<BaseScenePlayBattle> *)(v3 + 144)) )
          {
            v14 = std::__shared_ptr_access<BaseScenePlayBattle,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BaseScenePlayBattle,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 144));
            v15 = BaseScenePlayBattle::getTransaction[abi:cxx11](v14);
            std::string::operator=(v3 + 272, v15);
          }
          v16 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v26._M_string_length + 72));
          BasicComp = Player::getBasicComp(v16);
          PlayerBasicComp::getNextTransNo[abi:cxx11]((std::string *)&v34, BasicComp);
          StatLogUtils::ContextHolder::ContextHolder((StatLogUtils::ContextHolder *const)(v3 + 32), 0x5F8u, v26);
          std::string::~string(&v34);
          common::tools::perf::make_shared<proto_log::PlayerLogBodyMonsterStateChange>();
          v18 = std::__shared_ptr_access<proto_log::PlayerLogBodyMonsterStateChange,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyMonsterStateChange,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 176));
          proto_log::PlayerLogBodyMonsterStateChange::set_group_id(v18, group_id);
          v19 = std::__shared_ptr_access<proto_log::PlayerLogBodyMonsterStateChange,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyMonsterStateChange,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 176));
          proto_log::PlayerLogBodyMonsterStateChange::set_monster_id(v19, monster_id);
          v20 = std::__shared_ptr_access<proto_log::PlayerLogBodyMonsterStateChange,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyMonsterStateChange,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 176));
          proto_log::PlayerLogBodyMonsterStateChange::set_dungeon_transaction(v20, (const std::string *)(v3 + 208));
          v21 = std::__shared_ptr_access<proto_log::PlayerLogBodyMonsterStateChange,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyMonsterStateChange,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 176));
          proto_log::PlayerLogBodyMonsterStateChange::set_mp_play_transaction(v21, (const std::string *)(v3 + 272));
          v22 = std::__shared_ptr_access<proto_log::PlayerLogBodyMonsterStateChange,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto_log::PlayerLogBodyMonsterStateChange,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 176));
          v23 = proto_log::PlayerLogBodyMonsterStateChange::mutable_param_list(v22);
          v24 = proto::AbilityActionServerMonsterLog::param_list((const proto::AbilityActionServerMonsterLog *const)(v3 + 336));
          google::protobuf::RepeatedField<int>::CopyFrom(v23, v24);
          v25 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)&parama->from_player_ptr);
          std::shared_ptr<google::protobuf::Message>::shared_ptr(&p_body_ext_ptr, 0LL);
          std::shared_ptr<google::protobuf::Message>::shared_ptr<proto_log::PlayerLogBodyMonsterStateChange,void>(
            &p_body_ptr,
            (const std::shared_ptr<proto_log::PlayerLogBodyMonsterStateChange> *)(v3 + 176));
          Player::printStatLog(v25, &p_body_ptr, &p_body_ext_ptr, 0xEu);
          std::shared_ptr<google::protobuf::Message>::~shared_ptr(&p_body_ptr);
          std::shared_ptr<google::protobuf::Message>::~shared_ptr(&p_body_ext_ptr);
          std::shared_ptr<proto_log::PlayerLogBodyMonsterStateChange>::~shared_ptr((std::shared_ptr<proto_log::PlayerLogBodyMonsterStateChange> *const)(v3 + 176));
          StatLogUtils::ContextHolder::~ContextHolder((StatLogUtils::ContextHolder *const)(v3 + 32));
          std::shared_ptr<BaseScenePlayBattle>::~shared_ptr((std::shared_ptr<BaseScenePlayBattle> *const)(v3 + 144));
          std::string::~string((void *)(v3 + 272));
          std::shared_ptr<DungeonScene>::~shared_ptr((std::shared_ptr<DungeonScene> *const)(v3 + 112));
          std::string::~string((void *)(v3 + 208));
          std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v3 + 80));
        }
        std::shared_ptr<Monster>::~shared_ptr((std::shared_ptr<Monster> *const)(v3 + 48));
      }
      proto::AbilityActionServerMonsterLog::~AbilityActionServerMonsterLog((proto::AbilityActionServerMonsterLog *const)(v3 + 336));
    }
    else
    {
      common::milog::MiLogStream::create(
        &v34,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "serverMonsterLogHandler",
        3232);
      v6 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
             &v34,
             (const char (*)[18])"entry_ptr is null");
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v6, this->creature_);
      common::milog::MiLogStream::~MiLogStream(&v34);
    }
  }
  if ( v35 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8030) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8030) = -168430091;
  }
};

// Line 3278: range 00000000136DFC1C-00000000136E04C8
void __cdecl AbilityComp::reviveStaminaHandler(
        AbilityComp *const this,
        const data::ReviveStamina *config_action,
        ActionParam *param)
{
  __m128i v3; // xmm0
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rcx
  ActorAbility *v8; // r14
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rcx
  common::milog::MiLogStream *v12; // rcx
  GadgetVehicleComp *v13; // rax
  Avatar *v14; // rax
  unsigned __int64 v15; // rax
  unsigned __int64 v16; // rdx
  common::milog::MiLogStream *v17; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // rax
  Entity *v19; // rax
  std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  Player *v22; // rax
  PlayerBasicComp *BasicComp; // rax
  common::milog::MiLogStream v25; // [rsp+20h] [rbp-130h] BYREF
  char v26[272]; // [rsp+40h] [rbp-110h] BYREF

  v4 = (unsigned __int64)v26;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(224LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "5 48 4 10 value:3284 64 16 15 avatar_ptr:3290 96 16 15 gadget_ptr:3294 128 16 15 player_ptr:3310"
                        " 160 28 25 stamina_change_param:3316";
  *(_QWORD *)(v4 + 16) = AbilityComp::reviveStaminaHandler;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -219021312;
  v6[536862723] = -219021312;
  v6[536862724] = -219021312;
  v6[536862725] = 0x4000000;
  v6[536862726] = -202116109;
  if ( std::operator==<ActorAbility>(0LL, &param->ability_ptr) )
  {
    common::milog::MiLogStream::create(
      &v25,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "reviveStaminaHandler",
      3281);
    v7 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
           &v25,
           (const char (*)[23])"ability_ptr is nullptr");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
LABEL_7:
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v7, this->creature_);
    common::milog::MiLogStream::~MiLogStream(&v25);
    goto LABEL_35;
  }
  v8 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)param);
  std::shared_ptr<DieCreatureRecord>::shared_ptr((std::shared_ptr<DieCreatureRecord> *const)(v4 + 128), 0LL);
  std::shared_ptr<Creature>::shared_ptr((std::shared_ptr<Creature> *const)(v4 + 96), 0LL);
  *(float *)v3.m128i_i32 = ActorAbility::evaluate(
                             v8,
                             &config_action->value,
                             (CreaturePtr *)(v4 + 96),
                             (DieCreatureRecordPtr *)(v4 + 128));
  *(_DWORD *)(v4 + 48) = _mm_cvtsi128_si32(v3);
  std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v4 + 96));
  std::shared_ptr<DieCreatureRecord>::~shared_ptr((std::shared_ptr<DieCreatureRecord> *const)(v4 + 128));
  if ( *(float *)(v4 + 48) <= 0.0 )
  {
    common::milog::MiLogStream::create(
      &v25,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "reviveStaminaHandler",
      3287);
    v9 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(&v25, (const char (*)[10])"recover: ");
    v10 = common::milog::MiLogStream::operator<<<float,(float *)0>(v9, (const float *)(v4 + 48));
    v7 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v10, (const char (*)[12])" creature: ");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    goto LABEL_7;
  }
  std::dynamic_pointer_cast<Avatar,Creature>((const std::shared_ptr<Creature> *)(v4 + 64));
  if ( std::operator==<Avatar>(0LL, (const std::shared_ptr<Avatar> *)(v4 + 64)) )
  {
    std::dynamic_pointer_cast<Gadget,Creature>((const std::shared_ptr<Creature> *)(v4 + 96));
    if ( std::operator==<Gadget>(0LL, (const std::shared_ptr<Gadget> *)(v4 + 96)) )
    {
      common::milog::MiLogStream::create(
        &v25,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "reviveStaminaHandler",
        3297);
      v11 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
              &v25,
              (const char (*)[37])"is not avatar nor vehicle creature: ");
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v11, this->creature_);
      common::milog::MiLogStream::~MiLogStream(&v25);
    }
    else
    {
      std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
      EcsBase<Gadget,GadgetCompBase,28u>::findComp<GadgetVehicleComp>((const EcsBase<Gadget,GadgetCompBase,28> *const)(v4 + 128));
      if ( std::operator==<GadgetVehicleComp>(0LL, (const std::shared_ptr<GadgetVehicleComp> *)(v4 + 128)) )
      {
        common::milog::MiLogStream::create(
          &v25,
          &common::milog::MiLogDefault::default_log_obj_,
          0x13u,
          "./src/ability/ability_comp.cpp",
          "reviveStaminaHandler",
          3303);
        v12 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                &v25,
                (const char (*)[26])"is not vehicle creature: ");
        if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->creature_);
        common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v12, this->creature_);
        common::milog::MiLogStream::~MiLogStream(&v25);
      }
      else
      {
        v13 = std::__shared_ptr_access<GadgetVehicleComp,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<GadgetVehicleComp,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
        GadgetVehicleComp::changeCurStamina(v13, *(float *)(v4 + 48), 1);
      }
      std::shared_ptr<GadgetVehicleComp>::~shared_ptr((std::shared_ptr<GadgetVehicleComp> *const)(v4 + 128));
    }
    std::shared_ptr<Gadget>::~shared_ptr((std::shared_ptr<Gadget> *const)(v4 + 96));
  }
  else
  {
    v14 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
    Avatar::updateStaminaRecover(v14, (float *)(v4 + 48), 0LL);
    v15 = (unsigned __int64)std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
    if ( *(_BYTE *)((v15 >> 3) + 0x7FFF8000) )
      v15 = __asan_report_load8(v15);
    v16 = *(_QWORD *)v15 + 152LL;
    if ( *(_BYTE *)((v16 >> 3) + 0x7FFF8000) )
      v15 = __asan_report_load8(*(_QWORD *)v15 + 152LL);
    (*(void (__fastcall **)(unsigned __int64, unsigned __int64))v16)(v4 + 128, v15);
    if ( std::operator==<Player>(0LL, (const std::shared_ptr<Player> *)(v4 + 128)) )
    {
      common::milog::MiLogStream::create(
        &v25,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "reviveStaminaHandler",
        3313);
      v17 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
              &v25,
              (const char (*)[32])"avatar get player null, avatar:");
      v18 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
      common::milog::MiLogStream::operator<<<Avatar,(Avatar*)0>(v17, v18);
      common::milog::MiLogStream::~MiLogStream(&v25);
    }
    else
    {
      *(_QWORD *)(v4 + 160) = 0LL;
      *(_QWORD *)(v4 + 168) = 0LL;
      *(_QWORD *)(v4 + 176) = 0LL;
      *(_DWORD *)(v4 + 184) = 0;
      *(_DWORD *)(v4 + 160) = 9;
      v19 = (Entity *)std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
      *(_DWORD *)(v4 + 164) = Entity::getMotionState(v19);
      v20 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)param);
      *(_DWORD *)(v4 + 172) = ActorAbility::getAbilityNameHash(v20);
      if ( std::operator!=<ActorModifier>(0LL, &param->modifier_ptr) )
      {
        v21 = std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)&param->modifier_ptr);
        *(_DWORD *)(v4 + 176) = ActorModifier::getModifierNameHash(v21);
      }
      v22 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 128));
      BasicComp = Player::getBasicComp(v22);
      PlayerBasicComp::changeCurStamina(BasicComp, *(float *)(v4 + 48), (const StaminaChangeParam *)(v4 + 160), 1);
    }
    std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v4 + 128));
  }
  std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 64));
LABEL_35:
  if ( v26 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = -168430091;
  }
};

// Line 3328: range 00000000136E04CA-00000000136E0D14
void __cdecl AbilityComp::deductStaminaHandler(
        AbilityComp *const this,
        const data::DeductStamina *config_action,
        ActionParam *param)
{
  __m128i v3; // xmm0
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rcx
  ActorAbility *v8; // r14
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rcx
  common::milog::MiLogStream *v12; // rcx
  common::milog::MiLogStream *v13; // rcx
  Avatar *v14; // rax
  Entity *v15; // rax
  std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  Avatar *v18; // rax
  bool is_swim; // [rsp+2Fh] [rbp-151h]
  const proto::AbilityInvokeEntry *entry_ptr; // [rsp+30h] [rbp-150h]
  const std::string *ability_data_str; // [rsp+38h] [rbp-148h]
  std::shared_ptr<Creature> p_global_value_source_ptr; // [rsp+40h] [rbp-140h] BYREF
  common::milog::MiLogStream v24; // [rsp+50h] [rbp-130h] BYREF
  char v25[272]; // [rsp+70h] [rbp-110h] BYREF

  v4 = (unsigned __int64)v25;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(224LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 48 4 10 value:3334 64 16 15 avatar_ptr:3354 96 24 31 meta_action_deduct_stamina:3347 160 28 25"
                        " stamina_change_param:3361";
  *(_QWORD *)(v4 + 16) = AbilityComp::deductStaminaHandler;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -219021312;
  v6[536862723] = -234881024;
  v6[536862724] = -218959118;
  v6[536862725] = 0x4000000;
  v6[536862726] = -202116109;
  if ( std::operator==<ActorAbility>(0LL, &param->ability_ptr) )
  {
    common::milog::MiLogStream::create(
      &v24,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "deductStaminaHandler",
      3331);
    v7 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
           &v24,
           (const char (*)[23])"ability_ptr is nullptr");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v7, this->creature_);
    common::milog::MiLogStream::~MiLogStream(&v24);
    goto LABEL_31;
  }
  v8 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)param);
  std::shared_ptr<DieCreatureRecord>::shared_ptr((std::shared_ptr<DieCreatureRecord> *const)(v4 + 64), 0LL);
  std::shared_ptr<Creature>::shared_ptr(&p_global_value_source_ptr, 0LL);
  *(float *)v3.m128i_i32 = ActorAbility::evaluate(
                             v8,
                             &config_action->value,
                             &p_global_value_source_ptr,
                             (DieCreatureRecordPtr *)(v4 + 64));
  *(_DWORD *)(v4 + 48) = _mm_cvtsi128_si32(v3);
  std::shared_ptr<Creature>::~shared_ptr(&p_global_value_source_ptr);
  std::shared_ptr<DieCreatureRecord>::~shared_ptr((std::shared_ptr<DieCreatureRecord> *const)(v4 + 64));
  if ( *(float *)(v4 + 48) <= 0.0 )
  {
    common::milog::MiLogStream::create(
      &v24,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "deductStaminaHandler",
      3337);
    v9 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(&v24, (const char (*)[10])"recover: ");
    v10 = common::milog::MiLogStream::operator<<<float,(float *)0>(v9, (const float *)(v4 + 48));
    v11 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v10, (const char (*)[12])" creature: ");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
LABEL_11:
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v11, this->creature_);
    common::milog::MiLogStream::~MiLogStream(&v24);
    goto LABEL_31;
  }
  if ( *(_BYTE *)(((unsigned __int64)&param->entry_ptr >> 3) + 0x7FFF8000) )
    __asan_report_load8(&param->entry_ptr);
  entry_ptr = param->entry_ptr;
  if ( !entry_ptr )
  {
    common::milog::MiLogStream::create(
      &v24,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "deductStaminaHandler",
      3343);
    v11 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(&v24, (const char (*)[18])"entry_ptr is null");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    goto LABEL_11;
  }
  ability_data_str = proto::AbilityInvokeEntry::ability_data[abi:cxx11](entry_ptr);
  proto::AbilityActionDeductStamina::AbilityActionDeductStamina((proto::AbilityActionDeductStamina *const)(v4 + 96));
  if ( (unsigned __int8)google::protobuf::MessageLite::ParseFromString(v4 + 96, ability_data_str) != 1 )
  {
    common::milog::MiLogStream::create(
      &v24,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "deductStaminaHandler",
      3350);
    v12 = common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(
            &v24,
            (const char (*)[49])"AbilityActionDeductStamina ParseFromString fails");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v12, this->creature_);
    common::milog::MiLogStream::~MiLogStream(&v24);
  }
  else
  {
    is_swim = proto::AbilityActionDeductStamina::is_swim((const proto::AbilityActionDeductStamina *const)(v4 + 96));
    std::dynamic_pointer_cast<Avatar,Creature>((const std::shared_ptr<Creature> *)(v4 + 64));
    if ( std::operator==<Avatar>(0LL, (const std::shared_ptr<Avatar> *)(v4 + 64)) )
    {
      common::milog::MiLogStream::create(
        &v24,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "deductStaminaHandler",
        3357);
      v13 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
              &v24,
              (const char (*)[25])"is not avatar creature: ");
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v13, this->creature_);
      common::milog::MiLogStream::~MiLogStream(&v24);
    }
    else
    {
      v14 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
      Avatar::updateStaminaCost(v14, (float *)(v4 + 48), 0LL);
      *(_QWORD *)(v4 + 160) = 0LL;
      *(_QWORD *)(v4 + 168) = 0LL;
      *(_QWORD *)(v4 + 176) = 0LL;
      *(_DWORD *)(v4 + 184) = 0;
      *(_DWORD *)(v4 + 160) = 9;
      v15 = (Entity *)std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
      *(_DWORD *)(v4 + 164) = Entity::getMotionState(v15);
      v16 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)param);
      *(_DWORD *)(v4 + 172) = ActorAbility::getAbilityNameHash(v16);
      if ( std::operator!=<ActorModifier>(0LL, &param->modifier_ptr) )
      {
        v17 = std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)&param->modifier_ptr);
        *(_DWORD *)(v4 + 176) = ActorModifier::getModifierNameHash(v17);
      }
      v18 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
      Avatar::changeStamina(v18, -*(float *)(v4 + 48), (const StaminaChangeParam *)(v4 + 160), is_swim);
    }
    std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v4 + 64));
  }
  proto::AbilityActionDeductStamina::~AbilityActionDeductStamina((proto::AbilityActionDeductStamina *const)(v4 + 96));
LABEL_31:
  if ( v25 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = -168430091;
  }
};

// Line 3373: range 00000000136E0D16-00000000136E120B
void __cdecl AbilityComp::killServerGadgetHandler(
        AbilityComp *const this,
        const data::KillServerGadget *config_action,
        ActionParam *param)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::__shared_ptr_access<data::SelectTargetsByChildren,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  Creature *v7; // rax
  const std::weak_ptr<Creature> *v8; // rax
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  uint32_t gadget_id; // [rsp+24h] [rbp-14Ch]
  std::set<std::weak_ptr<Creature>,std::owner_less<std::weak_ptr<Creature> >,std::allocator<std::weak_ptr<Creature> > >::iterator __for_begin; // [rsp+28h] [rbp-148h] BYREF
  std::set<std::weak_ptr<Creature>,std::owner_less<std::weak_ptr<Creature> >,std::allocator<std::weak_ptr<Creature> > >::iterator __for_end; // [rsp+30h] [rbp-140h] BYREF
  std::set<std::weak_ptr<Creature>,std::owner_less<std::weak_ptr<Creature> >,std::allocator<std::weak_ptr<Creature> > > *__for_range; // [rsp+38h] [rbp-138h]
  common::milog::MiLogStream v16; // [rsp+40h] [rbp-130h] BYREF
  char v17[272]; // [rsp+60h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 48 16 17 creature_wtr:3386 80 16 17 creature_ptr:3388 112 16 15 gadget_ptr:3393 144 48 17 creature_set:3385";
  *(_QWORD *)(v3 + 16) = AbilityComp::killServerGadgetHandler;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61937;
  v5[536862722] = 62194;
  v5[536862723] = 62194;
  v5[536862724] = 62194;
  v5[536862726] = -202116109;
  if ( std::operator==<Creature>(0LL, &param->target_ptr) )
  {
    common::milog::MiLogStream::create(
      &v16,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "killServerGadgetHandler",
      3376);
    common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(&v16, (const char (*)[18])"target is nullptr");
    common::milog::MiLogStream::~MiLogStream(&v16);
  }
  else if ( std::operator==<data::SelectTargetsByChildren>(0LL, &config_action->gadget_info) )
  {
    common::milog::MiLogStream::create(
      &v16,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "killServerGadgetHandler",
      3381);
    common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
      &v16,
      (const char (*)[37])"KillServerGadget gadget_info is null");
    common::milog::MiLogStream::~MiLogStream(&v16);
  }
  else
  {
    v6 = std::__shared_ptr_access<data::SelectTargetsByChildren,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::SelectTargetsByChildren,(__gnu_cxx::_Lock_policy)2,false,false> *const)&config_action->gadget_info);
    if ( *(_BYTE *)(((unsigned __int64)&v6->config_id >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&v6->config_id >> 3) + 0x7FFF8000) <= 3 )
    {
      v6 = (std::__shared_ptr_access<data::SelectTargetsByChildren,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *)__asan_report_load4(&v6->config_id);
    }
    gadget_id = v6->config_id;
    v7 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)&param->target_ptr);
    Creature::getSubCreatureSet(
      (std::set<std::weak_ptr<Creature>,std::owner_less<std::weak_ptr<Creature> >,std::allocator<std::weak_ptr<Creature> > > *)(v3 + 144),
      v7);
    __for_range = (std::set<std::weak_ptr<Creature>,std::owner_less<std::weak_ptr<Creature> >,std::allocator<std::weak_ptr<Creature> > > *)(v3 + 144);
    __for_begin._M_node = std::set<std::weak_ptr<Creature>,std::owner_less<std::weak_ptr<Creature>>,std::allocator<std::weak_ptr<Creature>>>::begin((const std::set<std::weak_ptr<Creature>,std::owner_less<std::weak_ptr<Creature> >,std::allocator<std::weak_ptr<Creature> > > *const)(v3 + 144))._M_node;
    __for_end._M_node = std::set<std::weak_ptr<Creature>,std::owner_less<std::weak_ptr<Creature>>,std::allocator<std::weak_ptr<Creature>>>::end((const std::set<std::weak_ptr<Creature>,std::owner_less<std::weak_ptr<Creature> >,std::allocator<std::weak_ptr<Creature> > > *const)(v3 + 144))._M_node;
    while ( std::operator!=(&__for_begin, &__for_end) )
    {
      v8 = std::_Rb_tree_const_iterator<std::weak_ptr<Creature>>::operator*(&__for_begin);
      std::weak_ptr<Creature>::weak_ptr((std::weak_ptr<Creature> *const)(v3 + 48), v8);
      std::weak_ptr<Creature>::lock((const std::weak_ptr<Creature> *const)(v3 + 80));
      if ( !std::operator==<Creature>(0LL, (const std::shared_ptr<Creature> *)(v3 + 80)) )
      {
        std::dynamic_pointer_cast<Gadget,Creature>((const std::shared_ptr<Creature> *)(v3 + 112));
        if ( !std::operator==<Gadget>(0LL, (const std::shared_ptr<Gadget> *)(v3 + 112)) )
        {
          v9 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
          if ( gadget_id == Gadget::getGadgetId(v9) )
          {
            v10 = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
            Creature::subCurHpToZero(v10, CHANGE_HP_SUB_ABILITY, 1);
          }
        }
        std::shared_ptr<Gadget>::~shared_ptr((std::shared_ptr<Gadget> *const)(v3 + 112));
      }
      std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 80));
      std::weak_ptr<Creature>::~weak_ptr((std::weak_ptr<Creature> *const)(v3 + 48));
      std::_Rb_tree_const_iterator<std::weak_ptr<Creature>>::operator++(&__for_begin);
    }
    std::set<std::weak_ptr<Creature>,std::owner_less<std::weak_ptr<Creature>>,std::allocator<std::weak_ptr<Creature>>>::~set((std::set<std::weak_ptr<Creature>,std::owner_less<std::weak_ptr<Creature> >,std::allocator<std::weak_ptr<Creature> > > *const)(v3 + 144));
  }
  if ( v17 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
};

// Line 3407: range 00000000136E12E0-00000000136E18E9
void __cdecl AbilityComp::getTeamTotalMaxEnergyToOverridemapHandler(
        AbilityComp *const this,
        const data::GetTeamTotalMaxEnergyToOverridemap *config_action,
        ActionParam *param)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rcx
  data::TeamType team_type; // eax
  Player *v8; // rax
  PlayerAvatarComp *v9; // r14
  Player *v10; // rax
  PlayerAvatarComp *AvatarComp; // r14
  common::milog::MiLogStream *v12; // r14
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  ActorAbility *v16; // rax
  char *val; // [rsp+28h] [rbp-B8h] BYREF
  common::milog::MiLogStream v19; // [rsp+30h] [rbp-B0h] BYREF
  char v20[144]; // [rsp+50h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 26 fight_prop_max_energy:3423 64 8 9 func:3424";
  *(_QWORD *)(v3 + 16) = AbilityComp::getTeamTotalMaxEnergyToOverridemapHandler;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116352;
  if ( (unsigned __int8)std::string::empty(&config_action->override_map_key) )
  {
    common::milog::MiLogStream::create(
      &v19,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "getTeamTotalMaxEnergyToOverridemapHandler",
      3410);
    common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
      &v19,
      (const char (*)[26])"override_map_key is empty");
    common::milog::MiLogStream::~MiLogStream(&v19);
  }
  else if ( std::operator==<Player>(&param->from_player_ptr, 0LL) )
  {
    common::milog::MiLogStream::create(
      &v19,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "getTeamTotalMaxEnergyToOverridemapHandler",
      3415);
    common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
      &v19,
      (const char (*)[27])"from_player_ptr is nullptr");
    common::milog::MiLogStream::~MiLogStream(&v19);
  }
  else if ( std::operator==<ActorAbility>(0LL, &param->ability_ptr) )
  {
    common::milog::MiLogStream::create(
      &v19,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "getTeamTotalMaxEnergyToOverridemapHandler",
      3420);
    v6 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
           &v19,
           (const char (*)[23])"ability_ptr is nullptr");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v6, this->creature_);
    common::milog::MiLogStream::~MiLogStream(&v19);
  }
  else
  {
    *(_DWORD *)(v3 + 48) = 0;
    *(_QWORD *)(v3 + 64) = v3 + 48;
    if ( *(_BYTE *)(((unsigned __int64)&config_action->team_type >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&config_action->team_type >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&config_action->team_type);
    }
    team_type = config_action->team_type;
    if ( team_type )
    {
      if ( team_type == BigTeam )
      {
        v10 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)&param->from_player_ptr);
        AvatarComp = Player::getAvatarComp(v10);
        std::function<ForeachPolicy ()(Avatar &)>::function<AbilityComp::getTeamTotalMaxEnergyToOverridemapHandler(data::GetTeamTotalMaxEnergyToOverridemap const&,ActionParam &)::{lambda(Avatar &)#1},void,void>(
          (std::function<ForeachPolicy(Avatar&)> *const)&v19,
          *(AbilityComp::getTeamTotalMaxEnergyToOverridemapHandler::<lambda(Avatar&)> *)(v3 + 64));
        PlayerAvatarComp::foreachAvatarInSceneTeam(AvatarComp, (std::function<ForeachPolicy(Avatar&)> *)&v19);
        std::function<ForeachPolicy ()(Avatar &)>::~function((std::function<ForeachPolicy(Avatar&)> *const)&v19);
      }
      else
      {
        common::milog::MiLogStream::create(
          &v19,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/ability/ability_comp.cpp",
          "getTeamTotalMaxEnergyToOverridemapHandler",
          3444);
        v12 = common::milog::MiLogStream::operator<<<char [67],(char *[67])0>(
                &v19,
                (const char (*)[67])"getTeamTotalMaxEnergyToOverridemapHandler not implement team_type:");
        if ( *(_BYTE *)(((unsigned __int64)&config_action->team_type >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&config_action->team_type >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&config_action->team_type);
        }
        val = (char *)data::enumValToStr(config_action->team_type);
        common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v12, (const char *const *)&val);
        common::milog::MiLogStream::~MiLogStream(&v19);
      }
    }
    else
    {
      v8 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)&param->from_player_ptr);
      v9 = Player::getAvatarComp(v8);
      std::function<ForeachPolicy ()(Avatar &)>::function<AbilityComp::getTeamTotalMaxEnergyToOverridemapHandler(data::GetTeamTotalMaxEnergyToOverridemap const&,ActionParam &)::{lambda(Avatar &)#1},void,void>(
        (std::function<ForeachPolicy(Avatar&)> *const)&v19,
        *(AbilityComp::getTeamTotalMaxEnergyToOverridemapHandler::<lambda(Avatar&)> *)(v3 + 64));
      PlayerAvatarComp::foreachMyAvatarInSceneTeam(v9, (std::function<ForeachPolicy(Avatar&)> *)&v19);
      std::function<ForeachPolicy ()(Avatar &)>::~function((std::function<ForeachPolicy(Avatar&)> *const)&v19);
    }
    common::milog::MiLogStream::create(
      &v19,
      &common::milog::MiLogDefault::default_log_obj_,
      0x11u,
      "./src/ability/ability_comp.cpp",
      "getTeamTotalMaxEnergyToOverridemapHandler",
      3449);
    v13 = common::milog::MiLogStream::operator<<<char [53],(char *[53])0>(
            &v19,
            (const char (*)[53])"GetTeamTotalMaxEnergyToOverridemap override_map_key:");
    v14 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v13, &config_action->override_map_key);
    v15 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v14, (const char (*)[8])" value:");
    common::milog::MiLogStream::operator<<<float,(float *)0>(v15, (const float *)(v3 + 48));
    common::milog::MiLogStream::~MiLogStream(&v19);
    v16 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)param);
    ActorAbility::setServerFloatParam(v16, &config_action->override_map_key, *(float *)(v3 + 48));
  }
  if ( v20 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 3424: range 00000000136E120C-00000000136E12DF
ForeachPolicy __cdecl AbilityComp::getTeamTotalMaxEnergyToOverridemapHandler(data::GetTeamTotalMaxEnergyToOverridemap const&,ActionParam &)::{lambda(Avatar &)#1}::operator()(
        const AbilityComp::getTeamTotalMaxEnergyToOverridemapHandler::<lambda(Avatar&)> *const __closure,
        Avatar *avatar)
{
  FightPropComp *FightPropComp; // rax
  float MaxEnergy; // xmm0_4
  float *fight_prop_max_energy; // rdx
  float v5; // xmm1_4
  float *v6; // rdx
  float v7; // xmm0_4

  FightPropComp = Creature::getFightPropComp(avatar);
  MaxEnergy = FightPropComp::getMaxEnergy(FightPropComp);
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8(__closure);
  fight_prop_max_energy = __closure->__fight_prop_max_energy;
  if ( *(_BYTE *)(((unsigned __int64)__closure->__fight_prop_max_energy >> 3) + 0x7FFF8000) != 0
    && (char)(((__int64)__closure->__fight_prop_max_energy & 7) + 3) >= *(_BYTE *)(((unsigned __int64)__closure->__fight_prop_max_energy >> 3)
                                                                                 + 0x7FFF8000) )
  {
    __asan_report_load4(__closure->__fight_prop_max_energy);
  }
  v5 = *fight_prop_max_energy;
  v6 = __closure->__fight_prop_max_energy;
  v7 = MaxEnergy + v5;
  if ( *(_BYTE *)(((unsigned __int64)__closure->__fight_prop_max_energy >> 3) + 0x7FFF8000) != 0
    && (char)(((__int64)__closure->__fight_prop_max_energy & 7) + 3) >= *(_BYTE *)(((unsigned __int64)__closure->__fight_prop_max_energy >> 3)
                                                                                 + 0x7FFF8000) )
  {
    __asan_report_store4(__closure->__fight_prop_max_energy);
  }
  *v6 = v7;
  return 0;
};

// Line 3456: range 00000000136E18EA-00000000136E2D46
void __cdecl AbilityComp::setOvergrowDamgeToGlobalValueHandler(
        AbilityComp *const this,
        const data::SetOvergrowDamgeToGlobalValue *config_action,
        ActionParam *param)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // r14
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  data::ReactionTriggerType reaction_trigger_type; // eax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  Creature *creature; // r14
  std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  common::milog::MiLogStream *v15; // r14
  std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // rax
  common::milog::MiLogStream *v19; // rcx
  unsigned __int64 v20; // rax
  unsigned __int64 v21; // rdx
  unsigned __int64 v22; // rax
  unsigned __int64 v23; // rdx
  char v24; // al
  __m128i v25; // xmm0
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v26; // rax
  const Vector3 *Position; // r15
  bool is_avatar; // [rsp+2Fh] [rbp-341h]
  float element_level_co; // [rsp+30h] [rbp-340h]
  const data::ElementDefine *element_define; // [rsp+38h] [rbp-338h]
  std::enable_shared_from_this<Entity> v34; // [rsp+40h] [rbp-330h] BYREF
  std::shared_ptr<Config> v35; // [rsp+50h] [rbp-320h] BYREF
  std::string v36; // [rsp+60h] [rbp-310h] BYREF
  std::string v37; // [rsp+80h] [rbp-2F0h] BYREF
  std::string v38; // [rsp+A0h] [rbp-2D0h] BYREF
  std::string v39; // [rsp+C0h] [rbp-2B0h] BYREF
  std::string v40; // [rsp+E0h] [rbp-290h] BYREF
  std::string v41; // [rsp+100h] [rbp-270h] BYREF
  std::string v42; // [rsp+120h] [rbp-250h] BYREF
  std::string v43; // [rsp+140h] [rbp-230h] BYREF
  common::milog::MiLogStream v44; // [rsp+160h] [rbp-210h] BYREF
  char v45[496]; // [rsp+180h] [rbp-1F0h] BYREF

  v3 = (unsigned __int64)v45;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(448LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "12 32 4 18 reaction_type:3484 48 4 7 B1:3554 64 4 21 element_critical:3555 80 4 26 element_criti"
                        "cal_hurt:3556 96 16 19 cur_avatar_ptr:3462 128 16 20 self_gadget_ptr:3468 160 16 15 caster_ptr:3"
                        "474 192 16 14 scene_ptr:3527 224 16 21 origin_owner_ptr:3540 256 32 30 base_reaction_damage_name"
                        ":3481 320 32 32 base_reaction_critical_name:3482 384 32 37 base_reaction_critical_hurt_name:3483";
  *(_QWORD *)(v3 + 16) = AbilityComp::setOvergrowDamgeToGlobalValueHandler;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -234556924;
  v5[536862723] = -219021312;
  v5[536862724] = -219021312;
  v5[536862725] = -219021312;
  v5[536862726] = -219021312;
  v5[536862727] = -219021312;
  v5[536862729] = -218959118;
  v5[536862731] = -218959118;
  v5[536862733] = -202116109;
  if ( std::operator==<Player>(&param->from_player_ptr, 0LL) )
  {
    common::milog::MiLogStream::create(
      &v44,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "setOvergrowDamgeToGlobalValueHandler",
      3459);
    common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(&v44, (const char (*)[24])"from_player_ptr is null");
    common::milog::MiLogStream::~MiLogStream(&v44);
    goto LABEL_74;
  }
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)&param->from_player_ptr);
  Player::getCurAvatar((Player *const)(v3 + 96));
  if ( !std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v3 + 96), 0LL) )
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    std::enable_shared_from_this<Entity>::shared_from_this(&v34);
    std::dynamic_pointer_cast<Gadget,Entity>((const std::shared_ptr<Entity> *)(v3 + 128));
    std::shared_ptr<Entity>::~shared_ptr((std::shared_ptr<Entity> *const)&v34);
    if ( std::operator==<Gadget>((const std::shared_ptr<Gadget> *)(v3 + 128), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v44,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "setOvergrowDamgeToGlobalValueHandler",
        3471);
      v6 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
             &v44,
             (const char (*)[35])"creature is not gadget, entity_id:");
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      *(_DWORD *)(v3 + 80) = Entity::getEntityId((const Entity *const)this->creature_);
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, (const unsigned int *)(v3 + 80));
      common::milog::MiLogStream::~MiLogStream(&v44);
LABEL_72:
      std::shared_ptr<Gadget>::~shared_ptr((std::shared_ptr<Gadget> *const)(v3 + 128));
      goto LABEL_73;
    }
    std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
    Gadget::getPropOwner((const Gadget *const)(v3 + 160));
    if ( std::operator==<Creature>((const std::shared_ptr<Creature> *)(v3 + 160), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v44,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/ability/ability_comp.cpp",
        "setOvergrowDamgeToGlobalValueHandler",
        3477);
      common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(&v44, (const char (*)[19])"prop_owner is null");
      common::milog::MiLogStream::~MiLogStream(&v44);
    }
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v35);
    v7 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v35);
    element_define = JsonConfigMgr::getElementDefine(&v7->design_config.json_config_mgr);
    std::shared_ptr<Config>::~shared_ptr(&v35);
    std::string::basic_string(v3 + 256);
    std::string::basic_string(v3 + 320);
    std::string::basic_string(v3 + 384);
    *(_DWORD *)(v3 + 32) = 0;
    if ( *(_BYTE *)(((unsigned __int64)&config_action->reaction_trigger_type >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&config_action->reaction_trigger_type >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&config_action->reaction_trigger_type);
    }
    reaction_trigger_type = config_action->reaction_trigger_type;
    if ( reaction_trigger_type != MushroomVariation )
    {
      if ( reaction_trigger_type > MushroomVariation )
      {
LABEL_31:
        common::milog::MiLogStream::create(
          &v44,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/ability/ability_comp.cpp",
          "setOvergrowDamgeToGlobalValueHandler",
          3522);
        v19 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                &v44,
                (const char (*)[31])"invalid reaction_trigger_type:");
        if ( *(_BYTE *)(((unsigned __int64)&config_action->reaction_trigger_type >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&config_action->reaction_trigger_type >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&config_action->reaction_trigger_type);
        }
        *(_DWORD *)(v3 + 80) = config_action->reaction_trigger_type;
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, (const unsigned int *)(v3 + 80));
        common::milog::MiLogStream::~MiLogStream(&v44);
        goto LABEL_34;
      }
      if ( reaction_trigger_type == Electric_2 )
      {
        std::operator+<char>((std::string *)&v44, &element_define->ABILITY_OVERGROW_MUSHROOM_ELECTRIC, 95);
        std::operator+<char>(&v42, (std::string *)&v44, &element_define->SUFFIX_REACTION_DAMAGE);
        std::string::operator=(v3 + 256, &v42);
        std::string::~string(&v42);
        std::string::~string(&v44);
        ServiceBox::findService<GameserverService>();
        GameserverService::getConfig((GameserverService *const)(v3 + 224));
        v17 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
        JsonConfigMgr::getAbilityReactionCriticalName(
          &v43,
          &v17->design_config.json_config_mgr,
          &element_define->ABILITY_OVERGROW_MUSHROOM_ELECTRIC);
        std::string::operator=(v3 + 320, &v43);
        std::string::~string(&v43);
        std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 224));
        ServiceBox::findService<GameserverService>();
        GameserverService::getConfig((GameserverService *const)(v3 + 224));
        v18 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
        JsonConfigMgr::getAbilityReactionCriticalHurtName(
          (std::string *)&v44,
          &v18->design_config.json_config_mgr,
          &element_define->ABILITY_OVERGROW_MUSHROOM_ELECTRIC);
        std::string::operator=(v3 + 384, &v44);
        std::string::~string(&v44);
        std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 224));
        *(_DWORD *)(v3 + 32) = 37;
        goto LABEL_34;
      }
      if ( reaction_trigger_type )
      {
        if ( reaction_trigger_type == Fire_2 )
        {
          std::operator+<char>((std::string *)&v44, &element_define->ABILITY_OVERGROW_MUSHROOM_FIRE, 95);
          std::operator+<char>(&v39, (std::string *)&v44, &element_define->SUFFIX_REACTION_DAMAGE);
          std::string::operator=(v3 + 256, &v39);
          std::string::~string(&v39);
          std::string::~string(&v44);
          ServiceBox::findService<GameserverService>();
          GameserverService::getConfig((GameserverService *const)(v3 + 224));
          v11 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
          JsonConfigMgr::getAbilityReactionCriticalName(
            &v40,
            &v11->design_config.json_config_mgr,
            &element_define->ABILITY_OVERGROW_MUSHROOM_FIRE);
          std::string::operator=(v3 + 320, &v40);
          std::string::~string(&v40);
          std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 224));
          ServiceBox::findService<GameserverService>();
          GameserverService::getConfig((GameserverService *const)(v3 + 224));
          v12 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
          JsonConfigMgr::getAbilityReactionCriticalHurtName(
            &v41,
            &v12->design_config.json_config_mgr,
            &element_define->ABILITY_OVERGROW_MUSHROOM_FIRE);
          std::string::operator=(v3 + 384, &v41);
          std::string::~string(&v41);
          std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 224));
          *(_DWORD *)(v3 + 32) = 36;
          if ( std::operator!=<ActorModifier>(0LL, &param->modifier_ptr) )
          {
            if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
              __asan_report_load8(&this->creature_);
            creature = this->creature_;
            v14 = std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)&param->modifier_ptr);
            ActorModifier::getApplyEntityId(v14);
            Entity::findEntityInSameScene<Creature>((const Entity *const)(v3 + 224), (uint32_t)creature);
            std::shared_ptr<Creature>::operator=(
              (std::shared_ptr<Creature> *const)(v3 + 160),
              (std::shared_ptr<Creature> *)(v3 + 224));
            std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 224));
            if ( std::operator==<Creature>((const std::shared_ptr<Creature> *)(v3 + 160), 0LL) )
            {
              common::milog::MiLogStream::create(
                &v44,
                &common::milog::MiLogDefault::default_log_obj_,
                1u,
                "./src/ability/ability_comp.cpp",
                "setOvergrowDamgeToGlobalValueHandler",
                3507);
              v15 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                      &v44,
                      (const char (*)[31])"caster_ptr is null, entity_id:");
              v16 = std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)&param->modifier_ptr);
              *(_DWORD *)(v3 + 80) = ActorModifier::getApplyEntityId(v16);
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v15,
                (const unsigned int *)(v3 + 80));
              common::milog::MiLogStream::~MiLogStream(&v44);
            }
          }
          goto LABEL_34;
        }
        goto LABEL_31;
      }
    }
    std::operator+<char>((std::string *)&v44, &element_define->ABILITY_OVERGROW, 95);
    std::operator+<char>(&v36, (std::string *)&v44, &element_define->SUFFIX_REACTION_DAMAGE);
    std::string::operator=(v3 + 256, &v36);
    std::string::~string(&v36);
    std::string::~string(&v44);
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)(v3 + 224));
    v9 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
    JsonConfigMgr::getAbilityReactionCriticalName(
      &v37,
      &v9->design_config.json_config_mgr,
      &element_define->ABILITY_OVERGROW);
    std::string::operator=(v3 + 320, &v37);
    std::string::~string(&v37);
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 224));
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)(v3 + 224));
    v10 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
    JsonConfigMgr::getAbilityReactionCriticalHurtName(
      &v38,
      &v10->design_config.json_config_mgr,
      &element_define->ABILITY_OVERGROW);
    std::string::operator=(v3 + 384, &v38);
    std::string::~string(&v38);
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 224));
    *(_DWORD *)(v3 + 32) = 6;
LABEL_34:
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    Entity::getScene((const Entity *const)(v3 + 192));
    is_avatar = 0;
    if ( std::operator!=<Creature>(0LL, (const std::shared_ptr<Creature> *)(v3 + 160)) )
    {
      v20 = (unsigned __int64)std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
      if ( *(_BYTE *)((v20 >> 3) + 0x7FFF8000) )
        v20 = __asan_report_load8(v20);
      v21 = *(_QWORD *)v20 + 24LL;
      if ( *(_BYTE *)((v21 >> 3) + 0x7FFF8000) )
        v20 = __asan_report_load8(*(_QWORD *)v20 + 24LL);
      if ( (*(unsigned int (__fastcall **)(unsigned __int64))v21)(v20) == 1 )
      {
        is_avatar = 1;
      }
      else
      {
        std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
        Creature::findTopOwnerOrSelf((Creature *const)(v3 + 224));
        if ( !std::operator!=<Creature>(0LL, (const std::shared_ptr<Creature> *)(v3 + 224)) )
          goto LABEL_50;
        v22 = (unsigned __int64)std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
        if ( *(_BYTE *)((v22 >> 3) + 0x7FFF8000) )
          v22 = __asan_report_load8(v22);
        v23 = *(_QWORD *)v22 + 24LL;
        if ( *(_BYTE *)((v23 >> 3) + 0x7FFF8000) )
          v22 = __asan_report_load8(*(_QWORD *)v22 + 24LL);
        if ( (*(unsigned int (__fastcall **)(unsigned __int64))v23)(v22) == 1 )
          v24 = 1;
        else
LABEL_50:
          v24 = 0;
        if ( v24 )
        {
          is_avatar = 1;
          std::shared_ptr<Creature>::operator=(
            (std::shared_ptr<Creature> *const)(v3 + 160),
            (const std::shared_ptr<Creature> *)(v3 + 224));
        }
        std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 224));
      }
      *(_DWORD *)(v3 + 48) = 0;
      *(_DWORD *)(v3 + 64) = 0;
      v25 = 0LL;
      *(_DWORD *)(v3 + 80) = 0;
      v26 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
      Position = Entity::getPosition((const Entity *const)v26);
      std::shared_ptr<Scene>::shared_ptr(
        (std::shared_ptr<Scene> *const)(v3 + 224),
        (const std::shared_ptr<Scene> *)(v3 + 192));
      std::shared_ptr<Creature>::shared_ptr(
        (std::shared_ptr<Creature> *const)&v35,
        (const std::shared_ptr<Creature> *)(v3 + 160));
      *(float *)v25.m128i_i32 = AbilityComp::getElementLevelCoForOvergrow(
                                  (CreaturePtr *)&v35,
                                  is_avatar,
                                  (ScenePtr *)(v3 + 224),
                                  (const data::ElementReactionType *)(v3 + 32),
                                  Position,
                                  (float *)(v3 + 48),
                                  (float *)(v3 + 64),
                                  (float *)(v3 + 80));
      element_level_co = COERCE_FLOAT(_mm_cvtsi128_si32(v25));
      std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)&v35);
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 224));
      if ( *(_BYTE *)(((unsigned __int64)&config_action->reaction_trigger_type >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&config_action->reaction_trigger_type >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&config_action->reaction_trigger_type);
      }
      if ( config_action->reaction_trigger_type == MushroomVariation )
      {
        std::shared_ptr<Creature>::shared_ptr(
          (std::shared_ptr<Creature> *const)(v3 + 224),
          (const std::shared_ptr<Creature> *)(v3 + 160));
        *(float *)(v3 + 48) = AbilityComp::getOvergrowVariationAddHurt((CreaturePtr *)(v3 + 224)) + *(float *)(v3 + 48);
        std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 224));
      }
      AbilityComp::createOrSetServerDynamicValue<float>(
        this,
        (const std::string *)(v3 + 256),
        (float)(*(float *)(v3 + 48) + 1.0) * element_level_co);
      if ( *(float *)(v3 + 64) != 0.0 && (unsigned __int8)std::string::empty(v3 + 320) != 1 )
        AbilityComp::createOrSetServerDynamicValue<float>(this, (const std::string *)(v3 + 320), *(float *)(v3 + 64));
      if ( *(float *)(v3 + 80) != 0.0 && (unsigned __int8)std::string::empty(v3 + 384) != 1 )
        AbilityComp::createOrSetServerDynamicValue<float>(this, (const std::string *)(v3 + 384), *(float *)(v3 + 80));
    }
    else
    {
      common::milog::MiLogStream::create(
        &v44,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "setOvergrowDamgeToGlobalValueHandler",
        3550);
      common::milog::MiLogStream::operator<<<char [52],(char *[52])0>(
        &v44,
        (const char (*)[52])"setOvergrowDamgeToGlobalValueHandler invalid caster");
      common::milog::MiLogStream::~MiLogStream(&v44);
    }
    std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 192));
    std::string::~string((void *)(v3 + 384));
    std::string::~string((void *)(v3 + 320));
    std::string::~string((void *)(v3 + 256));
    std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 160));
    goto LABEL_72;
  }
  common::milog::MiLogStream::create(
    &v44,
    &common::milog::MiLogDefault::default_log_obj_,
    0x13u,
    "./src/ability/ability_comp.cpp",
    "setOvergrowDamgeToGlobalValueHandler",
    3465);
  common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(&v44, (const char (*)[23])"cur_avatar_ptr is null");
  common::milog::MiLogStream::~MiLogStream(&v44);
LABEL_73:
  std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 96));
LABEL_74:
  if ( v45 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8024) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF802C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8034) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 3579: range 00000000136E2D48-00000000136E3A0A
int32_t __cdecl AbilityComp::attackByEnergyHandler(
        AbilityComp *const this,
        const data::AttackByEnergy *config_action,
        ActionParam *param)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rcx
  int32_t v7; // r14d
  Creature *v8; // rax
  __m128i v9; // xmm0
  ActorAbility *v10; // r14
  const float *v11; // rax
  _DWORD *v12; // rdx
  __m128i v13; // xmm0
  common::milog::MiLogStream *v14; // rcx
  Creature *v16; // r14
  Creature *v17; // r14
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // rax
  float v19; // xmm1_4
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  int v25; // xmm0_4
  PileBoolValue *IsInvincible; // rax
  common::milog::MiLogStream *v27; // r14
  unsigned __int64 v28; // rax
  void (__fastcall **v29)(common::milog::MiLogStream *, unsigned __int64); // rdx
  PileBoolValue *IsLockHp; // rax
  unsigned __int64 v31; // rax
  Creature *v32; // r14
  int32_t result; // eax
  float v34; // [rsp+0h] [rbp-1D0h]
  float v35; // [rsp+4h] [rbp-1CCh]
  float rest_cost_energy; // [rsp+20h] [rbp-1B0h]
  FightPropComp *fight_comp; // [rsp+28h] [rbp-1A8h]
  std::shared_ptr<DieCreatureRecord> p_record_ptr; // [rsp+30h] [rbp-1A0h] BYREF
  common::milog::MiLogStream v40; // [rsp+40h] [rbp-190h] BYREF
  common::milog::MiLogStream v41; // [rsp+60h] [rbp-170h] BYREF
  char v42[336]; // [rsp+80h] [rbp-150h] BYREF

  v3 = (unsigned __int64)v42;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(288LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 48 4 23 cost_energy_amount:3592 64 4 22 cur_energy_amount:3598 80 4 19 cost_hp_amount:3611 96 "
                        "16 15 target_ptr:3580 128 16 21 notify_param_ptr:3628 160 96 8 ctx:3631";
  *(_QWORD *)(v3 + 16) = AbilityComp::attackByEnergyHandler;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862723] = -219021312;
  v5[536862724] = -219021312;
  v5[536862728] = -202116109;
  std::shared_ptr<Creature>::shared_ptr((std::shared_ptr<Creature> *const)(v3 + 96), &param->target_ptr);
  if ( std::operator==<Creature>((const std::shared_ptr<Creature> *)(v3 + 96), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v41,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "attackByEnergyHandler",
      3583);
    v6 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(&v41, (const char (*)[19])"target_ptr is null");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
LABEL_7:
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v6, this->creature_);
    common::milog::MiLogStream::~MiLogStream(&v41);
    v7 = -1;
    goto LABEL_46;
  }
  if ( std::operator==<ActorAbility>(&param->ability_ptr, 0LL) )
  {
    common::milog::MiLogStream::create(
      &v41,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "attackByEnergyHandler",
      3588);
    v6 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
           &v41,
           (const char (*)[20])"ability_ptr is null");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    goto LABEL_7;
  }
  v8 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
  fight_comp = Creature::getFightPropComp(v8);
  v9 = 0LL;
  *(_DWORD *)(v3 + 80) = 0;
  v10 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)param);
  std::shared_ptr<DieCreatureRecord>::shared_ptr(&p_record_ptr, 0LL);
  std::shared_ptr<Creature>::shared_ptr((std::shared_ptr<Creature> *const)(v3 + 128), 0LL);
  *(float *)v9.m128i_i32 = ActorAbility::evaluate(v10, &config_action->energy, (CreaturePtr *)(v3 + 128), &p_record_ptr);
  *(_DWORD *)(v3 + 64) = _mm_cvtsi128_si32(v9);
  v11 = std::max<float>((const float *)(v3 + 64), (const float *)(v3 + 80));
  v12 = v11;
  if ( *(_BYTE *)(((unsigned __int64)v11 >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)v11 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v11 >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(v11);
  }
  *(_DWORD *)(v3 + 48) = *v12;
  std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 128));
  std::shared_ptr<DieCreatureRecord>::~shared_ptr(&p_record_ptr);
  v13 = _mm_cvtsi32_si128(*(_DWORD *)(v3 + 48));
  if ( std::fabs(*(float *)v13.m128i_i32) < 0.00000011920929 )
  {
    common::milog::MiLogStream::create(
      &v41,
      &common::milog::MiLogDefault::default_log_obj_,
      0x11u,
      "./src/ability/ability_comp.cpp",
      "attackByEnergyHandler",
      3595);
    v14 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
            &v41,
            (const char (*)[28])"cost_energy_amount is zero ");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v14, this->creature_);
    common::milog::MiLogStream::~MiLogStream(&v41);
    v7 = -1;
    goto LABEL_46;
  }
  *(float *)v13.m128i_i32 = FightPropComp::getCurEnergy(fight_comp);
  *(_DWORD *)(v3 + 64) = _mm_cvtsi128_si32(v13);
  if ( std::fabs(*(float *)(v3 + 64) - *(float *)(v3 + 48)) < 0.00000011920929
    || *(float *)(v3 + 64) > *(float *)(v3 + 48) )
  {
    v16 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
    std::shared_ptr<FightPropNtfParam>::shared_ptr((std::shared_ptr<FightPropNtfParam> *const)&p_record_ptr, 0LL);
    Creature::changeCurEnergy(v16, -*(float *)(v3 + 48), 1, (FightPropNtfParamPtr *)&p_record_ptr);
    std::shared_ptr<FightPropNtfParam>::~shared_ptr((std::shared_ptr<FightPropNtfParam> *const)&p_record_ptr);
    v7 = 0;
    goto LABEL_46;
  }
  v17 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
  std::shared_ptr<FightPropNtfParam>::shared_ptr((std::shared_ptr<FightPropNtfParam> *const)&p_record_ptr, 0LL);
  Creature::changeCurEnergy(v17, -*(float *)(v3 + 64), 1, (FightPropNtfParamPtr *)&p_record_ptr);
  std::shared_ptr<FightPropNtfParam>::~shared_ptr((std::shared_ptr<FightPropNtfParam> *const)&p_record_ptr);
  rest_cost_energy = *(float *)(v3 + 48) - *(float *)(v3 + 64);
  if ( *(_BYTE *)(((unsigned __int64)&config_action->over_damage_ratio >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&config_action->over_damage_ratio >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&config_action->over_damage_ratio);
  }
  v35 = config_action->over_damage_ratio * rest_cost_energy;
  v34 = rest_cost_energy / *(float *)(v3 + 48);
  v18 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
  v19 = v34 * Creature::getProp(v18, FIGHT_PROP_MAX_HP);
  if ( *(_BYTE *)(((unsigned __int64)&config_action->over_damage_max_hpratio >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)config_action - 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_action->over_damage_max_hpratio >> 3)
                                                                 + 0x7FFF8000) )
  {
    __asan_report_load4(&config_action->over_damage_max_hpratio);
  }
  *(float *)(v3 + 80) = (float)(config_action->over_damage_max_hpratio * v19) + v35;
  common::milog::MiLogStream::create(
    &v41,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/ability/ability_comp.cpp",
    "attackByEnergyHandler",
    3612);
  v20 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
          &v41,
          (const char (*)[34])"attackByEnergy cur_energy_amount:");
  v21 = common::milog::MiLogStream::operator<<<float,(float *)0>(v20, (const float *)(v3 + 64));
  v22 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(v21, (const char (*)[21])" cost_energy_amount:");
  v23 = common::milog::MiLogStream::operator<<<float,(float *)0>(v22, (const float *)(v3 + 48));
  v24 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v23, (const char (*)[17])" cost_hp_amount:");
  common::milog::MiLogStream::operator<<<float,(float *)0>(v24, (const float *)(v3 + 80));
  common::milog::MiLogStream::~MiLogStream(&v41);
  if ( *(float *)(v3 + 80) <= 9999999.0 )
    v25 = *(_DWORD *)(v3 + 80);
  else
    v25 = 1259902591;
  *(_DWORD *)(v3 + 80) = v25;
  IsInvincible = FightPropComp::getIsInvincible(fight_comp);
  if ( PileBoolValue::getValue(IsInvincible) )
  {
    common::milog::MiLogStream::create(
      &v40,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/ability/ability_comp.cpp",
      "attackByEnergyHandler",
      3619);
    v27 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
            &v40,
            (const char (*)[34])"attackByEnergy invincible target:");
    v28 = (unsigned __int64)std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
    if ( *(_BYTE *)((v28 >> 3) + 0x7FFF8000) )
      v28 = __asan_report_load8(v28);
    v29 = *(void (__fastcall ***)(common::milog::MiLogStream *, unsigned __int64))v28;
    if ( *(_BYTE *)((*(_QWORD *)v28 >> 3) + 0x7FFF8000LL) )
      v28 = __asan_report_load8(*(_QWORD *)v28);
LABEL_36:
    (*v29)(&v41, v28);
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v27, (const std::string *)&v41);
    std::string::~string(&v41);
    common::milog::MiLogStream::~MiLogStream(&v40);
    v7 = 0;
    goto LABEL_46;
  }
  IsLockHp = FightPropComp::getIsLockHp(fight_comp);
  if ( PileBoolValue::getValue(IsLockHp) )
  {
    common::milog::MiLogStream::create(
      &v40,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/ability/ability_comp.cpp",
      "attackByEnergyHandler",
      3625);
    v27 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
            &v40,
            (const char (*)[31])"attackByEnergy lock hp target:");
    v28 = (unsigned __int64)std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
    if ( *(_BYTE *)((v28 >> 3) + 0x7FFF8000) )
      v28 = __asan_report_load8(v28);
    v29 = *(void (__fastcall ***)(common::milog::MiLogStream *, unsigned __int64))v28;
    if ( *(_BYTE *)((*(_QWORD *)v28 >> 3) + 0x7FFF8000LL) )
      v28 = __asan_report_load8(*(_QWORD *)v28);
    goto LABEL_36;
  }
  *(_QWORD *)(v3 + 128) = 0LL;
  *(_QWORD *)(v3 + 136) = 0LL;
  common::tools::perf::make_shared<FightPropNtfParam>();
  std::shared_ptr<FightPropNtfParam>::operator=(
    (std::shared_ptr<FightPropNtfParam> *const)(v3 + 128),
    (std::shared_ptr<FightPropNtfParam> *)&p_record_ptr);
  std::shared_ptr<FightPropNtfParam>::~shared_ptr((std::shared_ptr<FightPropNtfParam> *const)&p_record_ptr);
  v31 = (unsigned __int64)std::__shared_ptr_access<FightPropNtfParam,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<FightPropNtfParam,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
  if ( *(_BYTE *)((v31 >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)((v31 >> 3) + 0x7FFF8000) <= 3 )
    v31 = __asan_report_store4(v31);
  *(_DWORD *)v31 = 3;
  ChangeHpContext::ChangeHpContext((ChangeHpContext *const)(v3 + 160));
  *(_DWORD *)(v3 + 160) = 18;
  std::weak_ptr<ActorAbility>::operator=<ActorAbility>(
    (std::weak_ptr<ActorAbility> *const)(v3 + 224),
    &param->ability_ptr);
  v32 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
  std::shared_ptr<FightPropNtfParam>::shared_ptr(
    (std::shared_ptr<FightPropNtfParam> *const)&p_record_ptr,
    (const std::shared_ptr<FightPropNtfParam> *)(v3 + 128));
  v7 = Creature::changeCurHp(
         v32,
         -*(float *)(v3 + 80),
         (ChangeHpContext *)(v3 + 160),
         1,
         (FightPropNtfParamPtr *)&p_record_ptr);
  std::shared_ptr<FightPropNtfParam>::~shared_ptr((std::shared_ptr<FightPropNtfParam> *const)&p_record_ptr);
  ChangeHpContext::~ChangeHpContext((ChangeHpContext *const)(v3 + 160));
  std::shared_ptr<FightPropNtfParam>::~shared_ptr((std::shared_ptr<FightPropNtfParam> *const)(v3 + 128));
LABEL_46:
  std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 96));
  result = v7;
  if ( v42 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 3642: range 00000000136E3A0C-00000000136E3C08
bool __cdecl AbilityComp::evaluatePredicate(data::ConfigAbilityPredicate *config_predicate, PredicateParam *param)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  unsigned __int64 v5; // rax
  char v6; // r14
  bool result; // al
  char v8[208]; // [rsp+10h] [rbp-D0h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(160LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 48 72 15 real_param:3643";
  *(_QWORD *)(v2 + 16) = AbilityComp::evaluatePredicate;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61937;
  v4[536862723] = -218103808;
  v4[536862724] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)&config_predicate->target >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&config_predicate->target >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&config_predicate->target);
  }
  AbilityComp::getSelectedPredicateParam((PredicateParam *)(v2 + 48), config_predicate->target, param);
  if ( *(_BYTE *)(((unsigned __int64)config_predicate >> 3) + 0x7FFF8000) )
    __asan_report_load8(config_predicate);
  v5 = (unsigned __int64)(config_predicate->_vptr_ConfigAbilityPredicate + 7);
  if ( *(_BYTE *)((v5 >> 3) + 0x7FFF8000) )
    v5 = __asan_report_load8(config_predicate->_vptr_ConfigAbilityPredicate + 7);
  v6 = (*(__int64 (__fastcall **)(data::ConfigAbilityPredicate *, unsigned __int64))v5)(config_predicate, v2 + 48);
  PredicateParam::~PredicateParam((PredicateParam *const)(v2 + 48));
  result = v6;
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF800C) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 3648: range 00000000136E3C0A-00000000136E4074
PredicateParam *__cdecl AbilityComp::getSelectedPredicateParam(
        PredicateParam *retstr,
        data::AbilityTargetting targtting,
        const PredicateParam *param)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  unsigned __int64 v5; // r13
  Player *v6; // rax
  Player *v7; // rax
  std::shared_ptr<AvatarTeamEntity> __r; // [rsp+20h] [rbp-70h] BYREF
  char v11[96]; // [rsp+30h] [rbp-60h] BYREF

  v3 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 16 14 scene_ptr:3695";
  *(_QWORD *)(v3 + 16) = AbilityComp::getSelectedPredicateParam;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202178560;
  PredicateParam::PredicateParam(retstr, param);
  switch ( targtting )
  {
    case Self:
      std::shared_ptr<Creature>::operator=(&retstr->target_ptr, &param->source_ptr);
      break;
    case OriginOwner_1:
      if ( std::operator!=<Creature>(&param->source_ptr, 0LL) )
      {
        std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)&param->source_ptr);
        Creature::findTopOwner((const Creature *const)(v3 + 32));
        std::shared_ptr<Creature>::operator=(&retstr->target_ptr, (std::shared_ptr<Creature> *)(v3 + 32));
        std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 32));
      }
      break;
    case Team_0:
      if ( !std::operator==<Creature>(&param->source_ptr, 0LL) )
      {
        std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)&param->source_ptr);
        Creature::getAncestryOwnerPlayer((Creature *const)(v3 + 32));
        if ( std::operator!=<Player>((const std::shared_ptr<Player> *)(v3 + 32), 0LL) )
        {
          v6 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
          Player::getAvatarComp(v6);
          PlayerAvatarComp::getTeamEntity((const PlayerAvatarComp *const)&__r);
          std::shared_ptr<Creature>::operator=<AvatarTeamEntity>(&retstr->target_ptr, &__r);
          std::shared_ptr<AvatarTeamEntity>::~shared_ptr(&__r);
        }
        goto LABEL_11;
      }
      break;
    case TargetOriginOwner:
      if ( std::operator!=<Creature>(&param->target_ptr, 0LL) )
      {
        std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)&param->target_ptr);
        Creature::findTopOwner((const Creature *const)&__r);
        std::shared_ptr<Creature>::operator=(&retstr->target_ptr, (std::shared_ptr<Creature> *)&__r);
        std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)&__r);
      }
      break;
    case TargetTeam:
      if ( !std::operator==<Creature>(&param->target_ptr, 0LL) )
      {
        std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)&param->target_ptr);
        Creature::getAncestryOwnerPlayer((Creature *const)(v3 + 32));
        if ( std::operator!=<Player>((const std::shared_ptr<Player> *)(v3 + 32), 0LL) )
        {
          v7 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
          Player::getAvatarComp(v7);
          PlayerAvatarComp::getTeamEntity((const PlayerAvatarComp *const)&__r);
          std::shared_ptr<Creature>::operator=<AvatarTeamEntity>(&retstr->target_ptr, &__r);
          std::shared_ptr<AvatarTeamEntity>::~shared_ptr(&__r);
        }
LABEL_11:
        std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v3 + 32));
      }
      break;
    case MPLevel_0:
      if ( !std::operator==<Creature>(&param->source_ptr, 0LL) )
      {
        std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)&param->source_ptr);
        Entity::getScene((const Entity *const)(v3 + 32));
        if ( !std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v3 + 32)) )
        {
          std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
          Scene::getMPLevelEntity((Scene *const)&__r);
          std::shared_ptr<Creature>::operator=<MPLevelEntity>(
            &retstr->target_ptr,
            (std::shared_ptr<MPLevelEntity> *)&__r);
          std::shared_ptr<MPLevelEntity>::~shared_ptr((std::shared_ptr<MPLevelEntity> *const)&__r);
        }
        std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 32));
      }
      break;
    default:
      break;
  }
  if ( v11 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return retstr;
};

// Line 3720: range 00000000136E4076-00000000136E4240
bool __cdecl AbilityComp::evaluatePredicates(
        AbilityComp *const this,
        const std::vector<std::shared_ptr<data::ConfigAbilityPredicate>> *config_predicate_vec,
        PredicateParam *param)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  const std::shared_ptr<data::ConfigAbilityPredicate> *v6; // rax
  data::ConfigAbilityPredicate *v7; // rdx
  int v8; // r14d
  bool result; // al
  bool v10; // [rsp+7h] [rbp-A9h]
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::const_iterator __for_begin; // [rsp+28h] [rbp-88h] BYREF
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::const_iterator __for_end; // [rsp+30h] [rbp-80h] BYREF
  const std::vector<std::shared_ptr<data::ConfigAbilityPredicate>> *__for_range; // [rsp+38h] [rbp-78h]
  char v15[112]; // [rsp+40h] [rbp-70h] BYREF

  v3 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 16 25 config_predicate_ptr:3721";
  *(_QWORD *)(v3 + 16) = AbilityComp::evaluatePredicates;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202178560;
  __for_range = config_predicate_vec;
  __for_begin._M_current = std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::begin(config_predicate_vec)._M_current;
  __for_end._M_current = std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::end(config_predicate_vec)._M_current;
  while ( __gnu_cxx::operator!=<std::shared_ptr<data::ConfigAbilityPredicate> const*,std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>>(
            &__for_begin,
            &__for_end) )
  {
    v6 = __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityPredicate> const*,std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>>::operator*(&__for_begin);
    std::shared_ptr<data::ConfigAbilityPredicate>::shared_ptr(
      (std::shared_ptr<data::ConfigAbilityPredicate> *const)(v3 + 32),
      v6);
    v7 = std::__shared_ptr_access<data::ConfigAbilityPredicate,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::ConfigAbilityPredicate,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
    if ( !AbilityComp::evaluatePredicate(v7, param) )
    {
      v10 = 0;
      v8 = 0;
    }
    else
    {
      v8 = 1;
    }
    std::shared_ptr<data::ConfigAbilityPredicate>::~shared_ptr((std::shared_ptr<data::ConfigAbilityPredicate> *const)(v3 + 32));
    if ( v8 != 1 )
      goto LABEL_12;
    __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigAbilityPredicate> const*,std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>>::operator++(&__for_begin);
  }
  v10 = 1;
LABEL_12:
  result = v10;
  if ( v15 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3737: range 00000000136E4242-00000000136E4536
BaseAbilityMixinPtr __cdecl AbilityComp::createAbilityMixin(
        AbilityComp *const this,
        ActorAbilityPtr *p_ability_ptr,
        ActorModifierPtr *p_modifier_ptr,
        data::ConfigAbilityMixin *config_mixin)
{
  data::ConfigAbilityMixin *v4; // r8
  unsigned __int64 v5; // rbx
  __int64 v6; // rax
  unsigned __int64 v7; // r12
  unsigned __int64 v8; // rax
  void (__fastcall *v9)(AbilityComp *const, data::ConfigAbilityMixin *, unsigned __int64); // r8
  unsigned __int64 v10; // rax
  unsigned __int64 v11; // rdx
  BaseAbilityMixinPtr result; // rax
  data::ConfigAbilityMixin *config_mixina; // [rsp+8h] [rbp-C8h]
  data::ConfigAbilityMixin t; // [rsp+30h] [rbp-A0h] BYREF
  char v17[128]; // [rsp+50h] [rbp-80h] BYREF

  config_mixina = v4;
  v5 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_1(96LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "1 32 32 10 param:3738";
  *(_QWORD *)(v5 + 16) = AbilityComp::createAbilityMixin;
  v7 = v5 >> 3;
  *(_DWORD *)(v7 + 2147450880) = -235802127;
  *(_DWORD *)(v7 + 2147450888) = -202116109;
  std::shared_ptr<ActorAbility>::shared_ptr(
    (std::shared_ptr<ActorAbility> *const)(v5 + 32),
    (const std::shared_ptr<ActorAbility> *)p_modifier_ptr);
  std::shared_ptr<ActorModifier>::shared_ptr(
    (std::shared_ptr<ActorModifier> *const)(v5 + 48),
    (const std::shared_ptr<ActorModifier> *)config_mixin);
  if ( *(_BYTE *)(((unsigned __int64)config_mixina >> 3) + 0x7FFF8000) )
    __asan_report_load8(config_mixina);
  v8 = (unsigned __int64)(config_mixina->_vptr_BaseActionContainer + 8);
  if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
    v8 = __asan_report_load8(config_mixina->_vptr_BaseActionContainer + 8);
  v9 = *(void (__fastcall **)(AbilityComp *const, data::ConfigAbilityMixin *, unsigned __int64))v8;
  if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store16(this, config_mixin);
  v9(this, config_mixina, v5 + 32);
  if ( std::operator==<BaseAbilityMixin>((const std::shared_ptr<BaseAbilityMixin> *)this, 0LL) )
  {
    toThisPtr<data::ConfigAbilityMixin>(&t);
    common::tools::perf::make_shared<BaseAbilityMixin,std::shared_ptr<data::ConfigAbilityMixin>,MixinParam &>(
      (std::shared_ptr<data::ConfigAbilityMixin> *)&t._M_weak_this._M_refcount,
      (MixinParam *)&t,
      (std::shared_ptr<data::ConfigAbilityMixin> *)(v5 + 32),
      (MixinParam *)&t);
    std::shared_ptr<BaseAbilityMixin>::operator=(
      (std::shared_ptr<BaseAbilityMixin> *const)this,
      (std::shared_ptr<BaseAbilityMixin> *)&t._M_weak_this._M_refcount);
    std::shared_ptr<BaseAbilityMixin>::~shared_ptr((std::shared_ptr<BaseAbilityMixin> *const)&t._M_weak_this._M_refcount);
    std::shared_ptr<data::ConfigAbilityMixin>::~shared_ptr((std::shared_ptr<data::ConfigAbilityMixin> *const)&t);
  }
  v10 = (unsigned __int64)std::__shared_ptr_access<BaseAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BaseAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)this);
  if ( *(_BYTE *)((v10 >> 3) + 0x7FFF8000) )
    v10 = __asan_report_load8(v10);
  v11 = *(_QWORD *)v10 + 16LL;
  if ( *(_BYTE *)((v11 >> 3) + 0x7FFF8000) )
    v10 = __asan_report_load8(*(_QWORD *)v10 + 16LL);
  (*(void (__fastcall **)(unsigned __int64))v11)(v10);
  MixinParam::~MixinParam((MixinParam *const)(v5 + 32));
  if ( v17 == (char *)v5 )
  {
    *(_DWORD *)((v5 >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8008) = -168430091;
  }
  result._M_ptr = (std::__shared_ptr<BaseAbilityMixin,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 3750: range 00000000136E4538-00000000136E4C89
void __cdecl AbilityComp::addMixins(AbilityComp *const this, std::vector<std::shared_ptr<BaseAbilityMixin>> *mixin_vec)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  unsigned __int64 v5; // rax
  unsigned __int64 v6; // rdx
  Creature *creature; // rsi
  Creature *v8; // rax
  unsigned __int64 v9; // rax
  char v10; // r15
  char v11; // r14
  std::__shared_ptr_access<BaseAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rcx
  unsigned __int64 v16; // rax
  unsigned __int64 v17; // rax
  unsigned __int64 v18; // rdx
  Player *v19; // rax
  PlayerWatcherComp *WatcherComp; // r14
  uint32_t v21; // eax
  char v22; // [rsp+Dh] [rbp-163h]
  char v23; // [rsp+Eh] [rbp-162h]
  char v24; // [rsp+Fh] [rbp-161h]
  std::vector<std::shared_ptr<BaseAbilityMixin>>::iterator __for_begin; // [rsp+20h] [rbp-150h] BYREF
  std::vector<std::shared_ptr<BaseAbilityMixin>>::iterator __for_end; // [rsp+28h] [rbp-148h] BYREF
  std::vector<std::shared_ptr<BaseAbilityMixin>> *__for_range; // [rsp+30h] [rbp-140h]
  BaseAbilityMixinPtr *mixin_ptr; // [rsp+38h] [rbp-138h]
  BaseAbilityMixin v29; // [rsp+40h] [rbp-130h] BYREF
  char v30[208]; // [rsp+A0h] [rbp-D0h] BYREF

  v2 = (unsigned __int64)v30;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(160LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 32 16 15 avatar_ptr:3769 64 16 15 player_ptr:3772 96 32 17 ability_name:3763";
  *(_QWORD *)(v2 + 16) = AbilityComp::addMixins;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862722] = -219021312;
  v4[536862724] = -202116109;
  __for_range = mixin_vec;
  __for_begin._M_current = std::vector<std::shared_ptr<BaseAbilityMixin>>::begin(mixin_vec)._M_current;
  __for_end._M_current = std::vector<std::shared_ptr<BaseAbilityMixin>>::end(mixin_vec)._M_current;
  while ( __gnu_cxx::operator!=<std::shared_ptr<BaseAbilityMixin> *,std::vector<std::shared_ptr<BaseAbilityMixin>>>(
            &__for_begin,
            &__for_end) )
  {
    mixin_ptr = __gnu_cxx::__normal_iterator<std::shared_ptr<BaseAbilityMixin> *,std::vector<std::shared_ptr<BaseAbilityMixin>>>::operator*(&__for_begin);
    v5 = (unsigned __int64)std::__shared_ptr_access<BaseAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BaseAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)mixin_ptr);
    if ( *(_BYTE *)((v5 >> 3) + 0x7FFF8000) )
      v5 = __asan_report_load8(v5);
    v6 = *(_QWORD *)v5 + 24LL;
    if ( *(_BYTE *)((v6 >> 3) + 0x7FFF8000) )
      v5 = __asan_report_load8(*(_QWORD *)v5 + 24LL);
    (*(void (__fastcall **)(unsigned __int64))v6)(v5);
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    creature = this->creature_;
    v8 = creature;
    if ( *(_BYTE *)(((unsigned __int64)creature >> 3) + 0x7FFF8000) )
      v8 = (Creature *)__asan_report_load8(this->creature_);
    v9 = *(_QWORD *)v8->baseclass_0 + 24LL;
    if ( *(_BYTE *)((v9 >> 3) + 0x7FFF8000) )
      v9 = __asan_report_load8(v9);
    if ( (*(unsigned int (__fastcall **)(Creature *))v9)(creature) == 1 )
    {
      v10 = 0;
      v24 = 0;
      v23 = 0;
      v22 = 0;
      std::__shared_ptr_access<BaseAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BaseAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)mixin_ptr);
      BaseAbilityMixin::getConfig(&v29);
      std::dynamic_pointer_cast<data::GlobalSubShieldMixin,data::ConfigAbilityMixin>((const std::shared_ptr<data::ConfigAbilityMixin> *)&v29._M_weak_this._M_refcount);
      if ( std::operator!=<data::GlobalSubShieldMixin>(
             0LL,
             (const std::shared_ptr<data::GlobalSubShieldMixin> *)&v29._M_weak_this._M_refcount) )
      {
        goto LABEL_20;
      }
      std::__shared_ptr_access<BaseAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BaseAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)mixin_ptr);
      BaseAbilityMixin::getConfig((const BaseAbilityMixin *const)&v29.actor_wtr_);
      v10 = 1;
      std::dynamic_pointer_cast<data::ElementShieldMixin,data::ConfigAbilityMixin>((const std::shared_ptr<data::ConfigAbilityMixin> *)&v29.ability_wtr_);
      v24 = 1;
      if ( std::operator!=<data::ElementShieldMixin>(
             0LL,
             (const std::shared_ptr<data::ElementShieldMixin> *)&v29.ability_wtr_)
        || (std::__shared_ptr_access<BaseAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BaseAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)mixin_ptr),
            BaseAbilityMixin::getConfig((const BaseAbilityMixin *const)(v2 + 32)),
            v23 = 1,
            std::dynamic_pointer_cast<data::EliteShieldMixin,data::ConfigAbilityMixin>((const std::shared_ptr<data::ConfigAbilityMixin> *)(v2 + 64)),
            v22 = 1,
            std::operator!=<data::EliteShieldMixin>(0LL, (const std::shared_ptr<data::EliteShieldMixin> *)(v2 + 64))) )
      {
LABEL_20:
        v11 = 1;
      }
      else
      {
        v11 = 0;
      }
      if ( v22 )
        std::shared_ptr<data::EliteShieldMixin>::~shared_ptr((std::shared_ptr<data::EliteShieldMixin> *const)(v2 + 64));
      if ( v23 )
        std::shared_ptr<data::ConfigAbilityMixin>::~shared_ptr((std::shared_ptr<data::ConfigAbilityMixin> *const)(v2 + 32));
      if ( v24 )
        std::shared_ptr<data::ElementShieldMixin>::~shared_ptr((std::shared_ptr<data::ElementShieldMixin> *const)&v29.ability_wtr_);
      if ( v10 )
        std::shared_ptr<data::ConfigAbilityMixin>::~shared_ptr((std::shared_ptr<data::ConfigAbilityMixin> *const)&v29.actor_wtr_);
      std::shared_ptr<data::GlobalSubShieldMixin>::~shared_ptr((std::shared_ptr<data::GlobalSubShieldMixin> *const)&v29._M_weak_this._M_refcount);
      std::shared_ptr<data::ConfigAbilityMixin>::~shared_ptr((std::shared_ptr<data::ConfigAbilityMixin> *const)&v29);
      if ( v11 )
      {
        v12 = std::__shared_ptr_access<BaseAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BaseAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)mixin_ptr);
        BaseAbilityMixin::getAbilityName[abi:cxx11]((std::string *)(v2 + 96), v12);
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&v29.modifier_wtr_,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/ability/ability_comp.cpp",
          "addMixins",
          3765);
        v13 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                (common::milog::MiLogStream *const)&v29.modifier_wtr_,
                (const char (*)[23])"[SHIELD] ability_name:");
        v14 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v13, (const std::string *)(v2 + 96));
        v15 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v14, (const char (*)[12])" creature_:");
        if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->creature_);
        common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v15, this->creature_);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v29.modifier_wtr_);
        if ( std::operator!=<char>((const std::string *)(v2 + 96), byte_24FD2920) )
        {
          v16 = (unsigned __int64)std::unordered_map<std::string,unsigned int>::operator[](
                                    &this->shield_ability_name_map_,
                                    (const std::unordered_map<std::string,unsigned int>::key_type *)(v2 + 96));
          if ( *(_BYTE *)((v16 >> 3) + 0x7FFF8000) != 0 && (char)((v16 & 7) + 3) >= *(_BYTE *)((v16 >> 3) + 0x7FFF8000) )
            v16 = __asan_report_load4(v16);
          ++*(_DWORD *)v16;
        }
        if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->creature_);
        toPtr<Avatar,Creature>((Creature *)(v2 + 32));
        if ( std::operator!=<Avatar>((const std::shared_ptr<Avatar> *)(v2 + 32), 0LL) )
        {
          v17 = (unsigned __int64)std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
          if ( *(_BYTE *)((v17 >> 3) + 0x7FFF8000) )
            v17 = __asan_report_load8(v17);
          v18 = *(_QWORD *)v17 + 152LL;
          if ( *(_BYTE *)((v18 >> 3) + 0x7FFF8000) )
            v17 = __asan_report_load8(*(_QWORD *)v17 + 152LL);
          (*(void (__fastcall **)(unsigned __int64, unsigned __int64))v18)(v2 + 64, v17);
          if ( std::operator!=<Player>((const std::shared_ptr<Player> *)(v2 + 64), 0LL) )
          {
            v19 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
            WatcherComp = Player::getWatcherComp(v19);
            v21 = std::unordered_map<std::string,unsigned int>::size(&this->shield_ability_name_map_);
            PlayerWatcherComp::triggerShieldSourceUpdate(WatcherComp, v21);
          }
          std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v2 + 64));
        }
        std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v2 + 32));
        std::string::~string((void *)(v2 + 96));
      }
    }
    __gnu_cxx::__normal_iterator<std::shared_ptr<BaseAbilityMixin> *,std::vector<std::shared_ptr<BaseAbilityMixin>>>::operator++(&__for_begin);
  }
  if ( v30 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 3784: range 00000000136E4C8A-00000000136E51C6
void __cdecl AbilityComp::removeMixins(
        AbilityComp *const this,
        std::vector<std::shared_ptr<BaseAbilityMixin>> *mixin_vec)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  unsigned __int64 v5; // rax
  unsigned __int64 v6; // rdx
  char v7; // r15
  char v8; // r14
  std::__shared_ptr_access<BaseAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  std::__detail::_Node_iterator<std::pair<const std::string,unsigned int>,false,true>::pointer v10; // rax
  std::__detail::_Node_iterator<std::pair<const std::string,unsigned int>,false,true>::pointer v11; // rax
  char v12; // [rsp+Dh] [rbp-153h]
  char v13; // [rsp+Eh] [rbp-152h]
  char v14; // [rsp+Fh] [rbp-151h]
  std::vector<std::shared_ptr<BaseAbilityMixin>>::iterator __for_begin; // [rsp+28h] [rbp-138h] BYREF
  std::vector<std::shared_ptr<BaseAbilityMixin>>::iterator __for_end; // [rsp+30h] [rbp-130h] BYREF
  std::__detail::_Node_iterator_base<std::pair<const std::string,unsigned int>,true> __y; // [rsp+38h] [rbp-128h] BYREF
  std::vector<std::shared_ptr<BaseAbilityMixin>> *__for_range; // [rsp+40h] [rbp-120h]
  BaseAbilityMixinPtr *mixin_ptr; // [rsp+48h] [rbp-118h]
  BaseAbilityMixin v20; // [rsp+50h] [rbp-110h] BYREF
  char v21[176]; // [rsp+B0h] [rbp-B0h] BYREF

  v2 = (unsigned __int64)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 8 9 iter:3796 64 32 17 ability_name:3793";
  *(_QWORD *)(v2 + 16) = AbilityComp::removeMixins;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862723] = -202116109;
  __for_range = mixin_vec;
  __for_begin._M_current = std::vector<std::shared_ptr<BaseAbilityMixin>>::begin(mixin_vec)._M_current;
  __for_end._M_current = std::vector<std::shared_ptr<BaseAbilityMixin>>::end(mixin_vec)._M_current;
  while ( __gnu_cxx::operator!=<std::shared_ptr<BaseAbilityMixin> *,std::vector<std::shared_ptr<BaseAbilityMixin>>>(
            &__for_begin,
            &__for_end) )
  {
    mixin_ptr = __gnu_cxx::__normal_iterator<std::shared_ptr<BaseAbilityMixin> *,std::vector<std::shared_ptr<BaseAbilityMixin>>>::operator*(&__for_begin);
    v5 = (unsigned __int64)std::__shared_ptr_access<BaseAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BaseAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)mixin_ptr);
    if ( *(_BYTE *)((v5 >> 3) + 0x7FFF8000) )
      v5 = __asan_report_load8(v5);
    v6 = *(_QWORD *)v5 + 32LL;
    if ( *(_BYTE *)((v6 >> 3) + 0x7FFF8000) )
      v5 = __asan_report_load8(*(_QWORD *)v5 + 32LL);
    (*(void (__fastcall **)(unsigned __int64))v6)(v5);
    v7 = 0;
    v14 = 0;
    v13 = 0;
    v12 = 0;
    std::__shared_ptr_access<BaseAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BaseAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)mixin_ptr);
    BaseAbilityMixin::getConfig(&v20);
    std::dynamic_pointer_cast<data::GlobalSubShieldMixin,data::ConfigAbilityMixin>((const std::shared_ptr<data::ConfigAbilityMixin> *)&v20._M_weak_this._M_refcount);
    if ( std::operator!=<data::GlobalSubShieldMixin>(
           0LL,
           (const std::shared_ptr<data::GlobalSubShieldMixin> *)&v20._M_weak_this._M_refcount) )
    {
      goto LABEL_13;
    }
    std::__shared_ptr_access<BaseAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BaseAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)mixin_ptr);
    BaseAbilityMixin::getConfig((const BaseAbilityMixin *const)&v20.actor_wtr_);
    v7 = 1;
    std::dynamic_pointer_cast<data::ElementShieldMixin,data::ConfigAbilityMixin>((const std::shared_ptr<data::ConfigAbilityMixin> *)&v20.ability_wtr_);
    v14 = 1;
    if ( std::operator!=<data::ElementShieldMixin>(
           0LL,
           (const std::shared_ptr<data::ElementShieldMixin> *)&v20.ability_wtr_)
      || (std::__shared_ptr_access<BaseAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BaseAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)mixin_ptr),
          BaseAbilityMixin::getConfig((const BaseAbilityMixin *const)&v20.modifier_wtr_),
          v13 = 1,
          std::dynamic_pointer_cast<std::shared_ptr<data::EliteShieldMixin>,data::ConfigAbilityMixin>(&v20.config_mixin_ptr_),
          v12 = 1,
          std::operator!=<std::shared_ptr<data::EliteShieldMixin>>(
            0LL,
            (const std::shared_ptr<std::shared_ptr<data::EliteShieldMixin> > *)&v20.config_mixin_ptr_)) )
    {
LABEL_13:
      v8 = 1;
    }
    else
    {
      v8 = 0;
    }
    if ( v12 )
      std::shared_ptr<std::shared_ptr<data::EliteShieldMixin>>::~shared_ptr((std::shared_ptr<std::shared_ptr<data::EliteShieldMixin> > *const)&v20.config_mixin_ptr_);
    if ( v13 )
      std::shared_ptr<data::ConfigAbilityMixin>::~shared_ptr((std::shared_ptr<data::ConfigAbilityMixin> *const)&v20.modifier_wtr_);
    if ( v14 )
      std::shared_ptr<data::ElementShieldMixin>::~shared_ptr((std::shared_ptr<data::ElementShieldMixin> *const)&v20.ability_wtr_);
    if ( v7 )
      std::shared_ptr<data::ConfigAbilityMixin>::~shared_ptr((std::shared_ptr<data::ConfigAbilityMixin> *const)&v20.actor_wtr_);
    std::shared_ptr<data::GlobalSubShieldMixin>::~shared_ptr((std::shared_ptr<data::GlobalSubShieldMixin> *const)&v20._M_weak_this._M_refcount);
    std::shared_ptr<data::ConfigAbilityMixin>::~shared_ptr((std::shared_ptr<data::ConfigAbilityMixin> *const)&v20);
    if ( v8 )
    {
      v9 = std::__shared_ptr_access<BaseAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BaseAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)mixin_ptr);
      BaseAbilityMixin::getAbilityName[abi:cxx11]((std::string *)(v2 + 64), v9);
      if ( std::operator!=<char>((const std::string *)(v2 + 64), byte_24FD2920) )
      {
        *(std::unordered_map<std::string,unsigned int>::iterator *)(v2 + 32) = std::unordered_map<std::string,unsigned int>::find(
                                                                                 &this->shield_ability_name_map_,
                                                                                 (const std::unordered_map<std::string,unsigned int>::key_type *)(v2 + 64));
        __y._M_cur = std::unordered_map<std::string,unsigned int>::end(&this->shield_ability_name_map_)._M_cur;
        if ( std::__detail::operator!=<std::pair<std::string const,unsigned int>,true>(
               (const std::__detail::_Node_iterator_base<std::pair<const std::string,unsigned int>,true> *)(v2 + 32),
               &__y) )
        {
          v10 = std::__detail::_Node_iterator<std::pair<std::string const,unsigned int>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,unsigned int>,false,true> *const)(v2 + 32));
          if ( *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) <= 3 )
          {
            v10 = (std::__detail::_Node_iterator<std::pair<const std::string,unsigned int>,false,true>::pointer)__asan_report_load4(&v10->second);
          }
          --v10->second;
          v11 = std::__detail::_Node_iterator<std::pair<std::string const,unsigned int>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,unsigned int>,false,true> *const)(v2 + 32));
          if ( *(_BYTE *)(((unsigned __int64)&v11->second >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&v11->second >> 3) + 0x7FFF8000) <= 3 )
          {
            v11 = (std::__detail::_Node_iterator<std::pair<const std::string,unsigned int>,false,true>::pointer)__asan_report_load4(&v11->second);
          }
          if ( !v11->second )
            std::unordered_map<std::string,unsigned int>::erase(
              &this->shield_ability_name_map_,
              *(std::unordered_map<std::string,unsigned int>::iterator *)(v2 + 32));
        }
      }
      std::string::~string((void *)(v2 + 64));
    }
    __gnu_cxx::__normal_iterator<std::shared_ptr<BaseAbilityMixin> *,std::vector<std::shared_ptr<BaseAbilityMixin>>>::operator++(&__for_begin);
  }
  if ( v21 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF800C) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 3815: range 00000000136E51C8-00000000136E54A9
PileValue *__cdecl AbilityComp::getPropPileValue(AbilityComp *const this, const std::string *prop_key)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  AbilityDataMgr *p_ability_data_mgr; // rdx
  const std::string *v6; // rcx
  PileValue *v7; // r8
  std::tuple_element<1,const std::pair<std::__detail::_Node_iterator<std::pair<const std::string,PileValue>,false,true>,bool> >::type *v8; // rax
  PileValue *result; // rax
  std::__detail::_Node_iterator_base<std::pair<const std::string,PileValue>,true> __y; // [rsp+10h] [rbp-F0h] BYREF
  const data::ConfigAbilityPropertyEntry *entry; // [rsp+18h] [rbp-E8h]
  std::tuple_element<0,const std::pair<std::__detail::_Node_iterator<std::pair<const std::string,PileValue>,false,true>,bool> >::type *iter; // [rsp+20h] [rbp-E0h]
  std::tuple_element<1,const std::pair<std::__detail::_Node_iterator<std::pair<const std::string,PileValue>,false,true>,bool> >::type *inserted; // [rsp+28h] [rbp-D8h]
  std::pair<std::__detail::_Node_iterator<std::pair<const std::string,PileValue>,false,true>,bool> v14; // [rsp+30h] [rbp-D0h] BYREF
  PileValue v15; // [rsp+40h] [rbp-C0h] BYREF
  char v16[112]; // [rsp+90h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 8 7 it:3816";
  *(_QWORD *)(v2 + 16) = AbilityComp::getPropPileValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116352;
  *(std::unordered_map<std::string,PileValue>::iterator *)(v2 + 32) = std::unordered_map<std::string,PileValue>::find(
                                                                        &this->property_map_,
                                                                        prop_key);
  __y._M_cur = std::unordered_map<std::string,PileValue>::end(&this->property_map_)._M_cur;
  if ( !std::__detail::operator==<std::pair<std::string const,PileValue>,true>(
          (const std::__detail::_Node_iterator_base<std::pair<const std::string,PileValue>,true> *)(v2 + 32),
          &__y) )
    goto LABEL_15;
  p_ability_data_mgr = &ServiceBox::findService<GameserverService>()->ability_data_mgr;
  entry = AbilityDataMgr::getProperty(p_ability_data_mgr, prop_key);
  PileValue::PileValue(&v15, entry);
  v14 = std::unordered_map<std::string,PileValue>::emplace<std::string const&,PileValue>(
          &this->property_map_,
          prop_key,
          &v15,
          v6,
          v7);
  PileValue::~PileValue(&v15);
  iter = (std::tuple_element<0,const std::pair<std::__detail::_Node_iterator<std::pair<const std::string,PileValue>,false,true>,bool> >::type *)std::get<0ul,std::__detail::_Node_iterator<std::pair<std::string const,PileValue>,false,true>,bool>(&v14);
  v8 = (std::tuple_element<1,const std::pair<std::__detail::_Node_iterator<std::pair<const std::string,PileValue>,false,true>,bool> >::type *)std::get<1ul,std::__detail::_Node_iterator<std::pair<std::string const,PileValue>,false,true>,bool>(&v14);
  inserted = v8;
  if ( *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) != 0
    && ((unsigned __int8)v8 & 7) >= *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) )
  {
    __asan_report_load1(v8);
  }
  if ( *inserted )
  {
    if ( *(_BYTE *)(((unsigned __int64)iter >> 3) + 0x7FFF8000) )
      __asan_report_load8(iter);
    *(std::tuple_element<0,const std::pair<std::__detail::_Node_iterator<std::pair<const std::string,PileValue>,false,true>,bool> >::type *)(v2 + 32) = (std::tuple_element<0,const std::pair<std::__detail::_Node_iterator<std::pair<const std::string,PileValue>,false,true>,bool> >::type)iter->_M_cur;
LABEL_15:
    result = &std::__detail::_Node_iterator<std::pair<std::string const,PileValue>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,PileValue>,false,true> *const)(v2 + 32))->second;
    goto LABEL_16;
  }
  if ( !(_BYTE)`guard variable for'AbilityComp::getPropPileValue(std::string const&)::empty_value
    && __cxa_guard_acquire(&`guard variable for'AbilityComp::getPropPileValue(std::string const&)::empty_value) )
  {
    PileValue::PileValue(&AbilityComp::getPropPileValue(std::string const&)::empty_value);
    __cxa_guard_release(&`guard variable for'AbilityComp::getPropPileValue(std::string const&)::empty_value);
    __cxa_atexit(
      (void (__fastcall *)(void *))PileValue::~PileValue,
      &AbilityComp::getPropPileValue(std::string const&)::empty_value,
      &_dso_handle);
  }
  result = &AbilityComp::getPropPileValue(std::string const&)::empty_value;
LABEL_16:
  if ( v16 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3835: range 00000000136E54AA-00000000136E5627
float __cdecl AbilityComp::getProperty(const AbilityComp *const this, const std::string *prop_key)
{
  __m128i v2; // xmm0
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  std::__detail::_Node_const_iterator<std::pair<const std::string,PileValue>,false,true>::pointer v6; // rax
  float default_value; // eax
  AbilityDataMgr *p_ability_data_mgr; // rdx
  const data::ConfigAbilityPropertyEntry *Property; // rdx
  float *p_default_value; // rax
  float result; // xmm0_4
  std::__detail::_Node_iterator_base<std::pair<const std::string,PileValue>,true> __y; // [rsp+18h] [rbp-68h] BYREF
  char v13[96]; // [rsp+20h] [rbp-60h] BYREF

  v3 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 8 7 it:3836";
  *(_QWORD *)(v3 + 16) = AbilityComp::getProperty;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116352;
  *(std::unordered_map<std::string,PileValue>::const_iterator *)(v3 + 32) = std::unordered_map<std::string,PileValue>::find(
                                                                              &this->property_map_,
                                                                              prop_key);
  __y._M_cur = std::unordered_map<std::string,PileValue>::end(&this->property_map_)._M_cur;
  if ( std::__detail::operator!=<std::pair<std::string const,PileValue>,true>(
         (const std::__detail::_Node_iterator_base<std::pair<const std::string,PileValue>,true> *)(v3 + 32),
         &__y) )
  {
    v6 = std::__detail::_Node_const_iterator<std::pair<std::string const,PileValue>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,PileValue>,false,true> *const)(v3 + 32));
    *(float *)v2.m128i_i32 = PileValue::getValue(&v6->second);
    default_value = COERCE_FLOAT(_mm_cvtsi128_si32(v2));
  }
  else
  {
    p_ability_data_mgr = &ServiceBox::findService<GameserverService>()->ability_data_mgr;
    Property = AbilityDataMgr::getProperty(p_ability_data_mgr, prop_key);
    p_default_value = &Property->default_value;
    if ( *(_BYTE *)(((unsigned __int64)p_default_value >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)p_default_value & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_default_value >> 3)
                                                                        + 0x7FFF8000) )
    {
      __asan_report_load4(p_default_value);
    }
    default_value = Property->default_value;
  }
  result = default_value;
  if ( v13 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3844: range 00000000136E5628-00000000136E5ACA
__int64 __fastcall AbilityComp::addProperty(
        AbilityComp *const this,
        const std::string *prop_key,
        __m128 value,
        bool is_limited)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  __m128i v7; // xmm0
  GameserverService *v8; // rax
  common::milog::MiLogStream *v9; // rax
  __int64 result; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  double v12; // xmm0_8
  __m128i v13; // xmm0
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // r13
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rcx
  float v22; // xmm0_4
  float val; // [rsp+24h] [rbp-ACh] BYREF
  float old_prop_value; // [rsp+28h] [rbp-A8h]
  int32_t idx; // [rsp+2Ch] [rbp-A4h]
  PileValue *pile_value; // [rsp+30h] [rbp-A0h]
  const data::AbilityPropExcelConfig *ability_prop_config_ptr; // [rsp+38h] [rbp-98h]
  std::shared_ptr<Config> v29; // [rsp+40h] [rbp-90h] BYREF
  common::milog::MiLogStream v30; // [rsp+50h] [rbp-80h] BYREF
  char v31[96]; // [rsp+70h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v31;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 4 10 value:3843";
  *(_QWORD *)(v4 + 16) = AbilityComp::addProperty;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116348;
  value = (__m128)value.m128_u32[0];
  *(_DWORD *)(v4 + 32) = value.m128_i32[0];
  v8 = ServiceBox::findService<GameserverService>();
  if ( !AbilityDataMgr::hasProperty(&v8->ability_data_mgr, prop_key) )
  {
    common::milog::MiLogStream::create(
      &v30,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/ability/ability_comp.cpp",
      "addProperty",
      3847);
    v9 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(&v30, (const char (*)[21])off_25038B80);
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v9, prop_key);
    common::milog::MiLogStream::~MiLogStream(&v30);
    result = 0xFFFFFFFFLL;
  }
  else
  {
    pile_value = AbilityComp::getPropPileValue(this, prop_key);
    *(float *)v7.m128i_i32 = PileValue::getValue(pile_value);
    old_prop_value = COERCE_FLOAT(_mm_cvtsi128_si32(v7));
    if ( is_limited )
    {
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)&v29);
      v11 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v29);
      ability_prop_config_ptr = data::AbilityPropExcelConfigMgrBase::findAbilityPropExcelConfig(
                                  &v11->design_config.txt_config_mgr.ability_prop_config_mgr,
                                  prop_key);
      std::shared_ptr<Config>::~shared_ptr(&v29);
      if ( ability_prop_config_ptr )
      {
        if ( *(_BYTE *)(((unsigned __int64)&ability_prop_config_ptr->overall_max >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)ability_prop_config_ptr + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&ability_prop_config_ptr->overall_max >> 3)
                                                                                 + 0x7FFF8000) )
        {
          __asan_report_load4(&ability_prop_config_ptr->overall_max);
        }
        *(float *)&v12 = ability_prop_config_ptr->overall_max;
        if ( *(_BYTE *)(((unsigned __int64)&ability_prop_config_ptr->overall_min >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&ability_prop_config_ptr->overall_min >> 3) + 0x7FFF8000) <= 3 )
        {
          v12 = __asan_report_load4(&ability_prop_config_ptr->overall_min);
        }
        PileValue::setLimit(pile_value, ability_prop_config_ptr->overall_min, *(float *)&v12);
      }
      else
      {
        is_limited = 0;
      }
    }
    v13 = _mm_cvtsi32_si128(*(_DWORD *)(v4 + 32));
    idx = PileValue::add(pile_value, *(float *)v13.m128i_i32, is_limited);
    common::milog::MiLogStream::create(
      &v30,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/ability/ability_comp.cpp",
      "addProperty",
      3865);
    v14 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
            &v30,
            (const char (*)[25])"[MOD_PROP] add property:");
    v15 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v14, prop_key);
    v16 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v15, (const char (*)[9])", value:");
    v17 = common::milog::MiLogStream::operator<<<float,(float *)0>(v16, (const float *)(v4 + 32));
    v18 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v17, (const char (*)[11])", pile to:");
    *(float *)v13.m128i_i32 = PileValue::getValue(pile_value);
    LODWORD(val) = _mm_cvtsi128_si32(v13);
    v19 = common::milog::MiLogStream::operator<<<float,(float *)0>(v18, &val);
    v20 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v19, (const char (*)[14])", is_limited:");
    v21 = common::milog::MiLogStream::operator<<(v20, is_limited);
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v21, this->creature_);
    common::milog::MiLogStream::~MiLogStream(&v30);
    v22 = PileValue::getValue(pile_value);
    AbilityComp::modifyCorrespondingFightProp(this, prop_key, v22 - old_prop_value);
    result = (unsigned int)idx;
  }
  if ( v31 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3872: range 00000000136E5ACC-00000000136E5DF1
__int64 __fastcall AbilityComp::delProperty(
        AbilityComp *const this,
        const std::string *prop_key,
        int32_t idx,
        __m128i a4)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  GameserverService *v7; // rax
  common::milog::MiLogStream *v8; // rax
  __int64 result; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // r13
  common::milog::MiLogStream *v15; // rcx
  float Value; // xmm0_4
  float val; // [rsp+2Ch] [rbp-94h] BYREF
  float old_prop_value; // [rsp+30h] [rbp-90h]
  int32_t ret; // [rsp+34h] [rbp-8Ch]
  PileValue *pile_value; // [rsp+38h] [rbp-88h]
  common::milog::MiLogStream v22; // [rsp+40h] [rbp-80h] BYREF
  char v23[96]; // [rsp+60h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v23;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 4 8 idx:3871";
  *(_QWORD *)(v4 + 16) = AbilityComp::delProperty;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116348;
  *(_DWORD *)(v4 + 32) = idx;
  v7 = ServiceBox::findService<GameserverService>();
  if ( !AbilityDataMgr::hasProperty(&v7->ability_data_mgr, prop_key) )
  {
    common::milog::MiLogStream::create(
      &v22,
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/ability/ability_comp.cpp",
      "delProperty",
      3875);
    v8 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(&v22, (const char (*)[21])off_25038B80);
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, prop_key);
    common::milog::MiLogStream::~MiLogStream(&v22);
    result = 0xFFFFFFFFLL;
  }
  else
  {
    pile_value = AbilityComp::getPropPileValue(this, prop_key);
    *(float *)a4.m128i_i32 = PileValue::getValue(pile_value);
    old_prop_value = COERCE_FLOAT(_mm_cvtsi128_si32(a4));
    ret = PileValue::del(pile_value, *(_DWORD *)(v4 + 32));
    common::milog::MiLogStream::create(
      &v22,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/ability/ability_comp.cpp",
      "delProperty",
      3881);
    v10 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
            &v22,
            (const char (*)[24])"[ABILITY] del property:");
    v11 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v10, prop_key);
    v12 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v11, (const char (*)[7])", idx:");
    v13 = common::milog::MiLogStream::operator<<<int,(int *)0>(v12, (const int *)(v4 + 32));
    v14 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v13, (const char (*)[11])", pile to:");
    *(float *)a4.m128i_i32 = PileValue::getValue(pile_value);
    LODWORD(val) = _mm_cvtsi128_si32(a4);
    v15 = common::milog::MiLogStream::operator<<<float,(float *)0>(v14, &val);
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v15, this->creature_);
    common::milog::MiLogStream::~MiLogStream(&v22);
    Value = PileValue::getValue(pile_value);
    AbilityComp::modifyCorrespondingFightProp(this, prop_key, Value - old_prop_value);
    result = (unsigned int)ret;
  }
  if ( v23 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3888: range 00000000136E5DF2-00000000136E5F83
void __cdecl AbilityComp::modifyCorrespondingFightProp(
        AbilityComp *const this,
        const std::string *prop_key,
        float delta_prop_value)
{
  data::FightPropType *v3; // rax
  data::FightPropType *v4; // rdx
  FightPropComp *FightPropComp; // rax
  data::FightPropType fight_prop_type; // [rsp+24h] [rbp-5Ch]
  std::set<data::FightPropType>::iterator __for_begin; // [rsp+28h] [rbp-58h] BYREF
  std::set<data::FightPropType>::iterator __for_end; // [rsp+30h] [rbp-50h] BYREF
  std::set<data::FightPropType> *__for_range; // [rsp+38h] [rbp-48h]
  std::set<data::FightPropType> v11; // [rsp+40h] [rbp-40h] BYREF

  if ( *(char *)(((unsigned __int64)&this->is_init_finish_ >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&this->is_init_finish_);
  if ( this->is_init_finish_ )
  {
    AbilityComp::getFightPropTypeSetByPropKey(&v11, this, prop_key);
    __for_range = &v11;
    __for_begin._M_node = std::set<data::FightPropType>::begin(&v11)._M_node;
    __for_end._M_node = std::set<data::FightPropType>::end(&v11)._M_node;
    while ( std::operator!=(&__for_begin, &__for_end) )
    {
      v3 = (data::FightPropType *)std::_Rb_tree_const_iterator<data::FightPropType>::operator*(&__for_begin);
      v4 = v3;
      if ( *(_BYTE *)(((unsigned __int64)v3 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v3 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v3 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v3);
      }
      fight_prop_type = *v4;
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      FightPropComp = Creature::getFightPropComp(this->creature_);
      FightPropComp::modifyProp(FightPropComp, fight_prop_type, delta_prop_value, 1);
      std::_Rb_tree_const_iterator<data::FightPropType>::operator++(&__for_begin);
    }
    std::set<data::FightPropType>::~set(&v11);
  }
};

// Line 3901: range 00000000136E5F84-00000000136E621F
std::set<data::FightPropType> *__cdecl AbilityComp::getFightPropTypeSetByPropKey(
        std::set<data::FightPropType> *retstr,
        const AbilityComp *const this,
        const std::string *prop_key)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  AbilityDataMgr *p_ability_data_mgr; // rsi
  Creature *creature; // rdx
  Creature *v8; // rax
  unsigned __int64 v9; // rax
  std::set<data::FightPropType>::value_type __x; // [rsp+20h] [rbp-70h] BYREF
  data::ElementType elem_type; // [rsp+24h] [rbp-6Ch]
  std::_Rb_tree_const_iterator<data::FightPropType>::_Self __y; // [rsp+28h] [rbp-68h] BYREF
  char v16[96]; // [rsp+30h] [rbp-60h] BYREF

  v3 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 8 7 it:3903";
  *(_QWORD *)(v3 + 16) = AbilityComp::getFightPropTypeSetByPropKey;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116352;
  p_ability_data_mgr = &ServiceBox::findService<GameserverService>()->ability_data_mgr;
  if ( *(char *)(((unsigned __int64)retstr >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)((((unsigned __int64)&retstr->_M_t._M_impl._M_node_count + 7) >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)retstr + 47) & 7) >= *(_BYTE *)((((unsigned __int64)&retstr->_M_t._M_impl._M_node_count + 7) >> 3)
                                                        + 0x7FFF8000) )
  {
    p_ability_data_mgr = (AbilityDataMgr *)48;
    __asan_report_store_n(retstr, 48LL);
  }
  AbilityDataMgr::getFightPropTypeSet(retstr, p_ability_data_mgr, prop_key);
  *(std::set<data::FightPropType>::iterator *)(v3 + 32) = std::set<data::FightPropType>::find(
                                                            retstr,
                                                            FIGHT_PROP_MAX_ALL_ENERGY);
  __y._M_node = std::set<data::FightPropType>::end(retstr)._M_node;
  if ( std::operator!=((const std::_Rb_tree_const_iterator<data::FightPropType>::_Self *)(v3 + 32), &__y) )
  {
    std::set<data::FightPropType>::erase[abi:cxx11](retstr, *(std::set<data::FightPropType>::const_iterator *)(v3 + 32));
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    creature = this->creature_;
    v8 = creature;
    if ( *(_BYTE *)(((unsigned __int64)creature >> 3) + 0x7FFF8000) )
      v8 = (Creature *)__asan_report_load8(this->creature_);
    v9 = *(_QWORD *)v8->baseclass_0 + 280LL;
    if ( *(_BYTE *)((v9 >> 3) + 0x7FFF8000) )
      v9 = __asan_report_load8(v9);
    elem_type = (*(unsigned int (__fastcall **)(Creature *))v9)(creature);
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    Creature::getFightPropComp(this->creature_);
    __x = FightPropComp::getMaxEnergyType(elem_type);
    std::set<data::FightPropType>::insert(retstr, &__x);
  }
  if ( v16 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return retstr;
};

// Line 3915: range 00000000136E6220-00000000136E654A
FightPropMap *__cdecl AbilityComp::getAbilityCompProp(FightPropMap *retstr, AbilityComp *const this)
{
  __m128i v2; // xmm0
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  std::_Rb_tree_const_iterator<data::FightPropType>::reference v6; // rax
  _DWORD *v7; // rdx
  std::map<data::FightPropType,float>::mapped_type *v8; // rax
  float prop_value; // [rsp+14h] [rbp-DCh]
  std::unordered_map<std::string,PileValue>::iterator __for_begin; // [rsp+18h] [rbp-D8h] BYREF
  std::unordered_map<std::string,PileValue>::iterator __for_end; // [rsp+20h] [rbp-D0h] BYREF
  std::set<data::FightPropType>::iterator __for_begin_0; // [rsp+28h] [rbp-C8h] BYREF
  std::set<data::FightPropType>::iterator __for_end_0; // [rsp+30h] [rbp-C0h] BYREF
  std::unordered_map<std::string,PileValue> *__for_range; // [rsp+38h] [rbp-B8h]
  std::pair<const std::string,PileValue> *__in; // [rsp+40h] [rbp-B0h]
  std::tuple_element<0,std::pair<const std::string,PileValue> >::type *prop_key; // [rsp+48h] [rbp-A8h]
  std::tuple_element<1,std::pair<const std::string,PileValue> >::type *pile_value; // [rsp+50h] [rbp-A0h]
  std::set<data::FightPropType> *__for_range_0; // [rsp+58h] [rbp-98h]
  std::set<data::FightPropType> v20; // [rsp+60h] [rbp-90h] BYREF
  char v21[96]; // [rsp+90h] [rbp-60h] BYREF

  v3 = (unsigned __int64)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 4 20 fight_prop_type:3919";
  *(_QWORD *)(v3 + 16) = AbilityComp::getAbilityCompProp;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116348;
  std::map<data::FightPropType,float>::map(retstr);
  __for_range = &this->property_map_;
  __for_begin._M_cur = std::unordered_map<std::string,PileValue>::begin(&this->property_map_)._M_cur;
  __for_end._M_cur = std::unordered_map<std::string,PileValue>::end(&this->property_map_)._M_cur;
  while ( std::__detail::operator!=<std::pair<std::string const,PileValue>,true>(&__for_begin, &__for_end) )
  {
    __in = std::__detail::_Node_iterator<std::pair<std::string const,PileValue>,false,true>::operator*(&__for_begin);
    prop_key = std::get<0ul,std::string const,PileValue>(__in);
    pile_value = std::get<1ul,std::string const,PileValue>(__in);
    AbilityComp::getFightPropTypeSetByPropKey(&v20, this, prop_key);
    __for_range_0 = &v20;
    __for_begin_0._M_node = std::set<data::FightPropType>::begin(&v20)._M_node;
    __for_end_0._M_node = std::set<data::FightPropType>::end(__for_range_0)._M_node;
    while ( std::operator!=(&__for_begin_0, &__for_end_0) )
    {
      v6 = std::_Rb_tree_const_iterator<data::FightPropType>::operator*(&__for_begin_0);
      v7 = v6;
      if ( *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v6 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000) )
      {
        *(double *)v2.m128i_i64 = __asan_report_load4(v6);
      }
      *(_DWORD *)(v3 + 32) = *v7;
      *(float *)v2.m128i_i32 = PileValue::getValue(pile_value);
      prop_value = COERCE_FLOAT(_mm_cvtsi128_si32(v2));
      v8 = std::map<data::FightPropType,float>::operator[](
             retstr,
             (const std::map<data::FightPropType,float>::key_type *)(v3 + 32));
      if ( *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v8 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(v8);
      }
      v2 = (__m128i)*(unsigned int *)v8;
      *v8 = *(float *)v2.m128i_i32 + prop_value;
      std::_Rb_tree_const_iterator<data::FightPropType>::operator++(&__for_begin_0);
    }
    std::set<data::FightPropType>::~set(&v20);
    std::__detail::_Node_iterator<std::pair<std::string const,PileValue>,false,true>::operator++(&__for_begin);
  }
  if ( v21 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return retstr;
};

// Line 3933: range 00000000136E654C-00000000136E6617
bool __cdecl AbilityComp::hasDynamicValue(const AbilityComp *const this, const std::string *key)
{
  bool result; // al
  std::__detail::_Node_iterator_base<std::pair<const std::string,DynamicActorValue<std::any> >,true> __x; // [rsp+10h] [rbp-30h] BYREF
  std::__detail::_Node_iterator_base<std::pair<const std::string,DynamicActorValue<std::any> >,true> __y; // [rsp+18h] [rbp-28h] BYREF
  std::__detail::_Node_iterator_base<std::pair<const std::string,DynamicActorValue<std::any> >,true> v5; // [rsp+20h] [rbp-20h] BYREF
  std::__detail::_Node_iterator_base<std::pair<const std::string,DynamicActorValue<std::any> >,true> v6; // [rsp+28h] [rbp-18h] BYREF

  __y._M_cur = std::unordered_map<std::string,DynamicActorValue<std::any>>::end(&this->server_dynamic_value_map_)._M_cur;
  __x._M_cur = std::unordered_map<std::string,DynamicActorValue<std::any>>::find(&this->server_dynamic_value_map_, key)._M_cur;
  result = 1;
  if ( !std::__detail::operator!=<std::pair<std::string const,DynamicActorValue<std::any>>,true>(&__x, &__y) )
  {
    v6._M_cur = std::unordered_map<std::string,DynamicActorValue<std::any>>::end(&this->dynamic_value_map_)._M_cur;
    v5._M_cur = std::unordered_map<std::string,DynamicActorValue<std::any>>::find(&this->dynamic_value_map_, key)._M_cur;
    if ( !std::__detail::operator!=<std::pair<std::string const,DynamicActorValue<std::any>>,true>(&v5, &v6) )
      return 0;
  }
  return result;
};

// Line 3939: range 00000000136E6618-00000000136E6706
bool __cdecl AbilityComp::isServerGlobalValueKey(const AbilityComp *const this, const std::string *key)
{
  std::allocator<char> __a; // [rsp+1Fh] [rbp-11h] BYREF

  if ( !(_BYTE)`guard variable for'AbilityComp::isServerGlobalValueKey(std::string const&)::server_global_value_prefix
    && __cxa_guard_acquire(&`guard variable for'AbilityComp::isServerGlobalValueKey(std::string const&)::server_global_value_prefix) )
  {
    std::allocator<char>::allocator(&__a);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)&AbilityComp::isServerGlobalValueKey(std::string const&)const::server_global_value_prefix,
      "SGV_",
      &__a);
    __cxa_guard_release(&`guard variable for'AbilityComp::isServerGlobalValueKey(std::string const&)::server_global_value_prefix);
    __cxa_atexit(
      (void (__fastcall *)(void *))&std::string::~string,
      (void *)&AbilityComp::isServerGlobalValueKey(std::string const&)const::server_global_value_prefix,
      &_dso_handle);
    std::allocator<char>::~allocator(&__a);
  }
  return std::string::rfind(
           key,
           &AbilityComp::isServerGlobalValueKey(std::string const&)const::server_global_value_prefix,
           0LL) == 0;
};

// Line 3946: range 00000000136E6708-00000000136E68C0
void __cdecl AbilityComp::addDynamicFloat(AbilityComp *const this, const std::string *key, float value)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  float new_value; // [rsp+2Ch] [rbp-84h]
  std::__detail::_Node_iterator_base<std::pair<const std::string,DynamicActorValue<std::any> >,true> __y; // [rsp+30h] [rbp-80h] BYREF
  DynamicActorValue<std::any> *dynamic_value; // [rsp+38h] [rbp-78h]
  DynamicActorValue<std::any> v9; // [rsp+40h] [rbp-70h] BYREF
  char v10[96]; // [rsp+50h] [rbp-60h] BYREF

  v3 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 8 7 it:3947";
  *(_QWORD *)(v3 + 16) = AbilityComp::addDynamicFloat;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116352;
  *(std::unordered_map<std::string,DynamicActorValue<std::any>>::iterator *)(v3 + 32) = std::unordered_map<std::string,DynamicActorValue<std::any>>::find(
                                                                                          &this->dynamic_value_map_,
                                                                                          key);
  __y._M_cur = std::unordered_map<std::string,DynamicActorValue<std::any>>::end(&this->dynamic_value_map_)._M_cur;
  if ( !std::__detail::operator==<std::pair<std::string const,DynamicActorValue<std::any>>,true>(
          (const std::__detail::_Node_iterator_base<std::pair<const std::string,DynamicActorValue<std::any> >,true> *)(v3 + 32),
          &__y) )
  {
    dynamic_value = &std::__detail::_Node_iterator<std::pair<std::string const,DynamicActorValue<std::any>>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,DynamicActorValue<std::any> >,false,true> *const)(v3 + 32))->second;
    DynamicActorValue<std::any>::getValue(&v9);
    new_value = safeAnyCast<float>(&v9.value_) + value;
    std::any::~any(&v9.value_);
    AbilityComp::setDynamicValue<float>(this, key, new_value);
  }
  if ( v10 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 3959: range 00000000136E68C2-00000000136E6CE1
void __fastcall AbilityComp::addDynamicFloatWithRange(
        AbilityComp *const this,
        const std::string *key,
        float value,
        float min,
        float max)
{
  unsigned __int64 v5; // r12
  __int64 v6; // rax
  _DWORD *v7; // r13
  __m128i v8; // xmm0
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  const float *v13; // rax
  _DWORD *v14; // rdx
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  std::__detail::_Node_iterator_base<std::pair<const std::string,DynamicActorValue<std::any> >,true> __y; // [rsp+20h] [rbp-E0h] BYREF
  DynamicActorValue<std::any> *dynamic_value; // [rsp+28h] [rbp-D8h]
  DynamicActorValue<std::any> v20; // [rsp+30h] [rbp-D0h] BYREF
  common::milog::MiLogStream v21; // [rsp+40h] [rbp-C0h] BYREF
  char v22[160]; // [rsp+60h] [rbp-A0h] BYREF

  v5 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_1(128LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "5 32 4 14 old_value:3966 48 4 14 new_value:3967 64 4 8 min:3958 80 4 8 max:3958 96 8 7 it:3960";
  *(_QWORD *)(v5 + 16) = AbilityComp::addDynamicFloatWithRange;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234556924;
  v7[536862722] = -234556924;
  v7[536862723] = -202116352;
  *(float *)(v5 + 64) = min;
  v8 = (__m128i)LODWORD(max);
  *(float *)(v5 + 80) = max;
  *(std::unordered_map<std::string,DynamicActorValue<std::any>>::iterator *)(v5 + 96) = std::unordered_map<std::string,DynamicActorValue<std::any>>::find(
                                                                                          &this->dynamic_value_map_,
                                                                                          key);
  __y._M_cur = std::unordered_map<std::string,DynamicActorValue<std::any>>::end(&this->dynamic_value_map_)._M_cur;
  if ( !std::__detail::operator==<std::pair<std::string const,DynamicActorValue<std::any>>,true>(
          (const std::__detail::_Node_iterator_base<std::pair<const std::string,DynamicActorValue<std::any> >,true> *)(v5 + 96),
          &__y) )
  {
    dynamic_value = &std::__detail::_Node_iterator<std::pair<std::string const,DynamicActorValue<std::any>>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,DynamicActorValue<std::any> >,false,true> *const)(v5 + 96))->second;
    DynamicActorValue<std::any>::getValue(&v20);
    *(float *)v8.m128i_i32 = safeAnyCast<float>(&v20.value_);
    *(_DWORD *)(v5 + 32) = _mm_cvtsi128_si32(v8);
    std::any::~any(&v20.value_);
    *(float *)(v5 + 48) = *(float *)(v5 + 32) + value;
    common::milog::MiLogStream::create(
      &v21,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/ability/ability_comp.cpp",
      "addDynamicFloatWithRange",
      3968);
    v9 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v21, key);
    v10 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v9, (const char (*)[6])" val:");
    v11 = common::milog::MiLogStream::operator<<<float,(float *)0>(v10, (const float *)(v5 + 32));
    v12 = common::milog::MiLogStream::operator<<<char [5],(char *[5])0>(v11, (const char (*)[5])off_25038EE0);
    common::milog::MiLogStream::operator<<<float,(float *)0>(v12, (const float *)(v5 + 48));
    common::milog::MiLogStream::~MiLogStream(&v21);
    v13 = std::clamp<float>((const float *)(v5 + 48), (const float *)(v5 + 64), (const float *)(v5 + 80));
    v14 = v13;
    if ( *(_BYTE *)(((unsigned __int64)v13 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v13 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v13 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v13);
    }
    *(_DWORD *)(v5 + 48) = *v14;
    common::milog::MiLogStream::create(
      &v21,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/ability/ability_comp.cpp",
      "addDynamicFloatWithRange",
      3970);
    v15 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v21, key);
    v16 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v15, (const char (*)[12])" clamp val:");
    common::milog::MiLogStream::operator<<<float,(float *)0>(v16, (const float *)(v5 + 48));
    common::milog::MiLogStream::~MiLogStream(&v21);
    AbilityComp::setDynamicValue<float>(this, key, *(float *)(v5 + 48));
    if ( AbilityComp::isServerGlobalValueKey(this, key) )
      AbilityComp::triggerServerGlobalValueChangeEvent(this, key, *(float *)(v5 + 48));
  }
  if ( v22 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 3980: range 00000000136E6CE2-00000000136E70C8
void __fastcall AbilityComp::triggerServerGlobalValueChangeEvent(
        AbilityComp *const this,
        std::string *key,
        float value)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  Creature *creature; // rsi
  Creature *v7; // rax
  unsigned __int64 v8; // rax
  common::milog::MiLogStream *v9; // rcx
  Player *v10; // rax
  PlayerEventComp *EventComp; // r14
  std::string v13; // [rsp+20h] [rbp-F0h] BYREF
  common::milog::MiLogStream v14; // [rsp+40h] [rbp-D0h] BYREF
  char v15[176]; // [rsp+60h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 4 10 value:3979 64 16 20 team_entity_ptr:3981 96 16 15 player_ptr:3986";
  *(_QWORD *)(v3 + 16) = AbilityComp::triggerServerGlobalValueChangeEvent;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -219021312;
  v5[536862723] = -202178560;
  *(float *)(v3 + 48) = value;
  if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->creature_);
  toPtr<AvatarTeamEntity,Creature>((Creature *)(v3 + 64));
  if ( !std::operator==<AvatarTeamEntity>(0LL, (const std::shared_ptr<AvatarTeamEntity> *)(v3 + 64)) )
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    creature = this->creature_;
    v7 = creature;
    if ( *(_BYTE *)(((unsigned __int64)creature >> 3) + 0x7FFF8000) )
      v7 = (Creature *)__asan_report_load8(this->creature_);
    v8 = *(_QWORD *)v7->baseclass_0 + 152LL;
    if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
      v8 = __asan_report_load8(v8);
    (*(void (__fastcall **)(unsigned __int64, Creature *))v8)(v3 + 96, creature);
    if ( std::operator==<Player>(0LL, (const std::shared_ptr<Player> *)(v3 + 96)) )
    {
      common::milog::MiLogStream::create(
        &v14,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/ability/ability_comp.cpp",
        "triggerServerGlobalValueChangeEvent",
        3989);
      v9 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
             &v14,
             (const char (*)[26])"player is null, creature:");
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v9, this->creature_);
      common::milog::MiLogStream::~MiLogStream(&v14);
    }
    else
    {
      v10 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
      EventComp = Player::getEventComp(v10);
      common::tools::perf::make_shared<TeamServerGlobalValueChangeEvent,std::string const&,float &>(
        &v13,
        (float *)key,
        (const std::string *)(v3 + 48),
        (float *)key);
      std::shared_ptr<BaseEvent>::shared_ptr<TeamServerGlobalValueChangeEvent,void>(
        (std::shared_ptr<BaseEvent> *const)&v13._anon_0,
        (std::shared_ptr<TeamServerGlobalValueChangeEvent> *)&v13);
      PlayerEventComp::notifyEvent(EventComp, (BaseEventPtr *)&v13._anon_0);
      std::shared_ptr<BaseEvent>::~shared_ptr((std::shared_ptr<BaseEvent> *const)&v13._anon_0);
      std::shared_ptr<TeamServerGlobalValueChangeEvent>::~shared_ptr((std::shared_ptr<TeamServerGlobalValueChangeEvent> *const)&v13);
    }
    std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v3 + 96));
  }
  std::shared_ptr<AvatarTeamEntity>::~shared_ptr((std::shared_ptr<AvatarTeamEntity> *const)(v3 + 64));
  if ( v15 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 3997: range 00000000136E70CA-00000000136E70F6
void __cdecl AbilityComp::clearDynamicFloat(AbilityComp *const this, const std::string *key)
{
  std::unordered_map<std::string,DynamicActorValue<std::any>>::erase(&this->dynamic_value_map_, key);
};

// Line 4003: range 00000000136E70F8-00000000136E7124
void __cdecl AbilityComp::clearServerDynamicFloat(AbilityComp *const this, const std::string *key)
{
  std::unordered_map<std::string,DynamicActorValue<std::any>>::erase(&this->server_dynamic_value_map_, key);
};

// Line 4009: range 00000000136E7126-00000000136E7945
__int64 __fastcall AbilityComp::getAbilitySpecial(
        const AbilityComp *const this,
        uint32_t ability_name_hash,
        uint32_t param_special_hash,
        float *ability_special_value)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  const std::weak_ptr<BaseTalentMixin> *v7; // rax
  common::milog::MiLogStream *v8; // rcx
  std::__shared_ptr_access<TalentModifyAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  std::__shared_ptr_access<TalentModifyAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  bool v12; // r14
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  __int64 result; // rax
  bool is_find; // [rsp+27h] [rbp-169h]
  float total_delta; // [rsp+28h] [rbp-168h]
  float total_ratio; // [rsp+2Ch] [rbp-164h]
  std::list<std::weak_ptr<BaseTalentMixin>>::const_iterator __for_begin; // [rsp+30h] [rbp-160h] BYREF
  std::list<std::weak_ptr<BaseTalentMixin>>::const_iterator __for_end; // [rsp+38h] [rbp-158h] BYREF
  const std::unordered_map<unsigned int,std::list<std::weak_ptr<BaseTalentMixin>>> *ability_special_map; // [rsp+40h] [rbp-150h]
  const std::list<std::weak_ptr<BaseTalentMixin>> *__for_range; // [rsp+48h] [rbp-148h]
  std::weak_ptr<BaseTalentMixin> v35; // [rsp+50h] [rbp-140h] BYREF
  common::milog::MiLogStream v36; // [rsp+60h] [rbp-130h] BYREF
  char v37[272]; // [rsp+80h] [rbp-110h] BYREF

  v4 = (unsigned __int64)v37;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(224LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "7 48 4 41 excel_ability_special_override_value:4041 64 4 22 ability_name_hash:4008 80 4 23 param"
                        "_special_hash:4008 96 8 13 map_iter:4013 128 8 9 iter:4019 160 16 21 talent_mixin_wtr:4026 192 1"
                        "6 21 talent_mixin_ptr:4028";
  *(_QWORD *)(v4 + 16) = AbilityComp::getAbilitySpecial;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -234556924;
  v6[536862723] = -218959360;
  v6[536862724] = -218959360;
  v6[536862725] = -219021312;
  v6[536862726] = -202178560;
  *(_DWORD *)(v4 + 64) = ability_name_hash;
  *(_DWORD *)(v4 + 80) = param_special_hash;
  is_find = 0;
  *(std::unordered_map<unsigned int,std::unordered_map<unsigned int,std::list<std::weak_ptr<BaseTalentMixin>>>>::const_iterator *)(v4 + 96) = std::unordered_map<unsigned int,std::unordered_map<unsigned int,std::list<std::weak_ptr<BaseTalentMixin>>>>::find(&this->target_ability_special_map_, (const std::unordered_map<unsigned int,std::unordered_map<unsigned int,std::list<std::weak_ptr<BaseTalentMixin>>>>::key_type *)(v4 + 64));
  __for_end._M_node = (const std::__detail::_List_node_base *)std::unordered_map<unsigned int,std::unordered_map<unsigned int,std::list<std::weak_ptr<BaseTalentMixin>>>>::end(&this->target_ability_special_map_)._M_cur;
  if ( !std::__detail::operator==<std::pair<unsigned int const,std::unordered_map<unsigned int,std::list<std::weak_ptr<BaseTalentMixin>>>>,false>(
          (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::unordered_map<unsigned int,std::list<std::weak_ptr<BaseTalentMixin>>> >,false> *)(v4 + 96),
          (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::unordered_map<unsigned int,std::list<std::weak_ptr<BaseTalentMixin>>> >,false> *)&__for_end) )
  {
    ability_special_map = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::unordered_map<unsigned int,std::list<std::weak_ptr<BaseTalentMixin>>>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::unordered_map<unsigned int,std::list<std::weak_ptr<BaseTalentMixin>>> >,false,false> *const)(v4 + 96))->second;
    *(std::unordered_map<unsigned int,std::list<std::weak_ptr<BaseTalentMixin>>>::const_iterator *)(v4 + 128) = std::unordered_map<unsigned int,std::list<std::weak_ptr<BaseTalentMixin>>>::find(ability_special_map, (const std::unordered_map<unsigned int,std::list<std::weak_ptr<BaseTalentMixin>>>::key_type *)(v4 + 80));
    __for_end._M_node = (const std::__detail::_List_node_base *)std::unordered_map<unsigned int,std::list<std::weak_ptr<BaseTalentMixin>>>::end(ability_special_map)._M_cur;
    if ( !std::__detail::operator==<std::pair<unsigned int const,std::list<std::weak_ptr<BaseTalentMixin>>>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::list<std::weak_ptr<BaseTalentMixin>> >,false> *)(v4 + 128),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,std::list<std::weak_ptr<BaseTalentMixin>> >,false> *)&__for_end) )
    {
      total_delta = 0.0;
      total_ratio = 0.0;
      __for_range = &std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::list<std::weak_ptr<BaseTalentMixin>>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,std::list<std::weak_ptr<BaseTalentMixin>> >,false,false> *const)(v4 + 128))->second;
      __for_begin._M_node = std::list<std::weak_ptr<BaseTalentMixin>>::begin(__for_range)._M_node;
      __for_end._M_node = std::list<std::weak_ptr<BaseTalentMixin>>::end(__for_range)._M_node;
      while ( std::operator!=(&__for_begin, &__for_end) )
      {
        v7 = std::_List_const_iterator<std::weak_ptr<BaseTalentMixin>>::operator*(&__for_begin);
        std::weak_ptr<BaseTalentMixin>::weak_ptr((std::weak_ptr<BaseTalentMixin> *const)(v4 + 160), v7);
        std::weak_ptr<BaseTalentMixin>::lock(&v35);
        std::dynamic_pointer_cast<TalentModifyAbilityMixin,BaseTalentMixin>((const std::shared_ptr<BaseTalentMixin> *)(v4 + 192));
        std::shared_ptr<BaseTalentMixin>::~shared_ptr((std::shared_ptr<BaseTalentMixin> *const)&v35);
        if ( std::operator==<TalentModifyAbilityMixin>(
               0LL,
               (const std::shared_ptr<TalentModifyAbilityMixin> *)(v4 + 192)) )
        {
          common::milog::MiLogStream::create(
            &v36,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/ability/ability_comp.cpp",
            "getAbilitySpecial",
            4031);
          v8 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                 &v36,
                 (const char (*)[32])"talent_mixin expired, creature:");
          if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->creature_);
          common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v8, this->creature_);
          common::milog::MiLogStream::~MiLogStream(&v36);
        }
        else
        {
          v9 = std::__shared_ptr_access<TalentModifyAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TalentModifyAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 192));
          total_delta = TalentModifyAbilityMixin::getParamDelta(v9) + total_delta;
          v10 = std::__shared_ptr_access<TalentModifyAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<TalentModifyAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 192));
          total_ratio = TalentModifyAbilityMixin::getParamRatio(v10) + total_ratio;
        }
        std::shared_ptr<TalentModifyAbilityMixin>::~shared_ptr((std::shared_ptr<TalentModifyAbilityMixin> *const)(v4 + 192));
        std::weak_ptr<BaseTalentMixin>::~weak_ptr((std::weak_ptr<BaseTalentMixin> *const)(v4 + 160));
        std::_List_const_iterator<std::weak_ptr<BaseTalentMixin>>::operator++(&__for_begin);
      }
      if ( *(_BYTE *)(((unsigned __int64)ability_special_value >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)ability_special_value & 7) + 3) >= *(_BYTE *)(((unsigned __int64)ability_special_value >> 3)
                                                                                + 0x7FFF8000) )
      {
        __asan_report_load4(ability_special_value);
      }
      *ability_special_value = (float)(total_ratio + 1.0) * (float)(*ability_special_value + total_delta);
      is_find = 1;
    }
  }
  *(_DWORD *)(v4 + 48) = 0;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&v35);
  v11 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v35);
  v12 = AbilityOverrideExcelConfigMgr::getParamOverrideValue(
          &v11->design_config.txt_config_mgr.ability_override_config_mgr,
          *(_DWORD *)(v4 + 64),
          *(_DWORD *)(v4 + 80),
          (float *)(v4 + 48)) == 0;
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)&v35);
  if ( v12 )
  {
    is_find = 1;
    if ( *(_BYTE *)(((unsigned __int64)ability_special_value >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)ability_special_value & 7) + 3) >= *(_BYTE *)(((unsigned __int64)ability_special_value >> 3)
                                                                              + 0x7FFF8000) )
    {
      __asan_report_load4(ability_special_value);
    }
    *ability_special_value = *(float *)(v4 + 48) + *ability_special_value;
    common::milog::MiLogStream::create(
      &v36,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/ability/ability_comp.cpp",
      "getAbilitySpecial",
      4046);
    v13 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
            &v36,
            (const char (*)[19])"ability_name_hash:");
    v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v4 + 64));
    v15 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
            v14,
            (const char (*)[21])" param_special_hash:");
    v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, (const unsigned int *)(v4 + 80));
    v17 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v16, (const char (*)[12])" add value:");
    v18 = common::milog::MiLogStream::operator<<<float,(float *)0>(v17, (const float *)(v4 + 48));
    v19 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v18, (const char (*)[8])" after:");
    common::milog::MiLogStream::operator<<<float,(float *)0>(v19, ability_special_value);
    common::milog::MiLogStream::~MiLogStream(&v36);
  }
  else
  {
    common::milog::MiLogStream::create(
      &v36,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/ability/ability_comp.cpp",
      "getAbilitySpecial",
      4050);
    v20 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
            &v36,
            (const char (*)[19])"ability_name_hash:");
    v21 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v20, (const unsigned int *)(v4 + 64));
    v22 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
            v21,
            (const char (*)[21])" param_special_hash:");
    v23 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v22, (const unsigned int *)(v4 + 80));
    v24 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v23, (const char (*)[8])" after:");
    common::milog::MiLogStream::operator<<<float,(float *)0>(v24, ability_special_value);
    common::milog::MiLogStream::~MiLogStream(&v36);
  }
  if ( !is_find )
    result = 0xFFFFFFFFLL;
  else
    result = 0LL;
  if ( v37 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 4065: range 00000000136E7946-00000000136E8C20
void __fastcall AbilityComp::addAbilityState(
        AbilityComp *const this,
        data::AbilityState state,
        ActorModifier *modifier)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  uint32_t *v6; // rax
  unsigned __int64 v7; // rax
  FightPropComp *v8; // rax
  PileBoolValue *IsInvincible; // rax
  common::milog::MiLogStream *v10; // r14
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // r14
  Creature *v13; // rsi
  unsigned __int64 *v14; // rax
  unsigned __int64 v15; // rax
  common::milog::MiLogStream *v16; // rax
  FightPropComp *v17; // rax
  PileBoolValue *IsLockHp; // rax
  common::milog::MiLogStream *v19; // r14
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // r14
  Creature *v22; // rsi
  unsigned __int64 *v23; // rax
  unsigned __int64 v24; // rax
  common::milog::MiLogStream *v25; // rax
  FightPropComp *FightPropComp; // rax
  PileBoolValue *IsLockHealHp; // rax
  common::milog::MiLogStream *v28; // r14
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // r14
  Creature *creature; // rsi
  unsigned __int64 *v32; // rax
  unsigned __int64 v33; // rax
  common::milog::MiLogStream *v34; // rax
  Creature *v35; // rsi
  Creature *v36; // rax
  unsigned __int64 v37; // rax
  char v38; // al
  _BOOL4 v39; // r14d
  unsigned __int64 v40; // rax
  unsigned __int64 v41; // rdx
  common::milog::MiLogStream *v42; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v43; // rax
  int v44; // r14d
  Player *v45; // rax
  PlayerAvatarComp *AvatarComp; // r14
  Avatar *v47; // rax
  uint32_t EntityId; // eax
  std::unordered_map<data::AbilityState,unsigned int>::mapped_type *v49; // rax
  uint32_t *v50; // rdx
  unsigned __int64 v52; // rax
  unsigned __int64 v53; // rdx
  char v54; // r14
  TxtConfigMgr *p_txt_config_mgr; // rcx
  char v56; // r15
  common::milog::MiLogStream *v57; // rax
  common::milog::MiLogStream *v58; // rax
  common::milog::MiLogStream *v59; // rax
  common::milog::MiLogStream *v60; // rax
  Player *v61; // rax
  PlayerBasicComp *BasicComp; // rax
  std::pair<std::weak_ptr<Player>,long unsigned int> *v63; // rax
  Creature *v64; // rsi
  Creature *v65; // rax
  unsigned __int64 v66; // rax
  Creature *v67; // rsi
  Creature *v68; // rax
  unsigned __int64 v69; // rax
  Player *v70; // rax
  PlayerWatcherComp *WatcherComp; // rax
  uint32_t real_apply_entity_id; // [rsp+24h] [rbp-16Ch]
  unsigned __int64 __y; // [rsp+28h] [rbp-168h] BYREF
  uint32_t *count; // [rsp+30h] [rbp-160h]
  const data::MonsterExcelConfig *monster_config_ptr; // [rsp+38h] [rbp-158h]
  std::pair<std::shared_ptr<Player>,long unsigned int> __p; // [rsp+40h] [rbp-150h] BYREF
  common::milog::MiLogStream v78; // [rsp+60h] [rbp-130h] BYREF
  std::string val; // [rsp+80h] [rbp-110h] BYREF
  char v80[240]; // [rsp+A0h] [rbp-F0h] BYREF

  v3 = (unsigned __int64)v80;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 48 4 20 apply_entity_id:4118 64 8 10 state:4064 96 16 17 creature_ptr:4120 128 16 16 monster_p"
                        "tr:4122 160 16 15 player_ptr:4142";
  *(_QWORD *)(v3 + 16) = AbilityComp::addAbilityState;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218959360;
  v5[536862723] = -219021312;
  v5[536862724] = -219021312;
  v5[536862725] = -202178560;
  *(_QWORD *)(v3 + 64) = state;
  v6 = std::unordered_map<data::AbilityState,unsigned int>::operator[](
         &this->state_count_map_,
         (const std::unordered_map<data::AbilityState,unsigned int>::key_type *)(v3 + 64));
  count = v6;
  if ( *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)v6 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(v6);
  }
  if ( !*count )
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->ability_state_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->ability_state_);
    this->ability_state_ |= *(_QWORD *)(v3 + 64);
    v7 = *(_QWORD *)(v3 + 64);
    if ( v7 == 0x2000000 )
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      FightPropComp = Creature::getFightPropComp(this->creature_);
      IsLockHealHp = FightPropComp::getIsLockHealHp(FightPropComp);
      PileBoolValue::set(IsLockHealHp, 0, 1);
      common::milog::MiLogStream::create(
        &v78,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/ability/ability_comp.cpp",
        "addAbilityState",
        4088);
      v28 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
              &v78,
              (const char (*)[21])"creature runtime_id:");
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      *(_DWORD *)(v3 + 48) = Entity::getEntityId((const Entity *const)this->creature_);
      v29 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v28, (const unsigned int *)(v3 + 48));
      v30 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v29, (const char (*)[2])" ");
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      creature = this->creature_;
      v32 = (unsigned __int64 *)creature;
      if ( *(_BYTE *)(((unsigned __int64)creature >> 3) + 0x7FFF8000) )
        v32 = (unsigned __int64 *)__asan_report_load8(this->creature_);
      v33 = *v32;
      if ( *(_BYTE *)((v33 >> 3) + 0x7FFF8000) )
        v33 = __asan_report_load8(v33);
      (*(void (__fastcall **)(std::string *, Creature *))v33)(&val, creature);
      v34 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v30, &val);
      common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
        v34,
        (const char (*)[24])" add lockHpNoHeal state");
      std::string::~string(&val);
      common::milog::MiLogStream::~MiLogStream(&v78);
    }
    else if ( v7 <= 0x2000000 )
    {
      if ( v7 == 1 )
      {
        if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->creature_);
        v8 = Creature::getFightPropComp(this->creature_);
        IsInvincible = FightPropComp::getIsInvincible(v8);
        PileBoolValue::set(IsInvincible, 1, 1);
        common::milog::MiLogStream::create(
          &v78,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/ability/ability_comp.cpp",
          "addAbilityState",
          4076);
        v10 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
                &v78,
                (const char (*)[21])"creature runtime_id:");
        if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->creature_);
        *(_DWORD *)(v3 + 48) = Entity::getEntityId((const Entity *const)this->creature_);
        v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v10,
                (const unsigned int *)(v3 + 48));
        v12 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v11, (const char (*)[2])" ");
        if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->creature_);
        v13 = this->creature_;
        v14 = (unsigned __int64 *)v13;
        if ( *(_BYTE *)(((unsigned __int64)v13 >> 3) + 0x7FFF8000) )
          v14 = (unsigned __int64 *)__asan_report_load8(this->creature_);
        v15 = *v14;
        if ( *(_BYTE *)((v15 >> 3) + 0x7FFF8000) )
          v15 = __asan_report_load8(v15);
        (*(void (__fastcall **)(std::string *, Creature *))v15)(&val, v13);
        v16 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v12, &val);
        common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
          v16,
          (const char (*)[22])" add invincible state");
        std::string::~string(&val);
        common::milog::MiLogStream::~MiLogStream(&v78);
      }
      else if ( v7 == 512 )
      {
        if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->creature_);
        v17 = Creature::getFightPropComp(this->creature_);
        IsLockHp = FightPropComp::getIsLockHp(v17);
        PileBoolValue::set(IsLockHp, 0, 1);
        common::milog::MiLogStream::create(
          &v78,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/ability/ability_comp.cpp",
          "addAbilityState",
          4082);
        v19 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
                &v78,
                (const char (*)[21])"creature runtime_id:");
        if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->creature_);
        *(_DWORD *)(v3 + 48) = Entity::getEntityId((const Entity *const)this->creature_);
        v20 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v19,
                (const unsigned int *)(v3 + 48));
        v21 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v20, (const char (*)[2])" ");
        if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->creature_);
        v22 = this->creature_;
        v23 = (unsigned __int64 *)v22;
        if ( *(_BYTE *)(((unsigned __int64)v22 >> 3) + 0x7FFF8000) )
          v23 = (unsigned __int64 *)__asan_report_load8(this->creature_);
        v24 = *v23;
        if ( *(_BYTE *)((v24 >> 3) + 0x7FFF8000) )
          v24 = __asan_report_load8(v24);
        (*(void (__fastcall **)(std::string *, Creature *))v24)(&val, v22);
        v25 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v21, &val);
        common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v25, (const char (*)[18])" add lockHp state");
        std::string::~string(&val);
        common::milog::MiLogStream::~MiLogStream(&v78);
      }
    }
  }
  if ( *(_BYTE *)(((unsigned __int64)count >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)count & 7) + 3) >= *(_BYTE *)(((unsigned __int64)count >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(count);
  }
  ++*count;
  if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->creature_);
  v35 = this->creature_;
  v36 = v35;
  if ( *(_BYTE *)(((unsigned __int64)v35 >> 3) + 0x7FFF8000) )
    v36 = (Creature *)__asan_report_load8(this->creature_);
  v37 = *(_QWORD *)v36->baseclass_0 + 24LL;
  if ( *(_BYTE *)((v37 >> 3) + 0x7FFF8000) )
    v37 = __asan_report_load8(v37);
  if ( (*(unsigned int (__fastcall **)(Creature *))v37)(v35) != 1 || *(_QWORD *)(v3 + 64) != 0x10000LL )
    goto LABEL_61;
  if ( *(_BYTE *)(((unsigned __int64)count >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)count & 7) + 3) >= *(_BYTE *)(((unsigned __int64)count >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(count);
  }
  if ( *count == 1 )
    v38 = 1;
  else
LABEL_61:
    v38 = 0;
  if ( !v38 )
    goto LABEL_78;
  if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->creature_);
  toPtr<Avatar,Creature>((Creature *)(v3 + 128));
  if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v3 + 128), 0LL) )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&val,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/ability/ability_comp.cpp",
      "addAbilityState",
      4104);
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(
      (common::milog::MiLogStream *const)&val,
      this->creature_);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&val);
    v39 = 0;
  }
  else
  {
    v40 = (unsigned __int64)std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
    if ( *(_BYTE *)((v40 >> 3) + 0x7FFF8000) )
      v40 = __asan_report_load8(v40);
    v41 = *(_QWORD *)v40 + 152LL;
    if ( *(_BYTE *)((v41 >> 3) + 0x7FFF8000) )
      v40 = __asan_report_load8(*(_QWORD *)v40 + 152LL);
    (*(void (__fastcall **)(unsigned __int64, unsigned __int64))v41)(v3 + 160, v40);
    if ( std::operator==<Player>((const std::shared_ptr<Player> *)(v3 + 160), 0LL) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&val,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/ability/ability_comp.cpp",
        "addAbilityState",
        4110);
      v42 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
              (common::milog::MiLogStream *const)&val,
              (const char (*)[22])"avatar getPlayer fail");
      v43 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
      common::milog::MiLogStream::operator<<<Avatar,(Avatar*)0>(v42, v43);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&val);
      v44 = 0;
    }
    else
    {
      v45 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
      AvatarComp = Player::getAvatarComp(v45);
      v47 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
      PlayerAvatarComp::onAvatarFrozen(AvatarComp, v47);
      v44 = 1;
    }
    std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v3 + 160));
    v39 = v44 == 1;
  }
  std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 128));
  if ( v39 )
  {
LABEL_78:
    if ( *(_BYTE *)(((unsigned __int64)count >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)count & 7) + 3) >= *(_BYTE *)(((unsigned __int64)count >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(count);
    }
    if ( *count == 1 )
    {
      *(_DWORD *)(v3 + 48) = ActorModifier::getApplyEntityId(modifier);
      if ( *(_DWORD *)(v3 + 48) )
      {
        EntityId = *(_DWORD *)(v3 + 48);
      }
      else
      {
        if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->creature_);
        EntityId = Entity::getEntityId((const Entity *const)this->creature_);
      }
      real_apply_entity_id = EntityId;
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      Entity::findEntityInSameScene<Creature>((const Entity *const)(v3 + 96), (uint32_t)this->creature_);
      v49 = std::unordered_map<data::AbilityState,unsigned int>::operator[](
              &this->state_first_source_entity_id_map_,
              (const std::unordered_map<data::AbilityState,unsigned int>::key_type *)(v3 + 64));
      v50 = v49;
      if ( *(_BYTE *)(((unsigned __int64)v49 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v49 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v49 >> 3) + 0x7FFF8000) )
      {
        __asan_report_store4(v49);
      }
      *v50 = real_apply_entity_id;
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      toPtr<Monster,Creature>((Creature *)(v3 + 128));
      if ( std::operator!=<Monster>((const std::shared_ptr<Monster> *)(v3 + 128), 0LL)
        && std::operator!=<Creature>((const std::shared_ptr<Creature> *)(v3 + 96), 0LL) )
      {
        v52 = (unsigned __int64)std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
        if ( *(_BYTE *)((v52 >> 3) + 0x7FFF8000) )
          v52 = __asan_report_load8(v52);
        v53 = *(_QWORD *)v52 + 312LL;
        if ( *(_BYTE *)((v53 >> 3) + 0x7FFF8000) )
          v52 = __asan_report_load8(*(_QWORD *)v52 + 312LL);
        monster_config_ptr = (const data::MonsterExcelConfig *)(*(__int64 (__fastcall **)(unsigned __int64))v53)(v52);
        v54 = 0;
        if ( !monster_config_ptr )
          goto LABEL_106;
        ServiceBox::findService<GameserverService>();
        GameserverService::getConfig((GameserverService *const)(v3 + 160));
        v54 = 1;
        p_txt_config_mgr = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160))->design_config.txt_config_mgr;
        if ( *(_BYTE *)(((unsigned __int64)&monster_config_ptr->id >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&monster_config_ptr->id >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&monster_config_ptr->id);
        }
        if ( !TxtConfigMgr::isMonsterAnimal(p_txt_config_mgr, monster_config_ptr->id) )
          v56 = 1;
        else
LABEL_106:
          v56 = 0;
        if ( v54 )
          std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 160));
        if ( v56 )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&val,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/ability/ability_comp.cpp",
            "addAbilityState",
            4131);
          v57 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                  (common::milog::MiLogStream *const)&val,
                  (const char (*)[11])"creature_:");
          v58 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v57, (const char (*)[11])" modifier:");
          v59 = common::milog::MiLogStream::operator<<<ActorModifier,(ActorModifier*)0>(v58, modifier);
          v60 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                  v59,
                  (const char (*)[18])" apply_entity_id:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v60, (const unsigned int *)(v3 + 48));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&val);
          std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
          Creature::findOriginalPlayer((Creature *const)(v3 + 160));
          if ( std::operator!=<Player>((const std::shared_ptr<Player> *)(v3 + 160), 0LL) )
          {
            v61 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
            BasicComp = Player::getBasicComp(v61);
            __y = PlayerBasicComp::getPlayerTimeMs(BasicComp);
            std::make_pair<std::shared_ptr<Player> &,unsigned long>(&__p, (std::shared_ptr<Player> *)(v3 + 160), &__y);
            v63 = std::unordered_map<data::AbilityState,std::pair<std::weak_ptr<Player>,unsigned long>>::operator[](
                    &this->state_start_player_time_ms_map_,
                    (const std::unordered_map<data::AbilityState,std::pair<std::weak_ptr<Player>,long unsigned int>>::key_type *)(v3 + 64));
            std::pair<std::weak_ptr<Player>,unsigned long>::operator=<std::shared_ptr<Player>,unsigned long>(v63, &__p);
            std::pair<std::shared_ptr<Player>,unsigned long>::~pair(&__p);
          }
          std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v3 + 160));
        }
      }
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      v64 = this->creature_;
      v65 = v64;
      if ( *(_BYTE *)(((unsigned __int64)v64 >> 3) + 0x7FFF8000) )
        v65 = (Creature *)__asan_report_load8(this->creature_);
      v66 = *(_QWORD *)v65->baseclass_0 + 24LL;
      if ( *(_BYTE *)((v66 >> 3) + 0x7FFF8000) )
        v66 = __asan_report_load8(v66);
      if ( (*(unsigned int (__fastcall **)(Creature *))v66)(v64) == 1 )
      {
        if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->creature_);
        v67 = this->creature_;
        v68 = v67;
        if ( *(_BYTE *)(((unsigned __int64)v67 >> 3) + 0x7FFF8000) )
          v68 = (Creature *)__asan_report_load8(this->creature_);
        v69 = *(_QWORD *)v68->baseclass_0 + 152LL;
        if ( *(_BYTE *)((v69 >> 3) + 0x7FFF8000) )
          v69 = __asan_report_load8(v69);
        (*(void (__fastcall **)(unsigned __int64, Creature *))v69)(v3 + 160, v67);
        if ( std::operator!=<Player>((const std::shared_ptr<Player> *)(v3 + 160), 0LL) )
        {
          v70 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
          WatcherComp = Player::getWatcherComp(v70);
          PlayerWatcherComp::recordCurAvatarAbilityState(WatcherComp, *(data::AbilityState *)(v3 + 64));
        }
        std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v3 + 160));
      }
      std::shared_ptr<Monster>::~shared_ptr((std::shared_ptr<Monster> *const)(v3 + 128));
      std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 96));
    }
  }
  if ( v80 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 4153: range 00000000136E8C22-00000000136E97E2
void __fastcall AbilityComp::removeAbilityState(
        AbilityComp *const this,
        data::AbilityState state,
        ActorModifier *modifier)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  uint32_t *v6; // rax
  unsigned __int64 v7; // rax
  FightPropComp *v8; // rax
  PileBoolValue *IsInvincible; // rax
  common::milog::MiLogStream *v10; // r14
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // r14
  Creature *v13; // rsi
  unsigned __int64 *v14; // rax
  unsigned __int64 v15; // rax
  common::milog::MiLogStream *v16; // rax
  FightPropComp *v17; // rax
  PileBoolValue *IsLockHp; // rax
  common::milog::MiLogStream *v19; // r14
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // r14
  Creature *v22; // rsi
  unsigned __int64 *v23; // rax
  unsigned __int64 v24; // rax
  common::milog::MiLogStream *v25; // rax
  FightPropComp *FightPropComp; // rax
  PileBoolValue *IsLockHealHp; // rax
  common::milog::MiLogStream *v28; // r14
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // r14
  Creature *creature; // rsi
  unsigned __int64 *v32; // rax
  unsigned __int64 v33; // rax
  common::milog::MiLogStream *v34; // rax
  std::__detail::_Node_iterator<std::pair<const data::AbilityState,std::pair<std::weak_ptr<Player>,long unsigned int> >,false,false>::pointer v35; // rax
  Player *v36; // rax
  PlayerBasicComp *BasicComp; // rax
  uint64_t v38; // rax
  common::milog::MiLogStream *v39; // rax
  common::milog::MiLogStream *v40; // rax
  common::milog::MiLogStream *v41; // rax
  common::milog::MiLogStream *v42; // rax
  common::milog::MiLogStream *v43; // rcx
  common::milog::MiLogStream *v44; // rax
  common::milog::MiLogStream *v45; // r14
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v46; // rax
  Player *v47; // rax
  PlayerWatcherComp *WatcherComp; // rax
  unsigned int val; // [rsp+24h] [rbp-12Ch] BYREF
  uint32_t *count; // [rsp+28h] [rbp-128h]
  uint64_t start_time_ms; // [rsp+30h] [rbp-120h]
  uint64_t now_time_ms; // [rsp+38h] [rbp-118h]
  common::milog::MiLogStream v53; // [rsp+40h] [rbp-110h] BYREF
  std::string v54; // [rsp+60h] [rbp-F0h] BYREF
  char v55[208]; // [rsp+80h] [rbp-D0h] BYREF

  v3 = (unsigned __int64)v55;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(160LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 8 9 iter:4191 64 8 17 pass_time_ms:4199 96 8 10 state:4152 128 16 15 player_ptr:4194";
  *(_QWORD *)(v3 + 16) = AbilityComp::removeAbilityState;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -218959360;
  v5[536862722] = -218959360;
  v5[536862723] = -218959360;
  v5[536862724] = -202178560;
  *(_QWORD *)(v3 + 96) = state;
  v6 = std::unordered_map<data::AbilityState,unsigned int>::operator[](
         &this->state_count_map_,
         (const std::unordered_map<data::AbilityState,unsigned int>::key_type *)(v3 + 96));
  count = v6;
  if ( *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)v6 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v6 >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(v6);
  }
  if ( *count )
  {
    if ( *(_BYTE *)(((unsigned __int64)count >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)count & 7) + 3) >= *(_BYTE *)(((unsigned __int64)count >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(count);
    }
    if ( !--*count )
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->ability_state_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->ability_state_);
      this->ability_state_ &= ~*(_QWORD *)(v3 + 96);
      v7 = *(_QWORD *)(v3 + 96);
      if ( v7 == 0x2000000 )
      {
        if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->creature_);
        FightPropComp = Creature::getFightPropComp(this->creature_);
        IsLockHealHp = FightPropComp::getIsLockHealHp(FightPropComp);
        PileBoolValue::set(IsLockHealHp, 0, 0);
        common::milog::MiLogStream::create(
          &v53,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/ability/ability_comp.cpp",
          "removeAbilityState",
          4181);
        v28 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
                &v53,
                (const char (*)[21])"creature runtime_id:");
        if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->creature_);
        val = Entity::getEntityId((const Entity *const)this->creature_);
        v29 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v28, &val);
        v30 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v29, (const char (*)[2])" ");
        if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->creature_);
        creature = this->creature_;
        v32 = (unsigned __int64 *)creature;
        if ( *(_BYTE *)(((unsigned __int64)creature >> 3) + 0x7FFF8000) )
          v32 = (unsigned __int64 *)__asan_report_load8(this->creature_);
        v33 = *v32;
        if ( *(_BYTE *)((v33 >> 3) + 0x7FFF8000) )
          v33 = __asan_report_load8(v33);
        (*(void (__fastcall **)(std::string *, Creature *))v33)(&v54, creature);
        v34 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v30, &v54);
        common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
          v34,
          (const char (*)[27])" remove lockHPNoHeal state");
        std::string::~string(&v54);
        common::milog::MiLogStream::~MiLogStream(&v53);
      }
      else if ( v7 <= 0x2000000 )
      {
        if ( v7 == 1 )
        {
          if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->creature_);
          v8 = Creature::getFightPropComp(this->creature_);
          IsInvincible = FightPropComp::getIsInvincible(v8);
          PileBoolValue::set(IsInvincible, 1, 0);
          common::milog::MiLogStream::create(
            &v53,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/ability/ability_comp.cpp",
            "removeAbilityState",
            4169);
          v10 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
                  &v53,
                  (const char (*)[21])"creature runtime_id:");
          if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->creature_);
          val = Entity::getEntityId((const Entity *const)this->creature_);
          v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, &val);
          v12 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v11, (const char (*)[2])" ");
          if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->creature_);
          v13 = this->creature_;
          v14 = (unsigned __int64 *)v13;
          if ( *(_BYTE *)(((unsigned __int64)v13 >> 3) + 0x7FFF8000) )
            v14 = (unsigned __int64 *)__asan_report_load8(this->creature_);
          v15 = *v14;
          if ( *(_BYTE *)((v15 >> 3) + 0x7FFF8000) )
            v15 = __asan_report_load8(v15);
          (*(void (__fastcall **)(std::string *, Creature *))v15)(&v54, v13);
          v16 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v12, &v54);
          common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
            v16,
            (const char (*)[25])" remove invincible state");
          std::string::~string(&v54);
          common::milog::MiLogStream::~MiLogStream(&v53);
        }
        else if ( v7 == 512 )
        {
          if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->creature_);
          v17 = Creature::getFightPropComp(this->creature_);
          IsLockHp = FightPropComp::getIsLockHp(v17);
          PileBoolValue::set(IsLockHp, 0, 0);
          common::milog::MiLogStream::create(
            &v53,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/ability/ability_comp.cpp",
            "removeAbilityState",
            4175);
          v19 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
                  &v53,
                  (const char (*)[21])"creature runtime_id:");
          if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->creature_);
          val = Entity::getEntityId((const Entity *const)this->creature_);
          v20 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, &val);
          v21 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v20, (const char (*)[2])" ");
          if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->creature_);
          v22 = this->creature_;
          v23 = (unsigned __int64 *)v22;
          if ( *(_BYTE *)(((unsigned __int64)v22 >> 3) + 0x7FFF8000) )
            v23 = (unsigned __int64 *)__asan_report_load8(this->creature_);
          v24 = *v23;
          if ( *(_BYTE *)((v24 >> 3) + 0x7FFF8000) )
            v24 = __asan_report_load8(v24);
          (*(void (__fastcall **)(std::string *, Creature *))v24)(&v54, v22);
          v25 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v21, &v54);
          common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
            v25,
            (const char (*)[21])" remove lockHP state");
          std::string::~string(&v54);
          common::milog::MiLogStream::~MiLogStream(&v53);
        }
      }
    }
    if ( *(_BYTE *)(((unsigned __int64)count >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)count & 7) + 3) >= *(_BYTE *)(((unsigned __int64)count >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(count);
    }
    if ( !*count )
    {
      *(std::unordered_map<data::AbilityState,std::pair<std::weak_ptr<Player>,long unsigned int>>::iterator *)(v3 + 32) = std::unordered_map<data::AbilityState,std::pair<std::weak_ptr<Player>,unsigned long>>::find(&this->state_start_player_time_ms_map_, (const std::unordered_map<data::AbilityState,std::pair<std::weak_ptr<Player>,long unsigned int>>::key_type *)(v3 + 96));
      *(std::unordered_map<data::AbilityState,std::pair<std::weak_ptr<Player>,long unsigned int>>::iterator *)(v3 + 64) = std::unordered_map<data::AbilityState,std::pair<std::weak_ptr<Player>,unsigned long>>::end(&this->state_start_player_time_ms_map_);
      if ( std::__detail::operator!=<std::pair<data::AbilityState const,std::pair<std::weak_ptr<Player>,unsigned long>>,false>(
             (const std::__detail::_Node_iterator_base<std::pair<const data::AbilityState,std::pair<std::weak_ptr<Player>,long unsigned int> >,false> *)(v3 + 32),
             (const std::__detail::_Node_iterator_base<std::pair<const data::AbilityState,std::pair<std::weak_ptr<Player>,long unsigned int> >,false> *)(v3 + 64)) )
      {
        std::__detail::_Node_iterator<std::pair<data::AbilityState const,std::pair<std::weak_ptr<Player>,unsigned long>>,false,false>::operator->((const std::__detail::_Node_iterator<std::pair<const data::AbilityState,std::pair<std::weak_ptr<Player>,long unsigned int> >,false,false> *const)(v3 + 32));
        std::weak_ptr<Player>::lock((const std::weak_ptr<Player> *const)(v3 + 128));
        if ( std::operator!=<Player>((const std::shared_ptr<Player> *)(v3 + 128), 0LL) )
        {
          v35 = std::__detail::_Node_iterator<std::pair<data::AbilityState const,std::pair<std::weak_ptr<Player>,unsigned long>>,false,false>::operator->((const std::__detail::_Node_iterator<std::pair<const data::AbilityState,std::pair<std::weak_ptr<Player>,long unsigned int> >,false,false> *const)(v3 + 32));
          if ( *(_BYTE *)(((unsigned __int64)&v35->second.second >> 3) + 0x7FFF8000) )
            v35 = (std::__detail::_Node_iterator<std::pair<const data::AbilityState,std::pair<std::weak_ptr<Player>,long unsigned int> >,false,false>::pointer)__asan_report_load8(&v35->second.second);
          start_time_ms = v35->second.second;
          v36 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
          BasicComp = Player::getBasicComp(v36);
          now_time_ms = PlayerBasicComp::getPlayerTimeMs(BasicComp);
          if ( start_time_ms >= now_time_ms )
            v38 = 0LL;
          else
            v38 = now_time_ms - start_time_ms;
          *(_QWORD *)(v3 + 64) = v38;
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&v54,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/ability/ability_comp.cpp",
            "removeAbilityState",
            4201);
          v39 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                  (common::milog::MiLogStream *const)&v54,
                  (const char (*)[20])"AbilityState state:");
          val = *(_QWORD *)(v3 + 96);
          v40 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v39, &val);
          v41 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                  v40,
                  (const char (*)[15])" pass_time_ms:");
          v42 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                  v41,
                  (const unsigned __int64 *)(v3 + 64));
          v43 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v42, (const char (*)[12])" creature_:");
          if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->creature_);
          v44 = common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v43, this->creature_);
          v45 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v44, (const char (*)[10])" player_:");
          v46 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
          operator<<(v45, v46);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v54);
          v47 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
          WatcherComp = Player::getWatcherComp(v47);
          PlayerWatcherComp::triggerAbilityStatePassTime(
            WatcherComp,
            *(data::AbilityState *)(v3 + 96),
            *(_QWORD *)(v3 + 64));
        }
        std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v3 + 128));
      }
      std::unordered_map<data::AbilityState,std::pair<std::weak_ptr<Player>,unsigned long>>::erase(
        &this->state_start_player_time_ms_map_,
        (const std::unordered_map<data::AbilityState,std::pair<std::weak_ptr<Player>,long unsigned int>>::key_type *)(v3 + 96));
      std::unordered_map<data::AbilityState,unsigned int>::erase(
        &this->state_first_source_entity_id_map_,
        (const std::unordered_map<data::AbilityState,unsigned int>::key_type *)(v3 + 96));
    }
  }
  if ( v55 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 4212: range 00000000136E97E4-00000000136E9A09
AbilityComp *__fastcall AbilityComp::findAbilityStateFirstSource(
        AbilityComp *const this,
        data::AbilityState state,
        __int64 a3)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  std::__detail::_Node_iterator_base<std::pair<const data::AbilityState,unsigned int>,false> *p_y; // rsi
  __int64 v7; // r14
  std::__detail::_Node_iterator<std::pair<const data::AbilityState,unsigned int>,false,false>::pointer v8; // rax
  char v9; // dl
  std::__detail::_Node_iterator_base<std::pair<const data::AbilityState,unsigned int>,false> __y; // [rsp+28h] [rbp-98h] BYREF
  char v14[144]; // [rsp+30h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 32 8 9 iter:4213 64 8 10 state:4211";
  *(_QWORD *)(v3 + 16) = AbilityComp::findAbilityStateFirstSource;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -218959360;
  v5[536862722] = -202116352;
  *(_QWORD *)(v3 + 64) = a3;
  *(std::unordered_map<data::AbilityState,unsigned int>::iterator *)(v3 + 32) = std::unordered_map<data::AbilityState,unsigned int>::find(
                                                                                  (std::unordered_map<data::AbilityState,unsigned int> *const)(state + 632),
                                                                                  (const std::unordered_map<data::AbilityState,unsigned int>::key_type *)(v3 + 64));
  __y._M_cur = std::unordered_map<data::AbilityState,unsigned int>::end((std::unordered_map<data::AbilityState,unsigned int> *const)(state + 632))._M_cur;
  p_y = &__y;
  if ( std::__detail::operator==<std::pair<data::AbilityState const,unsigned int>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<const data::AbilityState,unsigned int>,false> *)(v3 + 32),
         &__y) )
  {
    std::shared_ptr<Creature>::shared_ptr((std::shared_ptr<Creature> *const)this, 0LL);
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)(state + 8) >> 3) + 0x7FFF8000) )
      __asan_report_load8(state + 8);
    v7 = *(_QWORD *)(state + 8);
    v8 = std::__detail::_Node_iterator<std::pair<data::AbilityState const,unsigned int>,false,false>::operator->((const std::__detail::_Node_iterator<std::pair<const data::AbilityState,unsigned int>,false,false> *const)(v3 + 32));
    v9 = *(_BYTE *)(((unsigned __int64)&v8->second >> 3) + 0x7FFF8000);
    LOBYTE(p_y) = v9 != 0;
    if ( v9 != 0 && v9 <= 3 )
      __asan_report_load4(&v8->second);
    if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
      __asan_report_store16(this, p_y);
    Entity::findEntityInSameScene<Creature>((const Entity *const)this, v7);
  }
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return this;
};

// Line 4223: range 00000000136E9A0A-00000000136E9A57
bool __cdecl AbilityComp::containsState(AbilityComp *const this, data::AbilityState state)
{
  if ( *(_BYTE *)(((unsigned __int64)&this->ability_state_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->ability_state_);
  return (state & this->ability_state_) != 0;
};

// Line 4231: range 00000000136E9A58-00000000136E9B42
int32_t __cdecl AbilityComp::addFilterElementModifier(AbilityComp *const this, ActorModifier *modifier)
{
  data::ConfigAbilityModifier *config_modifier; // [rsp+10h] [rbp-30h]
  std::unordered_map<data::ElementType,std::vector<std::shared_ptr<ActorModifier>>>::mapped_type *modifier_vec; // [rsp+18h] [rbp-28h]
  std::shared_ptr<ActorModifier> p_t; // [rsp+20h] [rbp-20h] BYREF

  config_modifier = ActorModifier::getConfigRef(modifier);
  if ( *(_BYTE *)(((unsigned __int64)&config_modifier->element_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&config_modifier->element_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&config_modifier->element_type);
  }
  if ( config_modifier->element_type == None_0 )
    return -1;
  modifier_vec = std::unordered_map<data::ElementType,std::vector<std::shared_ptr<ActorModifier>>>::operator[](
                   &this->element_modifier_map_,
                   &config_modifier->element_type);
  toThisPtr<ActorModifier>((ActorModifier *)&p_t);
  common::tools::MiscUtils::seekThenAdd<std::shared_ptr<ActorModifier>>(modifier_vec, &p_t);
  std::shared_ptr<ActorModifier>::~shared_ptr(&p_t);
  return 0;
};

// Line 4242: range 00000000136E9B44-00000000136EA02E
int32_t __cdecl AbilityComp::removeFilterElementModifier(AbilityComp *const this, ActorModifier *modifier)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  int32_t v5; // r14d
  common::milog::MiLogStream *v6; // rcx
  common::milog::MiLogStream *v7; // rcx
  int32_t result; // eax
  bool have_modifier; // [rsp+1Bh] [rbp-105h]
  int val; // [rsp+1Ch] [rbp-104h] BYREF
  std::vector<std::shared_ptr<ActorModifier>>::iterator __for_begin; // [rsp+20h] [rbp-100h] BYREF
  std::vector<std::shared_ptr<ActorModifier>>::iterator __for_end; // [rsp+28h] [rbp-F8h] BYREF
  const data::ConfigAbilityModifier *config_modifier; // [rsp+30h] [rbp-F0h]
  std::vector<std::shared_ptr<ActorModifier>> *modifier_vec; // [rsp+38h] [rbp-E8h]
  std::vector<std::shared_ptr<ActorModifier>> *__for_range; // [rsp+40h] [rbp-E0h]
  ActorModifierPtr *tmp_modifier_ptr; // [rsp+48h] [rbp-D8h]
  std::vector<std::shared_ptr<ActorModifier>> *__for_range_0; // [rsp+50h] [rbp-D0h]
  ActorModifierPtr *tmp_modifier_ptr_0; // [rsp+58h] [rbp-C8h]
  std::shared_ptr<ActorModifier> __r; // [rsp+60h] [rbp-C0h] BYREF
  common::milog::MiLogStream v20; // [rsp+70h] [rbp-B0h] BYREF
  char v21[144]; // [rsp+90h] [rbp-90h] BYREF

  v2 = (unsigned __int64)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 8 7 it:4246 64 16 17 modifier_ptr:4252";
  *(_QWORD *)(v2 + 16) = AbilityComp::removeFilterElementModifier;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -202178560;
  config_modifier = ActorModifier::getConfigRef(modifier);
  if ( *(_BYTE *)(((unsigned __int64)&config_modifier->element_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&config_modifier->element_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&config_modifier->element_type);
  }
  if ( config_modifier->element_type )
  {
    *(std::unordered_map<data::ElementType,std::vector<std::shared_ptr<ActorModifier>>>::iterator *)(v2 + 32) = std::unordered_map<data::ElementType,std::vector<std::shared_ptr<ActorModifier>>>::find(&this->element_modifier_map_, &config_modifier->element_type);
    __for_end._M_current = (std::shared_ptr<ActorModifier> *)std::unordered_map<data::ElementType,std::vector<std::shared_ptr<ActorModifier>>>::end(&this->element_modifier_map_)._M_cur;
    if ( std::__detail::operator==<std::pair<data::ElementType const,std::vector<std::shared_ptr<ActorModifier>>>,false>(
           (const std::__detail::_Node_iterator_base<std::pair<const data::ElementType,std::vector<std::shared_ptr<ActorModifier>> >,false> *)(v2 + 32),
           (const std::__detail::_Node_iterator_base<std::pair<const data::ElementType,std::vector<std::shared_ptr<ActorModifier>> >,false> *)&__for_end) )
    {
      common::milog::MiLogStream::create(
        &v20,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "removeFilterElementModifier",
        4249);
      v6 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(&v20, (const char (*)[25])off_250396E0);
      if ( *(_BYTE *)(((unsigned __int64)&config_modifier->element_type >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&config_modifier->element_type >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&config_modifier->element_type);
      }
      val = config_modifier->element_type;
      v7 = common::milog::MiLogStream::operator<<<int,(int *)0>(v6, &val);
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v7, this->creature_);
      common::milog::MiLogStream::~MiLogStream(&v20);
      v5 = -1;
    }
    else
    {
      toThisPtr<ActorModifier>((ActorModifier *)(v2 + 64));
      modifier_vec = &std::__detail::_Node_iterator<std::pair<data::ElementType const,std::vector<std::shared_ptr<ActorModifier>>>,false,false>::operator->((const std::__detail::_Node_iterator<std::pair<const data::ElementType,std::vector<std::shared_ptr<ActorModifier>> >,false,false> *const)(v2 + 32))->second;
      __for_range = modifier_vec;
      __for_begin._M_current = std::vector<std::shared_ptr<ActorModifier>>::begin(modifier_vec)._M_current;
      __for_end._M_current = std::vector<std::shared_ptr<ActorModifier>>::end(__for_range)._M_current;
      while ( __gnu_cxx::operator!=<std::shared_ptr<ActorModifier> *,std::vector<std::shared_ptr<ActorModifier>>>(
                &__for_begin,
                &__for_end) )
      {
        tmp_modifier_ptr = __gnu_cxx::__normal_iterator<std::shared_ptr<ActorModifier> *,std::vector<std::shared_ptr<ActorModifier>>>::operator*(&__for_begin);
        if ( std::operator==<ActorModifier,ActorModifier>(
               tmp_modifier_ptr,
               (const std::shared_ptr<ActorModifier> *)(v2 + 64)) )
        {
          std::shared_ptr<ActorModifier>::shared_ptr(&__r, 0LL);
          std::shared_ptr<ActorModifier>::operator=(tmp_modifier_ptr, &__r);
          std::shared_ptr<ActorModifier>::~shared_ptr(&__r);
          break;
        }
        __gnu_cxx::__normal_iterator<std::shared_ptr<ActorModifier> *,std::vector<std::shared_ptr<ActorModifier>>>::operator++(&__for_begin);
      }
      have_modifier = 0;
      __for_range_0 = modifier_vec;
      __for_begin._M_current = std::vector<std::shared_ptr<ActorModifier>>::begin(modifier_vec)._M_current;
      __for_end._M_current = std::vector<std::shared_ptr<ActorModifier>>::end(__for_range_0)._M_current;
      while ( __gnu_cxx::operator!=<std::shared_ptr<ActorModifier> *,std::vector<std::shared_ptr<ActorModifier>>>(
                &__for_begin,
                &__for_end) )
      {
        tmp_modifier_ptr_0 = __gnu_cxx::__normal_iterator<std::shared_ptr<ActorModifier> *,std::vector<std::shared_ptr<ActorModifier>>>::operator*(&__for_begin);
        if ( std::operator!=<ActorModifier>(tmp_modifier_ptr_0, 0LL) )
        {
          have_modifier = 1;
          break;
        }
        __gnu_cxx::__normal_iterator<std::shared_ptr<ActorModifier> *,std::vector<std::shared_ptr<ActorModifier>>>::operator++(&__for_begin);
      }
      if ( !have_modifier )
        std::unordered_map<data::ElementType,std::vector<std::shared_ptr<ActorModifier>>>::erase(
          &this->element_modifier_map_,
          *(std::unordered_map<data::ElementType,std::vector<std::shared_ptr<ActorModifier>>>::iterator *)(v2 + 32));
      v5 = 0;
      std::shared_ptr<ActorModifier>::~shared_ptr((std::shared_ptr<ActorModifier> *const)(v2 + 64));
    }
  }
  else
  {
    v5 = -1;
  }
  result = v5;
  if ( v21 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 4282: range 00000000136EA030-00000000136EA41B
__int64 __fastcall AbilityComp::hasElementTypeModifiers(
        const AbilityComp *const this,
        data::ElementType element_type,
        bool is_need_durability_not_zero)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  __int64 result; // rax
  std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // r14
  std::vector<std::shared_ptr<ActorModifier>>::const_iterator __for_begin; // [rsp+10h] [rbp-D0h] BYREF
  std::vector<std::shared_ptr<ActorModifier>>::const_iterator __for_end; // [rsp+18h] [rbp-C8h] BYREF
  const std::vector<std::shared_ptr<ActorModifier>> *__for_range; // [rsp+20h] [rbp-C0h]
  const std::shared_ptr<ActorModifier> *actor_modifier_ptr; // [rsp+28h] [rbp-B8h]
  common::milog::MiLogStream v15; // [rsp+30h] [rbp-B0h] BYREF
  char v16[144]; // [rsp+50h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 17 element_type:4281 64 8 30 element_modifier_map_iter:4283";
  *(_QWORD *)(v3 + 16) = AbilityComp::hasElementTypeModifiers;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116352;
  *(_DWORD *)(v3 + 48) = element_type;
  *(std::unordered_map<data::ElementType,std::vector<std::shared_ptr<ActorModifier>>>::const_iterator *)(v3 + 64) = std::unordered_map<data::ElementType,std::vector<std::shared_ptr<ActorModifier>>>::find(&this->element_modifier_map_, (const std::unordered_map<data::ElementType,std::vector<std::shared_ptr<ActorModifier>>>::key_type *)(v3 + 48));
  __for_end._M_current = (const std::shared_ptr<ActorModifier> *)std::unordered_map<data::ElementType,std::vector<std::shared_ptr<ActorModifier>>>::end(&this->element_modifier_map_)._M_cur;
  if ( std::__detail::operator==<std::pair<data::ElementType const,std::vector<std::shared_ptr<ActorModifier>>>,false>(
         (const std::__detail::_Node_iterator_base<std::pair<const data::ElementType,std::vector<std::shared_ptr<ActorModifier>> >,false> *)(v3 + 64),
         (const std::__detail::_Node_iterator_base<std::pair<const data::ElementType,std::vector<std::shared_ptr<ActorModifier>> >,false> *)&__for_end) )
  {
    result = 0LL;
  }
  else if ( !is_need_durability_not_zero )
  {
    common::milog::MiLogStream::create(
      &v15,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/ability/ability_comp.cpp",
      "hasElementTypeModifiers",
      4291);
    common::milog::MiLogStream::operator<<<char [50],(char *[50])0>(
      &v15,
      (const char (*)[50])"hasElementTypeModifiers no need durablity is zero");
    common::milog::MiLogStream::~MiLogStream(&v15);
    result = 1LL;
  }
  else
  {
    __for_range = &std::__detail::_Node_const_iterator<std::pair<data::ElementType const,std::vector<std::shared_ptr<ActorModifier>>>,false,false>::operator->((const std::__detail::_Node_const_iterator<std::pair<const data::ElementType,std::vector<std::shared_ptr<ActorModifier>> >,false,false> *const)(v3 + 64))->second;
    __for_begin._M_current = std::vector<std::shared_ptr<ActorModifier>>::begin(__for_range)._M_current;
    __for_end._M_current = std::vector<std::shared_ptr<ActorModifier>>::end(__for_range)._M_current;
    while ( __gnu_cxx::operator!=<std::shared_ptr<ActorModifier> const*,std::vector<std::shared_ptr<ActorModifier>>>(
              &__for_begin,
              &__for_end) )
    {
      actor_modifier_ptr = __gnu_cxx::__normal_iterator<std::shared_ptr<ActorModifier> const*,std::vector<std::shared_ptr<ActorModifier>>>::operator*(&__for_begin);
      if ( !std::operator==<ActorModifier>(actor_modifier_ptr, 0LL) )
      {
        v7 = std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)actor_modifier_ptr);
        if ( !ActorModifier::getDurablityIsZero(v7) )
        {
          common::milog::MiLogStream::create(
            &v15,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/ability/ability_comp.cpp",
            "hasElementTypeModifiers",
            4304);
          v8 = common::milog::MiLogStream::operator<<<char [61],(char *[61])0>(
                 &v15,
                 (const char (*)[61])"hasElementTypeModifiers find modifier durablity is not zero:");
          common::milog::MiLogStream::operator<<<ActorModifier,(ActorModifier*)0>(v8, actor_modifier_ptr);
          common::milog::MiLogStream::~MiLogStream(&v15);
          result = 1LL;
          goto LABEL_15;
        }
      }
      __gnu_cxx::__normal_iterator<std::shared_ptr<ActorModifier> const*,std::vector<std::shared_ptr<ActorModifier>>>::operator++(&__for_begin);
    }
    common::milog::MiLogStream::create(
      &v15,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/ability/ability_comp.cpp",
      "hasElementTypeModifiers",
      4308);
    v9 = common::milog::MiLogStream::operator<<<char [56],(char *[56])0>(
           &v15,
           (const char (*)[56])"hasElementTypeModifiers element_type durability is zero");
    __for_end._M_current = (const std::shared_ptr<ActorModifier> *)data::enumValToStr((data::ElementType)*(_DWORD *)(v3 + 48));
    common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v9, (const char *const *)&__for_end);
    common::milog::MiLogStream::~MiLogStream(&v15);
    result = 0LL;
  }
LABEL_15:
  if ( v16 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 4313: range 00000000136EA41C-00000000136EA529
ElementDurabilityInfo *__cdecl AbilityComp::seekThenAddDurabilityInfo(
        std::vector<ElementDurabilityInfo> *modifier_durability_vec)
{
  std::vector<ElementDurabilityInfo>::iterator __for_begin; // [rsp+10h] [rbp-50h] BYREF
  std::vector<ElementDurabilityInfo>::iterator __for_end; // [rsp+18h] [rbp-48h] BYREF
  std::vector<ElementDurabilityInfo> *__for_range; // [rsp+20h] [rbp-40h]
  ElementDurabilityInfo *info; // [rsp+28h] [rbp-38h]
  ElementDurabilityInfo __args_0; // [rsp+30h] [rbp-30h] BYREF

  __for_range = modifier_durability_vec;
  __for_begin._M_current = std::vector<ElementDurabilityInfo>::begin(modifier_durability_vec)._M_current;
  __for_end._M_current = std::vector<ElementDurabilityInfo>::end(modifier_durability_vec)._M_current;
  while ( __gnu_cxx::operator!=<ElementDurabilityInfo *,std::vector<ElementDurabilityInfo>>(&__for_begin, &__for_end) )
  {
    info = __gnu_cxx::__normal_iterator<ElementDurabilityInfo *,std::vector<ElementDurabilityInfo>>::operator*(&__for_begin);
    if ( std::operator==<ActorModifier>(&info->modifier_ptr, 0LL) )
      return info;
    __gnu_cxx::__normal_iterator<ElementDurabilityInfo *,std::vector<ElementDurabilityInfo>>::operator++(&__for_begin);
  }
  memset(&__args_0, 0, sizeof(__args_0));
  ElementDurabilityInfo::ElementDurabilityInfo(&__args_0);
  std::vector<ElementDurabilityInfo>::emplace_back<ElementDurabilityInfo>(modifier_durability_vec, &__args_0, &__args_0);
  ElementDurabilityInfo::~ElementDurabilityInfo(&__args_0);
  return std::vector<ElementDurabilityInfo>::back(modifier_durability_vec);
};

// Line 4324: range 00000000136EA52A-00000000136EA960
int32_t __cdecl AbilityComp::addModifierElementDurability(
        AbilityComp *const this,
        ActorModifier *modifier,
        float durability,
        float duration)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r13
  __m128i v7; // xmm0
  common::milog::MiLogStream *v8; // rcx
  int32_t v9; // r14d
  Scene *v10; // rax
  uint64_t SceneDiscreteTimeMs; // rax
  common::milog::MiLogStream *v12; // rdx
  int32_t result; // eax
  float new_reduce_ratio; // [rsp+20h] [rbp-A0h]
  float element_durability; // [rsp+24h] [rbp-9Ch]
  ElementDurabilityInfo *info; // [rsp+28h] [rbp-98h]
  common::milog::MiLogStream v17; // [rsp+30h] [rbp-90h] BYREF
  char v18[112]; // [rsp+50h] [rbp-70h] BYREF

  v4 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 16 14 scene_ptr:4334";
  *(_QWORD *)(v4 + 16) = AbilityComp::addModifierElementDurability;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202178560;
  v7 = _mm_cvtsi32_si128(LODWORD(durability));
  *(float *)v7.m128i_i32 = AbilityComp::calcOriginElementDurability(this, modifier, *(float *)v7.m128i_i32);
  element_durability = COERCE_FLOAT(_mm_cvtsi128_si32(v7));
  new_reduce_ratio = 0.0;
  if ( duration > 0.0 )
    new_reduce_ratio = element_durability / duration;
  info = AbilityComp::seekThenAddDurabilityInfo(&this->modifier_durability_vec_);
  toThisPtr<ActorModifier>((ActorModifier *)(v4 + 32));
  std::shared_ptr<ActorModifier>::operator=(&info->modifier_ptr, (std::shared_ptr<ActorModifier> *)(v4 + 32));
  std::shared_ptr<ActorModifier>::~shared_ptr((std::shared_ptr<ActorModifier> *const)(v4 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&info->reduce_ratio >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&info->reduce_ratio >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&info->reduce_ratio);
  }
  info->reduce_ratio = new_reduce_ratio;
  if ( *(_BYTE *)(((unsigned __int64)&info->remaining_durability >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)info + 20) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&info->remaining_durability >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_store4(&info->remaining_durability);
  }
  info->remaining_durability = element_durability;
  if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->creature_);
  Entity::getScene((const Entity *const)(v4 + 32));
  if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v4 + 32)) )
  {
    common::milog::MiLogStream::create(
      &v17,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "addModifierElementDurability",
      4337);
    v8 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
           &v17,
           (const char (*)[25])"getScene fail! creature:");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v8, this->creature_);
    common::milog::MiLogStream::~MiLogStream(&v17);
    v9 = -1;
  }
  else
  {
    v10 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
    SceneDiscreteTimeMs = Scene::getSceneDiscreteTimeMs(v10);
    if ( *(_BYTE *)(((unsigned __int64)&info->last_tick_time_ms_ >> 3) + 0x7FFF8000) )
      SceneDiscreteTimeMs = __asan_report_store8(&info->last_tick_time_ms_);
    info->last_tick_time_ms_ = SceneDiscreteTimeMs;
    common::milog::MiLogStream::create(
      &v17,
      &common::milog::MiLogDefault::default_log_obj_,
      0x11u,
      "./src/ability/ability_comp.cpp",
      "addModifierElementDurability",
      4342);
    v12 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
            &v17,
            (const char (*)[28])"DURABILITY durability_info:");
    operator<<(v12, info);
    common::milog::MiLogStream::~MiLogStream(&v17);
    v9 = 0;
  }
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v4 + 32));
  result = v9;
  if ( v18 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4348: range 00000000136EA962-00000000136EACB6
int32_t __cdecl AbilityComp::setModifierElementDurability(
        AbilityComp *const this,
        ActorModifier *modifier,
        float reduce_element_ratio,
        float remaining_element_durability)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r13
  common::milog::MiLogStream *v7; // rcx
  int32_t v8; // r14d
  Scene *v9; // rax
  uint64_t SceneDiscreteTimeMs; // rax
  int32_t result; // eax
  ElementDurabilityInfo *info; // [rsp+28h] [rbp-98h]
  common::milog::MiLogStream v13; // [rsp+30h] [rbp-90h] BYREF
  char v14[112]; // [rsp+50h] [rbp-70h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 16 14 scene_ptr:4353";
  *(_QWORD *)(v4 + 16) = AbilityComp::setModifierElementDurability;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202178560;
  info = AbilityComp::seekThenAddDurabilityInfo(&this->modifier_durability_vec_);
  toThisPtr<ActorModifier>((ActorModifier *)(v4 + 32));
  std::shared_ptr<ActorModifier>::operator=(&info->modifier_ptr, (std::shared_ptr<ActorModifier> *)(v4 + 32));
  std::shared_ptr<ActorModifier>::~shared_ptr((std::shared_ptr<ActorModifier> *const)(v4 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&info->reduce_ratio >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&info->reduce_ratio >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&info->reduce_ratio);
  }
  info->reduce_ratio = reduce_element_ratio;
  if ( *(_BYTE *)(((unsigned __int64)&info->remaining_durability >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)info + 20) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&info->remaining_durability >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_store4(&info->remaining_durability);
  }
  info->remaining_durability = remaining_element_durability;
  if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->creature_);
  Entity::getScene((const Entity *const)(v4 + 32));
  if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v4 + 32)) )
  {
    common::milog::MiLogStream::create(
      &v13,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "setModifierElementDurability",
      4356);
    v7 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
           &v13,
           (const char (*)[25])"getScene fail! creature:");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v7, this->creature_);
    common::milog::MiLogStream::~MiLogStream(&v13);
    v8 = -1;
  }
  else
  {
    v9 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
    SceneDiscreteTimeMs = Scene::getSceneDiscreteTimeMs(v9);
    if ( *(_BYTE *)(((unsigned __int64)&info->last_tick_time_ms_ >> 3) + 0x7FFF8000) )
      SceneDiscreteTimeMs = __asan_report_store8(&info->last_tick_time_ms_);
    info->last_tick_time_ms_ = SceneDiscreteTimeMs;
    v8 = 0;
  }
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v4 + 32));
  result = v8;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4364: range 00000000136EACB8-00000000136EAF48
int32_t __cdecl AbilityComp::refreshModifierElementDurability(
        AbilityComp *const this,
        ActorModifier *modifier,
        float elem_durability)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  std::vector<ElementDurabilityInfo>::size_type v6; // r15
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rcx
  int32_t result; // eax
  __m128i v10; // xmm0
  std::vector<ElementDurabilityInfo>::reference v11; // rdx
  float *p_remaining_durability; // rax
  int v13; // [rsp+8h] [rbp-B8h]
  common::milog::MiLogStream v14; // [rsp+30h] [rbp-90h] BYREF
  char v15[112]; // [rsp+50h] [rbp-70h] BYREF

  v3 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 4 10 index:4365";
  *(_QWORD *)(v3 + 16) = AbilityComp::refreshModifierElementDurability;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116348;
  *(_DWORD *)(v3 + 32) = AbilityComp::getModifierIndexFromDurabilityVec(this, modifier);
  v6 = *(unsigned int *)(v3 + 32);
  if ( v6 < std::vector<ElementDurabilityInfo>::size(&this->modifier_durability_vec_) )
  {
    v10 = _mm_cvtsi32_si128(LODWORD(elem_durability));
    *(float *)v10.m128i_i32 = AbilityComp::calcOriginElementDurability(this, modifier, *(float *)v10.m128i_i32);
    v13 = _mm_cvtsi128_si32(v10);
    v11 = std::vector<ElementDurabilityInfo>::operator[](&this->modifier_durability_vec_, *(unsigned int *)(v3 + 32));
    p_remaining_durability = &v11->remaining_durability;
    if ( *(_BYTE *)(((unsigned __int64)p_remaining_durability >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)p_remaining_durability & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_remaining_durability >> 3)
                                                                               + 0x7FFF8000) )
    {
      __asan_report_store4(p_remaining_durability);
    }
    LODWORD(v11->remaining_durability) = v13;
    result = 0;
  }
  else
  {
    common::milog::MiLogStream::create(
      &v14,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "refreshModifierElementDurability",
      4368);
    v7 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v14, (const char (*)[15])"invalid index:");
    v8 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v3 + 32));
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v8, this->creature_);
    common::milog::MiLogStream::~MiLogStream(&v14);
    result = -1;
  }
  if ( v15 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4377: range 00000000136EAF4A-00000000136EB1CC
int32_t __cdecl AbilityComp::prelongModifierElementDurability(
        AbilityComp *const this,
        ActorModifier *modifier,
        float elem_durability)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  std::vector<ElementDurabilityInfo>::size_type v6; // r15
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rcx
  int32_t result; // eax
  __m128i v10; // xmm0
  std::vector<ElementDurabilityInfo>::reference v11; // rax
  float element_durability; // [rsp+2Ch] [rbp-94h]
  common::milog::MiLogStream v13; // [rsp+30h] [rbp-90h] BYREF
  char v14[112]; // [rsp+50h] [rbp-70h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 4 10 index:4378";
  *(_QWORD *)(v3 + 16) = AbilityComp::prelongModifierElementDurability;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116348;
  *(_DWORD *)(v3 + 32) = AbilityComp::getModifierIndexFromDurabilityVec(this, modifier);
  v6 = *(unsigned int *)(v3 + 32);
  if ( v6 < std::vector<ElementDurabilityInfo>::size(&this->modifier_durability_vec_) )
  {
    v10 = _mm_cvtsi32_si128(LODWORD(elem_durability));
    *(float *)v10.m128i_i32 = AbilityComp::calcOriginElementDurability(this, modifier, *(float *)v10.m128i_i32);
    element_durability = COERCE_FLOAT(_mm_cvtsi128_si32(v10));
    v11 = std::vector<ElementDurabilityInfo>::operator[](&this->modifier_durability_vec_, *(unsigned int *)(v3 + 32));
    if ( *(_BYTE *)(((unsigned __int64)&v11->remaining_durability >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)v11 + 20) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v11->remaining_durability >> 3)
                                                         + 0x7FFF8000) )
    {
      __asan_report_load4(&v11->remaining_durability);
    }
    v11->remaining_durability = v11->remaining_durability + element_durability;
    result = 0;
  }
  else
  {
    common::milog::MiLogStream::create(
      &v13,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "prelongModifierElementDurability",
      4381);
    v7 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(&v13, (const char (*)[15])"invalid index:");
    v8 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v3 + 32));
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v8, this->creature_);
    common::milog::MiLogStream::~MiLogStream(&v13);
    result = -1;
  }
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4390: range 00000000136EB1CE-00000000136EB4CD
// local variable allocation has failed, the output may be wrong!
float __cdecl AbilityComp::calcOriginElementDurability(
        AbilityComp *const this,
        ActorModifier *modifier,
        float element_durability)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r13
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  const std::string *p_ABILITY_BURNING_NAME; // r14
  ActorAbility *v8; // rax
  data::ConfigAbility *ConfigRef; // rax
  __m128i v10; // xmm0
  float result; // xmm0_4
  float v12; // [rsp+8h] [rbp-E8h]
  float max_element_durability; // [rsp+2Ch] [rbp-C4h]
  std::shared_ptr<Config> v15; // [rsp+30h] [rbp-C0h] BYREF
  common::milog::MiLogStream v16; // [rsp+40h] [rbp-B0h] BYREF
  char v17[144]; // [rsp+60h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 32 16 16 ability_ptr:4391 64 16 23 parent_ability_ptr:4397";
  *(_QWORD *)(v3 + 16) = AbilityComp::calcOriginElementDurability;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -219021312;
  v5[536862722] = -202178560;
  ActorModifier::getParentAbility((const ActorModifier *const)(v3 + 32));
  if ( std::operator==<ActorAbility>((const std::shared_ptr<ActorAbility> *)(v3 + 32), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v16,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "calcOriginElementDurability",
      4394);
    common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(&v16, (const char (*)[23])"getParentAbility fails");
    common::milog::MiLogStream::~MiLogStream(&v16);
    v12 = 0.0;
  }
  else
  {
    ActorModifier::getParentAbility((const ActorModifier *const)(v3 + 64));
    if ( std::operator==<ActorAbility>((const std::shared_ptr<ActorAbility> *)(v3 + 64), 0LL) )
    {
      v12 = 0.0;
    }
    else
    {
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)&v15);
      v6 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v15);
      p_ABILITY_BURNING_NAME = &JsonConfigMgr::getElementDefine(&v6->design_config.json_config_mgr)->ABILITY_BURNING_NAME;
      v8 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      ConfigRef = ActorAbility::getConfigRef(v8);
      LOBYTE(p_ABILITY_BURNING_NAME) = std::operator==<char>(&ConfigRef->ability_name, p_ABILITY_BURNING_NAME);
      std::shared_ptr<Config>::~shared_ptr(&v15);
      if ( (_BYTE)p_ABILITY_BURNING_NAME )
      {
        *(float *)v10.m128i_i32 = AbilityComp::getMaxElementDurabilityByType(this, Fire);
        max_element_durability = COERCE_FLOAT(_mm_cvtsi128_si32(v10));
        if ( max_element_durability > element_durability )
          element_durability = max_element_durability;
      }
      v12 = element_durability;
    }
    std::shared_ptr<ActorAbility>::~shared_ptr((std::shared_ptr<ActorAbility> *const)(v3 + 64));
  }
  std::shared_ptr<ActorAbility>::~shared_ptr((std::shared_ptr<ActorAbility> *const)(v3 + 32));
  result = v12;
  if ( v17 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 4410: range 00000000136EB4CE-00000000136EB742
int32_t __cdecl AbilityComp::removeModifierElement(AbilityComp *const this, ActorModifier *modifier)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  common::milog::MiLogStream *v5; // rax
  int32_t result; // eax
  std::vector<ElementDurabilityInfo>::iterator __for_begin; // [rsp+10h] [rbp-C0h] BYREF
  std::vector<ElementDurabilityInfo>::iterator __for_end; // [rsp+18h] [rbp-B8h] BYREF
  std::vector<ElementDurabilityInfo> *__for_range; // [rsp+20h] [rbp-B0h]
  ElementDurabilityInfo *info; // [rsp+28h] [rbp-A8h]
  std::shared_ptr<ActorModifier> __r; // [rsp+30h] [rbp-A0h] BYREF
  common::milog::MiLogStream v12; // [rsp+40h] [rbp-90h] BYREF
  char v13[112]; // [rsp+60h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 17 modifier_ptr:4411";
  *(_QWORD *)(v2 + 16) = AbilityComp::removeModifierElement;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  toThisPtr<ActorModifier>((ActorModifier *)(v2 + 32));
  __for_range = &this->modifier_durability_vec_;
  __for_begin._M_current = std::vector<ElementDurabilityInfo>::begin(&this->modifier_durability_vec_)._M_current;
  __for_end._M_current = std::vector<ElementDurabilityInfo>::end(&this->modifier_durability_vec_)._M_current;
  while ( __gnu_cxx::operator!=<ElementDurabilityInfo *,std::vector<ElementDurabilityInfo>>(&__for_begin, &__for_end) )
  {
    info = __gnu_cxx::__normal_iterator<ElementDurabilityInfo *,std::vector<ElementDurabilityInfo>>::operator*(&__for_begin);
    if ( std::operator==<ActorModifier,ActorModifier>(
           &info->modifier_ptr,
           (const std::shared_ptr<ActorModifier> *)(v2 + 32)) )
    {
      common::milog::MiLogStream::create(
        &v12,
        &common::milog::MiLogDefault::default_log_obj_,
        0x11u,
        "./src/ability/ability_comp.cpp",
        "removeModifierElement",
        4417);
      v5 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
             &v12,
             (const char (*)[28])"DURABILITY durability_info:");
      operator<<(v5, info);
      common::milog::MiLogStream::~MiLogStream(&v12);
      std::shared_ptr<ActorModifier>::shared_ptr(&__r, 0LL);
      std::shared_ptr<ActorModifier>::operator=(&info->modifier_ptr, &__r);
      std::shared_ptr<ActorModifier>::~shared_ptr(&__r);
      break;
    }
    __gnu_cxx::__normal_iterator<ElementDurabilityInfo *,std::vector<ElementDurabilityInfo>>::operator++(&__for_begin);
  }
  std::shared_ptr<ActorModifier>::~shared_ptr((std::shared_ptr<ActorModifier> *const)(v2 + 32));
  result = 0;
  if ( v13 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4427: range 00000000136EB744-00000000136EB799
int32_t __cdecl AbilityComp::onElementModifierApplied(
        AbilityComp *const this,
        ActorModifier *modifier,
        float durability,
        float duration)
{
  AbilityComp::addModifierElementDurability(this, modifier, durability, duration);
  AbilityComp::addFilterElementModifier(this, modifier);
  return 0;
};

// Line 4434: range 00000000136EB79A-00000000136EB7AC
int32_t __cdecl AbilityComp::onModifierPostApplied(AbilityComp *const this, ActorModifier *modifier)
{
  return 0;
};

// Line 4439: range 00000000136EB7AE-00000000136EB973
float __cdecl AbilityComp::getElementRemainingDurability(AbilityComp *const this, ActorModifier *modifier)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  float result; // xmm0_4
  float remaining_durability; // [rsp+Ch] [rbp-94h]
  std::vector<ElementDurabilityInfo>::iterator __for_begin; // [rsp+20h] [rbp-80h] BYREF
  std::vector<ElementDurabilityInfo>::iterator __for_end; // [rsp+28h] [rbp-78h] BYREF
  std::vector<ElementDurabilityInfo> *__for_range; // [rsp+30h] [rbp-70h]
  ElementDurabilityInfo *info; // [rsp+38h] [rbp-68h]
  char v11[96]; // [rsp+40h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 17 modifier_ptr:4440";
  *(_QWORD *)(v2 + 16) = AbilityComp::getElementRemainingDurability;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  toThisPtr<ActorModifier>((ActorModifier *)(v2 + 32));
  __for_range = &this->modifier_durability_vec_;
  __for_begin._M_current = std::vector<ElementDurabilityInfo>::begin(&this->modifier_durability_vec_)._M_current;
  __for_end._M_current = std::vector<ElementDurabilityInfo>::end(&this->modifier_durability_vec_)._M_current;
  while ( 1 )
  {
    if ( !__gnu_cxx::operator!=<ElementDurabilityInfo *,std::vector<ElementDurabilityInfo>>(&__for_begin, &__for_end) )
    {
      remaining_durability = 0.0;
      goto LABEL_12;
    }
    info = __gnu_cxx::__normal_iterator<ElementDurabilityInfo *,std::vector<ElementDurabilityInfo>>::operator*(&__for_begin);
    if ( std::operator==<ActorModifier,ActorModifier>(
           &info->modifier_ptr,
           (const std::shared_ptr<ActorModifier> *)(v2 + 32)) )
    {
      break;
    }
    __gnu_cxx::__normal_iterator<ElementDurabilityInfo *,std::vector<ElementDurabilityInfo>>::operator++(&__for_begin);
  }
  if ( *(_BYTE *)(((unsigned __int64)&info->remaining_durability >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)info + 20) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&info->remaining_durability >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_load4(&info->remaining_durability);
  }
  remaining_durability = info->remaining_durability;
LABEL_12:
  std::shared_ptr<ActorModifier>::~shared_ptr((std::shared_ptr<ActorModifier> *const)(v2 + 32));
  result = remaining_durability;
  if ( v11 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4450: range 00000000136EB974-00000000136EBADA
uint32_t __cdecl AbilityComp::getModifierIndexFromDurabilityVec(AbilityComp *const this, ActorModifier *modifier)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  std::vector<ElementDurabilityInfo>::reference v5; // rax
  uint32_t v6; // r14d
  uint32_t result; // eax
  uint32_t i; // [rsp+1Ch] [rbp-74h]
  char v9[112]; // [rsp+20h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 17 modifier_ptr:4451";
  *(_QWORD *)(v2 + 16) = AbilityComp::getModifierIndexFromDurabilityVec;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  toThisPtr<ActorModifier>((ActorModifier *)(v2 + 32));
  for ( i = 0; i < std::vector<ElementDurabilityInfo>::size(&this->modifier_durability_vec_); ++i )
  {
    v5 = std::vector<ElementDurabilityInfo>::operator[](&this->modifier_durability_vec_, i);
    if ( std::operator==<ActorModifier,ActorModifier>(
           &v5->modifier_ptr,
           (const std::shared_ptr<ActorModifier> *)(v2 + 32)) )
    {
      v6 = i;
      goto LABEL_10;
    }
  }
  v6 = std::vector<ElementDurabilityInfo>::size(&this->modifier_durability_vec_);
LABEL_10:
  std::shared_ptr<ActorModifier>::~shared_ptr((std::shared_ptr<ActorModifier> *const)(v2 + 32));
  result = v6;
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4461: range 00000000136EBADC-00000000136EBC77
float __cdecl AbilityComp::getMaxElementDurabilityByType(AbilityComp *const this, data::ElementType element_type)
{
  ActorModifier *v2; // rax
  data::ConfigAbilityModifier *ConfigRef; // rax
  char v4; // al
  float max_durability; // [rsp+1Ch] [rbp-24h]
  std::vector<ElementDurabilityInfo>::iterator __for_begin; // [rsp+20h] [rbp-20h] BYREF
  std::vector<ElementDurabilityInfo>::iterator __for_end; // [rsp+28h] [rbp-18h] BYREF
  std::vector<ElementDurabilityInfo> *__for_range; // [rsp+30h] [rbp-10h]
  ElementDurabilityInfo *info; // [rsp+38h] [rbp-8h]

  max_durability = 0.0;
  __for_range = &this->modifier_durability_vec_;
  __for_begin._M_current = std::vector<ElementDurabilityInfo>::begin(&this->modifier_durability_vec_)._M_current;
  __for_end._M_current = std::vector<ElementDurabilityInfo>::end(&this->modifier_durability_vec_)._M_current;
  while ( __gnu_cxx::operator!=<ElementDurabilityInfo *,std::vector<ElementDurabilityInfo>>(&__for_begin, &__for_end) )
  {
    info = __gnu_cxx::__normal_iterator<ElementDurabilityInfo *,std::vector<ElementDurabilityInfo>>::operator*(&__for_begin);
    if ( !std::operator==<ActorModifier>(&info->modifier_ptr, 0LL) )
    {
      v2 = std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)info);
      ConfigRef = ActorModifier::getConfigRef(v2);
      if ( *(_BYTE *)(((unsigned __int64)&ConfigRef->element_type >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&ConfigRef->element_type >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&ConfigRef->element_type);
      }
      if ( element_type != ConfigRef->element_type )
        goto LABEL_11;
      if ( *(_BYTE *)(((unsigned __int64)&info->remaining_durability >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)info + 20) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&info->remaining_durability >> 3)
                                                            + 0x7FFF8000) )
      {
        __asan_report_load4(&info->remaining_durability);
      }
      if ( info->remaining_durability > max_durability )
        v4 = 1;
      else
LABEL_11:
        v4 = 0;
      if ( v4 )
      {
        if ( *(_BYTE *)(((unsigned __int64)&info->remaining_durability >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)info + 20) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&info->remaining_durability >> 3)
                                                              + 0x7FFF8000) )
        {
          __asan_report_load4(&info->remaining_durability);
        }
        max_durability = info->remaining_durability;
      }
    }
    __gnu_cxx::__normal_iterator<ElementDurabilityInfo *,std::vector<ElementDurabilityInfo>>::operator++(&__for_begin);
  }
  return max_durability;
};

// Line 4475: range 00000000136EBC78-00000000136EC1D4
float __fastcall AbilityComp::getReducedElementDurability(
        const AbilityComp *const this,
        const ElementDurabilityInfo *info,
        uint64_t cur_scene_time_ms)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r13
  char v6; // al
  __int64 v7; // rcx
  __int64 v8; // rcx
  float v9; // xmm0_4
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rcx
  ActorModifier *v15; // rax
  float result; // xmm0_4
  float v17; // [rsp+4h] [rbp-DCh]
  float remaining_durability; // [rsp+28h] [rbp-B8h]
  float remaining_durabilitya; // [rsp+28h] [rbp-B8h]
  float origin_reduce_durability; // [rsp+2Ch] [rbp-B4h]
  float delta_time; // [rsp+30h] [rbp-B0h]
  data::ConfigAbilityModifier *modifier_config; // [rsp+38h] [rbp-A8h]
  common::milog::MiLogStream v24; // [rsp+40h] [rbp-A0h] BYREF
  char v25[128]; // [rsp+60h] [rbp-80h] BYREF

  v3 = (unsigned __int64)v25;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 32 8 22 cur_scene_time_ms:4474 64 16 17 modifier_ptr:4480";
  *(_QWORD *)(v3 + 16) = AbilityComp::getReducedElementDurability;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -218959360;
  v5[536862722] = -202178560;
  *(_QWORD *)(v3 + 32) = cur_scene_time_ms;
  if ( *(_BYTE *)(((unsigned __int64)&this->is_client_inited_ >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)this + 17) & 7) >= *(_BYTE *)(((unsigned __int64)&this->is_client_inited_ >> 3) + 0x7FFF8000) )
  {
    __asan_report_load1(&this->is_client_inited_);
  }
  if ( !this->is_client_inited_ )
  {
    if ( *(_BYTE *)(((unsigned __int64)&info->remaining_durability >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)info + 20) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&info->remaining_durability >> 3)
                                                          + 0x7FFF8000) )
    {
      __asan_report_load4(&info->remaining_durability);
    }
    v17 = info->remaining_durability;
  }
  else
  {
    std::shared_ptr<ActorModifier>::shared_ptr((std::shared_ptr<ActorModifier> *const)(v3 + 64), &info->modifier_ptr);
    if ( *(_BYTE *)(((unsigned __int64)&info->reduce_ratio >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&info->reduce_ratio >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&info->reduce_ratio);
    }
    origin_reduce_durability = info->reduce_ratio;
    if ( *(_BYTE *)(((unsigned __int64)&info->remaining_durability >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)info + 20) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&info->remaining_durability >> 3)
                                                          + 0x7FFF8000) )
    {
      __asan_report_load4(&info->remaining_durability);
    }
    remaining_durability = info->remaining_durability;
    if ( std::operator==<ActorModifier>(0LL, (const std::shared_ptr<ActorModifier> *)(v3 + 64)) )
      goto LABEL_18;
    if ( *(_BYTE *)(((unsigned __int64)&info->last_tick_time_ms_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&info->last_tick_time_ms_);
    if ( info->last_tick_time_ms_ >= *(_QWORD *)(v3 + 32) )
LABEL_18:
      v6 = 1;
    else
      v6 = 0;
    if ( v6 )
    {
      v17 = remaining_durability;
    }
    else
    {
      v7 = *(_QWORD *)(v3 + 32);
      if ( *(_BYTE *)(((unsigned __int64)&info->last_tick_time_ms_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&info->last_tick_time_ms_);
      v8 = v7 - info->last_tick_time_ms_;
      if ( v8 < 0 )
        v9 = (float)(v8 & 1 | (unsigned int)((unsigned __int64)v8 >> 1))
           + (float)(v8 & 1 | (unsigned int)((unsigned __int64)v8 >> 1));
      else
        v9 = (float)(int)v8;
      delta_time = v9 * 0.001;
      if ( (float)(v9 * 0.001) > 0.0 )
      {
        v15 = std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        modifier_config = ActorModifier::getConfigRef(v15);
        if ( *(char *)(((unsigned __int64)&modifier_config->is_element_durability_mutable >> 3) + 0x7FFF8000) < 0 )
          __asan_report_load1(&modifier_config->is_element_durability_mutable);
        if ( !modifier_config->is_element_durability_mutable )
        {
          v17 = remaining_durability;
        }
        else
        {
          if ( (float)(origin_reduce_durability * delta_time) < remaining_durability )
            remaining_durabilitya = remaining_durability - (float)(origin_reduce_durability * delta_time);
          else
            remaining_durabilitya = 0.0;
          v17 = remaining_durabilitya;
        }
      }
      else
      {
        common::milog::MiLogStream::create(
          &v24,
          &common::milog::MiLogDefault::default_log_obj_,
          0x13u,
          "./src/ability/ability_comp.cpp",
          "getReducedElementDurability",
          4491);
        v10 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                &v24,
                (const char (*)[36])"delta_time <= 0. cur_scene_time_ms:");
        v11 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                v10,
                (const unsigned __int64 *)(v3 + 32));
        v12 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
                v11,
                (const char (*)[37])" durability_info.last_tick_time_ms_:");
        v13 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v12, &info->last_tick_time_ms_);
        v14 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v13, (const char (*)[9])" entity:");
        if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->creature_);
        common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v14, this->creature_);
        common::milog::MiLogStream::~MiLogStream(&v24);
        v17 = remaining_durability;
      }
    }
    std::shared_ptr<ActorModifier>::~shared_ptr((std::shared_ptr<ActorModifier> *const)(v3 + 64));
  }
  result = v17;
  if ( v25 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 4519: range 00000000136EC1D6-00000000136EC202
void __cdecl AbilityComp::addBuffDebuffResistance(
        AbilityComp *const this,
        ConfigBuffDebuffResistancePtr *p_resistance_ptr)
{
  std::set<std::shared_ptr<data::ConfigBuffDebuffResistance>>::insert(
    &this->resistance_buff_debuff_set_,
    p_resistance_ptr);
};

// Line 4524: range 00000000136EC204-00000000136EC230
void __cdecl AbilityComp::removeBuffDebuffResistance(
        AbilityComp *const this,
        ConfigBuffDebuffResistancePtr *p_resistance_ptr)
{
  std::set<std::shared_ptr<data::ConfigBuffDebuffResistance>>::erase(
    &this->resistance_buff_debuff_set_,
    p_resistance_ptr);
};

// Line 4529: range 00000000136EC232-00000000136EC4AD
float __fastcall AbilityComp::getAbilityStateDurationRatio(AbilityComp *const this, data::AbilityState ability_state)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  const std::shared_ptr<data::ConfigBuffDebuffResistance> *v5; // rax
  std::__shared_ptr_access<data::ConfigBuffDebuffResistance,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  std::__shared_ptr_access<data::ConfigBuffDebuffResistance,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rdx
  float *p_duration_ratio; // rax
  float result; // xmm0_4
  float multiplied_duration_ratio; // [rsp+14h] [rbp-9Ch]
  std::set<std::shared_ptr<data::ConfigBuffDebuffResistance>>::iterator __for_begin; // [rsp+18h] [rbp-98h] BYREF
  std::set<std::shared_ptr<data::ConfigBuffDebuffResistance>>::iterator __for_end; // [rsp+20h] [rbp-90h] BYREF
  std::set<std::shared_ptr<data::ConfigBuffDebuffResistance>> *__for_range; // [rsp+28h] [rbp-88h]
  char v14[128]; // [rsp+30h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 8 18 ability_state:4528 64 16 19 resistance_ptr:4531";
  *(_QWORD *)(v2 + 16) = AbilityComp::getAbilityStateDurationRatio;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -202178560;
  *(_QWORD *)(v2 + 32) = ability_state;
  multiplied_duration_ratio = 1.0;
  __for_range = &this->resistance_buff_debuff_set_;
  __for_begin._M_node = std::set<std::shared_ptr<data::ConfigBuffDebuffResistance>>::begin(&this->resistance_buff_debuff_set_)._M_node;
  __for_end._M_node = std::set<std::shared_ptr<data::ConfigBuffDebuffResistance>>::end(&this->resistance_buff_debuff_set_)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v5 = std::_Rb_tree_const_iterator<std::shared_ptr<data::ConfigBuffDebuffResistance>>::operator*(&__for_begin);
    std::shared_ptr<data::ConfigBuffDebuffResistance>::shared_ptr(
      (std::shared_ptr<data::ConfigBuffDebuffResistance> *const)(v2 + 64),
      v5);
    if ( !std::operator==<data::ConfigBuffDebuffResistance>(
            0LL,
            (const std::shared_ptr<data::ConfigBuffDebuffResistance> *)(v2 + 64)) )
    {
      v6 = std::__shared_ptr_access<data::ConfigBuffDebuffResistance,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigBuffDebuffResistance,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
      if ( common::tools::MiscUtils::isContains<data::AbilityState>(
             &v6->resistance_buff_debuffs,
             (const data::AbilityState *)(v2 + 32)) )
      {
        v7 = std::__shared_ptr_access<data::ConfigBuffDebuffResistance,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigBuffDebuffResistance,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
        p_duration_ratio = &v7->duration_ratio;
        if ( *(_BYTE *)(((unsigned __int64)p_duration_ratio >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)p_duration_ratio & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_duration_ratio >> 3)
                                                                             + 0x7FFF8000) )
        {
          __asan_report_load4(p_duration_ratio);
        }
        multiplied_duration_ratio = (float)(1.0 - v7->duration_ratio) * multiplied_duration_ratio;
      }
    }
    std::shared_ptr<data::ConfigBuffDebuffResistance>::~shared_ptr((std::shared_ptr<data::ConfigBuffDebuffResistance> *const)(v2 + 64));
    std::_Rb_tree_const_iterator<std::shared_ptr<data::ConfigBuffDebuffResistance>>::operator++(&__for_begin);
  }
  result = multiplied_duration_ratio;
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 4547: range 00000000136EC4AE-00000000136EC4DA
void __cdecl AbilityComp::addElementTypeResistance(
        AbilityComp *const this,
        data::AttachElementTypeResistancePtr *p_element_type_resistance_ptr)
{
  std::set<std::shared_ptr<data::AttachElementTypeResistance>>::insert(
    &this->element_type_resistance_set_,
    p_element_type_resistance_ptr);
};

// Line 4552: range 00000000136EC4DC-00000000136EC508
void __cdecl AbilityComp::removeElementTypeResistance(
        AbilityComp *const this,
        data::AttachElementTypeResistancePtr *p_element_type_resistance_ptr)
{
  std::set<std::shared_ptr<data::AttachElementTypeResistance>>::erase(
    &this->element_type_resistance_set_,
    p_element_type_resistance_ptr);
};

// Line 4557: range 00000000136EC50A-00000000136EC73F
float __cdecl AbilityComp::getElementTypeDurationRatio(AbilityComp *const this, data::ElementType element_type)
{
  std::shared_ptr<data::AttachElementTypeResistance> *v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  const std::shared_ptr<data::AttachElementTypeResistance> *v5; // rax
  std::__shared_ptr_access<data::AttachElementTypeResistance,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rax
  std::__shared_ptr_access<data::AttachElementTypeResistance,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rdx
  float result; // xmm0_4
  float multiplied_duration_ratio; // [rsp+14h] [rbp-7Ch]
  std::set<std::shared_ptr<data::AttachElementTypeResistance>>::iterator __for_begin; // [rsp+18h] [rbp-78h] BYREF
  std::set<std::shared_ptr<data::AttachElementTypeResistance>>::iterator __for_end; // [rsp+20h] [rbp-70h] BYREF
  std::set<std::shared_ptr<data::AttachElementTypeResistance>> *__for_range; // [rsp+28h] [rbp-68h]
  char v13[96]; // [rsp+30h] [rbp-60h] BYREF

  v2 = (std::shared_ptr<data::AttachElementTypeResistance> *)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = (std::shared_ptr<data::AttachElementTypeResistance> *)v3;
  }
  v2->_M_ptr = (std::__shared_ptr<data::AttachElementTypeResistance,(__gnu_cxx::_Lock_policy)2>::element_type *)1102416563;
  v2->_M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)"1 32 16 19 resistance_ptr:4559";
  v2[1]._M_ptr = (std::__shared_ptr<data::AttachElementTypeResistance,(__gnu_cxx::_Lock_policy)2>::element_type *)AbilityComp::getElementTypeDurationRatio;
  v4 = (unsigned __int64)v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  multiplied_duration_ratio = 1.0;
  __for_range = &this->element_type_resistance_set_;
  __for_begin._M_node = std::set<std::shared_ptr<data::AttachElementTypeResistance>>::begin(&this->element_type_resistance_set_)._M_node;
  __for_end._M_node = std::set<std::shared_ptr<data::AttachElementTypeResistance>>::end(&this->element_type_resistance_set_)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v5 = std::_Rb_tree_const_iterator<std::shared_ptr<data::AttachElementTypeResistance>>::operator*(&__for_begin);
    std::shared_ptr<data::AttachElementTypeResistance>::shared_ptr(v2 + 2, v5);
    if ( !std::operator==<data::AttachElementTypeResistance>(0LL, v2 + 2) )
    {
      v6 = std::__shared_ptr_access<data::AttachElementTypeResistance,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::AttachElementTypeResistance,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v2[2]);
      if ( *(_BYTE *)(((unsigned __int64)&v6->element_type >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v6->element_type >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v6->element_type);
      }
      if ( element_type == v6->element_type )
      {
        v7 = std::__shared_ptr_access<data::AttachElementTypeResistance,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::AttachElementTypeResistance,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v2[2]);
        if ( *(_BYTE *)(((unsigned __int64)&v7->duration_ratio >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)v7 - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v7->duration_ratio >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(&v7->duration_ratio);
        }
        multiplied_duration_ratio = (float)(1.0 - v7->duration_ratio) * multiplied_duration_ratio;
      }
    }
    std::shared_ptr<data::AttachElementTypeResistance>::~shared_ptr(v2 + 2);
    std::_Rb_tree_const_iterator<std::shared_ptr<data::AttachElementTypeResistance>>::operator++(&__for_begin);
  }
  result = multiplied_duration_ratio;
  if ( v13 == (char *)v2 )
  {
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    v2->_M_ptr = (std::__shared_ptr<data::AttachElementTypeResistance,(__gnu_cxx::_Lock_policy)2>::element_type *)1172321806;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4578: range 00000000136EC740-00000000136EC7D4
data::EntityType __cdecl AbilityComp::getClientEntityType(const AbilityComp *const this)
{
  Creature *creature; // rsi
  Creature *v2; // rax
  unsigned __int64 v3; // rax

  if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->creature_);
  creature = this->creature_;
  v2 = creature;
  if ( *(_BYTE *)(((unsigned __int64)creature >> 3) + 0x7FFF8000) )
    v2 = (Creature *)__asan_report_load8(this->creature_);
  v3 = *(_QWORD *)v2->baseclass_0 + 32LL;
  if ( *(_BYTE *)((v3 >> 3) + 0x7FFF8000) )
    v3 = __asan_report_load8(v3);
  return (*(unsigned int (__fastcall **)(Creature *))v3)(creature);
};

// Line 4584: range 00000000136EC7D6-00000000136EC978
bool __cdecl AbilityComp::isInMpMode(const AbilityComp *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  char v4; // r14
  unsigned __int64 v5; // rax
  unsigned __int64 v6; // rdx
  bool result; // al
  char v8[112]; // [rsp+10h] [rbp-70h] BYREF

  v1 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 16 14 scene_ptr:4585";
  *(_QWORD *)(v1 + 16) = AbilityComp::isInMpMode;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->creature_);
  Entity::getScene((const Entity *const)(v1 + 32));
  if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v1 + 32), 0LL) )
  {
    v4 = 0;
  }
  else
  {
    v5 = (unsigned __int64)std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 32));
    if ( *(_BYTE *)((v5 >> 3) + 0x7FFF8000) )
      v5 = __asan_report_load8(v5);
    v6 = *(_QWORD *)v5 + 392LL;
    if ( *(_BYTE *)((v6 >> 3) + 0x7FFF8000) )
      v5 = __asan_report_load8(*(_QWORD *)v5 + 392LL);
    v4 = (*(__int64 (__fastcall **)(unsigned __int64))v6)(v5);
  }
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v1 + 32));
  result = v4;
  if ( v8 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4609: range 00000000136EC97A-00000000136ECBD3
void __cdecl AbilityComp::invokeNotRegisterNotifyGMServerLog(
        AbilityComp *const this,
        const uint32_t hash_value,
        const std::string *str_value,
        Player *from_player)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v7; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v8; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v9; // rdx
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v10; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v11; // r14
  common::milog::MiLogStream v13; // [rsp+20h] [rbp-B0h] BYREF
  std::string v; // [rsp+40h] [rbp-90h] BYREF
  char v15[112]; // [rsp+60h] [rbp-70h] BYREF

  v4 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 16 7 os:4610";
  *(_QWORD *)(v4 + 16) = AbilityComp::invokeNotRegisterNotifyGMServerLog;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202178560;
  common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 32));
  v7 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
         (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 32),
         "ability hash not register on server hash:");
  v8 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v7, hash_value);
  v9 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v8, " str:");
  v10 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v9, str_value);
  v11 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v10, " owner:");
  AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11](&v, this);
  common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v11, &v);
  std::string::~string(&v);
  common::milog::MiLogStream::create(
    &v13,
    &common::milog::MiLogDefault::default_log_obj_,
    0x13u,
    "./src/ability/ability_comp.cpp",
    "invokeNotRegisterNotifyGMServerLog",
    4612);
  common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
    &v,
    (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 32));
  common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v13, &v);
  std::string::~string(&v);
  common::milog::MiLogStream::~MiLogStream(&v13);
  common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 32));
  if ( v15 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 4617: range 00000000136ECBD4-00000000136ECDD7
void __cdecl AbilityComp::invokeFailNotify(
        AbilityComp *const this,
        const proto::AbilityInvokeEntry *entry,
        Player *from_player,
        const std::string *reason)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r13
  std::__shared_ptr_access<proto::AbilityInvocationFailNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // r14
  uint32_t EntityId; // eax
  std::__shared_ptr_access<proto::AbilityInvocationFailNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  std::__shared_ptr_access<proto::AbilityInvocationFailNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rdx
  proto::AbilityInvokeEntry *invoke_entry; // [rsp+28h] [rbp-88h]
  std::shared_ptr<proto::AbilityInvocationFailNotify> __r; // [rsp+30h] [rbp-80h] BYREF
  char v15[112]; // [rsp+40h] [rbp-70h] BYREF

  v4 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 16 15 notify_ptr:4619";
  *(_QWORD *)(v4 + 16) = AbilityComp::invokeFailNotify;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202178560;
  common::tools::perf::make_shared<proto::AbilityInvocationFailNotify>();
  v7 = std::__shared_ptr_access<proto::AbilityInvocationFailNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::AbilityInvocationFailNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->creature_);
  EntityId = Entity::getEntityId((const Entity *const)this->creature_);
  proto::AbilityInvocationFailNotify::set_entity_id(v7, EntityId);
  v9 = std::__shared_ptr_access<proto::AbilityInvocationFailNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::AbilityInvocationFailNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
  invoke_entry = proto::AbilityInvocationFailNotify::mutable_invoke(v9);
  proto::AbilityInvokeEntry::operator=(invoke_entry, entry);
  v10 = std::__shared_ptr_access<proto::AbilityInvocationFailNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::AbilityInvocationFailNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
  proto::AbilityInvocationFailNotify::set_reason(v10, reason);
  std::dynamic_pointer_cast<google::protobuf::Message const,proto::AbilityInvocationFailNotify>(&__r);
  Player::sendMessage(from_player, (common::minet::ConstMessagePtr *)&__r, 0LL);
  std::shared_ptr<google::protobuf::Message const>::~shared_ptr((std::shared_ptr<const google::protobuf::Message> *const)&__r);
  std::shared_ptr<proto::AbilityInvocationFailNotify>::~shared_ptr((std::shared_ptr<proto::AbilityInvocationFailNotify> *const)(v4 + 32));
  if ( v15 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 4629: range 00000000136ECE72-00000000136ECED9
void __cdecl AbilityComp::onBeingHit(AbilityComp *const this, AttackResult *attack_result)
{
  std::function<ForeachPolicy(BaseAbilityMixin&)> p_func; // [rsp+10h] [rbp-30h] BYREF

  std::function<ForeachPolicy ()(BaseAbilityMixin &)>::function<AbilityComp::onBeingHit(AttackResult &)::{lambda(BaseAbilityMixin &)#1},void,void>(
    &p_func,
    (AbilityComp::onBeingHit::<lambda(BaseAbilityMixin&)>)attack_result);
  AbilityComp::foreachMixin(this, &p_func);
  std::function<ForeachPolicy ()(BaseAbilityMixin &)>::~function(&p_func);
};

// Line 4630: range 00000000136ECDD8-00000000136ECE71
ForeachPolicy __cdecl AbilityComp::onBeingHit(AttackResult &)::{lambda(BaseAbilityMixin &)#1}::operator()(
        const AbilityComp::onBeingHit::<lambda(BaseAbilityMixin&)> *const __closure,
        BaseAbilityMixin *mixin)
{
  unsigned __int64 v2; // rax
  void (__fastcall *v3)(BaseAbilityMixin *, AttackResult *); // rcx

  if ( *(_BYTE *)(((unsigned __int64)mixin >> 3) + 0x7FFF8000) )
    __asan_report_load8(mixin);
  v2 = (unsigned __int64)(mixin->_vptr_BaseAbilityMixin + 5);
  if ( *(_BYTE *)((v2 >> 3) + 0x7FFF8000) )
    v2 = __asan_report_load8(mixin->_vptr_BaseAbilityMixin + 5);
  v3 = *(void (__fastcall **)(BaseAbilityMixin *, AttackResult *))v2;
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8(__closure);
  v3(mixin, __closure->__attack_result);
  return 0;
};

// Line 4638: range 00000000136ECEDA-00000000136ED229
void __fastcall AbilityComp::addAfterBeingHitMixin(
        AbilityComp *const this,
        uintptr_t mixin_address,
        BaseAbilityMixinPtr *p_mixin_ptr)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  std::shared_ptr<BaseAbilityMixin> *v6; // r8
  std::pair<std::__detail::_Node_iterator<std::pair<long unsigned int const,std::weak_ptr<BaseAbilityMixin> >,false,false>,bool> v7; // rax
  common::milog::MiLogStream *v8; // r14
  std::__shared_ptr_access<BaseAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // r13
  std::__shared_ptr_access<BaseAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  common::milog::MiLogStream v14; // [rsp+20h] [rbp-B0h] BYREF
  common::milog::MiLogStream v15; // [rsp+40h] [rbp-90h] BYREF
  char v16[112]; // [rsp+60h] [rbp-70h] BYREF

  v3 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 8 18 mixin_address:4637";
  *(_QWORD *)(v3 + 16) = AbilityComp::addAfterBeingHitMixin;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116352;
  *(_QWORD *)(v3 + 32) = mixin_address;
  if ( std::operator==<BaseAbilityMixin>(0LL, p_mixin_ptr) )
  {
    common::milog::MiLogStream::create(
      &v15,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "addAfterBeingHitMixin",
      4641);
    common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(&v15, (const char (*)[21])"mixin_ptr is nullptr");
    common::milog::MiLogStream::~MiLogStream(&v15);
  }
  else
  {
    v7 = std::unordered_map<unsigned long,std::weak_ptr<BaseAbilityMixin>>::emplace<unsigned long &,std::shared_ptr<BaseAbilityMixin> &>(
           &this->after_being_hit_mixin_wtr_map_,
           (unsigned __int64 *)(v3 + 32),
           p_mixin_ptr,
           (unsigned __int64 *)&this->after_being_hit_mixin_wtr_map_,
           v6);
    if ( !v7.second )
    {
      common::milog::MiLogStream::create(
        &v14,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "addAfterBeingHitMixin",
        4646);
      v8 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
             &v14,
             (const char (*)[36])"dumplicated add AfterBeingHitMixin:");
      v9 = std::__shared_ptr_access<BaseAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BaseAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_mixin_ptr);
      BaseAbilityMixin::getDesc[abi:cxx11]((std::string *)&v15, v9);
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, (const std::string *)&v15);
      std::string::~string(&v15);
      common::milog::MiLogStream::~MiLogStream(&v14);
    }
    common::milog::MiLogStream::create(
      &v14,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/ability/ability_comp.cpp",
      "addAfterBeingHitMixin",
      4648);
    v10 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
            &v14,
            (const char (*)[23])"addAfterBeingHitMixin:");
    v11 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
            v10,
            (const unsigned __int64 *)(v3 + 32));
    v12 = std::__shared_ptr_access<BaseAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BaseAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_mixin_ptr);
    BaseAbilityMixin::getDesc[abi:cxx11]((std::string *)&v15, v12);
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v11, (const std::string *)&v15);
    std::string::~string(&v15);
    common::milog::MiLogStream::~MiLogStream(&v14);
  }
  if ( v16 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 4652: range 00000000136ED22A-00000000136ED38B
void __fastcall AbilityComp::delAfterBeingHitMixin(AbilityComp *const this, uintptr_t mixin_address)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  common::milog::MiLogStream *v5; // rax
  common::milog::MiLogStream v6; // [rsp+10h] [rbp-80h] BYREF
  char v7[96]; // [rsp+30h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v7;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 8 18 mixin_address:4651";
  *(_QWORD *)(v2 + 16) = AbilityComp::delAfterBeingHitMixin;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116352;
  *(_QWORD *)(v2 + 32) = mixin_address;
  std::unordered_map<unsigned long,std::weak_ptr<BaseAbilityMixin>>::erase(
    &this->after_being_hit_mixin_wtr_map_,
    (const std::unordered_map<long unsigned int,std::weak_ptr<BaseAbilityMixin>>::key_type *)(v2 + 32));
  common::milog::MiLogStream::create(
    &v6,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/ability/ability_comp.cpp",
    "delAfterBeingHitMixin",
    4654);
  v5 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
         &v6,
         (const char (*)[23])"delAfterBeingHitMixin:");
  common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v5, (const unsigned __int64 *)(v2 + 32));
  common::milog::MiLogStream::~MiLogStream(&v6);
  if ( v7 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 4658: range 00000000136ED38C-00000000136ED66C
void __cdecl AbilityComp::onAfterBeingHit(AbilityComp *const this, AttackResult *attack_result)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  unsigned __int64 v5; // rax
  unsigned __int64 v6; // rdx
  std::unordered_map<long unsigned int,std::weak_ptr<BaseAbilityMixin>>::iterator __for_begin; // [rsp+10h] [rbp-100h] BYREF
  std::unordered_map<long unsigned int,std::weak_ptr<BaseAbilityMixin>>::iterator __for_end; // [rsp+18h] [rbp-F8h] BYREF
  std::unordered_map<long unsigned int,std::weak_ptr<BaseAbilityMixin>> *__for_range; // [rsp+20h] [rbp-F0h]
  std::pair<long unsigned int const,std::weak_ptr<BaseAbilityMixin> > *__in; // [rsp+28h] [rbp-E8h]
  std::tuple_element<0,std::pair<long unsigned int const,std::weak_ptr<BaseAbilityMixin> > >::type *mixin_address; // [rsp+30h] [rbp-E0h]
  std::tuple_element<1,std::pair<long unsigned int const,std::weak_ptr<BaseAbilityMixin> > >::type *mixin_wtr; // [rsp+38h] [rbp-D8h]
  char v13[208]; // [rsp+40h] [rbp-D0h] BYREF

  v2 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(160LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 16 14 mixin_ptr:4662 64 56 38 tmp_after_being_hit_mixin_wtr_map:4659";
  *(_QWORD *)(v2 + 16) = AbilityComp::onAfterBeingHit;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862723] = -218103808;
  v4[536862724] = -202116109;
  std::unordered_map<unsigned long,std::weak_ptr<BaseAbilityMixin>>::unordered_map(
    (std::unordered_map<long unsigned int,std::weak_ptr<BaseAbilityMixin>> *const)(v2 + 64),
    &this->after_being_hit_mixin_wtr_map_);
  __for_range = (std::unordered_map<long unsigned int,std::weak_ptr<BaseAbilityMixin>> *)(v2 + 64);
  __for_begin._M_cur = std::unordered_map<unsigned long,std::weak_ptr<BaseAbilityMixin>>::begin((std::unordered_map<long unsigned int,std::weak_ptr<BaseAbilityMixin>> *const)(v2 + 64))._M_cur;
  __for_end._M_cur = std::unordered_map<unsigned long,std::weak_ptr<BaseAbilityMixin>>::end((std::unordered_map<long unsigned int,std::weak_ptr<BaseAbilityMixin>> *const)(v2 + 64))._M_cur;
  while ( std::__detail::operator!=<std::pair<unsigned long const,std::weak_ptr<BaseAbilityMixin>>,false>(
            &__for_begin,
            &__for_end) )
  {
    __in = std::__detail::_Node_iterator<std::pair<unsigned long const,std::weak_ptr<BaseAbilityMixin>>,false,false>::operator*(&__for_begin);
    mixin_address = std::get<0ul,unsigned long const,std::weak_ptr<BaseAbilityMixin>>(__in);
    mixin_wtr = std::get<1ul,unsigned long const,std::weak_ptr<BaseAbilityMixin>>(__in);
    std::weak_ptr<BaseAbilityMixin>::lock((const std::weak_ptr<BaseAbilityMixin> *const)(v2 + 32));
    if ( std::operator==<BaseAbilityMixin>(0LL, (const std::shared_ptr<BaseAbilityMixin> *)(v2 + 32)) )
    {
      std::unordered_map<unsigned long,std::weak_ptr<BaseAbilityMixin>>::erase(
        &this->after_being_hit_mixin_wtr_map_,
        mixin_address);
    }
    else
    {
      v5 = (unsigned __int64)std::__shared_ptr_access<BaseAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BaseAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
      if ( *(_BYTE *)((v5 >> 3) + 0x7FFF8000) )
        v5 = __asan_report_load8(v5);
      v6 = *(_QWORD *)v5 + 72LL;
      if ( *(_BYTE *)((v6 >> 3) + 0x7FFF8000) )
        v5 = __asan_report_load8(*(_QWORD *)v5 + 72LL);
      (*(void (__fastcall **)(unsigned __int64, AttackResult *))v6)(v5, attack_result);
    }
    std::shared_ptr<BaseAbilityMixin>::~shared_ptr((std::shared_ptr<BaseAbilityMixin> *const)(v2 + 32));
    std::__detail::_Node_iterator<std::pair<unsigned long const,std::weak_ptr<BaseAbilityMixin>>,false,false>::operator++(&__for_begin);
  }
  std::unordered_map<unsigned long,std::weak_ptr<BaseAbilityMixin>>::~unordered_map((std::unordered_map<long unsigned int,std::weak_ptr<BaseAbilityMixin>> *const)(v2 + 64));
  if ( v13 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF800C) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 4673: range 00000000136ED66E-00000000136ED867
void __fastcall AbilityComp::addMixinRegisterFunc(AbilityComp *const this, MixinRegisterFuncType func_type)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  std::map<MixinRegisterFuncType,unsigned int>::mapped_type *v5; // rax
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // r14
  std::map<MixinRegisterFuncType,unsigned int>::mapped_type *v9; // rax
  unsigned int val; // [rsp+1Ch] [rbp-94h] BYREF
  common::milog::MiLogStream v11; // [rsp+20h] [rbp-90h] BYREF
  char v12[112]; // [rsp+40h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 func_type:4672";
  *(_QWORD *)(v2 + 16) = AbilityComp::addMixinRegisterFunc;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  *(_DWORD *)(v2 + 32) = func_type;
  v5 = std::map<MixinRegisterFuncType,unsigned int>::operator[](
         &this->mixin_register_func_count_map_,
         (const std::map<MixinRegisterFuncType,unsigned int>::key_type *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)v5 >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)v5 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v5 >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(v5);
  }
  ++*v5;
  common::milog::MiLogStream::create(
    &v11,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/ability/ability_comp.cpp",
    "addMixinRegisterFunc",
    4675);
  v6 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(&v11, (const char (*)[20])"mixin add register:");
  val = *(_DWORD *)(v2 + 32);
  v7 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, &val);
  v8 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v7, (const char (*)[8])" count:");
  v9 = std::map<MixinRegisterFuncType,unsigned int>::operator[](
         &this->mixin_register_func_count_map_,
         (const std::map<MixinRegisterFuncType,unsigned int>::key_type *)(v2 + 32));
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, v9);
  common::milog::MiLogStream::~MiLogStream(&v11);
  if ( v12 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 4679: range 00000000136ED868-00000000136EDAEB
void __fastcall AbilityComp::delMixinRegisterFunc(AbilityComp *const this, MixinRegisterFuncType func_type)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  unsigned int *v5; // rax
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // r14
  std::map<MixinRegisterFuncType,unsigned int>::mapped_type *v9; // rax
  unsigned int val; // [rsp+14h] [rbp-9Ch] BYREF
  unsigned int *count; // [rsp+18h] [rbp-98h]
  common::milog::MiLogStream v12; // [rsp+20h] [rbp-90h] BYREF
  char v13[112]; // [rsp+40h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 func_type:4678";
  *(_QWORD *)(v2 + 16) = AbilityComp::delMixinRegisterFunc;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  *(_DWORD *)(v2 + 32) = func_type;
  v5 = std::map<MixinRegisterFuncType,unsigned int>::operator[](
         &this->mixin_register_func_count_map_,
         (const std::map<MixinRegisterFuncType,unsigned int>::key_type *)(v2 + 32));
  count = v5;
  if ( *(_BYTE *)(((unsigned __int64)v5 >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)v5 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v5 >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(v5);
  }
  if ( *count )
    --*count;
  if ( *(_BYTE *)(((unsigned __int64)count >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)count & 7) + 3) >= *(_BYTE *)(((unsigned __int64)count >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(count);
  }
  if ( !*count )
    std::map<MixinRegisterFuncType,unsigned int>::erase(
      &this->mixin_register_func_count_map_,
      (const std::map<MixinRegisterFuncType,unsigned int>::key_type *)(v2 + 32));
  common::milog::MiLogStream::create(
    &v12,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/ability/ability_comp.cpp",
    "delMixinRegisterFunc",
    4689);
  v6 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(&v12, (const char (*)[20])"mixin del register:");
  val = *(_DWORD *)(v2 + 32);
  v7 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, &val);
  v8 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v7, (const char (*)[8])" count:");
  v9 = std::map<MixinRegisterFuncType,unsigned int>::operator[](
         &this->mixin_register_func_count_map_,
         (const std::map<MixinRegisterFuncType,unsigned int>::key_type *)(v2 + 32));
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, v9);
  common::milog::MiLogStream::~MiLogStream(&v12);
  if ( v13 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 4693: range 00000000136EDAEC-00000000136EDBC3
bool __fastcall AbilityComp::isMixinFuncTypeRegistered(AbilityComp *const this, MixinRegisterFuncType func_type)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  bool result; // al
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 func_type:4692";
  *(_QWORD *)(v2 + 16) = AbilityComp::isMixinFuncTypeRegistered;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  *(_DWORD *)(v2 + 32) = func_type;
  result = std::map<MixinRegisterFuncType,unsigned int>::count(
             &this->mixin_register_func_count_map_,
             (const std::map<MixinRegisterFuncType,unsigned int>::key_type *)(v2 + 32)) != 0;
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4698: range 00000000136EDBC4-00000000136EDE1F
int32_t __cdecl AbilityComp::foreachMixin(
        AbilityComp *const this,
        std::function<ForeachPolicy(BaseAbilityMixin&)> *p_func)
{
  std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v2; // rdx
  std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v4; // rdx
  __int16 v5; // [rsp+1Eh] [rbp-72h] BYREF
  std::map<unsigned int,std::shared_ptr<ActorAbility>>::iterator __for_begin; // [rsp+20h] [rbp-70h] BYREF
  std::map<unsigned int,std::shared_ptr<ActorAbility>>::iterator __for_end; // [rsp+28h] [rbp-68h] BYREF
  std::initializer_list<bool>::const_iterator __for_begin_0; // [rsp+30h] [rbp-60h]
  std::map<unsigned int,std::shared_ptr<ActorAbility>> *__for_range; // [rsp+38h] [rbp-58h]
  std::initializer_list<bool> *__for_range_0; // [rsp+40h] [rbp-50h]
  std::initializer_list<bool>::const_iterator __for_end_0; // [rsp+48h] [rbp-48h]
  std::vector<std::shared_ptr<ActorModifier>> *modifier_vec; // [rsp+50h] [rbp-40h]
  std::vector<std::shared_ptr<ActorModifier>> *__for_range_1; // [rsp+58h] [rbp-38h]
  const ActorModifierPtr *modifier_ptr; // [rsp+60h] [rbp-30h]
  const std::pair<unsigned int const,std::shared_ptr<ActorAbility> > *v15; // [rsp+68h] [rbp-28h]
  std::tuple_element<0,const std::pair<unsigned int const,std::shared_ptr<ActorAbility> > >::type *ability_id; // [rsp+70h] [rbp-20h]
  std::tuple_element<1,const std::pair<unsigned int const,std::shared_ptr<ActorAbility> > >::type *ability_ptr; // [rsp+78h] [rbp-18h]
  std::initializer_list<bool> v18; // [rsp+80h] [rbp-10h] BYREF

  __for_range = &this->applied_ability_map_;
  __for_begin._M_node = std::map<unsigned int,std::shared_ptr<ActorAbility>>::begin(&this->applied_ability_map_)._M_node;
  __for_end._M_node = std::map<unsigned int,std::shared_ptr<ActorAbility>>::end(&this->applied_ability_map_)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v15 = std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<ActorAbility>>>::operator*(&__for_begin);
    ability_id = std::get<0ul,unsigned int const,std::shared_ptr<ActorAbility>>(v15);
    ability_ptr = (std::tuple_element<1,const std::pair<unsigned int const,std::shared_ptr<ActorAbility> > >::type *)std::get<1ul,unsigned int const,std::shared_ptr<ActorAbility>>(v15);
    if ( !std::operator==<ActorAbility>(ability_ptr, 0LL) )
    {
      v2 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)ability_ptr);
      if ( BaseActorActionContext::foreachMixin(v2, p_func) )
        return 1;
    }
    std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<ActorAbility>>>::operator++(&__for_begin);
  }
  v5 = 1;
  v18._M_len = 2LL;
  v18._M_array = (std::initializer_list<bool>::iterator)&v5;
  __for_range_0 = &v18;
  __for_begin_0 = std::initializer_list<bool>::begin(&v18);
  __for_end_0 = std::initializer_list<bool>::end(__for_range_0);
  while ( __for_begin_0 != __for_end_0 )
  {
    if ( *(_BYTE *)(((unsigned __int64)__for_begin_0 >> 3) + 0x7FFF8000) != 0
      && ((unsigned __int8)__for_begin_0 & 7) >= *(_BYTE *)(((unsigned __int64)__for_begin_0 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load1(__for_begin_0);
    }
    modifier_vec = AbilityComp::getAppliedModifierVec(this, *__for_begin_0);
    __for_range_1 = modifier_vec;
    __for_begin._M_node = (std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<ActorAbility> > >::_Base_ptr)std::vector<std::shared_ptr<ActorModifier>>::begin(modifier_vec)._M_current;
    __for_end._M_node = (std::_Rb_tree_iterator<std::pair<unsigned int const,std::shared_ptr<ActorAbility> > >::_Base_ptr)std::vector<std::shared_ptr<ActorModifier>>::end(__for_range_1)._M_current;
    while ( __gnu_cxx::operator!=<std::shared_ptr<ActorModifier> *,std::vector<std::shared_ptr<ActorModifier>>>(
              (const __gnu_cxx::__normal_iterator<std::shared_ptr<ActorModifier>*,std::vector<std::shared_ptr<ActorModifier>> > *)&__for_begin,
              (const __gnu_cxx::__normal_iterator<std::shared_ptr<ActorModifier>*,std::vector<std::shared_ptr<ActorModifier>> > *)&__for_end) )
    {
      modifier_ptr = __gnu_cxx::__normal_iterator<std::shared_ptr<ActorModifier> *,std::vector<std::shared_ptr<ActorModifier>>>::operator*((const __gnu_cxx::__normal_iterator<std::shared_ptr<ActorModifier>*,std::vector<std::shared_ptr<ActorModifier>> > *const)&__for_begin);
      if ( !std::operator==<ActorModifier>(modifier_ptr, 0LL) )
      {
        v4 = std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)modifier_ptr);
        if ( BaseActorActionContext::foreachMixin(v4, p_func) )
          return 1;
      }
      __gnu_cxx::__normal_iterator<std::shared_ptr<ActorModifier> *,std::vector<std::shared_ptr<ActorModifier>>>::operator++((__gnu_cxx::__normal_iterator<std::shared_ptr<ActorModifier>*,std::vector<std::shared_ptr<ActorModifier>> > *const)&__for_begin);
    }
    ++__for_begin_0;
  }
  return 0;
};

// Line 4727: range 00000000136EDE20-00000000136EE37D
int32_t __cdecl AbilityComp::foreachMixin(
        const AbilityComp *const this,
        std::function<ForeachPolicy(const BaseAbilityMixin&)> *p_func)
{
  int32_t v2; // r15d
  std::shared_ptr<ActorModifier> *v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r13
  const std::pair<unsigned int const,std::shared_ptr<ActorAbility> > *v6; // rax
  int v7; // r14d
  std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // r14
  const std::shared_ptr<ActorModifier> *v9; // rax
  int v10; // r14d
  std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // r14
  int32_t result; // eax
  __int16 v13; // [rsp+2Eh] [rbp-132h] BYREF
  std::map<unsigned int,std::shared_ptr<ActorAbility>>::const_iterator __for_begin; // [rsp+30h] [rbp-130h] BYREF
  std::map<unsigned int,std::shared_ptr<ActorAbility>>::const_iterator __for_end; // [rsp+38h] [rbp-128h] BYREF
  std::initializer_list<bool>::const_iterator __for_begin_0; // [rsp+40h] [rbp-120h]
  const std::map<unsigned int,std::shared_ptr<ActorAbility>> *__for_range; // [rsp+48h] [rbp-118h]
  std::initializer_list<bool> *__for_range_0; // [rsp+50h] [rbp-110h]
  std::initializer_list<bool>::const_iterator __for_end_0; // [rsp+58h] [rbp-108h]
  const std::vector<std::shared_ptr<ActorModifier>> *modifier_vec; // [rsp+60h] [rbp-100h]
  const std::vector<std::shared_ptr<ActorModifier>> *__for_range_1; // [rsp+68h] [rbp-F8h]
  std::tuple_element<0,std::pair<unsigned int const,std::shared_ptr<ActorAbility> > >::type *ability_id; // [rsp+70h] [rbp-F0h]
  std::tuple_element<1,std::pair<unsigned int const,std::shared_ptr<ActorAbility> > >::type *ability_ptr; // [rsp+78h] [rbp-E8h]
  std::initializer_list<bool> v24; // [rsp+80h] [rbp-E0h] BYREF
  std::pair<unsigned int const,std::shared_ptr<ActorAbility> > __in; // [rsp+90h] [rbp-D0h] BYREF
  std::function<ForeachPolicy(const BaseAbilityMixin&)> p___f; // [rsp+B0h] [rbp-B0h] BYREF
  std::function<ForeachPolicy(BaseAbilityMixin&)> func; // [rsp+D0h] [rbp-90h] BYREF
  char v28[112]; // [rsp+F0h] [rbp-70h] BYREF

  v3 = (std::shared_ptr<ActorModifier> *)v28;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = (std::shared_ptr<ActorModifier> *)v4;
  }
  v3->_M_ptr = (std::__shared_ptr<ActorModifier,(__gnu_cxx::_Lock_policy)2>::element_type *)1102416563;
  v3->_M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)"1 32 16 17 modifier_ptr:4742";
  v3[1]._M_ptr = (std::__shared_ptr<ActorModifier,(__gnu_cxx::_Lock_policy)2>::element_type *)AbilityComp::foreachMixin;
  v5 = (unsigned __int64)v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202178560;
  __for_range = &this->applied_ability_map_;
  __for_begin._M_node = std::map<unsigned int,std::shared_ptr<ActorAbility>>::begin(&this->applied_ability_map_)._M_node;
  __for_end._M_node = std::map<unsigned int,std::shared_ptr<ActorAbility>>::end(&this->applied_ability_map_)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v6 = std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::shared_ptr<ActorAbility>>>::operator*(&__for_begin);
    std::pair<unsigned int const,std::shared_ptr<ActorAbility>>::pair(&__in, v6);
    ability_id = std::get<0ul,unsigned int const,std::shared_ptr<ActorAbility>>(&__in);
    ability_ptr = std::get<1ul,unsigned int const,std::shared_ptr<ActorAbility>>(&__in);
    if ( std::operator==<ActorAbility>(ability_ptr, 0LL) )
    {
      v7 = 0;
    }
    else
    {
      v8 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)ability_ptr);
      std::function<ForeachPolicy ()(BaseAbilityMixin const&)>::function(&p___f, p_func);
      std::function<ForeachPolicy ()(BaseAbilityMixin &)>::function<std::function<ForeachPolicy ()(BaseAbilityMixin const&)>,void,void>(
        &func,
        &p___f);
      LOBYTE(v8) = BaseActorActionContext::foreachMixin(v8, &func) != 0;
      std::function<ForeachPolicy ()(BaseAbilityMixin &)>::~function(&func);
      std::function<ForeachPolicy ()(BaseAbilityMixin const&)>::~function(&p___f);
      if ( (_BYTE)v8 )
      {
        v2 = 1;
        v7 = 1;
      }
      else
      {
        v7 = 2;
      }
    }
    std::pair<unsigned int const,std::shared_ptr<ActorAbility>>::~pair(&__in);
    if ( v7 && v7 != 2 )
      goto LABEL_30;
    std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::shared_ptr<ActorAbility>>>::operator++(&__for_begin);
  }
  v13 = 1;
  v24._M_len = 2LL;
  v24._M_array = (std::initializer_list<bool>::iterator)&v13;
  __for_range_0 = &v24;
  __for_begin_0 = std::initializer_list<bool>::begin(&v24);
  __for_end_0 = std::initializer_list<bool>::end(__for_range_0);
  while ( __for_begin_0 != __for_end_0 )
  {
    if ( *(_BYTE *)(((unsigned __int64)__for_begin_0 >> 3) + 0x7FFF8000) != 0
      && ((unsigned __int8)__for_begin_0 & 7) >= *(_BYTE *)(((unsigned __int64)__for_begin_0 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load1(__for_begin_0);
    }
    modifier_vec = AbilityComp::getAppliedModifierVec(this, *__for_begin_0);
    __for_range_1 = modifier_vec;
    __for_begin._M_node = (std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::shared_ptr<ActorAbility> > >::_Base_ptr)std::vector<std::shared_ptr<ActorModifier>>::begin(modifier_vec)._M_current;
    __for_end._M_node = (std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::shared_ptr<ActorAbility> > >::_Base_ptr)std::vector<std::shared_ptr<ActorModifier>>::end(__for_range_1)._M_current;
    while ( __gnu_cxx::operator!=<std::shared_ptr<ActorModifier> const*,std::vector<std::shared_ptr<ActorModifier>>>(
              (const __gnu_cxx::__normal_iterator<const std::shared_ptr<ActorModifier>*,std::vector<std::shared_ptr<ActorModifier>> > *)&__for_begin,
              (const __gnu_cxx::__normal_iterator<const std::shared_ptr<ActorModifier>*,std::vector<std::shared_ptr<ActorModifier>> > *)&__for_end) )
    {
      v9 = __gnu_cxx::__normal_iterator<std::shared_ptr<ActorModifier> const*,std::vector<std::shared_ptr<ActorModifier>>>::operator*((const __gnu_cxx::__normal_iterator<const std::shared_ptr<ActorModifier>*,std::vector<std::shared_ptr<ActorModifier>> > *const)&__for_begin);
      std::shared_ptr<ActorModifier>::shared_ptr(v3 + 2, v9);
      if ( std::operator==<ActorModifier>(v3 + 2, 0LL) )
      {
        v10 = 0;
      }
      else
      {
        v11 = std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v3[2]);
        std::function<ForeachPolicy ()(BaseAbilityMixin const&)>::function(&p___f, p_func);
        std::function<ForeachPolicy ()(BaseAbilityMixin &)>::function<std::function<ForeachPolicy ()(BaseAbilityMixin const&)>,void,void>(
          &func,
          &p___f);
        LOBYTE(v11) = BaseActorActionContext::foreachMixin(v11, &func) != 0;
        std::function<ForeachPolicy ()(BaseAbilityMixin &)>::~function(&func);
        std::function<ForeachPolicy ()(BaseAbilityMixin const&)>::~function(&p___f);
        if ( (_BYTE)v11 )
        {
          v2 = 1;
          v10 = 1;
        }
        else
        {
          v10 = 2;
        }
      }
      std::shared_ptr<ActorModifier>::~shared_ptr(v3 + 2);
      if ( v10 && v10 != 2 )
        goto LABEL_30;
      __gnu_cxx::__normal_iterator<std::shared_ptr<ActorModifier> const*,std::vector<std::shared_ptr<ActorModifier>>>::operator++((__gnu_cxx::__normal_iterator<const std::shared_ptr<ActorModifier>*,std::vector<std::shared_ptr<ActorModifier>> > *const)&__for_begin);
    }
    ++__for_begin_0;
  }
  v2 = 0;
LABEL_30:
  result = v2;
  if ( v28 == (char *)v3 )
  {
    *(_QWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    v3->_M_ptr = (std::__shared_ptr<ActorModifier,(__gnu_cxx::_Lock_policy)2>::element_type *)1172321806;
    *(_QWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4756: range 00000000136EE37E-00000000136EE416
int32_t __cdecl AbilityComp::dispatchSingleAbilityInvoke(
        AbilityComp *const this,
        const proto::AbilityInvokeEntry *entry,
        Player *from_player)
{
  PlayerBasicComp *BasicComp; // rbx
  double v4; // xmm0_8
  const proto::AbilityInvokeEntryHead *head; // [rsp+28h] [rbp-18h]

  BasicComp = Player::getBasicComp(from_player);
  v4 = proto::AbilityInvokeEntry::total_tick_time(entry);
  PlayerBasicComp::checkAndUpdateClientTotalTickTime(BasicComp, v4);
  head = proto::AbilityInvokeEntry::head(entry);
  if ( proto::AbilityInvokeEntryHead::local_id(head) )
    AbilityComp::serverCommonInvokeHandler(this, entry, from_player);
  else
    AbilityComp::metaRemoteInvokeHandler(this, entry, from_player);
  return 0;
};

// Line 4773: range 00000000136EE418-00000000136EF4A6
void __cdecl AbilityComp::serverCommonInvokeHandler(
        AbilityComp *const this,
        const proto::AbilityInvokeEntry *entry,
        Player *from_player)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v6; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v7; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v8; // r14
  Creature *creature; // rsi
  unsigned __int64 *v10; // rax
  unsigned __int64 v11; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v12; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v13; // r14
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v19; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v20; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v21; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v22; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v23; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v24; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v25; // r14
  Creature *v26; // rsi
  unsigned __int64 *v27; // rax
  unsigned __int64 v28; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v29; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v30; // r14
  CreatureBuffComp *CreatureBuffComp; // rax
  CreatureBuffComp *v32; // rcx
  common::milog::MiLogStream *v33; // r14
  Creature *v34; // rsi
  unsigned __int64 *v35; // rax
  unsigned __int64 v36; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v37; // rax
  BuffComp *BuffComp; // rcx
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v39; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v40; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v41; // r14
  Creature *v42; // rsi
  unsigned __int64 *v43; // rax
  unsigned __int64 v44; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v45; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v46; // r14
  Creature *v47; // r14
  ActorAbility *v48; // rsi
  bool is_server_modifier; // [rsp+23h] [rbp-17Dh]
  unsigned int target_id; // [rsp+24h] [rbp-17Ch]
  const proto::AbilityInvokeEntryHead *head; // [rsp+28h] [rbp-178h]
  const std::vector<std::shared_ptr<ActorModifier>> *modifier_vec_0; // [rsp+30h] [rbp-170h]
  const std::vector<std::shared_ptr<ActorModifier>> *modifier_vec; // [rsp+38h] [rbp-168h]
  std::shared_ptr<Creature> __r; // [rsp+40h] [rbp-160h] BYREF
  std::shared_ptr<Creature> v57; // [rsp+50h] [rbp-150h] BYREF
  std::shared_ptr<ActorModifier> v58; // [rsp+60h] [rbp-140h] BYREF
  std::string v; // [rsp+70h] [rbp-130h] BYREF
  std::string reason; // [rsp+90h] [rbp-110h] BYREF
  char v61[240]; // [rsp+B0h] [rbp-F0h] BYREF

  v3 = (unsigned __int64)v61;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 32 4 16 modifier_id:4792 48 4 15 ability_id:4793 64 16 16 ability_ptr:4774 96 16 17 modifier_p"
                        "tr:4775 128 16 15 target_ptr:4776 160 16 7 os:4789";
  *(_QWORD *)(v3 + 16) = AbilityComp::serverCommonInvokeHandler;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -219021312;
  v5[536862723] = -219021312;
  v5[536862724] = -219021312;
  v5[536862725] = -202178560;
  *(_QWORD *)(v3 + 64) = 0LL;
  *(_QWORD *)(v3 + 72) = 0LL;
  *(_QWORD *)(v3 + 96) = 0LL;
  *(_QWORD *)(v3 + 104) = 0LL;
  *(_QWORD *)(v3 + 128) = 0LL;
  *(_QWORD *)(v3 + 136) = 0LL;
  head = proto::AbilityInvokeEntry::head(entry);
  target_id = proto::AbilityInvokeEntryHead::target_id(head);
  if ( target_id )
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    Entity::findEntityInSameScene<Creature>((const Entity *const)&v57, (uint32_t)this->creature_);
    std::shared_ptr<Creature>::operator=((std::shared_ptr<Creature> *const)(v3 + 128), &v57);
    std::shared_ptr<Creature>::~shared_ptr(&v57);
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    toThisPtr<Creature>((Creature *)&__r);
    std::shared_ptr<Creature>::operator=((std::shared_ptr<Creature> *const)(v3 + 128), &__r);
    std::shared_ptr<Creature>::~shared_ptr(&__r);
  }
  if ( std::operator==<Creature>((const std::shared_ptr<Creature> *)(v3 + 128), 0LL) )
  {
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 160));
    v6 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
           (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 160),
           off_2503A3E0);
    v7 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v6, target_id);
    v8 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v7, ", entity:");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    creature = this->creature_;
    v10 = (unsigned __int64 *)creature;
    if ( *(_BYTE *)(((unsigned __int64)creature >> 3) + 0x7FFF8000) )
      v10 = (unsigned __int64 *)__asan_report_load8(this->creature_);
    v11 = *v10;
    if ( *(_BYTE *)((v11 >> 3) + 0x7FFF8000) )
      v11 = __asan_report_load8(v11);
    (*(void (__fastcall **)(std::string *, Creature *))v11)(&v, creature);
    v12 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v8, &v);
    v13 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v12, ", owner:");
    AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11](&reason, this);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v13, &reason);
    std::string::~string(&reason);
    std::string::~string(&v);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
      &reason,
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 160));
    AbilityComp::invokeFailNotify(this, entry, from_player, &reason);
    std::string::~string(&reason);
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&v,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "serverCommonInvokeHandler",
      4789);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
      &reason,
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 160));
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>((common::milog::MiLogStream *const)&v, &reason);
    std::string::~string(&reason);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 160));
    goto LABEL_58;
  }
  *(_DWORD *)(v3 + 32) = proto::AbilityInvokeEntryHead::instanced_modifier_id(head);
  *(_DWORD *)(v3 + 48) = proto::AbilityInvokeEntryHead::instanced_ability_id(head);
  is_server_modifier = proto::AbilityInvokeEntryHead::is_serverbuff_modifier(head);
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)&reason,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/ability/ability_comp.cpp",
    "serverCommonInvokeHandler",
    4795);
  v14 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
          (common::milog::MiLogStream *const)&reason,
          (const char (*)[14])"modifier_id: ");
  v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, (const unsigned int *)(v3 + 32));
  v16 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v15, " ability_id:");
  v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, (const unsigned int *)(v3 + 48));
  v18 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(v17, (const char (*)[21])" is_server_modifier:");
  common::milog::MiLogStream::operator<<(v18, is_server_modifier);
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&reason);
  if ( *(_DWORD *)(v3 + 32) )
  {
    AbilityComp::findAppliedModifier((AbilityComp *const)&v58, this, *(_DWORD *)(v3 + 32), is_server_modifier);
    std::shared_ptr<ActorModifier>::operator=((std::shared_ptr<ActorModifier> *const)(v3 + 96), &v58);
    std::shared_ptr<ActorModifier>::~shared_ptr(&v58);
    if ( std::operator==<ActorModifier>((const std::shared_ptr<ActorModifier> *)(v3 + 96), 0LL) )
    {
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 160));
      v19 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
              (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 160),
              off_2503A520);
      v20 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v19, *(_DWORD *)(v3 + 32));
      v21 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v20, ", is_server_modifier:");
      v22 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v21, is_server_modifier);
      v23 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v22, ", ability_id:");
      v24 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v23, *(_DWORD *)(v3 + 48));
      v25 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v24, ", entity:");
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      v26 = this->creature_;
      v27 = (unsigned __int64 *)v26;
      if ( *(_BYTE *)(((unsigned __int64)v26 >> 3) + 0x7FFF8000) )
        v27 = (unsigned __int64 *)__asan_report_load8(this->creature_);
      v28 = *v27;
      if ( *(_BYTE *)((v28 >> 3) + 0x7FFF8000) )
        v28 = __asan_report_load8(v28);
      (*(void (__fastcall **)(std::string *, Creature *))v28)(&v, v26);
      v29 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v25, &v);
      v30 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v29, ", owner:");
      AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11](&reason, this);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v30, &reason);
      std::string::~string(&reason);
      std::string::~string(&v);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        &reason,
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 160));
      AbilityComp::invokeFailNotify(this, entry, from_player, &reason);
      std::string::~string(&reason);
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&v,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "serverCommonInvokeHandler",
        4801);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        &reason,
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 160));
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
        (common::milog::MiLogStream *const)&v,
        &reason);
      std::string::~string(&reason);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 160));
      goto LABEL_58;
    }
    std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
    ActorModifier::getParentAbility((const ActorModifier *const)(v3 + 160));
    std::shared_ptr<ActorAbility>::operator=(
      (std::shared_ptr<ActorAbility> *const)(v3 + 64),
      (std::shared_ptr<ActorAbility> *)(v3 + 160));
    std::shared_ptr<ActorAbility>::~shared_ptr((std::shared_ptr<ActorAbility> *const)(v3 + 160));
    if ( is_server_modifier )
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      toPtr<Avatar,Creature>((Creature *)(v3 + 160));
      if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v3 + 160), 0LL) )
      {
        if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->creature_);
        CreatureBuffComp = Creature::getCreatureBuffComp(this->creature_);
        if ( CreatureBuffComp::isEnable(CreatureBuffComp) )
        {
          modifier_vec = AbilityComp::getAppliedModifierVec(this, is_server_modifier);
          if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->creature_);
          v32 = Creature::getCreatureBuffComp(this->creature_);
          CreatureBuffComp::debugCheckServerModifierConsistent(v32, modifier_vec, *(_DWORD *)(v3 + 48));
        }
        else
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&v,
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/ability/ability_comp.cpp",
            "serverCommonInvokeHandler",
            4818);
          v33 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
                  (common::milog::MiLogStream *const)&v,
                  (const char (*)[20])off_2503A600);
          if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->creature_);
          v34 = this->creature_;
          v35 = (unsigned __int64 *)v34;
          if ( *(_BYTE *)(((unsigned __int64)v34 >> 3) + 0x7FFF8000) )
            v35 = (unsigned __int64 *)__asan_report_load8(this->creature_);
          v36 = *v35;
          if ( *(_BYTE *)((v36 >> 3) + 0x7FFF8000) )
            v36 = __asan_report_load8(v36);
          (*(void (__fastcall **)(std::string *, Creature *))v36)(&reason, v34);
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v33, &reason);
          std::string::~string(&reason);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v);
        }
      }
      else
      {
        modifier_vec_0 = AbilityComp::getAppliedModifierVec(this, is_server_modifier);
        v37 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
        BuffComp = Avatar::getBuffComp(v37);
        BuffComp::debugCheckServerModifierConsistent(BuffComp, modifier_vec_0, *(_DWORD *)(v3 + 48));
      }
      std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 160));
    }
  }
  else if ( *(_DWORD *)(v3 + 48) )
  {
    AbilityComp::findAppliedAbility((AbilityComp *const)(v3 + 160), (__int64)this, *(_DWORD *)(v3 + 48));
    std::shared_ptr<ActorAbility>::operator=(
      (std::shared_ptr<ActorAbility> *const)(v3 + 64),
      (std::shared_ptr<ActorAbility> *)(v3 + 160));
    std::shared_ptr<ActorAbility>::~shared_ptr((std::shared_ptr<ActorAbility> *const)(v3 + 160));
  }
  if ( std::operator==<ActorAbility>((const std::shared_ptr<ActorAbility> *)(v3 + 64), 0LL) )
  {
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 160));
    v39 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
            (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 160),
            off_2503A640);
    v40 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v39, *(_DWORD *)(v3 + 48));
    v41 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v40, ", entity:");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    v42 = this->creature_;
    v43 = (unsigned __int64 *)v42;
    if ( *(_BYTE *)(((unsigned __int64)v42 >> 3) + 0x7FFF8000) )
      v43 = (unsigned __int64 *)__asan_report_load8(this->creature_);
    v44 = *v43;
    if ( *(_BYTE *)((v44 >> 3) + 0x7FFF8000) )
      v44 = __asan_report_load8(v44);
    (*(void (__fastcall **)(std::string *, Creature *))v44)(&v, v42);
    v45 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v41, &v);
    v46 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v45, ", owner:");
    AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11](&reason, this);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v46, &reason);
    std::string::~string(&reason);
    std::string::~string(&v);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
      &reason,
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 160));
    AbilityComp::invokeFailNotify(this, entry, from_player, &reason);
    std::string::~string(&reason);
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&v,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "serverCommonInvokeHandler",
      4835);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
      &reason,
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 160));
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>((common::milog::MiLogStream *const)&v, &reason);
    std::string::~string(&reason);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 160));
  }
  else
  {
    v47 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
    std::shared_ptr<ActorModifier>::shared_ptr(
      (std::shared_ptr<ActorModifier> *const)(v3 + 160),
      (const std::shared_ptr<ActorModifier> *)(v3 + 96));
    v48 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    AbilityComp::commonInvokeEntryDispatch(this, v48, (ActorModifierPtr *)(v3 + 160), entry, v47, from_player);
    std::shared_ptr<ActorModifier>::~shared_ptr((std::shared_ptr<ActorModifier> *const)(v3 + 160));
  }
LABEL_58:
  std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 128));
  std::shared_ptr<ActorModifier>::~shared_ptr((std::shared_ptr<ActorModifier> *const)(v3 + 96));
  std::shared_ptr<ActorAbility>::~shared_ptr((std::shared_ptr<ActorAbility> *const)(v3 + 64));
  if ( v61 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 4843: range 00000000136EF4A8-00000000136F0A76
void __cdecl AbilityComp::commonInvokeEntryDispatch(
        AbilityComp *const this,
        ActorAbility *ability,
        ActorModifierPtr *p_modifier_ptr,
        const proto::AbilityInvokeEntry *entry,
        Creature *target,
        Player *from_player)
{
  unsigned __int64 v6; // r13
  __int64 v7; // rax
  _DWORD *v8; // r12
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v9; // r14
  Creature *v10; // rdx
  void (__fastcall **v11)(std::_Vector_base<std::pair<std::weak_ptr<Creature>,std::shared_ptr<data::ConfigBuffDebuffResistance> >>::pointer *, Creature *); // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v12; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v13; // r14
  Creature *creature; // rsi
  unsigned __int64 *v15; // rax
  unsigned __int64 v16; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v17; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v18; // r14
  uint32_t v19; // eax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v20; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v21; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v22; // r14
  std::__shared_ptr_access<ConfigAbilityImpl,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v23; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v24; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v25; // r14
  Creature *v26; // rdx
  void (__fastcall **v27)(std::_Vector_base<std::pair<std::weak_ptr<Creature>,std::shared_ptr<data::ConfigBuffDebuffResistance> >>::pointer *, Creature *); // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v28; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v29; // r14
  Creature *v30; // rsi
  unsigned __int64 *v31; // rax
  unsigned __int64 v32; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v33; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v34; // r14
  unsigned __int64 v35; // rax
  unsigned __int64 v36; // rdx
  __int64 Uid; // r15
  __int64 EntityId; // r14
  unsigned __int64 v39; // rax
  unsigned __int64 v40; // rdx
  std::__shared_ptr_access<ConfigAbilityImpl,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v41; // rax
  bool v42; // al
  int32_t v43; // eax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v44; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v45; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v46; // r14
  std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v47; // rax
  const std::string *v48; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v49; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v50; // r14
  std::__shared_ptr_access<ConfigAbilityImpl,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v51; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v52; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v53; // r14
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v54; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v55; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v56; // r14
  std::__shared_ptr_access<ConfigAbilityImpl,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v57; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v58; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v59; // r14
  unsigned __int64 v60; // rax
  unsigned __int64 v61; // rdx
  __int64 v62; // r15
  unsigned __int64 v63; // rax
  unsigned __int64 v64; // rdx
  std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v65; // rax
  const std::string *v66; // rax
  const char *v67; // r14
  std::__shared_ptr_access<ConfigAbilityImpl,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v68; // rax
  bool v69; // al
  const char *v70; // [rsp+8h] [rbp-298h]
  const char *v71; // [rsp+10h] [rbp-290h]
  const char *v72; // [rsp+10h] [rbp-290h]
  const char *v73; // [rsp+18h] [rbp-288h]
  uint32_t v74; // [rsp+18h] [rbp-288h]
  unsigned int local_id; // [rsp+54h] [rbp-24Ch]
  const proto::AbilityInvokeEntryHead *head; // [rsp+58h] [rbp-248h]
  ActorAbility t; // [rsp+60h] [rbp-240h] BYREF

  v6 = (unsigned __int64)&t.server_override_map_._M_t._M_impl.std::_Rb_tree_header;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v7 = __asan_stack_malloc_3(384LL);
    if ( v7 )
      v6 = v7;
  }
  *(_QWORD *)v6 = 1102416563LL;
  *(_QWORD *)(v6 + 8) = "8 32 16 23 config_ability_ptr:4844 64 16 28 config_ability_impl_ptr:4845 96 16 20 invoke_site_pt"
                        "r:4853 128 16 22 config_action_ptr:4859 160 16 21 config_mixin_ptr:4875 192 16 14 mixin_ptr:4878"
                        " 224 16 7 os:4895 256 88 10 param:4862";
  *(_QWORD *)(v6 + 16) = AbilityComp::commonInvokeEntryDispatch;
  v8 = (_DWORD *)(v6 >> 3);
  v8[536862720] = -235802127;
  v8[536862721] = -219021312;
  v8[536862722] = -219021312;
  v8[536862723] = -219021312;
  v8[536862724] = -219021312;
  v8[536862725] = -219021312;
  v8[536862726] = -219021312;
  v8[536862727] = -219021312;
  v8[536862730] = -218103808;
  v8[536862731] = -202116109;
  ActorAbility::getConfig((const ActorAbility *const)(v6 + 32));
  std::dynamic_pointer_cast<ConfigAbilityImpl,data::ConfigAbility>((const std::shared_ptr<data::ConfigAbility> *)(v6 + 64));
  if ( std::operator==<ConfigAbilityImpl>((const std::shared_ptr<ConfigAbilityImpl> *)(v6 + 64), 0LL) )
  {
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v6 + 224));
    v9 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
           (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v6 + 224),
           off_2503A780);
    v10 = target;
    if ( *(_BYTE *)(((unsigned __int64)target >> 3) + 0x7FFF8000) )
      __asan_report_load8(target);
    v11 = *(void (__fastcall ***)(std::_Vector_base<std::pair<std::weak_ptr<Creature>,std::shared_ptr<data::ConfigBuffDebuffResistance> >>::pointer *, Creature *))target->baseclass_0;
    if ( *(_BYTE *)((*(_QWORD *)target->baseclass_0 >> 3) + 0x7FFF8000LL) )
      v11 = (void (__fastcall **)(std::_Vector_base<std::pair<std::weak_ptr<Creature>,std::shared_ptr<data::ConfigBuffDebuffResistance> >>::pointer *, Creature *))__asan_report_load8(*(_QWORD *)target->baseclass_0);
    (*v11)(&t.attached_resistance_buff_debuff_vec_._M_impl._M_end_of_storage, v10);
    v12 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
            v9,
            (const std::string *)&t.attached_resistance_buff_debuff_vec_._M_impl._M_end_of_storage);
    v13 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v12, ", entity:");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    creature = this->creature_;
    v15 = (unsigned __int64 *)creature;
    if ( *(_BYTE *)(((unsigned __int64)creature >> 3) + 0x7FFF8000) )
      v15 = (unsigned __int64 *)__asan_report_load8(this->creature_);
    v16 = *v15;
    if ( *(_BYTE *)((v16 >> 3) + 0x7FFF8000) )
      v16 = __asan_report_load8(v16);
    (*(void (__fastcall **)(std::enable_shared_from_this<ActorAbility> *, Creature *))v16)(
      &t.std::enable_shared_from_this<ActorAbility>,
      creature);
    v17 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
            v13,
            (const std::string *)&t.std::enable_shared_from_this<ActorAbility>);
    v18 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v17, ", owner:");
    AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11]((std::string *)&t.caster_wtr_._M_refcount, this);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
      v18,
      (const std::string *)&t.caster_wtr_._M_refcount);
    std::string::~string(&t.caster_wtr_._M_refcount);
    std::string::~string(&t.std::enable_shared_from_this<ActorAbility>);
    std::string::~string(&t.attached_resistance_buff_debuff_vec_._M_impl._M_end_of_storage);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
      (std::string *)&t.caster_wtr_._M_refcount,
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v6 + 224));
    AbilityComp::invokeFailNotify(this, entry, from_player, (const std::string *)&t.caster_wtr_._M_refcount);
    std::string::~string(&t.caster_wtr_._M_refcount);
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&t.std::enable_shared_from_this<ActorAbility>,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "commonInvokeEntryDispatch",
      4848);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
      (std::string *)&t.caster_wtr_._M_refcount,
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v6 + 224));
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
      (common::milog::MiLogStream *const)&t.std::enable_shared_from_this<ActorAbility>,
      (const std::string *)&t.caster_wtr_._M_refcount);
    std::string::~string(&t.caster_wtr_._M_refcount);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&t.std::enable_shared_from_this<ActorAbility>);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v6 + 224));
  }
  else
  {
    head = proto::AbilityInvokeEntry::head(entry);
    local_id = proto::AbilityInvokeEntryHead::local_id(head);
    v19 = (unsigned int)std::__shared_ptr_access<ConfigAbilityImpl,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ConfigAbilityImpl,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 64));
    ConfigAbilityImpl::getInvokeSite((const ConfigAbilityImpl *const)(v6 + 96), v19);
    if ( std::operator==<data::BaseActionContainer>(0LL, (const std::shared_ptr<data::BaseActionContainer> *)(v6 + 96)) )
    {
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v6 + 224));
      v20 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
              (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v6 + 224),
              "invalid invoke site local_id:");
      v21 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v20, local_id);
      v22 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v21, ", ability:");
      v23 = std::__shared_ptr_access<ConfigAbilityImpl,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ConfigAbilityImpl,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 64));
      v24 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v22, &v23->ability_name);
      v25 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v24, ", target:");
      v26 = target;
      if ( *(_BYTE *)(((unsigned __int64)target >> 3) + 0x7FFF8000) )
        __asan_report_load8(target);
      v27 = *(void (__fastcall ***)(std::_Vector_base<std::pair<std::weak_ptr<Creature>,std::shared_ptr<data::ConfigBuffDebuffResistance> >>::pointer *, Creature *))target->baseclass_0;
      if ( *(_BYTE *)((*(_QWORD *)target->baseclass_0 >> 3) + 0x7FFF8000LL) )
        v27 = (void (__fastcall **)(std::_Vector_base<std::pair<std::weak_ptr<Creature>,std::shared_ptr<data::ConfigBuffDebuffResistance> >>::pointer *, Creature *))__asan_report_load8(*(_QWORD *)target->baseclass_0);
      (*v27)(&t.attached_resistance_buff_debuff_vec_._M_impl._M_end_of_storage, v26);
      v28 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
              v25,
              (const std::string *)&t.attached_resistance_buff_debuff_vec_._M_impl._M_end_of_storage);
      v29 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v28, ", entity:");
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      v30 = this->creature_;
      v31 = (unsigned __int64 *)v30;
      if ( *(_BYTE *)(((unsigned __int64)v30 >> 3) + 0x7FFF8000) )
        v31 = (unsigned __int64 *)__asan_report_load8(this->creature_);
      v32 = *v31;
      if ( *(_BYTE *)((v32 >> 3) + 0x7FFF8000) )
        v32 = __asan_report_load8(v32);
      (*(void (__fastcall **)(std::enable_shared_from_this<ActorAbility> *, Creature *))v32)(
        &t.std::enable_shared_from_this<ActorAbility>,
        v30);
      v33 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
              v29,
              (const std::string *)&t.std::enable_shared_from_this<ActorAbility>);
      v34 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v33, ", owner:");
      AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11]((std::string *)&t.caster_wtr_._M_refcount, this);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
        v34,
        (const std::string *)&t.caster_wtr_._M_refcount);
      std::string::~string(&t.caster_wtr_._M_refcount);
      std::string::~string(&t.std::enable_shared_from_this<ActorAbility>);
      std::string::~string(&t.attached_resistance_buff_debuff_vec_._M_impl._M_end_of_storage);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        (std::string *)&t.caster_wtr_._M_refcount,
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v6 + 224));
      AbilityComp::invokeFailNotify(this, entry, from_player, (const std::string *)&t.caster_wtr_._M_refcount);
      std::string::~string(&t.caster_wtr_._M_refcount);
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&t.std::enable_shared_from_this<ActorAbility>,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "commonInvokeEntryDispatch",
        4856);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        (std::string *)&t.caster_wtr_._M_refcount,
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v6 + 224));
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
        (common::milog::MiLogStream *const)&t.std::enable_shared_from_this<ActorAbility>,
        (const std::string *)&t.caster_wtr_._M_refcount);
      std::string::~string(&t.caster_wtr_._M_refcount);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&t.std::enable_shared_from_this<ActorAbility>);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v6 + 224));
    }
    else
    {
      std::dynamic_pointer_cast<data::ConfigAbilityAction,data::BaseActionContainer>((const std::shared_ptr<data::BaseActionContainer> *)(v6 + 128));
      if ( std::operator!=<data::ConfigAbilityAction>(
             (const std::shared_ptr<data::ConfigAbilityAction> *)(v6 + 128),
             0LL) )
      {
        memset((void *)(v6 + 256), 0, 0x58uLL);
        toThisPtr<ActorAbility>(&t);
        std::shared_ptr<ActorAbility>::operator=(
          (std::shared_ptr<ActorAbility> *const)(v6 + 256),
          (std::shared_ptr<ActorAbility> *)&t);
        std::shared_ptr<ActorAbility>::~shared_ptr((std::shared_ptr<ActorAbility> *const)&t);
        std::shared_ptr<ActorModifier>::operator=((std::shared_ptr<ActorModifier> *const)(v6 + 272), p_modifier_ptr);
        if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->creature_);
        toThisPtr<Creature>((Creature *)&t.mixin_vec_._M_impl._M_finish);
        std::shared_ptr<Creature>::operator=(
          (std::shared_ptr<Creature> *const)(v6 + 288),
          (std::shared_ptr<Creature> *)&t.mixin_vec_._M_impl._M_finish);
        std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)&t.mixin_vec_._M_impl._M_finish);
        toThisPtr<Creature>((Creature *)(v6 + 160));
        std::shared_ptr<Creature>::operator=(
          (std::shared_ptr<Creature> *const)(v6 + 304),
          (std::shared_ptr<Creature> *)(v6 + 160));
        std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v6 + 160));
        *(_QWORD *)(v6 + 320) = entry;
        toThisPtr<Player>((Player *)(v6 + 192));
        std::shared_ptr<Player>::operator=(
          (std::shared_ptr<Player> *const)(v6 + 328),
          (std::shared_ptr<Player> *)(v6 + 192));
        std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v6 + 192));
        v35 = (unsigned __int64)std::__shared_ptr_access<data::ConfigAbilityAction,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigAbilityAction,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 128));
        if ( *(_BYTE *)((v35 >> 3) + 0x7FFF8000) )
          v35 = __asan_report_load8(v35);
        v36 = *(_QWORD *)v35 + 64LL;
        if ( *(_BYTE *)((v36 >> 3) + 0x7FFF8000) )
          v35 = __asan_report_load8(*(_QWORD *)v35 + 64LL);
        (*(void (__fastcall **)(unsigned __int64, unsigned __int64))v36)(v35, v6 + 256);
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&t.caster_wtr_._M_refcount,
          &common::milog::MiLogDefault::default_log_obj_,
          0x14u,
          "./src/ability/ability_comp.cpp",
          "commonInvokeEntryDispatch",
          4871);
        Uid = Player::getUid(from_player);
        if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->creature_);
        EntityId = Entity::getEntityId((const Entity *const)this->creature_);
        v39 = (unsigned __int64)std::__shared_ptr_access<data::ConfigAbilityAction,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigAbilityAction,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 128));
        if ( *(_BYTE *)((v39 >> 3) + 0x7FFF8000) )
          v39 = __asan_report_load8(v39);
        v40 = *(_QWORD *)v39 + 40LL;
        if ( *(_BYTE *)((v40 >> 3) + 0x7FFF8000) )
          v39 = __asan_report_load8(*(_QWORD *)v39 + 40LL);
        v73 = (const char *)(*(__int64 (__fastcall **)(unsigned __int64))v40)(v39);
        v41 = std::__shared_ptr_access<ConfigAbilityImpl,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ConfigAbilityImpl,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 64));
        v71 = (const char *)std::string::c_str(&v41->ability_name);
        v42 = AbilityComp::isInMpMode(this);
        common::milog::MiLogStream::operator()(
          (common::milog::MiLogStream *const)&t.caster_wtr_._M_refcount,
          "|%u|Action|%s|%s|%s|%u|%u|%s",
          v42,
          v71,
          byte_24FD2920,
          v73,
          EntityId,
          Uid,
          byte_24FD2920);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&t.caster_wtr_._M_refcount);
        ActionParam::~ActionParam((ActionParam *const)(v6 + 256));
      }
      else
      {
        std::dynamic_pointer_cast<data::ConfigAbilityMixin,data::BaseActionContainer>((const std::shared_ptr<data::BaseActionContainer> *)(v6 + 160));
        if ( std::operator!=<data::ConfigAbilityMixin>(
               (const std::shared_ptr<data::ConfigAbilityMixin> *)(v6 + 160),
               0LL) )
        {
          *(_QWORD *)(v6 + 192) = 0LL;
          *(_QWORD *)(v6 + 200) = 0LL;
          if ( std::operator!=<ActorModifier>(p_modifier_ptr, 0LL) )
          {
            v43 = (unsigned int)std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_modifier_ptr);
            BaseActorActionContext::getMixin(
              (BaseActorActionContext *const)&t.attached_resistance_buff_debuff_vec_,
              v43);
            std::shared_ptr<BaseAbilityMixin>::operator=(
              (std::shared_ptr<BaseAbilityMixin> *const)(v6 + 192),
              (std::shared_ptr<BaseAbilityMixin> *)&t.attached_resistance_buff_debuff_vec_);
            std::shared_ptr<BaseAbilityMixin>::~shared_ptr((std::shared_ptr<BaseAbilityMixin> *const)&t.attached_resistance_buff_debuff_vec_);
          }
          if ( std::operator==<BaseAbilityMixin>((const std::shared_ptr<BaseAbilityMixin> *)(v6 + 192), 0LL) )
          {
            BaseActorActionContext::getMixin((BaseActorActionContext *const)(v6 + 224), (int32_t)ability);
            std::shared_ptr<BaseAbilityMixin>::operator=(
              (std::shared_ptr<BaseAbilityMixin> *const)(v6 + 192),
              (std::shared_ptr<BaseAbilityMixin> *)(v6 + 224));
            std::shared_ptr<BaseAbilityMixin>::~shared_ptr((std::shared_ptr<BaseAbilityMixin> *const)(v6 + 224));
          }
          if ( std::operator==<BaseAbilityMixin>((const std::shared_ptr<BaseAbilityMixin> *)(v6 + 192), 0LL) )
          {
            if ( std::operator!=<ActorModifier>(p_modifier_ptr, 0LL) )
            {
              common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v6 + 224));
              v44 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v6 + 224),
                      off_2503A920);
              v45 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v44, local_id);
              v46 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v45, ", modifier_name:");
              v47 = std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_modifier_ptr);
              v48 = ActorModifier::getName[abi:cxx11](v47);
              v49 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v46, v48);
              v50 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v49, ", ability_name:");
              v51 = std::__shared_ptr_access<ConfigAbilityImpl,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ConfigAbilityImpl,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 64));
              v52 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v50, &v51->ability_name);
              v53 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v52, ", owner:");
              AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11]((std::string *)&t.caster_wtr_._M_refcount, this);
              common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                v53,
                (const std::string *)&t.caster_wtr_._M_refcount);
              std::string::~string(&t.caster_wtr_._M_refcount);
              common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
                (std::string *)&t.caster_wtr_._M_refcount,
                (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v6 + 224));
              AbilityComp::invokeFailNotify(this, entry, from_player, (const std::string *)&t.caster_wtr_._M_refcount);
              std::string::~string(&t.caster_wtr_._M_refcount);
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)&t.std::enable_shared_from_this<ActorAbility>,
                &common::milog::MiLogDefault::default_log_obj_,
                0x13u,
                "./src/ability/ability_comp.cpp",
                "commonInvokeEntryDispatch",
                4891);
            }
            else
            {
              common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v6 + 224));
              v54 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v6 + 224),
                      off_2503AA00);
              v55 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v54, local_id);
              v56 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v55, ", ability_name:");
              v57 = std::__shared_ptr_access<ConfigAbilityImpl,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ConfigAbilityImpl,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 64));
              v58 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v56, &v57->ability_name);
              v59 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v58, ", owner:");
              AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11]((std::string *)&t.caster_wtr_._M_refcount, this);
              common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                v59,
                (const std::string *)&t.caster_wtr_._M_refcount);
              std::string::~string(&t.caster_wtr_._M_refcount);
              common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
                (std::string *)&t.caster_wtr_._M_refcount,
                (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v6 + 224));
              AbilityComp::invokeFailNotify(this, entry, from_player, (const std::string *)&t.caster_wtr_._M_refcount);
              std::string::~string(&t.caster_wtr_._M_refcount);
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)&t.std::enable_shared_from_this<ActorAbility>,
                &common::milog::MiLogDefault::default_log_obj_,
                0x13u,
                "./src/ability/ability_comp.cpp",
                "commonInvokeEntryDispatch",
                4895);
            }
            common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
              (std::string *)&t.caster_wtr_._M_refcount,
              (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v6 + 224));
            common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
              (common::milog::MiLogStream *const)&t.std::enable_shared_from_this<ActorAbility>,
              (const std::string *)&t.caster_wtr_._M_refcount);
            std::string::~string(&t.caster_wtr_._M_refcount);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&t.std::enable_shared_from_this<ActorAbility>);
            common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v6 + 224));
          }
          else
          {
            v60 = (unsigned __int64)std::__shared_ptr_access<BaseAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BaseAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 192));
            if ( *(_BYTE *)((v60 >> 3) + 0x7FFF8000) )
              v60 = __asan_report_load8(v60);
            v61 = *(_QWORD *)v60 + 88LL;
            if ( *(_BYTE *)((v61 >> 3) + 0x7FFF8000) )
              v60 = __asan_report_load8(*(_QWORD *)v60 + 88LL);
            (*(void (__fastcall **)(unsigned __int64, const proto::AbilityInvokeEntry *, Player *))v61)(
              v60,
              entry,
              from_player);
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)&t.caster_wtr_._M_refcount,
              &common::milog::MiLogDefault::default_log_obj_,
              0x14u,
              "./src/ability/ability_comp.cpp",
              "commonInvokeEntryDispatch",
              4901);
            v74 = Player::getUid(from_player);
            if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
              __asan_report_load8(&this->creature_);
            v62 = Entity::getEntityId((const Entity *const)this->creature_);
            v63 = (unsigned __int64)std::__shared_ptr_access<data::ConfigAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 160));
            if ( *(_BYTE *)((v63 >> 3) + 0x7FFF8000) )
              v63 = __asan_report_load8(v63);
            v64 = *(_QWORD *)v63 + 40LL;
            if ( *(_BYTE *)((v64 >> 3) + 0x7FFF8000) )
              v63 = __asan_report_load8(*(_QWORD *)v63 + 40LL);
            v72 = (const char *)(*(__int64 (__fastcall **)(unsigned __int64))v64)(v63);
            if ( std::operator!=<ActorModifier>(p_modifier_ptr, 0LL) )
            {
              v65 = std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_modifier_ptr);
              v66 = ActorModifier::getName[abi:cxx11](v65);
              v67 = (const char *)std::string::c_str(v66);
            }
            else
            {
              v67 = byte_24FD2920;
            }
            v68 = std::__shared_ptr_access<ConfigAbilityImpl,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ConfigAbilityImpl,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 64));
            v70 = (const char *)std::string::c_str(&v68->ability_name);
            v69 = AbilityComp::isInMpMode(this);
            common::milog::MiLogStream::operator()(
              (common::milog::MiLogStream *const)&t.caster_wtr_._M_refcount,
              "|%u|Mixin|%s|%s|%s|%u|%u|%s",
              v69,
              v70,
              v67,
              v72,
              v62,
              v74,
              byte_24FD2920);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&t.caster_wtr_._M_refcount);
          }
          std::shared_ptr<BaseAbilityMixin>::~shared_ptr((std::shared_ptr<BaseAbilityMixin> *const)(v6 + 192));
        }
        std::shared_ptr<data::ConfigAbilityMixin>::~shared_ptr((std::shared_ptr<data::ConfigAbilityMixin> *const)(v6 + 160));
      }
      std::shared_ptr<data::ConfigAbilityAction>::~shared_ptr((std::shared_ptr<data::ConfigAbilityAction> *const)(v6 + 128));
    }
    std::shared_ptr<data::BaseActionContainer>::~shared_ptr((std::shared_ptr<data::BaseActionContainer> *const)(v6 + 96));
  }
  std::shared_ptr<ConfigAbilityImpl>::~shared_ptr((std::shared_ptr<ConfigAbilityImpl> *const)(v6 + 64));
  std::shared_ptr<data::ConfigAbility>::~shared_ptr((std::shared_ptr<data::ConfigAbility> *const)(v6 + 32));
  if ( &t.server_override_map_._M_t._M_impl.std::_Rb_tree_header == (std::_Rb_tree_header *)v6 )
  {
    *(_QWORD *)((v6 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8028) = 0LL;
  }
  else
  {
    *(_QWORD *)v6 = 1172321806LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 4908: range 00000000136F0A78-00000000136F0CC6
void __cdecl AbilityComp::metaRemoteInvokeHandler(
        AbilityComp *const this,
        const proto::AbilityInvokeEntry *entry,
        Player *from_player)
{
  switch ( proto::AbilityInvokeEntry::argument_type(entry) )
  {
    case ABILITY_META_MODIFIER_CHANGE:
      AbilityComp::metaHandlerModifierChange(this, entry, from_player);
      break;
    case ABILITY_META_SPECIAL_FLOAT_ARGUMENT:
      AbilityComp::metaHandleSpecialFloatArgument(this, entry, from_player);
      break;
    case ABILITY_META_OVERRIDE_PARAM:
      AbilityComp::metaHandleOverrideParam(this, entry, from_player);
      break;
    case ABILITY_META_CLEAR_OVERRIDE_PARAM:
      AbilityComp::metaHandleClearOverrideParam(this, entry, from_player);
      break;
    case ABILITY_META_REINIT_OVERRIDEMAP:
      AbilityComp::metaHandleReInitOverrideParam(this, entry, from_player);
      break;
    case ABILITY_META_GLOBAL_FLOAT_VALUE:
      AbilityComp::metaHandleGlobalFloatValue(this, entry, from_player);
      break;
    case ABILITY_META_CLEAR_GLOBAL_FLOAT_VALUE:
      AbilityComp::metaHandleClearGlobalFloatValue(this, entry, from_player);
      break;
    case ABILITY_META_ABILITY_ELEMENT_STRENGTH:
      AbilityComp::metaHandleAbilityElementStrength(this, entry, from_player);
      break;
    case ABILITY_META_SET_KILLED_SETATE:
      AbilityComp::metaHandleSetKilledState(this, entry, from_player);
      break;
    case ABILITY_META_ADD_NEW_ABILITY:
      AbilityComp::metaHandleAddNewAbility(this, entry, from_player);
      break;
    case ABILITY_META_REMOVE_ABILITY:
      AbilityComp::metaHandleRemoveAbility(this, entry, from_player);
      break;
    case ABILITY_META_SET_MODIFIER_APPLY_ENTITY:
      AbilityComp::metaHandleSetModifierApplyEntityId(this, entry, from_player);
      break;
    case ABILITY_META_MODIFIER_DURABILITY_CHANGE:
      AbilityComp::metaHandleModifierDurabilityChange(this, entry, from_player);
      break;
    case ABILITY_META_SET_POSE_PARAMETER:
      AbilityComp::metaHandleSetPoseParameter(this, entry, from_player);
      break;
    case ABILITY_META_UPDATE_BASE_REACTION_DAMAGE:
      AbilityComp::metaHandleUpdateBaseReactionDamage(this, entry, from_player);
      break;
    case ABILITY_META_TRIGGER_ELEMENT_REACTION:
      AbilityComp::metaHandleUpdateElementReaction(this, entry, from_player);
      break;
    case ABILITY_META_LOSE_HP:
      AbilityComp::metaHandleLoseHp(this, entry, from_player);
      break;
    case ABILITY_META_DURABILITY_IS_ZERO:
      AbilityComp::metaHandleDurabilityIsZero(this, entry, from_player);
      break;
    case ABILITY_MIXIN_AVATAR_STEER_BY_CAMERA:
    case ABILITY_MIXIN_MONSTER_DEFEND:
    case ABILITY_MIXIN_WIND_ZONE:
    case ABILITY_MIXIN_COST_STAMINA:
    case ABILITY_MIXIN_ELITE_SHIELD:
    case ABILITY_MIXIN_ELEMENT_SHIELD:
    case ABILITY_MIXIN_SHIELD_BAR:
    case ABILITY_MIXIN_WIND_SEED_SPAWNER:
    case ABILITY_MIXIN_DO_ACTION_BY_SELF_MODIFIER_ELEMENT_DURABILITY_RATIO:
    case ABILITY_MIXIN_FIREWORKS_LAUNCHER:
    case ABILITY_MIXIN_ATTACK_RESULT_CREATE_COUNT:
    case ABILITY_MIXIN_DEATH_ZONE_REGIONAL_PLAY_MIXIN:
    case ABILITY_MIXIN_ERASE_BRICK_ACTIVITY:
      AbilityComp::serverCommonInvokeHandler(this, entry, from_player);
      break;
    default:
      return;
  }
};

// Line 4985: range 00000000136F0CC8-00000000136F4E42
void __cdecl AbilityComp::metaHandlerModifierChange(
        AbilityComp *const this,
        const proto::AbilityInvokeEntry *entry,
        Player *from_player)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v6; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v7; // r14
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v16; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v17; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v18; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v19; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v20; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v21; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v22; // r14
  Creature *creature; // rsi
  unsigned __int64 *v24; // rax
  unsigned __int64 v25; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v26; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v27; // r14
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // r14
  Creature *v35; // rsi
  unsigned __int64 *v36; // rax
  unsigned __int64 v37; // rax
  common::milog::MiLogStream *v38; // rax
  common::milog::MiLogStream *v39; // rax
  CreatureBuffComp *v40; // rax
  Creature *v41; // rax
  CreatureBuffComp *v42; // r14
  uint32_t v43; // eax
  int v44; // r14d
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v45; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v46; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v47; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v48; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v49; // r14
  Creature *v50; // rsi
  unsigned __int64 *v51; // rax
  unsigned __int64 v52; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v53; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v54; // r14
  int v55; // r14d
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v56; // r14
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v57; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v58; // r14
  Creature *v59; // rsi
  unsigned __int64 *v60; // rax
  unsigned __int64 v61; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v62; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v63; // r14
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v64; // rax
  BuffComp *v65; // r14
  uint32_t v66; // eax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v67; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v68; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v69; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v70; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v71; // r14
  Creature *v72; // rsi
  unsigned __int64 *v73; // rax
  unsigned __int64 v74; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v75; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v76; // r14
  Creature *v77; // rax
  char v78; // r14
  bool v79; // r15
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v80; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v81; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v82; // r14
  Creature *v83; // rsi
  unsigned __int64 *v84; // rax
  unsigned __int64 v85; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v86; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v87; // r14
  int v88; // r14d
  int v89; // r14d
  uint32_t v90; // r14d
  const proto::AbilityString *v91; // rax
  const proto::AbilityString *v92; // rax
  uint32_t v93; // eax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v94; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v95; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v96; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v97; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v98; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v99; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v100; // r14
  Creature *v101; // rsi
  unsigned __int64 *v102; // rax
  unsigned __int64 v103; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v104; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v105; // r14
  const proto::AbilityString *v106; // rax
  unsigned int v107; // eax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v108; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v109; // r14
  const proto::AbilityString *v110; // rax
  const std::string *v111; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v112; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v113; // r14
  std::__shared_ptr_access<ConfigAbilityImpl,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v114; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v115; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v116; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v117; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v118; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v119; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v120; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v121; // r14
  Creature *v122; // rsi
  unsigned __int64 *v123; // rax
  unsigned __int64 v124; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v125; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v126; // r14
  std::__shared_ptr_access<ConfigAbilityImpl,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v127; // rax
  const std::shared_ptr<data::ConfigAbilityModifier> *v128; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v129; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v130; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v131; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v132; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v133; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v134; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v135; // r14
  Creature *v136; // rsi
  unsigned __int64 *v137; // rax
  unsigned __int64 v138; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v139; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v140; // r14
  const std::shared_ptr<ActorModifier> *v141; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v142; // r14
  Creature *v143; // rsi
  unsigned __int64 *v144; // rax
  unsigned __int64 v145; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v146; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v147; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v148; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v149; // r14
  unsigned __int64 v150; // rax
  unsigned __int64 v151; // rdx
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v152; // r14
  unsigned __int64 v153; // rax
  unsigned __int64 v154; // rdx
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v155; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v156; // r14
  std::__shared_ptr_access<data::ConfigAbilityModifier,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v157; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v158; // r14
  std::__shared_ptr_access<ConfigAbilityImpl,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v159; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v160; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v161; // r14
  std::__shared_ptr_access<data::ConfigAbilityModifier,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v162; // rax
  google::protobuf::uint32 v163; // r14d
  std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v164; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v166; // r14
  unsigned int v167; // eax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v168; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v169; // r14
  std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v170; // rax
  unsigned int SbuffUid; // eax
  __int64 v172; // r15
  __int64 v173; // r14
  std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v174; // rax
  const std::string *v175; // rax
  std::__shared_ptr_access<ConfigAbilityImpl,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v176; // rax
  bool v177; // al
  int v178; // r14d
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v179; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v180; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v181; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v182; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v183; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v184; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v185; // r14
  Creature *v186; // rsi
  unsigned __int64 *v187; // rax
  unsigned __int64 v188; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v189; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v190; // r14
  google::protobuf::uint32 v191; // r14d
  common::milog::MiLogStream *v192; // r14
  common::milog::MiLogStream *v193; // rax
  common::milog::MiLogStream *v194; // r14
  common::milog::MiLogStream *v195; // rax
  common::milog::MiLogStream *v196; // rax
  common::milog::MiLogStream *v197; // rax
  common::milog::MiLogStream *v198; // rax
  common::milog::MiLogStream *v199; // rax
  common::milog::MiLogStream *v200; // r14
  Creature *v201; // rsi
  unsigned __int64 *v202; // rax
  unsigned __int64 v203; // rax
  CreatureBuffComp *CreatureBuffComp; // rax
  common::milog::MiLogStream *v205; // r14
  common::milog::MiLogStream *v206; // rax
  common::milog::MiLogStream *v207; // rcx
  common::milog::MiLogStream *v208; // rax
  common::milog::MiLogStream *v209; // rax
  common::milog::MiLogStream *v210; // r14
  common::milog::MiLogStream *v211; // rax
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v212; // rax
  BuffComp *BuffComp; // r14
  uint32_t v214; // eax
  ActorModifier *v215; // rax
  ActorModifier *v216; // rax
  ActorModifier *v217; // rax
  ActorModifier *v218; // r14
  bool is_mute_remote; // al
  ActorModifier *v220; // r14
  bool is_attached_parent_ability; // al
  ActorModifier *v222; // r14
  uint32_t v223; // eax
  ActorModifier *v224; // r14
  int32_t v225; // eax
  std::__shared_ptr_access<data::ConfigAbilityModifier,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v226; // r14
  uint32_t v227; // eax
  __int64 v228; // r15
  __int64 v229; // r14
  std::__shared_ptr_access<data::ConfigAbilityModifier,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v230; // rax
  std::__shared_ptr_access<ConfigAbilityImpl,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v231; // rax
  bool v232; // al
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v233; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v234; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v235; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v236; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v237; // r14
  Creature *v238; // rsi
  unsigned __int64 *v239; // rax
  unsigned __int64 v240; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v241; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v242; // r14
  __int64 Uid; // r15
  __int64 EntityId; // r14
  std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v245; // rax
  const std::string *v246; // rax
  std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v247; // rax
  const std::string *v248; // rax
  bool v249; // al
  const char *v250; // [rsp+8h] [rbp-2F8h]
  const char *v251; // [rsp+10h] [rbp-2F0h]
  const char *v252; // [rsp+10h] [rbp-2F0h]
  const char *v253; // [rsp+10h] [rbp-2F0h]
  const char *indexa; // [rsp+18h] [rbp-2E8h]
  data::ConfigAbilityModifier *indexb; // [rsp+18h] [rbp-2E8h]
  uint32_t index; // [rsp+18h] [rbp-2E8h]
  const char *indexc; // [rsp+18h] [rbp-2E8h]
  unsigned int v258; // [rsp+24h] [rbp-2DCh]
  unsigned int v259; // [rsp+24h] [rbp-2DCh]
  unsigned int v260; // [rsp+24h] [rbp-2DCh]
  bool is_server_modifier; // [rsp+49h] [rbp-2B7h]
  bool is_durability_zero; // [rsp+4Ah] [rbp-2B6h]
  bool is_attached_serverbuff_modifier; // [rsp+4Bh] [rbp-2B5h]
  unsigned int val; // [rsp+4Ch] [rbp-2B4h] BYREF
  unsigned int v267; // [rsp+50h] [rbp-2B0h] BYREF
  uint32_t server_instanced_modifier_id; // [rsp+54h] [rbp-2ACh]
  uint32_t modifier_index; // [rsp+58h] [rbp-2A8h]
  uint32_t modifier_local_id; // [rsp+5Ch] [rbp-2A4h]
  uint32_t owner_entity_id; // [rsp+60h] [rbp-2A0h]
  uint32_t attached_modifier_id; // [rsp+64h] [rbp-29Ch]
  const proto::AbilityInvokeEntryHead *head; // [rsp+68h] [rbp-298h]
  const std::string *ability_data_str; // [rsp+70h] [rbp-290h]
  std::vector<std::shared_ptr<ActorModifier>> *modifier_vec; // [rsp+78h] [rbp-288h]
  AbilityComp *target_ability_comp; // [rsp+80h] [rbp-280h]
  const proto::AbilityAttachedModifier *proto_attached_modifier; // [rsp+88h] [rbp-278h]
  std::shared_ptr<ActorAbility> __r; // [rsp+90h] [rbp-270h] BYREF
  std::shared_ptr<ActorAbility> v279; // [rsp+A0h] [rbp-260h] BYREF
  std::string output; // [rsp+B0h] [rbp-250h] BYREF
  common::milog::MiLogStream v281; // [rsp+D0h] [rbp-230h] BYREF
  std::string v; // [rsp+F0h] [rbp-210h] BYREF
  char v283[496]; // [rsp+110h] [rbp-1F0h] BYREF

  v3 = (unsigned __int64)v283;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(448LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "12 32 4 10 limit:4994 48 4 14 target_id:5000 64 4 15 ability_id:5001 80 4 16 modifier_id:5002 96"
                        " 16 15 config_ptr:4995 128 16 16 ability_ptr:5057 160 16 28 config_ability_impl_ptr:5084 192 16 "
                        "24 config_modifier_ptr:5105 224 16 17 modifier_ptr:5149 256 16 17 modifier_ptr:5196 288 16 16 ab"
                        "ility_ptr:5202 320 88 25 meta_modifier_change:4988";
  *(_QWORD *)(v3 + 16) = AbilityComp::metaHandlerModifierChange;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -234556924;
  v5[536862723] = -219021312;
  v5[536862724] = -219021312;
  v5[536862725] = -219021312;
  v5[536862726] = -219021312;
  v5[536862727] = -219021312;
  v5[536862728] = -219021312;
  v5[536862729] = -219021312;
  v5[536862732] = -218103808;
  v5[536862733] = -202116109;
  head = proto::AbilityInvokeEntry::head(entry);
  ability_data_str = proto::AbilityInvokeEntry::ability_data[abi:cxx11](entry);
  proto::AbilityMetaModifierChange::AbilityMetaModifierChange((proto::AbilityMetaModifierChange *const)(v3 + 320));
  if ( (unsigned __int8)google::protobuf::MessageLite::ParseFromString(v3 + 320, ability_data_str) != 1 )
  {
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 288));
    v6 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
           (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 288),
           "AbilityMetaModifierChange ParseFromString fails");
    v7 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v6, ", owner:");
    AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11](&v, this);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v7, &v);
    std::string::~string(&v);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
      &v,
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 288));
    AbilityComp::invokeFailNotify(this, entry, from_player, &v);
    std::string::~string(&v);
    common::milog::MiLogStream::create(
      &v281,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "metaHandlerModifierChange",
      4991);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
      &v,
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 288));
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v281, &v);
    std::string::~string(&v);
    common::milog::MiLogStream::~MiLogStream(&v281);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 288));
    goto LABEL_205;
  }
  *(_DWORD *)(v3 + 32) = 2000;
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)(v3 + 96));
  if ( std::operator!=<Config>((const std::shared_ptr<Config> *)(v3 + 96), 0LL) )
  {
    v8 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
    if ( *(_BYTE *)(((unsigned __int64)&v8->modifier_id_error_num >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&v8->modifier_id_error_num >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&v8->modifier_id_error_num);
    }
    *(_DWORD *)(v3 + 32) = v8->modifier_id_error_num;
  }
  *(_DWORD *)(v3 + 48) = proto::AbilityInvokeEntryHead::target_id(head);
  *(_DWORD *)(v3 + 64) = proto::AbilityInvokeEntryHead::instanced_ability_id(head);
  *(_DWORD *)(v3 + 80) = proto::AbilityInvokeEntryHead::instanced_modifier_id(head);
  is_server_modifier = proto::AbilityInvokeEntryHead::is_serverbuff_modifier(head);
  is_durability_zero = proto::AbilityMetaModifierChange::is_durability_zero((const proto::AbilityMetaModifierChange *const)(v3 + 320));
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)&v,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/ability/ability_comp.cpp",
    "metaHandlerModifierChange",
    5005);
  v9 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
         (common::milog::MiLogStream *const)&v,
         (const char (*)[40])"metaHandlerModifierChange modifier_id: ");
  v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v3 + 80));
  v11 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v10, " ability_id:");
  v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v3 + 64));
  v13 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(v12, (const char (*)[21])" is_server_modifier:");
  v14 = common::milog::MiLogStream::operator<<(v13, is_server_modifier);
  v15 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(v14, (const char (*)[21])" is_durability_zero:");
  common::milog::MiLogStream::operator<<(v15, is_durability_zero);
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v);
  if ( !*(_DWORD *)(v3 + 80) || *(_DWORD *)(v3 + 80) > *(_DWORD *)(v3 + 32) )
  {
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 288));
    v16 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
            (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 288),
            "AbilityMetaModifierChange invalid modifier_id:");
    v17 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v16, *(_DWORD *)(v3 + 80));
    v18 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v17, ", ability_id:");
    v19 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v18, *(_DWORD *)(v3 + 64));
    v20 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v19, ", target_id:");
    v21 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v20, *(_DWORD *)(v3 + 48));
    v22 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v21, aEntity_0[0]);
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    creature = this->creature_;
    v24 = (unsigned __int64 *)creature;
    if ( *(_BYTE *)(((unsigned __int64)creature >> 3) + 0x7FFF8000) )
      v24 = (unsigned __int64 *)__asan_report_load8(this->creature_);
    v25 = *v24;
    if ( *(_BYTE *)((v25 >> 3) + 0x7FFF8000) )
      v25 = __asan_report_load8(v25);
    (*(void (__fastcall **)(common::milog::MiLogStream *, Creature *))v25)(&v281, creature);
    v26 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v22, (const std::string *)&v281);
    v27 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v26, ", owner:");
    AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11](&v, this);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v27, &v);
    std::string::~string(&v);
    std::string::~string(&v281);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
      &v,
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 288));
    AbilityComp::invokeFailNotify(this, entry, from_player, &v);
    std::string::~string(&v);
    common::milog::MiLogStream::create(
      &v281,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "metaHandlerModifierChange",
      5008);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
      &v,
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 288));
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v281, &v);
    std::string::~string(&v);
    common::milog::MiLogStream::~MiLogStream(&v281);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 288));
    if ( *(_DWORD *)(v3 + 80) > *(_DWORD *)(v3 + 32) )
    {
      common::milog::MiLogStream::create(
        &v281,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/ability/ability_comp.cpp",
        "metaHandlerModifierChange",
        5011);
      v28 = common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
              &v281,
              (const char (*)[47])"AbilityMetaModifierChange invalid modifier_id:");
      v29 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v28, (const unsigned int *)(v3 + 80));
      v30 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v29, (const char (*)[14])", ability_id:");
      v31 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v30, (const unsigned int *)(v3 + 64));
      v32 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v31, (const char (*)[13])", target_id:");
      v33 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v32, (const unsigned int *)(v3 + 48));
      v34 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v33, ", entity:");
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      v35 = this->creature_;
      v36 = (unsigned __int64 *)v35;
      if ( *(_BYTE *)(((unsigned __int64)v35 >> 3) + 0x7FFF8000) )
        v36 = (unsigned __int64 *)__asan_report_load8(this->creature_);
      v37 = *v36;
      if ( *(_BYTE *)((v37 >> 3) + 0x7FFF8000) )
        v37 = __asan_report_load8(v37);
      (*(void (__fastcall **)(std::string *, Creature *))v37)(&v, v35);
      v38 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v34, &v);
      v39 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v38, (const char (*)[13])" over limit:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v39, (const unsigned int *)(v3 + 32));
      std::string::~string(&v);
      common::milog::MiLogStream::~MiLogStream(&v281);
    }
    goto LABEL_204;
  }
  modifier_index = *(_DWORD *)(v3 + 80) - 1;
  if ( !is_server_modifier )
  {
LABEL_66:
    modifier_vec = AbilityComp::getAppliedModifierVec(this, is_server_modifier);
    if ( proto::AbilityMetaModifierChange::action((const proto::AbilityMetaModifierChange *const)(v3 + 320)) )
    {
      if ( proto::AbilityMetaModifierChange::action((const proto::AbilityMetaModifierChange *const)(v3 + 320)) == REMOVED )
      {
        AbilityComp::findAppliedModifier((AbilityComp *const)(v3 + 256), this, *(_DWORD *)(v3 + 80), is_server_modifier);
        if ( std::operator==<ActorModifier>((const std::shared_ptr<ActorModifier> *)(v3 + 256), 0LL) )
        {
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 288));
          v233 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                   (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 288),
                   "AbilityMetaModifierChange get applied modifier fails, modifier_id:");
          v234 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v233, *(_DWORD *)(v3 + 80));
          v235 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v234, ", ability_id:");
          v236 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v235, *(_DWORD *)(v3 + 64));
          v237 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v236, aEntity_0[0]);
          if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->creature_);
          v238 = this->creature_;
          v239 = (unsigned __int64 *)v238;
          if ( *(_BYTE *)(((unsigned __int64)v238 >> 3) + 0x7FFF8000) )
            v239 = (unsigned __int64 *)__asan_report_load8(this->creature_);
          v240 = *v239;
          if ( *(_BYTE *)((v240 >> 3) + 0x7FFF8000) )
            v240 = __asan_report_load8(v240);
          (*(void (__fastcall **)(common::milog::MiLogStream *, Creature *))v240)(&v281, v238);
          v241 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                   v237,
                   (const std::string *)&v281);
          v242 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v241, ", owner:");
          AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11](&v, this);
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v242, &v);
          std::string::~string(&v);
          std::string::~string(&v281);
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
            &v,
            (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 288));
          AbilityComp::invokeFailNotify(this, entry, from_player, &v);
          std::string::~string(&v);
          common::milog::MiLogStream::create(
            &v281,
            &common::milog::MiLogDefault::default_log_obj_,
            0x13u,
            "./src/ability/ability_comp.cpp",
            "metaHandlerModifierChange",
            5199);
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
            &v,
            (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 288));
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v281, &v);
          std::string::~string(&v);
          common::milog::MiLogStream::~MiLogStream(&v281);
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 288));
        }
        else
        {
          std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 256));
          ActorModifier::getParentAbility((const ActorModifier *const)(v3 + 288));
          if ( std::operator!=<ActorAbility>((const std::shared_ptr<ActorAbility> *)(v3 + 288), 0LL) )
          {
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)&v,
              &common::milog::MiLogDefault::default_log_obj_,
              0x14u,
              "./src/ability/ability_comp.cpp",
              "metaHandlerModifierChange",
              5205);
            Uid = Player::getUid(from_player);
            if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
              __asan_report_load8(&this->creature_);
            EntityId = Entity::getEntityId((const Entity *const)this->creature_);
            v260 = *(_DWORD *)(v3 + 80);
            v245 = std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 256));
            v246 = ActorModifier::getName[abi:cxx11](v245);
            indexc = (const char *)std::string::c_str(v246);
            v247 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 288));
            v248 = ActorAbility::getName[abi:cxx11](v247);
            v253 = (const char *)std::string::c_str(v248);
            v249 = AbilityComp::isInMpMode(this);
            common::milog::MiLogStream::operator()(
              (common::milog::MiLogStream *const)&v,
              "|%u|RemoveModifier|%s|%s|%u|%u|%u|%s",
              v249,
              v253,
              indexc,
              v260,
              EntityId,
              Uid,
              byte_24FD2920);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v);
          }
          AbilityComp::removeModifierOnIndex(this, modifier_index, is_server_modifier);
          std::shared_ptr<ActorAbility>::~shared_ptr((std::shared_ptr<ActorAbility> *const)(v3 + 288));
        }
        std::shared_ptr<ActorModifier>::~shared_ptr((std::shared_ptr<ActorModifier> *const)(v3 + 256));
      }
      goto LABEL_204;
    }
    *(_QWORD *)(v3 + 128) = 0LL;
    *(_QWORD *)(v3 + 136) = 0LL;
    if ( *(_DWORD *)(v3 + 48) )
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      Entity::findEntityInSameScene<Creature>((const Entity *const)(v3 + 224), (uint32_t)this->creature_);
      if ( !std::operator!=<Creature>((const std::shared_ptr<Creature> *)(v3 + 224), 0LL) )
        goto LABEL_89;
      v77 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
      target_ability_comp = Creature::getAbilityComp(v77);
      Player::getSceneComp(from_player);
      PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v3 + 256));
      v78 = 0;
      v79 = 0;
      if ( !AbilityComp::getIsInitFinish(target_ability_comp) )
      {
        std::shared_ptr<Scene>::shared_ptr(
          (std::shared_ptr<Scene> *const)(v3 + 288),
          (const std::shared_ptr<Scene> *)(v3 + 256));
        v78 = 1;
        if ( AbilityComp::init(target_ability_comp, (ScenePtr *)(v3 + 288)) )
          v79 = 1;
      }
      if ( v78 )
        std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 288));
      if ( v79 )
      {
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 288));
        v80 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 288),
                "target_ability_comp init fails, target_id:");
        v81 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v80, *(_DWORD *)(v3 + 48));
        v82 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v81, aEntity_0[0]);
        if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->creature_);
        v83 = this->creature_;
        v84 = (unsigned __int64 *)v83;
        if ( *(_BYTE *)(((unsigned __int64)v83 >> 3) + 0x7FFF8000) )
          v84 = (unsigned __int64 *)__asan_report_load8(this->creature_);
        v85 = *v84;
        if ( *(_BYTE *)((v85 >> 3) + 0x7FFF8000) )
          v85 = __asan_report_load8(v85);
        (*(void (__fastcall **)(common::milog::MiLogStream *, Creature *))v85)(&v281, v83);
        v86 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v82, (const std::string *)&v281);
        v87 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v86, ", owner:");
        AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11](&v, this);
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v87, &v);
        std::string::~string(&v);
        std::string::~string(&v281);
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
          &v,
          (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 288));
        AbilityComp::invokeFailNotify(this, entry, from_player, &v);
        std::string::~string(&v);
        common::milog::MiLogStream::create(
          &v281,
          &common::milog::MiLogDefault::default_log_obj_,
          0x13u,
          "./src/ability/ability_comp.cpp",
          "metaHandlerModifierChange",
          5071);
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
          &v,
          (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 288));
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v281, &v);
        std::string::~string(&v);
        common::milog::MiLogStream::~MiLogStream(&v281);
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 288));
        v88 = 0;
      }
      else
      {
        AbilityComp::findAppliedAbility((AbilityComp *const)&v279, (__int64)target_ability_comp, *(_DWORD *)(v3 + 64));
        std::shared_ptr<ActorAbility>::operator=((std::shared_ptr<ActorAbility> *const)(v3 + 128), &v279);
        std::shared_ptr<ActorAbility>::~shared_ptr(&v279);
        v88 = 1;
      }
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 256));
      if ( v88 == 1 )
LABEL_89:
        v89 = 1;
      else
        v89 = 0;
      std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 224));
      if ( v89 != 1 )
        goto LABEL_188;
    }
    else
    {
      AbilityComp::findAppliedAbility((AbilityComp *const)&__r, (__int64)this, *(_DWORD *)(v3 + 64));
      std::shared_ptr<ActorAbility>::operator=((std::shared_ptr<ActorAbility> *const)(v3 + 128), &__r);
      std::shared_ptr<ActorAbility>::~shared_ptr(&__r);
    }
    *(_QWORD *)(v3 + 160) = 0LL;
    *(_QWORD *)(v3 + 168) = 0LL;
    if ( std::operator!=<ActorAbility>((const std::shared_ptr<ActorAbility> *)(v3 + 128), 0LL) )
    {
      std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
      ActorAbility::getConfigImpl((const ActorAbility *const)(v3 + 288));
      std::shared_ptr<ConfigAbilityImpl>::operator=(
        (std::shared_ptr<ConfigAbilityImpl> *const)(v3 + 160),
        (std::shared_ptr<ConfigAbilityImpl> *)(v3 + 288));
      std::shared_ptr<ConfigAbilityImpl>::~shared_ptr((std::shared_ptr<ConfigAbilityImpl> *const)(v3 + 288));
    }
    else
    {
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)(v3 + 224));
      v90 = (unsigned int)std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224))
          + 93080;
      v91 = proto::AbilityMetaModifierChange::parent_ability_override((const proto::AbilityMetaModifierChange *const)(v3 + 320));
      proto::AbilityString::hash(v91);
      v92 = proto::AbilityMetaModifierChange::parent_ability_name((const proto::AbilityMetaModifierChange *const)(v3 + 320));
      v93 = proto::AbilityString::hash(v92);
      JsonConfigMgr::findAbilityConfig((const JsonConfigMgr *const)(v3 + 256), v90, v93);
      std::dynamic_pointer_cast<ConfigAbilityImpl,data::ConfigAbility>((const std::shared_ptr<data::ConfigAbility> *)(v3 + 288));
      std::shared_ptr<ConfigAbilityImpl>::operator=(
        (std::shared_ptr<ConfigAbilityImpl> *const)(v3 + 160),
        (std::shared_ptr<ConfigAbilityImpl> *)(v3 + 288));
      std::shared_ptr<ConfigAbilityImpl>::~shared_ptr((std::shared_ptr<ConfigAbilityImpl> *const)(v3 + 288));
      std::shared_ptr<data::ConfigAbility>::~shared_ptr((std::shared_ptr<data::ConfigAbility> *const)(v3 + 256));
      std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 224));
    }
    if ( std::operator==<ConfigAbilityImpl>((const std::shared_ptr<ConfigAbilityImpl> *)(v3 + 160), 0LL) )
    {
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 288));
      v94 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
              (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 288),
              "AbilityMetaModifierChange can't find ability config, target_id:");
      v95 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v94, *(_DWORD *)(v3 + 48));
      v96 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v95, aAbilityId_0[0]);
      v97 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v96, *(_DWORD *)(v3 + 64));
      v98 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v97, aModifierId_0[0]);
      v99 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v98, *(_DWORD *)(v3 + 80));
      v100 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v99, aEntity_0[0]);
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      v101 = this->creature_;
      v102 = (unsigned __int64 *)v101;
      if ( *(_BYTE *)(((unsigned __int64)v101 >> 3) + 0x7FFF8000) )
        v102 = (unsigned __int64 *)__asan_report_load8(this->creature_);
      v103 = *v102;
      if ( *(_BYTE *)((v103 >> 3) + 0x7FFF8000) )
        v103 = __asan_report_load8(v103);
      (*(void (__fastcall **)(common::milog::MiLogStream *, Creature *))v103)(&v281, v101);
      v104 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v100, (const std::string *)&v281);
      v105 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v104, ", parent_ability_hash:");
      v106 = proto::AbilityMetaModifierChange::parent_ability_name((const proto::AbilityMetaModifierChange *const)(v3 + 320));
      v107 = proto::AbilityString::hash(v106);
      v108 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v105, v107);
      v109 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v108, ", parent_ability_name:");
      v110 = proto::AbilityMetaModifierChange::parent_ability_name((const proto::AbilityMetaModifierChange *const)(v3 + 320));
      v111 = proto::AbilityString::str[abi:cxx11](v110);
      v112 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v109, v111);
      v113 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v112, ", owner:");
      AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11](&v, this);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v113, &v);
      std::string::~string(&v);
      std::string::~string(&v281);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        &v,
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 288));
      AbilityComp::invokeFailNotify(this, entry, from_player, &v);
      std::string::~string(&v);
      common::milog::MiLogStream::create(
        &v281,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "metaHandlerModifierChange",
        5096);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        &v,
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 288));
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v281, &v);
      std::string::~string(&v);
      common::milog::MiLogStream::~MiLogStream(&v281);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 288));
    }
    else
    {
      modifier_local_id = proto::AbilityMetaModifierChange::modifier_local_id((const proto::AbilityMetaModifierChange *const)(v3 + 320));
      v114 = std::__shared_ptr_access<ConfigAbilityImpl,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ConfigAbilityImpl,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
      if ( modifier_local_id < std::vector<std::shared_ptr<data::ConfigAbilityModifier>>::size(&v114->modifier_vec) )
      {
        v127 = std::__shared_ptr_access<ConfigAbilityImpl,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ConfigAbilityImpl,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
        v128 = std::vector<std::shared_ptr<data::ConfigAbilityModifier>>::operator[](
                 &v127->modifier_vec,
                 modifier_local_id);
        std::shared_ptr<data::ConfigAbilityModifier>::shared_ptr(
          (std::shared_ptr<data::ConfigAbilityModifier> *const)(v3 + 192),
          v128);
        if ( std::operator==<data::ConfigAbilityModifier>(
               (const std::shared_ptr<data::ConfigAbilityModifier> *)(v3 + 192),
               0LL) )
        {
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 288));
          v129 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                   (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 288),
                   "AbilityMetaModifierChange modifier is null, modifier local_id:");
          v130 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v129, modifier_local_id);
          v131 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v130, aModifierId_0[0]);
          v132 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v131, *(_DWORD *)(v3 + 80));
          v133 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v132, ", ability_id:");
          v134 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v133, *(_DWORD *)(v3 + 64));
          v135 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v134, aEntity_0[0]);
          if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->creature_);
          v136 = this->creature_;
          v137 = (unsigned __int64 *)v136;
          if ( *(_BYTE *)(((unsigned __int64)v136 >> 3) + 0x7FFF8000) )
            v137 = (unsigned __int64 *)__asan_report_load8(this->creature_);
          v138 = *v137;
          if ( *(_BYTE *)((v138 >> 3) + 0x7FFF8000) )
            v138 = __asan_report_load8(v138);
          (*(void (__fastcall **)(common::milog::MiLogStream *, Creature *))v138)(&v281, v136);
          v139 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                   v135,
                   (const std::string *)&v281);
          v140 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v139, ", owner:");
          AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11](&v, this);
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v140, &v);
          std::string::~string(&v);
          std::string::~string(&v281);
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
            &v,
            (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 288));
          AbilityComp::invokeFailNotify(this, entry, from_player, &v);
          std::string::~string(&v);
          common::milog::MiLogStream::create(
            &v281,
            &common::milog::MiLogDefault::default_log_obj_,
            0x13u,
            "./src/ability/ability_comp.cpp",
            "metaHandlerModifierChange",
            5108);
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
            &v,
            (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 288));
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v281, &v);
          std::string::~string(&v);
          common::milog::MiLogStream::~MiLogStream(&v281);
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 288));
        }
        else
        {
          if ( modifier_index < std::vector<std::shared_ptr<ActorModifier>>::size(modifier_vec) )
          {
            v141 = std::vector<std::shared_ptr<ActorModifier>>::operator[](modifier_vec, modifier_index);
            std::shared_ptr<ActorModifier>::shared_ptr((std::shared_ptr<ActorModifier> *const)(v3 + 224), v141);
            if ( std::operator!=<ActorModifier>((const std::shared_ptr<ActorModifier> *)(v3 + 224), 0LL) )
            {
              common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 256));
              v142 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                       (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 256),
                       "[MODIFIER_REPLACE] creature_:");
              if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
                __asan_report_load8(&this->creature_);
              v143 = this->creature_;
              v144 = (unsigned __int64 *)v143;
              if ( *(_BYTE *)(((unsigned __int64)v143 >> 3) + 0x7FFF8000) )
                v144 = (unsigned __int64 *)__asan_report_load8(this->creature_);
              v145 = *v144;
              if ( *(_BYTE *)((v145 >> 3) + 0x7FFF8000) )
                v145 = __asan_report_load8(v145);
              (*(void (__fastcall **)(common::milog::MiLogStream *, Creature *))v145)(&v281, v143);
              v146 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                       v142,
                       (const std::string *)&v281);
              v147 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v146, " modifier_index:");
              v148 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v147, modifier_index);
              v149 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v148, " in_position:");
              v150 = (unsigned __int64)std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
              if ( *(_BYTE *)((v150 >> 3) + 0x7FFF8000) )
                v150 = __asan_report_load8(v150);
              v151 = *(_QWORD *)v150 + 8LL;
              if ( *(_BYTE *)((v151 >> 3) + 0x7FFF8000) )
                v150 = __asan_report_load8(*(_QWORD *)v150 + 8LL);
              (*(void (__fastcall **)(std::string *, unsigned __int64))v151)(&v, v150);
              common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v149, &v);
              std::string::~string(&v);
              std::string::~string(&v281);
              if ( std::operator!=<ActorAbility>((const std::shared_ptr<ActorAbility> *)(v3 + 128), 0LL) )
              {
                v152 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                         (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 256),
                         " ability:");
                v153 = (unsigned __int64)std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
                if ( *(_BYTE *)((v153 >> 3) + 0x7FFF8000) )
                  v153 = __asan_report_load8(v153);
                v154 = *(_QWORD *)v153 + 8LL;
                if ( *(_BYTE *)((v154 >> 3) + 0x7FFF8000) )
                  v153 = __asan_report_load8(*(_QWORD *)v153 + 8LL);
                (*(void (__fastcall **)(std::string *, unsigned __int64))v154)(&v, v153);
                v155 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v152, &v);
                v156 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                         v155,
                         " modifier_name:");
                v157 = std::__shared_ptr_access<data::ConfigAbilityModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigAbilityModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
                common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v156, &v157->modifier_name);
                std::string::~string(&v);
              }
              else if ( std::operator!=<ConfigAbilityImpl>((const std::shared_ptr<ConfigAbilityImpl> *)(v3 + 160), 0LL) )
              {
                v158 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                         (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 256),
                         " ability:");
                v159 = std::__shared_ptr_access<ConfigAbilityImpl,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ConfigAbilityImpl,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
                v160 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                         v158,
                         &v159->ability_name);
                v161 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                         v160,
                         " modifier_name:");
                v162 = std::__shared_ptr_access<data::ConfigAbilityModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigAbilityModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
                common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v161, &v162->modifier_name);
              }
              common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
                &v,
                (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 256));
              Player::notifyGMServerLog(from_player, SERVER_LOG_ABILITY, LOG_LEVEL_INFO_0, &v);
              std::string::~string(&v);
              if ( is_server_modifier
                && (v163 = proto::AbilityInvokeEntryHead::server_buff_uid(head),
                    v164 = std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224)),
                    v163 != ActorModifier::getSbuffUid(v164)) )
              {
                v166 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                         (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 256),
                         " new_modifier_server_buff_uid: ");
                v167 = proto::AbilityInvokeEntryHead::server_buff_uid(head);
                v168 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v166, v167);
                v169 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                         v168,
                         " ori_modifier_server_buff_uid: ");
                v170 = std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
                SbuffUid = ActorModifier::getSbuffUid(v170);
                common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v169, SbuffUid);
                common::milog::MiLogStream::create(
                  &v281,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/ability/ability_comp.cpp",
                  "metaHandlerModifierChange",
                  5135);
              }
              else
              {
                common::milog::MiLogStream::create(
                  &v281,
                  &common::milog::MiLogDefault::default_log_obj_,
                  1u,
                  "./src/ability/ability_comp.cpp",
                  "metaHandlerModifierChange",
                  5139);
              }
              common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
                &v,
                (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 256));
              common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v281, &v);
              std::string::~string(&v);
              common::milog::MiLogStream::~MiLogStream(&v281);
              std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
              ActorModifier::getParentConfig((const ActorModifier *const)(v3 + 288));
              if ( std::operator!=<ConfigAbilityImpl>((const std::shared_ptr<ConfigAbilityImpl> *)(v3 + 288), 0LL) )
              {
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)&v,
                  &common::milog::MiLogDefault::default_log_obj_,
                  0x14u,
                  "./src/ability/ability_comp.cpp",
                  "metaHandlerModifierChange",
                  5144);
                v172 = Player::getUid(from_player);
                if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
                  __asan_report_load8(&this->creature_);
                v173 = Entity::getEntityId((const Entity *const)this->creature_);
                v258 = *(_DWORD *)(v3 + 80);
                v174 = std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
                v175 = ActorModifier::getName[abi:cxx11](v174);
                indexa = (const char *)std::string::c_str(v175);
                v176 = std::__shared_ptr_access<ConfigAbilityImpl,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ConfigAbilityImpl,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 288));
                v251 = (const char *)std::string::c_str(&v176->ability_name);
                v177 = AbilityComp::isInMpMode(this);
                common::milog::MiLogStream::operator()(
                  (common::milog::MiLogStream *const)&v,
                  "|%u|RemoveModifierReplace|%s|%s|%u|%u|%u|%s",
                  v177,
                  v251,
                  indexa,
                  v258,
                  v173,
                  v172,
                  byte_24FD2920);
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v);
              }
              AbilityComp::removeModifierOnIndex(this, modifier_index, is_server_modifier);
              std::shared_ptr<ConfigAbilityImpl>::~shared_ptr((std::shared_ptr<ConfigAbilityImpl> *const)(v3 + 288));
              common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 256));
            }
            std::shared_ptr<ActorModifier>::~shared_ptr((std::shared_ptr<ActorModifier> *const)(v3 + 224));
          }
          v178 = proto::AbilityMetaModifierChange::apply_entity_id((const proto::AbilityMetaModifierChange *const)(v3 + 320));
          indexb = std::__shared_ptr_access<data::ConfigAbilityModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::ConfigAbilityModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
          std::shared_ptr<ConfigAbilityImpl>::shared_ptr(
            (std::shared_ptr<ConfigAbilityImpl> *const)(v3 + 288),
            (const std::shared_ptr<ConfigAbilityImpl> *)(v3 + 160));
          std::shared_ptr<ActorAbility>::shared_ptr(
            (std::shared_ptr<ActorAbility> *const)(v3 + 256),
            (const std::shared_ptr<ActorAbility> *)(v3 + 128));
          AbilityComp::addModifierOnIndex(
            (AbilityComp *const)(v3 + 224),
            this,
            (const std::shared_ptr<ActorAbility> *)(v3 + 256),
            (const std::shared_ptr<ConfigAbilityImpl> *)(v3 + 288),
            indexb,
            modifier_index,
            v178,
            is_server_modifier,
            is_durability_zero);
          std::shared_ptr<ActorAbility>::~shared_ptr((std::shared_ptr<ActorAbility> *const)(v3 + 256));
          std::shared_ptr<ConfigAbilityImpl>::~shared_ptr((std::shared_ptr<ConfigAbilityImpl> *const)(v3 + 288));
          if ( std::operator==<ActorModifier>((const std::shared_ptr<ActorModifier> *)(v3 + 224), 0LL) )
          {
            common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 288));
            v179 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                     (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 288),
                     "AbilityMetaModifierChange add modifier fails, modifier local_id:");
            v180 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v179, modifier_local_id);
            v181 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v180, aModifierId_0[0]);
            v182 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v181, *(_DWORD *)(v3 + 80));
            v183 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v182, ", ability_id:");
            v184 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v183, *(_DWORD *)(v3 + 64));
            v185 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v184, aEntity_0[0]);
            if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
              __asan_report_load8(&this->creature_);
            v186 = this->creature_;
            v187 = (unsigned __int64 *)v186;
            if ( *(_BYTE *)(((unsigned __int64)v186 >> 3) + 0x7FFF8000) )
              v187 = (unsigned __int64 *)__asan_report_load8(this->creature_);
            v188 = *v187;
            if ( *(_BYTE *)((v188 >> 3) + 0x7FFF8000) )
              v188 = __asan_report_load8(v188);
            (*(void (__fastcall **)(common::milog::MiLogStream *, Creature *))v188)(&v281, v186);
            v189 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                     v185,
                     (const std::string *)&v281);
            v190 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v189, ", owner:");
            AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11](&v, this);
            common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v190, &v);
            std::string::~string(&v);
            std::string::~string(&v281);
            common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
              &v,
              (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 288));
            AbilityComp::invokeFailNotify(this, entry, from_player, &v);
            std::string::~string(&v);
            common::milog::MiLogStream::create(
              &v281,
              &common::milog::MiLogDefault::default_log_obj_,
              0x13u,
              "./src/ability/ability_comp.cpp",
              "metaHandlerModifierChange",
              5152);
            common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
              &v,
              (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 288));
            common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v281, &v);
            std::string::~string(&v);
            common::milog::MiLogStream::~MiLogStream(&v281);
            common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 288));
          }
          else
          {
            v191 = proto::AbilityMetaModifierChange::server_buff_uid((const proto::AbilityMetaModifierChange *const)(v3 + 320));
            if ( v191 != proto::AbilityInvokeEntryHead::server_buff_uid(head) )
            {
              common::milog::MiLogStream::create(
                &v281,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/ability/ability_comp.cpp",
                "metaHandlerModifierChange",
                5157);
              v192 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
                       &v281,
                       (const char (*)[41])"buff_uid not consistent.server_buff_uid:");
              val = proto::AbilityMetaModifierChange::server_buff_uid((const proto::AbilityMetaModifierChange *const)(v3 + 320));
              v193 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v192, &val);
              v194 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v193, (const char (*)[2])" ");
              v267 = proto::AbilityInvokeEntryHead::server_buff_uid(head);
              v195 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v194, &v267);
              v196 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v195, ", modifier_id:");
              v197 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                       v196,
                       (const unsigned int *)(v3 + 80));
              v198 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                       v197,
                       (const char (*)[14])", ability_id:");
              v199 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                       v198,
                       (const unsigned int *)(v3 + 64));
              v200 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v199, ", entity:");
              if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
                __asan_report_load8(&this->creature_);
              v201 = this->creature_;
              v202 = (unsigned __int64 *)v201;
              if ( *(_BYTE *)(((unsigned __int64)v201 >> 3) + 0x7FFF8000) )
                v202 = (unsigned __int64 *)__asan_report_load8(this->creature_);
              v203 = *v202;
              if ( *(_BYTE *)((v203 >> 3) + 0x7FFF8000) )
                v203 = __asan_report_load8(v203);
              (*(void (__fastcall **)(std::string *, Creature *))v203)(&v, v201);
              common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v200, &v);
              std::string::~string(&v);
              common::milog::MiLogStream::~MiLogStream(&v281);
            }
            if ( proto::AbilityInvokeEntryHead::server_buff_uid(head) )
            {
              if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
                __asan_report_load8(&this->creature_);
              toPtr<Avatar,Creature>((Creature *)(v3 + 288));
              if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v3 + 288), 0LL) )
              {
                if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
                  __asan_report_load8(&this->creature_);
                CreatureBuffComp = Creature::getCreatureBuffComp(this->creature_);
                if ( CreatureBuffComp::isEnable(CreatureBuffComp) )
                {
                  common::milog::MiLogStream::create(
                    &v281,
                    &common::milog::MiLogDefault::default_log_obj_,
                    1u,
                    "./src/ability/ability_comp.cpp",
                    "metaHandlerModifierChange",
                    5168);
                  v205 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                           &v281,
                           (const char (*)[22])"meta_modifier_change:");
                  google::protobuf::Message::ShortDebugString[abi:cxx11](&v, (google::protobuf::Message *)(v3 + 320));
                  v206 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v205, &v);
                  v207 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                           v206,
                           (const char (*)[11])" creature:");
                  if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
                    __asan_report_load8(&this->creature_);
                }
                else
                {
                  common::milog::MiLogStream::create(
                    &v281,
                    &common::milog::MiLogDefault::default_log_obj_,
                    4u,
                    "./src/ability/ability_comp.cpp",
                    "metaHandlerModifierChange",
                    5172);
                  v210 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                           &v281,
                           (const char (*)[22])"meta_modifier_change:");
                  google::protobuf::Message::ShortDebugString[abi:cxx11](&v, (google::protobuf::Message *)(v3 + 320));
                  v211 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v210, &v);
                  v207 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                           v211,
                           (const char (*)[11])" creature:");
                  if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
                    __asan_report_load8(&this->creature_);
                }
                v208 = common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v207, this->creature_);
                v209 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(
                         v208,
                         (const char (*)[9])" player:");
                operator<<(v209, from_player);
                std::string::~string(&v);
                common::milog::MiLogStream::~MiLogStream(&v281);
              }
              else
              {
                v212 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 288));
                BuffComp = Avatar::getBuffComp(v212);
                v214 = proto::AbilityInvokeEntryHead::server_buff_uid(head);
                BuffComp::tryRecordModifierAdded(BuffComp, v214);
              }
              std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 288));
            }
            proto_attached_modifier = proto::AbilityMetaModifierChange::attached_instanced_modifier((const proto::AbilityMetaModifierChange *const)(v3 + 320));
            owner_entity_id = proto::AbilityAttachedModifier::owner_entity_id(proto_attached_modifier);
            attached_modifier_id = proto::AbilityAttachedModifier::instanced_modifier_id(proto_attached_modifier);
            is_attached_serverbuff_modifier = proto::AbilityAttachedModifier::is_serverbuff_modifier(proto_attached_modifier);
            v215 = std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
            ActorModifier::setAttachedModifierOwnerEntityId(v215, owner_entity_id);
            v216 = std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
            ActorModifier::setAttachedModifierId(v216, attached_modifier_id);
            v217 = std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
            ActorModifier::setIsAttachedServerBuffModifier(v217, is_attached_serverbuff_modifier);
            v218 = std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
            is_mute_remote = proto::AbilityMetaModifierChange::is_mute_remote((const proto::AbilityMetaModifierChange *const)(v3 + 320));
            ActorModifier::setIsMuteRemote(v218, is_mute_remote);
            v220 = std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
            is_attached_parent_ability = proto::AbilityMetaModifierChange::is_attached_parent_ability((const proto::AbilityMetaModifierChange *const)(v3 + 320));
            ActorModifier::setIsAttachedParentAbility(v220, is_attached_parent_ability);
            v222 = std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
            v223 = proto::AbilityInvokeEntryHead::server_buff_uid(head);
            ActorModifier::setSbuffUid(v222, v223);
            v224 = std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
            v225 = proto::AbilityAttachedModifier::attach_name_hash(proto_attached_modifier);
            ActorModifier::setAttachNameHash(v224, v225);
            std::shared_ptr<ActorAbility>::shared_ptr(
              (std::shared_ptr<ActorAbility> *const)(v3 + 288),
              (const std::shared_ptr<ActorAbility> *)(v3 + 128));
            v226 = std::__shared_ptr_access<data::ConfigAbilityModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<data::ConfigAbilityModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
            v227 = proto::AbilityMetaModifierChange::apply_entity_id((const proto::AbilityMetaModifierChange *const)(v3 + 320));
            AbilityComp::recordElementReactionModifierSource(this, v227, v226, (ActorAbilityPtr *)(v3 + 288));
            std::shared_ptr<ActorAbility>::~shared_ptr((std::shared_ptr<ActorAbility> *const)(v3 + 288));
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)&v,
              &common::milog::MiLogDefault::default_log_obj_,
              0x14u,
              "./src/ability/ability_comp.cpp",
              "metaHandlerModifierChange",
              5192);
            v259 = *(_DWORD *)(v3 + 80);
            index = proto::AbilityInvokeEntryHead::server_buff_uid(head);
            v228 = Player::getUid(from_player);
            if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
              __asan_report_load8(&this->creature_);
            v229 = Entity::getEntityId((const Entity *const)this->creature_);
            v230 = std::__shared_ptr_access<data::ConfigAbilityModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigAbilityModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 192));
            v252 = (const char *)std::string::c_str(&v230->modifier_name);
            v231 = std::__shared_ptr_access<ConfigAbilityImpl,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ConfigAbilityImpl,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
            v250 = (const char *)std::string::c_str(&v231->ability_name);
            v232 = AbilityComp::isInMpMode(this);
            common::milog::MiLogStream::operator()(
              (common::milog::MiLogStream *const)&v,
              "|%u|AddModifier|%s|%s|%u|%u|%u|%u|%u",
              v232,
              v250,
              v252,
              modifier_local_id,
              v229,
              v228,
              index,
              v259);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v);
          }
          std::shared_ptr<ActorModifier>::~shared_ptr((std::shared_ptr<ActorModifier> *const)(v3 + 224));
        }
        std::shared_ptr<data::ConfigAbilityModifier>::~shared_ptr((std::shared_ptr<data::ConfigAbilityModifier> *const)(v3 + 192));
      }
      else
      {
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 288));
        v115 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                 (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 288),
                 "AbilityMetaModifierChange invalid modifier local_id:");
        v116 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v115, modifier_local_id);
        v117 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v116, ", ability_id:");
        v118 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v117, *(_DWORD *)(v3 + 64));
        v119 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v118, aModifierId_0[0]);
        v120 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v119, *(_DWORD *)(v3 + 80));
        v121 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v120, aEntity_0[0]);
        if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->creature_);
        v122 = this->creature_;
        v123 = (unsigned __int64 *)v122;
        if ( *(_BYTE *)(((unsigned __int64)v122 >> 3) + 0x7FFF8000) )
          v123 = (unsigned __int64 *)__asan_report_load8(this->creature_);
        v124 = *v123;
        if ( *(_BYTE *)((v124 >> 3) + 0x7FFF8000) )
          v124 = __asan_report_load8(v124);
        (*(void (__fastcall **)(common::milog::MiLogStream *, Creature *))v124)(&v281, v122);
        v125 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                 v121,
                 (const std::string *)&v281);
        v126 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v125, ", owner:");
        AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11](&v, this);
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v126, &v);
        std::string::~string(&v);
        std::string::~string(&v281);
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
          &v,
          (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 288));
        AbilityComp::invokeFailNotify(this, entry, from_player, &v);
        std::string::~string(&v);
        common::milog::MiLogStream::create(
          &v281,
          &common::milog::MiLogDefault::default_log_obj_,
          0x13u,
          "./src/ability/ability_comp.cpp",
          "metaHandlerModifierChange",
          5102);
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
          &v,
          (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 288));
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v281, &v);
        std::string::~string(&v);
        common::milog::MiLogStream::~MiLogStream(&v281);
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 288));
      }
    }
    std::shared_ptr<ConfigAbilityImpl>::~shared_ptr((std::shared_ptr<ConfigAbilityImpl> *const)(v3 + 160));
LABEL_188:
    std::shared_ptr<ActorAbility>::~shared_ptr((std::shared_ptr<ActorAbility> *const)(v3 + 128));
    goto LABEL_204;
  }
  if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->creature_);
  toPtr<Avatar,Creature>((Creature *)(v3 + 224));
  server_instanced_modifier_id = 0;
  if ( !std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v3 + 224), 0LL) )
  {
    v64 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
    v65 = Avatar::getBuffComp(v64);
    v66 = proto::AbilityInvokeEntryHead::server_buff_uid(head);
    server_instanced_modifier_id = BuffComp::getInstancedModifierIdByBuffUid(v65, v66);
LABEL_55:
    if ( !server_instanced_modifier_id || server_instanced_modifier_id == *(_DWORD *)(v3 + 80) )
    {
      v55 = 1;
    }
    else
    {
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 288));
      v67 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
              (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 288),
              "AbilityMetaModifierChange invalid modifier_id: ");
      v68 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v67, *(_DWORD *)(v3 + 80));
      v69 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v68, ", server_modifier_id:");
      v70 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v69, server_instanced_modifier_id);
      v71 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v70, aEntity_0[0]);
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      v72 = this->creature_;
      v73 = (unsigned __int64 *)v72;
      if ( *(_BYTE *)(((unsigned __int64)v72 >> 3) + 0x7FFF8000) )
        v73 = (unsigned __int64 *)__asan_report_load8(this->creature_);
      v74 = *v73;
      if ( *(_BYTE *)((v74 >> 3) + 0x7FFF8000) )
        v74 = __asan_report_load8(v74);
      (*(void (__fastcall **)(common::milog::MiLogStream *, Creature *))v74)(&v281, v72);
      v75 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v71, (const std::string *)&v281);
      v76 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v75, ", owner:");
      AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11](&v, this);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v76, &v);
      std::string::~string(&v);
      std::string::~string(&v281);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        &v,
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 288));
      AbilityComp::invokeFailNotify(this, entry, from_player, &v);
      std::string::~string(&v);
      common::milog::MiLogStream::create(
        &v281,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "metaHandlerModifierChange",
        5050);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        &v,
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 288));
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v281, &v);
      std::string::~string(&v);
      common::milog::MiLogStream::~MiLogStream(&v281);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 288));
      v55 = 0;
    }
    goto LABEL_65;
  }
  if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->creature_);
  v40 = Creature::getCreatureBuffComp(this->creature_);
  if ( CreatureBuffComp::isEnable(v40) )
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    toPtr<Creature,Creature>((Creature *)(v3 + 256));
    if ( std::operator!=<Creature>((const std::shared_ptr<Creature> *)(v3 + 256), 0LL) )
    {
      v41 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 256));
      v42 = Creature::getCreatureBuffComp(v41);
      v43 = proto::AbilityInvokeEntryHead::server_buff_uid(head);
      server_instanced_modifier_id = CreatureBuffComp::getInstancedModifierIdByBuffUid(v42, v43);
      v44 = 1;
    }
    else
    {
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 288));
      v45 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
              (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 288),
              "AbilityMetaModifierChange invalid creature_ptr, modifier_id: ");
      v46 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v45, *(_DWORD *)(v3 + 80));
      v47 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v46, ", server_modifier_id:");
      v48 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v47, server_instanced_modifier_id);
      v49 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v48, aEntity_0[0]);
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      v50 = this->creature_;
      v51 = (unsigned __int64 *)v50;
      if ( *(_BYTE *)(((unsigned __int64)v50 >> 3) + 0x7FFF8000) )
        v51 = (unsigned __int64 *)__asan_report_load8(this->creature_);
      v52 = *v51;
      if ( *(_BYTE *)((v52 >> 3) + 0x7FFF8000) )
        v52 = __asan_report_load8(v52);
      (*(void (__fastcall **)(common::milog::MiLogStream *, Creature *))v52)(&v281, v50);
      v53 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v49, (const std::string *)&v281);
      v54 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v53, ", owner:");
      AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11](&v, this);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v54, &v);
      std::string::~string(&v);
      std::string::~string(&v281);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        &v,
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 288));
      AbilityComp::invokeFailNotify(this, entry, from_player, &v);
      std::string::~string(&v);
      common::milog::MiLogStream::create(
        &v281,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "metaHandlerModifierChange",
        5032);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        &v,
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 288));
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v281, &v);
      std::string::~string(&v);
      common::milog::MiLogStream::~MiLogStream(&v281);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 288));
      v44 = 0;
    }
    std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 256));
    if ( v44 != 1 )
    {
      v55 = 0;
      goto LABEL_65;
    }
    goto LABEL_55;
  }
  common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 288));
  v56 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
          (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 288),
          "AbilityMetaModifierChange not avatar ");
  google::protobuf::Message::ShortDebugString[abi:cxx11](&output, (google::protobuf::Message *)(v3 + 320));
  v57 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v56, &output);
  v58 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v57, " creature:");
  if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->creature_);
  v59 = this->creature_;
  v60 = (unsigned __int64 *)v59;
  if ( *(_BYTE *)(((unsigned __int64)v59 >> 3) + 0x7FFF8000) )
    v60 = (unsigned __int64 *)__asan_report_load8(this->creature_);
  v61 = *v60;
  if ( *(_BYTE *)((v61 >> 3) + 0x7FFF8000) )
    v61 = __asan_report_load8(v61);
  (*(void (__fastcall **)(common::milog::MiLogStream *, Creature *))v61)(&v281, v59);
  v62 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v58, (const std::string *)&v281);
  v63 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v62, ", owner:");
  AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11](&v, this);
  common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v63, &v);
  std::string::~string(&v);
  std::string::~string(&v281);
  std::string::~string(&output);
  common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
    &v,
    (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 288));
  AbilityComp::invokeFailNotify(this, entry, from_player, &v);
  std::string::~string(&v);
  common::milog::MiLogStream::create(
    &v281,
    &common::milog::MiLogDefault::default_log_obj_,
    0x13u,
    "./src/ability/ability_comp.cpp",
    "metaHandlerModifierChange",
    5038);
  common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
    &v,
    (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 288));
  common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v281, &v);
  std::string::~string(&v);
  common::milog::MiLogStream::~MiLogStream(&v281);
  common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 288));
  v55 = 0;
LABEL_65:
  std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 224));
  if ( v55 == 1 )
    goto LABEL_66;
LABEL_204:
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 96));
LABEL_205:
  proto::AbilityMetaModifierChange::~AbilityMetaModifierChange((proto::AbilityMetaModifierChange *const)(v3 + 320));
  if ( v283 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 5212: range 00000000136F4E44-00000000136F55ED
void __cdecl AbilityComp::metaHandleSpecialFloatArgument(
        AbilityComp *const this,
        const proto::AbilityInvokeEntry *entry,
        Player *from_player)
{
  __m128i v3; // xmm0
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v7; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v8; // r14
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v9; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v10; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v11; // r14
  Creature *creature; // rsi
  unsigned __int64 *v13; // rax
  unsigned __int64 v14; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v15; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v16; // r14
  common::milog::MiLogStream *v17; // r14
  ActorAbility *v18; // rax
  ActorAbility *v19; // rax
  ActorAbility *v20; // rax
  unsigned int val; // [rsp+24h] [rbp-12Ch] BYREF
  int32_t ability_id; // [rsp+28h] [rbp-128h]
  float value; // [rsp+2Ch] [rbp-124h]
  const proto::AbilityInvokeEntryHead *head; // [rsp+30h] [rbp-120h]
  const std::string *ability_data_str; // [rsp+38h] [rbp-118h]
  common::milog::MiLogStream v28; // [rsp+40h] [rbp-110h] BYREF
  std::string v; // [rsp+60h] [rbp-F0h] BYREF
  char v30[208]; // [rsp+80h] [rbp-D0h] BYREF

  v4 = (unsigned __int64)v30;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(160LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 32 16 16 ability_ptr:5222 64 16 7 os:5225 96 32 32 meta_special_float_argument:5215";
  *(_QWORD *)(v4 + 16) = AbilityComp::metaHandleSpecialFloatArgument;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -219021312;
  v6[536862722] = -219021312;
  v6[536862724] = -202116109;
  head = proto::AbilityInvokeEntry::head(entry);
  ability_data_str = proto::AbilityInvokeEntry::ability_data[abi:cxx11](entry);
  proto::AbilityMetaSpecialFloatArgument::AbilityMetaSpecialFloatArgument((proto::AbilityMetaSpecialFloatArgument *const)(v4 + 96));
  if ( (unsigned __int8)google::protobuf::MessageLite::ParseFromString(v4 + 96, ability_data_str) != 1 )
  {
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 64));
    v7 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
           (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 64),
           "AbilityMetaSpecialFloatArgument ParseFromString fails");
    v8 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v7, ", owner:");
    AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11](&v, this);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v8, &v);
    std::string::~string(&v);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
      &v,
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 64));
    AbilityComp::invokeFailNotify(this, entry, from_player, &v);
    std::string::~string(&v);
    common::milog::MiLogStream::create(
      &v28,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "metaHandleSpecialFloatArgument",
      5218);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
      &v,
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 64));
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v28, &v);
    std::string::~string(&v);
    common::milog::MiLogStream::~MiLogStream(&v28);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 64));
  }
  else
  {
    ability_id = proto::AbilityInvokeEntryHead::instanced_ability_id(head);
    AbilityComp::findAppliedAbility((AbilityComp *const)(v4 + 32), (__int64)this, ability_id);
    if ( std::operator==<ActorAbility>((const std::shared_ptr<ActorAbility> *)(v4 + 32), 0LL) )
    {
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 64));
      v9 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
             (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 64),
             "AbilityMetaSpecialFloatArgument can't find ability, ability_id:");
      v10 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v9, ability_id);
      v11 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v10, aEntity_0[0]);
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      creature = this->creature_;
      v13 = (unsigned __int64 *)creature;
      if ( *(_BYTE *)(((unsigned __int64)creature >> 3) + 0x7FFF8000) )
        v13 = (unsigned __int64 *)__asan_report_load8(this->creature_);
      v14 = *v13;
      if ( *(_BYTE *)((v14 >> 3) + 0x7FFF8000) )
        v14 = __asan_report_load8(v14);
      (*(void (__fastcall **)(common::milog::MiLogStream *, Creature *))v14)(&v28, creature);
      v15 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v11, (const std::string *)&v28);
      v16 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v15, ", owner:");
      AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11](&v, this);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v16, &v);
      std::string::~string(&v);
      std::string::~string(&v28);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        &v,
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 64));
      AbilityComp::invokeFailNotify(this, entry, from_player, &v);
      std::string::~string(&v);
      common::milog::MiLogStream::create(
        &v28,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "metaHandleSpecialFloatArgument",
        5225);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        &v,
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 64));
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v28, &v);
      std::string::~string(&v);
      common::milog::MiLogStream::~MiLogStream(&v28);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 64));
    }
    else if ( proto::AbilityMetaSpecialFloatArgument::is_on((const proto::AbilityMetaSpecialFloatArgument *const)(v4 + 96)) )
    {
      *(float *)v3.m128i_i32 = proto::AbilityMetaSpecialFloatArgument::argument_value((const proto::AbilityMetaSpecialFloatArgument *const)(v4 + 96));
      LODWORD(value) = _mm_cvtsi128_si32(v3);
      if ( !std::isfinite(value) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&v,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/ability/ability_comp.cpp",
          "metaHandleSpecialFloatArgument",
          5233);
        v17 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                (common::milog::MiLogStream *const)&v,
                (const char (*)[22])"client value nan uid:");
        val = Player::getUid(from_player);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, &val);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v);
      }
      else
      {
        v18 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
        ActorAbility::setArgumentSpecialValue(v18, value);
        v19 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
        ActorAbility::setArgumentReceived(v19, 1);
      }
    }
    else
    {
      v20 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
      ActorAbility::setArgumentReceived(v20, 0);
    }
    std::shared_ptr<ActorAbility>::~shared_ptr((std::shared_ptr<ActorAbility> *const)(v4 + 32));
  }
  proto::AbilityMetaSpecialFloatArgument::~AbilityMetaSpecialFloatArgument((proto::AbilityMetaSpecialFloatArgument *const)(v4 + 96));
  if ( v30 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 5246: range 00000000136F55EE-00000000136F64A4
void __cdecl AbilityComp::metaHandleOverrideParam(
        AbilityComp *const this,
        const proto::AbilityInvokeEntry *entry,
        Player *from_player)
{
  __m128i v3; // xmm0
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v7; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v8; // r14
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v9; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v10; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v11; // r14
  Creature *creature; // rsi
  unsigned __int64 *v13; // rax
  unsigned __int64 v14; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v15; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v16; // r14
  const proto::AbilityString *v17; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v18; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v19; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v20; // r14
  Creature *v21; // rsi
  unsigned __int64 *v22; // rax
  unsigned __int64 v23; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v24; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v25; // r14
  const proto::AbilityString *v26; // rax
  const std::string *v27; // r14
  const proto::AbilityString *v28; // rax
  google::protobuf::uint32 v29; // eax
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // r14
  ActorAbility *v33; // rax
  __int64 Uid; // r15
  __int64 EntityId; // r14
  ActorAbility *v36; // rax
  data::ConfigAbility *ConfigRef; // rax
  bool v38; // al
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v39; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v40; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v41; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v42; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v43; // r14
  __int64 v44; // [rsp+10h] [rbp-1C0h]
  __int64 v45; // [rsp+18h] [rbp-1B8h]
  unsigned int val; // [rsp+40h] [rbp-190h] BYREF
  uint32_t ability_id; // [rsp+44h] [rbp-18Ch]
  proto::AbilityScalarType value_type; // [rsp+48h] [rbp-188h]
  float float_value; // [rsp+4Ch] [rbp-184h]
  const proto::AbilityInvokeEntryHead *head; // [rsp+50h] [rbp-180h]
  const std::string *ability_data_str; // [rsp+58h] [rbp-178h]
  common::milog::MiLogStream v54; // [rsp+60h] [rbp-170h] BYREF
  std::string v; // [rsp+80h] [rbp-150h] BYREF
  char v56[304]; // [rsp+A0h] [rbp-130h] BYREF

  v4 = (unsigned __int64)v56;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(256LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 48 16 16 ability_ptr:5256 80 16 7 os:5283 112 32 8 key:5262 176 48 36 meta_ability_scalar_value_entry:5249";
  *(_QWORD *)(v4 + 16) = AbilityComp::metaHandleOverrideParam;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = 61937;
  v6[536862722] = 62194;
  v6[536862723] = 62194;
  v6[536862724] = -219021312;
  v6[536862725] = 62194;
  v6[536862727] = -202116109;
  head = proto::AbilityInvokeEntry::head(entry);
  ability_data_str = proto::AbilityInvokeEntry::ability_data[abi:cxx11](entry);
  proto::AbilityScalarValueEntry::AbilityScalarValueEntry((proto::AbilityScalarValueEntry *const)(v4 + 176));
  if ( (unsigned __int8)google::protobuf::MessageLite::ParseFromString(v4 + 176, ability_data_str) != 1 )
  {
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 80));
    v7 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
           (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 80),
           "AbilityScalarValueEntry ParseFromString fails");
    v8 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v7, ", owner:");
    AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11](&v, this);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v8, &v);
    std::string::~string(&v);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
      &v,
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 80));
    AbilityComp::invokeFailNotify(this, entry, from_player, &v);
    std::string::~string(&v);
    common::milog::MiLogStream::create(
      &v54,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "metaHandleOverrideParam",
      5252);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
      &v,
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 80));
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v54, &v);
    std::string::~string(&v);
    common::milog::MiLogStream::~MiLogStream(&v54);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 80));
  }
  else
  {
    ability_id = proto::AbilityInvokeEntryHead::instanced_ability_id(head);
    AbilityComp::findAppliedAbility((AbilityComp *const)(v4 + 48), (__int64)this, ability_id);
    if ( std::operator==<ActorAbility>((const std::shared_ptr<ActorAbility> *)(v4 + 48), 0LL) )
    {
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 80));
      v9 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
             (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 80),
             "AbilityScalarValueEntry can't find ability, ability_id:");
      v10 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v9, ability_id);
      v11 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v10, aEntity_0[0]);
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      creature = this->creature_;
      v13 = (unsigned __int64 *)creature;
      if ( *(_BYTE *)(((unsigned __int64)creature >> 3) + 0x7FFF8000) )
        v13 = (unsigned __int64 *)__asan_report_load8(this->creature_);
      v14 = *v13;
      if ( *(_BYTE *)((v14 >> 3) + 0x7FFF8000) )
        v14 = __asan_report_load8(v14);
      (*(void (__fastcall **)(common::milog::MiLogStream *, Creature *))v14)(&v54, creature);
      v15 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v11, (const std::string *)&v54);
      v16 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v15, ", owner:");
      AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11](&v, this);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v16, &v);
      std::string::~string(&v);
      std::string::~string(&v54);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        &v,
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 80));
      AbilityComp::invokeFailNotify(this, entry, from_player, &v);
      std::string::~string(&v);
      common::milog::MiLogStream::create(
        &v54,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "metaHandleOverrideParam",
        5259);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        &v,
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 80));
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v54, &v);
      std::string::~string(&v);
      common::milog::MiLogStream::~MiLogStream(&v54);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 80));
    }
    else
    {
      std::string::basic_string(v4 + 112);
      v17 = proto::AbilityScalarValueEntry::key((const proto::AbilityScalarValueEntry *const)(v4 + 176));
      if ( abilityStringToStdString(v17, (std::string *)(v4 + 112)) )
      {
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 80));
        v18 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 80),
                "abilityStringToStdString fails, ability_id:");
        v19 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v18, ability_id);
        v20 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v19, aEntity_0[0]);
        if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->creature_);
        v21 = this->creature_;
        v22 = (unsigned __int64 *)v21;
        if ( *(_BYTE *)(((unsigned __int64)v21 >> 3) + 0x7FFF8000) )
          v22 = (unsigned __int64 *)__asan_report_load8(this->creature_);
        v23 = *v22;
        if ( *(_BYTE *)((v23 >> 3) + 0x7FFF8000) )
          v23 = __asan_report_load8(v23);
        (*(void (__fastcall **)(common::milog::MiLogStream *, Creature *))v23)(&v54, v21);
        v24 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v20, (const std::string *)&v54);
        v25 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v24, ", owner:");
        AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11](&v, this);
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v25, &v);
        std::string::~string(&v);
        std::string::~string(&v54);
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
          &v,
          (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 80));
        AbilityComp::invokeFailNotify(this, entry, from_player, &v);
        std::string::~string(&v);
        common::milog::MiLogStream::create(
          &v54,
          &common::milog::MiLogDefault::default_log_obj_,
          0x13u,
          "./src/ability/ability_comp.cpp",
          "metaHandleOverrideParam",
          5265);
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
          &v,
          (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 80));
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v54, &v);
        std::string::~string(&v);
        common::milog::MiLogStream::~MiLogStream(&v54);
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 80));
        v26 = proto::AbilityScalarValueEntry::key((const proto::AbilityScalarValueEntry *const)(v4 + 176));
        v27 = proto::AbilityString::str[abi:cxx11](v26);
        v28 = proto::AbilityScalarValueEntry::key((const proto::AbilityScalarValueEntry *const)(v4 + 176));
        v29 = proto::AbilityString::hash(v28);
        AbilityComp::invokeNotRegisterNotifyGMServerLog(this, v29, v27, from_player);
      }
      else
      {
        value_type = proto::AbilityScalarValueEntry::value_type((const proto::AbilityScalarValueEntry *const)(v4 + 176));
        if ( value_type == ABILITY_SCALAR_TYPE_FLOAT )
        {
          *(float *)v3.m128i_i32 = proto::AbilityScalarValueEntry::float_value((const proto::AbilityScalarValueEntry *const)(v4 + 176));
          float_value = COERCE_FLOAT(_mm_cvtsi128_si32(v3));
          if ( !std::isfinite(float_value) )
          {
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)&v,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/ability/ability_comp.cpp",
              "metaHandleOverrideParam",
              5275);
            v30 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                    (common::milog::MiLogStream *const)&v,
                    (const char (*)[22])"client value nan key:");
            v31 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                    v30,
                    (const std::string *)(v4 + 112));
            v32 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v31, (const char (*)[6])" uid:");
            val = Player::getUid(from_player);
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v32, &val);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v);
          }
          else
          {
            v33 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 48));
            ActorAbility::setFloatParam(v33, (const std::string *)(v4 + 112), float_value);
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)&v,
              &common::milog::MiLogDefault::default_log_obj_,
              0x14u,
              "./src/ability/ability_comp.cpp",
              "metaHandleOverrideParam",
              5279);
            Uid = Player::getUid(from_player);
            if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
              __asan_report_load8(&this->creature_);
            EntityId = Entity::getEntityId((const Entity *const)this->creature_);
            v45 = std::string::c_str(v4 + 112);
            v36 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 48));
            ConfigRef = ActorAbility::getConfigRef(v36);
            v44 = std::string::c_str(&ConfigRef->ability_name);
            v38 = AbilityComp::isInMpMode(this);
            common::milog::MiLogStream::operator()(
              (common::milog::MiLogStream *const)&v,
              "|%u|SetOverrideParam|%s|%s|%s|%u|%u|%f",
              v38,
              v44,
              byte_24FD2920,
              v45,
              float_value,
              EntityId,
              Uid);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v);
          }
        }
        else
        {
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 80));
          v39 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                  (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 80),
                  "value type is not supported on MetaHandleOverrideParam, value_type:");
          v40 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v39, value_type);
          v41 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v40, ", key:");
          v42 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                  v41,
                  (const std::string *)(v4 + 112));
          v43 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v42, ", owner:");
          AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11](&v, this);
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v43, &v);
          std::string::~string(&v);
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
            &v,
            (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 80));
          AbilityComp::invokeFailNotify(this, entry, from_player, &v);
          std::string::~string(&v);
          common::milog::MiLogStream::create(
            &v54,
            &common::milog::MiLogDefault::default_log_obj_,
            0x13u,
            "./src/ability/ability_comp.cpp",
            "metaHandleOverrideParam",
            5283);
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
            &v,
            (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 80));
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v54, &v);
          std::string::~string(&v);
          common::milog::MiLogStream::~MiLogStream(&v54);
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 80));
        }
      }
      std::string::~string((void *)(v4 + 112));
    }
    std::shared_ptr<ActorAbility>::~shared_ptr((std::shared_ptr<ActorAbility> *const)(v4 + 48));
  }
  proto::AbilityScalarValueEntry::~AbilityScalarValueEntry((proto::AbilityScalarValueEntry *const)(v4 + 176));
  if ( v56 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 5288: range 00000000136F64A6-00000000136F7011
void __cdecl AbilityComp::metaHandleClearOverrideParam(
        AbilityComp *const this,
        const proto::AbilityInvokeEntry *entry,
        Player *from_player)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v6; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v7; // r14
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v8; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v9; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v10; // r14
  Creature *creature; // rsi
  unsigned __int64 *v12; // rax
  unsigned __int64 v13; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v14; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v15; // r14
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v16; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v17; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v18; // r14
  Creature *v19; // rsi
  unsigned __int64 *v20; // rax
  unsigned __int64 v21; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v22; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v23; // r14
  const std::string *v24; // r14
  google::protobuf::uint32 v25; // eax
  ActorAbility *v26; // rax
  __int64 Uid; // r15
  __int64 EntityId; // r14
  ActorAbility *v29; // rax
  data::ConfigAbility *ConfigRef; // rax
  bool v31; // al
  const char *v32; // [rsp+8h] [rbp-198h]
  const char *v33; // [rsp+10h] [rbp-190h]
  uint32_t ability_id; // [rsp+3Ch] [rbp-164h]
  const proto::AbilityInvokeEntryHead *head; // [rsp+40h] [rbp-160h]
  const std::string *ability_data_str; // [rsp+48h] [rbp-158h]
  common::milog::MiLogStream v39; // [rsp+50h] [rbp-150h] BYREF
  std::string v; // [rsp+70h] [rbp-130h] BYREF
  char v41[272]; // [rsp+90h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v41;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 16 16 ability_ptr:5298 64 16 7 os:5307 96 32 21 meta_ability_key:5291 160 32 8 key:5304";
  *(_QWORD *)(v3 + 16) = AbilityComp::metaHandleClearOverrideParam;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -219021312;
  v5[536862722] = -219021312;
  v5[536862724] = -218959118;
  v5[536862726] = -202116109;
  head = proto::AbilityInvokeEntry::head(entry);
  ability_data_str = proto::AbilityInvokeEntry::ability_data[abi:cxx11](entry);
  proto::AbilityString::AbilityString((proto::AbilityString *const)(v3 + 96));
  if ( (unsigned __int8)google::protobuf::MessageLite::ParseFromString(v3 + 96, ability_data_str) != 1 )
  {
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
    v6 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
           (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64),
           "AbilityStringKey ParseFromString fails");
    v7 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v6, ", owner:");
    AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11](&v, this);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v7, &v);
    std::string::~string(&v);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
      &v,
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
    AbilityComp::invokeFailNotify(this, entry, from_player, &v);
    std::string::~string(&v);
    common::milog::MiLogStream::create(
      &v39,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "metaHandleClearOverrideParam",
      5294);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
      &v,
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v39, &v);
    std::string::~string(&v);
    common::milog::MiLogStream::~MiLogStream(&v39);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
  }
  else
  {
    ability_id = proto::AbilityInvokeEntryHead::instanced_ability_id(head);
    AbilityComp::findAppliedAbility((AbilityComp *const)(v3 + 32), (__int64)this, ability_id);
    if ( std::operator==<ActorAbility>((const std::shared_ptr<ActorAbility> *)(v3 + 32), 0LL) )
    {
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
      v8 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
             (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64),
             off_2503A640);
      v9 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v8, ability_id);
      v10 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v9, aEntity_0[0]);
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      creature = this->creature_;
      v12 = (unsigned __int64 *)creature;
      if ( *(_BYTE *)(((unsigned __int64)creature >> 3) + 0x7FFF8000) )
        v12 = (unsigned __int64 *)__asan_report_load8(this->creature_);
      v13 = *v12;
      if ( *(_BYTE *)((v13 >> 3) + 0x7FFF8000) )
        v13 = __asan_report_load8(v13);
      (*(void (__fastcall **)(common::milog::MiLogStream *, Creature *))v13)(&v39, creature);
      v14 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v10, (const std::string *)&v39);
      v15 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v14, ", owner:");
      AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11](&v, this);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v15, &v);
      std::string::~string(&v);
      std::string::~string(&v39);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        &v,
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
      AbilityComp::invokeFailNotify(this, entry, from_player, &v);
      std::string::~string(&v);
      common::milog::MiLogStream::create(
        &v39,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "metaHandleClearOverrideParam",
        5301);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        &v,
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v39, &v);
      std::string::~string(&v);
      common::milog::MiLogStream::~MiLogStream(&v39);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
    }
    else
    {
      std::string::basic_string(v3 + 160);
      if ( abilityStringToStdString((const proto::AbilityString *)(v3 + 96), (std::string *)(v3 + 160)) )
      {
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
        v16 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64),
                "abilityStringToStdString fails, ability_id:");
        v17 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v16, ability_id);
        v18 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v17, aEntity_0[0]);
        if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->creature_);
        v19 = this->creature_;
        v20 = (unsigned __int64 *)v19;
        if ( *(_BYTE *)(((unsigned __int64)v19 >> 3) + 0x7FFF8000) )
          v20 = (unsigned __int64 *)__asan_report_load8(this->creature_);
        v21 = *v20;
        if ( *(_BYTE *)((v21 >> 3) + 0x7FFF8000) )
          v21 = __asan_report_load8(v21);
        (*(void (__fastcall **)(common::milog::MiLogStream *, Creature *))v21)(&v39, v19);
        v22 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v18, (const std::string *)&v39);
        v23 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v22, ", owner:");
        AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11](&v, this);
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v23, &v);
        std::string::~string(&v);
        std::string::~string(&v39);
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
          &v,
          (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
        AbilityComp::invokeFailNotify(this, entry, from_player, &v);
        std::string::~string(&v);
        common::milog::MiLogStream::create(
          &v39,
          &common::milog::MiLogDefault::default_log_obj_,
          0x13u,
          "./src/ability/ability_comp.cpp",
          "metaHandleClearOverrideParam",
          5307);
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
          &v,
          (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v39, &v);
        std::string::~string(&v);
        common::milog::MiLogStream::~MiLogStream(&v39);
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
        v24 = proto::AbilityString::str[abi:cxx11]((const proto::AbilityString *const)(v3 + 96));
        v25 = proto::AbilityString::hash((const proto::AbilityString *const)(v3 + 96));
        AbilityComp::invokeNotRegisterNotifyGMServerLog(this, v25, v24, from_player);
      }
      else
      {
        v26 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
        ActorAbility::clearOverrideParam(v26, (const std::string *)(v3 + 160));
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&v,
          &common::milog::MiLogDefault::default_log_obj_,
          0x14u,
          "./src/ability/ability_comp.cpp",
          "metaHandleClearOverrideParam",
          5312);
        Uid = Player::getUid(from_player);
        if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->creature_);
        EntityId = Entity::getEntityId((const Entity *const)this->creature_);
        v33 = (const char *)std::string::c_str(v3 + 160);
        v29 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
        ConfigRef = ActorAbility::getConfigRef(v29);
        v32 = (const char *)std::string::c_str(&ConfigRef->ability_name);
        v31 = AbilityComp::isInMpMode(this);
        common::milog::MiLogStream::operator()(
          (common::milog::MiLogStream *const)&v,
          "|%u|ClearOverrideParam|%s|%s|%s|%u|%u|%s",
          v31,
          v32,
          byte_24FD2920,
          v33,
          EntityId,
          Uid,
          byte_24FD2920);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v);
      }
      std::string::~string((void *)(v3 + 160));
    }
    std::shared_ptr<ActorAbility>::~shared_ptr((std::shared_ptr<ActorAbility> *const)(v3 + 32));
  }
  proto::AbilityString::~AbilityString((proto::AbilityString *const)(v3 + 96));
  if ( v41 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
};

// Line 5316: range 00000000136F7012-00000000136F87F5
void __cdecl AbilityComp::metaHandleReInitOverrideParam(
        AbilityComp *const this,
        const proto::AbilityInvokeEntry *entry,
        Player *from_player)
{
  __m128i v3; // xmm0
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v7; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v8; // r14
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v9; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v10; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v11; // r14
  Creature *creature; // rsi
  unsigned __int64 *v13; // rax
  unsigned __int64 v14; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v15; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v16; // r14
  ActorAbility *v17; // rax
  const proto::AbilityString *v18; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v19; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v20; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v21; // r14
  Creature *v22; // rsi
  unsigned __int64 *v23; // rax
  unsigned __int64 v24; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v25; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v26; // r14
  const proto::AbilityString *v27; // rax
  const std::string *v28; // r14
  const proto::AbilityString *v29; // rax
  google::protobuf::uint32 v30; // eax
  int v31; // r14d
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v32; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v33; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v34; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v35; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v36; // r14
  Creature *v37; // rsi
  unsigned __int64 *v38; // rax
  unsigned __int64 v39; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v40; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v41; // r14
  int v42; // r14d
  float v43; // xmm0_4
  common::milog::MiLogStream *v44; // rax
  common::milog::MiLogStream *v45; // rax
  common::milog::MiLogStream *v46; // r14
  std::any *v47; // r8
  std::pair<std::_Rb_tree_iterator<std::pair<int const,std::any> >,bool> v48; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v49; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v50; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v51; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v52; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v53; // r14
  Creature *v54; // rsi
  unsigned __int64 *v55; // rax
  unsigned __int64 v56; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v57; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v58; // r14
  ActorAbility *v59; // rax
  common::milog::MiLogStream *v61; // rax
  common::milog::MiLogStream *v62; // rax
  common::milog::MiLogStream *v63; // rax
  common::milog::MiLogStream *v64; // rax
  common::milog::MiLogStream *v65; // rax
  common::milog::MiLogStream *v66; // rax
  common::milog::MiLogStream *v67; // rax
  common::milog::MiLogStream *v68; // r14
  Creature *v69; // rsi
  unsigned __int64 *v70; // rax
  unsigned __int64 v71; // rax
  common::milog::MiLogStream *v72; // rax
  common::milog::MiLogStream *v73; // rax
  common::milog::MiLogStream *v74; // rax
  common::milog::MiLogStream *v75; // rax
  common::milog::MiLogStream *v76; // rax
  ActorAbility *v77; // rax
  __int64 Uid; // r15
  __int64 EntityId; // r14
  ActorAbility *v80; // rax
  data::ConfigAbility *ConfigRef; // rax
  bool v82; // al
  const char *v83; // [rsp+8h] [rbp-2B8h]
  const char *v84; // [rsp+10h] [rbp-2B0h]
  uint32_t ability_id; // [rsp+3Ch] [rbp-284h]
  google::protobuf::RepeatedPtrField<proto::AbilityScalarValueEntry>::const_iterator __for_begin; // [rsp+40h] [rbp-280h] BYREF
  google::protobuf::RepeatedPtrField<proto::AbilityScalarValueEntry>::const_iterator __for_end; // [rsp+48h] [rbp-278h] BYREF
  const proto::AbilityInvokeEntryHead *head; // [rsp+50h] [rbp-270h]
  const std::string *ability_data_str; // [rsp+58h] [rbp-268h]
  const google::protobuf::RepeatedPtrField<proto::AbilityScalarValueEntry> *__for_range; // [rsp+60h] [rbp-260h]
  const proto::AbilityScalarValueEntry *value_entry; // [rsp+68h] [rbp-258h]
  common::milog::MiLogStream v94; // [rsp+70h] [rbp-250h] BYREF
  std::string v; // [rsp+90h] [rbp-230h] BYREF
  char v96[528]; // [rsp+B0h] [rbp-210h] BYREF

  v4 = (unsigned __int64)v96;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(480LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "10 48 4 30 ability_special_name_hash:5358 64 4 30 client_override_map_value:5366 80 4 30 server_"
                        "override_map_value:5367 96 16 16 ability_ptr:5326 128 16 10 value:5344 160 16 7 os:5361 192 32 1"
                        "3 key_list:5332 256 32 8 key:5337 320 48 29 meta_reinit_override_map:5319 400 48 17 override_map:5333";
  *(_QWORD *)(v4 + 16) = AbilityComp::metaHandleReInitOverrideParam;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -234556924;
  v6[536862723] = -219021312;
  v6[536862724] = -219021312;
  v6[536862725] = -219021312;
  v6[536862727] = -218959118;
  v6[536862729] = -218959118;
  v6[536862731] = -219021312;
  v6[536862732] = 62194;
  v6[536862734] = -202116109;
  head = proto::AbilityInvokeEntry::head(entry);
  ability_data_str = proto::AbilityInvokeEntry::ability_data[abi:cxx11](entry);
  proto::AbilityMetaReInitOverrideMap::AbilityMetaReInitOverrideMap((proto::AbilityMetaReInitOverrideMap *const)(v4 + 320));
  if ( (unsigned __int8)google::protobuf::MessageLite::ParseFromString(v4 + 320, ability_data_str) != 1 )
  {
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 160));
    v7 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
           (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 160),
           "AbilityMetaReInitOverrideMap ParseFromString fails");
    v8 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v7, ", owner:");
    AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11](&v, this);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v8, &v);
    std::string::~string(&v);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
      &v,
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 160));
    AbilityComp::invokeFailNotify(this, entry, from_player, &v);
    std::string::~string(&v);
    common::milog::MiLogStream::create(
      &v94,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "metaHandleReInitOverrideParam",
      5322);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
      &v,
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 160));
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v94, &v);
    std::string::~string(&v);
    common::milog::MiLogStream::~MiLogStream(&v94);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 160));
  }
  else
  {
    ability_id = proto::AbilityInvokeEntryHead::instanced_ability_id(head);
    AbilityComp::findAppliedAbility((AbilityComp *const)(v4 + 96), (__int64)this, ability_id);
    if ( std::operator==<ActorAbility>((const std::shared_ptr<ActorAbility> *)(v4 + 96), 0LL) )
    {
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 160));
      v9 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
             (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 160),
             off_2503A640);
      v10 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v9, ability_id);
      v11 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v10, aEntity_0[0]);
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      creature = this->creature_;
      v13 = (unsigned __int64 *)creature;
      if ( *(_BYTE *)(((unsigned __int64)creature >> 3) + 0x7FFF8000) )
        v13 = (unsigned __int64 *)__asan_report_load8(this->creature_);
      v14 = *v13;
      if ( *(_BYTE *)((v14 >> 3) + 0x7FFF8000) )
        v14 = __asan_report_load8(v14);
      (*(void (__fastcall **)(common::milog::MiLogStream *, Creature *))v14)(&v94, creature);
      v15 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v11, (const std::string *)&v94);
      v16 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v15, ", owner:");
      AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11](&v, this);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v16, &v);
      std::string::~string(&v);
      std::string::~string(&v94);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        &v,
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 160));
      AbilityComp::invokeFailNotify(this, entry, from_player, &v);
      std::string::~string(&v);
      common::milog::MiLogStream::create(
        &v94,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "metaHandleReInitOverrideParam",
        5329);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        &v,
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 160));
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v94, &v);
      std::string::~string(&v);
      common::milog::MiLogStream::~MiLogStream(&v94);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 160));
    }
    else
    {
      std::string::basic_string(v4 + 192);
      std::map<int,std::any>::map((std::map<int,std::any> *const)(v4 + 400));
      v17 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
      ActorAbility::refreshServerTalentOverrideMap(v17);
      __for_range = proto::AbilityMetaReInitOverrideMap::override_map((const proto::AbilityMetaReInitOverrideMap *const)(v4 + 320));
      __for_begin.it_ = google::protobuf::RepeatedPtrField<proto::AbilityScalarValueEntry>::begin(__for_range).it_;
      __for_end.it_ = google::protobuf::RepeatedPtrField<proto::AbilityScalarValueEntry>::end(__for_range).it_;
      while ( google::protobuf::internal::RepeatedPtrIterator<proto::AbilityScalarValueEntry const>::operator!=(
                &__for_begin,
                &__for_end) )
      {
        value_entry = google::protobuf::internal::RepeatedPtrIterator<proto::AbilityScalarValueEntry const>::operator*(&__for_begin);
        std::string::basic_string(v4 + 256);
        v18 = proto::AbilityScalarValueEntry::key(value_entry);
        if ( abilityStringToStdString(v18, (std::string *)(v4 + 256)) )
        {
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 160));
          v19 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                  (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 160),
                  "abilityStringToStdString fails, ability_id:");
          v20 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v19, ability_id);
          v21 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v20, aEntity_0[0]);
          if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->creature_);
          v22 = this->creature_;
          v23 = (unsigned __int64 *)v22;
          if ( *(_BYTE *)(((unsigned __int64)v22 >> 3) + 0x7FFF8000) )
            v23 = (unsigned __int64 *)__asan_report_load8(this->creature_);
          v24 = *v23;
          if ( *(_BYTE *)((v24 >> 3) + 0x7FFF8000) )
            v24 = __asan_report_load8(v24);
          (*(void (__fastcall **)(common::milog::MiLogStream *, Creature *))v24)(&v94, v22);
          v25 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                  v21,
                  (const std::string *)&v94);
          v26 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v25, ", owner:");
          AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11](&v, this);
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v26, &v);
          std::string::~string(&v);
          std::string::~string(&v94);
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
            &v,
            (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 160));
          AbilityComp::invokeFailNotify(this, entry, from_player, &v);
          std::string::~string(&v);
          common::milog::MiLogStream::create(
            &v94,
            &common::milog::MiLogDefault::default_log_obj_,
            0x13u,
            "./src/ability/ability_comp.cpp",
            "metaHandleReInitOverrideParam",
            5340);
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
            &v,
            (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 160));
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v94, &v);
          std::string::~string(&v);
          common::milog::MiLogStream::~MiLogStream(&v94);
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 160));
          v27 = proto::AbilityScalarValueEntry::key(value_entry);
          v28 = proto::AbilityString::str[abi:cxx11](v27);
          v29 = proto::AbilityScalarValueEntry::key(value_entry);
          v30 = proto::AbilityString::hash(v29);
          AbilityComp::invokeNotRegisterNotifyGMServerLog(this, v30, v28, from_player);
          v31 = 0;
        }
        else
        {
          *(_QWORD *)(v4 + 128) = 0LL;
          *(_QWORD *)(v4 + 136) = 0LL;
          if ( anyFromScalarValueEntry(value_entry, (std::any *)(v4 + 128)) )
          {
            common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 160));
            v32 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                    (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 160),
                    "invalid AbilityScalarValueEntry, key:");
            v33 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                    v32,
                    (const std::string *)(v4 + 256));
            v34 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v33, ", ability_id:");
            v35 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v34, ability_id);
            v36 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v35, aEntity_0[0]);
            if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
              __asan_report_load8(&this->creature_);
            v37 = this->creature_;
            v38 = (unsigned __int64 *)v37;
            if ( *(_BYTE *)(((unsigned __int64)v37 >> 3) + 0x7FFF8000) )
              v38 = (unsigned __int64 *)__asan_report_load8(this->creature_);
            v39 = *v38;
            if ( *(_BYTE *)((v39 >> 3) + 0x7FFF8000) )
              v39 = __asan_report_load8(v39);
            (*(void (__fastcall **)(common::milog::MiLogStream *, Creature *))v39)(&v94, v37);
            v40 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                    v36,
                    (const std::string *)&v94);
            v41 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v40, ", owner:");
            AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11](&v, this);
            common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v41, &v);
            std::string::~string(&v);
            std::string::~string(&v94);
            common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
              &v,
              (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 160));
            AbilityComp::invokeFailNotify(this, entry, from_player, &v);
            std::string::~string(&v);
            common::milog::MiLogStream::create(
              &v94,
              &common::milog::MiLogDefault::default_log_obj_,
              0x13u,
              "./src/ability/ability_comp.cpp",
              "metaHandleReInitOverrideParam",
              5347);
            common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
              &v,
              (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 160));
            common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v94, &v);
            std::string::~string(&v);
            common::milog::MiLogStream::~MiLogStream(&v94);
            common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 160));
            v42 = 0;
          }
          else if ( proto::AbilityScalarValueEntry::value_type(value_entry) == ABILITY_SCALAR_TYPE_FLOAT
                 && (v43 = safeAnyCast<float>((const std::any *)(v4 + 128)), !std::isfinite(v43)) )
          {
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)&v,
              &common::milog::MiLogDefault::default_log_obj_,
              1u,
              "./src/ability/ability_comp.cpp",
              "metaHandleReInitOverrideParam",
              5354);
            v44 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                    (common::milog::MiLogStream *const)&v,
                    (const char (*)[22])"client value nan key:");
            v45 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                    v44,
                    (const std::string *)(v4 + 256));
            v46 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v45, (const char (*)[6])" uid:");
            *(_DWORD *)(v4 + 80) = Player::getUid(from_player);
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v46, (const unsigned int *)(v4 + 80));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v);
            v42 = 1;
          }
          else
          {
            *(_DWORD *)(v4 + 48) = getStringHash((const std::string *)(v4 + 256));
            v48 = std::map<int,std::any>::emplace<unsigned int &,std::any&>(
                    (std::map<int,std::any> *const)(v4 + 400),
                    (unsigned int *)(v4 + 48),
                    (std::any *)(v4 + 128),
                    (unsigned int *)(v4 + 48),
                    v47);
            if ( !v48.second )
            {
              common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 160));
              v49 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 160),
                      "duplicate key:");
              v50 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                      v49,
                      (const std::string *)(v4 + 256));
              v51 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v50, ", ability_id:");
              v52 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v51, ability_id);
              v53 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v52, aEntity_0[0]);
              if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
                __asan_report_load8(&this->creature_);
              v54 = this->creature_;
              v55 = (unsigned __int64 *)v54;
              if ( *(_BYTE *)(((unsigned __int64)v54 >> 3) + 0x7FFF8000) )
                v55 = (unsigned __int64 *)__asan_report_load8(this->creature_);
              v56 = *v55;
              if ( *(_BYTE *)((v56 >> 3) + 0x7FFF8000) )
                v56 = __asan_report_load8(v56);
              (*(void (__fastcall **)(common::milog::MiLogStream *, Creature *))v56)(&v94, v54);
              v57 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                      v53,
                      (const std::string *)&v94);
              v58 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v57, ", owner:");
              AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11](&v, this);
              common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v58, &v);
              std::string::~string(&v);
              std::string::~string(&v94);
              common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
                &v,
                (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 160));
              AbilityComp::invokeFailNotify(this, entry, from_player, &v);
              std::string::~string(&v);
              common::milog::MiLogStream::create(
                &v94,
                &common::milog::MiLogDefault::default_log_obj_,
                0x13u,
                "./src/ability/ability_comp.cpp",
                "metaHandleReInitOverrideParam",
                5361);
              common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
                &v,
                (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 160));
              common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v94, &v);
              std::string::~string(&v);
              common::milog::MiLogStream::~MiLogStream(&v94);
              common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 160));
              v42 = 0;
            }
            else
            {
              std::string::operator+=(v4 + 192, v4 + 256);
              *(float *)v3.m128i_i32 = safeAnyCast<float>((const std::any *)(v4 + 128));
              *(_DWORD *)(v4 + 64) = _mm_cvtsi128_si32(v3);
              v59 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
              *(float *)v3.m128i_i32 = ActorAbility::getServerOverrideParam(v59, (const std::string *)(v4 + 256));
              *(_DWORD *)(v4 + 80) = _mm_cvtsi128_si32(v3);
              v3 = _mm_cvtsi32_si128(*(_DWORD *)(v4 + 80));
              if ( std::abs(*(float *)v3.m128i_i32) > 0.00000011920929
                && (v3 = (__m128i)*(unsigned int *)(v4 + 80),
                    std::abs(*(float *)v3.m128i_i32 - *(float *)(v4 + 64)) > 0.00000011920929) )
              {
                common::milog::MiLogStream::create(
                  &v94,
                  &common::milog::MiLogDefault::default_log_obj_,
                  0x11u,
                  "./src/ability/ability_comp.cpp",
                  "metaHandleReInitOverrideParam",
                  5371);
                v61 = common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
                        &v94,
                        (const char (*)[47])"[SERVER_OVERRIDE] init override_map not match ");
                v62 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v61, (const char (*)[6])" key=");
                v63 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                        v62,
                        (const std::string *)(v4 + 256));
                v64 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                        v63,
                        (const char (*)[15])" client value=");
                v65 = common::milog::MiLogStream::operator<<<float,(float *)0>(v64, (const float *)(v4 + 64));
                v66 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                        v65,
                        (const char (*)[15])" server value=");
                v67 = common::milog::MiLogStream::operator<<<float,(float *)0>(v66, (const float *)(v4 + 80));
                v68 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(
                        v67,
                        (const char (*)[10])" entity: ");
                if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
                  __asan_report_load8(&this->creature_);
                v69 = this->creature_;
                v70 = (unsigned __int64 *)v69;
                if ( *(_BYTE *)(((unsigned __int64)v69 >> 3) + 0x7FFF8000) )
                  v70 = (unsigned __int64 *)__asan_report_load8(this->creature_);
                v71 = *v70;
                if ( *(_BYTE *)((v71 >> 3) + 0x7FFF8000) )
                  v71 = __asan_report_load8(v71);
                (*(void (__fastcall **)(std::string *, Creature *))v71)(&v, v69);
                common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v68, &v);
                std::string::~string(&v);
                common::milog::MiLogStream::~MiLogStream(&v94);
              }
              else
              {
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)&v,
                  &common::milog::MiLogDefault::default_log_obj_,
                  0x11u,
                  "./src/ability/ability_comp.cpp",
                  "metaHandleReInitOverrideParam",
                  5375);
                v72 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                        (common::milog::MiLogStream *const)&v,
                        (const char (*)[28])"[SERVER_OVERRIDE] init key=");
                v73 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                        v72,
                        (const std::string *)(v4 + 256));
                v74 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                        v73,
                        (const char (*)[15])" client value=");
                v75 = common::milog::MiLogStream::operator<<<float,(float *)0>(v74, (const float *)(v4 + 64));
                v76 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                        v75,
                        (const char (*)[15])" server value=");
                common::milog::MiLogStream::operator<<<float,(float *)0>(v76, (const float *)(v4 + 80));
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v);
              }
              v42 = 2;
            }
          }
          std::any::~any((std::any *const)(v4 + 128));
          if ( v42 )
          {
            if ( v42 == 2 )
              v31 = 2;
            else
              v31 = 1;
          }
          else
          {
            v31 = 0;
          }
        }
        std::string::~string((void *)(v4 + 256));
        if ( v31 && v31 != 2 )
          goto LABEL_68;
        google::protobuf::internal::RepeatedPtrIterator<proto::AbilityScalarValueEntry const>::operator++(&__for_begin);
      }
      v77 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
      ActorAbility::initOverrideMap(v77, (const std::map<int,std::any> *)(v4 + 400));
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&v,
        &common::milog::MiLogDefault::default_log_obj_,
        0x14u,
        "./src/ability/ability_comp.cpp",
        "metaHandleReInitOverrideParam",
        5380);
      Uid = Player::getUid(from_player);
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      EntityId = Entity::getEntityId((const Entity *const)this->creature_);
      v84 = (const char *)std::string::c_str(v4 + 192);
      v80 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
      ConfigRef = ActorAbility::getConfigRef(v80);
      v83 = (const char *)std::string::c_str(&ConfigRef->ability_name);
      v82 = AbilityComp::isInMpMode(this);
      common::milog::MiLogStream::operator()(
        (common::milog::MiLogStream *const)&v,
        "|%u|ReInitOverrideParam|%s|%s|%s|%u|%u|%s",
        v82,
        v83,
        byte_24FD2920,
        v84,
        EntityId,
        Uid,
        byte_24FD2920);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v);
LABEL_68:
      std::map<int,std::any>::~map((std::map<int,std::any> *const)(v4 + 400));
      std::string::~string((void *)(v4 + 192));
    }
    std::shared_ptr<ActorAbility>::~shared_ptr((std::shared_ptr<ActorAbility> *const)(v4 + 96));
  }
  proto::AbilityMetaReInitOverrideMap::~AbilityMetaReInitOverrideMap((proto::AbilityMetaReInitOverrideMap *const)(v4 + 320));
  if ( v96 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF801C) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8024) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF802C) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8038) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8038) = -168430091;
  }
};

// Line 5384: range 00000000136F87F6-00000000136F96DC
void __cdecl AbilityComp::metaHandleGlobalFloatValue(
        AbilityComp *const this,
        const proto::AbilityInvokeEntry *entry,
        Player *from_player)
{
  __m128i v3; // xmm0
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v7; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v8; // r14
  const proto::AbilityString *v9; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v10; // r14
  Creature *creature; // rsi
  unsigned __int64 *v12; // rax
  unsigned __int64 v13; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v14; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v15; // r14
  const proto::AbilityString *v16; // rax
  const std::string *v17; // r14
  const proto::AbilityString *v18; // rax
  google::protobuf::uint32 v19; // eax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // r14
  Creature *v23; // rsi
  unsigned __int64 *v24; // rax
  unsigned __int64 v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // r14
  __int64 Uid; // r15
  __int64 EntityId; // r14
  bool v31; // al
  __int64 v32; // r15
  __int64 v33; // r14
  bool v34; // al
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v35; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v36; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v37; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v38; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v39; // r14
  Creature *v40; // rsi
  unsigned __int64 *v41; // rax
  unsigned __int64 v42; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v43; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v44; // r14
  __int64 v45; // [rsp+8h] [rbp-198h]
  const char *v46; // [rsp+10h] [rbp-190h]
  unsigned int val; // [rsp+30h] [rbp-170h] BYREF
  proto::AbilityScalarType value_type; // [rsp+34h] [rbp-16Ch]
  uint32_t uint_value; // [rsp+38h] [rbp-168h]
  float float_value; // [rsp+3Ch] [rbp-164h]
  const proto::AbilityInvokeEntryHead *head; // [rsp+40h] [rbp-160h]
  const std::string *ability_data_str; // [rsp+48h] [rbp-158h]
  common::milog::MiLogStream v55; // [rsp+50h] [rbp-150h] BYREF
  std::string v; // [rsp+70h] [rbp-130h] BYREF
  char v57[272]; // [rsp+90h] [rbp-110h] BYREF

  v4 = (unsigned __int64)v57;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(224LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 48 16 7 os:5425 80 32 8 key:5394 144 48 36 meta_ability_scalar_value_entry:5387";
  *(_QWORD *)(v4 + 16) = AbilityComp::metaHandleGlobalFloatValue;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = 61937;
  v6[536862722] = 62194;
  v6[536862723] = -219021312;
  v6[536862724] = 62194;
  v6[536862726] = -202116109;
  head = proto::AbilityInvokeEntry::head(entry);
  ability_data_str = proto::AbilityInvokeEntry::ability_data[abi:cxx11](entry);
  proto::AbilityScalarValueEntry::AbilityScalarValueEntry((proto::AbilityScalarValueEntry *const)(v4 + 144));
  if ( (unsigned __int8)google::protobuf::MessageLite::ParseFromString(v4 + 144, ability_data_str) != 1 )
  {
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 48));
    v7 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
           (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 48),
           "AbilityScalarValueEntry ParseFromString fails");
    v8 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v7, ", owner:");
    AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11](&v, this);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v8, &v);
    std::string::~string(&v);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
      &v,
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 48));
    AbilityComp::invokeFailNotify(this, entry, from_player, &v);
    std::string::~string(&v);
    common::milog::MiLogStream::create(
      &v55,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "metaHandleGlobalFloatValue",
      5390);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
      &v,
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 48));
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v55, &v);
    std::string::~string(&v);
    common::milog::MiLogStream::~MiLogStream(&v55);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 48));
  }
  else
  {
    value_type = proto::AbilityScalarValueEntry::value_type((const proto::AbilityScalarValueEntry *const)(v4 + 144));
    std::string::basic_string(v4 + 80);
    v9 = proto::AbilityScalarValueEntry::key((const proto::AbilityScalarValueEntry *const)(v4 + 144));
    if ( abilityStringToStdString(v9, (std::string *)(v4 + 80)) )
    {
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 48));
      v10 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
              (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 48),
              "abilityStringToStdString fails, entity:");
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      creature = this->creature_;
      v12 = (unsigned __int64 *)creature;
      if ( *(_BYTE *)(((unsigned __int64)creature >> 3) + 0x7FFF8000) )
        v12 = (unsigned __int64 *)__asan_report_load8(this->creature_);
      v13 = *v12;
      if ( *(_BYTE *)((v13 >> 3) + 0x7FFF8000) )
        v13 = __asan_report_load8(v13);
      (*(void (__fastcall **)(common::milog::MiLogStream *, Creature *))v13)(&v55, creature);
      v14 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v10, (const std::string *)&v55);
      v15 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v14, ", owner:");
      AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11](&v, this);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v15, &v);
      std::string::~string(&v);
      std::string::~string(&v55);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        &v,
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 48));
      AbilityComp::invokeFailNotify(this, entry, from_player, &v);
      std::string::~string(&v);
      common::milog::MiLogStream::create(
        &v55,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "metaHandleGlobalFloatValue",
        5397);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        &v,
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 48));
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v55, &v);
      std::string::~string(&v);
      common::milog::MiLogStream::~MiLogStream(&v55);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 48));
      v16 = proto::AbilityScalarValueEntry::key((const proto::AbilityScalarValueEntry *const)(v4 + 144));
      v17 = proto::AbilityString::str[abi:cxx11](v16);
      v18 = proto::AbilityScalarValueEntry::key((const proto::AbilityScalarValueEntry *const)(v4 + 144));
      v19 = proto::AbilityString::hash(v18);
      AbilityComp::invokeNotRegisterNotifyGMServerLog(this, v19, v17, from_player);
    }
    else if ( AbilityComp::isServerGlobalValueKey(this, (const std::string *)(v4 + 80)) )
    {
      common::milog::MiLogStream::create(
        &v55,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/ability/ability_comp.cpp",
        "metaHandleGlobalFloatValue",
        5403);
      v20 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(&v55, (const char (*)[22])off_2503C3A0);
      v21 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v20, (const std::string *)(v4 + 80));
      v22 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v21, (const char (*)[16])off_2503C3E0);
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      v23 = this->creature_;
      v24 = (unsigned __int64 *)v23;
      if ( *(_BYTE *)(((unsigned __int64)v23 >> 3) + 0x7FFF8000) )
        v24 = (unsigned __int64 *)__asan_report_load8(this->creature_);
      v25 = *v24;
      if ( *(_BYTE *)((v25 >> 3) + 0x7FFF8000) )
        v25 = __asan_report_load8(v25);
      (*(void (__fastcall **)(std::string *, Creature *))v25)(&v, v23);
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v22, &v);
      std::string::~string(&v);
      common::milog::MiLogStream::~MiLogStream(&v55);
    }
    else if ( value_type == ABILITY_SCALAR_TYPE_FLOAT )
    {
      *(float *)v3.m128i_i32 = proto::AbilityScalarValueEntry::float_value((const proto::AbilityScalarValueEntry *const)(v4 + 144));
      float_value = COERCE_FLOAT(_mm_cvtsi128_si32(v3));
      if ( !std::isfinite(float_value) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&v,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/ability/ability_comp.cpp",
          "metaHandleGlobalFloatValue",
          5411);
        v26 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                (common::milog::MiLogStream *const)&v,
                (const char (*)[22])"client value nan key:");
        v27 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v26, (const std::string *)(v4 + 80));
        v28 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v27, (const char (*)[6])" uid:");
        val = Player::getUid(from_player);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v28, &val);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v);
      }
      else
      {
        AbilityComp::createOrSetDynamicValue<float>(this, (const std::string *)(v4 + 80), float_value);
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&v,
          &common::milog::MiLogDefault::default_log_obj_,
          0x14u,
          "./src/ability/ability_comp.cpp",
          "metaHandleGlobalFloatValue",
          5415);
        Uid = Player::getUid(from_player);
        if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->creature_);
        EntityId = Entity::getEntityId((const Entity *const)this->creature_);
        v45 = std::string::c_str(v4 + 80);
        v31 = AbilityComp::isInMpMode(this);
        common::milog::MiLogStream::operator()(
          (common::milog::MiLogStream *const)&v,
          "|%u|SetGlobalFloatValue|%s|%s|%s|%u|%u|%f",
          v31,
          byte_24FD2920,
          byte_24FD2920,
          v45,
          float_value,
          EntityId,
          Uid);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v);
      }
    }
    else if ( value_type == ABILITY_SCALAR_TYPE_UINT )
    {
      uint_value = proto::AbilityScalarValueEntry::uint_value((const proto::AbilityScalarValueEntry *const)(v4 + 144));
      AbilityComp::createOrSetDynamicValue<unsigned int>(this, (const std::string *)(v4 + 80), uint_value);
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&v,
        &common::milog::MiLogDefault::default_log_obj_,
        0x14u,
        "./src/ability/ability_comp.cpp",
        "metaHandleGlobalFloatValue",
        5421);
      v32 = Player::getUid(from_player);
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      v33 = Entity::getEntityId((const Entity *const)this->creature_);
      v46 = (const char *)std::string::c_str(v4 + 80);
      v34 = AbilityComp::isInMpMode(this);
      common::milog::MiLogStream::operator()(
        (common::milog::MiLogStream *const)&v,
        "|%u|SetGlobalUintValue|%s|%s|%s|%u|%u|%u",
        v34,
        byte_24FD2920,
        byte_24FD2920,
        v46,
        v33,
        v32,
        uint_value);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v);
    }
    else
    {
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 48));
      v35 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
              (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 48),
              "value type is not supported on MetaHandleGlobalFloatValue, value_type:");
      v36 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v35, value_type);
      v37 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v36, ", key:");
      v38 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
              v37,
              (const std::string *)(v4 + 80));
      v39 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v38, aEntity_0[0]);
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      v40 = this->creature_;
      v41 = (unsigned __int64 *)v40;
      if ( *(_BYTE *)(((unsigned __int64)v40 >> 3) + 0x7FFF8000) )
        v41 = (unsigned __int64 *)__asan_report_load8(this->creature_);
      v42 = *v41;
      if ( *(_BYTE *)((v42 >> 3) + 0x7FFF8000) )
        v42 = __asan_report_load8(v42);
      (*(void (__fastcall **)(common::milog::MiLogStream *, Creature *))v42)(&v55, v40);
      v43 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v39, (const std::string *)&v55);
      v44 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v43, ", owner:");
      AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11](&v, this);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v44, &v);
      std::string::~string(&v);
      std::string::~string(&v55);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        &v,
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 48));
      AbilityComp::invokeFailNotify(this, entry, from_player, &v);
      std::string::~string(&v);
      common::milog::MiLogStream::create(
        &v55,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "metaHandleGlobalFloatValue",
        5425);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        &v,
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 48));
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v55, &v);
      std::string::~string(&v);
      common::milog::MiLogStream::~MiLogStream(&v55);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 48));
    }
    std::string::~string((void *)(v4 + 80));
  }
  proto::AbilityScalarValueEntry::~AbilityScalarValueEntry((proto::AbilityScalarValueEntry *const)(v4 + 144));
  if ( v57 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = -168430091;
  }
};

// Line 5430: range 00000000136F96DE-00000000136FA030
void __cdecl AbilityComp::metaHandleClearGlobalFloatValue(
        AbilityComp *const this,
        const proto::AbilityInvokeEntry *entry,
        Player *from_player)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v6; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v7; // r14
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v8; // r14
  Creature *creature; // rsi
  unsigned __int64 *v10; // rax
  unsigned __int64 v11; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v12; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v13; // r14
  const std::string *v14; // r14
  google::protobuf::uint32 v15; // eax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // r14
  Creature *v19; // rsi
  unsigned __int64 *v20; // rax
  unsigned __int64 v21; // rax
  __int64 Uid; // r15
  __int64 EntityId; // r14
  bool v24; // al
  const char *v25; // [rsp+10h] [rbp-160h]
  const std::string *ability_data_str; // [rsp+38h] [rbp-138h]
  common::milog::MiLogStream v29; // [rsp+40h] [rbp-130h] BYREF
  std::string v; // [rsp+60h] [rbp-110h] BYREF
  char v31[240]; // [rsp+80h] [rbp-F0h] BYREF

  v3 = (unsigned __int64)v31;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 16 7 os:5442 64 32 28 meta_ability_string_key:5433 128 32 8 key:5439";
  *(_QWORD *)(v3 + 16) = AbilityComp::metaHandleClearGlobalFloatValue;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -219021312;
  v5[536862723] = -218959118;
  v5[536862725] = -202116109;
  proto::AbilityInvokeEntry::head(entry);
  ability_data_str = proto::AbilityInvokeEntry::ability_data[abi:cxx11](entry);
  proto::AbilityString::AbilityString((proto::AbilityString *const)(v3 + 64));
  if ( (unsigned __int8)google::protobuf::MessageLite::ParseFromString(v3 + 64, ability_data_str) != 1 )
  {
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 32));
    v6 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
           (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 32),
           "AbilityStringKey ParseFromString fails");
    v7 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v6, ", owner:");
    AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11](&v, this);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v7, &v);
    std::string::~string(&v);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
      &v,
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 32));
    AbilityComp::invokeFailNotify(this, entry, from_player, &v);
    std::string::~string(&v);
    common::milog::MiLogStream::create(
      &v29,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "metaHandleClearGlobalFloatValue",
      5436);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
      &v,
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 32));
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v29, &v);
    std::string::~string(&v);
    common::milog::MiLogStream::~MiLogStream(&v29);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 32));
  }
  else
  {
    std::string::basic_string(v3 + 128);
    if ( abilityStringToStdString((const proto::AbilityString *)(v3 + 64), (std::string *)(v3 + 128)) )
    {
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 32));
      v8 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
             (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 32),
             "abilityStringToStdString fails, entity:");
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      creature = this->creature_;
      v10 = (unsigned __int64 *)creature;
      if ( *(_BYTE *)(((unsigned __int64)creature >> 3) + 0x7FFF8000) )
        v10 = (unsigned __int64 *)__asan_report_load8(this->creature_);
      v11 = *v10;
      if ( *(_BYTE *)((v11 >> 3) + 0x7FFF8000) )
        v11 = __asan_report_load8(v11);
      (*(void (__fastcall **)(common::milog::MiLogStream *, Creature *))v11)(&v29, creature);
      v12 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v8, (const std::string *)&v29);
      v13 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v12, ", owner:");
      AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11](&v, this);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v13, &v);
      std::string::~string(&v);
      std::string::~string(&v29);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        &v,
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 32));
      AbilityComp::invokeFailNotify(this, entry, from_player, &v);
      std::string::~string(&v);
      common::milog::MiLogStream::create(
        &v29,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "metaHandleClearGlobalFloatValue",
        5442);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        &v,
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 32));
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v29, &v);
      std::string::~string(&v);
      common::milog::MiLogStream::~MiLogStream(&v29);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 32));
      v14 = proto::AbilityString::str[abi:cxx11]((const proto::AbilityString *const)(v3 + 64));
      v15 = proto::AbilityString::hash((const proto::AbilityString *const)(v3 + 64));
      AbilityComp::invokeNotRegisterNotifyGMServerLog(this, v15, v14, from_player);
    }
    else if ( AbilityComp::isServerGlobalValueKey(this, (const std::string *)(v3 + 128)) )
    {
      common::milog::MiLogStream::create(
        &v29,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/ability/ability_comp.cpp",
        "metaHandleClearGlobalFloatValue",
        5448);
      v16 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(&v29, (const char (*)[22])off_2503C3A0);
      v17 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v16, (const std::string *)(v3 + 128));
      v18 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v17, (const char (*)[16])off_2503C3E0);
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      v19 = this->creature_;
      v20 = (unsigned __int64 *)v19;
      if ( *(_BYTE *)(((unsigned __int64)v19 >> 3) + 0x7FFF8000) )
        v20 = (unsigned __int64 *)__asan_report_load8(this->creature_);
      v21 = *v20;
      if ( *(_BYTE *)((v21 >> 3) + 0x7FFF8000) )
        v21 = __asan_report_load8(v21);
      (*(void (__fastcall **)(std::string *, Creature *))v21)(&v, v19);
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v18, &v);
      std::string::~string(&v);
      common::milog::MiLogStream::~MiLogStream(&v29);
    }
    else
    {
      AbilityComp::clearDynamicFloat(this, (const std::string *)(v3 + 128));
      AbilityComp::clearServerDynamicFloat(this, (const std::string *)(v3 + 128));
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&v,
        &common::milog::MiLogDefault::default_log_obj_,
        0x14u,
        "./src/ability/ability_comp.cpp",
        "metaHandleClearGlobalFloatValue",
        5453);
      Uid = Player::getUid(from_player);
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      EntityId = Entity::getEntityId((const Entity *const)this->creature_);
      v25 = (const char *)std::string::c_str(v3 + 128);
      v24 = AbilityComp::isInMpMode(this);
      common::milog::MiLogStream::operator()(
        (common::milog::MiLogStream *const)&v,
        "|%u|ClearGlobalFloatValue|%s|%s|%s|%u|%u|%s",
        v24,
        byte_24FD2920,
        byte_24FD2920,
        v25,
        EntityId,
        Uid,
        byte_24FD2920);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v);
    }
    std::string::~string((void *)(v3 + 128));
  }
  proto::AbilityString::~AbilityString((proto::AbilityString *const)(v3 + 64));
  if ( v31 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 5457: range 00000000136FA032-00000000136FA79F
void __cdecl AbilityComp::metaHandleAbilityElementStrength(
        AbilityComp *const this,
        const proto::AbilityInvokeEntry *entry,
        Player *from_player)
{
  __m128i v3; // xmm0
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v7; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v8; // r14
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v9; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v10; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v11; // r14
  Creature *creature; // rsi
  unsigned __int64 *v13; // rax
  unsigned __int64 v14; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v15; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v16; // r14
  common::milog::MiLogStream *v17; // r14
  ActorAbility *v18; // rax
  unsigned int val; // [rsp+24h] [rbp-12Ch] BYREF
  uint32_t ability_id; // [rsp+28h] [rbp-128h]
  float value; // [rsp+2Ch] [rbp-124h]
  const proto::AbilityInvokeEntryHead *head; // [rsp+30h] [rbp-120h]
  const std::string *ability_data_str; // [rsp+38h] [rbp-118h]
  common::milog::MiLogStream v26; // [rsp+40h] [rbp-110h] BYREF
  std::string v; // [rsp+60h] [rbp-F0h] BYREF
  char v28[208]; // [rsp+80h] [rbp-D0h] BYREF

  v4 = (unsigned __int64)v28;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(160LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 32 16 16 ability_ptr:5467 64 16 7 os:5470 96 24 29 meta_ability_float_value:5460";
  *(_QWORD *)(v4 + 16) = AbilityComp::metaHandleAbilityElementStrength;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -219021312;
  v6[536862722] = -219021312;
  v6[536862723] = -218103808;
  v6[536862724] = -202116109;
  head = proto::AbilityInvokeEntry::head(entry);
  ability_data_str = proto::AbilityInvokeEntry::ability_data[abi:cxx11](entry);
  proto::AbilityFloatValue::AbilityFloatValue((proto::AbilityFloatValue *const)(v4 + 96));
  if ( (unsigned __int8)google::protobuf::MessageLite::ParseFromString(v4 + 96, ability_data_str) != 1 )
  {
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 64));
    v7 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
           (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 64),
           "AbilityFloatValue ParseFromString fails");
    v8 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v7, ", owner:");
    AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11](&v, this);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v8, &v);
    std::string::~string(&v);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
      &v,
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 64));
    AbilityComp::invokeFailNotify(this, entry, from_player, &v);
    std::string::~string(&v);
    common::milog::MiLogStream::create(
      &v26,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "metaHandleAbilityElementStrength",
      5463);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
      &v,
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 64));
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v26, &v);
    std::string::~string(&v);
    common::milog::MiLogStream::~MiLogStream(&v26);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 64));
  }
  else
  {
    ability_id = proto::AbilityInvokeEntryHead::instanced_ability_id(head);
    AbilityComp::findAppliedAbility((AbilityComp *const)(v4 + 32), (__int64)this, ability_id);
    if ( std::operator==<ActorAbility>((const std::shared_ptr<ActorAbility> *)(v4 + 32), 0LL) )
    {
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 64));
      v9 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
             (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 64),
             "AbilityFloatValue can't find ability, ability_id:");
      v10 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v9, ability_id);
      v11 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v10, aEntity_0[0]);
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      creature = this->creature_;
      v13 = (unsigned __int64 *)creature;
      if ( *(_BYTE *)(((unsigned __int64)creature >> 3) + 0x7FFF8000) )
        v13 = (unsigned __int64 *)__asan_report_load8(this->creature_);
      v14 = *v13;
      if ( *(_BYTE *)((v14 >> 3) + 0x7FFF8000) )
        v14 = __asan_report_load8(v14);
      (*(void (__fastcall **)(common::milog::MiLogStream *, Creature *))v14)(&v26, creature);
      v15 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v11, (const std::string *)&v26);
      v16 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v15, ", owner:");
      AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11](&v, this);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v16, &v);
      std::string::~string(&v);
      std::string::~string(&v26);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        &v,
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 64));
      AbilityComp::invokeFailNotify(this, entry, from_player, &v);
      std::string::~string(&v);
      common::milog::MiLogStream::create(
        &v26,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "metaHandleAbilityElementStrength",
        5470);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        &v,
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 64));
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v26, &v);
      std::string::~string(&v);
      common::milog::MiLogStream::~MiLogStream(&v26);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 64));
    }
    else
    {
      *(float *)v3.m128i_i32 = proto::AbilityFloatValue::value((const proto::AbilityFloatValue *const)(v4 + 96));
      LODWORD(value) = _mm_cvtsi128_si32(v3);
      if ( !std::isfinite(value) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&v,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/ability/ability_comp.cpp",
          "metaHandleAbilityElementStrength",
          5476);
        v17 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                (common::milog::MiLogStream *const)&v,
                (const char (*)[22])"client value nan uid:");
        val = Player::getUid(from_player);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, &val);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v);
      }
      else
      {
        v18 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
        ActorAbility::setElemStrength(v18, value);
      }
    }
    std::shared_ptr<ActorAbility>::~shared_ptr((std::shared_ptr<ActorAbility> *const)(v4 + 32));
  }
  proto::AbilityFloatValue::~AbilityFloatValue((proto::AbilityFloatValue *const)(v4 + 96));
  if ( v28 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 5483: range 00000000136FA7A0-00000000136FAB37
void __cdecl AbilityComp::metaHandleSetKilledState(
        AbilityComp *const this,
        const proto::AbilityInvokeEntry *entry,
        Player *from_player)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v6; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v7; // r14
  bool v8; // cl
  const std::string *ability_data_str; // [rsp+28h] [rbp-F8h]
  common::milog::MiLogStream v11; // [rsp+30h] [rbp-F0h] BYREF
  std::string v; // [rsp+50h] [rbp-D0h] BYREF
  char v13[176]; // [rsp+70h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 32 16 7 os:5489 64 24 28 meta_ability_set_killed:5486";
  *(_QWORD *)(v3 + 16) = AbilityComp::metaHandleSetKilledState;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -219021312;
  v5[536862722] = -218103808;
  v5[536862723] = -202116109;
  proto::AbilityInvokeEntry::head(entry);
  ability_data_str = proto::AbilityInvokeEntry::ability_data[abi:cxx11](entry);
  proto::AbilityMetaSetKilledState::AbilityMetaSetKilledState((proto::AbilityMetaSetKilledState *const)(v3 + 64));
  if ( (unsigned __int8)google::protobuf::MessageLite::ParseFromString(v3 + 64, ability_data_str) != 1 )
  {
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 32));
    v6 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
           (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 32),
           "AbilityMetaSetKilledState ParseFromString fails");
    v7 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v6, ", owner:");
    AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11](&v, this);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v7, &v);
    std::string::~string(&v);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
      &v,
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 32));
    AbilityComp::invokeFailNotify(this, entry, from_player, &v);
    std::string::~string(&v);
    common::milog::MiLogStream::create(
      &v11,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "metaHandleSetKilledState",
      5489);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
      &v,
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 32));
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v11, &v);
    std::string::~string(&v);
    common::milog::MiLogStream::~MiLogStream(&v11);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 32));
  }
  else
  {
    v8 = proto::AbilityMetaSetKilledState::killed((const proto::AbilityMetaSetKilledState *const)(v3 + 64));
    if ( *(_BYTE *)(((unsigned __int64)&this->is_killed_ >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)this + 20) & 7) >= *(_BYTE *)(((unsigned __int64)&this->is_killed_ >> 3) + 0x7FFF8000) )
    {
      __asan_report_store1(&this->is_killed_);
    }
    this->is_killed_ = v8;
  }
  proto::AbilityMetaSetKilledState::~AbilityMetaSetKilledState((proto::AbilityMetaSetKilledState *const)(v3 + 64));
  if ( v13 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 5497: range 00000000136FAB38-00000000136FC674
void __cdecl AbilityComp::metaHandleAddNewAbility(
        AbilityComp *const this,
        const proto::AbilityInvokeEntry *entry,
        Player *from_player)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v6; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v7; // r14
  const proto::AbilityString *v8; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v9; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v10; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v11; // r14
  Creature *creature; // rsi
  unsigned __int64 *v13; // rax
  unsigned __int64 v14; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v15; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v16; // r14
  const proto::AbilityString *v17; // rax
  const std::string *v18; // r14
  const proto::AbilityString *v19; // rax
  google::protobuf::uint32 v20; // eax
  const proto::AbilityString *v21; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v22; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v23; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v24; // r14
  Creature *v25; // rsi
  unsigned __int64 *v26; // rax
  unsigned __int64 v27; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v28; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v29; // r14
  const proto::AbilityString *v30; // rax
  const std::string *v31; // r14
  const proto::AbilityString *v32; // rax
  google::protobuf::uint32 v33; // eax
  const proto::AbilityString *v34; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v35; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v36; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v37; // r14
  Creature *v38; // rsi
  unsigned __int64 *v39; // rax
  unsigned __int64 v40; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v41; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v42; // r14
  const proto::AbilityString *v43; // rax
  const std::string *v44; // r14
  const proto::AbilityString *v45; // rax
  google::protobuf::uint32 v46; // eax
  _BOOL4 v47; // r14d
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v48; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v49; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v50; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v51; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v52; // r14
  Creature *v53; // rsi
  unsigned __int64 *v54; // rax
  unsigned __int64 v55; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v56; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v57; // r14
  int v58; // r14d
  float v59; // xmm0_4
  common::milog::MiLogStream *v60; // rax
  common::milog::MiLogStream *v61; // rax
  common::milog::MiLogStream *v62; // r14
  std::any *v63; // r8
  std::pair<std::_Rb_tree_iterator<std::pair<int const,std::any> >,bool> v64; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v65; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v66; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v67; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v68; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v69; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v70; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v71; // r14
  Creature *v72; // rsi
  unsigned __int64 *v73; // rax
  unsigned __int64 v74; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v75; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v76; // r14
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v77; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v78; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v79; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v80; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v81; // r14
  Creature *v82; // rsi
  unsigned __int64 *v83; // rax
  unsigned __int64 v84; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v85; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v86; // r14
  __int64 Uid; // r15
  __int64 EntityId; // r14
  bool v89; // al
  const char *v90; // [rsp+10h] [rbp-2A0h]
  unsigned int ability_id; // [rsp+34h] [rbp-27Ch]
  uint32_t ability_name_hash; // [rsp+38h] [rbp-278h]
  uint32_t ability_override_hash; // [rsp+3Ch] [rbp-274h]
  google::protobuf::RepeatedPtrField<proto::AbilityScalarValueEntry>::const_iterator __for_begin; // [rsp+40h] [rbp-270h] BYREF
  google::protobuf::RepeatedPtrField<proto::AbilityScalarValueEntry>::const_iterator __for_end; // [rsp+48h] [rbp-268h] BYREF
  const proto::AbilityInvokeEntryHead *head; // [rsp+50h] [rbp-260h]
  const std::string *ability_data_str; // [rsp+58h] [rbp-258h]
  const proto::AbilityAppliedAbility *meta_ability; // [rsp+60h] [rbp-250h]
  const google::protobuf::RepeatedPtrField<proto::AbilityScalarValueEntry> *proto_override_map; // [rsp+68h] [rbp-248h]
  const google::protobuf::RepeatedPtrField<proto::AbilityScalarValueEntry> *__for_range; // [rsp+70h] [rbp-240h]
  const proto::AbilityScalarValueEntry *value_entry; // [rsp+78h] [rbp-238h]
  common::milog::MiLogStream v104; // [rsp+80h] [rbp-230h] BYREF
  std::string v; // [rsp+A0h] [rbp-210h] BYREF
  char v106[496]; // [rsp+C0h] [rbp-1F0h] BYREF

  v3 = (unsigned __int64)v106;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(448LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "8 32 4 30 ability_special_name_hash:5547 48 16 10 value:5533 80 16 7 os:5558 112 32 29 meta_abil"
                        "ity_add_ability:5500 176 32 17 ability_name:5508 240 32 21 ability_override:5515 304 32 8 key:55"
                        "26 368 48 17 override_map:5523";
  *(_QWORD *)(v3 + 16) = AbilityComp::metaHandleAddNewAbility;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61956;
  v5[536862722] = 62194;
  v5[536862723] = 62194;
  v5[536862724] = -219021312;
  v5[536862725] = 62194;
  v5[536862726] = -219021312;
  v5[536862727] = 62194;
  v5[536862728] = -219021312;
  v5[536862729] = 62194;
  v5[536862730] = -219021312;
  v5[536862731] = 62194;
  v5[536862733] = -202116109;
  head = proto::AbilityInvokeEntry::head(entry);
  ability_data_str = proto::AbilityInvokeEntry::ability_data[abi:cxx11](entry);
  proto::AbilityMetaAddAbility::AbilityMetaAddAbility((proto::AbilityMetaAddAbility *const)(v3 + 112));
  if ( (unsigned __int8)google::protobuf::MessageLite::ParseFromString(v3 + 112, ability_data_str) != 1 )
  {
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 80));
    v6 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
           (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 80),
           "AbilityMetaAddAbility ParseFromString fails");
    v7 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v6, ", owner:");
    AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11](&v, this);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v7, &v);
    std::string::~string(&v);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
      &v,
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 80));
    AbilityComp::invokeFailNotify(this, entry, from_player, &v);
    std::string::~string(&v);
    common::milog::MiLogStream::create(
      &v104,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "metaHandleAddNewAbility",
      5503);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
      &v,
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 80));
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v104, &v);
    std::string::~string(&v);
    common::milog::MiLogStream::~MiLogStream(&v104);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 80));
  }
  else
  {
    meta_ability = proto::AbilityMetaAddAbility::ability((const proto::AbilityMetaAddAbility *const)(v3 + 112));
    ability_id = proto::AbilityAppliedAbility::instanced_ability_id(meta_ability);
    std::string::basic_string(v3 + 176);
    v8 = proto::AbilityAppliedAbility::ability_name(meta_ability);
    if ( abilityStringToStdString(v8, (std::string *)(v3 + 176)) )
    {
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 80));
      v9 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
             (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 80),
             "abilityStringToStdString fails, ability_id:");
      v10 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v9, ability_id);
      v11 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v10, aEntity_0[0]);
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      creature = this->creature_;
      v13 = (unsigned __int64 *)creature;
      if ( *(_BYTE *)(((unsigned __int64)creature >> 3) + 0x7FFF8000) )
        v13 = (unsigned __int64 *)__asan_report_load8(this->creature_);
      v14 = *v13;
      if ( *(_BYTE *)((v14 >> 3) + 0x7FFF8000) )
        v14 = __asan_report_load8(v14);
      (*(void (__fastcall **)(common::milog::MiLogStream *, Creature *))v14)(&v104, creature);
      v15 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v11, (const std::string *)&v104);
      v16 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v15, ", owner:");
      AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11](&v, this);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v16, &v);
      std::string::~string(&v);
      std::string::~string(&v104);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        &v,
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 80));
      AbilityComp::invokeFailNotify(this, entry, from_player, &v);
      std::string::~string(&v);
      common::milog::MiLogStream::create(
        &v104,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "metaHandleAddNewAbility",
        5511);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        &v,
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 80));
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v104, &v);
      std::string::~string(&v);
      common::milog::MiLogStream::~MiLogStream(&v104);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 80));
      v17 = proto::AbilityAppliedAbility::ability_name(meta_ability);
      v18 = proto::AbilityString::str[abi:cxx11](v17);
      v19 = proto::AbilityAppliedAbility::ability_name(meta_ability);
      v20 = proto::AbilityString::hash(v19);
      AbilityComp::invokeNotRegisterNotifyGMServerLog(this, v20, v18, from_player);
    }
    else
    {
      std::string::basic_string(v3 + 240);
      v21 = proto::AbilityAppliedAbility::ability_override(meta_ability);
      if ( abilityStringToStdString(v21, (std::string *)(v3 + 240)) )
      {
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 80));
        v22 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 80),
                "abilityStringToStdString fails, ability_id:");
        v23 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v22, ability_id);
        v24 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v23, aEntity_0[0]);
        if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->creature_);
        v25 = this->creature_;
        v26 = (unsigned __int64 *)v25;
        if ( *(_BYTE *)(((unsigned __int64)v25 >> 3) + 0x7FFF8000) )
          v26 = (unsigned __int64 *)__asan_report_load8(this->creature_);
        v27 = *v26;
        if ( *(_BYTE *)((v27 >> 3) + 0x7FFF8000) )
          v27 = __asan_report_load8(v27);
        (*(void (__fastcall **)(common::milog::MiLogStream *, Creature *))v27)(&v104, v25);
        v28 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v24, (const std::string *)&v104);
        v29 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v28, ", owner:");
        AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11](&v, this);
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v29, &v);
        std::string::~string(&v);
        std::string::~string(&v104);
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
          &v,
          (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 80));
        AbilityComp::invokeFailNotify(this, entry, from_player, &v);
        std::string::~string(&v);
        common::milog::MiLogStream::create(
          &v104,
          &common::milog::MiLogDefault::default_log_obj_,
          0x13u,
          "./src/ability/ability_comp.cpp",
          "metaHandleAddNewAbility",
          5518);
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
          &v,
          (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 80));
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v104, &v);
        std::string::~string(&v);
        common::milog::MiLogStream::~MiLogStream(&v104);
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 80));
        v30 = proto::AbilityAppliedAbility::ability_override(meta_ability);
        v31 = proto::AbilityString::str[abi:cxx11](v30);
        v32 = proto::AbilityAppliedAbility::ability_override(meta_ability);
        v33 = proto::AbilityString::hash(v32);
        AbilityComp::invokeNotRegisterNotifyGMServerLog(this, v33, v31, from_player);
      }
      else
      {
        proto_override_map = proto::AbilityAppliedAbility::override_map(meta_ability);
        std::map<int,std::any>::map((std::map<int,std::any> *const)(v3 + 368));
        __for_range = proto_override_map;
        __for_begin.it_ = google::protobuf::RepeatedPtrField<proto::AbilityScalarValueEntry>::begin(proto_override_map).it_;
        __for_end.it_ = google::protobuf::RepeatedPtrField<proto::AbilityScalarValueEntry>::end(proto_override_map).it_;
        while ( google::protobuf::internal::RepeatedPtrIterator<proto::AbilityScalarValueEntry const>::operator!=(
                  &__for_begin,
                  &__for_end) )
        {
          value_entry = google::protobuf::internal::RepeatedPtrIterator<proto::AbilityScalarValueEntry const>::operator*(&__for_begin);
          std::string::basic_string(v3 + 304);
          v34 = proto::AbilityScalarValueEntry::key(value_entry);
          if ( abilityStringToStdString(v34, (std::string *)(v3 + 304)) )
          {
            common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 80));
            v35 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                    (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 80),
                    "abilityStringToStdString fails, ability_id:");
            v36 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v35, ability_id);
            v37 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v36, aEntity_0[0]);
            if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
              __asan_report_load8(&this->creature_);
            v38 = this->creature_;
            v39 = (unsigned __int64 *)v38;
            if ( *(_BYTE *)(((unsigned __int64)v38 >> 3) + 0x7FFF8000) )
              v39 = (unsigned __int64 *)__asan_report_load8(this->creature_);
            v40 = *v39;
            if ( *(_BYTE *)((v40 >> 3) + 0x7FFF8000) )
              v40 = __asan_report_load8(v40);
            (*(void (__fastcall **)(common::milog::MiLogStream *, Creature *))v40)(&v104, v38);
            v41 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                    v37,
                    (const std::string *)&v104);
            v42 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v41, ", owner:");
            AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11](&v, this);
            common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v42, &v);
            std::string::~string(&v);
            std::string::~string(&v104);
            common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
              &v,
              (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 80));
            AbilityComp::invokeFailNotify(this, entry, from_player, &v);
            std::string::~string(&v);
            common::milog::MiLogStream::create(
              &v104,
              &common::milog::MiLogDefault::default_log_obj_,
              0x13u,
              "./src/ability/ability_comp.cpp",
              "metaHandleAddNewAbility",
              5529);
            common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
              &v,
              (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 80));
            common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v104, &v);
            std::string::~string(&v);
            common::milog::MiLogStream::~MiLogStream(&v104);
            common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 80));
            v43 = proto::AbilityScalarValueEntry::key(value_entry);
            v44 = proto::AbilityString::str[abi:cxx11](v43);
            v45 = proto::AbilityScalarValueEntry::key(value_entry);
            v46 = proto::AbilityString::hash(v45);
            AbilityComp::invokeNotRegisterNotifyGMServerLog(this, v46, v44, from_player);
            v47 = 0;
          }
          else
          {
            *(_QWORD *)(v3 + 48) = 0LL;
            *(_QWORD *)(v3 + 56) = 0LL;
            if ( anyFromScalarValueEntry(value_entry, (std::any *)(v3 + 48)) )
            {
              common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 80));
              v48 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 80),
                      "anyFromScalarValueEntry fails, ability_id:");
              v49 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v48, ability_id);
              v50 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v49, ", ability_name:");
              v51 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                      v50,
                      (const std::string *)(v3 + 176));
              v52 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v51, aEntity_0[0]);
              if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
                __asan_report_load8(&this->creature_);
              v53 = this->creature_;
              v54 = (unsigned __int64 *)v53;
              if ( *(_BYTE *)(((unsigned __int64)v53 >> 3) + 0x7FFF8000) )
                v54 = (unsigned __int64 *)__asan_report_load8(this->creature_);
              v55 = *v54;
              if ( *(_BYTE *)((v55 >> 3) + 0x7FFF8000) )
                v55 = __asan_report_load8(v55);
              (*(void (__fastcall **)(common::milog::MiLogStream *, Creature *))v55)(&v104, v53);
              v56 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                      v52,
                      (const std::string *)&v104);
              v57 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v56, ", owner:");
              AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11](&v, this);
              common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v57, &v);
              std::string::~string(&v);
              std::string::~string(&v104);
              common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
                &v,
                (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 80));
              AbilityComp::invokeFailNotify(this, entry, from_player, &v);
              std::string::~string(&v);
              common::milog::MiLogStream::create(
                &v104,
                &common::milog::MiLogDefault::default_log_obj_,
                0x13u,
                "./src/ability/ability_comp.cpp",
                "metaHandleAddNewAbility",
                5536);
              common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
                &v,
                (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 80));
              common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v104, &v);
              std::string::~string(&v);
              common::milog::MiLogStream::~MiLogStream(&v104);
              common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 80));
              v58 = 0;
            }
            else if ( proto::AbilityScalarValueEntry::value_type(value_entry) == ABILITY_SCALAR_TYPE_FLOAT
                   && (v59 = safeAnyCast<float>((const std::any *)(v3 + 48)), !std::isfinite(v59)) )
            {
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)&v,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/ability/ability_comp.cpp",
                "metaHandleAddNewAbility",
                5543);
              v60 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                      (common::milog::MiLogStream *const)&v,
                      (const char (*)[22])"client value nan key:");
              v61 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                      v60,
                      (const std::string *)(v3 + 304));
              v62 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v61, (const char (*)[6])" uid:");
              *(_DWORD *)(v3 + 32) = Player::getUid(from_player);
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v62,
                (const unsigned int *)(v3 + 32));
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v);
              v58 = 0;
            }
            else
            {
              *(_DWORD *)(v3 + 32) = getStringHash((const std::string *)(v3 + 304));
              v64 = std::map<int,std::any>::emplace<unsigned int &,std::any&>(
                      (std::map<int,std::any> *const)(v3 + 368),
                      (unsigned int *)(v3 + 32),
                      (std::any *)(v3 + 48),
                      (unsigned int *)(v3 + 32),
                      v63);
              if ( !v64.second )
              {
                common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 80));
                v65 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 80),
                        "duplicate key:");
                v66 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                        v65,
                        (const std::string *)(v3 + 304));
                v67 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v66, ", ability_id:");
                v68 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v67, ability_id);
                v69 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v68, ", ability_name:");
                v70 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                        v69,
                        (const std::string *)(v3 + 176));
                v71 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v70, aEntity_0[0]);
                if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
                  __asan_report_load8(&this->creature_);
                v72 = this->creature_;
                v73 = (unsigned __int64 *)v72;
                if ( *(_BYTE *)(((unsigned __int64)v72 >> 3) + 0x7FFF8000) )
                  v73 = (unsigned __int64 *)__asan_report_load8(this->creature_);
                v74 = *v73;
                if ( *(_BYTE *)((v74 >> 3) + 0x7FFF8000) )
                  v74 = __asan_report_load8(v74);
                (*(void (__fastcall **)(common::milog::MiLogStream *, Creature *))v74)(&v104, v72);
                v75 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                        v71,
                        (const std::string *)&v104);
                v76 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v75, ", owner:");
                AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11](&v, this);
                common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v76, &v);
                std::string::~string(&v);
                std::string::~string(&v104);
                common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
                  &v,
                  (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 80));
                AbilityComp::invokeFailNotify(this, entry, from_player, &v);
                std::string::~string(&v);
                common::milog::MiLogStream::create(
                  &v104,
                  &common::milog::MiLogDefault::default_log_obj_,
                  0x13u,
                  "./src/ability/ability_comp.cpp",
                  "metaHandleAddNewAbility",
                  5550);
                common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
                  &v,
                  (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 80));
                common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v104, &v);
                std::string::~string(&v);
                common::milog::MiLogStream::~MiLogStream(&v104);
                common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 80));
                v58 = 0;
              }
              else
              {
                v58 = 1;
              }
            }
            std::any::~any((std::any *const)(v3 + 48));
            v47 = v58 == 1;
          }
          std::string::~string((void *)(v3 + 304));
          if ( !v47 )
            goto LABEL_67;
          google::protobuf::internal::RepeatedPtrIterator<proto::AbilityScalarValueEntry const>::operator++(&__for_begin);
        }
        ability_name_hash = getStringHash((const std::string *)(v3 + 176));
        ability_override_hash = getStringHash((const std::string *)(v3 + 240));
        if ( (unsigned int)AbilityComp::addNewAbility(
                             this,
                             ability_name_hash,
                             ability_override_hash,
                             (const std::map<int,std::any> *)(v3 + 368),
                             ability_id) )
        {
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 80));
          v77 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                  (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 80),
                  "addNewAbility fails, ability_name:");
          v78 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                  v77,
                  (const std::string *)(v3 + 176));
          v79 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v78, ", ability_id:");
          v80 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v79, ability_id);
          v81 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v80, aEntity_0[0]);
          if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->creature_);
          v82 = this->creature_;
          v83 = (unsigned __int64 *)v82;
          if ( *(_BYTE *)(((unsigned __int64)v82 >> 3) + 0x7FFF8000) )
            v83 = (unsigned __int64 *)__asan_report_load8(this->creature_);
          v84 = *v83;
          if ( *(_BYTE *)((v84 >> 3) + 0x7FFF8000) )
            v84 = __asan_report_load8(v84);
          (*(void (__fastcall **)(common::milog::MiLogStream *, Creature *))v84)(&v104, v82);
          v85 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                  v81,
                  (const std::string *)&v104);
          v86 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v85, ", owner:");
          AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11](&v, this);
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v86, &v);
          std::string::~string(&v);
          std::string::~string(&v104);
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
            &v,
            (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 80));
          AbilityComp::invokeFailNotify(this, entry, from_player, &v);
          std::string::~string(&v);
          common::milog::MiLogStream::create(
            &v104,
            &common::milog::MiLogDefault::default_log_obj_,
            0x13u,
            "./src/ability/ability_comp.cpp",
            "metaHandleAddNewAbility",
            5558);
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
            &v,
            (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 80));
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v104, &v);
          std::string::~string(&v);
          common::milog::MiLogStream::~MiLogStream(&v104);
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 80));
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&v,
          &common::milog::MiLogDefault::default_log_obj_,
          0x14u,
          "./src/ability/ability_comp.cpp",
          "metaHandleAddNewAbility",
          5560);
        Uid = Player::getUid(from_player);
        if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->creature_);
        EntityId = Entity::getEntityId((const Entity *const)this->creature_);
        v90 = (const char *)std::string::c_str(v3 + 176);
        v89 = AbilityComp::isInMpMode(this);
        common::milog::MiLogStream::operator()(
          (common::milog::MiLogStream *const)&v,
          "|%u|AddNewAbility|%s|%s|%u|%u|%u|%s",
          v89,
          v90,
          byte_24FD2920,
          ability_id,
          EntityId,
          Uid,
          byte_24FD2920);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v);
LABEL_67:
        std::map<int,std::any>::~map((std::map<int,std::any> *const)(v3 + 368));
      }
      std::string::~string((void *)(v3 + 240));
    }
    std::string::~string((void *)(v3 + 176));
  }
  proto::AbilityMetaAddAbility::~AbilityMetaAddAbility((proto::AbilityMetaAddAbility *const)(v3 + 112));
  if ( v106 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8034) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 5565: range 00000000136FC676-00000000136FCBCE
void __cdecl AbilityComp::metaHandleRemoveAbility(
        AbilityComp *const this,
        const proto::AbilityInvokeEntry *entry,
        Player *from_player)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  __int64 Uid; // r15
  __int64 EntityId; // r14
  std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  const std::string *v9; // rax
  bool v10; // al
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v11; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v12; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v13; // r14
  Creature *creature; // rsi
  unsigned __int64 *v15; // rax
  unsigned __int64 v16; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v17; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v18; // r14
  const char *v19; // [rsp+10h] [rbp-100h]
  uint32_t ability_id; // [rsp+34h] [rbp-DCh]
  const proto::AbilityInvokeEntryHead *head; // [rsp+38h] [rbp-D8h]
  std::string v; // [rsp+40h] [rbp-D0h] BYREF
  common::milog::MiLogStream v25; // [rsp+60h] [rbp-B0h] BYREF
  char v26[144]; // [rsp+80h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v26;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 32 16 16 ability_ptr:5568 64 16 7 os:5575";
  *(_QWORD *)(v3 + 16) = AbilityComp::metaHandleRemoveAbility;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -219021312;
  v5[536862722] = -202178560;
  head = proto::AbilityInvokeEntry::head(entry);
  ability_id = proto::AbilityInvokeEntryHead::instanced_ability_id(head);
  AbilityComp::findAppliedAbility((AbilityComp *const)(v3 + 32), (__int64)this, ability_id);
  if ( std::operator!=<ActorAbility>((const std::shared_ptr<ActorAbility> *)(v3 + 32), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v25,
      &common::milog::MiLogDefault::default_log_obj_,
      0x14u,
      "./src/ability/ability_comp.cpp",
      "metaHandleRemoveAbility",
      5571);
    Uid = Player::getUid(from_player);
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    EntityId = Entity::getEntityId((const Entity *const)this->creature_);
    v8 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
    v9 = ActorAbility::getName[abi:cxx11](v8);
    v19 = (const char *)std::string::c_str(v9);
    v10 = AbilityComp::isInMpMode(this);
    common::milog::MiLogStream::operator()(
      &v25,
      "|%u|RemoveAbility|%s|%s|%u|%u|%u|%s",
      v10,
      v19,
      byte_24FD2920,
      ability_id,
      EntityId,
      Uid,
      byte_24FD2920);
    common::milog::MiLogStream::~MiLogStream(&v25);
  }
  if ( (unsigned int)AbilityComp::removeAbility(this, ability_id) )
  {
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
    v11 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
            (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64),
            "removeAbility fails, ability_id:");
    v12 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v11, ability_id);
    v13 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v12, aEntity_0[0]);
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    creature = this->creature_;
    v15 = (unsigned __int64 *)creature;
    if ( *(_BYTE *)(((unsigned __int64)creature >> 3) + 0x7FFF8000) )
      v15 = (unsigned __int64 *)__asan_report_load8(this->creature_);
    v16 = *v15;
    if ( *(_BYTE *)((v16 >> 3) + 0x7FFF8000) )
      v16 = __asan_report_load8(v16);
    (*(void (__fastcall **)(std::string *, Creature *))v16)(&v, creature);
    v17 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v13, &v);
    v18 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v17, ", owner:");
    AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11]((std::string *)&v25, this);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v18, (const std::string *)&v25);
    std::string::~string(&v25);
    std::string::~string(&v);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
      (std::string *)&v25,
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
    AbilityComp::invokeFailNotify(this, entry, from_player, (const std::string *)&v25);
    std::string::~string(&v25);
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&v,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "metaHandleRemoveAbility",
      5575);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
      (std::string *)&v25,
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
      (common::milog::MiLogStream *const)&v,
      (const std::string *)&v25);
    std::string::~string(&v25);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
  }
  std::shared_ptr<ActorAbility>::~shared_ptr((std::shared_ptr<ActorAbility> *const)(v3 + 32));
  if ( v26 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 5581: range 00000000136FCBD0-00000000136FD192
void __cdecl AbilityComp::metaHandleSetModifierApplyEntityId(
        AbilityComp *const this,
        const proto::AbilityInvokeEntry *entry,
        Player *from_player)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v6; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v7; // r14
  ActorModifier *v8; // rax
  __int64 Uid; // r15
  __int64 EntityId; // r14
  std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  const std::string *v12; // rax
  std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  const std::string *v14; // rax
  bool v15; // al
  const char *v16; // [rsp+8h] [rbp-158h]
  const char *v17; // [rsp+10h] [rbp-150h]
  bool is_server_modifier; // [rsp+3Bh] [rbp-125h]
  google::protobuf::uint32 modifier_id; // [rsp+3Ch] [rbp-124h]
  const proto::AbilityInvokeEntryHead *head; // [rsp+40h] [rbp-120h]
  const std::string *ability_data_str; // [rsp+48h] [rbp-118h]
  common::milog::MiLogStream v23; // [rsp+50h] [rbp-110h] BYREF
  std::string v; // [rsp+70h] [rbp-F0h] BYREF
  char v25[208]; // [rsp+90h] [rbp-D0h] BYREF

  v3 = (unsigned __int64)v25;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(160LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 16 17 modifier_ptr:5585 64 16 16 ability_ptr:5598 96 24 38 meta_set_modifier_apply_entity_id:5591";
  *(_QWORD *)(v3 + 16) = AbilityComp::metaHandleSetModifierApplyEntityId;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -219021312;
  v5[536862722] = -219021312;
  v5[536862723] = -218103808;
  v5[536862724] = -202116109;
  head = proto::AbilityInvokeEntry::head(entry);
  modifier_id = proto::AbilityInvokeEntryHead::instanced_modifier_id(head);
  is_server_modifier = proto::AbilityInvokeEntryHead::is_serverbuff_modifier(head);
  AbilityComp::findAppliedModifier((AbilityComp *const)(v3 + 32), this, modifier_id, is_server_modifier);
  if ( !std::operator==<ActorModifier>((const std::shared_ptr<ActorModifier> *)(v3 + 32), 0LL) )
  {
    ability_data_str = proto::AbilityInvokeEntry::ability_data[abi:cxx11](entry);
    proto::AbilityMetaSetModifierApplyEntityId::AbilityMetaSetModifierApplyEntityId((proto::AbilityMetaSetModifierApplyEntityId *const)(v3 + 96));
    if ( (unsigned __int8)google::protobuf::MessageLite::ParseFromString(v3 + 96, ability_data_str) != 1 )
    {
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
      v6 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
             (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64),
             "AbilityMetaSetModifierApplyEntityId ParseFromString fails");
      v7 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v6, ", owner:");
      AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11](&v, this);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v7, &v);
      std::string::~string(&v);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        &v,
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
      AbilityComp::invokeFailNotify(this, entry, from_player, &v);
      std::string::~string(&v);
      common::milog::MiLogStream::create(
        &v23,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "metaHandleSetModifierApplyEntityId",
        5594);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        &v,
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v23, &v);
      std::string::~string(&v);
      common::milog::MiLogStream::~MiLogStream(&v23);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
    }
    else
    {
      v8 = std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
      ActorModifier::setApplyEntityId(v8, modifier_id);
      std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
      ActorModifier::getParentAbility((const ActorModifier *const)(v3 + 64));
      if ( std::operator!=<ActorAbility>((const std::shared_ptr<ActorAbility> *)(v3 + 64), 0LL) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&v,
          &common::milog::MiLogDefault::default_log_obj_,
          0x14u,
          "./src/ability/ability_comp.cpp",
          "metaHandleSetModifierApplyEntityId",
          5601);
        Uid = Player::getUid(from_player);
        if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->creature_);
        EntityId = Entity::getEntityId((const Entity *const)this->creature_);
        v11 = std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
        v12 = ActorModifier::getName[abi:cxx11](v11);
        v17 = (const char *)std::string::c_str(v12);
        v13 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        v14 = ActorAbility::getName[abi:cxx11](v13);
        v16 = (const char *)std::string::c_str(v14);
        v15 = AbilityComp::isInMpMode(this);
        common::milog::MiLogStream::operator()(
          (common::milog::MiLogStream *const)&v,
          "|%u|SetModifierApplyEntityId|%s|%s|%u|%u|%u|%s",
          v15,
          v16,
          v17,
          modifier_id,
          EntityId,
          Uid,
          byte_24FD2920);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v);
      }
      std::shared_ptr<ActorAbility>::~shared_ptr((std::shared_ptr<ActorAbility> *const)(v3 + 64));
    }
    proto::AbilityMetaSetModifierApplyEntityId::~AbilityMetaSetModifierApplyEntityId((proto::AbilityMetaSetModifierApplyEntityId *const)(v3 + 96));
  }
  std::shared_ptr<ActorModifier>::~shared_ptr((std::shared_ptr<ActorModifier> *const)(v3 + 32));
  if ( v25 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 5607: range 00000000136FD194-00000000136FDF92
void __cdecl AbilityComp::metaHandleModifierDurabilityChange(
        AbilityComp *const this,
        const proto::AbilityInvokeEntry *entry,
        Player *from_player)
{
  __m128i v3; // xmm0
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  const std::string *v7; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v8; // r14
  Creature *v9; // rsi
  unsigned __int64 *v10; // rax
  unsigned __int64 v11; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v12; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v13; // r14
  bool is_serverbuff_modifier; // r14
  int v15; // eax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v16; // r14
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v17; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v18; // r14
  Creature *creature; // rsi
  unsigned __int64 *v20; // rax
  unsigned __int64 v21; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v22; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v23; // r14
  __m128i v24; // xmm0
  common::milog::MiLogStream *v25; // r14
  common::milog::MiLogStream *v26; // r14
  ActorModifier *v27; // rax
  ActorModifier *v28; // rax
  common::milog::MiLogStream *v29; // rcx
  int v30; // r14d
  Scene *v31; // rax
  __int64 SceneDiscreteTimeMs; // rax
  __int64 EntityId; // r15
  std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v34; // rax
  std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v35; // rax
  const std::string *v36; // rax
  const char *v37; // r14
  std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v38; // rax
  const std::string *v39; // rax
  bool v40; // al
  const char *v41; // [rsp+10h] [rbp-190h]
  uint32_t ModifierId; // [rsp+18h] [rbp-188h]
  uint32_t Uid; // [rsp+1Ch] [rbp-184h]
  const char *v44; // [rsp+20h] [rbp-180h]
  unsigned int val; // [rsp+50h] [rbp-150h] BYREF
  float reduce_ratio; // [rsp+54h] [rbp-14Ch]
  float remaining; // [rsp+58h] [rbp-148h]
  uint32_t index; // [rsp+5Ch] [rbp-144h]
  const proto::AbilityInvokeEntryHead *head; // [rsp+60h] [rbp-140h]
  ElementDurabilityInfo *durability_info; // [rsp+68h] [rbp-138h]
  std::string output; // [rsp+70h] [rbp-130h] BYREF
  std::string v; // [rsp+90h] [rbp-110h] BYREF
  std::string reason; // [rsp+B0h] [rbp-F0h] BYREF
  char v56[208]; // [rsp+D0h] [rbp-D0h] BYREF

  v4 = (unsigned __int64)v56;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(160LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 32 16 17 modifier_ptr:5616 64 16 16 ability_ptr:5652 96 32 36 meta_modifier_durability_change:5609";
  *(_QWORD *)(v4 + 16) = AbilityComp::metaHandleModifierDurabilityChange;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -219021312;
  v6[536862722] = -219021312;
  v6[536862724] = -202116109;
  head = proto::AbilityInvokeEntry::head(entry);
  proto::AbilityMetaModifierDurabilityChange::AbilityMetaModifierDurabilityChange((proto::AbilityMetaModifierDurabilityChange *const)(v4 + 96));
  v7 = proto::AbilityInvokeEntry::ability_data[abi:cxx11](entry);
  if ( (unsigned __int8)google::protobuf::MessageLite::ParseFromString(v4 + 96, v7) == 1 )
  {
    is_serverbuff_modifier = proto::AbilityInvokeEntryHead::is_serverbuff_modifier(head);
    v15 = proto::AbilityInvokeEntryHead::instanced_modifier_id(head);
    AbilityComp::findAppliedModifier((AbilityComp *const)(v4 + 32), this, v15, is_serverbuff_modifier);
    if ( std::operator==<ActorModifier>((const std::shared_ptr<ActorModifier> *)(v4 + 32), 0LL) )
    {
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 64));
      v16 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
              (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 64),
              "findAppliedModifier get applied modifier fails, head:");
      google::protobuf::Message::ShortDebugString[abi:cxx11](&output, &head->google::protobuf::Message);
      v17 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v16, &output);
      v18 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v17, aEntity_0[0]);
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      creature = this->creature_;
      v20 = (unsigned __int64 *)creature;
      if ( *(_BYTE *)(((unsigned __int64)creature >> 3) + 0x7FFF8000) )
        v20 = (unsigned __int64 *)__asan_report_load8(this->creature_);
      v21 = *v20;
      if ( *(_BYTE *)((v21 >> 3) + 0x7FFF8000) )
        v21 = __asan_report_load8(v21);
      (*(void (__fastcall **)(std::string *, Creature *))v21)(&v, creature);
      v22 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v18, &v);
      v23 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v22, ", owner:");
      AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11](&reason, this);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v23, &reason);
      std::string::~string(&reason);
      std::string::~string(&v);
      std::string::~string(&output);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        &reason,
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 64));
      AbilityComp::invokeFailNotify(this, entry, from_player, &reason);
      std::string::~string(&reason);
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&v,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "metaHandleModifierDurabilityChange",
        5619);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        &reason,
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 64));
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
        (common::milog::MiLogStream *const)&v,
        &reason);
      std::string::~string(&reason);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 64));
    }
    else
    {
      *(float *)v3.m128i_i32 = proto::AbilityMetaModifierDurabilityChange::reduce_durability((const proto::AbilityMetaModifierDurabilityChange *const)(v4 + 96));
      LODWORD(reduce_ratio) = _mm_cvtsi128_si32(v3);
      v24 = _mm_cvtsi32_si128(LODWORD(reduce_ratio));
      if ( !std::isfinite(*(float *)v24.m128i_i32) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&reason,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/ability/ability_comp.cpp",
          "metaHandleModifierDurabilityChange",
          5625);
        v25 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
                (common::milog::MiLogStream *const)&reason,
                (const char (*)[35])"client value reduce ratio nan uid:");
        val = Player::getUid(from_player);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v25, &val);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&reason);
      }
      else
      {
        *(float *)v24.m128i_i32 = proto::AbilityMetaModifierDurabilityChange::remain_durability((const proto::AbilityMetaModifierDurabilityChange *const)(v4 + 96));
        LODWORD(remaining) = _mm_cvtsi128_si32(v24);
        if ( !std::isfinite(remaining) )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&reason,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/ability/ability_comp.cpp",
            "metaHandleModifierDurabilityChange",
            5631);
          v26 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                  (common::milog::MiLogStream *const)&reason,
                  (const char (*)[29])"client value remain nan uid:");
          val = Player::getUid(from_player);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v26, &val);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&reason);
        }
        else
        {
          v27 = std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
          index = AbilityComp::getModifierIndexFromDurabilityVec(this, v27);
          if ( index < std::vector<ElementDurabilityInfo>::size(&this->modifier_durability_vec_) )
          {
            if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
              __asan_report_load8(&this->creature_);
            Entity::getScene((const Entity *const)(v4 + 64));
            if ( std::operator==<Scene>(0LL, (const std::shared_ptr<Scene> *)(v4 + 64)) )
            {
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)&reason,
                &common::milog::MiLogDefault::default_log_obj_,
                0x13u,
                "./src/ability/ability_comp.cpp",
                "metaHandleModifierDurabilityChange",
                5644);
              v29 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                      (common::milog::MiLogStream *const)&reason,
                      (const char (*)[25])"getScene fail! creature:");
              if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
                __asan_report_load8(&this->creature_);
              common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v29, this->creature_);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&reason);
              v30 = 0;
            }
            else
            {
              durability_info = std::vector<ElementDurabilityInfo>::operator[](&this->modifier_durability_vec_, index);
              if ( *(_BYTE *)(((unsigned __int64)&durability_info->reduce_ratio >> 3) + 0x7FFF8000) != 0
                && *(_BYTE *)(((unsigned __int64)&durability_info->reduce_ratio >> 3) + 0x7FFF8000) <= 3 )
              {
                __asan_report_store4(&durability_info->reduce_ratio);
              }
              durability_info->reduce_ratio = reduce_ratio;
              if ( *(_BYTE *)(((unsigned __int64)&durability_info->remaining_durability >> 3) + 0x7FFF8000) != 0
                && (char)((((_BYTE)durability_info + 20) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&durability_info->remaining_durability >> 3)
                                                                               + 0x7FFF8000) )
              {
                __asan_report_store4(&durability_info->remaining_durability);
              }
              durability_info->remaining_durability = remaining;
              v31 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
              SceneDiscreteTimeMs = Scene::getSceneDiscreteTimeMs(v31);
              if ( *(_BYTE *)(((unsigned __int64)&durability_info->last_tick_time_ms_ >> 3) + 0x7FFF8000) )
                SceneDiscreteTimeMs = __asan_report_store8(&durability_info->last_tick_time_ms_);
              durability_info->last_tick_time_ms_ = SceneDiscreteTimeMs;
              v30 = 1;
            }
            std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v4 + 64));
            if ( v30 != 1 )
              goto LABEL_46;
          }
          else
          {
            v28 = std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
            AbilityComp::setModifierElementDurability(this, v28, reduce_ratio, remaining);
          }
          std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
          ActorModifier::getParentAbility((const ActorModifier *const)(v4 + 64));
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&v,
            &common::milog::MiLogDefault::default_log_obj_,
            0x14u,
            "./src/ability/ability_comp.cpp",
            "metaHandleModifierDurabilityChange",
            5654);
          google::protobuf::Message::ShortDebugString[abi:cxx11](&reason, (google::protobuf::Message *)(v4 + 96));
          v44 = (const char *)std::string::c_str(&reason);
          Uid = Player::getUid(from_player);
          if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->creature_);
          EntityId = Entity::getEntityId((const Entity *const)this->creature_);
          v34 = std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
          ModifierId = ActorModifier::getModifierId(v34);
          v35 = std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
          v36 = ActorModifier::getName[abi:cxx11](v35);
          v41 = (const char *)std::string::c_str(v36);
          if ( std::operator==<ActorAbility>((const std::shared_ptr<ActorAbility> *)(v4 + 64), 0LL) )
          {
            v37 = byte_24FD2920;
          }
          else
          {
            v38 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
            v39 = ActorAbility::getName[abi:cxx11](v38);
            v37 = (const char *)std::string::c_str(v39);
          }
          v40 = AbilityComp::isInMpMode(this);
          common::milog::MiLogStream::operator()(
            (common::milog::MiLogStream *const)&v,
            "|%u|metaHandleModifierDurabilityChange|%s|%s|%u|%u|%u|%s",
            v40,
            v37,
            v41,
            ModifierId,
            EntityId,
            Uid,
            v44);
          std::string::~string(&reason);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v);
          std::shared_ptr<ActorAbility>::~shared_ptr((std::shared_ptr<ActorAbility> *const)(v4 + 64));
        }
      }
    }
LABEL_46:
    std::shared_ptr<ActorModifier>::~shared_ptr((std::shared_ptr<ActorModifier> *const)(v4 + 32));
    goto LABEL_47;
  }
  common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 64));
  v8 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
         (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 64),
         "AbilityMetaModifierDurabilityChange ParseFromString fails, entiry:");
  if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->creature_);
  v9 = this->creature_;
  v10 = (unsigned __int64 *)v9;
  if ( *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) )
    v10 = (unsigned __int64 *)__asan_report_load8(this->creature_);
  v11 = *v10;
  if ( *(_BYTE *)((v11 >> 3) + 0x7FFF8000) )
    v11 = __asan_report_load8(v11);
  (*(void (__fastcall **)(std::string *, Creature *))v11)(&v, v9);
  v12 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v8, &v);
  v13 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v12, ", owner:");
  AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11](&reason, this);
  common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v13, &reason);
  std::string::~string(&reason);
  std::string::~string(&v);
  common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
    &reason,
    (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 64));
  AbilityComp::invokeFailNotify(this, entry, from_player, &reason);
  std::string::~string(&reason);
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)&v,
    &common::milog::MiLogDefault::default_log_obj_,
    0x13u,
    "./src/ability/ability_comp.cpp",
    "metaHandleModifierDurabilityChange",
    5612);
  common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
    &reason,
    (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 64));
  common::milog::MiLogStream::operator<<<std::string,(std::string*)0>((common::milog::MiLogStream *const)&v, &reason);
  std::string::~string(&reason);
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v);
  common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v4 + 64));
LABEL_47:
  proto::AbilityMetaModifierDurabilityChange::~AbilityMetaModifierDurabilityChange((proto::AbilityMetaModifierDurabilityChange *const)(v4 + 96));
  if ( v56 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 5660: range 00000000136FDF94-00000000136FE3CB
void __cdecl AbilityComp::metaHandleSetPoseParameter(
        AbilityComp *const this,
        const proto::AbilityInvokeEntry *entry,
        Player *from_player)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  const std::string *v6; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v7; // r14
  Creature *creature; // rsi
  unsigned __int64 *v9; // rax
  unsigned __int64 v10; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v11; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v12; // r14
  EntityAnimatorComp *AnimatorComp; // r14
  const proto::AnimatorParameterValueInfoPair *v14; // rax
  std::string v; // [rsp+20h] [rbp-F0h] BYREF
  std::string reason; // [rsp+40h] [rbp-D0h] BYREF
  char v19[176]; // [rsp+60h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 32 16 7 os:5664 64 32 18 meta_set_pose:5661";
  *(_QWORD *)(v3 + 16) = AbilityComp::metaHandleSetPoseParameter;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -219021312;
  v5[536862723] = -202116109;
  proto::AbilityMetaSetPoseParameter::AbilityMetaSetPoseParameter((proto::AbilityMetaSetPoseParameter *const)(v3 + 64));
  v6 = proto::AbilityInvokeEntry::ability_data[abi:cxx11](entry);
  if ( (unsigned __int8)google::protobuf::MessageLite::ParseFromString(v3 + 64, v6) != 1 )
  {
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 32));
    v7 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
           (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 32),
           "AbilityMetaSetPoseParameter ParseFromString fails, entity:");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    creature = this->creature_;
    v9 = (unsigned __int64 *)creature;
    if ( *(_BYTE *)(((unsigned __int64)creature >> 3) + 0x7FFF8000) )
      v9 = (unsigned __int64 *)__asan_report_load8(this->creature_);
    v10 = *v9;
    if ( *(_BYTE *)((v10 >> 3) + 0x7FFF8000) )
      v10 = __asan_report_load8(v10);
    (*(void (__fastcall **)(std::string *, Creature *))v10)(&v, creature);
    v11 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v7, &v);
    v12 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v11, ", owner:");
    AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11](&reason, this);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v12, &reason);
    std::string::~string(&reason);
    std::string::~string(&v);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
      &reason,
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 32));
    AbilityComp::invokeFailNotify(this, entry, from_player, &reason);
    std::string::~string(&reason);
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&v,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "metaHandleSetPoseParameter",
      5664);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
      &reason,
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 32));
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>((common::milog::MiLogStream *const)&v, &reason);
    std::string::~string(&reason);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 32));
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    AnimatorComp = Entity::getAnimatorComp((Entity *const)this->creature_);
    v14 = proto::AbilityMetaSetPoseParameter::value((const proto::AbilityMetaSetPoseParameter *const)(v3 + 64));
    EntityAnimatorComp::cachePoseParam(AnimatorComp, v14);
  }
  proto::AbilityMetaSetPoseParameter::~AbilityMetaSetPoseParameter((proto::AbilityMetaSetPoseParameter *const)(v3 + 64));
  if ( v19 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF800C) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 5672: range 00000000136FE3CC-00000000136FFA70
void __cdecl AbilityComp::metaHandleUpdateBaseReactionDamage(
        AbilityComp *const this,
        const proto::AbilityInvokeEntry *entry,
        Player *from_player)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  const std::string *v6; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v7; // r14
  Creature *v8; // rsi
  unsigned __int64 *v9; // rax
  unsigned __int64 v10; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v11; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v12; // r14
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v13; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v14; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v15; // r14
  Creature *creature; // rsi
  unsigned __int64 *v17; // rax
  unsigned __int64 v18; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v19; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v20; // r14
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v21; // r14
  Creature *v22; // rsi
  unsigned __int64 *v23; // rax
  unsigned __int64 v24; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v25; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v26; // r14
  const proto::AbilityString *v27; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v28; // r14
  Creature *v29; // rsi
  unsigned __int64 *v30; // rax
  unsigned __int64 v31; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v32; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v33; // r14
  const proto::AbilityString *v34; // rax
  const std::string *v35; // r14
  const proto::AbilityString *v36; // rax
  google::protobuf::uint32 v37; // eax
  __m128i v38; // xmm0
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v39; // rax
  const Vector3 *Position; // r15
  Creature *v41; // r14
  const proto::AbilityString *v42; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v43; // r14
  Creature *v44; // rsi
  unsigned __int64 *v45; // rax
  unsigned __int64 v46; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v47; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v48; // r14
  const proto::AbilityString *v49; // rax
  const std::string *v50; // r14
  const proto::AbilityString *v51; // rax
  google::protobuf::uint32 v52; // eax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v54; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v56; // rax
  __int64 Uid; // r15
  __int64 EntityId; // r14
  bool v59; // al
  __int64 v60; // [rsp+8h] [rbp-288h]
  double v61; // [rsp+18h] [rbp-278h]
  double v62; // [rsp+20h] [rbp-270h]
  unsigned int source_caster_id; // [rsp+4Ch] [rbp-244h]
  float damage; // [rsp+54h] [rbp-23Ch]
  std::string v; // [rsp+60h] [rbp-230h] BYREF
  char v68[528]; // [rsp+80h] [rbp-210h] BYREF

  v3 = (unsigned __int64)v68;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(480LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "11 48 4 18 reaction_type:5681 64 4 7 B1:5701 80 4 21 element_critical:5702 96 4 26 element_criti"
                        "cal_hurt:5703 112 16 22 source_caster_ptr:5682 144 16 19 cur_avatar_ptr:5688 176 16 7 os:5677 20"
                        "8 32 21 global_value_key:5694 272 32 17 ability_name:5708 336 32 25 element_critical_key:5719 40"
                        "0 48 37 meta_update_base_reaction_damage:5674";
  *(_QWORD *)(v3 + 16) = AbilityComp::metaHandleUpdateBaseReactionDamage;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862723] = 61956;
  v5[536862724] = 62194;
  v5[536862725] = 62194;
  v5[536862726] = 62194;
  v5[536862727] = -219021312;
  v5[536862728] = 62194;
  v5[536862729] = -219021312;
  v5[536862730] = 62194;
  v5[536862731] = -219021312;
  v5[536862732] = 62194;
  v5[536862734] = -202116109;
  proto::AbilityInvokeEntry::head(entry);
  proto::AbilityMetaUpdateBaseReactionDamage::AbilityMetaUpdateBaseReactionDamage((proto::AbilityMetaUpdateBaseReactionDamage *const)(v3 + 400));
  v6 = proto::AbilityInvokeEntry::ability_data[abi:cxx11](entry);
  if ( (unsigned __int8)google::protobuf::MessageLite::ParseFromString(v3 + 400, v6) == 1 )
  {
    source_caster_id = proto::AbilityMetaUpdateBaseReactionDamage::source_caster_id((const proto::AbilityMetaUpdateBaseReactionDamage *const)(v3 + 400));
    *(_DWORD *)(v3 + 48) = proto::AbilityMetaUpdateBaseReactionDamage::reaction_type((const proto::AbilityMetaUpdateBaseReactionDamage *const)(v3 + 400));
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    Entity::findEntityInSameScene<Creature>((const Entity *const)(v3 + 112), (uint32_t)this->creature_);
    if ( std::operator==<Creature>((const std::shared_ptr<Creature> *)(v3 + 112), 0LL) )
    {
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 176));
      v13 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
              (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 176),
              "AbilityMetaUpdateBaseReactionDamage can't find source_caster, source_caster_id:");
      v14 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v13, source_caster_id);
      v15 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v14, aEntity_0[0]);
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      creature = this->creature_;
      v17 = (unsigned __int64 *)creature;
      if ( *(_BYTE *)(((unsigned __int64)creature >> 3) + 0x7FFF8000) )
        v17 = (unsigned __int64 *)__asan_report_load8(this->creature_);
      v18 = *v17;
      if ( *(_BYTE *)((v18 >> 3) + 0x7FFF8000) )
        v18 = __asan_report_load8(v18);
      (*(void (__fastcall **)(std::string *, Creature *))v18)(&v, creature);
      v19 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v15, &v);
      v20 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v19, ", owner:");
      AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11]((std::string *)(v3 + 336), this);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v20, (const std::string *)(v3 + 336));
      std::string::~string((void *)(v3 + 336));
      std::string::~string(&v);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        (std::string *)(v3 + 336),
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 176));
      AbilityComp::invokeFailNotify(this, entry, from_player, (const std::string *)(v3 + 336));
      std::string::~string((void *)(v3 + 336));
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&v,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "metaHandleUpdateBaseReactionDamage",
        5685);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        (std::string *)(v3 + 336),
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 176));
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
        (common::milog::MiLogStream *const)&v,
        (const std::string *)(v3 + 336));
      std::string::~string((void *)(v3 + 336));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 176));
      goto LABEL_67;
    }
    Player::getCurAvatar((Player *const)(v3 + 144));
    if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v3 + 144), 0LL) )
    {
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 176));
      v21 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
              (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 176),
              "AbilityMetaUpdateBaseReactionDamage can't find avatar_team_entity, entity:");
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      v22 = this->creature_;
      v23 = (unsigned __int64 *)v22;
      if ( *(_BYTE *)(((unsigned __int64)v22 >> 3) + 0x7FFF8000) )
        v23 = (unsigned __int64 *)__asan_report_load8(this->creature_);
      v24 = *v23;
      if ( *(_BYTE *)((v24 >> 3) + 0x7FFF8000) )
        v24 = __asan_report_load8(v24);
      (*(void (__fastcall **)(std::string *, Creature *))v24)(&v, v22);
      v25 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v21, &v);
      v26 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v25, ", owner:");
      AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11]((std::string *)(v3 + 336), this);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v26, (const std::string *)(v3 + 336));
      std::string::~string((void *)(v3 + 336));
      std::string::~string(&v);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        (std::string *)(v3 + 336),
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 176));
      AbilityComp::invokeFailNotify(this, entry, from_player, (const std::string *)(v3 + 336));
      std::string::~string((void *)(v3 + 336));
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&v,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "metaHandleUpdateBaseReactionDamage",
        5691);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        (std::string *)(v3 + 336),
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 176));
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
        (common::milog::MiLogStream *const)&v,
        (const std::string *)(v3 + 336));
      std::string::~string((void *)(v3 + 336));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 176));
      goto LABEL_66;
    }
    std::string::basic_string(v3 + 208);
    v27 = proto::AbilityMetaUpdateBaseReactionDamage::global_value_key((const proto::AbilityMetaUpdateBaseReactionDamage *const)(v3 + 400));
    if ( abilityStringToStdString(v27, (std::string *)(v3 + 208)) )
    {
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 176));
      v28 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
              (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 176),
              "AbilityMetaUpdateBaseReactionDamage abilityStringToStdString fails, entity:");
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      v29 = this->creature_;
      v30 = (unsigned __int64 *)v29;
      if ( *(_BYTE *)(((unsigned __int64)v29 >> 3) + 0x7FFF8000) )
        v30 = (unsigned __int64 *)__asan_report_load8(this->creature_);
      v31 = *v30;
      if ( *(_BYTE *)((v31 >> 3) + 0x7FFF8000) )
        v31 = __asan_report_load8(v31);
      (*(void (__fastcall **)(std::string *, Creature *))v31)(&v, v29);
      v32 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v28, &v);
      v33 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v32, ", owner:");
      AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11]((std::string *)(v3 + 336), this);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v33, (const std::string *)(v3 + 336));
      std::string::~string((void *)(v3 + 336));
      std::string::~string(&v);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        (std::string *)(v3 + 336),
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 176));
      AbilityComp::invokeFailNotify(this, entry, from_player, (const std::string *)(v3 + 336));
      std::string::~string((void *)(v3 + 336));
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&v,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "metaHandleUpdateBaseReactionDamage",
        5697);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        (std::string *)(v3 + 336),
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 176));
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
        (common::milog::MiLogStream *const)&v,
        (const std::string *)(v3 + 336));
      std::string::~string((void *)(v3 + 336));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 176));
      v34 = proto::AbilityMetaUpdateBaseReactionDamage::global_value_key((const proto::AbilityMetaUpdateBaseReactionDamage *const)(v3 + 400));
      v35 = proto::AbilityString::str[abi:cxx11](v34);
      v36 = proto::AbilityMetaUpdateBaseReactionDamage::global_value_key((const proto::AbilityMetaUpdateBaseReactionDamage *const)(v3 + 400));
      v37 = proto::AbilityString::hash(v36);
      AbilityComp::invokeNotRegisterNotifyGMServerLog(this, v37, v35, from_player);
      goto LABEL_65;
    }
    *(_DWORD *)(v3 + 64) = 0;
    *(_DWORD *)(v3 + 80) = 0;
    v38 = 0LL;
    *(_DWORD *)(v3 + 96) = 0;
    v39 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 144));
    Position = Entity::getPosition((const Entity *const)v39);
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    v41 = this->creature_;
    std::shared_ptr<Creature>::shared_ptr(
      (std::shared_ptr<Creature> *const)(v3 + 176),
      (const std::shared_ptr<Creature> *)(v3 + 112));
    *(float *)v38.m128i_i32 = AbilityComp::getElementLevelCo(
                                (CreaturePtr *)(v3 + 176),
                                v41,
                                (const data::ElementReactionType *)(v3 + 48),
                                Position,
                                (float *)(v3 + 64),
                                (float *)(v3 + 80),
                                (float *)(v3 + 96));
    std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 176));
    damage = (float)(*(float *)(v3 + 64) + 1.0) * COERCE_FLOAT(_mm_cvtsi128_si32(v38));
    AbilityComp::createOrSetServerDynamicValue<float>(this, (const std::string *)(v3 + 208), damage);
    std::string::basic_string(v3 + 272);
    if ( proto::AbilityMetaUpdateBaseReactionDamage::has_ability_name((const proto::AbilityMetaUpdateBaseReactionDamage *const)(v3 + 400)) )
    {
      v42 = proto::AbilityMetaUpdateBaseReactionDamage::ability_name((const proto::AbilityMetaUpdateBaseReactionDamage *const)(v3 + 400));
      if ( abilityStringToStdString(v42, (std::string *)(v3 + 272)) )
      {
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 176));
        v43 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 176),
                "AbilityMetaUpdateBaseReactionDamage abilityStringToStdString fails, entity:");
        if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->creature_);
        v44 = this->creature_;
        v45 = (unsigned __int64 *)v44;
        if ( *(_BYTE *)(((unsigned __int64)v44 >> 3) + 0x7FFF8000) )
          v45 = (unsigned __int64 *)__asan_report_load8(this->creature_);
        v46 = *v45;
        if ( *(_BYTE *)((v46 >> 3) + 0x7FFF8000) )
          v46 = __asan_report_load8(v46);
        (*(void (__fastcall **)(std::string *, Creature *))v46)(&v, v44);
        v47 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v43, &v);
        v48 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v47, ", owner:");
        AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11]((std::string *)(v3 + 336), this);
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v48, (const std::string *)(v3 + 336));
        std::string::~string((void *)(v3 + 336));
        std::string::~string(&v);
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
          (std::string *)(v3 + 336),
          (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 176));
        AbilityComp::invokeFailNotify(this, entry, from_player, (const std::string *)(v3 + 336));
        std::string::~string((void *)(v3 + 336));
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&v,
          &common::milog::MiLogDefault::default_log_obj_,
          0x13u,
          "./src/ability/ability_comp.cpp",
          "metaHandleUpdateBaseReactionDamage",
          5713);
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
          (std::string *)(v3 + 336),
          (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 176));
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
          (common::milog::MiLogStream *const)&v,
          (const std::string *)(v3 + 336));
        std::string::~string((void *)(v3 + 336));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v);
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 176));
        v49 = proto::AbilityMetaUpdateBaseReactionDamage::ability_name((const proto::AbilityMetaUpdateBaseReactionDamage *const)(v3 + 400));
        v50 = proto::AbilityString::str[abi:cxx11](v49);
        v51 = proto::AbilityMetaUpdateBaseReactionDamage::ability_name((const proto::AbilityMetaUpdateBaseReactionDamage *const)(v3 + 400));
        v52 = proto::AbilityString::hash(v51);
        AbilityComp::invokeNotRegisterNotifyGMServerLog(this, v52, v50, from_player);
LABEL_64:
        std::string::~string((void *)(v3 + 272));
LABEL_65:
        std::string::~string((void *)(v3 + 208));
LABEL_66:
        std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v3 + 144));
LABEL_67:
        std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 112));
        goto LABEL_68;
      }
      if ( *(float *)(v3 + 80) != 0.0 && (unsigned __int8)std::string::empty(v3 + 272) != 1 )
      {
        ServiceBox::findService<GameserverService>();
        GameserverService::getConfig((GameserverService *const)(v3 + 176));
        v54 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 176));
        JsonConfigMgr::getAbilityReactionCriticalName(
          (std::string *)(v3 + 336),
          &v54->design_config.json_config_mgr,
          (const std::string *)(v3 + 272));
        std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 176));
        AbilityComp::createOrSetServerDynamicValue<float>(this, (const std::string *)(v3 + 336), *(float *)(v3 + 80));
        std::string::~string((void *)(v3 + 336));
      }
      if ( *(float *)(v3 + 96) != 0.0 && (unsigned __int8)std::string::empty(v3 + 272) != 1 )
      {
        ServiceBox::findService<GameserverService>();
        GameserverService::getConfig((GameserverService *const)(v3 + 176));
        v56 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 176));
        JsonConfigMgr::getAbilityReactionCriticalHurtName(
          (std::string *)(v3 + 336),
          &v56->design_config.json_config_mgr,
          (const std::string *)(v3 + 272));
        std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)(v3 + 176));
        AbilityComp::createOrSetServerDynamicValue<float>(this, (const std::string *)(v3 + 336), *(float *)(v3 + 96));
        std::string::~string((void *)(v3 + 336));
      }
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 336),
      &common::milog::MiLogDefault::default_log_obj_,
      0x14u,
      "./src/ability/ability_comp.cpp",
      "metaHandleUpdateBaseReactionDamage",
      5728);
    v62 = *(float *)(v3 + 96);
    v61 = *(float *)(v3 + 80);
    Uid = Player::getUid(from_player);
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    EntityId = Entity::getEntityId((const Entity *const)this->creature_);
    v60 = std::string::c_str(v3 + 208);
    v59 = AbilityComp::isInMpMode(this);
    common::milog::MiLogStream::operator()(
      (common::milog::MiLogStream *const)(v3 + 336),
      "|%u|SetServerGlobalValue|%s|%s|%s|%u|%u|%f|%f|%f",
      v59,
      byte_24FD2920,
      byte_24FD2920,
      v60,
      damage,
      v61,
      v62,
      EntityId,
      Uid);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 336));
    goto LABEL_64;
  }
  common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 176));
  v7 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
         (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 176),
         "AbilityMetaUpdateBaseReactionDamage ParseFromString fails, entity:");
  if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->creature_);
  v8 = this->creature_;
  v9 = (unsigned __int64 *)v8;
  if ( *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) )
    v9 = (unsigned __int64 *)__asan_report_load8(this->creature_);
  v10 = *v9;
  if ( *(_BYTE *)((v10 >> 3) + 0x7FFF8000) )
    v10 = __asan_report_load8(v10);
  (*(void (__fastcall **)(std::string *, Creature *))v10)(&v, v8);
  v11 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v7, &v);
  v12 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v11, ", owner:");
  AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11]((std::string *)(v3 + 336), this);
  common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v12, (const std::string *)(v3 + 336));
  std::string::~string((void *)(v3 + 336));
  std::string::~string(&v);
  common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
    (std::string *)(v3 + 336),
    (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 176));
  AbilityComp::invokeFailNotify(this, entry, from_player, (const std::string *)(v3 + 336));
  std::string::~string((void *)(v3 + 336));
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)&v,
    &common::milog::MiLogDefault::default_log_obj_,
    0x13u,
    "./src/ability/ability_comp.cpp",
    "metaHandleUpdateBaseReactionDamage",
    5677);
  common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
    (std::string *)(v3 + 336),
    (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 176));
  common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
    (common::milog::MiLogStream *const)&v,
    (const std::string *)(v3 + 336));
  std::string::~string((void *)(v3 + 336));
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v);
  common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 176));
LABEL_68:
  proto::AbilityMetaUpdateBaseReactionDamage::~AbilityMetaUpdateBaseReactionDamage((proto::AbilityMetaUpdateBaseReactionDamage *const)(v3 + 400));
  if ( v68 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8030) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8038) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8038) = -168430091;
  }
};

// Line 5732: range 00000000136FFA72-00000000137005EE
void __cdecl AbilityComp::tryTriggerElementReactionByAttackTag(
        AbilityComp *const this,
        float drop_hp,
        bool is_die,
        const std::string *attack_tag,
        ActorModifierPtr *p_modifier_ptr,
        CreaturePtr *p_attacker_ptr)
{
  unsigned __int64 v6; // r12
  __int64 v7; // rax
  _DWORD *v8; // r13
  std::pair<const std::string,data::ElementReactionType> *i; // r14
  Creature *creature; // rsi
  Creature *v11; // rax
  unsigned __int64 v12; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,data::ElementReactionType>,false,true>::pointer v13; // rax
  std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  unsigned __int64 v16; // rax
  void (__fastcall **v17)(__int64, unsigned __int64); // rdx
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // rax
  Player *v19; // rax
  PlayerWatcherComp *WatcherComp; // r15
  uint32_t EntityId; // eax
  std::unordered_map<std::string,data::ElementReactionType>::hasher __hf; // [rsp+45h] [rbp-53Bh] BYREF
  std::unordered_map<std::string,data::ElementReactionType>::key_equal __eql; // [rsp+46h] [rbp-53Ah] BYREF
  std::allocator<std::pair<const std::string,data::ElementReactionType> > __a; // [rsp+47h] [rbp-539h] BYREF
  data::ElementReactionType __y; // [rsp+48h] [rbp-538h] BYREF
  data::ElementReactionType v31; // [rsp+4Ch] [rbp-534h] BYREF
  data::ElementReactionType v32; // [rsp+50h] [rbp-530h] BYREF
  data::ElementReactionType v33; // [rsp+54h] [rbp-52Ch] BYREF
  data::ElementReactionType v34; // [rsp+58h] [rbp-528h] BYREF
  data::ElementReactionType v35; // [rsp+5Ch] [rbp-524h] BYREF
  data::ElementReactionType v36; // [rsp+60h] [rbp-520h] BYREF
  data::ElementReactionType v37; // [rsp+64h] [rbp-51Ch] BYREF
  data::ElementReactionType v38; // [rsp+68h] [rbp-518h] BYREF
  data::ElementReactionType v39; // [rsp+6Ch] [rbp-514h] BYREF
  data::ElementReactionType v40; // [rsp+70h] [rbp-510h] BYREF
  data::ElementReactionType v41; // [rsp+74h] [rbp-50Ch] BYREF
  data::ElementReactionType v42; // [rsp+78h] [rbp-508h] BYREF
  data::ElementReactionType v43; // [rsp+7Ch] [rbp-504h] BYREF
  data::ElementReactionType v44; // [rsp+80h] [rbp-500h] BYREF
  data::ElementReactionType v45; // [rsp+84h] [rbp-4FCh] BYREF
  data::ElementReactionType v46; // [rsp+88h] [rbp-4F8h] BYREF
  data::ElementReactionType v47; // [rsp+8Ch] [rbp-4F4h] BYREF
  data::ElementReactionType v48; // [rsp+90h] [rbp-4F0h] BYREF
  data::ElementReactionType v49; // [rsp+94h] [rbp-4ECh] BYREF
  data::ElementReactionType v50; // [rsp+98h] [rbp-4E8h] BYREF
  data::ElementReactionType v51; // [rsp+9Ch] [rbp-4E4h] BYREF
  data::ElementReactionType v52; // [rsp+A0h] [rbp-4E0h] BYREF
  data::ElementReactionType v53; // [rsp+A4h] [rbp-4DCh] BYREF
  data::ElementReactionType v54; // [rsp+A8h] [rbp-4D8h] BYREF
  data::ElementReactionType v55; // [rsp+ACh] [rbp-4D4h] BYREF
  uint32_t source_entity_id; // [rsp+B0h] [rbp-4D0h]
  data::ElementReactionType react_type; // [rsp+B4h] [rbp-4CCh]
  std::__detail::_Node_iterator_base<std::pair<const std::string,data::ElementReactionType>,true> v58; // [rsp+B8h] [rbp-4C8h] BYREF
  std::pair<const std::string,data::ElementReactionType> v59; // [rsp+C0h] [rbp-4C0h] BYREF
  std::pair<const std::string,data::ElementReactionType> v60; // [rsp+E8h] [rbp-498h] BYREF
  std::pair<const std::string,data::ElementReactionType> v61; // [rsp+110h] [rbp-470h] BYREF
  std::pair<const std::string,data::ElementReactionType> v62; // [rsp+138h] [rbp-448h] BYREF
  std::pair<const std::string,data::ElementReactionType> v63; // [rsp+160h] [rbp-420h] BYREF
  std::pair<const std::string,data::ElementReactionType> v64; // [rsp+188h] [rbp-3F8h] BYREF
  std::pair<const std::string,data::ElementReactionType> v65; // [rsp+1B0h] [rbp-3D0h] BYREF
  std::pair<const std::string,data::ElementReactionType> v66; // [rsp+1D8h] [rbp-3A8h] BYREF
  std::pair<const std::string,data::ElementReactionType> v67; // [rsp+200h] [rbp-380h] BYREF
  std::pair<const std::string,data::ElementReactionType> v68; // [rsp+228h] [rbp-358h] BYREF
  std::pair<const std::string,data::ElementReactionType> v69; // [rsp+250h] [rbp-330h] BYREF
  std::pair<const std::string,data::ElementReactionType> v70; // [rsp+278h] [rbp-308h] BYREF
  std::pair<const std::string,data::ElementReactionType> v71; // [rsp+2A0h] [rbp-2E0h] BYREF
  std::pair<const std::string,data::ElementReactionType> v72; // [rsp+2C8h] [rbp-2B8h] BYREF
  std::pair<const std::string,data::ElementReactionType> v73; // [rsp+2F0h] [rbp-290h] BYREF
  std::pair<const std::string,data::ElementReactionType> v74; // [rsp+318h] [rbp-268h] BYREF
  std::pair<const std::string,data::ElementReactionType> v75; // [rsp+340h] [rbp-240h] BYREF
  std::pair<const std::string,data::ElementReactionType> v76; // [rsp+368h] [rbp-218h] BYREF
  std::pair<const std::string,data::ElementReactionType> v77; // [rsp+390h] [rbp-1F0h] BYREF
  std::pair<const std::string,data::ElementReactionType> v78; // [rsp+3B8h] [rbp-1C8h] BYREF
  std::pair<const std::string,data::ElementReactionType> v79; // [rsp+3E0h] [rbp-1A0h] BYREF
  std::pair<const std::string,data::ElementReactionType> v80; // [rsp+408h] [rbp-178h] BYREF
  std::pair<const std::string,data::ElementReactionType> v81; // [rsp+430h] [rbp-150h] BYREF
  std::pair<const std::string,data::ElementReactionType> v82; // [rsp+458h] [rbp-128h] BYREF
  std::pair<const std::string,data::ElementReactionType> v83; // [rsp+480h] [rbp-100h] BYREF
  std::pair<const std::string,data::ElementReactionType> v84; // [rsp+4A8h] [rbp-D8h] BYREF
  char v85[176]; // [rsp+4D0h] [rbp-B0h] BYREF

  v6 = (unsigned __int64)v85;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v7 = __asan_stack_malloc_1(128LL);
    if ( v7 )
      v6 = v7;
  }
  *(_QWORD *)v6 = 1102416563LL;
  *(_QWORD *)(v6 + 8) = "3 32 8 9 iter:5767 64 16 17 creature_ptr:5794 96 16 15 player_ptr:5805";
  *(_QWORD *)(v6 + 16) = AbilityComp::tryTriggerElementReactionByAttackTag;
  v8 = (_DWORD *)(v6 >> 3);
  v8[536862720] = -235802127;
  v8[536862721] = -218959360;
  v8[536862722] = -219021312;
  v8[536862723] = -202178560;
  if ( !(_BYTE)`guard variable for'AbilityComp::tryTriggerElementReactionByAttackTag(float,bool,std::string const&,std::shared_ptr<ActorModifier>,std::shared_ptr<Creature>)::tag_reaction_map
    && __cxa_guard_acquire(&`guard variable for'AbilityComp::tryTriggerElementReactionByAttackTag(float,bool,std::string const&,std::shared_ptr<ActorModifier>,std::shared_ptr<Creature>)::tag_reaction_map) )
  {
    std::allocator<std::pair<std::string const,data::ElementReactionType>>::allocator(&__a);
    __y = Explode;
    std::pair<std::string const,data::ElementReactionType>::pair<char const(&)[14],data::ElementReactionType,true>(
      &v59,
      (const char (*)[14])"ExplodeDamage",
      &__y);
    v31 = Stream;
    std::pair<std::string const,data::ElementReactionType>::pair<char const(&)[13],data::ElementReactionType,true>(
      &v60,
      (const char (*)[13])"StreamDamage",
      &v31);
    v32 = Burning;
    std::pair<std::string const,data::ElementReactionType>::pair<char const(&)[14],data::ElementReactionType,true>(
      &v61,
      (const char (*)[14])"BurningDamage",
      &v32);
    v33 = Burned;
    std::pair<std::string const,data::ElementReactionType>::pair<char const(&)[13],data::ElementReactionType,true>(
      &v62,
      (const char (*)[13])"BurnedDamage",
      &v33);
    v34 = Wet;
    std::pair<std::string const,data::ElementReactionType>::pair<char const(&)[10],data::ElementReactionType,true>(
      &v63,
      (const char (*)[10])"WetDamage",
      &v34);
    v35 = Overgrow;
    std::pair<std::string const,data::ElementReactionType>::pair<char const(&)[19],data::ElementReactionType,true>(
      &v64,
      (const char (*)[19])"GrassGrowingDamage",
      &v35);
    v36 = Melt;
    std::pair<std::string const,data::ElementReactionType>::pair<char const(&)[11],data::ElementReactionType,true>(
      &v65,
      (const char (*)[11])"MeltDamage",
      &v36);
    v37 = Freeze;
    std::pair<std::string const,data::ElementReactionType>::pair<char const(&)[13],data::ElementReactionType,true>(
      &v66,
      (const char (*)[13])"FreezeDamage",
      &v37);
    v38 = AntiFire_0;
    std::pair<std::string const,data::ElementReactionType>::pair<char const(&)[15],data::ElementReactionType,true>(
      &v67,
      (const char (*)[15])"AntiFireDamage",
      &v38);
    v39 = Rock_0;
    std::pair<std::string const,data::ElementReactionType>::pair<char const(&)[11],data::ElementReactionType,true>(
      &v68,
      (const char (*)[11])"RockDamage",
      &v39);
    v40 = SlowDown;
    std::pair<std::string const,data::ElementReactionType>::pair<char const(&)[15],data::ElementReactionType,true>(
      &v69,
      (const char (*)[15])"SlowDownDamage",
      &v40);
    v41 = Shock;
    std::pair<std::string const,data::ElementReactionType>::pair<char const(&)[12],data::ElementReactionType,true>(
      &v70,
      (const char (*)[12])"ShockDamage",
      &v41);
    v42 = Wind_0;
    std::pair<std::string const,data::ElementReactionType>::pair<char const(&)[11],data::ElementReactionType,true>(
      &v71,
      (const char (*)[11])"WindDamage",
      &v42);
    v43 = Electric_0;
    std::pair<std::string const,data::ElementReactionType>::pair<char const(&)[15],data::ElementReactionType,true>(
      &v72,
      (const char (*)[15])"ElectricDamage",
      &v43);
    v44 = Fire_0;
    std::pair<std::string const,data::ElementReactionType>::pair<char const(&)[11],data::ElementReactionType,true>(
      &v73,
      (const char (*)[11])"FireDamage",
      &v44);
    v45 = Superconductor;
    std::pair<std::string const,data::ElementReactionType>::pair<char const(&)[21],data::ElementReactionType,true>(
      &v74,
      (const char (*)[21])"SuperconductorDamage",
      &v45);
    v46 = SwirlFire;
    std::pair<std::string const,data::ElementReactionType>::pair<char const(&)[17],data::ElementReactionType,true>(
      &v75,
      (const char (*)[17])"Swirl_FireDamage",
      &v46);
    v47 = SwirlFire;
    std::pair<std::string const,data::ElementReactionType>::pair<char const(&)[22],data::ElementReactionType,true>(
      &v76,
      (const char (*)[22])"Self_Swirl_FireDamage",
      &v47);
    v48 = SwirlIce;
    std::pair<std::string const,data::ElementReactionType>::pair<char const(&)[16],data::ElementReactionType,true>(
      &v77,
      (const char (*)[16])"Swirl_IceDamage",
      &v48);
    v49 = SwirlIce;
    std::pair<std::string const,data::ElementReactionType>::pair<char const(&)[21],data::ElementReactionType,true>(
      &v78,
      (const char (*)[21])"Self_Swirl_IceDamage",
      &v49);
    v50 = SwirlWater;
    std::pair<std::string const,data::ElementReactionType>::pair<char const(&)[18],data::ElementReactionType,true>(
      &v79,
      (const char (*)[18])"Swirl_WaterDamage",
      &v50);
    v51 = SwirlWater;
    std::pair<std::string const,data::ElementReactionType>::pair<char const(&)[23],data::ElementReactionType,true>(
      &v80,
      (const char (*)[23])"Self_Swirl_WaterDamage",
      &v51);
    v52 = SwirlElectric;
    std::pair<std::string const,data::ElementReactionType>::pair<char const(&)[21],data::ElementReactionType,true>(
      &v81,
      (const char (*)[21])"Swirl_ElectricDamage",
      &v52);
    v53 = SwirlElectric;
    std::pair<std::string const,data::ElementReactionType>::pair<char const(&)[26],data::ElementReactionType,true>(
      &v82,
      (const char (*)[26])"Self_Swirl_ElectricDamage",
      &v53);
    v54 = OvergrowMushroomFire;
    std::pair<std::string const,data::ElementReactionType>::pair<char const(&)[21],data::ElementReactionType,true>(
      &v83,
      (const char (*)[21])"OverGrow_Fire_Damage",
      &v54);
    v55 = OvergrowMushroomElectric;
    std::pair<std::string const,data::ElementReactionType>::pair<char const(&)[25],data::ElementReactionType,true>(
      &v84,
      (const char (*)[25])"OverGrow_Electric_Damage",
      &v55);
    std::unordered_map<std::string,data::ElementReactionType>::unordered_map(
      (std::unordered_map<std::string,data::ElementReactionType> *const)&AbilityComp::tryTriggerElementReactionByAttackTag(float,bool,std::string const&,std::shared_ptr<ActorModifier>,std::shared_ptr<Creature>)::tag_reaction_map,
      (std::initializer_list<std::pair<const std::string,data::ElementReactionType> >)__PAIR128__(26LL, &v59),
      0LL,
      &__hf,
      &__eql,
      &__a);
    __cxa_guard_release(&`guard variable for'AbilityComp::tryTriggerElementReactionByAttackTag(float,bool,std::string const&,std::shared_ptr<ActorModifier>,std::shared_ptr<Creature>)::tag_reaction_map);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::unordered_map<std::string,data::ElementReactionType>::~unordered_map,
      (void *)&AbilityComp::tryTriggerElementReactionByAttackTag(float,bool,std::string const&,std::shared_ptr<ActorModifier>,std::shared_ptr<Creature>)::tag_reaction_map,
      &_dso_handle);
    for ( i = (std::pair<const std::string,data::ElementReactionType> *)v85;
          i != &v59;
          std::pair<std::string const,data::ElementReactionType>::~pair(i) )
    {
      --i;
    }
    std::allocator<std::pair<std::string const,data::ElementReactionType>>::~allocator(&__a);
  }
  if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->creature_);
  creature = this->creature_;
  v11 = creature;
  if ( *(_BYTE *)(((unsigned __int64)creature >> 3) + 0x7FFF8000) )
    v11 = (Creature *)__asan_report_load8(this->creature_);
  v12 = *(_QWORD *)v11->baseclass_0 + 24LL;
  if ( *(_BYTE *)((v12 >> 3) + 0x7FFF8000) )
    v12 = __asan_report_load8(v12);
  if ( (*(unsigned int (__fastcall **)(Creature *))v12)(creature) == 2 )
  {
    *(std::unordered_map<std::string,data::ElementReactionType>::const_iterator *)(v6 + 32) = std::unordered_map<std::string,data::ElementReactionType>::find(
                                                                                                &AbilityComp::tryTriggerElementReactionByAttackTag(float,bool,std::string const&,std::shared_ptr<ActorModifier>,std::shared_ptr<Creature>)::tag_reaction_map,
                                                                                                attack_tag);
    v58._M_cur = std::unordered_map<std::string,data::ElementReactionType>::end(&AbilityComp::tryTriggerElementReactionByAttackTag(float,bool,std::string const&,std::shared_ptr<ActorModifier>,std::shared_ptr<Creature>)::tag_reaction_map)._M_cur;
    if ( !std::__detail::operator==<std::pair<std::string const,data::ElementReactionType>,true>(
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::ElementReactionType>,true> *)(v6 + 32),
            &v58) )
    {
      v13 = std::__detail::_Node_const_iterator<std::pair<std::string const,data::ElementReactionType>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,data::ElementReactionType>,false,true> *const)(v6 + 32));
      if ( *(_BYTE *)(((unsigned __int64)&v13->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v13->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v13->second);
      }
      react_type = v13->second;
      source_entity_id = 0;
      if ( std::operator!=<ActorModifier>(p_modifier_ptr, 0LL) )
      {
        v14 = std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_modifier_ptr);
        if ( ActorModifier::getApplyEntityId(v14) )
        {
          v15 = std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_modifier_ptr);
          source_entity_id = ActorModifier::getApplyEntityId(v15);
        }
        else
        {
          v16 = (unsigned __int64)std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_modifier_ptr);
          if ( *(_BYTE *)((v16 >> 3) + 0x7FFF8000) )
            v16 = __asan_report_load8(v16);
          v17 = *(void (__fastcall ***)(__int64, unsigned __int64))v16;
          if ( *(_BYTE *)((*(_QWORD *)v16 >> 3) + 0x7FFF8000LL) )
            v16 = __asan_report_load8(*(_QWORD *)v16);
          (*v17)(v6 + 96, v16);
          if ( std::operator!=<Creature>((const std::shared_ptr<Creature> *)(v6 + 96), 0LL) )
          {
            v18 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 96));
            source_entity_id = Entity::getEntityId((const Entity *const)v18);
          }
          std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v6 + 96));
        }
      }
      if ( react_type == Shock )
      {
        if ( *(_BYTE *)(((unsigned __int64)&this->last_shock_modifier_ori_src_entity_id_ >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&this->last_shock_modifier_ori_src_entity_id_ >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&this->last_shock_modifier_ori_src_entity_id_);
        }
        source_entity_id = this->last_shock_modifier_ori_src_entity_id_;
      }
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      Entity::findEntityInSameScene<Creature>((const Entity *const)(v6 + 64), (uint32_t)this->creature_);
      if ( react_type == OvergrowMushroomFire || react_type == OvergrowMushroomElectric )
        std::shared_ptr<Creature>::operator=((std::shared_ptr<Creature> *const)(v6 + 64), p_attacker_ptr);
      if ( !std::operator==<Creature>((const std::shared_ptr<Creature> *)(v6 + 64), 0LL) )
      {
        std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 64));
        Creature::findOriginalPlayer((Creature *const)(v6 + 96));
        if ( !std::operator==<Player>((const std::shared_ptr<Player> *)(v6 + 96), 0LL) )
        {
          v19 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 96));
          WatcherComp = Player::getWatcherComp(v19);
          if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->creature_);
          EntityId = Entity::getEntityId((const Entity *const)this->creature_);
          PlayerWatcherComp::triggerElementReaction(WatcherComp, react_type, EntityId, drop_hp, is_die);
        }
        std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v6 + 96));
      }
      std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v6 + 64));
    }
  }
  if ( v85 == (char *)v6 )
  {
    *(_QWORD *)((v6 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v6 = 1172321806LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 5815: range 00000000137005F0-0000000013701458
void __cdecl AbilityComp::recordElementReactionModifierSource(
        AbilityComp *const this,
        uint32_t apply_entity_id,
        const data::ConfigAbilityModifier *modifier_config,
        ActorAbilityPtr *p_ability_ptr)
{
  unsigned __int64 v4; // r12
  __int64 v5; // rax
  _DWORD *v6; // r13
  std::string *i; // r14
  std::string *j; // r14
  std::string *k; // r14
  unsigned __int64 v10; // rax
  unsigned __int64 v11; // rdx
  char v12; // al
  std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  const std::string *v14; // rax
  uint32_t EntityId; // eax
  const std::string *M_current; // r15
  std::vector<std::string>::const_iterator v17; // rax
  const std::string *v18; // r15
  std::vector<std::string>::const_iterator v19; // rax
  _BOOL4 v20; // r14d
  Creature *v21; // rax
  AbilityComp *AbilityComp; // rax
  int v23; // r14d
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v24; // rax
  uint32_t v25; // edx
  std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v26; // rax
  const std::string *v27; // rax
  uint32_t v28; // eax
  const std::string *v29; // r15
  std::vector<std::string>::const_iterator v30; // rax
  Player *v31; // rax
  PlayerWatcherComp *WatcherComp; // r14
  uint32_t v33; // eax
  std::initializer_list<std::string > __l; // [rsp+10h] [rbp-160h]
  std::initializer_list<std::string > v35; // [rsp+20h] [rbp-150h]
  std::allocator<char> __a; // [rsp+55h] [rbp-11Bh] BYREF
  std::allocator<char> v39; // [rsp+56h] [rbp-11Ah] BYREF
  std::allocator<std::string > v40; // [rsp+57h] [rbp-119h] BYREF
  uint32_t real_apply_entity_id; // [rsp+58h] [rbp-118h]
  uint32_t real_apply_entity_id_0; // [rsp+5Ch] [rbp-114h]
  __gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> > __lhs; // [rsp+60h] [rbp-110h] BYREF
  __gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> > v44; // [rsp+68h] [rbp-108h] BYREF
  __gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> > v45; // [rsp+70h] [rbp-100h] BYREF
  __gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> > __rhs; // [rsp+78h] [rbp-F8h] BYREF
  std::string v47; // [rsp+80h] [rbp-F0h] BYREF
  std::string v48; // [rsp+A0h] [rbp-D0h] BYREF
  char v49[176]; // [rsp+C0h] [rbp-B0h] BYREF

  v4 = (unsigned __int64)v49;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(128LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 32 16 20 ability_src_ptr:5825 64 16 17 creature_ptr:5862 96 16 15 player_ptr:5865";
  *(_QWORD *)(v4 + 16) = AbilityComp::recordElementReactionModifierSource;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -219021312;
  v6[536862722] = -219021312;
  v6[536862723] = -202178560;
  if ( !std::operator==<ActorAbility>(p_ability_ptr, 0LL) )
  {
    if ( !(_BYTE)`guard variable for'AbilityComp::recordElementReactionModifierSource(unsigned int,data::ConfigAbilityModifier const&,std::shared_ptr<ActorAbility>)::freeze_modifier_name_vec
      && __cxa_guard_acquire(&`guard variable for'AbilityComp::recordElementReactionModifierSource(unsigned int,data::ConfigAbilityModifier const&,std::shared_ptr<ActorAbility>)::freeze_modifier_name_vec) )
    {
      std::allocator<char>::allocator(&__a);
      std::string::basic_string<std::allocator<char>>(&v47, "FreezeModifier", &__a);
      std::allocator<char>::allocator(&v39);
      std::string::basic_string<std::allocator<char>>(&v48, "Freeze_Alter_Modifier", &v39);
      std::allocator<std::string>::allocator(&v40);
      std::vector<std::string>::vector(
        (std::vector<std::string> *const)&AbilityComp::recordElementReactionModifierSource(unsigned int,data::ConfigAbilityModifier const&,std::shared_ptr<ActorAbility>)::freeze_modifier_name_vec,
        (std::initializer_list<std::string >)__PAIR128__(2LL, &v47),
        &v40);
      __cxa_guard_release(&`guard variable for'AbilityComp::recordElementReactionModifierSource(unsigned int,data::ConfigAbilityModifier const&,std::shared_ptr<ActorAbility>)::freeze_modifier_name_vec);
      __cxa_atexit(
        (void (__fastcall *)(void *))std::vector<std::string>::~vector,
        (void *)&AbilityComp::recordElementReactionModifierSource(unsigned int,data::ConfigAbilityModifier const&,std::shared_ptr<ActorAbility>)::freeze_modifier_name_vec,
        &_dso_handle);
      std::allocator<std::string>::~allocator(&v40);
      for ( i = (std::string *)v49; i != &v47; std::string::~string(i) )
        --i;
      std::allocator<char>::~allocator(&v39);
      std::allocator<char>::~allocator(&__a);
    }
    if ( !(_BYTE)`guard variable for'AbilityComp::recordElementReactionModifierSource(unsigned int,data::ConfigAbilityModifier const&,std::shared_ptr<ActorAbility>)::shock_modifier_name_vec
      && __cxa_guard_acquire(&`guard variable for'AbilityComp::recordElementReactionModifierSource(unsigned int,data::ConfigAbilityModifier const&,std::shared_ptr<ActorAbility>)::shock_modifier_name_vec) )
    {
      std::allocator<char>::allocator(&__a);
      std::string::basic_string<std::allocator<char>>(&v47, "Shock_Modifier", &__a);
      std::allocator<char>::allocator(&v39);
      std::string::basic_string<std::allocator<char>>(&v48, "Shock_Alter_Modifier", &v39);
      __l._M_array = &v47;
      __l._M_len = 2LL;
      std::allocator<std::string>::allocator(&v40);
      std::vector<std::string>::vector(
        (std::vector<std::string> *const)&AbilityComp::recordElementReactionModifierSource(unsigned int,data::ConfigAbilityModifier const&,std::shared_ptr<ActorAbility>)::shock_modifier_name_vec,
        __l,
        &v40);
      __cxa_guard_release(&`guard variable for'AbilityComp::recordElementReactionModifierSource(unsigned int,data::ConfigAbilityModifier const&,std::shared_ptr<ActorAbility>)::shock_modifier_name_vec);
      __cxa_atexit(
        (void (__fastcall *)(void *))std::vector<std::string>::~vector,
        (void *)&AbilityComp::recordElementReactionModifierSource(unsigned int,data::ConfigAbilityModifier const&,std::shared_ptr<ActorAbility>)::shock_modifier_name_vec,
        &_dso_handle);
      std::allocator<std::string>::~allocator(&v40);
      for ( j = (std::string *)v49; j != &v47; std::string::~string(j) )
        --j;
      std::allocator<char>::~allocator(&v39);
      std::allocator<char>::~allocator(&__a);
    }
    if ( !(_BYTE)`guard variable for'AbilityComp::recordElementReactionModifierSource(unsigned int,data::ConfigAbilityModifier const&,std::shared_ptr<ActorAbility>)::conduct_shock_modifier_name_vec
      && __cxa_guard_acquire(&`guard variable for'AbilityComp::recordElementReactionModifierSource(unsigned int,data::ConfigAbilityModifier const&,std::shared_ptr<ActorAbility>)::conduct_shock_modifier_name_vec) )
    {
      std::allocator<char>::allocator(&__a);
      std::string::basic_string<std::allocator<char>>(&v47, "ConductShock", &__a);
      std::allocator<char>::allocator(&v39);
      std::string::basic_string<std::allocator<char>>(&v48, "ConductShock_Alter", &v39);
      v35._M_array = &v47;
      v35._M_len = 2LL;
      std::allocator<std::string>::allocator(&v40);
      std::vector<std::string>::vector(
        (std::vector<std::string> *const)&AbilityComp::recordElementReactionModifierSource(unsigned int,data::ConfigAbilityModifier const&,std::shared_ptr<ActorAbility>)::conduct_shock_modifier_name_vec,
        v35,
        &v40);
      __cxa_guard_release(&`guard variable for'AbilityComp::recordElementReactionModifierSource(unsigned int,data::ConfigAbilityModifier const&,std::shared_ptr<ActorAbility>)::conduct_shock_modifier_name_vec);
      __cxa_atexit(
        (void (__fastcall *)(void *))std::vector<std::string>::~vector,
        (void *)&AbilityComp::recordElementReactionModifierSource(unsigned int,data::ConfigAbilityModifier const&,std::shared_ptr<ActorAbility>)::conduct_shock_modifier_name_vec,
        &_dso_handle);
      std::allocator<std::string>::~allocator(&v40);
      for ( k = (std::string *)v49; k != &v47; std::string::~string(k) )
        --k;
      std::allocator<char>::~allocator(&v39);
      std::allocator<char>::~allocator(&__a);
    }
    if ( !(_BYTE)`guard variable for'AbilityComp::recordElementReactionModifierSource(unsigned int,data::ConfigAbilityModifier const&,std::shared_ptr<ActorAbility>)::electric_ability_name
      && __cxa_guard_acquire(&`guard variable for'AbilityComp::recordElementReactionModifierSource(unsigned int,data::ConfigAbilityModifier const&,std::shared_ptr<ActorAbility>)::electric_ability_name) )
    {
      std::allocator<char>::allocator(&v40);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)&AbilityComp::recordElementReactionModifierSource(unsigned int,data::ConfigAbilityModifier const&,std::shared_ptr<ActorAbility>)::electric_ability_name,
        "ElementAbility_Electric",
        (const std::allocator<char> *)&v40);
      __cxa_guard_release(&`guard variable for'AbilityComp::recordElementReactionModifierSource(unsigned int,data::ConfigAbilityModifier const&,std::shared_ptr<ActorAbility>)::electric_ability_name);
      __cxa_atexit(
        (void (__fastcall *)(void *))&std::string::~string,
        (void *)&AbilityComp::recordElementReactionModifierSource(unsigned int,data::ConfigAbilityModifier const&,std::shared_ptr<ActorAbility>)::electric_ability_name,
        &_dso_handle);
      std::allocator<char>::~allocator(&v40);
    }
    if ( !(_BYTE)`guard variable for'AbilityComp::recordElementReactionModifierSource(unsigned int,data::ConfigAbilityModifier const&,std::shared_ptr<ActorAbility>)::freeze_ability_name
      && __cxa_guard_acquire(&`guard variable for'AbilityComp::recordElementReactionModifierSource(unsigned int,data::ConfigAbilityModifier const&,std::shared_ptr<ActorAbility>)::freeze_ability_name) )
    {
      std::allocator<char>::allocator(&v40);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)&AbilityComp::recordElementReactionModifierSource(unsigned int,data::ConfigAbilityModifier const&,std::shared_ptr<ActorAbility>)::freeze_ability_name,
        "ElementAbility_Freeze",
        (const std::allocator<char> *)&v40);
      __cxa_guard_release(&`guard variable for'AbilityComp::recordElementReactionModifierSource(unsigned int,data::ConfigAbilityModifier const&,std::shared_ptr<ActorAbility>)::freeze_ability_name);
      __cxa_atexit(
        (void (__fastcall *)(void *))&std::string::~string,
        (void *)&AbilityComp::recordElementReactionModifierSource(unsigned int,data::ConfigAbilityModifier const&,std::shared_ptr<ActorAbility>)::freeze_ability_name,
        &_dso_handle);
      std::allocator<char>::~allocator(&v40);
    }
    std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_ability_ptr);
    ActorAbility::getCaster((ActorAbility *const)(v4 + 32));
    if ( std::operator==<Creature>((const std::shared_ptr<Creature> *)(v4 + 32), 0LL) )
      goto LABEL_35;
    v10 = (unsigned __int64)std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
    if ( *(_BYTE *)((v10 >> 3) + 0x7FFF8000) )
      v10 = __asan_report_load8(v10);
    v11 = *(_QWORD *)v10 + 24LL;
    if ( *(_BYTE *)((v11 >> 3) + 0x7FFF8000) )
      v10 = __asan_report_load8(*(_QWORD *)v10 + 24LL);
    if ( (*(unsigned int (__fastcall **)(unsigned __int64))v11)(v10) == 8 )
      v12 = 0;
    else
LABEL_35:
      v12 = 1;
    if ( !v12 )
    {
      v13 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_ability_ptr);
      v14 = ActorAbility::getName[abi:cxx11](v13);
      if ( !std::operator==<char>(
              v14,
              &AbilityComp::recordElementReactionModifierSource(unsigned int,data::ConfigAbilityModifier const&,std::shared_ptr<ActorAbility>)::electric_ability_name) )
        goto LABEL_60;
      if ( apply_entity_id )
      {
        EntityId = apply_entity_id;
      }
      else
      {
        if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
          __asan_report_load8(&this->creature_);
        EntityId = Entity::getEntityId((const Entity *const)this->creature_);
      }
      real_apply_entity_id = EntityId;
      __rhs._M_current = std::vector<std::string>::end(&AbilityComp::recordElementReactionModifierSource(unsigned int,data::ConfigAbilityModifier const&,std::shared_ptr<ActorAbility>)::shock_modifier_name_vec)._M_current;
      M_current = std::vector<std::string>::end(&AbilityComp::recordElementReactionModifierSource(unsigned int,data::ConfigAbilityModifier const&,std::shared_ptr<ActorAbility>)::shock_modifier_name_vec)._M_current;
      v17._M_current = std::vector<std::string>::begin(&AbilityComp::recordElementReactionModifierSource(unsigned int,data::ConfigAbilityModifier const&,std::shared_ptr<ActorAbility>)::shock_modifier_name_vec)._M_current;
      __lhs._M_current = std::find<__gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>,std::string>(
                           v17,
                           (__gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> >)M_current,
                           &modifier_config->modifier_name)._M_current;
      if ( __gnu_cxx::operator!=<std::string const*,std::vector<std::string>>(&__lhs, &__rhs) )
      {
        if ( *(_BYTE *)(((unsigned __int64)&this->last_shock_modifier_ori_src_entity_id_ >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&this->last_shock_modifier_ori_src_entity_id_ >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_store4(&this->last_shock_modifier_ori_src_entity_id_);
        }
        this->last_shock_modifier_ori_src_entity_id_ = real_apply_entity_id;
      }
      __rhs._M_current = std::vector<std::string>::end(&AbilityComp::recordElementReactionModifierSource(unsigned int,data::ConfigAbilityModifier const&,std::shared_ptr<ActorAbility>)::conduct_shock_modifier_name_vec)._M_current;
      v18 = std::vector<std::string>::end(&AbilityComp::recordElementReactionModifierSource(unsigned int,data::ConfigAbilityModifier const&,std::shared_ptr<ActorAbility>)::conduct_shock_modifier_name_vec)._M_current;
      v19._M_current = std::vector<std::string>::begin(&AbilityComp::recordElementReactionModifierSource(unsigned int,data::ConfigAbilityModifier const&,std::shared_ptr<ActorAbility>)::conduct_shock_modifier_name_vec)._M_current;
      v44._M_current = std::find<__gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>,std::string>(
                         v19,
                         (__gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> >)v18,
                         &modifier_config->modifier_name)._M_current;
      if ( !__gnu_cxx::operator!=<std::string const*,std::vector<std::string>>(&v44, &__rhs) )
        goto LABEL_60;
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      Entity::findEntityInSameScene<Creature>((const Entity *const)(v4 + 64), (uint32_t)this->creature_);
      if ( std::operator==<Creature>((const std::shared_ptr<Creature> *)(v4 + 64), 0LL) )
      {
        v20 = 0;
      }
      else
      {
        v21 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
        AbilityComp = Creature::getAbilityComp(v21);
        AbilityComp::findAbilityStateFirstSource((AbilityComp *const)(v4 + 96), (data::AbilityState)AbilityComp, 2048LL);
        if ( std::operator==<Creature>((const std::shared_ptr<Creature> *)(v4 + 96), 0LL) )
        {
          v23 = 0;
        }
        else
        {
          v24 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
          v25 = Entity::getEntityId((const Entity *const)v24);
          if ( *(_BYTE *)(((unsigned __int64)&this->last_shock_modifier_ori_src_entity_id_ >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&this->last_shock_modifier_ori_src_entity_id_ >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_store4(&this->last_shock_modifier_ori_src_entity_id_);
          }
          this->last_shock_modifier_ori_src_entity_id_ = v25;
          v23 = 1;
        }
        std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v4 + 96));
        v20 = v23 == 1;
      }
      std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v4 + 64));
      if ( v20 )
      {
LABEL_60:
        v26 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_ability_ptr);
        v27 = ActorAbility::getName[abi:cxx11](v26);
        if ( std::operator==<char>(
               v27,
               &AbilityComp::recordElementReactionModifierSource(unsigned int,data::ConfigAbilityModifier const&,std::shared_ptr<ActorAbility>)::freeze_ability_name) )
        {
          if ( apply_entity_id )
          {
            v28 = apply_entity_id;
          }
          else
          {
            if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
              __asan_report_load8(&this->creature_);
            v28 = Entity::getEntityId((const Entity *const)this->creature_);
          }
          real_apply_entity_id_0 = v28;
          __rhs._M_current = std::vector<std::string>::end(&AbilityComp::recordElementReactionModifierSource(unsigned int,data::ConfigAbilityModifier const&,std::shared_ptr<ActorAbility>)::freeze_modifier_name_vec)._M_current;
          v29 = std::vector<std::string>::end(&AbilityComp::recordElementReactionModifierSource(unsigned int,data::ConfigAbilityModifier const&,std::shared_ptr<ActorAbility>)::freeze_modifier_name_vec)._M_current;
          v30._M_current = std::vector<std::string>::begin(&AbilityComp::recordElementReactionModifierSource(unsigned int,data::ConfigAbilityModifier const&,std::shared_ptr<ActorAbility>)::freeze_modifier_name_vec)._M_current;
          v45._M_current = std::find<__gnu_cxx::__normal_iterator<std::string const*,std::vector<std::string>>,std::string>(
                             v30,
                             (__gnu_cxx::__normal_iterator<const std::string*,std::vector<std::string> >)v29,
                             &modifier_config->modifier_name)._M_current;
          if ( __gnu_cxx::operator!=<std::string const*,std::vector<std::string>>(&v45, &__rhs) )
          {
            if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
              __asan_report_load8(&this->creature_);
            Entity::findEntityInSameScene<Creature>((const Entity *const)(v4 + 64), (uint32_t)this->creature_);
            if ( std::operator!=<Creature>((const std::shared_ptr<Creature> *)(v4 + 64), 0LL) )
            {
              std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
              Creature::findOriginalPlayer((Creature *const)(v4 + 96));
              if ( std::operator!=<Player>((const std::shared_ptr<Player> *)(v4 + 96), 0LL) )
              {
                v31 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
                WatcherComp = Player::getWatcherComp(v31);
                if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
                  __asan_report_load8(&this->creature_);
                v33 = Entity::getEntityId((const Entity *const)this->creature_);
                PlayerWatcherComp::triggerElementReaction(WatcherComp, Freeze, v33, 0.0, 0);
              }
              std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v4 + 96));
            }
            std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v4 + 64));
          }
        }
      }
    }
    std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v4 + 32));
  }
  if ( v49 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 5877: range 000000001370145A-00000000137016E7
std::map<std::string,float> *__cdecl AbilityComp::getReactionDamageMap[abi:cxx11](
        std::map<std::string,float> *retstr,
        AbilityComp *const this)
{
  __m128i v2; // xmm0
  GameserverService *v3; // rsi
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v4; // rax
  const data::ElementDefine *ElementDefine; // rax
  std::string_view v6; // rax
  bool isEndsWith; // bl
  int v8; // ebx
  std::map<std::string,float>::mapped_type *v9; // rax
  int *v10; // rdx
  common::milog::MiLogStream *v11; // rcx
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rdx
  std::unordered_map<std::string,DynamicActorValue<std::any>>::iterator __for_begin; // [rsp+10h] [rbp-70h] BYREF
  std::unordered_map<std::string,DynamicActorValue<std::any>>::iterator __for_end; // [rsp+18h] [rbp-68h] BYREF
  std::unordered_map<std::string,DynamicActorValue<std::any>> *__for_range; // [rsp+20h] [rbp-60h]
  std::pair<const std::string,DynamicActorValue<std::any> > *__in; // [rsp+28h] [rbp-58h]
  std::tuple_element<0,std::pair<const std::string,DynamicActorValue<std::any> > >::type *key; // [rsp+30h] [rbp-50h]
  std::tuple_element<1,std::pair<const std::string,DynamicActorValue<std::any> > >::type *value; // [rsp+38h] [rbp-48h]
  std::any v22; // [rsp+40h] [rbp-40h] BYREF
  common::milog::MiLogStream v23; // [rsp+50h] [rbp-30h] BYREF

  std::map<std::string,float>::map(retstr);
  __for_range = &this->server_dynamic_value_map_;
  __for_begin._M_cur = std::unordered_map<std::string,DynamicActorValue<std::any>>::begin(&this->server_dynamic_value_map_)._M_cur;
  __for_end._M_cur = std::unordered_map<std::string,DynamicActorValue<std::any>>::end(&this->server_dynamic_value_map_)._M_cur;
  while ( std::__detail::operator!=<std::pair<std::string const,DynamicActorValue<std::any>>,true>(
            &__for_begin,
            &__for_end) )
  {
    __in = std::__detail::_Node_iterator<std::pair<std::string const,DynamicActorValue<std::any>>,false,true>::operator*(&__for_begin);
    key = std::get<0ul,std::string const,DynamicActorValue<std::any>>(__in);
    value = std::get<1ul,std::string const,DynamicActorValue<std::any>>(__in);
    v3 = ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v22);
    v4 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v22);
    ElementDefine = JsonConfigMgr::getElementDefine(&v4->design_config.json_config_mgr);
    v6._M_len = std::string::operator std::string_view(&ElementDefine->SUFFIX_REACTION_DAMAGE, v3);
    isEndsWith = common::tools::StringUtils::isEndsWith(key, v6);
    std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)&v22);
    if ( isEndsWith )
    {
      DynamicActorValue<std::any>::getValue((const DynamicActorValue<std::any> *const)&v22);
      *(float *)v2.m128i_i32 = safeAnyCast<float>(&v22);
      v8 = _mm_cvtsi128_si32(v2);
      v9 = std::map<std::string,float>::operator[](retstr, key);
      v10 = (int *)v9;
      if ( *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)v9 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) )
      {
        __asan_report_store4(v9);
      }
      *v10 = v8;
      std::any::~any(&v22);
    }
    std::__detail::_Node_iterator<std::pair<std::string const,DynamicActorValue<std::any>>,false,true>::operator++(&__for_begin);
  }
  common::milog::MiLogStream::create(
    &v23,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/ability/ability_comp.cpp",
    "getReactionDamageMap",
    5887);
  v11 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(&v23, (const char (*)[11])"creature_:");
  if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->creature_);
  v12 = common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v11, this->creature_);
  v13 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v12, (const char (*)[6])" map:");
  common::milog::MiLogStream::operator<<<std::string,float>(v13, retstr);
  common::milog::MiLogStream::~MiLogStream(&v23);
  return retstr;
};

// Line 5893: range 00000000137016E8-0000000013701E20
void __cdecl AbilityComp::tryRecordDashModifierApplied(AbilityComp *const this, ActorModifier *modifier)
{
  unsigned __int64 p_ability_wtr; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  unsigned __int64 v5; // rax
  unsigned __int64 v6; // rdx
  std::__shared_ptr_access<data::MoveStateMixin,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  char v8; // al
  int v9; // r14d
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  uint32_t PlayerTimeMs; // edi
  Player *v12; // rax
  PlayerWatcherComp *WatcherComp; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rcx
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rcx
  bool is_dash_modifier; // [rsp+17h] [rbp-129h]
  std::vector<std::shared_ptr<BaseAbilityMixin>>::iterator __for_begin; // [rsp+18h] [rbp-128h] BYREF
  std::vector<std::shared_ptr<BaseAbilityMixin>>::iterator __for_end; // [rsp+20h] [rbp-120h] BYREF
  std::vector<std::shared_ptr<BaseAbilityMixin>> *mixin_vec; // [rsp+28h] [rbp-118h]
  std::vector<std::shared_ptr<BaseAbilityMixin>> *__for_range; // [rsp+30h] [rbp-110h]
  std::shared_ptr<BaseAbilityMixin> *mixin_ptr; // [rsp+38h] [rbp-108h]
  BaseAbilityMixin v27; // [rsp+40h] [rbp-100h] BYREF

  p_ability_wtr = (unsigned __int64)&v27.ability_wtr_;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(160LL);
    if ( v3 )
      p_ability_wtr = v3;
  }
  *(_QWORD *)p_ability_wtr = 1102416563LL;
  *(_QWORD *)(p_ability_wtr + 8) = "4 32 16 15 avatar_ptr:5894 64 16 15 player_ptr:5899 96 16 14 scene_ptr:5904 128 16 21"
                                   " config_mixin_ptr:5913";
  *(_QWORD *)(p_ability_wtr + 16) = AbilityComp::tryRecordDashModifierApplied;
  v4 = (_DWORD *)(p_ability_wtr >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862724] = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->creature_);
  toPtr<Avatar,Creature>((Creature *)(p_ability_wtr + 32));
  if ( !std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(p_ability_wtr + 32), 0LL) )
  {
    v5 = (unsigned __int64)std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_ability_wtr + 32));
    if ( *(_BYTE *)((v5 >> 3) + 0x7FFF8000) )
      v5 = __asan_report_load8(v5);
    v6 = *(_QWORD *)v5 + 152LL;
    if ( *(_BYTE *)((v6 >> 3) + 0x7FFF8000) )
      v5 = __asan_report_load8(*(_QWORD *)v5 + 152LL);
    (*(void (__fastcall **)(unsigned __int64, unsigned __int64))v6)(p_ability_wtr + 64, v5);
    if ( !std::operator==<Player>((const std::shared_ptr<Player> *)(p_ability_wtr + 64), 0LL) )
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      Entity::getScene((const Entity *const)(p_ability_wtr + 96));
      if ( !std::operator==<Scene>((const std::shared_ptr<Scene> *)(p_ability_wtr + 96), 0LL) )
      {
        is_dash_modifier = 0;
        mixin_vec = BaseActorActionContext::getMixinVec(modifier);
        __for_range = mixin_vec;
        __for_begin._M_current = std::vector<std::shared_ptr<BaseAbilityMixin>>::begin(mixin_vec)._M_current;
        __for_end._M_current = std::vector<std::shared_ptr<BaseAbilityMixin>>::end(mixin_vec)._M_current;
        while ( __gnu_cxx::operator!=<std::shared_ptr<BaseAbilityMixin> *,std::vector<std::shared_ptr<BaseAbilityMixin>>>(
                  &__for_begin,
                  &__for_end) )
        {
          mixin_ptr = __gnu_cxx::__normal_iterator<std::shared_ptr<BaseAbilityMixin> *,std::vector<std::shared_ptr<BaseAbilityMixin>>>::operator*(&__for_begin);
          std::__shared_ptr_access<BaseAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BaseAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)mixin_ptr);
          BaseAbilityMixin::getConfig(&v27);
          std::dynamic_pointer_cast<data::MoveStateMixin,data::ConfigAbilityMixin>((const std::shared_ptr<data::ConfigAbilityMixin> *)(p_ability_wtr + 128));
          std::shared_ptr<data::ConfigAbilityMixin>::~shared_ptr((std::shared_ptr<data::ConfigAbilityMixin> *const)&v27);
          if ( !std::operator!=<data::MoveStateMixin>(
                  (const std::shared_ptr<data::MoveStateMixin> *)(p_ability_wtr + 128),
                  0LL) )
            goto LABEL_22;
          v7 = std::__shared_ptr_access<data::MoveStateMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::MoveStateMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_ability_wtr + 128));
          if ( *(_BYTE *)(((unsigned __int64)&v7->type >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&v7->type >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&v7->type);
          }
          if ( v7->type )
LABEL_22:
            v8 = 0;
          else
            v8 = 1;
          if ( v8 )
          {
            is_dash_modifier = 1;
            v9 = 0;
          }
          else
          {
            v9 = 1;
          }
          std::shared_ptr<data::MoveStateMixin>::~shared_ptr((std::shared_ptr<data::MoveStateMixin> *const)(p_ability_wtr + 128));
          if ( v9 != 1 )
            break;
          __gnu_cxx::__normal_iterator<std::shared_ptr<BaseAbilityMixin> *,std::vector<std::shared_ptr<BaseAbilityMixin>>>::operator++(&__for_begin);
        }
        if ( is_dash_modifier )
        {
          if ( *(_BYTE *)(((unsigned __int64)&this->dash_modifier_count_ >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&this->dash_modifier_count_ >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&this->dash_modifier_count_);
          }
          if ( ++this->dash_modifier_count_ == 1 )
          {
            v10 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_ability_wtr + 32));
            PlayerTimeMs = Avatar::getPlayerTimeMs(v10);
            if ( *(_BYTE *)(((unsigned __int64)&this->last_dash_modifier_applied_player_time_ms_ >> 3) + 0x7FFF8000) != 0
              && (char)((((_BYTE)this - 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->last_dash_modifier_applied_player_time_ms_ >> 3)
                                                                  + 0x7FFF8000) )
            {
              PlayerTimeMs = (_DWORD)this + 1012;
              __asan_report_store4(&this->last_dash_modifier_applied_player_time_ms_);
            }
            this->last_dash_modifier_applied_player_time_ms_ = PlayerTimeMs;
            v12 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_ability_wtr + 64));
            WatcherComp = Player::getWatcherComp(v12);
            PlayerWatcherComp::setIsDashInLastTimeInterval(WatcherComp, 1);
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)&v27._M_weak_this._M_refcount,
              &common::milog::MiLogDefault::default_log_obj_,
              1u,
              "./src/ability/ability_comp.cpp",
              "tryRecordDashModifierApplied",
              5930);
            v14 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
                    (common::milog::MiLogStream *const)&v27._M_weak_this._M_refcount,
                    (const char (*)[44])"last_dash_modifier_applied_player_time_ms_:");
            v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v14,
                    &this->last_dash_modifier_applied_player_time_ms_);
            v16 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v15, (const char (*)[2])" ");
            if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
              __asan_report_load8(&this->creature_);
            common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v16, this->creature_);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v27._M_weak_this._M_refcount);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&v27._M_weak_this._M_refcount,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/ability/ability_comp.cpp",
            "tryRecordDashModifierApplied",
            5934);
          v17 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
                  (common::milog::MiLogStream *const)&v27._M_weak_this._M_refcount,
                  (const char (*)[41])"DashModifierCount, dash_modifier_count_:");
          v18 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, &this->dash_modifier_count_);
          v19 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v18, (const char (*)[2])" ");
          if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->creature_);
          common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v19, this->creature_);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v27._M_weak_this._M_refcount);
        }
      }
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(p_ability_wtr + 96));
    }
    std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(p_ability_wtr + 64));
  }
  std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(p_ability_wtr + 32));
  if ( &v27.ability_wtr_ == (ActorAbilityWtr *)p_ability_wtr )
  {
    *(_QWORD *)((p_ability_wtr >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((p_ability_wtr >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((p_ability_wtr >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)p_ability_wtr = 1172321806LL;
    *(_QWORD *)((p_ability_wtr >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((p_ability_wtr >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((p_ability_wtr >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 5939: range 0000000013701E22-00000000137026AC
void __cdecl AbilityComp::tryRecordDashModifierRemoved(AbilityComp *const this, ActorModifier *modifier)
{
  unsigned __int64 p_ability_wtr; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  unsigned __int64 v5; // rax
  unsigned __int64 v6; // rdx
  std::__shared_ptr_access<data::MoveStateMixin,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  char v8; // al
  int v9; // r14d
  std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  uint32_t v11; // eax
  Player *v12; // rax
  PlayerWatcherComp *WatcherComp; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rcx
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rcx
  bool is_dash_modifier; // [rsp+17h] [rbp-149h]
  std::vector<std::shared_ptr<BaseAbilityMixin>>::iterator __for_begin; // [rsp+18h] [rbp-148h] BYREF
  std::vector<std::shared_ptr<BaseAbilityMixin>>::iterator __for_end; // [rsp+20h] [rbp-140h] BYREF
  std::vector<std::shared_ptr<BaseAbilityMixin>> *mixin_vec; // [rsp+28h] [rbp-138h]
  std::vector<std::shared_ptr<BaseAbilityMixin>> *__for_range; // [rsp+30h] [rbp-130h]
  std::shared_ptr<BaseAbilityMixin> *mixin_ptr; // [rsp+38h] [rbp-128h]
  BaseAbilityMixin v27; // [rsp+40h] [rbp-120h] BYREF

  p_ability_wtr = (unsigned __int64)&v27.ability_wtr_;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      p_ability_wtr = v3;
  }
  *(_QWORD *)p_ability_wtr = 1102416563LL;
  *(_QWORD *)(p_ability_wtr + 8) = "6 32 4 8 now:5977 48 4 17 pass_time_ms:5978 64 16 15 avatar_ptr:5940 96 16 15 player_"
                                   "ptr:5945 128 16 14 scene_ptr:5950 160 16 21 config_mixin_ptr:5959";
  *(_QWORD *)(p_ability_wtr + 16) = AbilityComp::tryRecordDashModifierRemoved;
  v4 = (_DWORD *)(p_ability_wtr >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862724] = -219021312;
  v4[536862725] = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->creature_);
  toPtr<Avatar,Creature>((Creature *)(p_ability_wtr + 64));
  if ( !std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(p_ability_wtr + 64), 0LL) )
  {
    v5 = (unsigned __int64)std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_ability_wtr + 64));
    if ( *(_BYTE *)((v5 >> 3) + 0x7FFF8000) )
      v5 = __asan_report_load8(v5);
    v6 = *(_QWORD *)v5 + 152LL;
    if ( *(_BYTE *)((v6 >> 3) + 0x7FFF8000) )
      v5 = __asan_report_load8(*(_QWORD *)v5 + 152LL);
    (*(void (__fastcall **)(unsigned __int64, unsigned __int64))v6)(p_ability_wtr + 96, v5);
    if ( !std::operator==<Player>((const std::shared_ptr<Player> *)(p_ability_wtr + 96), 0LL) )
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      Entity::getScene((const Entity *const)(p_ability_wtr + 128));
      if ( !std::operator==<Scene>((const std::shared_ptr<Scene> *)(p_ability_wtr + 128), 0LL) )
      {
        is_dash_modifier = 0;
        mixin_vec = BaseActorActionContext::getMixinVec(modifier);
        __for_range = mixin_vec;
        __for_begin._M_current = std::vector<std::shared_ptr<BaseAbilityMixin>>::begin(mixin_vec)._M_current;
        __for_end._M_current = std::vector<std::shared_ptr<BaseAbilityMixin>>::end(mixin_vec)._M_current;
        while ( __gnu_cxx::operator!=<std::shared_ptr<BaseAbilityMixin> *,std::vector<std::shared_ptr<BaseAbilityMixin>>>(
                  &__for_begin,
                  &__for_end) )
        {
          mixin_ptr = __gnu_cxx::__normal_iterator<std::shared_ptr<BaseAbilityMixin> *,std::vector<std::shared_ptr<BaseAbilityMixin>>>::operator*(&__for_begin);
          std::__shared_ptr_access<BaseAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<BaseAbilityMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)mixin_ptr);
          BaseAbilityMixin::getConfig(&v27);
          std::dynamic_pointer_cast<data::MoveStateMixin,data::ConfigAbilityMixin>((const std::shared_ptr<data::ConfigAbilityMixin> *)(p_ability_wtr + 160));
          std::shared_ptr<data::ConfigAbilityMixin>::~shared_ptr((std::shared_ptr<data::ConfigAbilityMixin> *const)&v27);
          if ( !std::operator!=<data::MoveStateMixin>(
                  (const std::shared_ptr<data::MoveStateMixin> *)(p_ability_wtr + 160),
                  0LL) )
            goto LABEL_22;
          v7 = std::__shared_ptr_access<data::MoveStateMixin,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::MoveStateMixin,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_ability_wtr + 160));
          if ( *(_BYTE *)(((unsigned __int64)&v7->type >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&v7->type >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&v7->type);
          }
          if ( v7->type )
LABEL_22:
            v8 = 0;
          else
            v8 = 1;
          if ( v8 )
          {
            is_dash_modifier = 1;
            v9 = 0;
          }
          else
          {
            v9 = 1;
          }
          std::shared_ptr<data::MoveStateMixin>::~shared_ptr((std::shared_ptr<data::MoveStateMixin> *const)(p_ability_wtr + 160));
          if ( v9 != 1 )
            break;
          __gnu_cxx::__normal_iterator<std::shared_ptr<BaseAbilityMixin> *,std::vector<std::shared_ptr<BaseAbilityMixin>>>::operator++(&__for_begin);
        }
        if ( is_dash_modifier )
        {
          if ( *(_BYTE *)(((unsigned __int64)&this->dash_modifier_count_ >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&this->dash_modifier_count_ >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&this->dash_modifier_count_);
          }
          if ( this->dash_modifier_count_ )
          {
            if ( *(_BYTE *)(((unsigned __int64)&this->dash_modifier_count_ >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)&this->dash_modifier_count_ >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(&this->dash_modifier_count_);
            }
            if ( !--this->dash_modifier_count_ )
            {
              if ( *(_BYTE *)(((unsigned __int64)&this->last_dash_modifier_applied_player_time_ms_ >> 3) + 0x7FFF8000) != 0
                && (char)((((_BYTE)this - 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->last_dash_modifier_applied_player_time_ms_ >> 3)
                                                                    + 0x7FFF8000) )
              {
                __asan_report_load4(&this->last_dash_modifier_applied_player_time_ms_);
              }
              if ( this->last_dash_modifier_applied_player_time_ms_ )
              {
                v10 = std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Avatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_ability_wtr + 64));
                *(_DWORD *)(p_ability_wtr + 32) = Avatar::getPlayerTimeMs(v10);
                if ( *(_BYTE *)(((unsigned __int64)&this->last_dash_modifier_applied_player_time_ms_ >> 3) + 0x7FFF8000) != 0
                  && (char)((((_BYTE)this - 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->last_dash_modifier_applied_player_time_ms_ >> 3)
                                                                      + 0x7FFF8000) )
                {
                  __asan_report_load4(&this->last_dash_modifier_applied_player_time_ms_);
                }
                if ( this->last_dash_modifier_applied_player_time_ms_ >= *(_DWORD *)(p_ability_wtr + 32) )
                  v11 = 0;
                else
                  v11 = *(_DWORD *)(p_ability_wtr + 32) - this->last_dash_modifier_applied_player_time_ms_;
                *(_DWORD *)(p_ability_wtr + 48) = v11;
                if ( *(_BYTE *)(((unsigned __int64)&this->last_dash_modifier_applied_player_time_ms_ >> 3) + 0x7FFF8000) != 0
                  && (char)((((_BYTE)this - 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->last_dash_modifier_applied_player_time_ms_ >> 3)
                                                                      + 0x7FFF8000) )
                {
                  __asan_report_store4(&this->last_dash_modifier_applied_player_time_ms_);
                }
                this->last_dash_modifier_applied_player_time_ms_ = 0;
                v12 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(p_ability_wtr + 96));
                WatcherComp = Player::getWatcherComp(v12);
                PlayerWatcherComp::tryUpdateDashRecord(WatcherComp, *(_DWORD *)(p_ability_wtr + 48));
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)&v27._M_weak_this._M_refcount,
                  &common::milog::MiLogDefault::default_log_obj_,
                  1u,
                  "./src/ability/ability_comp.cpp",
                  "tryRecordDashModifierRemoved",
                  5982);
                v14 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                        (common::milog::MiLogStream *const)&v27._M_weak_this._M_refcount,
                        (const char (*)[32])"UpdateDashRecord, pass_time_ms:");
                v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                        v14,
                        (const unsigned int *)(p_ability_wtr + 48));
                v16 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v15, (const char (*)[6])" now:");
                v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                        v16,
                        (const unsigned int *)(p_ability_wtr + 32));
                if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
                  __asan_report_load8(&this->creature_);
                common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v17, this->creature_);
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v27._M_weak_this._M_refcount);
              }
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)&v27._M_weak_this._M_refcount,
              &common::milog::MiLogDefault::default_log_obj_,
              1u,
              "./src/ability/ability_comp.cpp",
              "tryRecordDashModifierRemoved",
              5986);
            v18 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
                    (common::milog::MiLogStream *const)&v27._M_weak_this._M_refcount,
                    (const char (*)[41])"DashModifierCount, dash_modifier_count_:");
            v19 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v18,
                    &this->dash_modifier_count_);
            v20 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v19, (const char (*)[2])" ");
            if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
              __asan_report_load8(&this->creature_);
            common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v20, this->creature_);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v27._M_weak_this._M_refcount);
          }
        }
      }
      std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(p_ability_wtr + 128));
    }
    std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(p_ability_wtr + 96));
  }
  std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(p_ability_wtr + 64));
  if ( &v27.ability_wtr_ == (ActorAbilityWtr *)p_ability_wtr )
  {
    *(_QWORD *)((p_ability_wtr >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((p_ability_wtr >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((p_ability_wtr >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)p_ability_wtr = 1172321806LL;
    *(_QWORD *)((p_ability_wtr >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((p_ability_wtr >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((p_ability_wtr >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 5991: range 00000000137026AE-00000000137027E5
bool __cdecl AbilityComp::hasAvatarShield(AbilityComp *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  bool v4; // r15
  bool result; // al
  char v6[112]; // [rsp+10h] [rbp-70h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 16 15 avatar_ptr:5992";
  *(_QWORD *)(v1 + 16) = AbilityComp::hasAvatarShield;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->creature_);
  toPtr<Avatar,Creature>((Creature *)(v1 + 32));
  v4 = std::operator!=<Avatar>((const std::shared_ptr<Avatar> *)(v1 + 32), 0LL)
    && !std::unordered_map<std::string,unsigned int>::empty(&this->shield_ability_name_map_);
  std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v1 + 32));
  result = v4;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6001: range 00000000137027E6-0000000013702A2C
std::string *__cdecl AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11](std::string *retstr, AbilityComp *const this)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v5; // rax
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v6; // rdx
  void (__fastcall **v7)(std::string *, std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *); // rax
  void (__fastcall *v8)(std::string *, std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *); // r8
  std::allocator<char> __a; // [rsp+1Fh] [rbp-61h] BYREF
  char v11[96]; // [rsp+20h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 14 owner_ptr:6002";
  *(_QWORD *)(v2 + 16) = AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11];
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->creature_);
  Creature::findTopOwnerOrSelf((Creature *const)(v2 + 32));
  if ( std::operator==<Creature>(0LL, (const std::shared_ptr<Creature> *)(v2 + 32)) )
  {
    std::allocator<char>::allocator(&__a);
    std::string::basic_string<std::allocator<char>>(retstr, byte_24FD2920, &__a);
    std::allocator<char>::~allocator(&__a);
  }
  else
  {
    v5 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    v6 = v5;
    if ( *(_BYTE *)(((unsigned __int64)v5 >> 3) + 0x7FFF8000) )
      __asan_report_load8(v5);
    v7 = *(void (__fastcall ***)(std::string *, std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *))v6->baseclass_0;
    if ( *(_BYTE *)((*(_QWORD *)v6->baseclass_0 >> 3) + 0x7FFF8000LL) )
      v7 = (void (__fastcall **)(std::string *, std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *))__asan_report_load8(*(_QWORD *)v6->baseclass_0);
    v8 = *v7;
    if ( *(char *)(((unsigned __int64)retstr >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)((((unsigned __int64)&retstr->_anon_0._M_allocated_capacity + 15) >> 3) + 0x7FFF8000) != 0
      && (((unsigned __int8)retstr + 31) & 7) >= *(_BYTE *)((((unsigned __int64)&retstr->_anon_0._M_allocated_capacity
                                                            + 15) >> 3)
                                                          + 0x7FFF8000) )
    {
      __asan_report_store_n(retstr, 32LL);
    }
    v8(retstr, v6);
  }
  std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v2 + 32));
  if ( v11 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return retstr;
};

// Line 6018: range 0000000013702A2E-0000000013702F39
uint32_t __cdecl AbilityComp::getElementLevel(
        CreaturePtr *p_ref_combat_ptr,
        CreaturePtr *p_caster_ptr,
        bool is_avatar,
        ScenePtr *p_scene_ptr,
        const Vector3 *authority_cur_avatar_position)
{
  unsigned __int64 v5; // rbx
  __int64 v6; // rax
  unsigned __int64 v7; // r12
  uint32_t result; // eax
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  unsigned __int64 v11; // rax
  unsigned __int64 v12; // rdx
  char v13; // al
  unsigned __int64 v14; // rax
  unsigned __int64 v15; // rdx
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  uint32_t v18; // esi
  uint32_t *v19; // rax
  uint32_t *v20; // rdx
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v22; // rdx
  int __val; // [rsp+38h] [rbp-B8h] BYREF
  int __lo; // [rsp+3Ch] [rbp-B4h] BYREF
  uint32_t level; // [rsp+40h] [rbp-B0h]
  uint32_t clamped_world_level; // [rsp+44h] [rbp-ACh]
  const data::ConfigGlobalCombat *config_global_combat; // [rsp+48h] [rbp-A8h]
  std::shared_ptr<Scene> v31; // [rsp+50h] [rbp-A0h] BYREF
  common::milog::MiLogStream v32; // [rsp+60h] [rbp-90h] BYREF
  char v33[112]; // [rsp+80h] [rbp-70h] BYREF

  v5 = (unsigned __int64)v33;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_0(64LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "1 32 16 20 owner_world_ptr:6045";
  *(_QWORD *)(v5 + 16) = AbilityComp::getElementLevel;
  v7 = v5 >> 3;
  *(_DWORD *)(v7 + 2147450880) = -235802127;
  *(_DWORD *)(v7 + 2147450884) = -202178560;
  level = 1;
  if ( is_avatar )
  {
    if ( std::operator==<Creature>(p_ref_combat_ptr, 0LL) )
    {
      common::milog::MiLogStream::create(
        &v32,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/ability/ability_comp.cpp",
        "getElementLevel",
        6025);
      common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
        &v32,
        (const char (*)[26])"ref_combat_ptr is nullptr");
      common::milog::MiLogStream::~MiLogStream(&v32);
      result = 0;
      goto LABEL_33;
    }
    v9 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_ref_combat_ptr);
    level = Creature::getLevel(v9);
  }
  else if ( std::operator!=<Scene>(0LL, p_scene_ptr) )
  {
    v10 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_scene_ptr);
    if ( Scene::getSceneType(v10) == SCENE_DUNGEON )
    {
      std::shared_ptr<Scene>::shared_ptr(&v31, p_scene_ptr);
      level = AbilityComp::getDungeonReviseLevel(&v31);
      std::shared_ptr<Scene>::~shared_ptr(&v31);
    }
    else
    {
      if ( !std::operator!=<Creature>(0LL, p_caster_ptr) )
        goto LABEL_18;
      v11 = (unsigned __int64)std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_caster_ptr);
      if ( *(_BYTE *)((v11 >> 3) + 0x7FFF8000) )
        v11 = __asan_report_load8(v11);
      v12 = *(_QWORD *)v11 + 24LL;
      if ( *(_BYTE *)((v12 >> 3) + 0x7FFF8000) )
        v11 = __asan_report_load8(*(_QWORD *)v11 + 24LL);
      if ( (*(unsigned int (__fastcall **)(unsigned __int64))v12)(v11) == 11 )
        v13 = 1;
      else
LABEL_18:
        v13 = 0;
      if ( v13 )
      {
        v14 = (unsigned __int64)std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_scene_ptr);
        if ( *(_BYTE *)((v14 >> 3) + 0x7FFF8000) )
          v14 = __asan_report_load8(v14);
        v15 = *(_QWORD *)v14 + 64LL;
        if ( *(_BYTE *)((v15 >> 3) + 0x7FFF8000) )
          v14 = __asan_report_load8(*(_QWORD *)v14 + 64LL);
        (*(void (__fastcall **)(unsigned __int64, unsigned __int64))v15)(v5 + 32, v14);
        if ( std::operator!=<PlayerWorld>(0LL, (const std::shared_ptr<PlayerWorld> *)(v5 + 32)) )
        {
          ServiceBox::findService<GameserverService>();
          GameserverService::getConfig((GameserverService *const)&v31);
          v16 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v31);
          config_global_combat = JsonConfigMgr::getGlobalCombatConfig(&v16->design_config.json_config_mgr);
          std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)&v31);
          __lo = 0;
          v17 = std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<PlayerWorld,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 32));
          v18 = PlayerWorld::getLevel(v17);
          if ( *(_BYTE *)(((unsigned __int64)&config_global_combat->big_world_environment_damage_clamp >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&config_global_combat->big_world_environment_damage_clamp >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&config_global_combat->big_world_environment_damage_clamp);
          }
          __val = v18 - config_global_combat->big_world_environment_damage_clamp.reduce_level;
          v19 = (uint32_t *)std::clamp<int>(
                              &__val,
                              &__lo,
                              &config_global_combat->big_world_environment_damage_clamp.world_level_cut_threshhold);
          v20 = v19;
          if ( *(_BYTE *)(((unsigned __int64)v19 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v19 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v19 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v19);
          }
          clamped_world_level = *v20;
          v21 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_scene_ptr);
          level = Scene::getAreaLevel(v21, clamped_world_level, authority_cur_avatar_position);
        }
        std::shared_ptr<PlayerWorld>::~shared_ptr((std::shared_ptr<PlayerWorld> *const)(v5 + 32));
      }
      else
      {
        v22 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_scene_ptr);
        level = Scene::getAreaLevel(v22, authority_cur_avatar_position);
      }
    }
  }
  result = level;
LABEL_33:
  if ( v33 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6073: range 0000000013702F3A-0000000013703A10
float __cdecl AbilityComp::getElementLevelCo(
        CreaturePtr *p_caster_ptr,
        const Creature *target_creature,
        const data::ElementReactionType *reaction_type,
        const Vector3 *authority_cur_avatar_position,
        float *B1,
        float *critical,
        float *criticalHurt)
{
  unsigned __int64 v7; // r13
  __int64 v8; // rax
  _DWORD *v9; // r12
  const Creature *v10; // rdx
  unsigned __int64 v11; // rax
  Creature *v14; // rax
  FightPropComp *FightPropComp; // rax
  Creature *v16; // rax
  FightPropComp *v17; // rcx
  float v18; // xmm0_4
  Creature *v19; // rax
  FightPropComp *v20; // rax
  Creature *v21; // rax
  FightPropComp *v22; // rcx
  float v23; // xmm0_4
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v24; // rax
  common::milog::MiLogStream *v25; // rax
  float result; // xmm0_4
  float ElementReactionOverdoseAddHurtDelta; // [rsp+Ch] [rbp-184h]
  float ElementReactionAddHurtDelta; // [rsp+Ch] [rbp-184h]
  float player_element_level_co; // [rsp+Ch] [rbp-184h]
  bool is_avatar; // [rsp+4Eh] [rbp-142h]
  bool is_not_massive_entity; // [rsp+4Fh] [rbp-141h]
  const data::ElementCoeffExcelConfig *coeff_config_ptr; // [rsp+50h] [rbp-140h]
  CreaturePtr v37; // [rsp+58h] [rbp-138h] BYREF
  std::shared_ptr<Creature> __r; // [rsp+70h] [rbp-120h] BYREF
  common::milog::MiLogStream v39; // [rsp+80h] [rbp-110h] BYREF
  char v40[240]; // [rsp+A0h] [rbp-F0h] BYREF

  v7 = (unsigned __int64)v40;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v8 = __asan_stack_malloc_2(192LL);
    if ( v8 )
      v7 = v8;
  }
  *(_QWORD *)v7 = 1102416563LL;
  *(_QWORD *)(v7 + 8) = "5 48 4 10 level:6113 64 16 15 avatar_ptr:6079 96 16 19 ref_combat_ptr:6102 128 16 14 scene_ptr:6"
                        "112 160 16 23 owner_creature_ptr:6086";
  *(_QWORD *)(v7 + 16) = AbilityComp::getElementLevelCo;
  v9 = (_DWORD *)(v7 >> 3);
  v9[536862720] = -235802127;
  v9[536862721] = -234556943;
  v9[536862722] = -219021312;
  v9[536862723] = -219021312;
  v9[536862724] = -219021312;
  v9[536862725] = -202178560;
  if ( *(_BYTE *)(((unsigned __int64)B1 >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)B1 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)B1 >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(B1);
  }
  *B1 = 0.0;
  if ( *(_BYTE *)(((unsigned __int64)critical >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)critical & 7) + 3) >= *(_BYTE *)(((unsigned __int64)critical >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(critical);
  }
  *critical = 0.0;
  if ( *(_BYTE *)(((unsigned __int64)criticalHurt >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)criticalHurt & 7) + 3) >= *(_BYTE *)(((unsigned __int64)criticalHurt >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(criticalHurt);
  }
  *criticalHurt = 0.0;
  is_avatar = 0;
  v10 = target_creature;
  if ( *(_BYTE *)(((unsigned __int64)target_creature >> 3) + 0x7FFF8000) )
    __asan_report_load8(target_creature);
  v11 = *(_QWORD *)target_creature->baseclass_0 + 24LL;
  if ( *(_BYTE *)((v11 >> 3) + 0x7FFF8000) )
    v11 = __asan_report_load8(*(_QWORD *)target_creature->baseclass_0 + 24LL);
  is_not_massive_entity = (*(unsigned int (__fastcall **)(const Creature *))v11)(v10) != 10;
  std::shared_ptr<Avatar>::shared_ptr((std::shared_ptr<Avatar> *const)(v7 + 64), 0LL);
  if ( is_not_massive_entity && std::operator!=<Creature>(p_caster_ptr, 0LL) )
  {
    std::dynamic_pointer_cast<Avatar,Creature>(&__r);
    std::shared_ptr<Avatar>::operator=((std::shared_ptr<Avatar> *const)(v7 + 64), (std::shared_ptr<Avatar> *)&__r);
    std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)&__r);
    if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v7 + 64), 0LL) )
    {
      std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_caster_ptr);
      Creature::getOwner((const Creature *const)(v7 + 160));
      if ( std::operator!=<Creature>(0LL, (const std::shared_ptr<Creature> *)(v7 + 160)) )
      {
        std::dynamic_pointer_cast<Avatar,Creature>(&__r);
        std::shared_ptr<Avatar>::operator=((std::shared_ptr<Avatar> *const)(v7 + 64), (std::shared_ptr<Avatar> *)&__r);
        std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)&__r);
      }
      std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v7 + 160));
    }
    if ( std::operator==<Avatar>((const std::shared_ptr<Avatar> *)(v7 + 64), 0LL) )
    {
      std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_caster_ptr);
      Creature::findTopOwner((const Creature *const)(v7 + 160));
      if ( std::operator!=<Creature>(0LL, (const std::shared_ptr<Creature> *)(v7 + 160)) )
      {
        std::dynamic_pointer_cast<Avatar,Creature>(&__r);
        std::shared_ptr<Avatar>::operator=((std::shared_ptr<Avatar> *const)(v7 + 64), (std::shared_ptr<Avatar> *)&__r);
        std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)&__r);
      }
      std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v7 + 160));
    }
  }
  std::shared_ptr<Creature>::shared_ptr((std::shared_ptr<Creature> *const)(v7 + 96), 0LL);
  if ( std::operator!=<Avatar>((const std::shared_ptr<Avatar> *)(v7 + 64), 0LL) )
  {
    is_avatar = 1;
    std::shared_ptr<Creature>::operator=<Avatar>(
      (std::shared_ptr<Creature> *const)(v7 + 96),
      (const std::shared_ptr<Avatar> *)(v7 + 64));
  }
  else if ( std::operator!=<Creature>(p_caster_ptr, 0LL) )
  {
    std::shared_ptr<Creature>::operator=((std::shared_ptr<Creature> *const)(v7 + 96), p_caster_ptr);
  }
  Entity::getScene((const Entity *const)(v7 + 128));
  std::shared_ptr<Scene>::shared_ptr((std::shared_ptr<Scene> *const)&__r, (const std::shared_ptr<Scene> *)(v7 + 128));
  std::shared_ptr<Creature>::shared_ptr((std::shared_ptr<Creature> *const)(v7 + 160), p_caster_ptr);
  std::shared_ptr<Creature>::shared_ptr(
    (std::shared_ptr<Creature> *const)&v37._M_refcount,
    (const std::shared_ptr<Creature> *)(v7 + 96));
  *(_DWORD *)(v7 + 48) = AbilityComp::getElementLevel(
                           (CreaturePtr *)&v37._M_refcount,
                           (CreaturePtr *)(v7 + 160),
                           is_avatar,
                           (ScenePtr *)&__r,
                           authority_cur_avatar_position);
  std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)&v37._M_refcount);
  std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v7 + 160));
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)&__r);
  if ( is_not_massive_entity && std::operator!=<Creature>(0LL, (const std::shared_ptr<Creature> *)(v7 + 96)) )
  {
    if ( *(_BYTE *)(((unsigned __int64)reaction_type >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)reaction_type & 7) + 3) >= *(_BYTE *)(((unsigned __int64)reaction_type >> 3)
                                                                      + 0x7FFF8000) )
    {
      __asan_report_load4(reaction_type);
    }
    if ( *reaction_type == Overdose_0 || *reaction_type == OverdoseElectric || *reaction_type == OverdoseGrass )
    {
      v14 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 96));
      FightPropComp = Creature::getFightPropComp(v14);
      ElementReactionOverdoseAddHurtDelta = FightPropComp::getElementReactionOverdoseAddHurtDelta(FightPropComp);
      v16 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 96));
      v17 = Creature::getFightPropComp(v16);
      if ( *(_BYTE *)(((unsigned __int64)reaction_type >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)reaction_type & 7) + 3) >= *(_BYTE *)(((unsigned __int64)reaction_type >> 3)
                                                                        + 0x7FFF8000) )
      {
        __asan_report_load4(reaction_type);
      }
      v18 = FightPropComp::getElementReactionAddHurt(v17, *reaction_type) + ElementReactionOverdoseAddHurtDelta;
      if ( *(_BYTE *)(((unsigned __int64)B1 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)B1 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)B1 >> 3) + 0x7FFF8000) )
      {
        __asan_report_store4(B1);
      }
      *B1 = v18;
    }
    else
    {
      v19 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 96));
      v20 = Creature::getFightPropComp(v19);
      ElementReactionAddHurtDelta = FightPropComp::getElementReactionAddHurtDelta(v20);
      v21 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v7 + 96));
      v22 = Creature::getFightPropComp(v21);
      if ( *(_BYTE *)(((unsigned __int64)reaction_type >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)reaction_type & 7) + 3) >= *(_BYTE *)(((unsigned __int64)reaction_type >> 3)
                                                                        + 0x7FFF8000) )
      {
        __asan_report_load4(reaction_type);
      }
      v23 = FightPropComp::getElementReactionAddHurt(v22, *reaction_type) + ElementReactionAddHurtDelta;
      if ( *(_BYTE *)(((unsigned __int64)B1 >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)B1 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)B1 >> 3) + 0x7FFF8000) )
      {
        __asan_report_store4(B1);
      }
      *B1 = v23;
    }
    if ( *(_BYTE *)(((unsigned __int64)reaction_type >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)reaction_type & 7) + 3) >= *(_BYTE *)(((unsigned __int64)reaction_type >> 3)
                                                                      + 0x7FFF8000) )
    {
      __asan_report_load4(reaction_type);
    }
    std::shared_ptr<Creature>::shared_ptr(&__r, (const std::shared_ptr<Creature> *)(v7 + 96));
    AbilityComp::getElementReactionCritical(&v37, (data::ElementReactionType)&__r);
    std::tie<float,float>((float *)(v7 + 160), critical, criticalHurt, critical);
    std::tuple<float &,float &>::operator=<float,float>(
      (std::tuple<float&,float&> *const)(v7 + 160),
      (std::tuple<float,float> *)&v37);
    std::shared_ptr<Creature>::~shared_ptr(&__r);
  }
  ServiceBox::findService<GameserverService>();
  GameserverService::getConfig((GameserverService *const)&__r);
  v24 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&__r);
  coeff_config_ptr = data::ElementExcelConfigMgrBase::findElementCoeffExcelConfig(
                       &v24->design_config.txt_config_mgr.element_config_mgr,
                       *(_DWORD *)(v7 + 48));
  std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)&__r);
  if ( coeff_config_ptr )
  {
    if ( is_avatar )
    {
      if ( *(_BYTE *)(((unsigned __int64)&coeff_config_ptr->player_element_level_co >> 3) + 0x7FFF8000) != 0
        && (char)((((_BYTE)coeff_config_ptr + 20) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&coeff_config_ptr->player_element_level_co >> 3)
                                                                        + 0x7FFF8000) )
      {
        __asan_report_load4(&coeff_config_ptr->player_element_level_co);
      }
      player_element_level_co = coeff_config_ptr->player_element_level_co;
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&coeff_config_ptr->element_level_co >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&coeff_config_ptr->element_level_co >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&coeff_config_ptr->element_level_co);
      }
      player_element_level_co = coeff_config_ptr->element_level_co;
    }
  }
  else
  {
    common::milog::MiLogStream::create(
      &v39,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "getElementLevelCo",
      6131);
    v25 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
            &v39,
            (const char (*)[36])"coeff_config_ptr is nullptr, level=");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v25, (const unsigned int *)(v7 + 48));
    common::milog::MiLogStream::~MiLogStream(&v39);
    player_element_level_co = 0.0;
  }
  std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v7 + 128));
  std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v7 + 96));
  std::shared_ptr<Avatar>::~shared_ptr((std::shared_ptr<Avatar> *const)(v7 + 64));
  result = player_element_level_co;
  if ( v40 == (char *)v7 )
  {
    *(_QWORD *)((v7 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v7 = 1172321806LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v7 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6145: range 0000000013703A12-00000000137040C1
float __cdecl AbilityComp::getElementLevelCoForOvergrow(
        CreaturePtr *p_caster_ptr,
        bool is_avatar,
        ScenePtr *p_scene_ptr,
        const data::ElementReactionType *reaction_type,
        const Vector3 *authority_cur_avatar_position,
        float *B1,
        float *critical,
        float *criticalHurt)
{
  unsigned __int64 v8; // rbx
  __int64 v9; // rax
  unsigned __int64 v10; // r12
  float result; // xmm0_4
  Creature *v12; // rax
  FightPropComp *FightPropComp; // rax
  Creature *v14; // rax
  FightPropComp *v15; // rcx
  float v16; // xmm0_4
  float *v17; // rcx
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // rax
  common::milog::MiLogStream *v19; // rax
  float ElementReactionAddHurtDelta; // [rsp+20h] [rbp-E0h]
  const data::ElementCoeffExcelConfig *coeff_config_ptr; // [rsp+30h] [rbp-D0h]
  CreaturePtr v26; // [rsp+38h] [rbp-C8h] BYREF
  std::shared_ptr<Creature> v27; // [rsp+50h] [rbp-B0h] BYREF
  std::shared_ptr<Scene> v28; // [rsp+60h] [rbp-A0h] BYREF
  common::milog::MiLogStream v29; // [rsp+70h] [rbp-90h] BYREF
  char v30[112]; // [rsp+90h] [rbp-70h] BYREF

  v8 = (unsigned __int64)v30;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v9 = __asan_stack_malloc_0(64LL);
    if ( v9 )
      v8 = v9;
  }
  *(_QWORD *)v8 = 1102416563LL;
  *(_QWORD *)(v8 + 8) = "1 32 4 10 level:6156";
  *(_QWORD *)(v8 + 16) = AbilityComp::getElementLevelCoForOvergrow;
  v10 = v8 >> 3;
  *(_DWORD *)(v10 + 2147450880) = -235802127;
  *(_DWORD *)(v10 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((unsigned __int64)B1 >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)B1 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)B1 >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(B1);
  }
  *B1 = 0.0;
  if ( *(_BYTE *)(((unsigned __int64)critical >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)critical & 7) + 3) >= *(_BYTE *)(((unsigned __int64)critical >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(critical);
  }
  *critical = 0.0;
  if ( *(_BYTE *)(((unsigned __int64)criticalHurt >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)criticalHurt & 7) + 3) >= *(_BYTE *)(((unsigned __int64)criticalHurt >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(criticalHurt);
  }
  *criticalHurt = 0.0;
  if ( std::operator==<Creature>(p_caster_ptr, 0LL) )
  {
    result = 0.0;
  }
  else
  {
    if ( *(_BYTE *)(((unsigned __int64)reaction_type >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)reaction_type & 7) + 3) >= *(_BYTE *)(((unsigned __int64)reaction_type >> 3)
                                                                      + 0x7FFF8000) )
    {
      __asan_report_load4(reaction_type);
    }
    if ( *reaction_type == Overgrow
      || *reaction_type == OvergrowMushroomFire
      || *reaction_type == OvergrowMushroomElectric )
    {
      std::shared_ptr<Scene>::shared_ptr(&v28, p_scene_ptr);
      std::shared_ptr<Creature>::shared_ptr(&v27, p_caster_ptr);
      std::shared_ptr<Creature>::shared_ptr((std::shared_ptr<Creature> *const)&v26._M_refcount, p_caster_ptr);
      *(_DWORD *)(v8 + 32) = AbilityComp::getElementLevel(
                               (CreaturePtr *)&v26._M_refcount,
                               &v27,
                               is_avatar,
                               &v28,
                               authority_cur_avatar_position);
      std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)&v26._M_refcount);
      std::shared_ptr<Creature>::~shared_ptr(&v27);
      std::shared_ptr<Scene>::~shared_ptr(&v28);
      if ( std::operator!=<Creature>(p_caster_ptr, 0LL) )
      {
        v12 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_caster_ptr);
        FightPropComp = Creature::getFightPropComp(v12);
        ElementReactionAddHurtDelta = FightPropComp::getElementReactionAddHurtDelta(FightPropComp);
        v14 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_caster_ptr);
        v15 = Creature::getFightPropComp(v14);
        if ( *(_BYTE *)(((unsigned __int64)reaction_type >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)reaction_type & 7) + 3) >= *(_BYTE *)(((unsigned __int64)reaction_type >> 3)
                                                                          + 0x7FFF8000) )
        {
          __asan_report_load4(reaction_type);
        }
        v16 = FightPropComp::getElementReactionAddHurt(v15, *reaction_type) + ElementReactionAddHurtDelta;
        if ( *(_BYTE *)(((unsigned __int64)B1 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)B1 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)B1 >> 3) + 0x7FFF8000) )
        {
          __asan_report_store4(B1);
        }
        *B1 = v16;
        if ( *(_BYTE *)(((unsigned __int64)reaction_type >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)reaction_type & 7) + 3) >= *(_BYTE *)(((unsigned __int64)reaction_type >> 3)
                                                                          + 0x7FFF8000) )
        {
          __asan_report_load4(reaction_type);
        }
        std::shared_ptr<Creature>::shared_ptr((std::shared_ptr<Creature> *const)&v28, p_caster_ptr);
        AbilityComp::getElementReactionCritical(&v26, (data::ElementReactionType)&v28);
        std::tie<float,float>((float *)&v27, critical, criticalHurt, v17);
        std::tuple<float &,float &>::operator=<float,float>(
          (std::tuple<float&,float&> *const)&v27,
          (std::tuple<float,float> *)&v26);
        std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)&v28);
      }
      ServiceBox::findService<GameserverService>();
      GameserverService::getConfig((GameserverService *const)&v28);
      v18 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v28);
      coeff_config_ptr = data::ElementExcelConfigMgrBase::findElementCoeffExcelConfig(
                           &v18->design_config.txt_config_mgr.element_config_mgr,
                           *(_DWORD *)(v8 + 32));
      std::shared_ptr<Config>::~shared_ptr((std::shared_ptr<Config> *const)&v28);
      if ( coeff_config_ptr )
      {
        if ( is_avatar )
        {
          if ( *(_BYTE *)(((unsigned __int64)&coeff_config_ptr->player_element_level_co >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)coeff_config_ptr + 20) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&coeff_config_ptr->player_element_level_co >> 3)
                                                                            + 0x7FFF8000) )
          {
            __asan_report_load4(&coeff_config_ptr->player_element_level_co);
          }
          result = coeff_config_ptr->player_element_level_co;
        }
        else
        {
          if ( *(_BYTE *)(((unsigned __int64)&coeff_config_ptr->element_level_co >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&coeff_config_ptr->element_level_co >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&coeff_config_ptr->element_level_co);
          }
          result = coeff_config_ptr->element_level_co;
        }
      }
      else
      {
        common::milog::MiLogStream::create(
          &v29,
          &common::milog::MiLogDefault::default_log_obj_,
          0x13u,
          "./src/ability/ability_comp.cpp",
          "getElementLevelCoForOvergrow",
          6167);
        v19 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                &v29,
                (const char (*)[36])"coeff_config_ptr is nullptr, level=");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, (const unsigned int *)(v8 + 32));
        common::milog::MiLogStream::~MiLogStream(&v29);
        result = 0.0;
      }
    }
    else
    {
      result = 0.0;
    }
  }
  if ( v30 == (char *)v8 )
  {
    *(_QWORD *)((v8 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v8 = 1172321806LL;
    *(_QWORD *)((v8 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6174: range 00000000137040C2-0000000013704110
float __cdecl AbilityComp::getOvergrowVariationAddHurt(CreaturePtr *p_caster_ptr)
{
  __m128i v1; // xmm0
  Creature *v3; // rax
  FightPropComp *FightPropComp; // rax

  if ( std::operator==<Creature>(p_caster_ptr, 0LL) )
    return 0.0;
  v3 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)p_caster_ptr);
  FightPropComp = Creature::getFightPropComp(v3);
  *(float *)v1.m128i_i32 = FightPropComp::getElementReactOvergrowVariationDelta(FightPropComp);
  return COERCE_FLOAT(_mm_cvtsi128_si32(v1));
};

// Line 6181: range 0000000013704112-00000000137044E0
uint32_t __cdecl AbilityComp::getDungeonReviseLevel(ScenePtr *p_scene_ptr)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  uint32_t AdjustedLevel; // r14d
  unsigned __int64 v5; // rax
  unsigned __int64 v6; // rdx
  std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  uint32_t result; // eax
  uint32_t revise_level; // [rsp+10h] [rbp-D0h]
  uint32_t created_world_level; // [rsp+14h] [rbp-CCh]
  const data::DungeonExcelConfig *dungeon_config_ptr; // [rsp+18h] [rbp-C8h]
  std::shared_ptr<Config> v16; // [rsp+20h] [rbp-C0h] BYREF
  common::milog::MiLogStream v17; // [rsp+30h] [rbp-B0h] BYREF
  char v18[144]; // [rsp+50h] [rbp-90h] BYREF

  v1 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(96LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 4 15 dungeon_id:6190 64 16 22 dungeon_scene_ptr:6182";
  *(_QWORD *)(v1 + 16) = AbilityComp::getDungeonReviseLevel;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234556943;
  v3[536862722] = -202178560;
  std::dynamic_pointer_cast<DungeonScene,Scene>((const std::shared_ptr<Scene> *)(v1 + 64));
  if ( std::operator==<DungeonScene>(0LL, (const std::shared_ptr<DungeonScene> *)(v1 + 64)) )
  {
    common::milog::MiLogStream::create(
      &v17,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/ability/ability_comp.cpp",
      "getDungeonReviseLevel",
      6185);
    common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(&v17, (const char (*)[23])"is not a dungeon scene");
    common::milog::MiLogStream::~MiLogStream(&v17);
    AdjustedLevel = 0;
  }
  else
  {
    v5 = (unsigned __int64)std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 64));
    if ( *(_BYTE *)((v5 >> 3) + 0x7FFF8000) )
      v5 = __asan_report_load8(v5);
    v6 = *(_QWORD *)v5 + 264LL;
    if ( *(_BYTE *)((v6 >> 3) + 0x7FFF8000) )
      v5 = __asan_report_load8(*(_QWORD *)v5 + 264LL);
    revise_level = (*(__int64 (__fastcall **)(unsigned __int64))v6)(v5) + 1;
    v7 = std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 64));
    *(_DWORD *)(v1 + 48) = DungeonScene::getDungeonId(v7);
    ServiceBox::findService<GameserverService>();
    GameserverService::getConfig((GameserverService *const)&v16);
    v8 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v16);
    dungeon_config_ptr = data::DungeonExcelConfigMgrBase::findDungeonExcelConfig(
                           &v8->design_config.txt_config_mgr.dungeon_config_mgr,
                           *(_DWORD *)(v1 + 48));
    std::shared_ptr<Config>::~shared_ptr(&v16);
    if ( dungeon_config_ptr )
    {
      if ( *(_BYTE *)(((unsigned __int64)&dungeon_config_ptr->is_dynamic_level >> 3) + 0x7FFF8000) != 0
        && (((unsigned __int8)dungeon_config_ptr + 20) & 7) >= *(_BYTE *)(((unsigned __int64)&dungeon_config_ptr->is_dynamic_level >> 3)
                                                                        + 0x7FFF8000) )
      {
        __asan_report_load1(&dungeon_config_ptr->is_dynamic_level);
      }
      if ( !dungeon_config_ptr->is_dynamic_level )
      {
        AdjustedLevel = revise_level;
      }
      else
      {
        v11 = std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<DungeonScene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v1 + 64));
        created_world_level = DungeonScene::getCreatedWorldLevel(v11);
        AdjustedLevel = PlayerWorld::getAdjustedLevel(created_world_level, revise_level);
      }
    }
    else
    {
      common::milog::MiLogStream::create(
        &v17,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/ability/ability_comp.cpp",
        "getDungeonReviseLevel",
        6194);
      v9 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(&v17, (const char (*)[12])"dungeon_id=");
      v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v1 + 48));
      common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(v10, (const char (*)[18])" config not found");
      common::milog::MiLogStream::~MiLogStream(&v17);
      AdjustedLevel = revise_level;
    }
  }
  std::shared_ptr<DungeonScene>::~shared_ptr((std::shared_ptr<DungeonScene> *const)(v1 + 64));
  result = AdjustedLevel;
  if ( v18 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 6207: range 00000000137044E2-0000000013704DC5
void __cdecl AbilityComp::metaHandleUpdateElementReaction(
        AbilityComp *const this,
        const proto::AbilityInvokeEntry *entry,
        Player *from_player)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v6; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v7; // r14
  Creature *creature; // rsi
  Creature *v9; // rax
  unsigned __int64 v10; // rax
  common::milog::MiLogStream *v11; // rcx
  uint32_t v12; // eax
  common::milog::MiLogStream *v13; // rcx
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // r14
  unsigned __int64 v16; // rax
  void (__fastcall *v17)(std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, unsigned __int64, _QWORD); // r15
  Group *v18; // rax
  ChallengeComp *ChallengeComp; // r14
  google::protobuf::uint32 reaction_type; // [rsp+2Ch] [rbp-1A4h]
  const std::string *ability_data_str; // [rsp+38h] [rbp-198h]
  common::milog::MiLogStream v23; // [rsp+40h] [rbp-190h] BYREF
  std::string v; // [rsp+60h] [rbp-170h] BYREF
  char v25[336]; // [rsp+80h] [rbp-150h] BYREF

  v3 = (unsigned __int64)v25;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(288LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 48 16 16 monster_ptr:6221 80 16 14 scene_ptr:6224 112 16 25 trigger_creature_ptr:6230 144 16 1"
                        "4 group_ptr:6237 176 16 7 os:6213 208 40 34 meta_trigger_element_reaction:6210";
  *(_QWORD *)(v3 + 16) = AbilityComp::metaHandleUpdateElementReaction;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61937;
  v5[536862722] = 62194;
  v5[536862723] = 62194;
  v5[536862724] = 62194;
  v5[536862725] = 62194;
  v5[536862726] = 62194;
  v5[536862727] = -218103808;
  v5[536862728] = -202116109;
  proto::AbilityInvokeEntry::head(entry);
  ability_data_str = proto::AbilityInvokeEntry::ability_data[abi:cxx11](entry);
  proto::AbilityMetaTriggerElementReaction::AbilityMetaTriggerElementReaction((proto::AbilityMetaTriggerElementReaction *const)(v3 + 208));
  if ( (unsigned __int8)google::protobuf::MessageLite::ParseFromString(v3 + 208, ability_data_str) != 1 )
  {
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 176));
    v6 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
           (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 176),
           "AbilityMetaTriggerElementReaction ParseFromString fails");
    v7 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v6, ", owner:");
    AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11](&v, this);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v7, &v);
    std::string::~string(&v);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
      &v,
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 176));
    AbilityComp::invokeFailNotify(this, entry, from_player, &v);
    std::string::~string(&v);
    common::milog::MiLogStream::create(
      &v23,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "metaHandleUpdateElementReaction",
      6213);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
      &v,
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 176));
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(&v23, &v);
    std::string::~string(&v);
    common::milog::MiLogStream::~MiLogStream(&v23);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 176));
  }
  else
  {
    proto::AbilityMetaTriggerElementReaction::trigger_entity_id((const proto::AbilityMetaTriggerElementReaction *const)(v3 + 208));
    reaction_type = proto::AbilityMetaTriggerElementReaction::element_reaction_type((const proto::AbilityMetaTriggerElementReaction *const)(v3 + 208));
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    creature = this->creature_;
    v9 = creature;
    if ( *(_BYTE *)(((unsigned __int64)creature >> 3) + 0x7FFF8000) )
      v9 = (Creature *)__asan_report_load8(this->creature_);
    v10 = *(_QWORD *)v9->baseclass_0 + 24LL;
    if ( *(_BYTE *)((v10 >> 3) + 0x7FFF8000) )
      v10 = __asan_report_load8(v10);
    if ( (*(unsigned int (__fastcall **)(Creature *))v10)(creature) == 2 )
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      toPtr<Monster,Creature>((Creature *)(v3 + 48));
      if ( std::operator!=<Monster>((const std::shared_ptr<Monster> *)(v3 + 48), 0LL) )
      {
        std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 48));
        Entity::getScene((const Entity *const)(v3 + 80));
        if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v3 + 80), 0LL) )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&v,
            &common::milog::MiLogDefault::default_log_obj_,
            0x13u,
            "./src/ability/ability_comp.cpp",
            "metaHandleUpdateElementReaction",
            6227);
          v11 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                  (common::milog::MiLogStream *const)&v,
                  (const char (*)[19])"scene_ptr is null ");
          if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
            __asan_report_load8(&this->creature_);
          common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v11, this->creature_);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v);
        }
        else
        {
          v12 = (unsigned int)std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80));
          Scene::findEntity<Creature>((const Scene *const)(v3 + 112), v12);
          if ( std::operator==<Creature>((const std::shared_ptr<Creature> *)(v3 + 112), 0LL) )
          {
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)&v,
              &common::milog::MiLogDefault::default_log_obj_,
              0x13u,
              "./src/ability/ability_comp.cpp",
              "metaHandleUpdateElementReaction",
              6233);
            v13 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
                    (common::milog::MiLogStream *const)&v,
                    (const char (*)[30])"trigger_creature_ptr is null ");
            if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
              __asan_report_load8(&this->creature_);
            common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v13, this->creature_);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v);
          }
          else
          {
            v14 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 80));
            v15 = v14;
            if ( *(_BYTE *)(((unsigned __int64)v14 >> 3) + 0x7FFF8000) )
              __asan_report_load8(v14);
            v16 = (unsigned __int64)(v15->_vptr_DescribalBase + 32);
            if ( *(_BYTE *)((v16 >> 3) + 0x7FFF8000) )
              v16 = __asan_report_load8(v15->_vptr_DescribalBase + 32);
            v17 = *(void (__fastcall **)(std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, unsigned __int64, _QWORD))v16;
            std::shared_ptr<Creature>::shared_ptr(
              (std::shared_ptr<Creature> *const)(v3 + 176),
              (const std::shared_ptr<Creature> *)(v3 + 112));
            v17(v15, v3 + 176, reaction_type);
            std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 176));
            std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Monster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 48));
            Entity::getGroup((const Entity *const)(v3 + 144));
            if ( std::operator!=<Group>((const std::shared_ptr<Group> *)(v3 + 144), 0LL) )
            {
              v18 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 144));
              ChallengeComp = Group::getChallengeComp(v18);
              std::shared_ptr<Creature>::shared_ptr(
                (std::shared_ptr<Creature> *const)(v3 + 176),
                (const std::shared_ptr<Creature> *)(v3 + 112));
              ChallengeComp::onTriggerElementReaction(
                ChallengeComp,
                (CreaturePtr *)(v3 + 176),
                (data::ElementReactionType)reaction_type);
              std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 176));
            }
            std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v3 + 144));
          }
          std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 112));
        }
        std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v3 + 80));
      }
      std::shared_ptr<Monster>::~shared_ptr((std::shared_ptr<Monster> *const)(v3 + 48));
    }
  }
  proto::AbilityMetaTriggerElementReaction::~AbilityMetaTriggerElementReaction((proto::AbilityMetaTriggerElementReaction *const)(v3 + 208));
  if ( v25 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = -168430091;
  }
};

// Line 6247: range 0000000013704DC6-0000000013706403
void __cdecl AbilityComp::metaHandleLoseHp(
        AbilityComp *const this,
        const proto::AbilityInvokeEntry *entry,
        Player *from_player)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  const std::string *v6; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v7; // r14
  Creature *creature; // rsi
  unsigned __int64 *v9; // rax
  unsigned __int64 v10; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v11; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v12; // r14
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v13; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v14; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v15; // r14
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v16; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v17; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v18; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v19; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v20; // r14
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v21; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v22; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v23; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v24; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v25; // r14
  uint32_t v26; // eax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v27; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v28; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v29; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v30; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v31; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v32; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v33; // r14
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v34; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v35; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v36; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v37; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v38; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v39; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v40; // r14
  unsigned __int64 v41; // rax
  unsigned __int64 v42; // rdx
  common::milog::MiLogStream *v43; // rcx
  bool is_server_modifier; // [rsp+27h] [rbp-2A9h]
  unsigned int target_id; // [rsp+28h] [rbp-2A8h]
  uint32_t modifier_id; // [rsp+2Ch] [rbp-2A4h]
  unsigned int ability_id; // [rsp+30h] [rbp-2A0h]
  unsigned int local_id; // [rsp+34h] [rbp-29Ch]
  const proto::AbilityInvokeEntryHead *head; // [rsp+38h] [rbp-298h]
  std::shared_ptr<Creature> __r; // [rsp+40h] [rbp-290h] BYREF
  std::shared_ptr<Creature> v53; // [rsp+50h] [rbp-280h] BYREF
  std::shared_ptr<ActorModifier> v54; // [rsp+60h] [rbp-270h] BYREF
  std::shared_ptr<Creature> v55; // [rsp+70h] [rbp-260h] BYREF
  std::string v; // [rsp+80h] [rbp-250h] BYREF
  std::string reason; // [rsp+A0h] [rbp-230h] BYREF
  char v58[528]; // [rsp+C0h] [rbp-210h] BYREF

  v3 = (unsigned __int64)v58;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(480LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "10 32 16 15 target_ptr:6259 64 16 23 config_ability_ptr:6274 96 16 16 ability_ptr:6275 128 16 17"
                        " modifier_ptr:6276 160 16 28 config_ability_impl_ptr:6290 192 16 20 invoke_site_ptr:6296 224 16 "
                        "22 config_action_ptr:6302 256 16 7 os:6252 288 24 17 meta_lose_hp:6249 352 88 10 param:6308";
  *(_QWORD *)(v3 + 16) = AbilityComp::metaHandleLoseHp;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -219021312;
  v5[536862722] = -219021312;
  v5[536862723] = -219021312;
  v5[536862724] = -219021312;
  v5[536862725] = -219021312;
  v5[536862726] = -219021312;
  v5[536862727] = -219021312;
  v5[536862728] = -219021312;
  v5[536862729] = -234881024;
  v5[536862730] = -218959118;
  v5[536862733] = -218103808;
  v5[536862734] = -202116109;
  head = proto::AbilityInvokeEntry::head(entry);
  proto::AbilityMetaLoseHp::AbilityMetaLoseHp((proto::AbilityMetaLoseHp *const)(v3 + 288));
  v6 = proto::AbilityInvokeEntry::ability_data[abi:cxx11](entry);
  if ( (unsigned __int8)google::protobuf::MessageLite::ParseFromString(v3 + 288, v6) != 1 )
  {
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 256));
    v7 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
           (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 256),
           "AbilityMetaLoseHp ParseFromString faile, entity:");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    creature = this->creature_;
    v9 = (unsigned __int64 *)creature;
    if ( *(_BYTE *)(((unsigned __int64)creature >> 3) + 0x7FFF8000) )
      v9 = (unsigned __int64 *)__asan_report_load8(this->creature_);
    v10 = *v9;
    if ( *(_BYTE *)((v10 >> 3) + 0x7FFF8000) )
      v10 = __asan_report_load8(v10);
    (*(void (__fastcall **)(std::string *, Creature *))v10)(&v, creature);
    v11 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v7, &v);
    v12 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v11, ", owner:");
    AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11](&reason, this);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v12, &reason);
    std::string::~string(&reason);
    std::string::~string(&v);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
      &reason,
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 256));
    AbilityComp::invokeFailNotify(this, entry, from_player, &reason);
    std::string::~string(&reason);
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&v,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "metaHandleLoseHp",
      6252);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
      &reason,
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 256));
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>((common::milog::MiLogStream *const)&v, &reason);
    std::string::~string(&reason);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 256));
  }
  else
  {
    target_id = proto::AbilityInvokeEntryHead::target_id(head);
    modifier_id = proto::AbilityInvokeEntryHead::instanced_modifier_id(head);
    ability_id = proto::AbilityInvokeEntryHead::instanced_ability_id(head);
    is_server_modifier = proto::AbilityInvokeEntryHead::is_serverbuff_modifier(head);
    *(_QWORD *)(v3 + 32) = 0LL;
    *(_QWORD *)(v3 + 40) = 0LL;
    if ( target_id )
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      Entity::findEntityInSameScene<Creature>((const Entity *const)&v53, (uint32_t)this->creature_);
      std::shared_ptr<Creature>::operator=((std::shared_ptr<Creature> *const)(v3 + 32), &v53);
      std::shared_ptr<Creature>::~shared_ptr(&v53);
    }
    else
    {
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      toThisPtr<Creature>((Creature *)&__r);
      std::shared_ptr<Creature>::operator=((std::shared_ptr<Creature> *const)(v3 + 32), &__r);
      std::shared_ptr<Creature>::~shared_ptr(&__r);
    }
    if ( std::operator==<Creature>(0LL, (const std::shared_ptr<Creature> *)(v3 + 32)) )
    {
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 256));
      v13 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
              (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 256),
              "AbilityMetaLoseHp can not find target:");
      v14 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v13, target_id);
      v15 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v14, ", owner:");
      AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11](&reason, this);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v15, &reason);
      std::string::~string(&reason);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        &reason,
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 256));
      AbilityComp::invokeFailNotify(this, entry, from_player, &reason);
      std::string::~string(&reason);
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&v,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "metaHandleLoseHp",
        6271);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        &reason,
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 256));
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
        (common::milog::MiLogStream *const)&v,
        &reason);
      std::string::~string(&reason);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 256));
    }
    else
    {
      *(_QWORD *)(v3 + 64) = 0LL;
      *(_QWORD *)(v3 + 72) = 0LL;
      *(_QWORD *)(v3 + 96) = 0LL;
      *(_QWORD *)(v3 + 104) = 0LL;
      *(_QWORD *)(v3 + 128) = 0LL;
      *(_QWORD *)(v3 + 136) = 0LL;
      AbilityComp::findAppliedModifier((AbilityComp *const)&v54, this, modifier_id, is_server_modifier);
      std::shared_ptr<ActorModifier>::operator=((std::shared_ptr<ActorModifier> *const)(v3 + 128), &v54);
      std::shared_ptr<ActorModifier>::~shared_ptr(&v54);
      if ( std::operator!=<ActorModifier>(0LL, (const std::shared_ptr<ActorModifier> *)(v3 + 128)) )
      {
        std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
        ActorModifier::getParentConfig((const ActorModifier *const)(v3 + 256));
        std::shared_ptr<data::ConfigAbility>::operator=<ConfigAbilityImpl>(
          (std::shared_ptr<data::ConfigAbility> *const)(v3 + 64),
          (std::shared_ptr<ConfigAbilityImpl> *)(v3 + 256));
        std::shared_ptr<ConfigAbilityImpl>::~shared_ptr((std::shared_ptr<ConfigAbilityImpl> *const)(v3 + 256));
        std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
        ActorModifier::getParentAbility((const ActorModifier *const)(v3 + 256));
        std::shared_ptr<ActorAbility>::operator=(
          (std::shared_ptr<ActorAbility> *const)(v3 + 96),
          (std::shared_ptr<ActorAbility> *)(v3 + 256));
        std::shared_ptr<ActorAbility>::~shared_ptr((std::shared_ptr<ActorAbility> *const)(v3 + 256));
      }
      if ( std::operator==<data::ConfigAbility>(0LL, (const std::shared_ptr<data::ConfigAbility> *)(v3 + 64)) )
      {
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 256));
        v16 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 256),
                "AbilityMetaLoseHp ability config not found ability_id:");
        v17 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v16, ability_id);
        v18 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v17, " modifier_id:");
        v19 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v18, modifier_id);
        v20 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v19, ", owner:");
        AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11](&reason, this);
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v20, &reason);
        std::string::~string(&reason);
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
          &reason,
          (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 256));
        AbilityComp::invokeFailNotify(this, entry, from_player, &reason);
        std::string::~string(&reason);
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&v,
          &common::milog::MiLogDefault::default_log_obj_,
          0x13u,
          "./src/ability/ability_comp.cpp",
          "metaHandleLoseHp",
          6286);
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
          &reason,
          (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 256));
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
          (common::milog::MiLogStream *const)&v,
          &reason);
        std::string::~string(&reason);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v);
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 256));
      }
      else
      {
        local_id = proto::AbilityMetaLoseHp::lose_hp_config_idx((const proto::AbilityMetaLoseHp *const)(v3 + 288));
        std::dynamic_pointer_cast<ConfigAbilityImpl,data::ConfigAbility>((const std::shared_ptr<data::ConfigAbility> *)(v3 + 160));
        if ( std::operator==<ConfigAbilityImpl>(0LL, (const std::shared_ptr<ConfigAbilityImpl> *)(v3 + 160)) )
        {
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 256));
          v21 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                  (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 256),
                  "AbilityMetaLoseHp ability config not impl ability_id:");
          v22 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v21, ability_id);
          v23 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v22, " modifier_id:");
          v24 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v23, modifier_id);
          v25 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v24, ", owner:");
          AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11](&reason, this);
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v25, &reason);
          std::string::~string(&reason);
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
            &reason,
            (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 256));
          AbilityComp::invokeFailNotify(this, entry, from_player, &reason);
          std::string::~string(&reason);
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&v,
            &common::milog::MiLogDefault::default_log_obj_,
            0x13u,
            "./src/ability/ability_comp.cpp",
            "metaHandleLoseHp",
            6293);
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
            &reason,
            (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 256));
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
            (common::milog::MiLogStream *const)&v,
            &reason);
          std::string::~string(&reason);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v);
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 256));
        }
        else
        {
          v26 = (unsigned int)std::__shared_ptr_access<ConfigAbilityImpl,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ConfigAbilityImpl,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
          ConfigAbilityImpl::getInvokeSite((const ConfigAbilityImpl *const)(v3 + 192), v26);
          if ( std::operator==<data::BaseActionContainer>(
                 0LL,
                 (const std::shared_ptr<data::BaseActionContainer> *)(v3 + 192)) )
          {
            common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 256));
            v27 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                    (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 256),
                    "AbilityMetaLoseHp ability invoke not found ability_id:");
            v28 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v27, ability_id);
            v29 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v28, " modifier_id:");
            v30 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v29, modifier_id);
            v31 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v30, " local_id:");
            v32 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v31, local_id);
            v33 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v32, ", owner:");
            AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11](&reason, this);
            common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v33, &reason);
            std::string::~string(&reason);
            common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
              &reason,
              (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 256));
            AbilityComp::invokeFailNotify(this, entry, from_player, &reason);
            std::string::~string(&reason);
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)&v,
              &common::milog::MiLogDefault::default_log_obj_,
              0x13u,
              "./src/ability/ability_comp.cpp",
              "metaHandleLoseHp",
              6299);
            common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
              &reason,
              (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 256));
            common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
              (common::milog::MiLogStream *const)&v,
              &reason);
            std::string::~string(&reason);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v);
            common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 256));
          }
          else
          {
            std::dynamic_pointer_cast<LoseHPImpl,data::BaseActionContainer>((const std::shared_ptr<data::BaseActionContainer> *)(v3 + 224));
            if ( std::operator==<LoseHPImpl>(0LL, (const std::shared_ptr<LoseHPImpl> *)(v3 + 224)) )
            {
              common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 256));
              v34 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 256),
                      "AbilityMetaLoseHp ability invoke not lose hp action ability_id:");
              v35 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v34, ability_id);
              v36 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v35, " modifier_id:");
              v37 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v36, modifier_id);
              v38 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v37, " local_id:");
              v39 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v38, local_id);
              v40 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v39, ", owner:");
              AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11](&reason, this);
              common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v40, &reason);
              std::string::~string(&reason);
              common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
                &reason,
                (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 256));
              AbilityComp::invokeFailNotify(this, entry, from_player, &reason);
              std::string::~string(&reason);
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)&v,
                &common::milog::MiLogDefault::default_log_obj_,
                0x13u,
                "./src/ability/ability_comp.cpp",
                "metaHandleLoseHp",
                6305);
              common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
                &reason,
                (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 256));
              common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                (common::milog::MiLogStream *const)&v,
                &reason);
              std::string::~string(&reason);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v);
              common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 256));
            }
            else
            {
              memset((void *)(v3 + 352), 0, 0x58uLL);
              std::shared_ptr<ActorAbility>::operator=(
                (std::shared_ptr<ActorAbility> *const)(v3 + 352),
                (const std::shared_ptr<ActorAbility> *)(v3 + 96));
              std::shared_ptr<ActorModifier>::operator=(
                (std::shared_ptr<ActorModifier> *const)(v3 + 368),
                (const std::shared_ptr<ActorModifier> *)(v3 + 128));
              if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
                __asan_report_load8(&this->creature_);
              toThisPtr<Creature>((Creature *)&v55);
              std::shared_ptr<Creature>::operator=((std::shared_ptr<Creature> *const)(v3 + 384), &v55);
              std::shared_ptr<Creature>::~shared_ptr(&v55);
              std::shared_ptr<Creature>::operator=(
                (std::shared_ptr<Creature> *const)(v3 + 400),
                (const std::shared_ptr<Creature> *)(v3 + 32));
              *(_QWORD *)(v3 + 416) = entry;
              toThisPtr<Player>((Player *)(v3 + 256));
              std::shared_ptr<Player>::operator=(
                (std::shared_ptr<Player> *const)(v3 + 424),
                (std::shared_ptr<Player> *)(v3 + 256));
              std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v3 + 256));
              v41 = (unsigned __int64)std::__shared_ptr_access<LoseHPImpl,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<LoseHPImpl,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 224));
              if ( *(_BYTE *)((v41 >> 3) + 0x7FFF8000) )
                v41 = __asan_report_load8(v41);
              v42 = *(_QWORD *)v41 + 64LL;
              if ( *(_BYTE *)((v42 >> 3) + 0x7FFF8000) )
                v41 = __asan_report_load8(*(_QWORD *)v41 + 64LL);
              (*(void (__fastcall **)(unsigned __int64, unsigned __int64))v42)(v41, v3 + 352);
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)&reason,
                &common::milog::MiLogDefault::default_log_obj_,
                1u,
                "./src/ability/ability_comp.cpp",
                "metaHandleLoseHp",
                6316);
              v43 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                      (common::milog::MiLogStream *const)&reason,
                      (const char (*)[23])"meta lose hp creature:");
              if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
                __asan_report_load8(&this->creature_);
              common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v43, this->creature_);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&reason);
              ActionParam::~ActionParam((ActionParam *const)(v3 + 352));
            }
            std::shared_ptr<LoseHPImpl>::~shared_ptr((std::shared_ptr<LoseHPImpl> *const)(v3 + 224));
          }
          std::shared_ptr<data::BaseActionContainer>::~shared_ptr((std::shared_ptr<data::BaseActionContainer> *const)(v3 + 192));
        }
        std::shared_ptr<ConfigAbilityImpl>::~shared_ptr((std::shared_ptr<ConfigAbilityImpl> *const)(v3 + 160));
      }
      std::shared_ptr<ActorModifier>::~shared_ptr((std::shared_ptr<ActorModifier> *const)(v3 + 128));
      std::shared_ptr<ActorAbility>::~shared_ptr((std::shared_ptr<ActorAbility> *const)(v3 + 96));
      std::shared_ptr<data::ConfigAbility>::~shared_ptr((std::shared_ptr<data::ConfigAbility> *const)(v3 + 64));
    }
    std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 32));
  }
  proto::AbilityMetaLoseHp::~AbilityMetaLoseHp((proto::AbilityMetaLoseHp *const)(v3 + 288));
  if ( v58 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8028) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8034) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8038) = -168430091;
  }
};

// Line 6321: range 0000000013706404-0000000013706C3B
void __cdecl AbilityComp::metaHandleDurabilityIsZero(
        AbilityComp *const this,
        const proto::AbilityInvokeEntry *entry,
        Player *from_player)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  const std::string *v6; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v7; // r14
  Creature *creature; // rsi
  unsigned __int64 *v9; // rax
  unsigned __int64 v10; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v11; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v12; // r14
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v13; // r14
  Creature *v14; // rsi
  unsigned __int64 *v15; // rax
  unsigned __int64 v16; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v17; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v18; // r14
  ActorModifier *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rcx
  bool is_server_modifier; // [rsp+22h] [rbp-11Eh]
  bool is_zero; // [rsp+23h] [rbp-11Dh]
  int modifier_id; // [rsp+24h] [rbp-11Ch]
  const proto::AbilityInvokeEntryHead *head; // [rsp+28h] [rbp-118h]
  std::string v; // [rsp+30h] [rbp-110h] BYREF
  std::string reason; // [rsp+50h] [rbp-F0h] BYREF
  char v31[208]; // [rsp+70h] [rbp-D0h] BYREF

  v3 = (unsigned __int64)v31;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(160LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 16 17 modifier_ptr:6331 64 16 7 os:6334 96 24 27 meta_durablity_is_zero:6323";
  *(_QWORD *)(v3 + 16) = AbilityComp::metaHandleDurabilityIsZero;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -219021312;
  v5[536862722] = -219021312;
  v5[536862723] = -218103808;
  v5[536862724] = -202116109;
  head = proto::AbilityInvokeEntry::head(entry);
  proto::AbilityMetaDurabilityIsZero::AbilityMetaDurabilityIsZero((proto::AbilityMetaDurabilityIsZero *const)(v3 + 96));
  v6 = proto::AbilityInvokeEntry::ability_data[abi:cxx11](entry);
  if ( (unsigned __int8)google::protobuf::MessageLite::ParseFromString(v3 + 96, v6) != 1 )
  {
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
    v7 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
           (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64),
           "AbilityMetaDurabilityIsZero ParseFromString fail, entity:");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    creature = this->creature_;
    v9 = (unsigned __int64 *)creature;
    if ( *(_BYTE *)(((unsigned __int64)creature >> 3) + 0x7FFF8000) )
      v9 = (unsigned __int64 *)__asan_report_load8(this->creature_);
    v10 = *v9;
    if ( *(_BYTE *)((v10 >> 3) + 0x7FFF8000) )
      v10 = __asan_report_load8(v10);
    (*(void (__fastcall **)(std::string *, Creature *))v10)(&v, creature);
    v11 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v7, &v);
    v12 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v11, ", owner:");
    AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11](&reason, this);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v12, &reason);
    std::string::~string(&reason);
    std::string::~string(&v);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
      &reason,
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
    AbilityComp::invokeFailNotify(this, entry, from_player, &reason);
    std::string::~string(&reason);
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&v,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "metaHandleDurabilityIsZero",
      6326);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
      &reason,
      (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>((common::milog::MiLogStream *const)&v, &reason);
    std::string::~string(&reason);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v);
    common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
  }
  else
  {
    modifier_id = proto::AbilityInvokeEntryHead::instanced_modifier_id(head);
    is_server_modifier = proto::AbilityInvokeEntryHead::is_serverbuff_modifier(head);
    AbilityComp::findAppliedModifier((AbilityComp *const)(v3 + 32), this, modifier_id, is_server_modifier);
    if ( std::operator==<ActorModifier>((const std::shared_ptr<ActorModifier> *)(v3 + 32), 0LL) )
    {
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
      v13 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
              (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64),
              "AbilityMetaDurabilityIsZero modifier_ptr is nullptr, entity:");
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      v14 = this->creature_;
      v15 = (unsigned __int64 *)v14;
      if ( *(_BYTE *)(((unsigned __int64)v14 >> 3) + 0x7FFF8000) )
        v15 = (unsigned __int64 *)__asan_report_load8(this->creature_);
      v16 = *v15;
      if ( *(_BYTE *)((v16 >> 3) + 0x7FFF8000) )
        v16 = __asan_report_load8(v16);
      (*(void (__fastcall **)(std::string *, Creature *))v16)(&v, v14);
      v17 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v13, &v);
      v18 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v17, ", owner:");
      AbilityComp::getTopOwnerOrSelfDesc[abi:cxx11](&reason, this);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v18, &reason);
      std::string::~string(&reason);
      std::string::~string(&v);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        &reason,
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
      AbilityComp::invokeFailNotify(this, entry, from_player, &reason);
      std::string::~string(&reason);
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&v,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "metaHandleDurabilityIsZero",
        6334);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
        &reason,
        (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
        (common::milog::MiLogStream *const)&v,
        &reason);
      std::string::~string(&reason);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&v);
      common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v3 + 64));
    }
    else
    {
      is_zero = proto::AbilityMetaDurabilityIsZero::is_zero((const proto::AbilityMetaDurabilityIsZero *const)(v3 + 96));
      v19 = std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorModifier,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
      ActorModifier::setDurablityIsZero(v19, is_zero);
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&reason,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/ability/ability_comp.cpp",
        "metaHandleDurabilityIsZero",
        6340);
      v20 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
              (common::milog::MiLogStream *const)&reason,
              (const char (*)[34])"meta durability is zero, is_zero:");
      v21 = common::milog::MiLogStream::operator<<(v20, is_zero);
      v22 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v21, (const char (*)[11])" creature:");
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v22, this->creature_);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&reason);
    }
    std::shared_ptr<ActorModifier>::~shared_ptr((std::shared_ptr<ActorModifier> *const)(v3 + 32));
  }
  proto::AbilityMetaDurabilityIsZero::~AbilityMetaDurabilityIsZero((proto::AbilityMetaDurabilityIsZero *const)(v3 + 96));
  if ( v31 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 6345: range 0000000013706C3C-0000000013706DAD
ActorAbilityPtr __cdecl AbilityComp::findRandomAbilityByGm(const AbilityComp *const this)
{
  __int64 v1; // rsi
  std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::shared_ptr<ActorAbility> > > *v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  int v5; // eax
  int v6; // eax
  std::shared_ptr<ActorAbility> *p_second; // rdx
  ActorAbilityPtr result; // rax
  int n; // [rsp+14h] [rbp-6Ch]
  std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::shared_ptr<ActorAbility> > >::_Self __y; // [rsp+18h] [rbp-68h] BYREF
  char v11[96]; // [rsp+20h] [rbp-60h] BYREF

  v2 = (std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::shared_ptr<ActorAbility> > > *)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = (std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::shared_ptr<ActorAbility> > > *)v3;
  }
  v2->_M_node = (std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::shared_ptr<ActorAbility> > >::_Base_ptr)1102416563;
  v2[1]._M_node = (std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::shared_ptr<ActorAbility> > >::_Base_ptr)"1 32 8 9 iter:6347";
  v2[2]._M_node = (std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::shared_ptr<ActorAbility> > >::_Base_ptr)AbilityComp::findRandomAbilityByGm;
  v4 = (unsigned __int64)v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116352;
  v5 = std::map<unsigned int,std::shared_ptr<ActorAbility>>::size((const std::map<unsigned int,std::shared_ptr<ActorAbility>> *const)(v1 + 248));
  n = common::tools::RandomUtils::rand<int>(0, v5);
  v2[4]._M_node = std::map<unsigned int,std::shared_ptr<ActorAbility>>::begin((const std::map<unsigned int,std::shared_ptr<ActorAbility>> *const)(v1 + 248))._M_node;
  while ( 1 )
  {
    __y._M_node = std::map<unsigned int,std::shared_ptr<ActorAbility>>::end((const std::map<unsigned int,std::shared_ptr<ActorAbility>> *const)(v1 + 248))._M_node;
    if ( !std::operator!=(v2 + 4, &__y) )
      break;
    v6 = n--;
    if ( v6 <= 0 )
    {
      p_second = &std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::shared_ptr<ActorAbility>>>::operator->(v2 + 4)->second;
      std::shared_ptr<ActorAbility>::shared_ptr((std::shared_ptr<ActorAbility> *const)this, p_second);
      goto LABEL_10;
    }
    std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::shared_ptr<ActorAbility>>>::operator++(v2 + 4);
  }
  std::shared_ptr<ActorAbility>::shared_ptr((std::shared_ptr<ActorAbility> *const)this, 0LL);
LABEL_10:
  if ( v11 == (char *)v2 )
  {
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    v2->_M_node = (std::_Rb_tree_const_iterator<std::pair<unsigned int const,std::shared_ptr<ActorAbility> > >::_Base_ptr)1172321806;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<ActorAbility,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 6358: range 0000000013706DAE-0000000013706E42
ActorModifierPtr __cdecl AbilityComp::findRandomModifierByGm(const AbilityComp *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rax
  const std::shared_ptr<ActorModifier> *v3; // rdx
  ActorModifierPtr result; // rax
  size_t i; // [rsp+18h] [rbp-8h]

  v2 = std::vector<std::shared_ptr<ActorModifier>>::size((const std::vector<std::shared_ptr<ActorModifier>> *const)(v1 + 296));
  i = common::tools::RandomUtils::rand<unsigned long>(0LL, v2);
  if ( i >= std::vector<std::shared_ptr<ActorModifier>>::size((const std::vector<std::shared_ptr<ActorModifier>> *const)(v1 + 296)) )
  {
    std::shared_ptr<ActorModifier>::shared_ptr((std::shared_ptr<ActorModifier> *const)this, 0LL);
  }
  else
  {
    v3 = std::vector<std::shared_ptr<ActorModifier>>::operator[](
           (const std::vector<std::shared_ptr<ActorModifier>> *const)(v1 + 296),
           i);
    std::shared_ptr<ActorModifier>::shared_ptr((std::shared_ptr<ActorModifier> *const)this, v3);
  }
  result._M_ptr = (std::__shared_ptr<ActorModifier,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 6368: range 0000000013706E44-000000001370729C
void __cdecl AbilityComp::addTargetAbilityByGm(AbilityComp *const this, const std::string *ability_name)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  Creature *creature; // rsi
  Creature *v6; // rax
  unsigned __int64 v7; // rax
  common::milog::MiLogStream *v8; // rcx
  common::milog::MiLogStream *v9; // rdx
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // r14
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  uint32_t EntityId; // eax
  proto::AbilityControlBlock *v15; // rdx
  Player *v16; // rax
  int val; // [rsp+1Ch] [rbp-D4h] BYREF
  char v19[208]; // [rsp+20h] [rbp-D0h] BYREF

  v2 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(160LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 22 ability_name_hash:6375 64 16 15 player_ptr:6369 96 32 11 notify:6378";
  *(_QWORD *)(v2 + 16) = AbilityComp::addTargetAbilityByGm;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -219021312;
  v4[536862724] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->creature_);
  creature = this->creature_;
  v6 = creature;
  if ( *(_BYTE *)(((unsigned __int64)creature >> 3) + 0x7FFF8000) )
    v6 = (Creature *)__asan_report_load8(this->creature_);
  v7 = *(_QWORD *)v6->baseclass_0 + 152LL;
  if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
    v7 = __asan_report_load8(v7);
  (*(void (__fastcall **)(unsigned __int64, Creature *))v7)(v2 + 64, creature);
  if ( std::operator==<Player>(0LL, (const std::shared_ptr<Player> *)(v2 + 64)) )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 96),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/ability/ability_comp.cpp",
      "addTargetAbilityByGm",
      6372);
    v8 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
           (common::milog::MiLogStream *const)(v2 + 96),
           (const char (*)[26])"player is null, creature:");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v8, this->creature_);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 96));
  }
  else
  {
    *(_DWORD *)(v2 + 48) = getStringHash(ability_name);
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 96),
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/ability/ability_comp.cpp",
      "addTargetAbilityByGm",
      6376);
    v9 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
           (common::milog::MiLogStream *const)(v2 + 96),
           (const char (*)[18])off_2503EEC0);
    v10 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v9, ability_name);
    v11 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v10, (const char (*)[11])" hash int:");
    val = getStringHash(ability_name);
    v12 = common::milog::MiLogStream::operator<<<int,(int *)0>(v11, &val);
    v13 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v12, (const char (*)[12])" hash uint:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v2 + 48));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 96));
    AbilityComp::addTargetAbility(this, *(_DWORD *)(v2 + 48), 0);
    proto::AbilityChangeNotify::AbilityChangeNotify((proto::AbilityChangeNotify *const)(v2 + 96));
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    EntityId = Entity::getEntityId((const Entity *const)this->creature_);
    proto::AbilityChangeNotify::set_entity_id((proto::AbilityChangeNotify *const)(v2 + 96), EntityId);
    v15 = proto::AbilityChangeNotify::mutable_ability_control_block((proto::AbilityChangeNotify *const)(v2 + 96));
    AbilityComp::getProtoAbilityControlBlock(this, v15);
    v16 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
    Player::sendProto(v16, (const google::protobuf::Message *)(v2 + 96));
    proto::AbilityChangeNotify::~AbilityChangeNotify((proto::AbilityChangeNotify *const)(v2 + 96));
  }
  std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v2 + 64));
  if ( v19 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 6385: range 000000001370729E-0000000013707605
void __cdecl AbilityComp::removeTargetAbilityByGm(AbilityComp *const this, const std::string *ability_name)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  Creature *creature; // rsi
  Creature *v6; // rax
  unsigned __int64 v7; // rax
  common::milog::MiLogStream *v8; // rcx
  int32_t StringHash; // ecx
  uint32_t EntityId; // eax
  proto::AbilityControlBlock *v11; // rdx
  Player *v12; // rax
  char v14[176]; // [rsp+20h] [rbp-B0h] BYREF

  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 16 15 player_ptr:6386 64 32 11 notify:6394";
  *(_QWORD *)(v2 + 16) = AbilityComp::removeTargetAbilityByGm;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862723] = -202116109;
  if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
    __asan_report_load8(&this->creature_);
  creature = this->creature_;
  v6 = creature;
  if ( *(_BYTE *)(((unsigned __int64)creature >> 3) + 0x7FFF8000) )
    v6 = (Creature *)__asan_report_load8(this->creature_);
  v7 = *(_QWORD *)v6->baseclass_0 + 152LL;
  if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
    v7 = __asan_report_load8(v7);
  (*(void (__fastcall **)(unsigned __int64, Creature *))v7)(v2 + 32, creature);
  if ( std::operator==<Player>(0LL, (const std::shared_ptr<Player> *)(v2 + 32)) )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/ability/ability_comp.cpp",
      "removeTargetAbilityByGm",
      6389);
    v8 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
           (common::milog::MiLogStream *const)(v2 + 64),
           (const char (*)[26])"player is null, creature:");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v8, this->creature_);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 64));
  }
  else
  {
    StringHash = getStringHash(ability_name);
    AbilityComp::removeTargetAbility(this, StringHash, 0);
    proto::AbilityChangeNotify::AbilityChangeNotify((proto::AbilityChangeNotify *const)(v2 + 64));
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    EntityId = Entity::getEntityId((const Entity *const)this->creature_);
    proto::AbilityChangeNotify::set_entity_id((proto::AbilityChangeNotify *const)(v2 + 64), EntityId);
    v11 = proto::AbilityChangeNotify::mutable_ability_control_block((proto::AbilityChangeNotify *const)(v2 + 64));
    AbilityComp::getProtoAbilityControlBlock(this, v11);
    v12 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 32));
    Player::sendProto(v12, (const google::protobuf::Message *)(v2 + 64));
    proto::AbilityChangeNotify::~AbilityChangeNotify((proto::AbilityChangeNotify *const)(v2 + 64));
  }
  std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v2 + 32));
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF800C) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 6401: range 0000000013707606-000000001370801B
__int64 __fastcall AbilityComp::notifyClientBeingHealed(
        AbilityComp *const this,
        uint32_t source_entity_id,
        uint32_t target_entity_id,
        float hp_amount,
        float real_hp_amout,
        const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *p_cur_player_ptr)
{
  unsigned __int64 v6; // r13
  __int64 v7; // rax
  _DWORD *v8; // r12
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  std::__shared_ptr_access<proto::EvtBeingHealedNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  std::__shared_ptr_access<proto::EvtBeingHealedNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  std::__shared_ptr_access<proto::EvtBeingHealedNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  std::__shared_ptr_access<proto::EvtBeingHealedNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  std::__shared_ptr_access<proto::EvtBeingHealedNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // r14
  std::string *v19; // rax
  common::milog::MiLogStream *v20; // r14
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  common::milog::MiLogStream *v22; // r14
  std::__shared_ptr_access<proto::EvtBeingHealedNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v23; // rax
  Player *v24; // rax
  common::milog::MiLogStream *v25; // r14
  std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v26; // rax
  uint32_t v27; // r14d
  Player *v28; // r15
  Scene *v29; // rax
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v30; // rax
  uint32_t *v31; // rdx
  GameserverService *v32; // rax
  PlayerSendPacketController *p_player_send_packet_controller; // r14
  __int64 result; // rax
  unsigned int val; // [rsp+30h] [rbp-210h] BYREF
  uint32_t uid; // [rsp+34h] [rbp-20Ch]
  std::vector<unsigned int>::iterator __for_begin; // [rsp+38h] [rbp-208h] BYREF
  std::vector<unsigned int>::iterator __for_end; // [rsp+40h] [rbp-200h] BYREF
  std::vector<unsigned int> *__for_range; // [rsp+48h] [rbp-1F8h]
  common::milog::MiLogStream v42; // [rsp+50h] [rbp-1F0h] BYREF
  common::milog::MiLogStream v43; // [rsp+70h] [rbp-1D0h] BYREF
  proto::CombatInvokeEntry p_invoke; // [rsp+90h] [rbp-1B0h] BYREF
  std::set<unsigned int> peer_id_set; // [rsp+C0h] [rbp-180h] BYREF
  char v46[336]; // [rsp+F0h] [rbp-150h] BYREF

  v6 = (unsigned __int64)v46;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v7 = __asan_stack_malloc_3(288LL);
    if ( v7 )
      v6 = v7;
  }
  *(_QWORD *)v6 = 1102416563LL;
  *(_QWORD *)(v6 + 8) = "6 48 4 21 source_entity_id:6400 64 4 21 target_entity_id:6400 80 16 15 notify_ptr:6402 112 16 14"
                        " scene_ptr:6441 144 24 20 forward_uid_vec:6448 208 40 16 send_invoke:6430";
  *(_QWORD *)(v6 + 16) = AbilityComp::notifyClientBeingHealed;
  v8 = (_DWORD *)(v6 >> 3);
  v8[536862720] = -235802127;
  v8[536862721] = -234556943;
  v8[536862722] = 61956;
  v8[536862723] = 62194;
  v8[536862724] = 62194;
  v8[536862725] = -218959360;
  v8[536862726] = 62194;
  v8[536862727] = -218103808;
  v8[536862728] = -202116109;
  *(_DWORD *)(v6 + 48) = source_entity_id;
  *(_DWORD *)(v6 + 64) = target_entity_id;
  common::tools::perf::make_shared<proto::EvtBeingHealedNotify>();
  if ( std::operator==<proto::EvtBeingHealedNotify>(
         (const std::shared_ptr<proto::EvtBeingHealedNotify> *)(v6 + 80),
         0LL) )
  {
    common::milog::MiLogStream::create(
      &v43,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "notifyClientBeingHealed",
      6407);
    v9 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
           &v43,
           (const char (*)[43])"create EvtBeingHealedNotify faild, target:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v6 + 64));
    common::milog::MiLogStream::~MiLogStream(&v43);
  }
  else
  {
    if ( !*(_DWORD *)(v6 + 48) )
    {
      common::milog::MiLogStream::create(
        &v43,
        &common::milog::MiLogDefault::default_log_obj_,
        0x11u,
        "./src/ability/ability_comp.cpp",
        "notifyClientBeingHealed",
        6413);
      v10 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
              &v43,
              (const char (*)[39])"notifyClientBeingHealed faild, target:");
      v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v6 + 64));
      v12 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v11, (const char (*)[9])" source:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v6 + 48));
      common::milog::MiLogStream::~MiLogStream(&v43);
    }
    if ( *(_DWORD *)(v6 + 64) )
    {
      if ( std::operator==<Player>((const std::shared_ptr<Player> *)p_cur_player_ptr, 0LL) )
      {
        common::milog::MiLogStream::create(
          &v43,
          &common::milog::MiLogDefault::default_log_obj_,
          0x13u,
          "./src/ability/ability_comp.cpp",
          "notifyClientBeingHealed",
          6422);
        common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
          &v43,
          (const char (*)[27])"cur_player_ptr ptr is null");
        common::milog::MiLogStream::~MiLogStream(&v43);
      }
      else
      {
        v14 = std::__shared_ptr_access<proto::EvtBeingHealedNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::EvtBeingHealedNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 80));
        proto::EvtBeingHealedNotify::set_heal_amount(v14, hp_amount);
        v15 = std::__shared_ptr_access<proto::EvtBeingHealedNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::EvtBeingHealedNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 80));
        proto::EvtBeingHealedNotify::set_real_heal_amount(v15, real_hp_amout);
        v16 = std::__shared_ptr_access<proto::EvtBeingHealedNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::EvtBeingHealedNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 80));
        proto::EvtBeingHealedNotify::set_source_id(v16, *(_DWORD *)(v6 + 48));
        v17 = std::__shared_ptr_access<proto::EvtBeingHealedNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::EvtBeingHealedNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 80));
        proto::EvtBeingHealedNotify::set_target_id(v17, *(_DWORD *)(v6 + 64));
        proto::CombatInvokeEntry::CombatInvokeEntry((proto::CombatInvokeEntry *const)(v6 + 208));
        proto::CombatInvokeEntry::set_argument_type(
          (proto::CombatInvokeEntry *const)(v6 + 208),
          COMBAT_BEING_HEALED_NTF);
        proto::CombatInvokeEntry::set_forward_type((proto::CombatInvokeEntry *const)(v6 + 208), FORWARD_TO_ALL);
        v18 = std::__shared_ptr_access<proto::EvtBeingHealedNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::EvtBeingHealedNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 80));
        v19 = proto::CombatInvokeEntry::mutable_combat_data[abi:cxx11]((proto::CombatInvokeEntry *const)(v6 + 208));
        if ( !google::protobuf::MessageLite::SerializeToString(v18, v19) )
        {
          common::milog::MiLogStream::create(
            &v43,
            &common::milog::MiLogDefault::default_log_obj_,
            0x13u,
            "./src/ability/ability_comp.cpp",
            "notifyClientBeingHealed",
            6435);
          v20 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
                  &v43,
                  (const char (*)[41])"SerializeToString failed, source player:");
          v21 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator*(p_cur_player_ptr);
          operator<<(v20, v21);
          common::milog::MiLogStream::~MiLogStream(&v43);
        }
        else
        {
          common::milog::MiLogStream::create(
            &v42,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/ability/ability_comp.cpp",
            "notifyClientBeingHealed",
            6439);
          v22 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                  &v42,
                  (const char (*)[32])"notifyClientBeingHealed notify:");
          v23 = std::__shared_ptr_access<proto::EvtBeingHealedNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::EvtBeingHealedNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 80));
          google::protobuf::Message::ShortDebugString[abi:cxx11]((std::string *)&v43, v23);
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v22, (const std::string *)&v43);
          std::string::~string(&v43);
          common::milog::MiLogStream::~MiLogStream(&v42);
          v24 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->(p_cur_player_ptr);
          Player::getSceneComp(v24);
          PlayerSceneComp::getCurScene((const PlayerSceneComp *const)(v6 + 112));
          if ( std::operator==<Scene>((const std::shared_ptr<Scene> *)(v6 + 112), 0LL) )
          {
            common::milog::MiLogStream::create(
              &v43,
              &common::milog::MiLogDefault::default_log_obj_,
              1u,
              "./src/ability/ability_comp.cpp",
              "notifyClientBeingHealed",
              6444);
            v25 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                    &v43,
                    (const char (*)[22])off_2503F2E0);
            v26 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->(p_cur_player_ptr);
            val = Player::getUid(v26);
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v25, &val);
            common::milog::MiLogStream::~MiLogStream(&v43);
          }
          else
          {
            memset(&peer_id_set, 0, sizeof(peer_id_set));
            std::set<unsigned int>::set(&peer_id_set);
            v27 = *(_DWORD *)(v6 + 64);
            v28 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator*(p_cur_player_ptr);
            v29 = std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Scene,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 112));
            FightHandler::getForwardSendPlayerUidVec(
              (std::vector<unsigned int> *)(v6 + 144),
              v29,
              v28,
              v27,
              FORWARD_TO_ALL,
              0,
              &peer_id_set);
            std::set<unsigned int>::~set(&peer_id_set);
            __for_range = (std::vector<unsigned int> *)(v6 + 144);
            __for_begin._M_current = std::vector<unsigned int>::begin((std::vector<unsigned int> *const)(v6 + 144))._M_current;
            __for_end._M_current = std::vector<unsigned int>::end((std::vector<unsigned int> *const)(v6 + 144))._M_current;
            while ( __gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(&__for_begin, &__for_end) )
            {
              v30 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*(&__for_begin);
              v31 = v30;
              if ( *(_BYTE *)(((unsigned __int64)v30 >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)v30 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v30 >> 3) + 0x7FFF8000) )
              {
                __asan_report_load4(v30);
              }
              uid = *v31;
              v32 = ServiceBox::findService<GameserverService>();
              p_player_send_packet_controller = &GameserverService::getGameThreadLocal(v32)->player_send_packet_controller;
              proto::CombatInvokeEntry::CombatInvokeEntry(&p_invoke, (const proto::CombatInvokeEntry *)(v6 + 208));
              PlayerSendPacketController::addCombatInvoke(p_player_send_packet_controller, uid, &p_invoke);
              proto::CombatInvokeEntry::~CombatInvokeEntry(&p_invoke);
              __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++(&__for_begin);
            }
            std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v6 + 144));
          }
          std::shared_ptr<Scene>::~shared_ptr((std::shared_ptr<Scene> *const)(v6 + 112));
        }
        proto::CombatInvokeEntry::~CombatInvokeEntry((proto::CombatInvokeEntry *const)(v6 + 208));
      }
    }
    else
    {
      common::milog::MiLogStream::create(
        &v43,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "notifyClientBeingHealed",
        6417);
      v13 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
              &v43,
              (const char (*)[39])"notifyClientBeingHealed faild, target:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v6 + 64));
      common::milog::MiLogStream::~MiLogStream(&v43);
    }
  }
  std::shared_ptr<proto::EvtBeingHealedNotify>::~shared_ptr((std::shared_ptr<proto::EvtBeingHealedNotify> *const)(v6 + 80));
  result = 0LL;
  if ( v46 == (char *)v6 )
  {
    *(_QWORD *)((v6 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v6 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    *(_QWORD *)v6 = 1172321806LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v6 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 6460: range 000000001370801C-00000000137086F5
int32_t __cdecl AbilityComp::notifyClientBeingHealed(
        AbilityComp *const this,
        ActionParam *param,
        float hp_amount,
        float real_hp_amout,
        uint32_t special_target_entityid)
{
  int32_t v5; // r15d
  unsigned __int64 v6; // r12
  __int64 v7; // rax
  _DWORD *v8; // r13
  common::milog::MiLogStream *v9; // rcx
  int v10; // r14d
  common::milog::MiLogStream *v11; // r14
  unsigned __int64 v12; // rax
  void (__fastcall **v13)(common::milog::MiLogStream *, unsigned __int64); // rdx
  int v14; // r14d
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  int32_t result; // eax
  uint32_t source_id; // [rsp+38h] [rbp-108h]
  uint32_t target_id; // [rsp+3Ch] [rbp-104h]
  std::shared_ptr<Player> p_cur_player_ptr; // [rsp+40h] [rbp-100h] BYREF
  common::milog::MiLogStream v22; // [rsp+50h] [rbp-F0h] BYREF
  common::milog::MiLogStream v23; // [rsp+70h] [rbp-D0h] BYREF
  char v24[176]; // [rsp+90h] [rbp-B0h] BYREF

  v6 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v7 = __asan_stack_malloc_1(128LL);
    if ( v7 )
      v6 = v7;
  }
  *(_QWORD *)v6 = 1102416563LL;
  *(_QWORD *)(v6 + 8) = "3 32 16 15 target_ptr:6463 64 16 15 source_ptr:6469 96 16 15 caster_ptr:6486";
  *(_QWORD *)(v6 + 16) = AbilityComp::notifyClientBeingHealed;
  v8 = (_DWORD *)(v6 >> 3);
  v8[536862720] = -235802127;
  v8[536862721] = -219021312;
  v8[536862722] = -219021312;
  v8[536862723] = -202178560;
  std::shared_ptr<Creature>::shared_ptr((std::shared_ptr<Creature> *const)(v6 + 32), &param->target_ptr);
  if ( std::operator==<Creature>((const std::shared_ptr<Creature> *)(v6 + 32), 0LL) )
  {
    common::milog::MiLogStream::create(
      &v23,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "notifyClientBeingHealed",
      6466);
    v9 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(&v23, (const char (*)[19])"target_ptr is null");
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v9, this->creature_);
    common::milog::MiLogStream::~MiLogStream(&v23);
    v5 = -1;
    v10 = 0;
  }
  else
  {
    std::shared_ptr<Creature>::shared_ptr((std::shared_ptr<Creature> *const)(v6 + 64), &param->source_ptr);
    if ( std::operator==<Creature>((const std::shared_ptr<Creature> *)(v6 + 64), 0LL) )
    {
      common::milog::MiLogStream::create(
        &v22,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "notifyClientBeingHealed",
        6472);
      v11 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
              &v22,
              (const char (*)[20])"source_ptr is null,");
      v12 = (unsigned __int64)std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 32));
      if ( *(_BYTE *)((v12 >> 3) + 0x7FFF8000) )
        v12 = __asan_report_load8(v12);
      v13 = *(void (__fastcall ***)(common::milog::MiLogStream *, unsigned __int64))v12;
      if ( *(_BYTE *)((*(_QWORD *)v12 >> 3) + 0x7FFF8000LL) )
        v12 = __asan_report_load8(*(_QWORD *)v12);
      (*v13)(&v23, v12);
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v11, (const std::string *)&v23);
      std::string::~string(&v23);
      common::milog::MiLogStream::~MiLogStream(&v22);
      v14 = 0;
    }
    else if ( std::operator==<Player>(&param->from_player_ptr, 0LL) )
    {
      common::milog::MiLogStream::create(
        &v23,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "notifyClientBeingHealed",
        6477);
      common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
        &v23,
        (const char (*)[24])"from player ptr is null");
      common::milog::MiLogStream::~MiLogStream(&v23);
      v14 = 0;
    }
    else if ( std::operator==<ActorAbility>(&param->ability_ptr, 0LL) )
    {
      common::milog::MiLogStream::create(
        &v23,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "notifyClientBeingHealed",
        6482);
      common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(&v23, (const char (*)[18])"param.ability_ptr");
      common::milog::MiLogStream::~MiLogStream(&v23);
      v14 = 0;
    }
    else
    {
      source_id = 0;
      std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)param);
      ActorAbility::getCaster((ActorAbility *const)(v6 + 96));
      if ( std::operator!=<Creature>((const std::shared_ptr<Creature> *)(v6 + 96), 0LL) )
      {
        v15 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 96));
        source_id = Entity::getEntityId((const Entity *const)v15);
      }
      else
      {
        common::milog::MiLogStream::create(
          &v23,
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/ability/ability_comp.cpp",
          "notifyClientBeingHealed",
          6493);
        common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
          &v23,
          (const char (*)[33])"healHPHandler caster_ptr is null");
        common::milog::MiLogStream::~MiLogStream(&v23);
      }
      v16 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v6 + 32));
      target_id = Entity::getEntityId((const Entity *const)v16);
      std::shared_ptr<Player>::shared_ptr(&p_cur_player_ptr, &param->from_player_ptr);
      if ( special_target_entityid )
        AbilityComp::notifyClientBeingHealed(
          this,
          source_id,
          special_target_entityid,
          hp_amount,
          real_hp_amout,
          (const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *)&p_cur_player_ptr);
      else
        AbilityComp::notifyClientBeingHealed(
          this,
          source_id,
          target_id,
          hp_amount,
          real_hp_amout,
          (const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *)&p_cur_player_ptr);
      std::shared_ptr<Player>::~shared_ptr(&p_cur_player_ptr);
      std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v6 + 96));
      v14 = 1;
    }
    std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v6 + 64));
    if ( v14 == 1 )
      v10 = 2;
    else
      v10 = 1;
  }
  std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v6 + 32));
  if ( v10 )
    v5 = 0;
  result = v5;
  if ( v24 == (char *)v6 )
  {
    *(_QWORD *)((v6 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v6 = 1172321806LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v6 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6510: range 00000000137086F6-0000000013708B81
int32_t __cdecl AbilityComp::setOverrideValueByGm(
        AbilityComp *const this,
        const std::string *ability_name,
        const std::string *override_key,
        float override_value)
{
  unsigned __int64 v4; // r12
  __int64 v5; // rax
  _DWORD *v6; // r13
  common::milog::MiLogStream *v7; // rdx
  common::milog::MiLogStream *v8; // rcx
  int32_t v9; // r14d
  common::milog::MiLogStream *v10; // rdx
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rcx
  ActorAbility *v14; // rax
  int32_t result; // eax
  std::unordered_map<std::string,data::DynamicArgument>::iterator __for_begin; // [rsp+20h] [rbp-E0h] BYREF
  std::unordered_map<std::string,data::DynamicArgument>::iterator __for_end; // [rsp+28h] [rbp-D8h] BYREF
  std::unordered_map<std::string,data::DynamicArgument> *__for_range; // [rsp+30h] [rbp-D0h]
  std::pair<const std::string,data::DynamicArgument> *__in; // [rsp+38h] [rbp-C8h]
  std::tuple_element<0,std::pair<const std::string,data::DynamicArgument> >::type *key; // [rsp+40h] [rbp-C0h]
  std::tuple_element<1,std::pair<const std::string,data::DynamicArgument> >::type *ability_special; // [rsp+48h] [rbp-B8h]
  common::milog::MiLogStream v23; // [rsp+50h] [rbp-B0h] BYREF
  char v24[144]; // [rsp+70h] [rbp-90h] BYREF

  v4 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(96LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "2 32 16 16 ability_ptr:6511 64 16 23 config_ability_ptr:6517";
  *(_QWORD *)(v4 + 16) = AbilityComp::setOverrideValueByGm;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -219021312;
  v6[536862722] = -202178560;
  AbilityComp::findAppliedAbility((AbilityComp *const)(v4 + 32), (const std::string *)this);
  if ( std::operator==<ActorAbility>(0LL, (const std::shared_ptr<ActorAbility> *)(v4 + 32)) )
  {
    common::milog::MiLogStream::create(
      &v23,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/ability/ability_comp.cpp",
      "setOverrideValueByGm",
      6514);
    v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(&v23, (const char (*)[16])off_2503F4E0);
    v8 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v7, ability_name);
    if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
      __asan_report_load8(&this->creature_);
    common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v8, this->creature_);
    common::milog::MiLogStream::~MiLogStream(&v23);
    v9 = -1;
  }
  else
  {
    std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
    ActorAbility::getConfig((const ActorAbility *const)(v4 + 64));
    if ( std::operator==<data::ConfigAbility>(0LL, (const std::shared_ptr<data::ConfigAbility> *)(v4 + 64)) )
    {
      common::milog::MiLogStream::create(
        &v23,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/ability/ability_comp.cpp",
        "setOverrideValueByGm",
        6520);
      v10 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(&v23, (const char (*)[9])"ability:");
      v11 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v10, ability_name);
      v12 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v11, (const char (*)[15])" has no config");
      if ( *(_BYTE *)(((unsigned __int64)&this->creature_ >> 3) + 0x7FFF8000) )
        __asan_report_load8(&this->creature_);
      common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v12, this->creature_);
      common::milog::MiLogStream::~MiLogStream(&v23);
      v9 = -1;
    }
    else
    {
      __for_range = &std::__shared_ptr_access<data::ConfigAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64))->ability_specials;
      __for_begin._M_cur = std::unordered_map<std::string,data::DynamicArgument>::begin(__for_range)._M_cur;
      __for_end._M_cur = std::unordered_map<std::string,data::DynamicArgument>::end(__for_range)._M_cur;
      while ( std::__detail::operator!=<std::pair<std::string const,data::DynamicArgument>,true>(
                &__for_begin,
                &__for_end) )
      {
        __in = std::__detail::_Node_iterator<std::pair<std::string const,data::DynamicArgument>,false,true>::operator*(&__for_begin);
        key = std::get<0ul,std::string const,data::DynamicArgument>(__in);
        ability_special = std::get<1ul,std::string const,data::DynamicArgument>(__in);
        if ( (unsigned __int8)std::string::empty(override_key) == 1 || !std::operator!=<char>(key, override_key) )
        {
          v14 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 32));
          ActorAbility::setServerFloatParam(v14, key, override_value);
        }
        std::__detail::_Node_iterator<std::pair<std::string const,data::DynamicArgument>,false,true>::operator++(&__for_begin);
      }
      v9 = 0;
    }
    std::shared_ptr<data::ConfigAbility>::~shared_ptr((std::shared_ptr<data::ConfigAbility> *const)(v4 + 64));
  }
  std::shared_ptr<ActorAbility>::~shared_ptr((std::shared_ptr<ActorAbility> *const)(v4 + 32));
  result = v9;
  if ( v24 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 6535: range 0000000013708B82-0000000013708FEC
int32_t __cdecl AbilityComp::setRegionalPlayVarValueHandler(
        AbilityComp *const this,
        const data::SetRegionalPlayVarValue *config_action,
        ActionParam *param)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t v6; // r14d
  unsigned __int64 v7; // rax
  unsigned __int64 v8; // rdx
  Player *v9; // rax
  PlayerRegionalPlayComp *RegionalPlayComp; // rcx
  int32_t result; // eax
  data::RegionalPlayVarType type; // [rsp+2Ch] [rbp-D4h]
  common::milog::MiLogStream v14; // [rsp+30h] [rbp-D0h] BYREF
  char v15[176]; // [rsp+50h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 16 16 ability_ptr:6536 64 16 15 target_ptr:6542 96 16 15 player_ptr:6548";
  *(_QWORD *)(v3 + 16) = AbilityComp::setRegionalPlayVarValueHandler;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -219021312;
  v5[536862722] = -219021312;
  v5[536862723] = -202178560;
  std::shared_ptr<ActorAbility>::shared_ptr((std::shared_ptr<ActorAbility> *const)(v3 + 32), &param->ability_ptr);
  if ( std::operator==<ActorAbility>(0LL, (const std::shared_ptr<ActorAbility> *)(v3 + 32)) )
  {
    common::milog::MiLogStream::create(
      &v14,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/ability/ability_comp.cpp",
      "setRegionalPlayVarValueHandler",
      6539);
    common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(&v14, (const char (*)[20])"ability_ptr is null");
    common::milog::MiLogStream::~MiLogStream(&v14);
    v6 = -1;
  }
  else
  {
    std::shared_ptr<Creature>::shared_ptr((std::shared_ptr<Creature> *const)(v3 + 64), &param->target_ptr);
    if ( std::operator==<Creature>(0LL, (const std::shared_ptr<Creature> *)(v3 + 64)) )
    {
      common::milog::MiLogStream::create(
        &v14,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/ability/ability_comp.cpp",
        "setRegionalPlayVarValueHandler",
        6545);
      common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(&v14, (const char (*)[19])"target_ptr is null");
      common::milog::MiLogStream::~MiLogStream(&v14);
      v6 = -1;
    }
    else
    {
      v7 = (unsigned __int64)std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
        v7 = __asan_report_load8(v7);
      v8 = *(_QWORD *)v7 + 152LL;
      if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
        v7 = __asan_report_load8(*(_QWORD *)v7 + 152LL);
      (*(void (__fastcall **)(unsigned __int64, unsigned __int64))v8)(v3 + 96, v7);
      if ( std::operator==<Player>(0LL, (const std::shared_ptr<Player> *)(v3 + 96)) )
      {
        common::milog::MiLogStream::create(
          &v14,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/ability/ability_comp.cpp",
          "setRegionalPlayVarValueHandler",
          6551);
        common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(&v14, (const char (*)[19])"player_ptr is null");
        common::milog::MiLogStream::~MiLogStream(&v14);
        v6 = -1;
      }
      else
      {
        if ( *(_BYTE *)(((unsigned __int64)&config_action->var_type >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&config_action->var_type >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&config_action->var_type);
        }
        type = config_action->var_type;
        v9 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
        RegionalPlayComp = Player::getRegionalPlayComp(v9);
        if ( *(_BYTE *)(((unsigned __int64)&config_action->var_value >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)config_action - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_action->var_value >> 3)
                                                                        + 0x7FFF8000) )
        {
          __asan_report_load4(&config_action->var_value);
        }
        v6 = PlayerRegionalPlayComp::setVarValue(RegionalPlayComp, type, config_action->var_value);
      }
      std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v3 + 96));
    }
    std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 64));
  }
  std::shared_ptr<ActorAbility>::~shared_ptr((std::shared_ptr<ActorAbility> *const)(v3 + 32));
  result = v6;
  if ( v15 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6560: range 0000000013708FEE-0000000013709536
int32_t __cdecl AbilityComp::addRegionalPlayVarValueHandler(
        AbilityComp *const this,
        const data::AddRegionalPlayVarValue *config_action,
        ActionParam *param)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t v6; // r14d
  unsigned __int64 v7; // rax
  unsigned __int64 v8; // rdx
  Player *v9; // rax
  PlayerRegionalPlayComp *v10; // r14
  float v11; // xmm0_4
  Player *v12; // rax
  PlayerRegionalPlayComp *RegionalPlayComp; // rcx
  int32_t result; // eax
  data::RegionalPlayVarType type; // [rsp+2Ch] [rbp-D4h]
  common::milog::MiLogStream v17; // [rsp+30h] [rbp-D0h] BYREF
  char v18[176]; // [rsp+50h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 16 16 ability_ptr:6561 64 16 15 target_ptr:6567 96 16 15 player_ptr:6573";
  *(_QWORD *)(v3 + 16) = AbilityComp::addRegionalPlayVarValueHandler;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -219021312;
  v5[536862722] = -219021312;
  v5[536862723] = -202178560;
  std::shared_ptr<ActorAbility>::shared_ptr((std::shared_ptr<ActorAbility> *const)(v3 + 32), &param->ability_ptr);
  if ( std::operator==<ActorAbility>(0LL, (const std::shared_ptr<ActorAbility> *)(v3 + 32)) )
  {
    common::milog::MiLogStream::create(
      &v17,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/ability/ability_comp.cpp",
      "addRegionalPlayVarValueHandler",
      6564);
    common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(&v17, (const char (*)[20])"ability_ptr is null");
    common::milog::MiLogStream::~MiLogStream(&v17);
    v6 = -1;
  }
  else
  {
    std::shared_ptr<Creature>::shared_ptr((std::shared_ptr<Creature> *const)(v3 + 64), &param->target_ptr);
    if ( std::operator==<Creature>(0LL, (const std::shared_ptr<Creature> *)(v3 + 64)) )
    {
      common::milog::MiLogStream::create(
        &v17,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/ability/ability_comp.cpp",
        "addRegionalPlayVarValueHandler",
        6570);
      common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(&v17, (const char (*)[19])"target_ptr is null");
      common::milog::MiLogStream::~MiLogStream(&v17);
      v6 = -1;
    }
    else
    {
      v7 = (unsigned __int64)std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
        v7 = __asan_report_load8(v7);
      v8 = *(_QWORD *)v7 + 152LL;
      if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
        v7 = __asan_report_load8(*(_QWORD *)v7 + 152LL);
      (*(void (__fastcall **)(unsigned __int64, unsigned __int64))v8)(v3 + 96, v7);
      if ( std::operator==<Player>(0LL, (const std::shared_ptr<Player> *)(v3 + 96)) )
      {
        common::milog::MiLogStream::create(
          &v17,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/ability/ability_comp.cpp",
          "addRegionalPlayVarValueHandler",
          6576);
        common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(&v17, (const char (*)[19])"player_ptr is null");
        common::milog::MiLogStream::~MiLogStream(&v17);
        v6 = -1;
      }
      else
      {
        if ( *(_BYTE *)(((unsigned __int64)&config_action->var_type >> 3) + 0x7FFF8000) != 0
          && *(_BYTE *)(((unsigned __int64)&config_action->var_type >> 3) + 0x7FFF8000) <= 3 )
        {
          __asan_report_load4(&config_action->var_type);
        }
        type = config_action->var_type;
        if ( *(_BYTE *)(((unsigned __int64)&config_action->add_value >> 3) + 0x7FFF8000) != 0
          && (char)((((_BYTE)config_action - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_action->add_value >> 3)
                                                                        + 0x7FFF8000) )
        {
          __asan_report_load4(&config_action->add_value);
        }
        if ( config_action->add_value >= 0.0 )
        {
          v12 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
          RegionalPlayComp = Player::getRegionalPlayComp(v12);
          if ( *(_BYTE *)(((unsigned __int64)&config_action->add_value >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)config_action - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_action->add_value >> 3)
                                                                          + 0x7FFF8000) )
          {
            __asan_report_load4(&config_action->add_value);
          }
          v6 = PlayerRegionalPlayComp::addVarValue(RegionalPlayComp, type, config_action->add_value);
        }
        else
        {
          v9 = std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Player,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
          v10 = Player::getRegionalPlayComp(v9);
          if ( *(_BYTE *)(((unsigned __int64)&config_action->add_value >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)config_action - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&config_action->add_value >> 3)
                                                                          + 0x7FFF8000) )
          {
            __asan_report_load4(&config_action->add_value);
          }
          v11 = std::abs(config_action->add_value);
          v6 = PlayerRegionalPlayComp::subVarValue(v10, type, v11);
        }
      }
      std::shared_ptr<Player>::~shared_ptr((std::shared_ptr<Player> *const)(v3 + 96));
    }
    std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 64));
  }
  std::shared_ptr<ActorAbility>::~shared_ptr((std::shared_ptr<ActorAbility> *const)(v3 + 32));
  result = v6;
  if ( v18 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6590: range 0000000013709538-0000000013709CBA
void __cdecl AbilityComp::setLogicStateValueHandler(
        AbilityComp *const this,
        const data::SetLogicStateValue *config_action,
        ActionParam *param)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  ActorAbility *v6; // r14
  common::milog::MiLogStream *v7; // r14
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // r14
  std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // r14
  std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // rax
  Group *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // r14
  std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v25; // rax
  const VariableScriptConfig *variable_script_config_ptr; // [rsp+28h] [rbp-F8h]
  common::milog::MiLogStream v28; // [rsp+30h] [rbp-F0h] BYREF
  char v29[208]; // [rsp+50h] [rbp-D0h] BYREF

  v3 = (unsigned __int64)v29;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(160LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 48 4 10 value:6597 64 16 16 ability_ptr:6591 96 16 15 target_ptr:6598 128 16 14 group_ptr:6604";
  *(_QWORD *)(v3 + 16) = AbilityComp::setLogicStateValueHandler;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -219021312;
  v5[536862723] = -219021312;
  v5[536862724] = -202178560;
  std::shared_ptr<ActorAbility>::shared_ptr((std::shared_ptr<ActorAbility> *const)(v3 + 64), &param->ability_ptr);
  if ( std::operator==<ActorAbility>(0LL, (const std::shared_ptr<ActorAbility> *)(v3 + 64)) )
  {
    common::milog::MiLogStream::create(
      &v28,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "setLogicStateValueHandler",
      6594);
    common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(&v28, (const char (*)[23])"ability_ptr is nullptr");
    common::milog::MiLogStream::~MiLogStream(&v28);
  }
  else
  {
    v6 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
    std::shared_ptr<DieCreatureRecord>::shared_ptr((std::shared_ptr<DieCreatureRecord> *const)(v3 + 128), 0LL);
    std::shared_ptr<Creature>::shared_ptr((std::shared_ptr<Creature> *const)(v3 + 96), 0LL);
    *(_DWORD *)(v3 + 48) = (int)ActorAbility::evaluate(
                                  v6,
                                  &config_action->value,
                                  (CreaturePtr *)(v3 + 96),
                                  (DieCreatureRecordPtr *)(v3 + 128));
    std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 96));
    std::shared_ptr<DieCreatureRecord>::~shared_ptr((std::shared_ptr<DieCreatureRecord> *const)(v3 + 128));
    std::shared_ptr<Creature>::shared_ptr((std::shared_ptr<Creature> *const)(v3 + 96), &param->target_ptr);
    if ( std::operator==<Creature>(0LL, (const std::shared_ptr<Creature> *)(v3 + 96)) )
    {
      common::milog::MiLogStream::create(
        &v28,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "setLogicStateValueHandler",
        6601);
      common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(&v28, (const char (*)[19])"target_ptr is null");
      common::milog::MiLogStream::~MiLogStream(&v28);
    }
    else
    {
      std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
      Entity::getGroup((const Entity *const)(v3 + 128));
      if ( std::operator==<Group>(0LL, (const std::shared_ptr<Group> *)(v3 + 128)) )
      {
        common::milog::MiLogStream::create(
          &v28,
          &common::milog::MiLogDefault::default_log_obj_,
          0x13u,
          "./src/ability/ability_comp.cpp",
          "setLogicStateValueHandler",
          6607);
        v7 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
               &v28,
               (const char (*)[19])"group_ptr is null ");
        v8 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
        common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v7, v8);
        common::milog::MiLogStream::~MiLogStream(&v28);
      }
      else
      {
        v9 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
        variable_script_config_ptr = Group::findVariableConfig(v9, &config_action->logic_state_name);
        if ( variable_script_config_ptr )
        {
          if ( *(_BYTE *)(((unsigned __int64)&variable_script_config_ptr->variable_type >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&variable_script_config_ptr->variable_type >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&variable_script_config_ptr->variable_type);
          }
          if ( variable_script_config_ptr->variable_type == VARIABLE_TYPE_LOGIC_STATE )
          {
            v20 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
            if ( Group::setVariableValue(v20, &config_action->logic_state_name, *(_DWORD *)(v3 + 48)) )
            {
              common::milog::MiLogStream::create(
                &v28,
                &common::milog::MiLogDefault::default_log_obj_,
                0x13u,
                "./src/ability/ability_comp.cpp",
                "setLogicStateValueHandler",
                6623);
              v21 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
                      &v28,
                      (const char (*)[30])"setVariableValue fails, name:");
              v22 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                      v21,
                      &config_action->logic_state_name);
              v23 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v22, (const char (*)[9])" value: ");
              v24 = common::milog::MiLogStream::operator<<<int,(int *)0>(v23, (const int *)(v3 + 48));
              v25 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
              operator<<(v24, v25);
              common::milog::MiLogStream::~MiLogStream(&v28);
            }
          }
          else
          {
            common::milog::MiLogStream::create(
              &v28,
              &common::milog::MiLogDefault::default_log_obj_,
              0x13u,
              "./src/ability/ability_comp.cpp",
              "setLogicStateValueHandler",
              6618);
            v13 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                    &v28,
                    (const char (*)[24])"invalid variable type: ");
            v14 = common::milog::MiLogStream::operator<<<proto::GroupVariableType,(proto::GroupVariableType*)0>(
                    v13,
                    &variable_script_config_ptr->variable_type);
            v15 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v14, (const char (*)[8])" name: ");
            v16 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                    v15,
                    &config_action->logic_state_name);
            v17 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v16, (const char (*)[9])" value: ");
            v18 = common::milog::MiLogStream::operator<<<int,(int *)0>(v17, (const int *)(v3 + 48));
            v19 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
            operator<<(v18, v19);
            common::milog::MiLogStream::~MiLogStream(&v28);
          }
        }
        else
        {
          common::milog::MiLogStream::create(
            &v28,
            &common::milog::MiLogDefault::default_log_obj_,
            0x13u,
            "./src/ability/ability_comp.cpp",
            "setLogicStateValueHandler",
            6613);
          v10 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                  &v28,
                  (const char (*)[33])"findVariableConfig fails, name: ");
          v11 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                  v10,
                  &config_action->logic_state_name);
          v12 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
          operator<<(v11, v12);
          common::milog::MiLogStream::~MiLogStream(&v28);
        }
      }
      std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v3 + 128));
    }
    std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 96));
  }
  std::shared_ptr<ActorAbility>::~shared_ptr((std::shared_ptr<ActorAbility> *const)(v3 + 64));
  if ( v29 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 6629: range 0000000013709CBC-000000001370A79F
void __cdecl AbilityComp::addLogicStateValueHandler(
        AbilityComp *const this,
        const data::AddLogicStateValue *config_action,
        ActionParam *param)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  ActorAbility *v6; // r14
  common::milog::MiLogStream *v7; // r14
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // r14
  std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // r14
  std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // rax
  Group *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // r14
  std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v25; // rax
  ActorAbility *v26; // r14
  ActorAbility *v27; // r14
  const int *v28; // rax
  _DWORD *v29; // rdx
  Group *v30; // rax
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rax
  common::milog::MiLogStream *v33; // rax
  common::milog::MiLogStream *v34; // r14
  std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v35; // rax
  const VariableScriptConfig *variable_script_config_ptr; // [rsp+28h] [rbp-138h]
  std::shared_ptr<Creature> p_global_value_source_ptr; // [rsp+30h] [rbp-130h] BYREF
  std::shared_ptr<DieCreatureRecord> p_record_ptr; // [rsp+40h] [rbp-120h] BYREF
  common::milog::MiLogStream v40; // [rsp+50h] [rbp-110h] BYREF
  char v41[240]; // [rsp+70h] [rbp-F0h] BYREF

  v3 = (unsigned __int64)v41;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "7 32 4 10 value:6636 48 4 14 old_value:6660 64 4 14 max_value:6670 80 4 14 min_value:6671 96 16 "
                        "16 ability_ptr:6630 128 16 15 target_ptr:6637 160 16 14 group_ptr:6643";
  *(_QWORD *)(v3 + 16) = AbilityComp::addLogicStateValueHandler;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -234556924;
  v5[536862723] = -219021312;
  v5[536862724] = -219021312;
  v5[536862725] = -202178560;
  std::shared_ptr<ActorAbility>::shared_ptr((std::shared_ptr<ActorAbility> *const)(v3 + 96), &param->ability_ptr);
  if ( std::operator==<ActorAbility>(0LL, (const std::shared_ptr<ActorAbility> *)(v3 + 96)) )
  {
    common::milog::MiLogStream::create(
      &v40,
      &common::milog::MiLogDefault::default_log_obj_,
      0x13u,
      "./src/ability/ability_comp.cpp",
      "addLogicStateValueHandler",
      6633);
    common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(&v40, (const char (*)[23])"ability_ptr is nullptr");
    common::milog::MiLogStream::~MiLogStream(&v40);
  }
  else
  {
    v6 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
    std::shared_ptr<DieCreatureRecord>::shared_ptr(&p_record_ptr, 0LL);
    std::shared_ptr<Creature>::shared_ptr(&p_global_value_source_ptr, 0LL);
    *(_DWORD *)(v3 + 32) = (int)ActorAbility::evaluate(
                                  v6,
                                  &config_action->value,
                                  &p_global_value_source_ptr,
                                  &p_record_ptr);
    std::shared_ptr<Creature>::~shared_ptr(&p_global_value_source_ptr);
    std::shared_ptr<DieCreatureRecord>::~shared_ptr(&p_record_ptr);
    std::shared_ptr<Creature>::shared_ptr((std::shared_ptr<Creature> *const)(v3 + 128), &param->target_ptr);
    if ( std::operator==<Creature>(0LL, (const std::shared_ptr<Creature> *)(v3 + 128)) )
    {
      common::milog::MiLogStream::create(
        &v40,
        &common::milog::MiLogDefault::default_log_obj_,
        0x13u,
        "./src/ability/ability_comp.cpp",
        "addLogicStateValueHandler",
        6640);
      common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(&v40, (const char (*)[19])"target_ptr is null");
      common::milog::MiLogStream::~MiLogStream(&v40);
    }
    else
    {
      std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
      Entity::getGroup((const Entity *const)(v3 + 160));
      if ( std::operator==<Group>(0LL, (const std::shared_ptr<Group> *)(v3 + 160)) )
      {
        common::milog::MiLogStream::create(
          &v40,
          &common::milog::MiLogDefault::default_log_obj_,
          0x13u,
          "./src/ability/ability_comp.cpp",
          "addLogicStateValueHandler",
          6646);
        v7 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
               &v40,
               (const char (*)[19])"group_ptr is null ");
        v8 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 128));
        common::milog::MiLogStream::operator<<<Creature,(Creature*)0>(v7, v8);
        common::milog::MiLogStream::~MiLogStream(&v40);
      }
      else
      {
        v9 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
        variable_script_config_ptr = Group::findVariableConfig(v9, &config_action->logic_state_name);
        if ( variable_script_config_ptr )
        {
          if ( *(_BYTE *)(((unsigned __int64)&variable_script_config_ptr->variable_type >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&variable_script_config_ptr->variable_type >> 3) + 0x7FFF8000) <= 3 )
          {
            __asan_report_load4(&variable_script_config_ptr->variable_type);
          }
          if ( variable_script_config_ptr->variable_type == VARIABLE_TYPE_LOGIC_STATE )
          {
            *(_DWORD *)(v3 + 48) = 0;
            v20 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
            if ( Group::getVariableValue(v20, &config_action->logic_state_name, (int32_t *)(v3 + 48)) )
            {
              common::milog::MiLogStream::create(
                &v40,
                &common::milog::MiLogDefault::default_log_obj_,
                0x13u,
                "./src/ability/ability_comp.cpp",
                "addLogicStateValueHandler",
                6663);
              v21 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                      &v40,
                      (const char (*)[27])"variable not found, name: ");
              v22 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                      v21,
                      &config_action->logic_state_name);
              v23 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v22, (const char (*)[9])" value: ");
              v24 = common::milog::MiLogStream::operator<<<int,(int *)0>(v23, (const int *)(v3 + 32));
              v25 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
              operator<<(v24, v25);
              common::milog::MiLogStream::~MiLogStream(&v40);
            }
            else
            {
              *(_DWORD *)(v3 + 32) += *(_DWORD *)(v3 + 48);
              if ( *(char *)(((unsigned __int64)&config_action->use_limit_range >> 3) + 0x7FFF8000) < 0 )
                __asan_report_load1(&config_action->use_limit_range);
              if ( config_action->use_limit_range )
              {
                v26 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
                std::shared_ptr<DieCreatureRecord>::shared_ptr(&p_record_ptr, 0LL);
                std::shared_ptr<Creature>::shared_ptr(&p_global_value_source_ptr, 0LL);
                *(_DWORD *)(v3 + 64) = (int)ActorAbility::evaluate(
                                              v26,
                                              &config_action->max_value,
                                              &p_global_value_source_ptr,
                                              &p_record_ptr);
                std::shared_ptr<Creature>::~shared_ptr(&p_global_value_source_ptr);
                std::shared_ptr<DieCreatureRecord>::~shared_ptr(&p_record_ptr);
                v27 = std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<ActorAbility,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
                std::shared_ptr<DieCreatureRecord>::shared_ptr(&p_record_ptr, 0LL);
                std::shared_ptr<Creature>::shared_ptr(&p_global_value_source_ptr, 0LL);
                *(_DWORD *)(v3 + 80) = (int)ActorAbility::evaluate(
                                              v27,
                                              &config_action->min_value,
                                              &p_global_value_source_ptr,
                                              &p_record_ptr);
                std::shared_ptr<Creature>::~shared_ptr(&p_global_value_source_ptr);
                std::shared_ptr<DieCreatureRecord>::~shared_ptr(&p_record_ptr);
                v28 = std::clamp<int>((const int *)(v3 + 32), (const int *)(v3 + 80), (const int *)(v3 + 64));
                v29 = v28;
                if ( *(_BYTE *)(((unsigned __int64)v28 >> 3) + 0x7FFF8000) != 0
                  && (char)(((unsigned __int8)v28 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v28 >> 3) + 0x7FFF8000) )
                {
                  __asan_report_load4(v28);
                }
                *(_DWORD *)(v3 + 32) = *v29;
              }
              v30 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
              if ( Group::setVariableValue(v30, &config_action->logic_state_name, *(_DWORD *)(v3 + 32)) )
              {
                common::milog::MiLogStream::create(
                  &v40,
                  &common::milog::MiLogDefault::default_log_obj_,
                  0x13u,
                  "./src/ability/ability_comp.cpp",
                  "addLogicStateValueHandler",
                  6676);
                v31 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
                        &v40,
                        (const char (*)[30])"setVariableValue fails, name:");
                v32 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                        v31,
                        &config_action->logic_state_name);
                v33 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v32, (const char (*)[9])" value: ");
                v34 = common::milog::MiLogStream::operator<<<int,(int *)0>(v33, (const int *)(v3 + 32));
                v35 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
                operator<<(v34, v35);
                common::milog::MiLogStream::~MiLogStream(&v40);
              }
            }
          }
          else
          {
            common::milog::MiLogStream::create(
              &v40,
              &common::milog::MiLogDefault::default_log_obj_,
              0x13u,
              "./src/ability/ability_comp.cpp",
              "addLogicStateValueHandler",
              6657);
            v13 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
                    &v40,
                    (const char (*)[24])"invalid variable type: ");
            v14 = common::milog::MiLogStream::operator<<<proto::GroupVariableType,(proto::GroupVariableType*)0>(
                    v13,
                    &variable_script_config_ptr->variable_type);
            v15 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v14, (const char (*)[8])" name: ");
            v16 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                    v15,
                    &config_action->logic_state_name);
            v17 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v16, (const char (*)[9])" value: ");
            v18 = common::milog::MiLogStream::operator<<<int,(int *)0>(v17, (const int *)(v3 + 32));
            v19 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
            operator<<(v18, v19);
            common::milog::MiLogStream::~MiLogStream(&v40);
          }
        }
        else
        {
          common::milog::MiLogStream::create(
            &v40,
            &common::milog::MiLogDefault::default_log_obj_,
            0x13u,
            "./src/ability/ability_comp.cpp",
            "addLogicStateValueHandler",
            6652);
          v10 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                  &v40,
                  (const char (*)[33])"findVariableConfig fails, name: ");
          v11 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                  v10,
                  &config_action->logic_state_name);
          v12 = std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false>::operator*((const std::__shared_ptr_access<Group,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 160));
          operator<<(v11, v12);
          common::milog::MiLogStream::~MiLogStream(&v40);
        }
      }
      std::shared_ptr<Group>::~shared_ptr((std::shared_ptr<Group> *const)(v3 + 160));
    }
    std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 128));
  }
  std::shared_ptr<ActorAbility>::~shared_ptr((std::shared_ptr<ActorAbility> *const)(v3 + 96));
  if ( v41 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 6682: range 000000001370A7A0-000000001370ACD4
void __cdecl AbilityComp::dropSubfieldHandler(
        AbilityComp *const this,
        const data::DropSubfield *config_action,
        ActionParam *param)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  unsigned __int64 v6; // rax
  unsigned __int64 v7; // rdx
  unsigned __int64 v8; // rax
  unsigned __int64 v9; // rdx
  proto::ProtEntityType entity_type; // [rsp+2Ch] [rbp-D4h]
  common::milog::MiLogStream v12; // [rsp+30h] [rbp-D0h] BYREF
  char v13[176]; // [rsp+50h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 16 16 ability_ptr:6683 64 16 15 target_ptr:6689 96 16 17 creature_ptr:6700";
  *(_QWORD *)(v3 + 16) = AbilityComp::dropSubfieldHandler;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -219021312;
  v5[536862722] = -219021312;
  v5[536862723] = -202178560;
  std::shared_ptr<ActorAbility>::shared_ptr((std::shared_ptr<ActorAbility> *const)(v3 + 32), &param->ability_ptr);
  if ( std::operator==<ActorAbility>(0LL, (const std::shared_ptr<ActorAbility> *)(v3 + 32)) )
  {
    common::milog::MiLogStream::create(
      &v12,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/ability/ability_comp.cpp",
      "dropSubfieldHandler",
      6686);
    common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(&v12, (const char (*)[20])"ability_ptr is null");
    common::milog::MiLogStream::~MiLogStream(&v12);
  }
  else
  {
    std::shared_ptr<Creature>::shared_ptr((std::shared_ptr<Creature> *const)(v3 + 64), &param->target_ptr);
    if ( std::operator==<Creature>(0LL, (const std::shared_ptr<Creature> *)(v3 + 64)) )
    {
      common::milog::MiLogStream::create(
        &v12,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/ability/ability_comp.cpp",
        "dropSubfieldHandler",
        6692);
      common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(&v12, (const char (*)[19])"target_ptr is null");
      common::milog::MiLogStream::~MiLogStream(&v12);
    }
    else
    {
      v6 = (unsigned __int64)std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      if ( *(_BYTE *)((v6 >> 3) + 0x7FFF8000) )
        v6 = __asan_report_load8(v6);
      v7 = *(_QWORD *)v6 + 24LL;
      if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
        v6 = __asan_report_load8(*(_QWORD *)v6 + 24LL);
      entity_type = (*(unsigned int (__fastcall **)(unsigned __int64))v7)(v6);
      if ( entity_type == PROT_ENTITY_GADGET || entity_type == PROT_ENTITY_MONSTER )
      {
        std::dynamic_pointer_cast<Creature,Creature>((const std::shared_ptr<Creature> *)(v3 + 96));
        if ( std::operator==<Creature>(0LL, (const std::shared_ptr<Creature> *)(v3 + 96)) )
        {
          common::milog::MiLogStream::create(
            &v12,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/ability/ability_comp.cpp",
            "dropSubfieldHandler",
            6703);
          common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
            &v12,
            (const char (*)[37])"dynamic_pointer_cast Creature failed");
          common::milog::MiLogStream::~MiLogStream(&v12);
        }
        else
        {
          v8 = (unsigned __int64)std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
          if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
            v8 = __asan_report_load8(v8);
          v9 = *(_QWORD *)v8 + 360LL;
          if ( *(_BYTE *)((v9 >> 3) + 0x7FFF8000) )
            v8 = __asan_report_load8(*(_QWORD *)v8 + 360LL);
          if ( (*(unsigned int (__fastcall **)(unsigned __int64, std::string *))v9)(v8, &config_action->subfield_name) )
          {
            common::milog::MiLogStream::create(
              &v12,
              &common::milog::MiLogDefault::default_log_obj_,
              1u,
              "./src/ability/ability_comp.cpp",
              "dropSubfieldHandler",
              6708);
            common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
              &v12,
              (const char (*)[32])"gadget_ptr->dropSubfield failed");
            common::milog::MiLogStream::~MiLogStream(&v12);
          }
        }
        std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 96));
      }
      else
      {
        common::milog::MiLogStream::create(
          &v12,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/ability/ability_comp.cpp",
          "dropSubfieldHandler",
          6713);
        common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
          &v12,
          (const char (*)[32])"Just Support Gadget and Monster");
        common::milog::MiLogStream::~MiLogStream(&v12);
      }
    }
    std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 64));
  }
  std::shared_ptr<ActorAbility>::~shared_ptr((std::shared_ptr<ActorAbility> *const)(v3 + 32));
  if ( v13 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 6717: range 000000001370ACD6-000000001370B27F
void __cdecl AbilityComp::changeGadgetStateHandler(
        AbilityComp *const this,
        const data::ChangeGadgetState *config_action,
        ActionParam *param)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  unsigned __int64 v6; // rax
  unsigned __int64 v7; // rdx
  common::milog::MiLogStream *v8; // r14
  unsigned __int64 v9; // rax
  unsigned __int64 v10; // rdx
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // r14
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  common::milog::MiLogStream *v14; // r14
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  Gadget *p_state; // rdi
  unsigned int val; // [rsp+28h] [rbp-D8h] BYREF
  unsigned int EntityId; // [rsp+2Ch] [rbp-D4h] BYREF
  common::milog::MiLogStream v20; // [rsp+30h] [rbp-D0h] BYREF
  char v21[176]; // [rsp+50h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 16 16 ability_ptr:6718 64 16 15 target_ptr:6724 96 16 15 gadget_ptr:6735";
  *(_QWORD *)(v3 + 16) = AbilityComp::changeGadgetStateHandler;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -219021312;
  v5[536862722] = -219021312;
  v5[536862723] = -202178560;
  std::shared_ptr<ActorAbility>::shared_ptr((std::shared_ptr<ActorAbility> *const)(v3 + 32), &param->ability_ptr);
  if ( std::operator==<ActorAbility>(0LL, (const std::shared_ptr<ActorAbility> *)(v3 + 32)) )
  {
    common::milog::MiLogStream::create(
      &v20,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/ability/ability_comp.cpp",
      "changeGadgetStateHandler",
      6721);
    common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(&v20, (const char (*)[20])"ability_ptr is null");
    common::milog::MiLogStream::~MiLogStream(&v20);
  }
  else
  {
    std::shared_ptr<Creature>::shared_ptr((std::shared_ptr<Creature> *const)(v3 + 64), &param->target_ptr);
    if ( std::operator==<Creature>(0LL, (const std::shared_ptr<Creature> *)(v3 + 64)) )
    {
      common::milog::MiLogStream::create(
        &v20,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/ability/ability_comp.cpp",
        "changeGadgetStateHandler",
        6727);
      common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(&v20, (const char (*)[19])"target_ptr is null");
      common::milog::MiLogStream::~MiLogStream(&v20);
    }
    else
    {
      v6 = (unsigned __int64)std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      if ( *(_BYTE *)((v6 >> 3) + 0x7FFF8000) )
        v6 = __asan_report_load8(v6);
      v7 = *(_QWORD *)v6 + 24LL;
      if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
        v6 = __asan_report_load8(*(_QWORD *)v6 + 24LL);
      if ( (*(unsigned int (__fastcall **)(unsigned __int64))v7)(v6) == 4 )
      {
        std::dynamic_pointer_cast<Gadget,Creature>((const std::shared_ptr<Creature> *)(v3 + 96));
        if ( std::operator==<Gadget>(0LL, (const std::shared_ptr<Gadget> *)(v3 + 96)) )
        {
          common::milog::MiLogStream::create(
            &v20,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/ability/ability_comp.cpp",
            "changeGadgetStateHandler",
            6738);
          v14 = common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
                  &v20,
                  (const char (*)[47])"dynamic_pointer_cast Gadget failed, entity_id:");
          v15 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
          EntityId = Entity::getEntityId((const Entity *const)v15);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, &EntityId);
          common::milog::MiLogStream::~MiLogStream(&v20);
        }
        else
        {
          p_state = std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Gadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 96));
          if ( *(_BYTE *)(((unsigned __int64)&config_action->state >> 3) + 0x7FFF8000) != 0
            && *(_BYTE *)(((unsigned __int64)&config_action->state >> 3) + 0x7FFF8000) <= 3 )
          {
            p_state = (Gadget *)&config_action->state;
            __asan_report_load4(&config_action->state);
          }
          Gadget::setState(p_state, config_action->state, 0, 1);
        }
        std::shared_ptr<Gadget>::~shared_ptr((std::shared_ptr<Gadget> *const)(v3 + 96));
      }
      else
      {
        common::milog::MiLogStream::create(
          &v20,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/ability/ability_comp.cpp",
          "changeGadgetStateHandler",
          6732);
        v8 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
               &v20,
               (const char (*)[21])"invalid entity type:");
        v9 = (unsigned __int64)std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        if ( *(_BYTE *)((v9 >> 3) + 0x7FFF8000) )
          v9 = __asan_report_load8(v9);
        v10 = *(_QWORD *)v9 + 24LL;
        if ( *(_BYTE *)((v10 >> 3) + 0x7FFF8000) )
          v9 = __asan_report_load8(*(_QWORD *)v9 + 24LL);
        val = (*(__int64 (__fastcall **)(unsigned __int64))v10)(v9);
        v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, &val);
        v12 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v11, (const char (*)[12])" entity_id:");
        v13 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        EntityId = Entity::getEntityId((const Entity *const)v13);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, &EntityId);
        common::milog::MiLogStream::~MiLogStream(&v20);
      }
    }
    std::shared_ptr<Creature>::~shared_ptr((std::shared_ptr<Creature> *const)(v3 + 64));
  }
  std::shared_ptr<ActorAbility>::~shared_ptr((std::shared_ptr<ActorAbility> *const)(v3 + 32));
  if ( v21 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 6746: range 000000001370B280-000000001370B823
// local variable allocation has failed, the output may be wrong!
std::tuple<float,float> __cdecl AbilityComp::getElementReactionCritical(
        CreaturePtr *p_caster_ptr,
        data::ElementReactionType reaction_type)
{
  data::ElementReactionType v2; // edx
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  __m128i v6; // xmm0
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v8; // rax
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // rax
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // rax
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v22; // rax
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v23; // rax
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v24; // rax
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v25; // rax
  const float *v26; // rax
  _DWORD *v27; // rdx
  std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v28; // rax
  const float *v29; // rax
  _DWORD *v30; // rdx
  std::tuple<float,float> v31; // xmm0_8
  data::ElementReactionType reaction_typea; // [rsp+Ch] [rbp-A4h]
  float __a; // [rsp+28h] [rbp-88h] BYREF
  float __b; // [rsp+2Ch] [rbp-84h] BYREF
  char v35[128]; // [rsp+30h] [rbp-80h] BYREF

  reaction_typea = v2;
  v3 = (unsigned __int64)v35;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 13 critical:6747 64 4 18 critical_hurt:6748";
  *(_QWORD *)(v3 + 16) = AbilityComp::getElementReactionCritical;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -202116348;
  *(_DWORD *)(v3 + 48) = 0;
  v6 = 0LL;
  *(_DWORD *)(v3 + 64) = 0;
  if ( std::operator!=<Creature>(0LL, *(const std::shared_ptr<Creature> **)&reaction_type) )
  {
    switch ( reaction_typea )
    {
      case Explode:
        v15 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->(*(const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const *)&reaction_type);
        *(float *)v6.m128i_i32 = Creature::getProp(v15, FIGHT_PROP_ELEM_REACT_EXPLODE_CRITICAL);
        *(_DWORD *)(v3 + 48) = _mm_cvtsi128_si32(v6);
        v16 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->(*(const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const *)&reaction_type);
        *(float *)v6.m128i_i32 = Creature::getProp(v16, FIGHT_PROP_ELEM_REACT_EXPLODE_CRITICAL_HURT);
        *(_DWORD *)(v3 + 64) = _mm_cvtsi128_si32(v6);
        break;
      case Burning:
        v13 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->(*(const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const *)&reaction_type);
        *(float *)v6.m128i_i32 = Creature::getProp(v13, FIGHT_PROP_ELEM_REACT_BURN_CRITICAL);
        *(_DWORD *)(v3 + 48) = _mm_cvtsi128_si32(v6);
        v14 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->(*(const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const *)&reaction_type);
        *(float *)v6.m128i_i32 = Creature::getProp(v14, FIGHT_PROP_ELEM_REACT_BURN_CRITICAL_HURT);
        *(_DWORD *)(v3 + 64) = _mm_cvtsi128_si32(v6);
        break;
      case Overgrow:
        v19 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->(*(const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const *)&reaction_type);
        *(float *)v6.m128i_i32 = Creature::getProp(v19, FIGHT_PROP_ELEM_REACT_OVERGROW_CRITICAL);
        *(_DWORD *)(v3 + 48) = _mm_cvtsi128_si32(v6);
        v20 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->(*(const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const *)&reaction_type);
        *(float *)v6.m128i_i32 = Creature::getProp(v20, FIGHT_PROP_ELEM_REACT_OVERGROW_CRITICAL_HURT);
        *(_DWORD *)(v3 + 64) = _mm_cvtsi128_si32(v6);
        break;
      case Shock:
        v11 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->(*(const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const *)&reaction_type);
        *(float *)v6.m128i_i32 = Creature::getProp(v11, FIGHT_PROP_ELEM_REACT_ELECTRIC_CRITICAL);
        *(_DWORD *)(v3 + 48) = _mm_cvtsi128_si32(v6);
        v12 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->(*(const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const *)&reaction_type);
        *(float *)v6.m128i_i32 = Creature::getProp(v12, FIGHT_PROP_ELEM_REACT_ELECTRIC_CRITICAL_HURT);
        *(_DWORD *)(v3 + 64) = _mm_cvtsi128_si32(v6);
        break;
      case Superconductor:
        v9 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->(*(const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const *)&reaction_type);
        *(float *)v6.m128i_i32 = Creature::getProp(v9, FIGHT_PROP_ELEM_REACT_SCONDUCT_CRITICAL);
        *(_DWORD *)(v3 + 48) = _mm_cvtsi128_si32(v6);
        v10 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->(*(const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const *)&reaction_type);
        *(float *)v6.m128i_i32 = Creature::getProp(v10, FIGHT_PROP_ELEM_REACT_SCONDUCT_CRITICAL_HURT);
        *(_DWORD *)(v3 + 64) = _mm_cvtsi128_si32(v6);
        break;
      case SwirlFire:
      case SwirlWater:
      case SwirlElectric:
      case SwirlIce:
        v7 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->(*(const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const *)&reaction_type);
        *(float *)v6.m128i_i32 = Creature::getProp(v7, FIGHT_PROP_ELEM_REACT_SWIRL_CRITICAL);
        *(_DWORD *)(v3 + 48) = _mm_cvtsi128_si32(v6);
        v8 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->(*(const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const *)&reaction_type);
        *(float *)v6.m128i_i32 = Creature::getProp(v8, FIGHT_PROP_ELEM_REACT_SWIRL_CRITICAL_HURT);
        *(_DWORD *)(v3 + 64) = _mm_cvtsi128_si32(v6);
        break;
      case FrozenBroken:
        v17 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->(*(const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const *)&reaction_type);
        *(float *)v6.m128i_i32 = Creature::getProp(v17, FIGHT_PROP_ELEM_REACT_FROZENBROKEN_CRITICAL);
        *(_DWORD *)(v3 + 48) = _mm_cvtsi128_si32(v6);
        v18 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->(*(const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const *)&reaction_type);
        *(float *)v6.m128i_i32 = Creature::getProp(v18, FIGHT_PROP_ELEM_REACT_FROZENBROKEN_CRITICAL_HURT);
        *(_DWORD *)(v3 + 64) = _mm_cvtsi128_si32(v6);
        break;
      case OvergrowMushroomFire:
        v21 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->(*(const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const *)&reaction_type);
        *(float *)v6.m128i_i32 = Creature::getProp(v21, FIGHT_PROP_ELEM_REACT_OVERGROW_FIRE_CRITICAL);
        *(_DWORD *)(v3 + 48) = _mm_cvtsi128_si32(v6);
        v22 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->(*(const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const *)&reaction_type);
        *(float *)v6.m128i_i32 = Creature::getProp(v22, FIGHT_PROP_ELEM_REACT_OVERGROW_FIRE_CRITICAL_HURT);
        *(_DWORD *)(v3 + 64) = _mm_cvtsi128_si32(v6);
        break;
      case OvergrowMushroomElectric:
        v23 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->(*(const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const *)&reaction_type);
        *(float *)v6.m128i_i32 = Creature::getProp(v23, FIGHT_PROP_ELEM_REACT_OVERGROW_ELECTRIC_CRITICAL);
        *(_DWORD *)(v3 + 48) = _mm_cvtsi128_si32(v6);
        v24 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->(*(const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const *)&reaction_type);
        *(float *)v6.m128i_i32 = Creature::getProp(v24, FIGHT_PROP_ELEM_REACT_OVERGROW_ELECTRIC_CRITICAL_HURT);
        *(_DWORD *)(v3 + 64) = _mm_cvtsi128_si32(v6);
        break;
      default:
        break;
    }
    __b = 0.0;
    v25 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->(*(const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const *)&reaction_type);
    __a = Creature::getProp(v25, FIGHT_PROP_ELEM_REACT_CRITICAL) + *(float *)(v3 + 48);
    v26 = std::max<float>(&__a, &__b);
    v27 = v26;
    if ( *(_BYTE *)(((unsigned __int64)v26 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v26 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v26 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v26);
    }
    *(_DWORD *)(v3 + 48) = *v27;
    __b = 0.0;
    v28 = std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false>::operator->(*(const std::__shared_ptr_access<Creature,(__gnu_cxx::_Lock_policy)2,false,false> *const *)&reaction_type);
    __a = Creature::getProp(v28, FIGHT_PROP_ELEM_REACT_CRITICAL_HURT) + *(float *)(v3 + 64);
    v29 = std::max<float>(&__a, &__b);
    v30 = v29;
    if ( *(_BYTE *)(((unsigned __int64)v29 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v29 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v29 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v29);
    }
    *(_DWORD *)(v3 + 64) = *v30;
  }
  if ( ((unsigned __int8)p_caster_ptr & 7) >= *(_BYTE *)(((unsigned __int64)p_caster_ptr >> 3) + 0x7FFF8000)
    && *(_BYTE *)(((unsigned __int64)p_caster_ptr >> 3) + 0x7FFF8000) != 0
    || *(_BYTE *)((((unsigned __int64)&p_caster_ptr->_M_ptr + 7) >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)p_caster_ptr + 7) & 7) >= *(_BYTE *)((((unsigned __int64)&p_caster_ptr->_M_ptr + 7) >> 3)
                                                             + 0x7FFF8000) )
  {
    __asan_report_store_n(p_caster_ptr, 8LL);
  }
  v31 = std::make_tuple<float &,float &>(
          (float *)p_caster_ptr,
          (float *)(v3 + 48),
          (float *)(v3 + 64),
          (float *)(v3 + 48));
  if ( v35 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return v31;
};
