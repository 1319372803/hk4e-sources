// File: /data/jenkins/jenkins_hk4e/workspace/hk4e_3.4_dev/muipserver/src/handler/request_handler.api.hpp

// Line 56: range 000000000CCC337D-000000000CCC3595
ApiRetcode __cdecl getRequestParam<bool>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        bool *value)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  common::milog::MiLogStream *v6; // rdx
  common::milog::MiLogStream *v7; // rax
  ApiRetcode result; // eax
  std::_Rb_tree_const_iterator<std::pair<const std::string,std::string > >::pointer v9; // rax
  bool v10; // cl
  std::_Rb_tree_const_iterator<std::pair<const std::string,std::string > >::_Self __y; // [rsp+28h] [rbp-88h] BYREF
  common::milog::MiLogStream v13; // [rsp+30h] [rbp-80h] BYREF
  char v14[96]; // [rsp+50h] [rbp-60h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 8 7 iter:58";
  *(_QWORD *)(v3 + 16) = getRequestParam<bool>;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116352;
  *(std::map<std::string,std::string>::const_iterator *)(v3 + 32) = std::map<std::string,std::string>::find(
                                                                      &request->param_map,
                                                                      key);
  __y._M_node = std::map<std::string,std::string>::end(&request->param_map)._M_node;
  if ( std::operator==(
         (const std::_Rb_tree_const_iterator<std::pair<const std::string,std::string > >::_Self *)(v3 + 32),
         &__y) )
  {
    common::milog::MiLogStream::create(
      &v13,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/handler/request_handler.api.hpp",
      "getRequestParam",
      61);
    v6 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(&v13, (const char (*)[6])"key: ");
    v7 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v6, key);
    common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v7, (const char (*)[11])" not found");
    common::milog::MiLogStream::~MiLogStream(&v13);
    result = RETCODE_PARA_ERROR;
  }
  else
  {
    v9 = std::_Rb_tree_const_iterator<std::pair<std::string const,std::string>>::operator->((const std::_Rb_tree_const_iterator<std::pair<const std::string,std::string > > *const)(v3 + 32));
    v10 = common::tools::Converter<bool>::convertTo(&v9->second);
    if ( *(_BYTE *)(((unsigned __int64)value >> 3) + 0x7FFF8000) != 0
      && ((unsigned __int8)value & 7) >= *(_BYTE *)(((unsigned __int64)value >> 3) + 0x7FFF8000) )
    {
      __asan_report_store1(value);
    }
    *value = v10;
    result = RETCODE_SUCC_0;
  }
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 56: range 000000000CCD51E8-000000000CCD5405
ApiRetcode __cdecl getRequestParam<float>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        float *value)
{
  __m128i v3; // xmm0
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  std::_Rb_tree_const_iterator<std::pair<const std::string,std::string > >::_Self *p_y; // rsi
  common::milog::MiLogStream *v8; // rdx
  common::milog::MiLogStream *v9; // rax
  ApiRetcode result; // eax
  std::_Rb_tree_const_iterator<std::pair<const std::string,std::string > >::pointer v11; // rax
  int v12; // ecx
  char v13; // dl
  std::_Rb_tree_const_iterator<std::pair<const std::string,std::string > >::_Self __y; // [rsp+28h] [rbp-88h] BYREF
  common::milog::MiLogStream v17; // [rsp+30h] [rbp-80h] BYREF
  char v18[96]; // [rsp+50h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 7 iter:58";
  *(_QWORD *)(v4 + 16) = getRequestParam<float>;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(std::map<std::string,std::string>::const_iterator *)(v4 + 32) = std::map<std::string,std::string>::find(
                                                                      &request->param_map,
                                                                      key);
  __y._M_node = std::map<std::string,std::string>::end(&request->param_map)._M_node;
  p_y = &__y;
  if ( std::operator==(
         (const std::_Rb_tree_const_iterator<std::pair<const std::string,std::string > >::_Self *)(v4 + 32),
         &__y) )
  {
    common::milog::MiLogStream::create(
      &v17,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/handler/request_handler.api.hpp",
      "getRequestParam",
      61);
    v8 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(&v17, (const char (*)[6])"key: ");
    v9 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, key);
    common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v9, (const char (*)[11])" not found");
    common::milog::MiLogStream::~MiLogStream(&v17);
    result = RETCODE_PARA_ERROR;
  }
  else
  {
    v11 = std::_Rb_tree_const_iterator<std::pair<std::string const,std::string>>::operator->((const std::_Rb_tree_const_iterator<std::pair<const std::string,std::string > > *const)(v4 + 32));
    *(float *)v3.m128i_i32 = common::tools::Converter<float>::convertTo(&v11->second);
    v12 = _mm_cvtsi128_si32(v3);
    v13 = *(_BYTE *)(((unsigned __int64)value >> 3) + 0x7FFF8000);
    if ( v13 != 0 && (char)(((unsigned __int8)value & 7) + 3) >= v13 )
    {
      LOBYTE(p_y) = v13 != 0;
      __asan_report_store4(value, p_y);
    }
    *(_DWORD *)value = v12;
    result = RETCODE_SUCC_0;
  }
  if ( v18 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 56: range 000000000CDBA49A-000000000CDBA6B5
ApiRetcode __cdecl getRequestParam<int>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        int *value)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  std::_Rb_tree_const_iterator<std::pair<const std::string,std::string > >::_Self *p_y; // rsi
  common::milog::MiLogStream *v7; // rdx
  common::milog::MiLogStream *v8; // rax
  ApiRetcode result; // eax
  std::_Rb_tree_const_iterator<std::pair<const std::string,std::string > >::pointer v10; // rax
  int v11; // ecx
  char v12; // dl
  std::_Rb_tree_const_iterator<std::pair<const std::string,std::string > >::_Self __y; // [rsp+28h] [rbp-88h] BYREF
  common::milog::MiLogStream v16; // [rsp+30h] [rbp-80h] BYREF
  char v17[96]; // [rsp+50h] [rbp-60h] BYREF

  v3 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 8 7 iter:58";
  *(_QWORD *)(v3 + 16) = getRequestParam<int>;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116352;
  *(std::map<std::string,std::string>::const_iterator *)(v3 + 32) = std::map<std::string,std::string>::find(
                                                                      &request->param_map,
                                                                      key);
  __y._M_node = std::map<std::string,std::string>::end(&request->param_map)._M_node;
  p_y = &__y;
  if ( std::operator==(
         (const std::_Rb_tree_const_iterator<std::pair<const std::string,std::string > >::_Self *)(v3 + 32),
         &__y) )
  {
    common::milog::MiLogStream::create(
      &v16,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/handler/request_handler.api.hpp",
      "getRequestParam",
      61);
    v7 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(&v16, (const char (*)[6])"key: ");
    v8 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v7, key);
    common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v8, (const char (*)[11])" not found");
    common::milog::MiLogStream::~MiLogStream(&v16);
    result = RETCODE_PARA_ERROR;
  }
  else
  {
    v10 = std::_Rb_tree_const_iterator<std::pair<std::string const,std::string>>::operator->((const std::_Rb_tree_const_iterator<std::pair<const std::string,std::string > > *const)(v3 + 32));
    v11 = common::tools::Converter<int>::convertTo(&v10->second);
    v12 = *(_BYTE *)(((unsigned __int64)value >> 3) + 0x7FFF8000);
    if ( v12 != 0 && (char)(((unsigned __int8)value & 7) + 3) >= v12 )
    {
      LOBYTE(p_y) = v12 != 0;
      __asan_report_store4(value, p_y);
    }
    *value = v11;
    result = RETCODE_SUCC_0;
  }
  if ( v17 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 56: range 000000000CCD55F1-000000000CCD57F7
ApiRetcode __cdecl getRequestParam<unsigned long>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned __int64 *value)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  common::milog::MiLogStream *v6; // rdx
  common::milog::MiLogStream *v7; // rax
  ApiRetcode result; // eax
  std::_Rb_tree_const_iterator<std::pair<const std::string,std::string > >::pointer v9; // rax
  unsigned __int64 v10; // rdx
  std::_Rb_tree_const_iterator<std::pair<const std::string,std::string > >::_Self __y; // [rsp+28h] [rbp-88h] BYREF
  common::milog::MiLogStream v13; // [rsp+30h] [rbp-80h] BYREF
  char v14[96]; // [rsp+50h] [rbp-60h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 8 7 iter:58";
  *(_QWORD *)(v3 + 16) = getRequestParam<unsigned long>;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116352;
  *(std::map<std::string,std::string>::const_iterator *)(v3 + 32) = std::map<std::string,std::string>::find(
                                                                      &request->param_map,
                                                                      key);
  __y._M_node = std::map<std::string,std::string>::end(&request->param_map)._M_node;
  if ( std::operator==(
         (const std::_Rb_tree_const_iterator<std::pair<const std::string,std::string > >::_Self *)(v3 + 32),
         &__y) )
  {
    common::milog::MiLogStream::create(
      &v13,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/handler/request_handler.api.hpp",
      "getRequestParam",
      61);
    v6 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(&v13, (const char (*)[6])"key: ");
    v7 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v6, key);
    common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v7, (const char (*)[11])" not found");
    common::milog::MiLogStream::~MiLogStream(&v13);
    result = RETCODE_PARA_ERROR;
  }
  else
  {
    v9 = std::_Rb_tree_const_iterator<std::pair<std::string const,std::string>>::operator->((const std::_Rb_tree_const_iterator<std::pair<const std::string,std::string > > *const)(v3 + 32));
    v10 = common::tools::Converter<unsigned long>::convertTo(&v9->second);
    if ( *(_BYTE *)(((unsigned __int64)value >> 3) + 0x7FFF8000) )
      __asan_report_store8(value, &__y);
    *value = v10;
    result = RETCODE_SUCC_0;
  }
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 69: range 000000000CEA6699-000000000CEA677F
__int64 __fastcall getRequestParam<bool,char const(&)[12],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        bool *para,
        std::remove_reference<char const (&)[12]>::type *a4,
        unsigned int *a5,
        const char (*args_0)[12])
{
  ApiRetcode v6; // ebx
  unsigned int *v7; // rbx
  const char *v8; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-35h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-34h]
  std::string v14; // [rsp+40h] [rbp-30h] BYREF

  ret = getRequestParam<bool>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v7 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v8 = (const char *)std::forward<char const(&)[12]>(a4);
    std::string::basic_string<std::allocator<char>>(&v14, v8, &__a);
    v6 = getRequestParam<unsigned int>(request, &v14, v7);
    std::string::~string(&v14);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v6;
};

// Line 69: range 000000000CDB885B-000000000CDB8941
__int64 __fastcall getRequestParam<bool,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        bool *para,
        std::remove_reference<char const (&)[7]>::type *a4,
        std::string *a5,
        const char (*args_0)[7])
{
  ApiRetcode v6; // ebx
  std::string *v7; // rbx
  const char *v8; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-35h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-34h]
  std::string v14; // [rsp+40h] [rbp-30h] BYREF

  ret = getRequestParam<bool>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v7 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v8 = (const char *)std::forward<char const(&)[7]>(a4);
    std::string::basic_string<std::allocator<char>>(&v14, v8, &__a);
    v6 = getRequestParam<std::string>(request, &v14, v7);
    std::string::~string(&v14);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v6;
};

// Line 69: range 000000000CDB224D-000000000CDB239E
__int64 __fastcall getRequestParam<float,char const(&)[2],float &,char const(&)[2],float &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        float *para,
        std::remove_reference<char const (&)[2]>::type *a4,
        float *a5,
        std::remove_reference<char const (&)[2]>::type *a6,
        float *args_3,
        std::remove_reference<char const (&)[7]>::type *args_4,
        std::string *args_5)
{
  ApiRetcode v9; // ebx
  std::string *v10; // rbx
  const char (*v11)[7]; // r15
  float *v12; // r14
  const char (*v13)[2]; // r13
  float *v14; // r12
  const char *v15; // rax
  const char (*v17)[2]; // [rsp-8h] [rbp-98h]
  std::allocator<char> __a; // [rsp+3Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-54h]
  std::string v23; // [rsp+40h] [rbp-50h] BYREF

  ret = getRequestParam<float>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v10 = std::forward<std::string &>(args_5);
    v11 = std::forward<char const(&)[7]>(args_4);
    v12 = std::forward<float &>(args_3);
    v13 = std::forward<char const(&)[2]>(a6);
    v14 = std::forward<float &>(a5);
    std::allocator<char>::allocator(&__a);
    v15 = (const char *)std::forward<char const(&)[2]>(a4);
    std::string::basic_string<std::allocator<char>>(&v23, v15, &__a);
    v9 = getRequestParam<float,char const(&)[2],float &,char const(&)[7],std::string &>(
           request,
           &v23,
           v14,
           v13,
           v12,
           v11,
           v10,
           v17,
           (float *)a6,
           (const char (*)[7])a5,
           (std::string *)a4);
    std::string::~string(&v23);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v9;
};

// Line 69: range 000000000CE48BF6-000000000CE48D09
__int64 __fastcall getRequestParam<float,char const(&)[2],float &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        float *para,
        std::remove_reference<char const (&)[2]>::type *a4,
        float *a5,
        std::remove_reference<char const (&)[7]>::type *a6,
        std::string *args_3)
{
  ApiRetcode v7; // ebx
  std::string *v8; // r13
  const char (*v9)[7]; // r12
  float *v10; // rbx
  const char *v11; // rax
  const char (*v12)[7]; // r9
  std::allocator<char> __a; // [rsp+3Bh] [rbp-45h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-44h]
  std::string v19; // [rsp+40h] [rbp-40h] BYREF

  ret = getRequestParam<float>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v8 = std::forward<std::string &>(args_3);
    v9 = std::forward<char const(&)[7]>(a6);
    v10 = std::forward<float &>(a5);
    std::allocator<char>::allocator(&__a);
    v11 = (const char *)std::forward<char const(&)[2]>(a4);
    std::string::basic_string<std::allocator<char>>(&v19, v11, &__a);
    v7 = getRequestParam<float,char const(&)[7],std::string &>(request, &v19, v10, v9, v8, v12, (std::string *)a6);
    std::string::~string(&v19);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v7;
};

// Line 69: range 000000000CE50D70-000000000CE50EC1
__int64 __fastcall getRequestParam<float,char const(&)[6],float &,char const(&)[6],float &,char const(&)[6],float &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        float *para,
        std::remove_reference<char const (&)[6]>::type *a4,
        float *a5,
        std::remove_reference<char const (&)[6]>::type *a6,
        float *args_3,
        std::remove_reference<char const (&)[6]>::type *args_4,
        float *args_5)
{
  ApiRetcode v9; // ebx
  float *v10; // rbx
  const char (*v11)[6]; // r15
  float *v12; // r14
  const char (*v13)[6]; // r13
  float *v14; // r12
  const char *v15; // rax
  const char (*v17)[6]; // [rsp-8h] [rbp-98h]
  std::allocator<char> __a; // [rsp+3Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-54h]
  std::string v23; // [rsp+40h] [rbp-50h] BYREF

  ret = getRequestParam<float>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v10 = std::forward<float &>(args_5);
    v11 = std::forward<char const(&)[6]>(args_4);
    v12 = std::forward<float &>(args_3);
    v13 = std::forward<char const(&)[6]>(a6);
    v14 = std::forward<float &>(a5);
    std::allocator<char>::allocator(&__a);
    v15 = (const char *)std::forward<char const(&)[6]>(a4);
    std::string::basic_string<std::allocator<char>>(&v23, v15, &__a);
    v9 = getRequestParam<float,char const(&)[6],float &,char const(&)[6],float &>(
           request,
           &v23,
           v14,
           v13,
           v12,
           v11,
           v10,
           v17,
           (float *)a6,
           (const char (*)[6])a5,
           (float *)a4);
    std::string::~string(&v23);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v9;
};

// Line 69: range 000000000CEA3D73-000000000CEA3E86
__int64 __fastcall getRequestParam<float,char const(&)[6],float &,char const(&)[6],float &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        float *para,
        std::remove_reference<char const (&)[6]>::type *a4,
        float *a5,
        std::remove_reference<char const (&)[6]>::type *a6,
        float *args_3)
{
  ApiRetcode v7; // ebx
  float *v8; // r13
  const char (*v9)[6]; // r12
  float *v10; // rbx
  const char *v11; // rax
  const char (*v12)[6]; // r9
  std::allocator<char> __a; // [rsp+3Bh] [rbp-45h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-44h]
  std::string v19; // [rsp+40h] [rbp-40h] BYREF

  ret = getRequestParam<float>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v8 = std::forward<float &>(args_3);
    v9 = std::forward<char const(&)[6]>(a6);
    v10 = std::forward<float &>(a5);
    std::allocator<char>::allocator(&__a);
    v11 = (const char *)std::forward<char const(&)[6]>(a4);
    std::string::basic_string<std::allocator<char>>(&v19, v11, &__a);
    v7 = getRequestParam<float,char const(&)[6],float &>(request, &v19, v10, v9, v8, v12, (float *)a6);
    std::string::~string(&v19);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v7;
};

// Line 69: range 000000000CF07D16-000000000CF07DFC
__int64 __fastcall getRequestParam<float,char const(&)[6],float &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        float *para,
        std::remove_reference<char const (&)[6]>::type *a4,
        float *a5,
        const char (*args_0)[6])
{
  ApiRetcode v6; // ebx
  float *v7; // rbx
  const char *v8; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-35h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-34h]
  std::string v14; // [rsp+40h] [rbp-30h] BYREF

  ret = getRequestParam<float>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v7 = std::forward<float &>(a5);
    std::allocator<char>::allocator(&__a);
    v8 = (const char *)std::forward<char const(&)[6]>(a4);
    std::string::basic_string<std::allocator<char>>(&v14, v8, &__a);
    v6 = getRequestParam<float>(request, &v14, v7);
    std::string::~string(&v14);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v6;
};

// Line 69: range 000000000CE9AEE4-000000000CE9AFCA
__int64 __fastcall getRequestParam<float,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        float *para,
        std::remove_reference<char const (&)[7]>::type *a4,
        std::string *a5,
        const char (*args_0)[7])
{
  ApiRetcode v6; // ebx
  std::string *v7; // rbx
  const char *v8; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-35h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-34h]
  std::string v14; // [rsp+40h] [rbp-30h] BYREF

  ret = getRequestParam<float>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v7 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v8 = (const char *)std::forward<char const(&)[7]>(a4);
    std::string::basic_string<std::allocator<char>>(&v14, v8, &__a);
    v6 = getRequestParam<std::string>(request, &v14, v7);
    std::string::~string(&v14);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v6;
};

// Line 69: range 000000000CD5B035-000000000CD5B148
__int64 __fastcall getRequestParam<int,char const(&)[15],unsigned int &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        int *para,
        std::remove_reference<char const (&)[15]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[7]>::type *a6,
        std::string *args_3)
{
  ApiRetcode v7; // ebx
  std::string *v8; // r13
  const char (*v9)[7]; // r12
  unsigned int *v10; // rbx
  const char *v11; // rax
  const char (*v12)[7]; // r9
  std::allocator<char> __a; // [rsp+3Bh] [rbp-45h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-44h]
  std::string v19; // [rsp+40h] [rbp-40h] BYREF

  ret = getRequestParam<int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v8 = std::forward<std::string &>(args_3);
    v9 = std::forward<char const(&)[7]>(a6);
    v10 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v11 = (const char *)std::forward<char const(&)[15]>(a4);
    std::string::basic_string<std::allocator<char>>(&v19, v11, &__a);
    v7 = getRequestParam<unsigned int,char const(&)[7],std::string &>(
           request,
           &v19,
           v10,
           v9,
           v8,
           v12,
           (std::string *)a6);
    std::string::~string(&v19);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v7;
};

// Line 69: range 000000000CD54603-000000000CD54716
__int64 __fastcall getRequestParam<std::string,char const(&)[10],unsigned int &,char const(&)[11],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        std::string *para,
        std::remove_reference<char const (&)[10]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[11]>::type *a6,
        unsigned int *args_3)
{
  ApiRetcode v7; // ebx
  unsigned int *v8; // r13
  const char (*v9)[11]; // r12
  unsigned int *v10; // rbx
  const char *v11; // rax
  const char (*v12)[11]; // r9
  std::allocator<char> __a; // [rsp+3Bh] [rbp-45h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-44h]
  std::string v19; // [rsp+40h] [rbp-40h] BYREF

  ret = getRequestParam<std::string>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v8 = std::forward<unsigned int &>(args_3);
    v9 = std::forward<char const(&)[11]>(a6);
    v10 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v11 = (const char *)std::forward<char const(&)[10]>(a4);
    std::string::basic_string<std::allocator<char>>(&v19, v11, &__a);
    v7 = getRequestParam<unsigned int,char const(&)[11],unsigned int &>(
           request,
           &v19,
           v10,
           v9,
           v8,
           v12,
           (unsigned int *)a6);
    std::string::~string(&v19);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v7;
};

// Line 69: range 000000000CD607C0-000000000CD60943
__int64 __fastcall getRequestParam<std::string,char const(&)[10],unsigned int &,char const(&)[12],std::string&,char const(&)[8],bool &,char const(&)[12],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        std::string *para,
        std::remove_reference<char const (&)[10]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[12]>::type *a6,
        std::string *args_3,
        std::remove_reference<char const (&)[8]>::type *args_4,
        bool *args_5,
        std::remove_reference<char const (&)[12]>::type *args_6,
        unsigned int *args_7)
{
  ApiRetcode v11; // ebx
  unsigned int *v12; // r13
  const char (*v13)[12]; // r12
  bool *v14; // rbx
  const char (*v15)[12]; // r15
  unsigned int *v16; // r14
  const char *v17; // rax
  const char (*v19)[12]; // [rsp-8h] [rbp-A8h]
  std::string *v20; // [rsp+0h] [rbp-A0h]
  const char (*v21)[8]; // [rsp+8h] [rbp-98h]
  std::allocator<char> __a; // [rsp+4Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+4Ch] [rbp-54h]
  std::string v27; // [rsp+50h] [rbp-50h] BYREF

  ret = getRequestParam<std::string>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v12 = std::forward<unsigned int &>(args_7);
    v13 = std::forward<char const(&)[12]>(args_6);
    v14 = std::forward<bool &>(args_5);
    v21 = std::forward<char const(&)[8]>(args_4);
    v20 = std::forward<std::string &>(args_3);
    v15 = std::forward<char const(&)[12]>(a6);
    v16 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v17 = (const char *)std::forward<char const(&)[10]>(a4);
    std::string::basic_string<std::allocator<char>>(&v27, v17, &__a);
    v11 = getRequestParam<unsigned int,char const(&)[12],std::string &,char const(&)[8],bool &,char const(&)[12],unsigned int &>(
            request,
            &v27,
            v16,
            v15,
            v20,
            v21,
            v14,
            v13,
            v12,
            v19,
            v20,
            v21,
            (bool *)a6,
            (const char (*)[12])a5,
            (unsigned int *)a4);
    std::string::~string(&v27);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v11;
};

// Line 69: range 000000000CD5B149-000000000CD5B29A
__int64 __fastcall getRequestParam<std::string,char const(&)[10],unsigned int &,char const(&)[12],unsigned int &,char const(&)[13],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        std::string *para,
        std::remove_reference<char const (&)[10]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[12]>::type *a6,
        unsigned int *args_3,
        std::remove_reference<char const (&)[13]>::type *args_4,
        unsigned int *args_5)
{
  ApiRetcode v9; // ebx
  unsigned int *v10; // rbx
  const char (*v11)[13]; // r15
  unsigned int *v12; // r14
  const char (*v13)[12]; // r13
  unsigned int *v14; // r12
  const char *v15; // rax
  const char (*v17)[12]; // [rsp-8h] [rbp-98h]
  std::allocator<char> __a; // [rsp+3Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-54h]
  std::string v23; // [rsp+40h] [rbp-50h] BYREF

  ret = getRequestParam<std::string>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v10 = std::forward<unsigned int &>(args_5);
    v11 = std::forward<char const(&)[13]>(args_4);
    v12 = std::forward<unsigned int &>(args_3);
    v13 = std::forward<char const(&)[12]>(a6);
    v14 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v15 = (const char *)std::forward<char const(&)[10]>(a4);
    std::string::basic_string<std::allocator<char>>(&v23, v15, &__a);
    v9 = getRequestParam<unsigned int,char const(&)[12],unsigned int &,char const(&)[13],unsigned int &>(
           request,
           &v23,
           v14,
           v13,
           v12,
           v11,
           v10,
           v17,
           (unsigned int *)a6,
           (const char (*)[13])a5,
           (unsigned int *)a4);
    std::string::~string(&v23);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v9;
};

// Line 69: range 000000000CD542B6-000000000CD54407
__int64 __fastcall getRequestParam<std::string,char const(&)[10],unsigned int &,char const(&)[15],unsigned int &,char const(&)[10],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        std::string *para,
        std::remove_reference<char const (&)[10]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[15]>::type *a6,
        unsigned int *args_3,
        std::remove_reference<char const (&)[10]>::type *args_4,
        unsigned int *args_5)
{
  ApiRetcode v9; // ebx
  unsigned int *v10; // rbx
  const char (*v11)[10]; // r15
  unsigned int *v12; // r14
  const char (*v13)[15]; // r13
  unsigned int *v14; // r12
  const char *v15; // rax
  const char (*v17)[15]; // [rsp-8h] [rbp-98h]
  std::allocator<char> __a; // [rsp+3Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-54h]
  std::string v23; // [rsp+40h] [rbp-50h] BYREF

  ret = getRequestParam<std::string>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v10 = std::forward<unsigned int &>(args_5);
    v11 = std::forward<char const(&)[10]>(args_4);
    v12 = std::forward<unsigned int &>(args_3);
    v13 = std::forward<char const(&)[15]>(a6);
    v14 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v15 = (const char *)std::forward<char const(&)[10]>(a4);
    std::string::basic_string<std::allocator<char>>(&v23, v15, &__a);
    v9 = getRequestParam<unsigned int,char const(&)[15],unsigned int &,char const(&)[10],unsigned int &>(
           request,
           &v23,
           v14,
           v13,
           v12,
           v11,
           v10,
           v17,
           (unsigned int *)a6,
           (const char (*)[10])a5,
           (unsigned int *)a4);
    std::string::~string(&v23);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v9;
};

// Line 69: range 000000000CD60944-000000000CD60A57
__int64 __fastcall getRequestParam<std::string,char const(&)[10],unsigned int &,char const(&)[7],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        std::string *para,
        std::remove_reference<char const (&)[10]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[7]>::type *a6,
        unsigned int *args_3)
{
  ApiRetcode v7; // ebx
  unsigned int *v8; // r13
  const char (*v9)[7]; // r12
  unsigned int *v10; // rbx
  const char *v11; // rax
  const char (*v12)[7]; // r9
  std::allocator<char> __a; // [rsp+3Bh] [rbp-45h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-44h]
  std::string v19; // [rsp+40h] [rbp-40h] BYREF

  ret = getRequestParam<std::string>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v8 = std::forward<unsigned int &>(args_3);
    v9 = std::forward<char const(&)[7]>(a6);
    v10 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v11 = (const char *)std::forward<char const(&)[10]>(a4);
    std::string::basic_string<std::allocator<char>>(&v19, v11, &__a);
    v7 = getRequestParam<unsigned int,char const(&)[7],unsigned int &>(
           request,
           &v19,
           v10,
           v9,
           v8,
           v12,
           (unsigned int *)a6);
    std::string::~string(&v19);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v7;
};

// Line 69: range 000000000CD5BF61-000000000CD5C047
__int64 __fastcall getRequestParam<std::string,char const(&)[10],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        std::string *para,
        std::remove_reference<char const (&)[10]>::type *a4,
        unsigned int *a5,
        const char (*args_0)[10])
{
  ApiRetcode v6; // ebx
  unsigned int *v7; // rbx
  const char *v8; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-35h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-34h]
  std::string v14; // [rsp+40h] [rbp-30h] BYREF

  ret = getRequestParam<std::string>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v7 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v8 = (const char *)std::forward<char const(&)[10]>(a4);
    std::string::basic_string<std::allocator<char>>(&v14, v8, &__a);
    v6 = getRequestParam<unsigned int>(request, &v14, v7);
    std::string::~string(&v14);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v6;
};

// Line 69: range 000000000CD60B6C-000000000CD60C7F
__int64 __fastcall getRequestParam<std::string,char const(&)[13],unsigned int &,char const(&)[16],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        std::string *para,
        std::remove_reference<char const (&)[13]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[16]>::type *a6,
        unsigned int *args_3)
{
  ApiRetcode v7; // ebx
  unsigned int *v8; // r13
  const char (*v9)[16]; // r12
  unsigned int *v10; // rbx
  const char *v11; // rax
  const char (*v12)[16]; // r9
  std::allocator<char> __a; // [rsp+3Bh] [rbp-45h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-44h]
  std::string v19; // [rsp+40h] [rbp-40h] BYREF

  ret = getRequestParam<std::string>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v8 = std::forward<unsigned int &>(args_3);
    v9 = std::forward<char const(&)[16]>(a6);
    v10 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v11 = (const char *)std::forward<char const(&)[13]>(a4);
    std::string::basic_string<std::allocator<char>>(&v19, v11, &__a);
    v7 = getRequestParam<unsigned int,char const(&)[16],unsigned int &>(
           request,
           &v19,
           v10,
           v9,
           v8,
           v12,
           (unsigned int *)a6);
    std::string::~string(&v19);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v7;
};

// Line 69: range 000000000CD60D94-000000000CD60E7A
__int64 __fastcall getRequestParam<std::string,char const(&)[13],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        std::string *para,
        std::remove_reference<char const (&)[13]>::type *a4,
        unsigned int *a5,
        const char (*args_0)[13])
{
  ApiRetcode v6; // ebx
  unsigned int *v7; // rbx
  const char *v8; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-35h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-34h]
  std::string v14; // [rsp+40h] [rbp-30h] BYREF

  ret = getRequestParam<std::string>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v7 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v8 = (const char *)std::forward<char const(&)[13]>(a4);
    std::string::basic_string<std::allocator<char>>(&v14, v8, &__a);
    v6 = getRequestParam<unsigned int>(request, &v14, v7);
    std::string::~string(&v14);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v6;
};

// Line 69: range 000000000CDB810E-000000000CDB8221
__int64 __fastcall getRequestParam<std::string,char const(&)[14],std::string&,char const(&)[7],std::string&>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        std::string *para,
        std::remove_reference<char const (&)[14]>::type *a4,
        std::string *a5,
        std::remove_reference<char const (&)[7]>::type *a6,
        std::string *args_3)
{
  ApiRetcode v7; // ebx
  std::string *v8; // r13
  const char (*v9)[7]; // r12
  std::string *v10; // rbx
  const char *v11; // rax
  const char (*v12)[7]; // r9
  std::allocator<char> __a; // [rsp+3Bh] [rbp-45h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-44h]
  std::string v19; // [rsp+40h] [rbp-40h] BYREF

  ret = getRequestParam<std::string>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v8 = std::forward<std::string &>(args_3);
    v9 = std::forward<char const(&)[7]>(a6);
    v10 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v11 = (const char *)std::forward<char const(&)[14]>(a4);
    std::string::basic_string<std::allocator<char>>(&v19, v11, &__a);
    v7 = getRequestParam<std::string,char const(&)[7],std::string&>(request, &v19, v10, v9, v8, v12, (std::string *)a6);
    std::string::~string(&v19);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v7;
};

// Line 69: range 000000000CE4924A-000000000CE4935D
__int64 __fastcall getRequestParam<std::string,char const(&)[14],unsigned int &,char const(&)[7],std::string&>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        std::string *para,
        std::remove_reference<char const (&)[14]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[7]>::type *a6,
        std::string *args_3)
{
  ApiRetcode v7; // ebx
  std::string *v8; // r13
  const char (*v9)[7]; // r12
  unsigned int *v10; // rbx
  const char *v11; // rax
  const char (*v12)[7]; // r9
  std::allocator<char> __a; // [rsp+3Bh] [rbp-45h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-44h]
  std::string v19; // [rsp+40h] [rbp-40h] BYREF

  ret = getRequestParam<std::string>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v8 = std::forward<std::string &>(args_3);
    v9 = std::forward<char const(&)[7]>(a6);
    v10 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v11 = (const char *)std::forward<char const(&)[14]>(a4);
    std::string::basic_string<std::allocator<char>>(&v19, v11, &__a);
    v7 = getRequestParam<unsigned int,char const(&)[7],std::string &>(
           request,
           &v19,
           v10,
           v9,
           v8,
           v12,
           (std::string *)a6);
    std::string::~string(&v19);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v7;
};

// Line 69: range 000000000CD60E7B-000000000CD60F61
__int64 __fastcall getRequestParam<std::string,char const(&)[14],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        std::string *para,
        std::remove_reference<char const (&)[14]>::type *a4,
        unsigned int *a5,
        const char (*args_0)[14])
{
  ApiRetcode v6; // ebx
  unsigned int *v7; // rbx
  const char *v8; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-35h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-34h]
  std::string v14; // [rsp+40h] [rbp-30h] BYREF

  ret = getRequestParam<std::string>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v7 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v8 = (const char *)std::forward<char const(&)[14]>(a4);
    std::string::basic_string<std::allocator<char>>(&v14, v8, &__a);
    v6 = getRequestParam<unsigned int>(request, &v14, v7);
    std::string::~string(&v14);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v6;
};

// Line 69: range 000000000CD5FEB6-000000000CD5FFC9
__int64 __fastcall getRequestParam<std::string,char const(&)[15],unsigned int &,char const(&)[18],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        std::string *para,
        std::remove_reference<char const (&)[15]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[18]>::type *a6,
        unsigned int *args_3)
{
  ApiRetcode v7; // ebx
  unsigned int *v8; // r13
  const char (*v9)[18]; // r12
  unsigned int *v10; // rbx
  const char *v11; // rax
  const char (*v12)[18]; // r9
  std::allocator<char> __a; // [rsp+3Bh] [rbp-45h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-44h]
  std::string v19; // [rsp+40h] [rbp-40h] BYREF

  ret = getRequestParam<std::string>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v8 = std::forward<unsigned int &>(args_3);
    v9 = std::forward<char const(&)[18]>(a6);
    v10 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v11 = (const char *)std::forward<char const(&)[15]>(a4);
    std::string::basic_string<std::allocator<char>>(&v19, v11, &__a);
    v7 = getRequestParam<unsigned int,char const(&)[18],unsigned int &>(
           request,
           &v19,
           v10,
           v9,
           v8,
           v12,
           (unsigned int *)a6);
    std::string::~string(&v19);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v7;
};

// Line 69: range 000000000CCD0148-000000000CCD022E
__int64 __fastcall getRequestParam<std::string,char const(&)[16],std::string&>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        std::string *para,
        std::remove_reference<char const (&)[16]>::type *a4,
        std::string *a5,
        const char (*args_0)[16])
{
  ApiRetcode v6; // ebx
  std::string *v7; // rbx
  const char *v8; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-35h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-34h]
  std::string v14; // [rsp+40h] [rbp-30h] BYREF

  ret = getRequestParam<std::string>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v7 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v8 = (const char *)std::forward<char const(&)[16]>(a4);
    std::string::basic_string<std::allocator<char>>(&v14, v8, &__a);
    v6 = getRequestParam<std::string>(request, &v14, v7);
    std::string::~string(&v14);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v6;
};

// Line 69: range 000000000CCC94E4-000000000CCC95CA
__int64 __fastcall getRequestParam<std::string,char const(&)[4],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        std::string *para,
        std::remove_reference<char const (&)[4]>::type *a4,
        unsigned int *a5,
        const char (*args_0)[4])
{
  ApiRetcode v6; // ebx
  unsigned int *v7; // rbx
  const char *v8; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-35h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-34h]
  std::string v14; // [rsp+40h] [rbp-30h] BYREF

  ret = getRequestParam<std::string>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v7 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v8 = (const char *)std::forward<char const(&)[4]>(a4);
    std::string::basic_string<std::allocator<char>>(&v14, v8, &__a);
    v6 = getRequestParam<unsigned int>(request, &v14, v7);
    std::string::~string(&v14);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v6;
};

// Line 69: range 000000000CD5EF2A-000000000CD5F03D
__int64 __fastcall getRequestParam<std::string,char const(&)[6],bool &,char const(&)[7],std::string&>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        std::string *para,
        std::remove_reference<char const (&)[6]>::type *a4,
        bool *a5,
        std::remove_reference<char const (&)[7]>::type *a6,
        std::string *args_3)
{
  unsigned int v7; // ebx
  std::string *v8; // r13
  std::remove_reference<char const (&)[7]>::type *v9; // r12
  bool *v10; // rbx
  const char *v11; // rax
  const char (*v12)[7]; // r9
  std::allocator<char> __a; // [rsp+3Bh] [rbp-45h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-44h]
  std::string v19; // [rsp+40h] [rbp-40h] BYREF

  ret = getRequestParam<std::string>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v8 = std::forward<std::string &>(args_3);
    v9 = (std::remove_reference<char const (&)[7]>::type *)std::forward<char const(&)[7]>(a6);
    v10 = std::forward<bool &>(a5);
    std::allocator<char>::allocator(&__a);
    v11 = (const char *)std::forward<char const(&)[6]>(a4);
    std::string::basic_string<std::allocator<char>>(&v19, v11, &__a);
    v7 = getRequestParam<bool,char const(&)[7],std::string &>(request, &v19, v10, v9, v8, v12);
    std::string::~string(&v19);
    std::allocator<char>::~allocator(&__a);
  }
  return v7;
};

// Line 69: range 000000000CE4935E-000000000CE49471
__int64 __fastcall getRequestParam<std::string,char const(&)[6],int &,char const(&)[7],std::string&>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        std::string *para,
        std::remove_reference<char const (&)[6]>::type *a4,
        int *a5,
        std::remove_reference<char const (&)[7]>::type *a6,
        std::string *args_3)
{
  ApiRetcode v7; // ebx
  std::string *v8; // r13
  const char (*v9)[7]; // r12
  int *v10; // rbx
  const char *v11; // rax
  const char (*v12)[7]; // r9
  std::allocator<char> __a; // [rsp+3Bh] [rbp-45h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-44h]
  std::string v19; // [rsp+40h] [rbp-40h] BYREF

  ret = getRequestParam<std::string>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v8 = std::forward<std::string &>(args_3);
    v9 = std::forward<char const(&)[7]>(a6);
    v10 = std::forward<int &>(a5);
    std::allocator<char>::allocator(&__a);
    v11 = (const char *)std::forward<char const(&)[6]>(a4);
    std::string::basic_string<std::allocator<char>>(&v19, v11, &__a);
    v7 = getRequestParam<int,char const(&)[7],std::string &>(request, &v19, v10, v9, v8, v12, (std::string *)a6);
    std::string::~string(&v19);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v7;
};

// Line 69: range 000000000CD541CF-000000000CD542B5
__int64 __fastcall getRequestParam<std::string,char const(&)[7],std::string&>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        std::string *para,
        std::remove_reference<char const (&)[7]>::type *a4,
        std::string *a5,
        const char (*args_0)[7])
{
  ApiRetcode v6; // ebx
  std::string *v7; // rbx
  const char *v8; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-35h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-34h]
  std::string v14; // [rsp+40h] [rbp-30h] BYREF

  ret = getRequestParam<std::string>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v7 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v8 = (const char *)std::forward<char const(&)[7]>(a4);
    std::string::basic_string<std::allocator<char>>(&v14, v8, &__a);
    v6 = getRequestParam<std::string>(request, &v14, v7);
    std::string::~string(&v14);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v6;
};

// Line 69: range 000000000CE53E78-000000000CE53F8B
__int64 __fastcall getRequestParam<std::string,char const(&)[8],bool &,char const(&)[12],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        std::string *para,
        std::remove_reference<char const (&)[8]>::type *a4,
        bool *a5,
        std::remove_reference<char const (&)[12]>::type *a6,
        unsigned int *args_3)
{
  unsigned int v7; // ebx
  unsigned int *v8; // r13
  std::remove_reference<char const (&)[12]>::type *v9; // r12
  bool *v10; // rbx
  const char *v11; // rax
  const char (*v12)[12]; // r9
  std::allocator<char> __a; // [rsp+3Bh] [rbp-45h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-44h]
  std::string v19; // [rsp+40h] [rbp-40h] BYREF

  ret = getRequestParam<std::string>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v8 = std::forward<unsigned int &>(args_3);
    v9 = (std::remove_reference<char const (&)[12]>::type *)std::forward<char const(&)[12]>(a6);
    v10 = std::forward<bool &>(a5);
    std::allocator<char>::allocator(&__a);
    v11 = (const char *)std::forward<char const(&)[8]>(a4);
    std::string::basic_string<std::allocator<char>>(&v19, v11, &__a);
    v7 = getRequestParam<bool,char const(&)[12],unsigned int &>(request, &v19, v10, v9, v8, v12);
    std::string::~string(&v19);
    std::allocator<char>::~allocator(&__a);
  }
  return v7;
};

// Line 69: range 000000000CD54717-000000000CD547FD
__int64 __fastcall getRequestParam<std::string,char const(&)[8],std::string&>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        std::string *para,
        std::remove_reference<char const (&)[8]>::type *a4,
        std::string *a5,
        const char (*args_0)[8])
{
  ApiRetcode v6; // ebx
  std::string *v7; // rbx
  const char *v8; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-35h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-34h]
  std::string v14; // [rsp+40h] [rbp-30h] BYREF

  ret = getRequestParam<std::string>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v7 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v8 = (const char *)std::forward<char const(&)[8]>(a4);
    std::string::basic_string<std::allocator<char>>(&v14, v8, &__a);
    v6 = getRequestParam<std::string>(request, &v14, v7);
    std::string::~string(&v14);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v6;
};

// Line 69: range 000000000CD5FD64-000000000CD5FEB5
__int64 __fastcall getRequestParam<std::string,char const(&)[8],unsigned int &,char const(&)[11],unsigned int &,char const(&)[15],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        std::string *para,
        std::remove_reference<char const (&)[8]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[11]>::type *a6,
        unsigned int *args_3,
        std::remove_reference<char const (&)[15]>::type *args_4,
        unsigned int *args_5)
{
  ApiRetcode v9; // ebx
  unsigned int *v10; // rbx
  const char (*v11)[15]; // r15
  unsigned int *v12; // r14
  const char (*v13)[11]; // r13
  unsigned int *v14; // r12
  const char *v15; // rax
  const char (*v17)[11]; // [rsp-8h] [rbp-98h]
  std::allocator<char> __a; // [rsp+3Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-54h]
  std::string v23; // [rsp+40h] [rbp-50h] BYREF

  ret = getRequestParam<std::string>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v10 = std::forward<unsigned int &>(args_5);
    v11 = std::forward<char const(&)[15]>(args_4);
    v12 = std::forward<unsigned int &>(args_3);
    v13 = std::forward<char const(&)[11]>(a6);
    v14 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v15 = (const char *)std::forward<char const(&)[8]>(a4);
    std::string::basic_string<std::allocator<char>>(&v23, v15, &__a);
    v9 = getRequestParam<unsigned int,char const(&)[11],unsigned int &,char const(&)[15],unsigned int &>(
           request,
           &v23,
           v14,
           v13,
           v12,
           v11,
           v10,
           v17,
           (unsigned int *)a6,
           (const char (*)[15])a5,
           (unsigned int *)a4);
    std::string::~string(&v23);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v9;
};

// Line 69: range 000000000CD54408-000000000CD5451B
__int64 __fastcall getRequestParam<std::string,char const(&)[8],unsigned int &,char const(&)[11],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        std::string *para,
        std::remove_reference<char const (&)[8]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[11]>::type *a6,
        unsigned int *args_3)
{
  ApiRetcode v7; // ebx
  unsigned int *v8; // r13
  const char (*v9)[11]; // r12
  unsigned int *v10; // rbx
  const char *v11; // rax
  const char (*v12)[11]; // r9
  std::allocator<char> __a; // [rsp+3Bh] [rbp-45h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-44h]
  std::string v19; // [rsp+40h] [rbp-40h] BYREF

  ret = getRequestParam<std::string>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v8 = std::forward<unsigned int &>(args_3);
    v9 = std::forward<char const(&)[11]>(a6);
    v10 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v11 = (const char *)std::forward<char const(&)[8]>(a4);
    std::string::basic_string<std::allocator<char>>(&v19, v11, &__a);
    v7 = getRequestParam<unsigned int,char const(&)[11],unsigned int &>(
           request,
           &v19,
           v10,
           v9,
           v8,
           v12,
           (unsigned int *)a6);
    std::string::~string(&v19);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v7;
};

// Line 69: range 000000000CD5BA57-000000000CD5BB6A
__int64 __fastcall getRequestParam<std::string,char const(&)[8],unsigned int &,char const(&)[7],std::string&>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        std::string *para,
        std::remove_reference<char const (&)[8]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[7]>::type *a6,
        std::string *args_3)
{
  ApiRetcode v7; // ebx
  std::string *v8; // r13
  const char (*v9)[7]; // r12
  unsigned int *v10; // rbx
  const char *v11; // rax
  const char (*v12)[7]; // r9
  std::allocator<char> __a; // [rsp+3Bh] [rbp-45h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-44h]
  std::string v19; // [rsp+40h] [rbp-40h] BYREF

  ret = getRequestParam<std::string>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v8 = std::forward<std::string &>(args_3);
    v9 = std::forward<char const(&)[7]>(a6);
    v10 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v11 = (const char *)std::forward<char const(&)[8]>(a4);
    std::string::basic_string<std::allocator<char>>(&v19, v11, &__a);
    v7 = getRequestParam<unsigned int,char const(&)[7],std::string &>(
           request,
           &v19,
           v10,
           v9,
           v8,
           v12,
           (std::string *)a6);
    std::string::~string(&v19);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v7;
};

// Line 69: range 000000000CD60C80-000000000CD60D93
__int64 __fastcall getRequestParam<std::string,char const(&)[8],unsigned int &,char const(&)[8],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        std::string *para,
        std::remove_reference<char const (&)[8]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[8]>::type *a6,
        unsigned int *args_3)
{
  ApiRetcode v7; // ebx
  unsigned int *v8; // r13
  const char (*v9)[8]; // r12
  unsigned int *v10; // rbx
  const char *v11; // rax
  const char (*v12)[8]; // r9
  std::allocator<char> __a; // [rsp+3Bh] [rbp-45h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-44h]
  std::string v19; // [rsp+40h] [rbp-40h] BYREF

  ret = getRequestParam<std::string>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v8 = std::forward<unsigned int &>(args_3);
    v9 = std::forward<char const(&)[8]>(a6);
    v10 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v11 = (const char *)std::forward<char const(&)[8]>(a4);
    std::string::basic_string<std::allocator<char>>(&v19, v11, &__a);
    v7 = getRequestParam<unsigned int,char const(&)[8],unsigned int &>(
           request,
           &v19,
           v10,
           v9,
           v8,
           v12,
           (unsigned int *)a6);
    std::string::~string(&v19);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v7;
};

// Line 69: range 000000000CD5451C-000000000CD54602
__int64 __fastcall getRequestParam<std::string,char const(&)[8],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        std::string *para,
        std::remove_reference<char const (&)[8]>::type *a4,
        unsigned int *a5,
        const char (*args_0)[8])
{
  ApiRetcode v6; // ebx
  unsigned int *v7; // rbx
  const char *v8; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-35h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-34h]
  std::string v14; // [rsp+40h] [rbp-30h] BYREF

  ret = getRequestParam<std::string>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v7 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v8 = (const char *)std::forward<char const(&)[8]>(a4);
    std::string::basic_string<std::allocator<char>>(&v14, v8, &__a);
    v6 = getRequestParam<unsigned int>(request, &v14, v7);
    std::string::~string(&v14);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v6;
};

// Line 69: range 000000000CD5B29B-000000000CD5B3AE
__int64 __fastcall getRequestParam<std::string,char const(&)[9],unsigned int &,char const(&)[13],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        std::string *para,
        std::remove_reference<char const (&)[9]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[13]>::type *a6,
        unsigned int *args_3)
{
  ApiRetcode v7; // ebx
  unsigned int *v8; // r13
  const char (*v9)[13]; // r12
  unsigned int *v10; // rbx
  const char *v11; // rax
  const char (*v12)[13]; // r9
  std::allocator<char> __a; // [rsp+3Bh] [rbp-45h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-44h]
  std::string v19; // [rsp+40h] [rbp-40h] BYREF

  ret = getRequestParam<std::string>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v8 = std::forward<unsigned int &>(args_3);
    v9 = std::forward<char const(&)[13]>(a6);
    v10 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v11 = (const char *)std::forward<char const(&)[9]>(a4);
    std::string::basic_string<std::allocator<char>>(&v19, v11, &__a);
    v7 = getRequestParam<unsigned int,char const(&)[13],unsigned int &>(
           request,
           &v19,
           v10,
           v9,
           v8,
           v12,
           (unsigned int *)a6);
    std::string::~string(&v19);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v7;
};

// Line 69: range 000000000CD5CCE1-000000000CD5CE99
__int64 __fastcall getRequestParam<std::string,char const(&)[9],unsigned int &,char const(&)[6],float &,char const(&)[6],float &,char const(&)[6],float &,char const(&)[6],float &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        std::string *para,
        std::remove_reference<char const (&)[9]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[6]>::type *a6,
        float *args_3,
        std::remove_reference<char const (&)[6]>::type *args_4,
        float *args_5,
        std::remove_reference<char const (&)[6]>::type *args_6,
        float *args_7,
        std::remove_reference<char const (&)[6]>::type *args_8,
        float *args_9)
{
  ApiRetcode v13; // ebx
  float *v14; // r15
  const char (*v15)[6]; // r14
  float *v16; // r13
  const char (*v17)[6]; // r12
  float *v18; // rbx
  const char *v19; // rax
  const char (*v21)[6]; // [rsp-8h] [rbp-B8h]
  unsigned int *v22; // [rsp+0h] [rbp-B0h]
  const char (*v23)[6]; // [rsp+8h] [rbp-A8h]
  float *v24; // [rsp+10h] [rbp-A0h]
  const char (*v25)[6]; // [rsp+18h] [rbp-98h]
  std::allocator<char> __a; // [rsp+5Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+5Ch] [rbp-54h]
  std::string v31; // [rsp+60h] [rbp-50h] BYREF

  ret = getRequestParam<std::string>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v14 = std::forward<float &>(args_9);
    v15 = std::forward<char const(&)[6]>(args_8);
    v16 = std::forward<float &>(args_7);
    v17 = std::forward<char const(&)[6]>(args_6);
    v18 = std::forward<float &>(args_5);
    v25 = std::forward<char const(&)[6]>(args_4);
    v24 = std::forward<float &>(args_3);
    v23 = std::forward<char const(&)[6]>(a6);
    v22 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v19 = (const char *)std::forward<char const(&)[9]>(a4);
    std::string::basic_string<std::allocator<char>>(&v31, v19, &__a);
    v13 = getRequestParam<unsigned int,char const(&)[6],float &,char const(&)[6],float &,char const(&)[6],float &,char const(&)[6],float &>(
            request,
            &v31,
            v22,
            v23,
            v24,
            v25,
            v18,
            v17,
            v16,
            v15,
            v14,
            v21,
            (float *)v22,
            v23,
            v24,
            v25,
            (float *)a6,
            (const char (*)[6])a5,
            (float *)a4);
    std::string::~string(&v31);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v13;
};

// Line 69: range 000000000CD60A58-000000000CD60B6B
__int64 __fastcall getRequestParam<std::string,char const(&)[9],unsigned int &,char const(&)[6],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        std::string *para,
        std::remove_reference<char const (&)[9]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[6]>::type *a6,
        unsigned int *args_3)
{
  ApiRetcode v7; // ebx
  unsigned int *v8; // r13
  const char (*v9)[6]; // r12
  unsigned int *v10; // rbx
  const char *v11; // rax
  const char (*v12)[6]; // r9
  std::allocator<char> __a; // [rsp+3Bh] [rbp-45h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-44h]
  std::string v19; // [rsp+40h] [rbp-40h] BYREF

  ret = getRequestParam<std::string>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v8 = std::forward<unsigned int &>(args_3);
    v9 = std::forward<char const(&)[6]>(a6);
    v10 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v11 = (const char *)std::forward<char const(&)[9]>(a4);
    std::string::basic_string<std::allocator<char>>(&v19, v11, &__a);
    v7 = getRequestParam<unsigned int,char const(&)[6],unsigned int &>(
           request,
           &v19,
           v10,
           v9,
           v8,
           v12,
           (unsigned int *)a6);
    std::string::~string(&v19);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v7;
};

// Line 69: range 000000000CD60F62-000000000CD61048
__int64 __fastcall getRequestParam<std::string,char const(&)[9],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        std::string *para,
        std::remove_reference<char const (&)[9]>::type *a4,
        unsigned int *a5,
        const char (*args_0)[9])
{
  ApiRetcode v6; // ebx
  unsigned int *v7; // rbx
  const char *v8; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-35h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-34h]
  std::string v14; // [rsp+40h] [rbp-30h] BYREF

  ret = getRequestParam<std::string>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v7 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v8 = (const char *)std::forward<char const(&)[9]>(a4);
    std::string::basic_string<std::allocator<char>>(&v14, v8, &__a);
    v6 = getRequestParam<unsigned int>(request, &v14, v7);
    std::string::~string(&v14);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v6;
};

// Line 69: range 000000000CDB3026-000000000CDB3139
__int64 __fastcall getRequestParam<unsigned int,char const(&)[10],bool &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[10]>::type *a4,
        bool *a5,
        std::remove_reference<char const (&)[7]>::type *a6,
        std::string *args_3)
{
  unsigned int v7; // ebx
  std::string *v8; // r13
  std::remove_reference<char const (&)[7]>::type *v9; // r12
  bool *v10; // rbx
  const char *v11; // rax
  const char (*v12)[7]; // r9
  std::allocator<char> __a; // [rsp+3Bh] [rbp-45h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-44h]
  std::string v19; // [rsp+40h] [rbp-40h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v8 = std::forward<std::string &>(args_3);
    v9 = (std::remove_reference<char const (&)[7]>::type *)std::forward<char const(&)[7]>(a6);
    v10 = std::forward<bool &>(a5);
    std::allocator<char>::allocator(&__a);
    v11 = (const char *)std::forward<char const(&)[10]>(a4);
    std::string::basic_string<std::allocator<char>>(&v19, v11, &__a);
    v7 = getRequestParam<bool,char const(&)[7],std::string &>(request, &v19, v10, v9, v8, v12);
    std::string::~string(&v19);
    std::allocator<char>::~allocator(&__a);
  }
  return v7;
};

// Line 69: range 000000000CCD7822-000000000CCD7973
__int64 __fastcall getRequestParam<unsigned int,char const(&)[10],std::string &,char const(&)[6],bool &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[10]>::type *a4,
        std::string *a5,
        std::remove_reference<char const (&)[6]>::type *a6,
        bool *args_3,
        std::remove_reference<char const (&)[7]>::type *args_4,
        std::string *args_5)
{
  unsigned int v9; // ebx
  std::string *v10; // rbx
  std::remove_reference<char const (&)[7]>::type *v11; // r15
  bool *v12; // r14
  std::remove_reference<char const (&)[6]>::type *v13; // r13
  std::string *v14; // r12
  const char *v15; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-54h]
  std::string v22; // [rsp+40h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v10 = std::forward<std::string &>(args_5);
    v11 = (std::remove_reference<char const (&)[7]>::type *)std::forward<char const(&)[7]>(args_4);
    v12 = std::forward<bool &>(args_3);
    v13 = (std::remove_reference<char const (&)[6]>::type *)std::forward<char const(&)[6]>(a6);
    v14 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v15 = (const char *)std::forward<char const(&)[10]>(a4);
    std::string::basic_string<std::allocator<char>>(&v22, v15, &__a);
    v9 = getRequestParam<std::string,char const(&)[6],bool &,char const(&)[7],std::string&>(
           request,
           &v22,
           v14,
           v13,
           v12,
           v11,
           v10);
    std::string::~string(&v22);
    std::allocator<char>::~allocator(&__a);
  }
  return v9;
};

// Line 69: range 000000000CCCFD90-000000000CCCFEA3
__int64 __fastcall getRequestParam<unsigned int,char const(&)[10],std::string &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[10]>::type *a4,
        std::string *a5,
        std::remove_reference<char const (&)[7]>::type *a6,
        std::string *args_3)
{
  unsigned int v7; // ebx
  std::string *v8; // r13
  std::remove_reference<char const (&)[7]>::type *v9; // r12
  std::string *v10; // rbx
  const char *v11; // rax
  const char (*v12)[7]; // r9
  std::allocator<char> __a; // [rsp+3Bh] [rbp-45h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-44h]
  std::string v19; // [rsp+40h] [rbp-40h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v8 = std::forward<std::string &>(args_3);
    v9 = (std::remove_reference<char const (&)[7]>::type *)std::forward<char const(&)[7]>(a6);
    v10 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v11 = (const char *)std::forward<char const(&)[10]>(a4);
    std::string::basic_string<std::allocator<char>>(&v19, v11, &__a);
    v7 = getRequestParam<std::string,char const(&)[7],std::string&>(request, &v19, v10, v9, v8, v12);
    std::string::~string(&v19);
    std::allocator<char>::~allocator(&__a);
  }
  return v7;
};

// Line 69: range 000000000CDB2AEA-000000000CDB2C6D
__int64 __fastcall getRequestParam<unsigned int,char const(&)[10],unsigned int &,char const(&)[6],unsigned int &,char const(&)[10],bool &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[10]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[6]>::type *a6,
        unsigned int *args_3,
        std::remove_reference<char const (&)[10]>::type *args_4,
        bool *args_5,
        std::remove_reference<char const (&)[7]>::type *args_6,
        std::string *args_7)
{
  ApiRetcode v11; // ebx
  std::string *v12; // r13
  const char (*v13)[7]; // r12
  bool *v14; // rbx
  const char (*v15)[6]; // r15
  unsigned int *v16; // r14
  const char *v17; // rax
  const char (*v19)[6]; // [rsp-8h] [rbp-A8h]
  unsigned int *v20; // [rsp+0h] [rbp-A0h]
  const char (*v21)[10]; // [rsp+8h] [rbp-98h]
  std::allocator<char> __a; // [rsp+4Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+4Ch] [rbp-54h]
  std::string v27; // [rsp+50h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v12 = std::forward<std::string &>(args_7);
    v13 = std::forward<char const(&)[7]>(args_6);
    v14 = std::forward<bool &>(args_5);
    v21 = std::forward<char const(&)[10]>(args_4);
    v20 = std::forward<unsigned int &>(args_3);
    v15 = std::forward<char const(&)[6]>(a6);
    v16 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v17 = (const char *)std::forward<char const(&)[10]>(a4);
    std::string::basic_string<std::allocator<char>>(&v27, v17, &__a);
    v11 = getRequestParam<unsigned int,char const(&)[6],unsigned int &,char const(&)[10],bool &,char const(&)[7],std::string &>(
            request,
            &v27,
            v16,
            v15,
            v20,
            v21,
            v14,
            v13,
            v12,
            v19,
            v20,
            v21,
            (bool *)a6,
            (const char (*)[7])a5,
            (std::string *)a4);
    std::string::~string(&v27);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v11;
};

// Line 69: range 000000000CDB2998-000000000CDB2AE9
__int64 __fastcall getRequestParam<unsigned int,char const(&)[10],unsigned int &,char const(&)[7],bool &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[10]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[7]>::type *a6,
        bool *args_3,
        std::remove_reference<char const (&)[7]>::type *args_4,
        std::string *args_5)
{
  ApiRetcode v9; // ebx
  std::string *v10; // rbx
  const char (*v11)[7]; // r15
  bool *v12; // r14
  const char (*v13)[7]; // r13
  unsigned int *v14; // r12
  const char *v15; // rax
  const char (*v17)[7]; // [rsp-8h] [rbp-98h]
  std::allocator<char> __a; // [rsp+3Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-54h]
  std::string v23; // [rsp+40h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v10 = std::forward<std::string &>(args_5);
    v11 = std::forward<char const(&)[7]>(args_4);
    v12 = std::forward<bool &>(args_3);
    v13 = std::forward<char const(&)[7]>(a6);
    v14 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v15 = (const char *)std::forward<char const(&)[10]>(a4);
    std::string::basic_string<std::allocator<char>>(&v23, v15, &__a);
    v9 = getRequestParam<unsigned int,char const(&)[7],bool &,char const(&)[7],std::string &>(
           request,
           &v23,
           v14,
           v13,
           v12,
           v11,
           v10,
           v17,
           (bool *)a6,
           (const char (*)[7])a5,
           (std::string *)a4);
    std::string::~string(&v23);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v9;
};

// Line 69: range 000000000CDB2884-000000000CDB2997
__int64 __fastcall getRequestParam<unsigned int,char const(&)[10],unsigned int &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[10]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[7]>::type *a6,
        std::string *args_3)
{
  ApiRetcode v7; // ebx
  std::string *v8; // r13
  const char (*v9)[7]; // r12
  unsigned int *v10; // rbx
  const char *v11; // rax
  const char (*v12)[7]; // r9
  std::allocator<char> __a; // [rsp+3Bh] [rbp-45h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-44h]
  std::string v19; // [rsp+40h] [rbp-40h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v8 = std::forward<std::string &>(args_3);
    v9 = std::forward<char const(&)[7]>(a6);
    v10 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v11 = (const char *)std::forward<char const(&)[10]>(a4);
    std::string::basic_string<std::allocator<char>>(&v19, v11, &__a);
    v7 = getRequestParam<unsigned int,char const(&)[7],std::string &>(
           request,
           &v19,
           v10,
           v9,
           v8,
           v12,
           (std::string *)a6);
    std::string::~string(&v19);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v7;
};

// Line 69: range 000000000CCD2303-000000000CCD2416
__int64 __fastcall getRequestParam<unsigned int,char const(&)[10],unsigned int &,char const(&)[8],bool &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[10]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[8]>::type *a6,
        bool *args_3)
{
  ApiRetcode v7; // ebx
  bool *v8; // r13
  const char (*v9)[8]; // r12
  unsigned int *v10; // rbx
  const char *v11; // rax
  const char (*v12)[8]; // r9
  std::allocator<char> __a; // [rsp+3Bh] [rbp-45h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-44h]
  std::string v19; // [rsp+40h] [rbp-40h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v8 = std::forward<bool &>(args_3);
    v9 = std::forward<char const(&)[8]>(a6);
    v10 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v11 = (const char *)std::forward<char const(&)[10]>(a4);
    std::string::basic_string<std::allocator<char>>(&v19, v11, &__a);
    v7 = getRequestParam<unsigned int,char const(&)[8],bool &>(request, &v19, v10, v9, v8, v12, (bool *)a6);
    std::string::~string(&v19);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v7;
};

// Line 69: range 000000000CCD15DE-000000000CCD16C4
__int64 __fastcall getRequestParam<unsigned int,char const(&)[10],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[10]>::type *a4,
        unsigned int *a5,
        const char (*args_0)[10])
{
  ApiRetcode v6; // ebx
  unsigned int *v7; // rbx
  const char *v8; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-35h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-34h]
  std::string v14; // [rsp+40h] [rbp-30h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v7 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v8 = (const char *)std::forward<char const(&)[10]>(a4);
    std::string::basic_string<std::allocator<char>>(&v14, v8, &__a);
    v6 = getRequestParam<unsigned int>(request, &v14, v7);
    std::string::~string(&v14);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v6;
};

// Line 69: range 000000000CCD148C-000000000CCD15DD
__int64 __fastcall getRequestParam<unsigned int,char const(&)[11],int &,char const(&)[15],unsigned int &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[11]>::type *a4,
        int *a5,
        std::remove_reference<char const (&)[15]>::type *a6,
        unsigned int *args_3,
        std::remove_reference<char const (&)[7]>::type *args_4,
        std::string *args_5)
{
  unsigned int v9; // ebx
  std::string *v10; // rbx
  std::remove_reference<char const (&)[7]>::type *v11; // r15
  unsigned int *v12; // r14
  std::remove_reference<char const (&)[15]>::type *v13; // r13
  int *v14; // r12
  const char *v15; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-54h]
  std::string v22; // [rsp+40h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v10 = std::forward<std::string &>(args_5);
    v11 = (std::remove_reference<char const (&)[7]>::type *)std::forward<char const(&)[7]>(args_4);
    v12 = std::forward<unsigned int &>(args_3);
    v13 = (std::remove_reference<char const (&)[15]>::type *)std::forward<char const(&)[15]>(a6);
    v14 = std::forward<int &>(a5);
    std::allocator<char>::allocator(&__a);
    v15 = (const char *)std::forward<char const(&)[11]>(a4);
    std::string::basic_string<std::allocator<char>>(&v22, v15, &__a);
    v9 = getRequestParam<int,char const(&)[15],unsigned int &,char const(&)[7],std::string &>(
           request,
           &v22,
           v14,
           v13,
           v12,
           v11,
           v10);
    std::string::~string(&v22);
    std::allocator<char>::~allocator(&__a);
  }
  return v9;
};

// Line 69: range 000000000CCD4FCB-000000000CCD51E7
__int64 __fastcall getRequestParam<unsigned int,char const(&)[11],unsigned int &,char const(&)[13],std::string &,char const(&)[12],std::string &,char const(&)[17],unsigned int &,char const(&)[21],unsigned int &,char const(&)[15],unsigned int &,char const(&)[13],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[11]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[13]>::type *a6,
        std::string *args_3,
        std::remove_reference<char const (&)[12]>::type *args_4,
        std::string *args_5,
        std::remove_reference<char const (&)[17]>::type *args_6,
        unsigned int *args_7,
        std::remove_reference<char const (&)[21]>::type *args_8,
        unsigned int *args_9,
        std::remove_reference<char const (&)[15]>::type *args_10,
        unsigned int *args_11,
        std::remove_reference<char const (&)[13]>::type *args_12,
        unsigned int *args_13)
{
  ApiRetcode v17; // ebx
  unsigned int *v18; // r15
  const char (*v19)[21]; // r14
  unsigned int *v20; // r13
  const char (*v21)[17]; // r12
  std::string *v22; // rbx
  const char *v23; // rax
  const char (*v25)[13]; // [rsp-8h] [rbp-D8h]
  unsigned int *v26; // [rsp+0h] [rbp-D0h]
  const char (*v27)[13]; // [rsp+8h] [rbp-C8h]
  std::string *v28; // [rsp+10h] [rbp-C0h]
  const char (*v29)[12]; // [rsp+18h] [rbp-B8h]
  char (*v30)[15]; // [rsp+20h] [rbp-B0h]
  unsigned int *v31; // [rsp+28h] [rbp-A8h]
  char (*v32)[13]; // [rsp+30h] [rbp-A0h]
  unsigned int *v33; // [rsp+38h] [rbp-98h]
  std::allocator<char> __a; // [rsp+7Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+7Ch] [rbp-54h]
  std::string v39; // [rsp+80h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v33 = std::forward<unsigned int &>(args_13);
    v32 = (char (*)[13])std::forward<char const(&)[13]>(args_12);
    v31 = std::forward<unsigned int &>(args_11);
    v30 = (char (*)[15])std::forward<char const(&)[15]>(args_10);
    v18 = std::forward<unsigned int &>(args_9);
    v19 = std::forward<char const(&)[21]>(args_8);
    v20 = std::forward<unsigned int &>(args_7);
    v21 = std::forward<char const(&)[17]>(args_6);
    v22 = std::forward<std::string &>(args_5);
    v29 = std::forward<char const(&)[12]>(args_4);
    v28 = std::forward<std::string &>(args_3);
    v27 = std::forward<char const(&)[13]>(a6);
    v26 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v23 = (const char *)std::forward<char const(&)[11]>(a4);
    std::string::basic_string<std::allocator<char>>(&v39, v23, &__a);
    v17 = getRequestParam<unsigned int,char const(&)[13],std::string &,char const(&)[12],std::string &,char const(&)[17],unsigned int &,char const(&)[21],unsigned int &,char const(&)[15],unsigned int &,char const(&)[13],unsigned int &>(
            request,
            &v39,
            v26,
            v27,
            v28,
            v29,
            v22,
            v21,
            v20,
            v19,
            v18,
            v30,
            v31,
            v32,
            v33,
            v25,
            (std::string *)v26,
            (const char (*)[12])v27,
            v28,
            (const char (*)[17])v29,
            (unsigned int *)v30,
            (const char (*)[21])v31,
            (unsigned int *)v32,
            (const char (*)[15])v33,
            (unsigned int *)a6,
            (const char (*)[13])a5,
            (unsigned int *)a4);
    std::string::~string(&v39);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v17;
};

// Line 69: range 000000000CCC9138-000000000CCC924B
__int64 __fastcall getRequestParam<unsigned int,char const(&)[11],unsigned int &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[11]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[7]>::type *a6,
        std::string *args_3)
{
  ApiRetcode v7; // ebx
  std::string *v8; // r13
  const char (*v9)[7]; // r12
  unsigned int *v10; // rbx
  const char *v11; // rax
  const char (*v12)[7]; // r9
  std::allocator<char> __a; // [rsp+3Bh] [rbp-45h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-44h]
  std::string v19; // [rsp+40h] [rbp-40h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v8 = std::forward<std::string &>(args_3);
    v9 = std::forward<char const(&)[7]>(a6);
    v10 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v11 = (const char *)std::forward<char const(&)[11]>(a4);
    std::string::basic_string<std::allocator<char>>(&v19, v11, &__a);
    v7 = getRequestParam<unsigned int,char const(&)[7],std::string &>(
           request,
           &v19,
           v10,
           v9,
           v8,
           v12,
           (std::string *)a6);
    std::string::~string(&v19);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v7;
};

// Line 69: range 000000000CCD48C7-000000000CCD4A4A
__int64 __fastcall getRequestParam<unsigned int,char const(&)[11],unsigned int &,char const(&)[9],unsigned int &,char const(&)[8],bool &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[11]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[9]>::type *a6,
        unsigned int *args_3,
        std::remove_reference<char const (&)[8]>::type *args_4,
        bool *args_5,
        std::remove_reference<char const (&)[7]>::type *args_6,
        std::string *args_7)
{
  ApiRetcode v11; // ebx
  std::string *v12; // r13
  const char (*v13)[7]; // r12
  bool *v14; // rbx
  const char (*v15)[9]; // r15
  unsigned int *v16; // r14
  const char *v17; // rax
  const char (*v19)[9]; // [rsp-8h] [rbp-A8h]
  unsigned int *v20; // [rsp+0h] [rbp-A0h]
  const char (*v21)[8]; // [rsp+8h] [rbp-98h]
  std::allocator<char> __a; // [rsp+4Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+4Ch] [rbp-54h]
  std::string v27; // [rsp+50h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v12 = std::forward<std::string &>(args_7);
    v13 = std::forward<char const(&)[7]>(args_6);
    v14 = std::forward<bool &>(args_5);
    v21 = std::forward<char const(&)[8]>(args_4);
    v20 = std::forward<unsigned int &>(args_3);
    v15 = std::forward<char const(&)[9]>(a6);
    v16 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v17 = (const char *)std::forward<char const(&)[11]>(a4);
    std::string::basic_string<std::allocator<char>>(&v27, v17, &__a);
    v11 = getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[8],bool &,char const(&)[7],std::string &>(
            request,
            &v27,
            v16,
            v15,
            v20,
            v21,
            v14,
            v13,
            v12,
            v19,
            v20,
            v21,
            (bool *)a6,
            (const char (*)[7])a5,
            (std::string *)a4);
    std::string::~string(&v27);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v11;
};

// Line 69: range 000000000CCCD302-000000000CCCD3E8
__int64 __fastcall getRequestParam<unsigned int,char const(&)[11],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[11]>::type *a4,
        unsigned int *a5,
        const char (*args_0)[11])
{
  ApiRetcode v6; // ebx
  unsigned int *v7; // rbx
  const char *v8; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-35h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-34h]
  std::string v14; // [rsp+40h] [rbp-30h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v7 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v8 = (const char *)std::forward<char const(&)[11]>(a4);
    std::string::basic_string<std::allocator<char>>(&v14, v8, &__a);
    v6 = getRequestParam<unsigned int>(request, &v14, v7);
    std::string::~string(&v14);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v6;
};

// Line 69: range 000000000CCD7DFB-000000000CCD7F0E
__int64 __fastcall getRequestParam<unsigned int,char const(&)[12],std::string &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[12]>::type *a4,
        std::string *a5,
        std::remove_reference<char const (&)[7]>::type *a6,
        std::string *args_3)
{
  unsigned int v7; // ebx
  std::string *v8; // r13
  std::remove_reference<char const (&)[7]>::type *v9; // r12
  std::string *v10; // rbx
  const char *v11; // rax
  const char (*v12)[7]; // r9
  std::allocator<char> __a; // [rsp+3Bh] [rbp-45h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-44h]
  std::string v19; // [rsp+40h] [rbp-40h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v8 = std::forward<std::string &>(args_3);
    v9 = (std::remove_reference<char const (&)[7]>::type *)std::forward<char const(&)[7]>(a6);
    v10 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v11 = (const char *)std::forward<char const(&)[12]>(a4);
    std::string::basic_string<std::allocator<char>>(&v19, v11, &__a);
    v7 = getRequestParam<std::string,char const(&)[7],std::string&>(request, &v19, v10, v9, v8, v12);
    std::string::~string(&v19);
    std::allocator<char>::~allocator(&__a);
  }
  return v7;
};

// Line 69: range 000000000CDBA6B6-000000000CDBA7C9
__int64 __fastcall getRequestParam<unsigned int,char const(&)[12],unsigned int &,char const(&)[13],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[12]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[13]>::type *a6,
        unsigned int *args_3)
{
  ApiRetcode v7; // ebx
  unsigned int *v8; // r13
  const char (*v9)[13]; // r12
  unsigned int *v10; // rbx
  const char *v11; // rax
  const char (*v12)[13]; // r9
  std::allocator<char> __a; // [rsp+3Bh] [rbp-45h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-44h]
  std::string v19; // [rsp+40h] [rbp-40h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v8 = std::forward<unsigned int &>(args_3);
    v9 = std::forward<char const(&)[13]>(a6);
    v10 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v11 = (const char *)std::forward<char const(&)[12]>(a4);
    std::string::basic_string<std::allocator<char>>(&v19, v11, &__a);
    v7 = getRequestParam<unsigned int,char const(&)[13],unsigned int &>(
           request,
           &v19,
           v10,
           v9,
           v8,
           v12,
           (unsigned int *)a6);
    std::string::~string(&v19);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v7;
};

// Line 69: range 000000000CCCFEA4-000000000CCCFFF5
__int64 __fastcall getRequestParam<unsigned int,char const(&)[12],unsigned int &,char const(&)[7],bool &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[12]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[7]>::type *a6,
        bool *args_3,
        std::remove_reference<char const (&)[7]>::type *args_4,
        std::string *args_5)
{
  ApiRetcode v9; // ebx
  std::string *v10; // rbx
  const char (*v11)[7]; // r15
  bool *v12; // r14
  const char (*v13)[7]; // r13
  unsigned int *v14; // r12
  const char *v15; // rax
  const char (*v17)[7]; // [rsp-8h] [rbp-98h]
  std::allocator<char> __a; // [rsp+3Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-54h]
  std::string v23; // [rsp+40h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v10 = std::forward<std::string &>(args_5);
    v11 = std::forward<char const(&)[7]>(args_4);
    v12 = std::forward<bool &>(args_3);
    v13 = std::forward<char const(&)[7]>(a6);
    v14 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v15 = (const char *)std::forward<char const(&)[12]>(a4);
    std::string::basic_string<std::allocator<char>>(&v23, v15, &__a);
    v9 = getRequestParam<unsigned int,char const(&)[7],bool &,char const(&)[7],std::string &>(
           request,
           &v23,
           v14,
           v13,
           v12,
           v11,
           v10,
           v17,
           (bool *)a6,
           (const char (*)[7])a5,
           (std::string *)a4);
    std::string::~string(&v23);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v9;
};

// Line 69: range 000000000CD5C803-000000000CD5C916
__int64 __fastcall getRequestParam<unsigned int,char const(&)[12],unsigned int &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[12]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[7]>::type *a6,
        std::string *args_3)
{
  ApiRetcode v7; // ebx
  std::string *v8; // r13
  const char (*v9)[7]; // r12
  unsigned int *v10; // rbx
  const char *v11; // rax
  const char (*v12)[7]; // r9
  std::allocator<char> __a; // [rsp+3Bh] [rbp-45h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-44h]
  std::string v19; // [rsp+40h] [rbp-40h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v8 = std::forward<std::string &>(args_3);
    v9 = std::forward<char const(&)[7]>(a6);
    v10 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v11 = (const char *)std::forward<char const(&)[12]>(a4);
    std::string::basic_string<std::allocator<char>>(&v19, v11, &__a);
    v7 = getRequestParam<unsigned int,char const(&)[7],std::string &>(
           request,
           &v19,
           v10,
           v9,
           v8,
           v12,
           (std::string *)a6);
    std::string::~string(&v19);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v7;
};

// Line 69: range 000000000CCCF1E3-000000000CCCF334
__int64 __fastcall getRequestParam<unsigned int,char const(&)[12],unsigned int &,char const(&)[8],bool &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[12]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[8]>::type *a6,
        bool *args_3,
        std::remove_reference<char const (&)[7]>::type *args_4,
        std::string *args_5)
{
  ApiRetcode v9; // ebx
  std::string *v10; // rbx
  const char (*v11)[7]; // r15
  bool *v12; // r14
  const char (*v13)[8]; // r13
  unsigned int *v14; // r12
  const char *v15; // rax
  const char (*v17)[8]; // [rsp-8h] [rbp-98h]
  std::allocator<char> __a; // [rsp+3Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-54h]
  std::string v23; // [rsp+40h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v10 = std::forward<std::string &>(args_5);
    v11 = std::forward<char const(&)[7]>(args_4);
    v12 = std::forward<bool &>(args_3);
    v13 = std::forward<char const(&)[8]>(a6);
    v14 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v15 = (const char *)std::forward<char const(&)[12]>(a4);
    std::string::basic_string<std::allocator<char>>(&v23, v15, &__a);
    v9 = getRequestParam<unsigned int,char const(&)[8],bool &,char const(&)[7],std::string &>(
           request,
           &v23,
           v14,
           v13,
           v12,
           v11,
           v10,
           v17,
           (bool *)a6,
           (const char (*)[7])a5,
           (std::string *)a4);
    std::string::~string(&v23);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v9;
};

// Line 69: range 000000000CCD4DE0-000000000CCD4FCA
__int64 __fastcall getRequestParam<unsigned int,char const(&)[13],std::string &,char const(&)[12],std::string &,char const(&)[17],unsigned int &,char const(&)[21],unsigned int &,char const(&)[15],unsigned int &,char const(&)[13],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[13]>::type *a4,
        std::string *a5,
        std::remove_reference<char const (&)[12]>::type *a6,
        std::string *args_3,
        std::remove_reference<char const (&)[17]>::type *args_4,
        unsigned int *args_5,
        std::remove_reference<char const (&)[21]>::type *args_6,
        unsigned int *args_7,
        std::remove_reference<char const (&)[15]>::type *args_8,
        unsigned int *args_9,
        std::remove_reference<char const (&)[13]>::type *args_10,
        unsigned int *args_11)
{
  ApiRetcode v15; // ebx
  unsigned int *v16; // r15
  const char (*v17)[15]; // r14
  unsigned int *v18; // r13
  const char (*v19)[21]; // r12
  unsigned int *v20; // rbx
  const char *v21; // rax
  const char (*v23)[12]; // [rsp-8h] [rbp-C8h]
  std::string *v24; // [rsp+0h] [rbp-C0h]
  const char (*v25)[12]; // [rsp+8h] [rbp-B8h]
  std::string *v26; // [rsp+10h] [rbp-B0h]
  const char (*v27)[17]; // [rsp+18h] [rbp-A8h]
  char (*v28)[13]; // [rsp+20h] [rbp-A0h]
  unsigned int *v29; // [rsp+28h] [rbp-98h]
  std::allocator<char> __a; // [rsp+6Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+6Ch] [rbp-54h]
  std::string v35; // [rsp+70h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v29 = std::forward<unsigned int &>(args_11);
    v28 = (char (*)[13])std::forward<char const(&)[13]>(args_10);
    v16 = std::forward<unsigned int &>(args_9);
    v17 = std::forward<char const(&)[15]>(args_8);
    v18 = std::forward<unsigned int &>(args_7);
    v19 = std::forward<char const(&)[21]>(args_6);
    v20 = std::forward<unsigned int &>(args_5);
    v27 = std::forward<char const(&)[17]>(args_4);
    v26 = std::forward<std::string &>(args_3);
    v25 = std::forward<char const(&)[12]>(a6);
    v24 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v21 = (const char *)std::forward<char const(&)[13]>(a4);
    std::string::basic_string<std::allocator<char>>(&v35, v21, &__a);
    v15 = getRequestParam<std::string,char const(&)[12],std::string&,char const(&)[17],unsigned int &,char const(&)[21],unsigned int &,char const(&)[15],unsigned int &,char const(&)[13],unsigned int &>(
            request,
            &v35,
            v24,
            v25,
            v26,
            v27,
            v20,
            v19,
            v18,
            v17,
            v16,
            v28,
            v29,
            v23,
            v24,
            (const char (*)[17])v25,
            (unsigned int *)v26,
            (const char (*)[21])v27,
            (unsigned int *)v28,
            (const char (*)[15])v29,
            (unsigned int *)a6,
            (const char (*)[13])&a5->_M_dataplus._M_p,
            (unsigned int *)a4);
    std::string::~string(&v35);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v15;
};

// Line 69: range 000000000CDB2D82-000000000CDB2ED3
__int64 __fastcall getRequestParam<unsigned int,char const(&)[13],std::string &,char const(&)[14],unsigned int &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[13]>::type *a4,
        std::string *a5,
        std::remove_reference<char const (&)[14]>::type *a6,
        unsigned int *args_3,
        std::remove_reference<char const (&)[7]>::type *args_4,
        std::string *args_5)
{
  unsigned int v9; // ebx
  std::string *v10; // rbx
  std::remove_reference<char const (&)[7]>::type *v11; // r15
  unsigned int *v12; // r14
  std::remove_reference<char const (&)[14]>::type *v13; // r13
  std::string *v14; // r12
  const char *v15; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-54h]
  std::string v22; // [rsp+40h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v10 = std::forward<std::string &>(args_5);
    v11 = (std::remove_reference<char const (&)[7]>::type *)std::forward<char const(&)[7]>(args_4);
    v12 = std::forward<unsigned int &>(args_3);
    v13 = (std::remove_reference<char const (&)[14]>::type *)std::forward<char const(&)[14]>(a6);
    v14 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v15 = (const char *)std::forward<char const(&)[13]>(a4);
    std::string::basic_string<std::allocator<char>>(&v22, v15, &__a);
    v9 = getRequestParam<std::string,char const(&)[14],unsigned int &,char const(&)[7],std::string&>(
           request,
           &v22,
           v14,
           v13,
           v12,
           v11,
           v10);
    std::string::~string(&v22);
    std::allocator<char>::~allocator(&__a);
  }
  return v9;
};

// Line 69: range 000000000CDB2C6E-000000000CDB2D81
__int64 __fastcall getRequestParam<unsigned int,char const(&)[13],std::string &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[13]>::type *a4,
        std::string *a5,
        std::remove_reference<char const (&)[7]>::type *a6,
        std::string *args_3)
{
  unsigned int v7; // ebx
  std::string *v8; // r13
  std::remove_reference<char const (&)[7]>::type *v9; // r12
  std::string *v10; // rbx
  const char *v11; // rax
  const char (*v12)[7]; // r9
  std::allocator<char> __a; // [rsp+3Bh] [rbp-45h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-44h]
  std::string v19; // [rsp+40h] [rbp-40h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v8 = std::forward<std::string &>(args_3);
    v9 = (std::remove_reference<char const (&)[7]>::type *)std::forward<char const(&)[7]>(a6);
    v10 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v11 = (const char *)std::forward<char const(&)[13]>(a4);
    std::string::basic_string<std::allocator<char>>(&v19, v11, &__a);
    v7 = getRequestParam<std::string,char const(&)[7],std::string&>(request, &v19, v10, v9, v8, v12);
    std::string::~string(&v19);
    std::allocator<char>::~allocator(&__a);
  }
  return v7;
};

// Line 69: range 000000000CD5BE0F-000000000CD5BF60
__int64 __fastcall getRequestParam<unsigned int,char const(&)[13],unsigned int &,char const(&)[8],unsigned int &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[13]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[8]>::type *a6,
        unsigned int *args_3,
        std::remove_reference<char const (&)[7]>::type *args_4,
        std::string *args_5)
{
  ApiRetcode v9; // ebx
  std::string *v10; // rbx
  const char (*v11)[7]; // r15
  unsigned int *v12; // r14
  const char (*v13)[8]; // r13
  unsigned int *v14; // r12
  const char *v15; // rax
  const char (*v17)[8]; // [rsp-8h] [rbp-98h]
  std::allocator<char> __a; // [rsp+3Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-54h]
  std::string v23; // [rsp+40h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v10 = std::forward<std::string &>(args_5);
    v11 = std::forward<char const(&)[7]>(args_4);
    v12 = std::forward<unsigned int &>(args_3);
    v13 = std::forward<char const(&)[8]>(a6);
    v14 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v15 = (const char *)std::forward<char const(&)[13]>(a4);
    std::string::basic_string<std::allocator<char>>(&v23, v15, &__a);
    v9 = getRequestParam<unsigned int,char const(&)[8],unsigned int &,char const(&)[7],std::string &>(
           request,
           &v23,
           v14,
           v13,
           v12,
           v11,
           v10,
           v17,
           (unsigned int *)a6,
           (const char (*)[7])a5,
           (std::string *)a4);
    std::string::~string(&v23);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v9;
};

// Line 69: range 000000000CDBA7CA-000000000CDBA8B0
__int64 __fastcall getRequestParam<unsigned int,char const(&)[13],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[13]>::type *a4,
        unsigned int *a5,
        const char (*args_0)[13])
{
  ApiRetcode v6; // ebx
  unsigned int *v7; // rbx
  const char *v8; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-35h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-34h]
  std::string v14; // [rsp+40h] [rbp-30h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v7 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v8 = (const char *)std::forward<char const(&)[13]>(a4);
    std::string::basic_string<std::allocator<char>>(&v14, v8, &__a);
    v6 = getRequestParam<unsigned int>(request, &v14, v7);
    std::string::~string(&v14);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v6;
};

// Line 69: range 000000000CCD6AC7-000000000CCD6BAD
__int64 __fastcall getRequestParam<unsigned int,char const(&)[13],unsigned long &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[13]>::type *a4,
        unsigned __int64 *a5,
        const char (*args_0)[13])
{
  ApiRetcode v6; // ebx
  unsigned __int64 *v7; // rbx
  const char *v8; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-35h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-34h]
  std::string v14; // [rsp+40h] [rbp-30h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v7 = std::forward<unsigned long &>(a5);
    std::allocator<char>::allocator(&__a);
    v8 = (const char *)std::forward<char const(&)[13]>(a4);
    std::string::basic_string<std::allocator<char>>(&v14, v8, &__a);
    v6 = getRequestParam<unsigned long>(request, &v14, v7);
    std::string::~string(&v14);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v6;
};

// Line 69: range 000000000CDB2ED4-000000000CDB3025
__int64 __fastcall getRequestParam<unsigned int,char const(&)[14],std::string &,char const(&)[6],int &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[14]>::type *a4,
        std::string *a5,
        std::remove_reference<char const (&)[6]>::type *a6,
        int *args_3,
        std::remove_reference<char const (&)[7]>::type *args_4,
        std::string *args_5)
{
  unsigned int v9; // ebx
  std::string *v10; // rbx
  std::remove_reference<char const (&)[7]>::type *v11; // r15
  int *v12; // r14
  std::remove_reference<char const (&)[6]>::type *v13; // r13
  std::string *v14; // r12
  const char *v15; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-54h]
  std::string v22; // [rsp+40h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v10 = std::forward<std::string &>(args_5);
    v11 = (std::remove_reference<char const (&)[7]>::type *)std::forward<char const(&)[7]>(args_4);
    v12 = std::forward<int &>(args_3);
    v13 = (std::remove_reference<char const (&)[6]>::type *)std::forward<char const(&)[6]>(a6);
    v14 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v15 = (const char *)std::forward<char const(&)[14]>(a4);
    std::string::basic_string<std::allocator<char>>(&v22, v15, &__a);
    v9 = getRequestParam<std::string,char const(&)[6],int &,char const(&)[7],std::string&>(
           request,
           &v22,
           v14,
           v13,
           v12,
           v11,
           v10);
    std::string::~string(&v22);
    std::allocator<char>::~allocator(&__a);
  }
  return v9;
};

// Line 69: range 000000000CCD1B02-000000000CCD1C53
__int64 __fastcall getRequestParam<unsigned int,char const(&)[14],unsigned int &,char const(&)[16],std::string &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[14]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[16]>::type *a6,
        std::string *args_3,
        std::remove_reference<char const (&)[7]>::type *args_4,
        std::string *args_5)
{
  ApiRetcode v9; // ebx
  std::string *v10; // rbx
  const char (*v11)[7]; // r15
  std::string *v12; // r14
  const char (*v13)[16]; // r13
  unsigned int *v14; // r12
  const char *v15; // rax
  const char (*v17)[16]; // [rsp-8h] [rbp-98h]
  std::allocator<char> __a; // [rsp+3Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-54h]
  std::string v23; // [rsp+40h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v10 = std::forward<std::string &>(args_5);
    v11 = std::forward<char const(&)[7]>(args_4);
    v12 = std::forward<std::string &>(args_3);
    v13 = std::forward<char const(&)[16]>(a6);
    v14 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v15 = (const char *)std::forward<char const(&)[14]>(a4);
    std::string::basic_string<std::allocator<char>>(&v23, v15, &__a);
    v9 = getRequestParam<unsigned int,char const(&)[16],std::string &,char const(&)[7],std::string &>(
           request,
           &v23,
           v14,
           v13,
           v12,
           v11,
           v10,
           v17,
           (std::string *)a6,
           (const char (*)[7])a5,
           (std::string *)a4);
    std::string::~string(&v23);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v9;
};

// Line 69: range 000000000CD5FC12-000000000CD5FD63
__int64 __fastcall getRequestParam<unsigned int,char const(&)[14],unsigned int &,char const(&)[17],unsigned int &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[14]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[17]>::type *a6,
        unsigned int *args_3,
        std::remove_reference<char const (&)[7]>::type *args_4,
        std::string *args_5)
{
  ApiRetcode v9; // ebx
  std::string *v10; // rbx
  const char (*v11)[7]; // r15
  unsigned int *v12; // r14
  const char (*v13)[17]; // r13
  unsigned int *v14; // r12
  const char *v15; // rax
  const char (*v17)[17]; // [rsp-8h] [rbp-98h]
  std::allocator<char> __a; // [rsp+3Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-54h]
  std::string v23; // [rsp+40h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v10 = std::forward<std::string &>(args_5);
    v11 = std::forward<char const(&)[7]>(args_4);
    v12 = std::forward<unsigned int &>(args_3);
    v13 = std::forward<char const(&)[17]>(a6);
    v14 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v15 = (const char *)std::forward<char const(&)[14]>(a4);
    std::string::basic_string<std::allocator<char>>(&v23, v15, &__a);
    v9 = getRequestParam<unsigned int,char const(&)[17],unsigned int &,char const(&)[7],std::string &>(
           request,
           &v23,
           v14,
           v13,
           v12,
           v11,
           v10,
           v17,
           (unsigned int *)a6,
           (const char (*)[7])a5,
           (std::string *)a4);
    std::string::~string(&v23);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v9;
};

// Line 69: range 000000000CCCFFF6-000000000CCD0147
__int64 __fastcall getRequestParam<unsigned int,char const(&)[14],unsigned int &,char const(&)[6],int &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[14]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[6]>::type *a6,
        int *args_3,
        std::remove_reference<char const (&)[7]>::type *args_4,
        std::string *args_5)
{
  ApiRetcode v9; // ebx
  std::string *v10; // rbx
  const char (*v11)[7]; // r15
  int *v12; // r14
  const char (*v13)[6]; // r13
  unsigned int *v14; // r12
  const char *v15; // rax
  const char (*v17)[6]; // [rsp-8h] [rbp-98h]
  std::allocator<char> __a; // [rsp+3Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-54h]
  std::string v23; // [rsp+40h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v10 = std::forward<std::string &>(args_5);
    v11 = std::forward<char const(&)[7]>(args_4);
    v12 = std::forward<int &>(args_3);
    v13 = std::forward<char const(&)[6]>(a6);
    v14 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v15 = (const char *)std::forward<char const(&)[14]>(a4);
    std::string::basic_string<std::allocator<char>>(&v23, v15, &__a);
    v9 = getRequestParam<unsigned int,char const(&)[6],int &,char const(&)[7],std::string &>(
           request,
           &v23,
           v14,
           v13,
           v12,
           v11,
           v10,
           v17,
           (int *)a6,
           (const char (*)[7])a5,
           (std::string *)a4);
    std::string::~string(&v23);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v9;
};

// Line 69: range 000000000CCC924C-000000000CCC935F
__int64 __fastcall getRequestParam<unsigned int,char const(&)[14],unsigned int &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[14]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[7]>::type *a6,
        std::string *args_3)
{
  ApiRetcode v7; // ebx
  std::string *v8; // r13
  const char (*v9)[7]; // r12
  unsigned int *v10; // rbx
  const char *v11; // rax
  const char (*v12)[7]; // r9
  std::allocator<char> __a; // [rsp+3Bh] [rbp-45h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-44h]
  std::string v19; // [rsp+40h] [rbp-40h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v8 = std::forward<std::string &>(args_3);
    v9 = std::forward<char const(&)[7]>(a6);
    v10 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v11 = (const char *)std::forward<char const(&)[14]>(a4);
    std::string::basic_string<std::allocator<char>>(&v19, v11, &__a);
    v7 = getRequestParam<unsigned int,char const(&)[7],std::string &>(
           request,
           &v19,
           v10,
           v9,
           v8,
           v12,
           (std::string *)a6);
    std::string::~string(&v19);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v7;
};

// Line 69: range 000000000CCD30B5-000000000CCD3206
__int64 __fastcall getRequestParam<unsigned int,char const(&)[15],std::string &,char const(&)[8],unsigned int &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[15]>::type *a4,
        std::string *a5,
        std::remove_reference<char const (&)[8]>::type *a6,
        unsigned int *args_3,
        std::remove_reference<char const (&)[7]>::type *args_4,
        std::string *args_5)
{
  unsigned int v9; // ebx
  std::string *v10; // rbx
  std::remove_reference<char const (&)[7]>::type *v11; // r15
  unsigned int *v12; // r14
  std::remove_reference<char const (&)[8]>::type *v13; // r13
  std::string *v14; // r12
  const char *v15; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-54h]
  std::string v22; // [rsp+40h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v10 = std::forward<std::string &>(args_5);
    v11 = (std::remove_reference<char const (&)[7]>::type *)std::forward<char const(&)[7]>(args_4);
    v12 = std::forward<unsigned int &>(args_3);
    v13 = (std::remove_reference<char const (&)[8]>::type *)std::forward<char const(&)[8]>(a6);
    v14 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v15 = (const char *)std::forward<char const(&)[15]>(a4);
    std::string::basic_string<std::allocator<char>>(&v22, v15, &__a);
    v9 = getRequestParam<std::string,char const(&)[8],unsigned int &,char const(&)[7],std::string&>(
           request,
           &v22,
           v14,
           v13,
           v12,
           v11,
           v10);
    std::string::~string(&v22);
    std::allocator<char>::~allocator(&__a);
  }
  return v9;
};

// Line 69: range 000000000CDB239F-000000000CDB24B2
__int64 __fastcall getRequestParam<unsigned int,char const(&)[15],unsigned int &,char const(&)[10],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[15]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[10]>::type *a6,
        unsigned int *args_3)
{
  unsigned int v7; // ebx
  unsigned int *v8; // r13
  std::remove_reference<char const (&)[10]>::type *v9; // r12
  unsigned int *v10; // rbx
  const char *v11; // rax
  const char (*v12)[10]; // r9
  std::allocator<char> __a; // [rsp+3Bh] [rbp-45h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-44h]
  std::string v19; // [rsp+40h] [rbp-40h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v8 = std::forward<unsigned int &>(args_3);
    v9 = (std::remove_reference<char const (&)[10]>::type *)std::forward<char const(&)[10]>(a6);
    v10 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v11 = (const char *)std::forward<char const(&)[15]>(a4);
    std::string::basic_string<std::allocator<char>>(&v19, v11, &__a);
    v7 = getRequestParam<unsigned int,char const(&)[10],unsigned int &>(request, &v19, v10, v9, v8, v12);
    std::string::~string(&v19);
    std::allocator<char>::~allocator(&__a);
  }
  return v7;
};

// Line 69: range 000000000CD5C55F-000000000CD5C6B0
__int64 __fastcall getRequestParam<unsigned int,char const(&)[15],unsigned int &,char const(&)[14],unsigned int &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[15]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[14]>::type *a6,
        unsigned int *args_3,
        std::remove_reference<char const (&)[7]>::type *args_4,
        std::string *args_5)
{
  unsigned int v9; // ebx
  std::string *v10; // rbx
  std::remove_reference<char const (&)[7]>::type *v11; // r15
  unsigned int *v12; // r14
  std::remove_reference<char const (&)[14]>::type *v13; // r13
  unsigned int *v14; // r12
  const char *v15; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-54h]
  std::string v22; // [rsp+40h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v10 = std::forward<std::string &>(args_5);
    v11 = (std::remove_reference<char const (&)[7]>::type *)std::forward<char const(&)[7]>(args_4);
    v12 = std::forward<unsigned int &>(args_3);
    v13 = (std::remove_reference<char const (&)[14]>::type *)std::forward<char const(&)[14]>(a6);
    v14 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v15 = (const char *)std::forward<char const(&)[15]>(a4);
    std::string::basic_string<std::allocator<char>>(&v22, v15, &__a);
    v9 = getRequestParam<unsigned int,char const(&)[14],unsigned int &,char const(&)[7],std::string &>(
           request,
           &v22,
           v14,
           v13,
           v12,
           v11,
           v10);
    std::string::~string(&v22);
    std::allocator<char>::~allocator(&__a);
  }
  return v9;
};

// Line 69: range 000000000CD59E72-000000000CD59F58
__int64 __fastcall getRequestParam<unsigned int,char const(&)[15],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[15]>::type *a4,
        unsigned int *a5,
        const char (*args_0)[15])
{
  ApiRetcode v6; // ebx
  unsigned int *v7; // rbx
  const char *v8; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-35h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-34h]
  std::string v14; // [rsp+40h] [rbp-30h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v7 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v8 = (const char *)std::forward<char const(&)[15]>(a4);
    std::string::basic_string<std::allocator<char>>(&v14, v8, &__a);
    v6 = getRequestParam<unsigned int>(request, &v14, v7);
    std::string::~string(&v14);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v6;
};

// Line 69: range 000000000CD58DC8-000000000CD58F19
__int64 __fastcall getRequestParam<unsigned int,char const(&)[16],std::string &,char const(&)[14],std::string &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[16]>::type *a4,
        std::string *a5,
        std::remove_reference<char const (&)[14]>::type *a6,
        std::string *args_3,
        std::remove_reference<char const (&)[7]>::type *args_4,
        std::string *args_5)
{
  unsigned int v9; // ebx
  std::string *v10; // rbx
  std::remove_reference<char const (&)[7]>::type *v11; // r15
  std::string *v12; // r14
  std::remove_reference<char const (&)[14]>::type *v13; // r13
  std::string *v14; // r12
  const char *v15; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-54h]
  std::string v22; // [rsp+40h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v10 = std::forward<std::string &>(args_5);
    v11 = (std::remove_reference<char const (&)[7]>::type *)std::forward<char const(&)[7]>(args_4);
    v12 = std::forward<std::string &>(args_3);
    v13 = (std::remove_reference<char const (&)[14]>::type *)std::forward<char const(&)[14]>(a6);
    v14 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v15 = (const char *)std::forward<char const(&)[16]>(a4);
    std::string::basic_string<std::allocator<char>>(&v22, v15, &__a);
    v9 = getRequestParam<std::string,char const(&)[14],std::string&,char const(&)[7],std::string&>(
           request,
           &v22,
           v14,
           v13,
           v12,
           v11,
           v10);
    std::string::~string(&v22);
    std::allocator<char>::~allocator(&__a);
  }
  return v9;
};

// Line 69: range 000000000CD5B3AF-000000000CD5B4C2
__int64 __fastcall getRequestParam<unsigned int,char const(&)[16],std::string &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[16]>::type *a4,
        std::string *a5,
        std::remove_reference<char const (&)[7]>::type *a6,
        std::string *args_3)
{
  unsigned int v7; // ebx
  std::string *v8; // r13
  std::remove_reference<char const (&)[7]>::type *v9; // r12
  std::string *v10; // rbx
  const char *v11; // rax
  const char (*v12)[7]; // r9
  std::allocator<char> __a; // [rsp+3Bh] [rbp-45h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-44h]
  std::string v19; // [rsp+40h] [rbp-40h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v8 = std::forward<std::string &>(args_3);
    v9 = (std::remove_reference<char const (&)[7]>::type *)std::forward<char const(&)[7]>(a6);
    v10 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v11 = (const char *)std::forward<char const(&)[16]>(a4);
    std::string::basic_string<std::allocator<char>>(&v19, v11, &__a);
    v7 = getRequestParam<std::string,char const(&)[7],std::string&>(request, &v19, v10, v9, v8, v12);
    std::string::~string(&v19);
    std::allocator<char>::~allocator(&__a);
  }
  return v7;
};

// Line 69: range 000000000CCD4A4B-000000000CCD4B9C
__int64 __fastcall getRequestParam<unsigned int,char const(&)[16],unsigned int &,char const(&)[12],unsigned int &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[16]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[12]>::type *a6,
        unsigned int *args_3,
        std::remove_reference<char const (&)[7]>::type *args_4,
        std::string *args_5)
{
  unsigned int v9; // ebx
  std::string *v10; // rbx
  std::remove_reference<char const (&)[7]>::type *v11; // r15
  unsigned int *v12; // r14
  std::remove_reference<char const (&)[12]>::type *v13; // r13
  unsigned int *v14; // r12
  const char *v15; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-54h]
  std::string v22; // [rsp+40h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v10 = std::forward<std::string &>(args_5);
    v11 = (std::remove_reference<char const (&)[7]>::type *)std::forward<char const(&)[7]>(args_4);
    v12 = std::forward<unsigned int &>(args_3);
    v13 = (std::remove_reference<char const (&)[12]>::type *)std::forward<char const(&)[12]>(a6);
    v14 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v15 = (const char *)std::forward<char const(&)[16]>(a4);
    std::string::basic_string<std::allocator<char>>(&v22, v15, &__a);
    v9 = getRequestParam<unsigned int,char const(&)[12],unsigned int &,char const(&)[7],std::string &>(
           request,
           &v22,
           v14,
           v13,
           v12,
           v11,
           v10);
    std::string::~string(&v22);
    std::allocator<char>::~allocator(&__a);
  }
  return v9;
};

// Line 69: range 000000000CD5BCBD-000000000CD5BE0E
__int64 __fastcall getRequestParam<unsigned int,char const(&)[16],unsigned int &,char const(&)[13],unsigned int &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[16]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[13]>::type *a6,
        unsigned int *args_3,
        std::remove_reference<char const (&)[7]>::type *args_4,
        std::string *args_5)
{
  ApiRetcode v9; // ebx
  std::string *v10; // rbx
  const char (*v11)[7]; // r15
  unsigned int *v12; // r14
  const char (*v13)[13]; // r13
  unsigned int *v14; // r12
  const char *v15; // rax
  const char (*v17)[13]; // [rsp-8h] [rbp-98h]
  std::allocator<char> __a; // [rsp+3Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-54h]
  std::string v23; // [rsp+40h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v10 = std::forward<std::string &>(args_5);
    v11 = std::forward<char const(&)[7]>(args_4);
    v12 = std::forward<unsigned int &>(args_3);
    v13 = std::forward<char const(&)[13]>(a6);
    v14 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v15 = (const char *)std::forward<char const(&)[16]>(a4);
    std::string::basic_string<std::allocator<char>>(&v23, v15, &__a);
    v9 = getRequestParam<unsigned int,char const(&)[13],unsigned int &,char const(&)[7],std::string &>(
           request,
           &v23,
           v14,
           v13,
           v12,
           v11,
           v10,
           v17,
           (unsigned int *)a6,
           (const char (*)[7])a5,
           (std::string *)a4);
    std::string::~string(&v23);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v9;
};

// Line 69: range 000000000CCC8330-000000000CCC8443
__int64 __fastcall getRequestParam<unsigned int,char const(&)[16],unsigned int &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[16]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[7]>::type *a6,
        std::string *args_3)
{
  ApiRetcode v7; // ebx
  std::string *v8; // r13
  const char (*v9)[7]; // r12
  unsigned int *v10; // rbx
  const char *v11; // rax
  const char (*v12)[7]; // r9
  std::allocator<char> __a; // [rsp+3Bh] [rbp-45h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-44h]
  std::string v19; // [rsp+40h] [rbp-40h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v8 = std::forward<std::string &>(args_3);
    v9 = std::forward<char const(&)[7]>(a6);
    v10 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v11 = (const char *)std::forward<char const(&)[16]>(a4);
    std::string::basic_string<std::allocator<char>>(&v19, v11, &__a);
    v7 = getRequestParam<unsigned int,char const(&)[7],std::string &>(
           request,
           &v19,
           v10,
           v9,
           v8,
           v12,
           (std::string *)a6);
    std::string::~string(&v19);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v7;
};

// Line 69: range 000000000CDBE1D9-000000000CDBE2BF
__int64 __fastcall getRequestParam<unsigned int,char const(&)[16],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[16]>::type *a4,
        unsigned int *a5,
        const char (*args_0)[16])
{
  ApiRetcode v6; // ebx
  unsigned int *v7; // rbx
  const char *v8; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-35h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-34h]
  std::string v14; // [rsp+40h] [rbp-30h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v7 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v8 = (const char *)std::forward<char const(&)[16]>(a4);
    std::string::basic_string<std::allocator<char>>(&v14, v8, &__a);
    v6 = getRequestParam<unsigned int>(request, &v14, v7);
    std::string::~string(&v14);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v6;
};

// Line 69: range 000000000CDBD39A-000000000CDBD4AD
__int64 __fastcall getRequestParam<unsigned int,char const(&)[17],unsigned int &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[17]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[7]>::type *a6,
        std::string *args_3)
{
  ApiRetcode v7; // ebx
  std::string *v8; // r13
  const char (*v9)[7]; // r12
  unsigned int *v10; // rbx
  const char *v11; // rax
  const char (*v12)[7]; // r9
  std::allocator<char> __a; // [rsp+3Bh] [rbp-45h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-44h]
  std::string v19; // [rsp+40h] [rbp-40h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v8 = std::forward<std::string &>(args_3);
    v9 = std::forward<char const(&)[7]>(a6);
    v10 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v11 = (const char *)std::forward<char const(&)[17]>(a4);
    std::string::basic_string<std::allocator<char>>(&v19, v11, &__a);
    v7 = getRequestParam<unsigned int,char const(&)[7],std::string &>(
           request,
           &v19,
           v10,
           v9,
           v8,
           v12,
           (std::string *)a6);
    std::string::~string(&v19);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v7;
};

// Line 69: range 000000000CDBD4AE-000000000CDBD594
__int64 __fastcall getRequestParam<unsigned int,char const(&)[18],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[18]>::type *a4,
        unsigned int *a5,
        const char (*args_0)[18])
{
  ApiRetcode v6; // ebx
  unsigned int *v7; // rbx
  const char *v8; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-35h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-34h]
  std::string v14; // [rsp+40h] [rbp-30h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v7 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v8 = (const char *)std::forward<char const(&)[18]>(a4);
    std::string::basic_string<std::allocator<char>>(&v14, v8, &__a);
    v6 = getRequestParam<unsigned int>(request, &v14, v7);
    std::string::~string(&v14);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v6;
};

// Line 69: range 000000000CD57623-000000000CD57736
__int64 __fastcall getRequestParam<unsigned int,char const(&)[4],std::string &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[4]>::type *a4,
        std::string *a5,
        std::remove_reference<char const (&)[7]>::type *a6,
        std::string *args_3)
{
  unsigned int v7; // ebx
  std::string *v8; // r13
  std::remove_reference<char const (&)[7]>::type *v9; // r12
  std::string *v10; // rbx
  const char *v11; // rax
  const char (*v12)[7]; // r9
  std::allocator<char> __a; // [rsp+3Bh] [rbp-45h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-44h]
  std::string v19; // [rsp+40h] [rbp-40h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v8 = std::forward<std::string &>(args_3);
    v9 = (std::remove_reference<char const (&)[7]>::type *)std::forward<char const(&)[7]>(a6);
    v10 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v11 = (const char *)std::forward<char const(&)[4]>(a4);
    std::string::basic_string<std::allocator<char>>(&v19, v11, &__a);
    v7 = getRequestParam<std::string,char const(&)[7],std::string&>(request, &v19, v10, v9, v8, v12);
    std::string::~string(&v19);
    std::allocator<char>::~allocator(&__a);
  }
  return v7;
};

// Line 69: range 000000000CCCEBF7-000000000CCCED48
__int64 __fastcall getRequestParam<unsigned int,char const(&)[4],unsigned int &,char const(&)[14],unsigned int &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[4]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[14]>::type *a6,
        unsigned int *args_3,
        std::remove_reference<char const (&)[7]>::type *args_4,
        std::string *args_5)
{
  unsigned int v9; // ebx
  std::string *v10; // rbx
  std::remove_reference<char const (&)[7]>::type *v11; // r15
  unsigned int *v12; // r14
  std::remove_reference<char const (&)[14]>::type *v13; // r13
  unsigned int *v14; // r12
  const char *v15; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-54h]
  std::string v22; // [rsp+40h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v10 = std::forward<std::string &>(args_5);
    v11 = (std::remove_reference<char const (&)[7]>::type *)std::forward<char const(&)[7]>(args_4);
    v12 = std::forward<unsigned int &>(args_3);
    v13 = (std::remove_reference<char const (&)[14]>::type *)std::forward<char const(&)[14]>(a6);
    v14 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v15 = (const char *)std::forward<char const(&)[4]>(a4);
    std::string::basic_string<std::allocator<char>>(&v22, v15, &__a);
    v9 = getRequestParam<unsigned int,char const(&)[14],unsigned int &,char const(&)[7],std::string &>(
           request,
           &v22,
           v14,
           v13,
           v12,
           v11,
           v10);
    std::string::~string(&v22);
    std::allocator<char>::~allocator(&__a);
  }
  return v9;
};

// Line 69: range 000000000CCD2C42-000000000CCD2D55
__int64 __fastcall getRequestParam<unsigned int,char const(&)[4],unsigned int &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[4]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[7]>::type *a6,
        std::string *args_3)
{
  ApiRetcode v7; // ebx
  std::string *v8; // r13
  const char (*v9)[7]; // r12
  unsigned int *v10; // rbx
  const char *v11; // rax
  const char (*v12)[7]; // r9
  std::allocator<char> __a; // [rsp+3Bh] [rbp-45h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-44h]
  std::string v19; // [rsp+40h] [rbp-40h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v8 = std::forward<std::string &>(args_3);
    v9 = std::forward<char const(&)[7]>(a6);
    v10 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v11 = (const char *)std::forward<char const(&)[4]>(a4);
    std::string::basic_string<std::allocator<char>>(&v19, v11, &__a);
    v7 = getRequestParam<unsigned int,char const(&)[7],std::string &>(
           request,
           &v19,
           v10,
           v9,
           v8,
           v12,
           (std::string *)a6);
    std::string::~string(&v19);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v7;
};

// Line 69: range 000000000CDBB16D-000000000CDBB2F0
__int64 __fastcall getRequestParam<unsigned int,char const(&)[6],float &,char const(&)[6],float &,char const(&)[6],float &,char const(&)[6],float &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[6]>::type *a4,
        float *a5,
        std::remove_reference<char const (&)[6]>::type *a6,
        float *args_3,
        std::remove_reference<char const (&)[6]>::type *args_4,
        float *args_5,
        std::remove_reference<char const (&)[6]>::type *args_6,
        float *args_7)
{
  unsigned int v11; // ebx
  float *v12; // r13
  std::remove_reference<char const (&)[6]>::type *v13; // r12
  float *v14; // rbx
  std::remove_reference<char const (&)[6]>::type *v15; // r15
  float *v16; // r14
  const char *v17; // rax
  float *v19; // [rsp+0h] [rbp-A0h]
  char (*v20)[6]; // [rsp+8h] [rbp-98h]
  std::allocator<char> __a; // [rsp+4Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+4Ch] [rbp-54h]
  std::string v26; // [rsp+50h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v12 = std::forward<float &>(args_7);
    v13 = (std::remove_reference<char const (&)[6]>::type *)std::forward<char const(&)[6]>(args_6);
    v14 = std::forward<float &>(args_5);
    v20 = (char (*)[6])std::forward<char const(&)[6]>(args_4);
    v19 = std::forward<float &>(args_3);
    v15 = (std::remove_reference<char const (&)[6]>::type *)std::forward<char const(&)[6]>(a6);
    v16 = std::forward<float &>(a5);
    std::allocator<char>::allocator(&__a);
    v17 = (const char *)std::forward<char const(&)[6]>(a4);
    std::string::basic_string<std::allocator<char>>(&v26, v17, &__a);
    v11 = getRequestParam<float,char const(&)[6],float &,char const(&)[6],float &,char const(&)[6],float &>(
            request,
            &v26,
            v16,
            v15,
            v19,
            v20,
            v14,
            v13,
            v12);
    std::string::~string(&v26);
    std::allocator<char>::~allocator(&__a);
  }
  return v11;
};

// Line 69: range 000000000CD5A5F4-000000000CD5A707
__int64 __fastcall getRequestParam<unsigned int,char const(&)[6],int &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[6]>::type *a4,
        int *a5,
        std::remove_reference<char const (&)[7]>::type *a6,
        std::string *args_3)
{
  ApiRetcode v7; // ebx
  std::string *v8; // r13
  const char (*v9)[7]; // r12
  int *v10; // rbx
  const char *v11; // rax
  const char (*v12)[7]; // r9
  std::allocator<char> __a; // [rsp+3Bh] [rbp-45h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-44h]
  std::string v19; // [rsp+40h] [rbp-40h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v8 = std::forward<std::string &>(args_3);
    v9 = std::forward<char const(&)[7]>(a6);
    v10 = std::forward<int &>(a5);
    std::allocator<char>::allocator(&__a);
    v11 = (const char *)std::forward<char const(&)[6]>(a4);
    std::string::basic_string<std::allocator<char>>(&v19, v11, &__a);
    v7 = getRequestParam<int,char const(&)[7],std::string &>(request, &v19, v10, v9, v8, v12, (std::string *)a6);
    std::string::~string(&v19);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v7;
};

// Line 69: range 000000000CE490F8-000000000CE49249
__int64 __fastcall getRequestParam<unsigned int,char const(&)[6],unsigned int &,char const(&)[10],bool &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[6]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[10]>::type *a6,
        bool *args_3,
        std::remove_reference<char const (&)[7]>::type *args_4,
        std::string *args_5)
{
  unsigned int v9; // ebx
  std::string *v10; // rbx
  std::remove_reference<char const (&)[7]>::type *v11; // r15
  bool *v12; // r14
  std::remove_reference<char const (&)[10]>::type *v13; // r13
  unsigned int *v14; // r12
  const char *v15; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-54h]
  std::string v22; // [rsp+40h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v10 = std::forward<std::string &>(args_5);
    v11 = (std::remove_reference<char const (&)[7]>::type *)std::forward<char const(&)[7]>(args_4);
    v12 = std::forward<bool &>(args_3);
    v13 = (std::remove_reference<char const (&)[10]>::type *)std::forward<char const(&)[10]>(a6);
    v14 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v15 = (const char *)std::forward<char const(&)[6]>(a4);
    std::string::basic_string<std::allocator<char>>(&v22, v15, &__a);
    v9 = getRequestParam<unsigned int,char const(&)[10],bool &,char const(&)[7],std::string &>(
           request,
           &v22,
           v14,
           v13,
           v12,
           v11,
           v10);
    std::string::~string(&v22);
    std::allocator<char>::~allocator(&__a);
  }
  return v9;
};

// Line 69: range 000000000CD5C44B-000000000CD5C55E
__int64 __fastcall getRequestParam<unsigned int,char const(&)[6],unsigned int &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[6]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[7]>::type *a6,
        std::string *args_3)
{
  ApiRetcode v7; // ebx
  std::string *v8; // r13
  const char (*v9)[7]; // r12
  unsigned int *v10; // rbx
  const char *v11; // rax
  const char (*v12)[7]; // r9
  std::allocator<char> __a; // [rsp+3Bh] [rbp-45h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-44h]
  std::string v19; // [rsp+40h] [rbp-40h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v8 = std::forward<std::string &>(args_3);
    v9 = std::forward<char const(&)[7]>(a6);
    v10 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v11 = (const char *)std::forward<char const(&)[6]>(a4);
    std::string::basic_string<std::allocator<char>>(&v19, v11, &__a);
    v7 = getRequestParam<unsigned int,char const(&)[7],std::string &>(
           request,
           &v19,
           v10,
           v9,
           v8,
           v12,
           (std::string *)a6);
    std::string::~string(&v19);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v7;
};

// Line 69: range 000000000CDBE0F2-000000000CDBE1D8
__int64 __fastcall getRequestParam<unsigned int,char const(&)[6],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[6]>::type *a4,
        unsigned int *a5,
        const char (*args_0)[6])
{
  ApiRetcode v6; // ebx
  unsigned int *v7; // rbx
  const char *v8; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-35h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-34h]
  std::string v14; // [rsp+40h] [rbp-30h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v7 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v8 = (const char *)std::forward<char const(&)[6]>(a4);
    std::string::basic_string<std::allocator<char>>(&v14, v8, &__a);
    v6 = getRequestParam<unsigned int>(request, &v14, v7);
    std::string::~string(&v14);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v6;
};

// Line 69: range 000000000CD5A4E0-000000000CD5A5F3
__int64 __fastcall getRequestParam<unsigned int,char const(&)[7],bool &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[7]>::type *a4,
        bool *a5,
        std::remove_reference<char const (&)[7]>::type *a6,
        std::string *args_3)
{
  unsigned int v7; // ebx
  std::string *v8; // r13
  std::remove_reference<char const (&)[7]>::type *v9; // r12
  bool *v10; // rbx
  const char *v11; // rax
  const char (*v12)[7]; // r9
  std::allocator<char> __a; // [rsp+3Bh] [rbp-45h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-44h]
  std::string v19; // [rsp+40h] [rbp-40h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v8 = std::forward<std::string &>(args_3);
    v9 = (std::remove_reference<char const (&)[7]>::type *)std::forward<char const(&)[7]>(a6);
    v10 = std::forward<bool &>(a5);
    std::allocator<char>::allocator(&__a);
    v11 = (const char *)std::forward<char const(&)[7]>(a4);
    std::string::basic_string<std::allocator<char>>(&v19, v11, &__a);
    v7 = getRequestParam<bool,char const(&)[7],std::string &>(request, &v19, v10, v9, v8, v12);
    std::string::~string(&v19);
    std::allocator<char>::~allocator(&__a);
  }
  return v7;
};

// Line 69: range 000000000CCC7948-000000000CCC7A99
__int64 __fastcall getRequestParam<unsigned int,char const(&)[7],std::string &,char const(&)[10],unsigned int &,char const(&)[11],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[7]>::type *a4,
        std::string *a5,
        std::remove_reference<char const (&)[10]>::type *a6,
        unsigned int *args_3,
        std::remove_reference<char const (&)[11]>::type *args_4,
        unsigned int *args_5)
{
  unsigned int v9; // ebx
  unsigned int *v10; // rbx
  std::remove_reference<char const (&)[11]>::type *v11; // r15
  unsigned int *v12; // r14
  std::remove_reference<char const (&)[10]>::type *v13; // r13
  std::string *v14; // r12
  const char *v15; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-54h]
  std::string v22; // [rsp+40h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v10 = std::forward<unsigned int &>(args_5);
    v11 = (std::remove_reference<char const (&)[11]>::type *)std::forward<char const(&)[11]>(args_4);
    v12 = std::forward<unsigned int &>(args_3);
    v13 = (std::remove_reference<char const (&)[10]>::type *)std::forward<char const(&)[10]>(a6);
    v14 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v15 = (const char *)std::forward<char const(&)[7]>(a4);
    std::string::basic_string<std::allocator<char>>(&v22, v15, &__a);
    v9 = getRequestParam<std::string,char const(&)[10],unsigned int &,char const(&)[11],unsigned int &>(
           request,
           &v22,
           v14,
           v13,
           v12,
           v11,
           v10);
    std::string::~string(&v22);
    std::allocator<char>::~allocator(&__a);
  }
  return v9;
};

// Line 69: range 000000000CCD9272-000000000CCD942A
__int64 __fastcall getRequestParam<unsigned int,char const(&)[7],std::string &,char const(&)[10],unsigned int &,char const(&)[12],std::string &,char const(&)[8],bool &,char const(&)[12],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[7]>::type *a4,
        std::string *a5,
        std::remove_reference<char const (&)[10]>::type *a6,
        unsigned int *args_3,
        std::remove_reference<char const (&)[12]>::type *args_4,
        std::string *args_5,
        std::remove_reference<char const (&)[8]>::type *args_6,
        bool *args_7,
        std::remove_reference<char const (&)[12]>::type *args_8,
        unsigned int *args_9)
{
  unsigned int v13; // ebx
  unsigned int *v14; // r15
  std::remove_reference<char const (&)[12]>::type *v15; // r14
  bool *v16; // r13
  std::remove_reference<char const (&)[8]>::type *v17; // r12
  std::string *v18; // rbx
  const char *v19; // rax
  std::string *v21; // [rsp+0h] [rbp-B0h]
  char (*v22)[10]; // [rsp+8h] [rbp-A8h]
  unsigned int *v23; // [rsp+10h] [rbp-A0h]
  char (*v24)[12]; // [rsp+18h] [rbp-98h]
  std::allocator<char> __a; // [rsp+5Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+5Ch] [rbp-54h]
  std::string v30; // [rsp+60h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v14 = std::forward<unsigned int &>(args_9);
    v15 = (std::remove_reference<char const (&)[12]>::type *)std::forward<char const(&)[12]>(args_8);
    v16 = std::forward<bool &>(args_7);
    v17 = (std::remove_reference<char const (&)[8]>::type *)std::forward<char const(&)[8]>(args_6);
    v18 = std::forward<std::string &>(args_5);
    v24 = (char (*)[12])std::forward<char const(&)[12]>(args_4);
    v23 = std::forward<unsigned int &>(args_3);
    v22 = (char (*)[10])std::forward<char const(&)[10]>(a6);
    v21 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v19 = (const char *)std::forward<char const(&)[7]>(a4);
    std::string::basic_string<std::allocator<char>>(&v30, v19, &__a);
    v13 = getRequestParam<std::string,char const(&)[10],unsigned int &,char const(&)[12],std::string&,char const(&)[8],bool &,char const(&)[12],unsigned int &>(
            request,
            &v30,
            v21,
            v22,
            v23,
            v24,
            v18,
            v17,
            v16,
            v15,
            v14);
    std::string::~string(&v30);
    std::allocator<char>::~allocator(&__a);
  }
  return v13;
};

// Line 69: range 000000000CCC72E7-000000000CCC746A
__int64 __fastcall getRequestParam<unsigned int,char const(&)[7],std::string &,char const(&)[10],unsigned int &,char const(&)[15],unsigned int &,char const(&)[10],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[7]>::type *a4,
        std::string *a5,
        std::remove_reference<char const (&)[10]>::type *a6,
        unsigned int *args_3,
        std::remove_reference<char const (&)[15]>::type *args_4,
        unsigned int *args_5,
        std::remove_reference<char const (&)[10]>::type *args_6,
        unsigned int *args_7)
{
  unsigned int v11; // ebx
  unsigned int *v12; // r13
  std::remove_reference<char const (&)[10]>::type *v13; // r12
  unsigned int *v14; // rbx
  std::remove_reference<char const (&)[10]>::type *v15; // r15
  std::string *v16; // r14
  const char *v17; // rax
  unsigned int *v19; // [rsp+0h] [rbp-A0h]
  char (*v20)[15]; // [rsp+8h] [rbp-98h]
  std::allocator<char> __a; // [rsp+4Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+4Ch] [rbp-54h]
  std::string v26; // [rsp+50h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v12 = std::forward<unsigned int &>(args_7);
    v13 = (std::remove_reference<char const (&)[10]>::type *)std::forward<char const(&)[10]>(args_6);
    v14 = std::forward<unsigned int &>(args_5);
    v20 = (char (*)[15])std::forward<char const(&)[15]>(args_4);
    v19 = std::forward<unsigned int &>(args_3);
    v15 = (std::remove_reference<char const (&)[10]>::type *)std::forward<char const(&)[10]>(a6);
    v16 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v17 = (const char *)std::forward<char const(&)[7]>(a4);
    std::string::basic_string<std::allocator<char>>(&v26, v17, &__a);
    v11 = getRequestParam<std::string,char const(&)[10],unsigned int &,char const(&)[15],unsigned int &,char const(&)[10],unsigned int &>(
            request,
            &v26,
            v16,
            v15,
            v19,
            v20,
            v14,
            v13,
            v12);
    std::string::~string(&v26);
    std::allocator<char>::~allocator(&__a);
  }
  return v11;
};

// Line 69: range 000000000CCD942B-000000000CCD957C
__int64 __fastcall getRequestParam<unsigned int,char const(&)[7],std::string &,char const(&)[10],unsigned int &,char const(&)[7],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[7]>::type *a4,
        std::string *a5,
        std::remove_reference<char const (&)[10]>::type *a6,
        unsigned int *args_3,
        std::remove_reference<char const (&)[7]>::type *args_4,
        unsigned int *args_5)
{
  unsigned int v9; // ebx
  unsigned int *v10; // rbx
  std::remove_reference<char const (&)[7]>::type *v11; // r15
  unsigned int *v12; // r14
  std::remove_reference<char const (&)[10]>::type *v13; // r13
  std::string *v14; // r12
  const char *v15; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-54h]
  std::string v22; // [rsp+40h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v10 = std::forward<unsigned int &>(args_5);
    v11 = (std::remove_reference<char const (&)[7]>::type *)std::forward<char const(&)[7]>(args_4);
    v12 = std::forward<unsigned int &>(args_3);
    v13 = (std::remove_reference<char const (&)[10]>::type *)std::forward<char const(&)[10]>(a6);
    v14 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v15 = (const char *)std::forward<char const(&)[7]>(a4);
    std::string::basic_string<std::allocator<char>>(&v22, v15, &__a);
    v9 = getRequestParam<std::string,char const(&)[10],unsigned int &,char const(&)[7],unsigned int &>(
           request,
           &v22,
           v14,
           v13,
           v12,
           v11,
           v10);
    std::string::~string(&v22);
    std::allocator<char>::~allocator(&__a);
  }
  return v9;
};

// Line 69: range 000000000CCD36E6-000000000CCD37F9
__int64 __fastcall getRequestParam<unsigned int,char const(&)[7],std::string &,char const(&)[10],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[7]>::type *a4,
        std::string *a5,
        std::remove_reference<char const (&)[10]>::type *a6,
        unsigned int *args_3)
{
  unsigned int v7; // ebx
  unsigned int *v8; // r13
  std::remove_reference<char const (&)[10]>::type *v9; // r12
  std::string *v10; // rbx
  const char *v11; // rax
  const char (*v12)[10]; // r9
  std::allocator<char> __a; // [rsp+3Bh] [rbp-45h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-44h]
  std::string v19; // [rsp+40h] [rbp-40h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v8 = std::forward<unsigned int &>(args_3);
    v9 = (std::remove_reference<char const (&)[10]>::type *)std::forward<char const(&)[10]>(a6);
    v10 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v11 = (const char *)std::forward<char const(&)[7]>(a4);
    std::string::basic_string<std::allocator<char>>(&v19, v11, &__a);
    v7 = getRequestParam<std::string,char const(&)[10],unsigned int &>(request, &v19, v10, v9, v8, v12);
    std::string::~string(&v19);
    std::allocator<char>::~allocator(&__a);
  }
  return v7;
};

// Line 69: range 000000000CCD96CF-000000000CCD9820
__int64 __fastcall getRequestParam<unsigned int,char const(&)[7],std::string &,char const(&)[13],unsigned int &,char const(&)[16],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[7]>::type *a4,
        std::string *a5,
        std::remove_reference<char const (&)[13]>::type *a6,
        unsigned int *args_3,
        std::remove_reference<char const (&)[16]>::type *args_4,
        unsigned int *args_5)
{
  unsigned int v9; // ebx
  unsigned int *v10; // rbx
  std::remove_reference<char const (&)[16]>::type *v11; // r15
  unsigned int *v12; // r14
  std::remove_reference<char const (&)[13]>::type *v13; // r13
  std::string *v14; // r12
  const char *v15; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-54h]
  std::string v22; // [rsp+40h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v10 = std::forward<unsigned int &>(args_5);
    v11 = (std::remove_reference<char const (&)[16]>::type *)std::forward<char const(&)[16]>(args_4);
    v12 = std::forward<unsigned int &>(args_3);
    v13 = (std::remove_reference<char const (&)[13]>::type *)std::forward<char const(&)[13]>(a6);
    v14 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v15 = (const char *)std::forward<char const(&)[7]>(a4);
    std::string::basic_string<std::allocator<char>>(&v22, v15, &__a);
    v9 = getRequestParam<std::string,char const(&)[13],unsigned int &,char const(&)[16],unsigned int &>(
           request,
           &v22,
           v14,
           v13,
           v12,
           v11,
           v10);
    std::string::~string(&v22);
    std::allocator<char>::~allocator(&__a);
  }
  return v9;
};

// Line 69: range 000000000CCD9973-000000000CCD9A86
__int64 __fastcall getRequestParam<unsigned int,char const(&)[7],std::string &,char const(&)[13],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[7]>::type *a4,
        std::string *a5,
        std::remove_reference<char const (&)[13]>::type *a6,
        unsigned int *args_3)
{
  unsigned int v7; // ebx
  unsigned int *v8; // r13
  std::remove_reference<char const (&)[13]>::type *v9; // r12
  std::string *v10; // rbx
  const char *v11; // rax
  const char (*v12)[13]; // r9
  std::allocator<char> __a; // [rsp+3Bh] [rbp-45h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-44h]
  std::string v19; // [rsp+40h] [rbp-40h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v8 = std::forward<unsigned int &>(args_3);
    v9 = (std::remove_reference<char const (&)[13]>::type *)std::forward<char const(&)[13]>(a6);
    v10 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v11 = (const char *)std::forward<char const(&)[7]>(a4);
    std::string::basic_string<std::allocator<char>>(&v19, v11, &__a);
    v7 = getRequestParam<std::string,char const(&)[13],unsigned int &>(request, &v19, v10, v9, v8, v12);
    std::string::~string(&v19);
    std::allocator<char>::~allocator(&__a);
  }
  return v7;
};

// Line 69: range 000000000CCD9A87-000000000CCD9B9A
__int64 __fastcall getRequestParam<unsigned int,char const(&)[7],std::string &,char const(&)[14],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[7]>::type *a4,
        std::string *a5,
        std::remove_reference<char const (&)[14]>::type *a6,
        unsigned int *args_3)
{
  unsigned int v7; // ebx
  unsigned int *v8; // r13
  std::remove_reference<char const (&)[14]>::type *v9; // r12
  std::string *v10; // rbx
  const char *v11; // rax
  const char (*v12)[14]; // r9
  std::allocator<char> __a; // [rsp+3Bh] [rbp-45h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-44h]
  std::string v19; // [rsp+40h] [rbp-40h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v8 = std::forward<unsigned int &>(args_3);
    v9 = (std::remove_reference<char const (&)[14]>::type *)std::forward<char const(&)[14]>(a6);
    v10 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v11 = (const char *)std::forward<char const(&)[7]>(a4);
    std::string::basic_string<std::allocator<char>>(&v19, v11, &__a);
    v7 = getRequestParam<std::string,char const(&)[14],unsigned int &>(request, &v19, v10, v9, v8, v12);
    std::string::~string(&v19);
    std::allocator<char>::~allocator(&__a);
  }
  return v7;
};

// Line 69: range 000000000CCD88C2-000000000CCD8A13
__int64 __fastcall getRequestParam<unsigned int,char const(&)[7],std::string &,char const(&)[15],unsigned int &,char const(&)[18],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[7]>::type *a4,
        std::string *a5,
        std::remove_reference<char const (&)[15]>::type *a6,
        unsigned int *args_3,
        std::remove_reference<char const (&)[18]>::type *args_4,
        unsigned int *args_5)
{
  unsigned int v9; // ebx
  unsigned int *v10; // rbx
  std::remove_reference<char const (&)[18]>::type *v11; // r15
  unsigned int *v12; // r14
  std::remove_reference<char const (&)[15]>::type *v13; // r13
  std::string *v14; // r12
  const char *v15; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-54h]
  std::string v22; // [rsp+40h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v10 = std::forward<unsigned int &>(args_5);
    v11 = (std::remove_reference<char const (&)[18]>::type *)std::forward<char const(&)[18]>(args_4);
    v12 = std::forward<unsigned int &>(args_3);
    v13 = (std::remove_reference<char const (&)[15]>::type *)std::forward<char const(&)[15]>(a6);
    v14 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v15 = (const char *)std::forward<char const(&)[7]>(a4);
    std::string::basic_string<std::allocator<char>>(&v22, v15, &__a);
    v9 = getRequestParam<std::string,char const(&)[15],unsigned int &,char const(&)[18],unsigned int &>(
           request,
           &v22,
           v14,
           v13,
           v12,
           v11,
           v10);
    std::string::~string(&v22);
    std::allocator<char>::~allocator(&__a);
  }
  return v9;
};

// Line 69: range 000000000CCC7A9A-000000000CCC7BAD
__int64 __fastcall getRequestParam<unsigned int,char const(&)[7],std::string &,char const(&)[8],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[7]>::type *a4,
        std::string *a5,
        std::remove_reference<char const (&)[8]>::type *a6,
        std::string *args_3)
{
  unsigned int v7; // ebx
  std::string *v8; // r13
  std::remove_reference<char const (&)[8]>::type *v9; // r12
  std::string *v10; // rbx
  const char *v11; // rax
  const char (*v12)[8]; // r9
  std::allocator<char> __a; // [rsp+3Bh] [rbp-45h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-44h]
  std::string v19; // [rsp+40h] [rbp-40h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v8 = std::forward<std::string &>(args_3);
    v9 = (std::remove_reference<char const (&)[8]>::type *)std::forward<char const(&)[8]>(a6);
    v10 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v11 = (const char *)std::forward<char const(&)[7]>(a4);
    std::string::basic_string<std::allocator<char>>(&v19, v11, &__a);
    v7 = getRequestParam<std::string,char const(&)[8],std::string&>(request, &v19, v10, v9, v8, v12);
    std::string::~string(&v19);
    std::allocator<char>::~allocator(&__a);
  }
  return v7;
};

// Line 69: range 000000000CCD873E-000000000CCD88C1
__int64 __fastcall getRequestParam<unsigned int,char const(&)[7],std::string &,char const(&)[8],unsigned int &,char const(&)[11],unsigned int &,char const(&)[15],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[7]>::type *a4,
        std::string *a5,
        std::remove_reference<char const (&)[8]>::type *a6,
        unsigned int *args_3,
        std::remove_reference<char const (&)[11]>::type *args_4,
        unsigned int *args_5,
        std::remove_reference<char const (&)[15]>::type *args_6,
        unsigned int *args_7)
{
  unsigned int v11; // ebx
  unsigned int *v12; // r13
  std::remove_reference<char const (&)[15]>::type *v13; // r12
  unsigned int *v14; // rbx
  std::remove_reference<char const (&)[8]>::type *v15; // r15
  std::string *v16; // r14
  const char *v17; // rax
  unsigned int *v19; // [rsp+0h] [rbp-A0h]
  char (*v20)[11]; // [rsp+8h] [rbp-98h]
  std::allocator<char> __a; // [rsp+4Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+4Ch] [rbp-54h]
  std::string v26; // [rsp+50h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v12 = std::forward<unsigned int &>(args_7);
    v13 = (std::remove_reference<char const (&)[15]>::type *)std::forward<char const(&)[15]>(args_6);
    v14 = std::forward<unsigned int &>(args_5);
    v20 = (char (*)[11])std::forward<char const(&)[11]>(args_4);
    v19 = std::forward<unsigned int &>(args_3);
    v15 = (std::remove_reference<char const (&)[8]>::type *)std::forward<char const(&)[8]>(a6);
    v16 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v17 = (const char *)std::forward<char const(&)[7]>(a4);
    std::string::basic_string<std::allocator<char>>(&v26, v17, &__a);
    v11 = getRequestParam<std::string,char const(&)[8],unsigned int &,char const(&)[11],unsigned int &,char const(&)[15],unsigned int &>(
            request,
            &v26,
            v16,
            v15,
            v19,
            v20,
            v14,
            v13,
            v12);
    std::string::~string(&v26);
    std::allocator<char>::~allocator(&__a);
  }
  return v11;
};

// Line 69: range 000000000CCC746B-000000000CCC75BC
__int64 __fastcall getRequestParam<unsigned int,char const(&)[7],std::string &,char const(&)[8],unsigned int &,char const(&)[11],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[7]>::type *a4,
        std::string *a5,
        std::remove_reference<char const (&)[8]>::type *a6,
        unsigned int *args_3,
        std::remove_reference<char const (&)[11]>::type *args_4,
        unsigned int *args_5)
{
  unsigned int v9; // ebx
  unsigned int *v10; // rbx
  std::remove_reference<char const (&)[11]>::type *v11; // r15
  unsigned int *v12; // r14
  std::remove_reference<char const (&)[8]>::type *v13; // r13
  std::string *v14; // r12
  const char *v15; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-54h]
  std::string v22; // [rsp+40h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v10 = std::forward<unsigned int &>(args_5);
    v11 = (std::remove_reference<char const (&)[11]>::type *)std::forward<char const(&)[11]>(args_4);
    v12 = std::forward<unsigned int &>(args_3);
    v13 = (std::remove_reference<char const (&)[8]>::type *)std::forward<char const(&)[8]>(a6);
    v14 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v15 = (const char *)std::forward<char const(&)[7]>(a4);
    std::string::basic_string<std::allocator<char>>(&v22, v15, &__a);
    v9 = getRequestParam<std::string,char const(&)[8],unsigned int &,char const(&)[11],unsigned int &>(
           request,
           &v22,
           v14,
           v13,
           v12,
           v11,
           v10);
    std::string::~string(&v22);
    std::allocator<char>::~allocator(&__a);
  }
  return v9;
};

// Line 69: range 000000000CCD9821-000000000CCD9972
__int64 __fastcall getRequestParam<unsigned int,char const(&)[7],std::string &,char const(&)[8],unsigned int &,char const(&)[8],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[7]>::type *a4,
        std::string *a5,
        std::remove_reference<char const (&)[8]>::type *a6,
        unsigned int *args_3,
        std::remove_reference<char const (&)[8]>::type *args_4,
        unsigned int *args_5)
{
  unsigned int v9; // ebx
  unsigned int *v10; // rbx
  std::remove_reference<char const (&)[8]>::type *v11; // r15
  unsigned int *v12; // r14
  std::remove_reference<char const (&)[8]>::type *v13; // r13
  std::string *v14; // r12
  const char *v15; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-54h]
  std::string v22; // [rsp+40h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v10 = std::forward<unsigned int &>(args_5);
    v11 = (std::remove_reference<char const (&)[8]>::type *)std::forward<char const(&)[8]>(args_4);
    v12 = std::forward<unsigned int &>(args_3);
    v13 = (std::remove_reference<char const (&)[8]>::type *)std::forward<char const(&)[8]>(a6);
    v14 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v15 = (const char *)std::forward<char const(&)[7]>(a4);
    std::string::basic_string<std::allocator<char>>(&v22, v15, &__a);
    v9 = getRequestParam<std::string,char const(&)[8],unsigned int &,char const(&)[8],unsigned int &>(
           request,
           &v22,
           v14,
           v13,
           v12,
           v11,
           v10);
    std::string::~string(&v22);
    std::allocator<char>::~allocator(&__a);
  }
  return v9;
};

// Line 69: range 000000000CCC7834-000000000CCC7947
__int64 __fastcall getRequestParam<unsigned int,char const(&)[7],std::string &,char const(&)[8],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[7]>::type *a4,
        std::string *a5,
        std::remove_reference<char const (&)[8]>::type *a6,
        unsigned int *args_3)
{
  unsigned int v7; // ebx
  unsigned int *v8; // r13
  std::remove_reference<char const (&)[8]>::type *v9; // r12
  std::string *v10; // rbx
  const char *v11; // rax
  const char (*v12)[8]; // r9
  std::allocator<char> __a; // [rsp+3Bh] [rbp-45h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-44h]
  std::string v19; // [rsp+40h] [rbp-40h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v8 = std::forward<unsigned int &>(args_3);
    v9 = (std::remove_reference<char const (&)[8]>::type *)std::forward<char const(&)[8]>(a6);
    v10 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v11 = (const char *)std::forward<char const(&)[7]>(a4);
    std::string::basic_string<std::allocator<char>>(&v19, v11, &__a);
    v7 = getRequestParam<std::string,char const(&)[8],unsigned int &>(request, &v19, v10, v9, v8, v12);
    std::string::~string(&v19);
    std::allocator<char>::~allocator(&__a);
  }
  return v7;
};

// Line 69: range 000000000CCD189C-000000000CCD19ED
__int64 __fastcall getRequestParam<unsigned int,char const(&)[7],std::string &,char const(&)[9],unsigned int &,char const(&)[13],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[7]>::type *a4,
        std::string *a5,
        std::remove_reference<char const (&)[9]>::type *a6,
        unsigned int *args_3,
        std::remove_reference<char const (&)[13]>::type *args_4,
        unsigned int *args_5)
{
  unsigned int v9; // ebx
  unsigned int *v10; // rbx
  std::remove_reference<char const (&)[13]>::type *v11; // r15
  unsigned int *v12; // r14
  std::remove_reference<char const (&)[9]>::type *v13; // r13
  std::string *v14; // r12
  const char *v15; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-54h]
  std::string v22; // [rsp+40h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v10 = std::forward<unsigned int &>(args_5);
    v11 = (std::remove_reference<char const (&)[13]>::type *)std::forward<char const(&)[13]>(args_4);
    v12 = std::forward<unsigned int &>(args_3);
    v13 = (std::remove_reference<char const (&)[9]>::type *)std::forward<char const(&)[9]>(a6);
    v14 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v15 = (const char *)std::forward<char const(&)[7]>(a4);
    std::string::basic_string<std::allocator<char>>(&v22, v15, &__a);
    v9 = getRequestParam<std::string,char const(&)[9],unsigned int &,char const(&)[13],unsigned int &>(
           request,
           &v22,
           v14,
           v13,
           v12,
           v11,
           v10);
    std::string::~string(&v22);
    std::allocator<char>::~allocator(&__a);
  }
  return v9;
};

// Line 69: range 000000000CCD5406-000000000CCD55F0
__int64 __fastcall getRequestParam<unsigned int,char const(&)[7],std::string &,char const(&)[9],unsigned int &,char const(&)[6],float &,char const(&)[6],float &,char const(&)[6],float &,char const(&)[6],float &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[7]>::type *a4,
        std::string *a5,
        std::remove_reference<char const (&)[9]>::type *a6,
        unsigned int *args_3,
        std::remove_reference<char const (&)[6]>::type *args_4,
        float *args_5,
        std::remove_reference<char const (&)[6]>::type *args_6,
        float *args_7,
        std::remove_reference<char const (&)[6]>::type *args_8,
        float *args_9,
        std::remove_reference<char const (&)[6]>::type *args_10,
        float *args_11)
{
  unsigned int v15; // ebx
  float *v16; // r15
  std::remove_reference<char const (&)[6]>::type *v17; // r14
  float *v18; // r13
  std::remove_reference<char const (&)[6]>::type *v19; // r12
  float *v20; // rbx
  const char *v21; // rax
  std::string *v23; // [rsp+0h] [rbp-C0h]
  char (*v24)[9]; // [rsp+8h] [rbp-B8h]
  unsigned int *v25; // [rsp+10h] [rbp-B0h]
  char (*v26)[6]; // [rsp+18h] [rbp-A8h]
  char (*v27)[6]; // [rsp+20h] [rbp-A0h]
  float *v28; // [rsp+28h] [rbp-98h]
  std::allocator<char> __a; // [rsp+6Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+6Ch] [rbp-54h]
  std::string v34; // [rsp+70h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v28 = std::forward<float &>(args_11);
    v27 = (char (*)[6])std::forward<char const(&)[6]>(args_10);
    v16 = std::forward<float &>(args_9);
    v17 = (std::remove_reference<char const (&)[6]>::type *)std::forward<char const(&)[6]>(args_8);
    v18 = std::forward<float &>(args_7);
    v19 = (std::remove_reference<char const (&)[6]>::type *)std::forward<char const(&)[6]>(args_6);
    v20 = std::forward<float &>(args_5);
    v26 = (char (*)[6])std::forward<char const(&)[6]>(args_4);
    v25 = std::forward<unsigned int &>(args_3);
    v24 = (char (*)[9])std::forward<char const(&)[9]>(a6);
    v23 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v21 = (const char *)std::forward<char const(&)[7]>(a4);
    std::string::basic_string<std::allocator<char>>(&v34, v21, &__a);
    v15 = getRequestParam<std::string,char const(&)[9],unsigned int &,char const(&)[6],float &,char const(&)[6],float &,char const(&)[6],float &,char const(&)[6],float &>(
            request,
            &v34,
            v23,
            v24,
            v25,
            v26,
            v20,
            v19,
            v18,
            v17,
            v16,
            v27,
            v28);
    std::string::~string(&v34);
    std::allocator<char>::~allocator(&__a);
  }
  return v15;
};

// Line 69: range 000000000CCD957D-000000000CCD96CE
__int64 __fastcall getRequestParam<unsigned int,char const(&)[7],std::string &,char const(&)[9],unsigned int &,char const(&)[6],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[7]>::type *a4,
        std::string *a5,
        std::remove_reference<char const (&)[9]>::type *a6,
        unsigned int *args_3,
        std::remove_reference<char const (&)[6]>::type *args_4,
        unsigned int *args_5)
{
  unsigned int v9; // ebx
  unsigned int *v10; // rbx
  std::remove_reference<char const (&)[6]>::type *v11; // r15
  unsigned int *v12; // r14
  std::remove_reference<char const (&)[9]>::type *v13; // r13
  std::string *v14; // r12
  const char *v15; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-54h]
  std::string v22; // [rsp+40h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v10 = std::forward<unsigned int &>(args_5);
    v11 = (std::remove_reference<char const (&)[6]>::type *)std::forward<char const(&)[6]>(args_4);
    v12 = std::forward<unsigned int &>(args_3);
    v13 = (std::remove_reference<char const (&)[9]>::type *)std::forward<char const(&)[9]>(a6);
    v14 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v15 = (const char *)std::forward<char const(&)[7]>(a4);
    std::string::basic_string<std::allocator<char>>(&v22, v15, &__a);
    v9 = getRequestParam<std::string,char const(&)[9],unsigned int &,char const(&)[6],unsigned int &>(
           request,
           &v22,
           v14,
           v13,
           v12,
           v11,
           v10);
    std::string::~string(&v22);
    std::allocator<char>::~allocator(&__a);
  }
  return v9;
};

// Line 69: range 000000000CCD9B9B-000000000CCD9CAE
__int64 __fastcall getRequestParam<unsigned int,char const(&)[7],std::string &,char const(&)[9],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[7]>::type *a4,
        std::string *a5,
        std::remove_reference<char const (&)[9]>::type *a6,
        unsigned int *args_3)
{
  unsigned int v7; // ebx
  unsigned int *v8; // r13
  std::remove_reference<char const (&)[9]>::type *v9; // r12
  std::string *v10; // rbx
  const char *v11; // rax
  const char (*v12)[9]; // r9
  std::allocator<char> __a; // [rsp+3Bh] [rbp-45h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-44h]
  std::string v19; // [rsp+40h] [rbp-40h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v8 = std::forward<unsigned int &>(args_3);
    v9 = (std::remove_reference<char const (&)[9]>::type *)std::forward<char const(&)[9]>(a6);
    v10 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v11 = (const char *)std::forward<char const(&)[7]>(a4);
    std::string::basic_string<std::allocator<char>>(&v19, v11, &__a);
    v7 = getRequestParam<std::string,char const(&)[9],unsigned int &>(request, &v19, v10, v9, v8, v12);
    std::string::~string(&v19);
    std::allocator<char>::~allocator(&__a);
  }
  return v7;
};

// Line 69: range 000000000CCC7200-000000000CCC72E6
__int64 __fastcall getRequestParam<unsigned int,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[7]>::type *a4,
        std::string *a5,
        const char (*args_0)[7])
{
  ApiRetcode v6; // ebx
  std::string *v7; // rbx
  const char *v8; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-35h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-34h]
  std::string v14; // [rsp+40h] [rbp-30h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v7 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v8 = (const char *)std::forward<char const(&)[7]>(a4);
    std::string::basic_string<std::allocator<char>>(&v14, v8, &__a);
    v6 = getRequestParam<std::string>(request, &v14, v7);
    std::string::~string(&v14);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v6;
};

// Line 69: range 000000000CCD450A-000000000CCD45F0
__int64 __fastcall getRequestParam<unsigned int,char const(&)[7],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[7]>::type *a4,
        unsigned int *a5,
        const char (*args_0)[7])
{
  ApiRetcode v6; // ebx
  unsigned int *v7; // rbx
  const char *v8; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-35h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-34h]
  std::string v14; // [rsp+40h] [rbp-30h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v7 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v8 = (const char *)std::forward<char const(&)[7]>(a4);
    std::string::basic_string<std::allocator<char>>(&v14, v8, &__a);
    v6 = getRequestParam<unsigned int>(request, &v14, v7);
    std::string::~string(&v14);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v6;
};

// Line 69: range 000000000CD5966D-000000000CD59780
__int64 __fastcall getRequestParam<unsigned int,char const(&)[8],bool &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[8]>::type *a4,
        bool *a5,
        std::remove_reference<char const (&)[7]>::type *a6,
        std::string *args_3)
{
  unsigned int v7; // ebx
  std::string *v8; // r13
  std::remove_reference<char const (&)[7]>::type *v9; // r12
  bool *v10; // rbx
  const char *v11; // rax
  const char (*v12)[7]; // r9
  std::allocator<char> __a; // [rsp+3Bh] [rbp-45h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-44h]
  std::string v19; // [rsp+40h] [rbp-40h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v8 = std::forward<std::string &>(args_3);
    v9 = (std::remove_reference<char const (&)[7]>::type *)std::forward<char const(&)[7]>(a6);
    v10 = std::forward<bool &>(a5);
    std::allocator<char>::allocator(&__a);
    v11 = (const char *)std::forward<char const(&)[8]>(a4);
    std::string::basic_string<std::allocator<char>>(&v19, v11, &__a);
    v7 = getRequestParam<bool,char const(&)[7],std::string &>(request, &v19, v10, v9, v8, v12);
    std::string::~string(&v19);
    std::allocator<char>::~allocator(&__a);
  }
  return v7;
};

// Line 69: range 000000000CD5B4C3-000000000CD5B5A9
__int64 __fastcall getRequestParam<unsigned int,char const(&)[8],bool &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[8]>::type *a4,
        bool *a5,
        const char (*args_0)[8])
{
  ApiRetcode v6; // ebx
  bool *v7; // rbx
  const char *v8; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-35h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-34h]
  std::string v14; // [rsp+40h] [rbp-30h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v7 = std::forward<bool &>(a5);
    std::allocator<char>::allocator(&__a);
    v8 = (const char *)std::forward<char const(&)[8]>(a4);
    std::string::basic_string<std::allocator<char>>(&v14, v8, &__a);
    v6 = getRequestParam<bool>(request, &v14, v7);
    std::string::~string(&v14);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v6;
};

// Line 69: range 000000000CCD75BC-000000000CCD76CF
__int64 __fastcall getRequestParam<unsigned int,char const(&)[8],unsigned int &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[8]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[7]>::type *a6,
        std::string *args_3)
{
  unsigned int v7; // ebx
  std::string *v8; // r13
  std::remove_reference<char const (&)[7]>::type *v9; // r12
  unsigned int *v10; // rbx
  const char *v11; // rax
  const char (*v12)[7]; // r9
  std::allocator<char> __a; // [rsp+3Bh] [rbp-45h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-44h]
  std::string v19; // [rsp+40h] [rbp-40h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v8 = std::forward<std::string &>(args_3);
    v9 = (std::remove_reference<char const (&)[7]>::type *)std::forward<char const(&)[7]>(a6);
    v10 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v11 = (const char *)std::forward<char const(&)[8]>(a4);
    std::string::basic_string<std::allocator<char>>(&v19, v11, &__a);
    v7 = getRequestParam<unsigned int,char const(&)[7],std::string &>(request, &v19, v10, v9, v8, v12);
    std::string::~string(&v19);
    std::allocator<char>::~allocator(&__a);
  }
  return v7;
};

// Line 69: range 000000000CDBE2C0-000000000CDBE3A6
__int64 __fastcall getRequestParam<unsigned int,char const(&)[8],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[8]>::type *a4,
        unsigned int *a5,
        const char (*args_0)[8])
{
  ApiRetcode v6; // ebx
  unsigned int *v7; // rbx
  const char *v8; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-35h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-34h]
  std::string v14; // [rsp+40h] [rbp-30h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v7 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v8 = (const char *)std::forward<char const(&)[8]>(a4);
    std::string::basic_string<std::allocator<char>>(&v14, v8, &__a);
    v6 = getRequestParam<unsigned int>(request, &v14, v7);
    std::string::~string(&v14);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v6;
};

// Line 69: range 000000000CCD76D0-000000000CCD7821
__int64 __fastcall getRequestParam<unsigned int,char const(&)[9],std::string &,char const(&)[6],bool &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[9]>::type *a4,
        std::string *a5,
        std::remove_reference<char const (&)[6]>::type *a6,
        bool *args_3,
        std::remove_reference<char const (&)[7]>::type *args_4,
        std::string *args_5)
{
  unsigned int v9; // ebx
  std::string *v10; // rbx
  std::remove_reference<char const (&)[7]>::type *v11; // r15
  bool *v12; // r14
  std::remove_reference<char const (&)[6]>::type *v13; // r13
  std::string *v14; // r12
  const char *v15; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-54h]
  std::string v22; // [rsp+40h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v10 = std::forward<std::string &>(args_5);
    v11 = (std::remove_reference<char const (&)[7]>::type *)std::forward<char const(&)[7]>(args_4);
    v12 = std::forward<bool &>(args_3);
    v13 = (std::remove_reference<char const (&)[6]>::type *)std::forward<char const(&)[6]>(a6);
    v14 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v15 = (const char *)std::forward<char const(&)[9]>(a4);
    std::string::basic_string<std::allocator<char>>(&v22, v15, &__a);
    v9 = getRequestParam<std::string,char const(&)[6],bool &,char const(&)[7],std::string&>(
           request,
           &v22,
           v14,
           v13,
           v12,
           v11,
           v10);
    std::string::~string(&v22);
    std::allocator<char>::~allocator(&__a);
  }
  return v9;
};

// Line 69: range 000000000CCC70EC-000000000CCC71FF
__int64 __fastcall getRequestParam<unsigned int,char const(&)[9],std::string &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[9]>::type *a4,
        std::string *a5,
        std::remove_reference<char const (&)[7]>::type *a6,
        std::string *args_3)
{
  unsigned int v7; // ebx
  std::string *v8; // r13
  std::remove_reference<char const (&)[7]>::type *v9; // r12
  std::string *v10; // rbx
  const char *v11; // rax
  const char (*v12)[7]; // r9
  std::allocator<char> __a; // [rsp+3Bh] [rbp-45h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-44h]
  std::string v19; // [rsp+40h] [rbp-40h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v8 = std::forward<std::string &>(args_3);
    v9 = (std::remove_reference<char const (&)[7]>::type *)std::forward<char const(&)[7]>(a6);
    v10 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v11 = (const char *)std::forward<char const(&)[9]>(a4);
    std::string::basic_string<std::allocator<char>>(&v19, v11, &__a);
    v7 = getRequestParam<std::string,char const(&)[7],std::string&>(request, &v19, v10, v9, v8, v12);
    std::string::~string(&v19);
    std::allocator<char>::~allocator(&__a);
  }
  return v7;
};

// Line 69: range 000000000CCD821A-000000000CCD832D
__int64 __fastcall getRequestParam<unsigned int,char const(&)[9],std::string &,char const(&)[8],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[9]>::type *a4,
        std::string *a5,
        std::remove_reference<char const (&)[8]>::type *a6,
        unsigned int *args_3)
{
  unsigned int v7; // ebx
  unsigned int *v8; // r13
  std::remove_reference<char const (&)[8]>::type *v9; // r12
  std::string *v10; // rbx
  const char *v11; // rax
  const char (*v12)[8]; // r9
  std::allocator<char> __a; // [rsp+3Bh] [rbp-45h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-44h]
  std::string v19; // [rsp+40h] [rbp-40h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v8 = std::forward<unsigned int &>(args_3);
    v9 = (std::remove_reference<char const (&)[8]>::type *)std::forward<char const(&)[8]>(a6);
    v10 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v11 = (const char *)std::forward<char const(&)[9]>(a4);
    std::string::basic_string<std::allocator<char>>(&v19, v11, &__a);
    v7 = getRequestParam<std::string,char const(&)[8],unsigned int &>(request, &v19, v10, v9, v8, v12);
    std::string::~string(&v19);
    std::allocator<char>::~allocator(&__a);
  }
  return v7;
};

// Line 69: range 000000000CD55533-000000000CD55684
__int64 __fastcall getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[10],bool &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[9]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[10]>::type *a6,
        bool *args_3,
        std::remove_reference<char const (&)[7]>::type *args_4,
        std::string *args_5)
{
  unsigned int v9; // ebx
  std::string *v10; // rbx
  std::remove_reference<char const (&)[7]>::type *v11; // r15
  bool *v12; // r14
  std::remove_reference<char const (&)[10]>::type *v13; // r13
  unsigned int *v14; // r12
  const char *v15; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-54h]
  std::string v22; // [rsp+40h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v10 = std::forward<std::string &>(args_5);
    v11 = (std::remove_reference<char const (&)[7]>::type *)std::forward<char const(&)[7]>(args_4);
    v12 = std::forward<bool &>(args_3);
    v13 = (std::remove_reference<char const (&)[10]>::type *)std::forward<char const(&)[10]>(a6);
    v14 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v15 = (const char *)std::forward<char const(&)[9]>(a4);
    std::string::basic_string<std::allocator<char>>(&v22, v15, &__a);
    v9 = getRequestParam<unsigned int,char const(&)[10],bool &,char const(&)[7],std::string &>(
           request,
           &v22,
           v14,
           v13,
           v12,
           v11,
           v10);
    std::string::~string(&v22);
    std::allocator<char>::~allocator(&__a);
  }
  return v9;
};

// Line 69: range 000000000CD54F20-000000000CD550D8
__int64 __fastcall getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[10],unsigned int &,char const(&)[6],unsigned int &,char const(&)[10],bool &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[9]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[10]>::type *a6,
        unsigned int *args_3,
        std::remove_reference<char const (&)[6]>::type *args_4,
        unsigned int *args_5,
        std::remove_reference<char const (&)[10]>::type *args_6,
        bool *args_7,
        std::remove_reference<char const (&)[7]>::type *args_8,
        std::string *args_9)
{
  unsigned int v13; // ebx
  std::string *v14; // r15
  std::remove_reference<char const (&)[7]>::type *v15; // r14
  bool *v16; // r13
  std::remove_reference<char const (&)[10]>::type *v17; // r12
  unsigned int *v18; // rbx
  const char *v19; // rax
  unsigned int *v21; // [rsp+0h] [rbp-B0h]
  char (*v22)[10]; // [rsp+8h] [rbp-A8h]
  unsigned int *v23; // [rsp+10h] [rbp-A0h]
  char (*v24)[6]; // [rsp+18h] [rbp-98h]
  std::allocator<char> __a; // [rsp+5Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+5Ch] [rbp-54h]
  std::string v30; // [rsp+60h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v14 = std::forward<std::string &>(args_9);
    v15 = (std::remove_reference<char const (&)[7]>::type *)std::forward<char const(&)[7]>(args_8);
    v16 = std::forward<bool &>(args_7);
    v17 = (std::remove_reference<char const (&)[10]>::type *)std::forward<char const(&)[10]>(args_6);
    v18 = std::forward<unsigned int &>(args_5);
    v24 = (char (*)[6])std::forward<char const(&)[6]>(args_4);
    v23 = std::forward<unsigned int &>(args_3);
    v22 = (char (*)[10])std::forward<char const(&)[10]>(a6);
    v21 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v19 = (const char *)std::forward<char const(&)[9]>(a4);
    std::string::basic_string<std::allocator<char>>(&v30, v19, &__a);
    v13 = getRequestParam<unsigned int,char const(&)[10],unsigned int &,char const(&)[6],unsigned int &,char const(&)[10],bool &,char const(&)[7],std::string &>(
            request,
            &v30,
            v21,
            v22,
            v23,
            v24,
            v18,
            v17,
            v16,
            v15,
            v14);
    std::string::~string(&v30);
    std::allocator<char>::~allocator(&__a);
  }
  return v13;
};

// Line 69: range 000000000CD54D9C-000000000CD54F1F
__int64 __fastcall getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[10],unsigned int &,char const(&)[7],bool &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[9]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[10]>::type *a6,
        unsigned int *args_3,
        std::remove_reference<char const (&)[7]>::type *args_4,
        bool *args_5,
        std::remove_reference<char const (&)[7]>::type *args_6,
        std::string *args_7)
{
  unsigned int v11; // ebx
  std::string *v12; // r13
  std::remove_reference<char const (&)[7]>::type *v13; // r12
  bool *v14; // rbx
  std::remove_reference<char const (&)[10]>::type *v15; // r15
  unsigned int *v16; // r14
  const char *v17; // rax
  unsigned int *v19; // [rsp+0h] [rbp-A0h]
  char (*v20)[7]; // [rsp+8h] [rbp-98h]
  std::allocator<char> __a; // [rsp+4Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+4Ch] [rbp-54h]
  std::string v26; // [rsp+50h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v12 = std::forward<std::string &>(args_7);
    v13 = (std::remove_reference<char const (&)[7]>::type *)std::forward<char const(&)[7]>(args_6);
    v14 = std::forward<bool &>(args_5);
    v20 = (char (*)[7])std::forward<char const(&)[7]>(args_4);
    v19 = std::forward<unsigned int &>(args_3);
    v15 = (std::remove_reference<char const (&)[10]>::type *)std::forward<char const(&)[10]>(a6);
    v16 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v17 = (const char *)std::forward<char const(&)[9]>(a4);
    std::string::basic_string<std::allocator<char>>(&v26, v17, &__a);
    v11 = getRequestParam<unsigned int,char const(&)[10],unsigned int &,char const(&)[7],bool &,char const(&)[7],std::string &>(
            request,
            &v26,
            v16,
            v15,
            v19,
            v20,
            v14,
            v13,
            v12);
    std::string::~string(&v26);
    std::allocator<char>::~allocator(&__a);
  }
  return v11;
};

// Line 69: range 000000000CD54C4A-000000000CD54D9B
__int64 __fastcall getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[10],unsigned int &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[9]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[10]>::type *a6,
        unsigned int *args_3,
        std::remove_reference<char const (&)[7]>::type *args_4,
        std::string *args_5)
{
  unsigned int v9; // ebx
  std::string *v10; // rbx
  std::remove_reference<char const (&)[7]>::type *v11; // r15
  unsigned int *v12; // r14
  std::remove_reference<char const (&)[10]>::type *v13; // r13
  unsigned int *v14; // r12
  const char *v15; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-54h]
  std::string v22; // [rsp+40h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v10 = std::forward<std::string &>(args_5);
    v11 = (std::remove_reference<char const (&)[7]>::type *)std::forward<char const(&)[7]>(args_4);
    v12 = std::forward<unsigned int &>(args_3);
    v13 = (std::remove_reference<char const (&)[10]>::type *)std::forward<char const(&)[10]>(a6);
    v14 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v15 = (const char *)std::forward<char const(&)[9]>(a4);
    std::string::basic_string<std::allocator<char>>(&v22, v15, &__a);
    v9 = getRequestParam<unsigned int,char const(&)[10],unsigned int &,char const(&)[7],std::string &>(
           request,
           &v22,
           v14,
           v13,
           v12,
           v11,
           v10);
    std::string::~string(&v22);
    std::allocator<char>::~allocator(&__a);
  }
  return v9;
};

// Line 69: range 000000000CD5522B-000000000CD553AE
__int64 __fastcall getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[13],std::string &,char const(&)[14],unsigned int &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[9]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[13]>::type *a6,
        std::string *args_3,
        std::remove_reference<char const (&)[14]>::type *args_4,
        unsigned int *args_5,
        std::remove_reference<char const (&)[7]>::type *args_6,
        std::string *args_7)
{
  unsigned int v11; // ebx
  std::string *v12; // r13
  std::remove_reference<char const (&)[7]>::type *v13; // r12
  unsigned int *v14; // rbx
  std::remove_reference<char const (&)[13]>::type *v15; // r15
  unsigned int *v16; // r14
  const char *v17; // rax
  std::string *v19; // [rsp+0h] [rbp-A0h]
  char (*v20)[14]; // [rsp+8h] [rbp-98h]
  std::allocator<char> __a; // [rsp+4Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+4Ch] [rbp-54h]
  std::string v26; // [rsp+50h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v12 = std::forward<std::string &>(args_7);
    v13 = (std::remove_reference<char const (&)[7]>::type *)std::forward<char const(&)[7]>(args_6);
    v14 = std::forward<unsigned int &>(args_5);
    v20 = (char (*)[14])std::forward<char const(&)[14]>(args_4);
    v19 = std::forward<std::string &>(args_3);
    v15 = (std::remove_reference<char const (&)[13]>::type *)std::forward<char const(&)[13]>(a6);
    v16 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v17 = (const char *)std::forward<char const(&)[9]>(a4);
    std::string::basic_string<std::allocator<char>>(&v26, v17, &__a);
    v11 = getRequestParam<unsigned int,char const(&)[13],std::string &,char const(&)[14],unsigned int &,char const(&)[7],std::string &>(
            request,
            &v26,
            v16,
            v15,
            v19,
            v20,
            v14,
            v13,
            v12);
    std::string::~string(&v26);
    std::allocator<char>::~allocator(&__a);
  }
  return v11;
};

// Line 69: range 000000000CD550D9-000000000CD5522A
__int64 __fastcall getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[13],std::string &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[9]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[13]>::type *a6,
        std::string *args_3,
        std::remove_reference<char const (&)[7]>::type *args_4,
        std::string *args_5)
{
  unsigned int v9; // ebx
  std::string *v10; // rbx
  std::remove_reference<char const (&)[7]>::type *v11; // r15
  std::string *v12; // r14
  std::remove_reference<char const (&)[13]>::type *v13; // r13
  unsigned int *v14; // r12
  const char *v15; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-54h]
  std::string v22; // [rsp+40h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v10 = std::forward<std::string &>(args_5);
    v11 = (std::remove_reference<char const (&)[7]>::type *)std::forward<char const(&)[7]>(args_4);
    v12 = std::forward<std::string &>(args_3);
    v13 = (std::remove_reference<char const (&)[13]>::type *)std::forward<char const(&)[13]>(a6);
    v14 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v15 = (const char *)std::forward<char const(&)[9]>(a4);
    std::string::basic_string<std::allocator<char>>(&v22, v15, &__a);
    v9 = getRequestParam<unsigned int,char const(&)[13],std::string &,char const(&)[7],std::string &>(
           request,
           &v22,
           v14,
           v13,
           v12,
           v11,
           v10);
    std::string::~string(&v22);
    std::allocator<char>::~allocator(&__a);
  }
  return v9;
};

// Line 69: range 000000000CCD80C8-000000000CCD8219
__int64 __fastcall getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[13],unsigned int &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[9]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[13]>::type *a6,
        unsigned int *args_3,
        std::remove_reference<char const (&)[7]>::type *args_4,
        std::string *args_5)
{
  ApiRetcode v9; // ebx
  std::string *v10; // rbx
  const char (*v11)[7]; // r15
  unsigned int *v12; // r14
  const char (*v13)[13]; // r13
  unsigned int *v14; // r12
  const char *v15; // rax
  const char (*v17)[13]; // [rsp-8h] [rbp-98h]
  std::allocator<char> __a; // [rsp+3Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-54h]
  std::string v23; // [rsp+40h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v10 = std::forward<std::string &>(args_5);
    v11 = std::forward<char const(&)[7]>(args_4);
    v12 = std::forward<unsigned int &>(args_3);
    v13 = std::forward<char const(&)[13]>(a6);
    v14 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v15 = (const char *)std::forward<char const(&)[9]>(a4);
    std::string::basic_string<std::allocator<char>>(&v23, v15, &__a);
    v9 = getRequestParam<unsigned int,char const(&)[13],unsigned int &,char const(&)[7],std::string &>(
           request,
           &v23,
           v14,
           v13,
           v12,
           v11,
           v10,
           v17,
           (unsigned int *)a6,
           (const char (*)[7])a5,
           (std::string *)a4);
    std::string::~string(&v23);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v9;
};

// Line 69: range 000000000CCD3562-000000000CCD36E5
__int64 __fastcall getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[13],unsigned int &,char const(&)[8],unsigned int &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[9]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[13]>::type *a6,
        unsigned int *args_3,
        std::remove_reference<char const (&)[8]>::type *args_4,
        unsigned int *args_5,
        std::remove_reference<char const (&)[7]>::type *args_6,
        std::string *args_7)
{
  unsigned int v11; // ebx
  std::string *v12; // r13
  std::remove_reference<char const (&)[7]>::type *v13; // r12
  unsigned int *v14; // rbx
  std::remove_reference<char const (&)[13]>::type *v15; // r15
  unsigned int *v16; // r14
  const char *v17; // rax
  unsigned int *v19; // [rsp+0h] [rbp-A0h]
  char (*v20)[8]; // [rsp+8h] [rbp-98h]
  std::allocator<char> __a; // [rsp+4Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+4Ch] [rbp-54h]
  std::string v26; // [rsp+50h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v12 = std::forward<std::string &>(args_7);
    v13 = (std::remove_reference<char const (&)[7]>::type *)std::forward<char const(&)[7]>(args_6);
    v14 = std::forward<unsigned int &>(args_5);
    v20 = (char (*)[8])std::forward<char const(&)[8]>(args_4);
    v19 = std::forward<unsigned int &>(args_3);
    v15 = (std::remove_reference<char const (&)[13]>::type *)std::forward<char const(&)[13]>(a6);
    v16 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v17 = (const char *)std::forward<char const(&)[9]>(a4);
    std::string::basic_string<std::allocator<char>>(&v26, v17, &__a);
    v11 = getRequestParam<unsigned int,char const(&)[13],unsigned int &,char const(&)[8],unsigned int &,char const(&)[7],std::string &>(
            request,
            &v26,
            v16,
            v15,
            v19,
            v20,
            v14,
            v13,
            v12);
    std::string::~string(&v26);
    std::allocator<char>::~allocator(&__a);
  }
  return v11;
};

// Line 69: range 000000000CD553AF-000000000CD55532
__int64 __fastcall getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[14],std::string &,char const(&)[6],int &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[9]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[14]>::type *a6,
        std::string *args_3,
        std::remove_reference<char const (&)[6]>::type *args_4,
        int *args_5,
        std::remove_reference<char const (&)[7]>::type *args_6,
        std::string *args_7)
{
  unsigned int v11; // ebx
  std::string *v12; // r13
  std::remove_reference<char const (&)[7]>::type *v13; // r12
  int *v14; // rbx
  std::remove_reference<char const (&)[14]>::type *v15; // r15
  unsigned int *v16; // r14
  const char *v17; // rax
  std::string *v19; // [rsp+0h] [rbp-A0h]
  char (*v20)[6]; // [rsp+8h] [rbp-98h]
  std::allocator<char> __a; // [rsp+4Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+4Ch] [rbp-54h]
  std::string v26; // [rsp+50h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v12 = std::forward<std::string &>(args_7);
    v13 = (std::remove_reference<char const (&)[7]>::type *)std::forward<char const(&)[7]>(args_6);
    v14 = std::forward<int &>(args_5);
    v20 = (char (*)[6])std::forward<char const(&)[6]>(args_4);
    v19 = std::forward<std::string &>(args_3);
    v15 = (std::remove_reference<char const (&)[14]>::type *)std::forward<char const(&)[14]>(a6);
    v16 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v17 = (const char *)std::forward<char const(&)[9]>(a4);
    std::string::basic_string<std::allocator<char>>(&v26, v17, &__a);
    v11 = getRequestParam<unsigned int,char const(&)[14],std::string &,char const(&)[6],int &,char const(&)[7],std::string &>(
            request,
            &v26,
            v16,
            v15,
            v19,
            v20,
            v14,
            v13,
            v12);
    std::string::~string(&v26);
    std::allocator<char>::~allocator(&__a);
  }
  return v11;
};

// Line 69: range 000000000CCD4743-000000000CCD48C6
__int64 __fastcall getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[15],unsigned int &,char const(&)[14],unsigned int &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[9]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[15]>::type *a6,
        unsigned int *args_3,
        std::remove_reference<char const (&)[14]>::type *args_4,
        unsigned int *args_5,
        std::remove_reference<char const (&)[7]>::type *args_6,
        std::string *args_7)
{
  unsigned int v11; // ebx
  std::string *v12; // r13
  std::remove_reference<char const (&)[7]>::type *v13; // r12
  unsigned int *v14; // rbx
  std::remove_reference<char const (&)[15]>::type *v15; // r15
  unsigned int *v16; // r14
  const char *v17; // rax
  unsigned int *v19; // [rsp+0h] [rbp-A0h]
  char (*v20)[14]; // [rsp+8h] [rbp-98h]
  std::allocator<char> __a; // [rsp+4Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+4Ch] [rbp-54h]
  std::string v26; // [rsp+50h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v12 = std::forward<std::string &>(args_7);
    v13 = (std::remove_reference<char const (&)[7]>::type *)std::forward<char const(&)[7]>(args_6);
    v14 = std::forward<unsigned int &>(args_5);
    v20 = (char (*)[14])std::forward<char const(&)[14]>(args_4);
    v19 = std::forward<unsigned int &>(args_3);
    v15 = (std::remove_reference<char const (&)[15]>::type *)std::forward<char const(&)[15]>(a6);
    v16 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v17 = (const char *)std::forward<char const(&)[9]>(a4);
    std::string::basic_string<std::allocator<char>>(&v26, v17, &__a);
    v11 = getRequestParam<unsigned int,char const(&)[15],unsigned int &,char const(&)[14],unsigned int &,char const(&)[7],std::string &>(
            request,
            &v26,
            v16,
            v15,
            v19,
            v20,
            v14,
            v13,
            v12);
    std::string::~string(&v26);
    std::allocator<char>::~allocator(&__a);
  }
  return v11;
};

// Line 69: range 000000000CCCDB00-000000000CCCDC83
__int64 __fastcall getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[16],std::string &,char const(&)[14],std::string &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[9]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[16]>::type *a6,
        std::string *args_3,
        std::remove_reference<char const (&)[14]>::type *args_4,
        std::string *args_5,
        std::remove_reference<char const (&)[7]>::type *args_6,
        std::string *args_7)
{
  unsigned int v11; // ebx
  std::string *v12; // r13
  std::remove_reference<char const (&)[7]>::type *v13; // r12
  std::string *v14; // rbx
  std::remove_reference<char const (&)[16]>::type *v15; // r15
  unsigned int *v16; // r14
  const char *v17; // rax
  std::string *v19; // [rsp+0h] [rbp-A0h]
  char (*v20)[14]; // [rsp+8h] [rbp-98h]
  std::allocator<char> __a; // [rsp+4Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+4Ch] [rbp-54h]
  std::string v26; // [rsp+50h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v12 = std::forward<std::string &>(args_7);
    v13 = (std::remove_reference<char const (&)[7]>::type *)std::forward<char const(&)[7]>(args_6);
    v14 = std::forward<std::string &>(args_5);
    v20 = (char (*)[14])std::forward<char const(&)[14]>(args_4);
    v19 = std::forward<std::string &>(args_3);
    v15 = (std::remove_reference<char const (&)[16]>::type *)std::forward<char const(&)[16]>(a6);
    v16 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v17 = (const char *)std::forward<char const(&)[9]>(a4);
    std::string::basic_string<std::allocator<char>>(&v26, v17, &__a);
    v11 = getRequestParam<unsigned int,char const(&)[16],std::string &,char const(&)[14],std::string &,char const(&)[7],std::string &>(
            request,
            &v26,
            v16,
            v15,
            v19,
            v20,
            v14,
            v13,
            v12);
    std::string::~string(&v26);
    std::allocator<char>::~allocator(&__a);
  }
  return v11;
};

// Line 69: range 000000000CCD33DE-000000000CCD3561
__int64 __fastcall getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[16],unsigned int &,char const(&)[13],unsigned int &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[9]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[16]>::type *a6,
        unsigned int *args_3,
        std::remove_reference<char const (&)[13]>::type *args_4,
        unsigned int *args_5,
        std::remove_reference<char const (&)[7]>::type *args_6,
        std::string *args_7)
{
  unsigned int v11; // ebx
  std::string *v12; // r13
  std::remove_reference<char const (&)[7]>::type *v13; // r12
  unsigned int *v14; // rbx
  std::remove_reference<char const (&)[16]>::type *v15; // r15
  unsigned int *v16; // r14
  const char *v17; // rax
  unsigned int *v19; // [rsp+0h] [rbp-A0h]
  char (*v20)[13]; // [rsp+8h] [rbp-98h]
  std::allocator<char> __a; // [rsp+4Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+4Ch] [rbp-54h]
  std::string v26; // [rsp+50h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v12 = std::forward<std::string &>(args_7);
    v13 = (std::remove_reference<char const (&)[7]>::type *)std::forward<char const(&)[7]>(args_6);
    v14 = std::forward<unsigned int &>(args_5);
    v20 = (char (*)[13])std::forward<char const(&)[13]>(args_4);
    v19 = std::forward<unsigned int &>(args_3);
    v15 = (std::remove_reference<char const (&)[16]>::type *)std::forward<char const(&)[16]>(a6);
    v16 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v17 = (const char *)std::forward<char const(&)[9]>(a4);
    std::string::basic_string<std::allocator<char>>(&v26, v17, &__a);
    v11 = getRequestParam<unsigned int,char const(&)[16],unsigned int &,char const(&)[13],unsigned int &,char const(&)[7],std::string &>(
            request,
            &v26,
            v16,
            v15,
            v19,
            v20,
            v14,
            v13,
            v12);
    std::string::~string(&v26);
    std::allocator<char>::~allocator(&__a);
  }
  return v11;
};

// Line 69: range 000000000CCC6F33-000000000CCC70EB
__int64 __fastcall getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[2],float &,char const(&)[2],float &,char const(&)[2],float &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[9]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[2]>::type *a6,
        float *args_3,
        std::remove_reference<char const (&)[2]>::type *args_4,
        float *args_5,
        std::remove_reference<char const (&)[2]>::type *args_6,
        float *args_7,
        std::remove_reference<char const (&)[7]>::type *args_8,
        std::string *args_9)
{
  ApiRetcode v13; // ebx
  std::string *v14; // r15
  const char (*v15)[7]; // r14
  float *v16; // r13
  const char (*v17)[2]; // r12
  float *v18; // rbx
  const char *v19; // rax
  const char (*v21)[2]; // [rsp-8h] [rbp-B8h]
  unsigned int *v22; // [rsp+0h] [rbp-B0h]
  const char (*v23)[2]; // [rsp+8h] [rbp-A8h]
  float *v24; // [rsp+10h] [rbp-A0h]
  const char (*v25)[2]; // [rsp+18h] [rbp-98h]
  std::allocator<char> __a; // [rsp+5Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+5Ch] [rbp-54h]
  std::string v31; // [rsp+60h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v14 = std::forward<std::string &>(args_9);
    v15 = std::forward<char const(&)[7]>(args_8);
    v16 = std::forward<float &>(args_7);
    v17 = std::forward<char const(&)[2]>(args_6);
    v18 = std::forward<float &>(args_5);
    v25 = std::forward<char const(&)[2]>(args_4);
    v24 = std::forward<float &>(args_3);
    v23 = std::forward<char const(&)[2]>(a6);
    v22 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v19 = (const char *)std::forward<char const(&)[9]>(a4);
    std::string::basic_string<std::allocator<char>>(&v31, v19, &__a);
    v13 = getRequestParam<unsigned int,char const(&)[2],float &,char const(&)[2],float &,char const(&)[2],float &,char const(&)[7],std::string &>(
            request,
            &v31,
            v22,
            v23,
            v24,
            v25,
            v18,
            v17,
            v16,
            v15,
            v14,
            v21,
            (float *)v22,
            v23,
            v24,
            v25,
            (float *)a6,
            (const char (*)[7])a5,
            (std::string *)a4);
    std::string::~string(&v31);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v13;
};

// Line 69: range 000000000CCCB794-000000000CCCB8E5
__int64 __fastcall getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[4],std::string &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[9]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[4]>::type *a6,
        std::string *args_3,
        std::remove_reference<char const (&)[7]>::type *args_4,
        std::string *args_5)
{
  unsigned int v9; // ebx
  std::string *v10; // rbx
  std::remove_reference<char const (&)[7]>::type *v11; // r15
  std::string *v12; // r14
  std::remove_reference<char const (&)[4]>::type *v13; // r13
  unsigned int *v14; // r12
  const char *v15; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-54h]
  std::string v22; // [rsp+40h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v10 = std::forward<std::string &>(args_5);
    v11 = (std::remove_reference<char const (&)[7]>::type *)std::forward<char const(&)[7]>(args_4);
    v12 = std::forward<std::string &>(args_3);
    v13 = (std::remove_reference<char const (&)[4]>::type *)std::forward<char const(&)[4]>(a6);
    v14 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v15 = (const char *)std::forward<char const(&)[9]>(a4);
    std::string::basic_string<std::allocator<char>>(&v22, v15, &__a);
    v9 = getRequestParam<unsigned int,char const(&)[4],std::string &,char const(&)[7],std::string &>(
           request,
           &v22,
           v14,
           v13,
           v12,
           v11,
           v10);
    std::string::~string(&v22);
    std::allocator<char>::~allocator(&__a);
  }
  return v9;
};

// Line 69: range 000000000CCD45F1-000000000CCD4742
__int64 __fastcall getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[6],unsigned int &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[9]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[6]>::type *a6,
        unsigned int *args_3,
        std::remove_reference<char const (&)[7]>::type *args_4,
        std::string *args_5)
{
  unsigned int v9; // ebx
  std::string *v10; // rbx
  std::remove_reference<char const (&)[7]>::type *v11; // r15
  unsigned int *v12; // r14
  std::remove_reference<char const (&)[6]>::type *v13; // r13
  unsigned int *v14; // r12
  const char *v15; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-54h]
  std::string v22; // [rsp+40h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v10 = std::forward<std::string &>(args_5);
    v11 = (std::remove_reference<char const (&)[7]>::type *)std::forward<char const(&)[7]>(args_4);
    v12 = std::forward<unsigned int &>(args_3);
    v13 = (std::remove_reference<char const (&)[6]>::type *)std::forward<char const(&)[6]>(a6);
    v14 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v15 = (const char *)std::forward<char const(&)[9]>(a4);
    std::string::basic_string<std::allocator<char>>(&v22, v15, &__a);
    v9 = getRequestParam<unsigned int,char const(&)[6],unsigned int &,char const(&)[7],std::string &>(
           request,
           &v22,
           v14,
           v13,
           v12,
           v11,
           v10);
    std::string::~string(&v22);
    std::allocator<char>::~allocator(&__a);
  }
  return v9;
};

// Line 69: range 000000000CCD19EE-000000000CCD1B01
__int64 __fastcall getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[9]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[7]>::type *a6,
        std::string *args_3)
{
  unsigned int v7; // ebx
  std::string *v8; // r13
  std::remove_reference<char const (&)[7]>::type *v9; // r12
  unsigned int *v10; // rbx
  const char *v11; // rax
  const char (*v12)[7]; // r9
  std::allocator<char> __a; // [rsp+3Bh] [rbp-45h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-44h]
  std::string v19; // [rsp+40h] [rbp-40h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v8 = std::forward<std::string &>(args_3);
    v9 = (std::remove_reference<char const (&)[7]>::type *)std::forward<char const(&)[7]>(a6);
    v10 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v11 = (const char *)std::forward<char const(&)[9]>(a4);
    std::string::basic_string<std::allocator<char>>(&v19, v11, &__a);
    v7 = getRequestParam<unsigned int,char const(&)[7],std::string &>(request, &v19, v10, v9, v8, v12);
    std::string::~string(&v19);
    std::allocator<char>::~allocator(&__a);
  }
  return v7;
};

// Line 69: range 000000000CD5C6B1-000000000CD5C802
__int64 __fastcall getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[8],bool &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[9]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[8]>::type *a6,
        bool *args_3,
        std::remove_reference<char const (&)[7]>::type *args_4,
        std::string *args_5)
{
  unsigned int v9; // ebx
  std::string *v10; // rbx
  std::remove_reference<char const (&)[7]>::type *v11; // r15
  bool *v12; // r14
  std::remove_reference<char const (&)[8]>::type *v13; // r13
  unsigned int *v14; // r12
  const char *v15; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-54h]
  std::string v22; // [rsp+40h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v10 = std::forward<std::string &>(args_5);
    v11 = (std::remove_reference<char const (&)[7]>::type *)std::forward<char const(&)[7]>(args_4);
    v12 = std::forward<bool &>(args_3);
    v13 = (std::remove_reference<char const (&)[8]>::type *)std::forward<char const(&)[8]>(a6);
    v14 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v15 = (const char *)std::forward<char const(&)[9]>(a4);
    std::string::basic_string<std::allocator<char>>(&v22, v15, &__a);
    v9 = getRequestParam<unsigned int,char const(&)[8],bool &,char const(&)[7],std::string &>(
           request,
           &v22,
           v14,
           v13,
           v12,
           v11,
           v10);
    std::string::~string(&v22);
    std::allocator<char>::~allocator(&__a);
  }
  return v9;
};

// Line 69: range 000000000CD5BB6B-000000000CD5BCBC
__int64 __fastcall getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[8],unsigned int &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[9]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[8]>::type *a6,
        unsigned int *args_3,
        std::remove_reference<char const (&)[7]>::type *args_4,
        std::string *args_5)
{
  unsigned int v9; // ebx
  std::string *v10; // rbx
  std::remove_reference<char const (&)[7]>::type *v11; // r15
  unsigned int *v12; // r14
  std::remove_reference<char const (&)[8]>::type *v13; // r13
  unsigned int *v14; // r12
  const char *v15; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-54h]
  std::string v22; // [rsp+40h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v10 = std::forward<std::string &>(args_5);
    v11 = (std::remove_reference<char const (&)[7]>::type *)std::forward<char const(&)[7]>(args_4);
    v12 = std::forward<unsigned int &>(args_3);
    v13 = (std::remove_reference<char const (&)[8]>::type *)std::forward<char const(&)[8]>(a6);
    v14 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v15 = (const char *)std::forward<char const(&)[9]>(a4);
    std::string::basic_string<std::allocator<char>>(&v22, v15, &__a);
    v9 = getRequestParam<unsigned int,char const(&)[8],unsigned int &,char const(&)[7],std::string &>(
           request,
           &v22,
           v14,
           v13,
           v12,
           v11,
           v10);
    std::string::~string(&v22);
    std::allocator<char>::~allocator(&__a);
  }
  return v9;
};

// Line 69: range 000000000CCC9360-000000000CCC94E3
__int64 __fastcall getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[9],unsigned int &,char const(&)[10],bool &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[9]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[9]>::type *a6,
        unsigned int *args_3,
        std::remove_reference<char const (&)[10]>::type *args_4,
        bool *args_5,
        std::remove_reference<char const (&)[7]>::type *args_6,
        std::string *args_7)
{
  unsigned int v11; // ebx
  std::string *v12; // r13
  std::remove_reference<char const (&)[7]>::type *v13; // r12
  bool *v14; // rbx
  std::remove_reference<char const (&)[9]>::type *v15; // r15
  unsigned int *v16; // r14
  const char *v17; // rax
  unsigned int *v19; // [rsp+0h] [rbp-A0h]
  char (*v20)[10]; // [rsp+8h] [rbp-98h]
  std::allocator<char> __a; // [rsp+4Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+4Ch] [rbp-54h]
  std::string v26; // [rsp+50h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v12 = std::forward<std::string &>(args_7);
    v13 = (std::remove_reference<char const (&)[7]>::type *)std::forward<char const(&)[7]>(args_6);
    v14 = std::forward<bool &>(args_5);
    v20 = (char (*)[10])std::forward<char const(&)[10]>(args_4);
    v19 = std::forward<unsigned int &>(args_3);
    v15 = (std::remove_reference<char const (&)[9]>::type *)std::forward<char const(&)[9]>(a6);
    v16 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v17 = (const char *)std::forward<char const(&)[9]>(a4);
    std::string::basic_string<std::allocator<char>>(&v26, v17, &__a);
    v11 = getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[10],bool &,char const(&)[7],std::string &>(
            request,
            &v26,
            v16,
            v15,
            v19,
            v20,
            v14,
            v13,
            v12);
    std::string::~string(&v26);
    std::allocator<char>::~allocator(&__a);
  }
  return v11;
};

// Line 69: range 000000000CCC88D3-000000000CCC8ABD
__int64 __fastcall getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[9],unsigned int &,char const(&)[10],unsigned int &,char const(&)[6],unsigned int &,char const(&)[10],bool &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[9]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[9]>::type *a6,
        unsigned int *args_3,
        std::remove_reference<char const (&)[10]>::type *args_4,
        unsigned int *args_5,
        std::remove_reference<char const (&)[6]>::type *args_6,
        unsigned int *args_7,
        std::remove_reference<char const (&)[10]>::type *args_8,
        bool *args_9,
        std::remove_reference<char const (&)[7]>::type *args_10,
        std::string *args_11)
{
  unsigned int v15; // ebx
  bool *v16; // r15
  std::remove_reference<char const (&)[10]>::type *v17; // r14
  unsigned int *v18; // r13
  std::remove_reference<char const (&)[6]>::type *v19; // r12
  unsigned int *v20; // rbx
  const char *v21; // rax
  unsigned int *v23; // [rsp+0h] [rbp-C0h]
  char (*v24)[9]; // [rsp+8h] [rbp-B8h]
  unsigned int *v25; // [rsp+10h] [rbp-B0h]
  char (*v26)[10]; // [rsp+18h] [rbp-A8h]
  char (*v27)[7]; // [rsp+20h] [rbp-A0h]
  std::string *v28; // [rsp+28h] [rbp-98h]
  std::allocator<char> __a; // [rsp+6Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+6Ch] [rbp-54h]
  std::string v34; // [rsp+70h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v28 = std::forward<std::string &>(args_11);
    v27 = (char (*)[7])std::forward<char const(&)[7]>(args_10);
    v16 = std::forward<bool &>(args_9);
    v17 = (std::remove_reference<char const (&)[10]>::type *)std::forward<char const(&)[10]>(args_8);
    v18 = std::forward<unsigned int &>(args_7);
    v19 = (std::remove_reference<char const (&)[6]>::type *)std::forward<char const(&)[6]>(args_6);
    v20 = std::forward<unsigned int &>(args_5);
    v26 = (char (*)[10])std::forward<char const(&)[10]>(args_4);
    v25 = std::forward<unsigned int &>(args_3);
    v24 = (char (*)[9])std::forward<char const(&)[9]>(a6);
    v23 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v21 = (const char *)std::forward<char const(&)[9]>(a4);
    std::string::basic_string<std::allocator<char>>(&v34, v21, &__a);
    v15 = getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[10],unsigned int &,char const(&)[6],unsigned int &,char const(&)[10],bool &,char const(&)[7],std::string &>(
            request,
            &v34,
            v23,
            v24,
            v25,
            v26,
            v20,
            v19,
            v18,
            v17,
            v16,
            v27,
            v28);
    std::string::~string(&v34);
    std::allocator<char>::~allocator(&__a);
  }
  return v15;
};

// Line 69: range 000000000CCC871A-000000000CCC88D2
__int64 __fastcall getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[9],unsigned int &,char const(&)[10],unsigned int &,char const(&)[7],bool &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[9]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[9]>::type *a6,
        unsigned int *args_3,
        std::remove_reference<char const (&)[10]>::type *args_4,
        unsigned int *args_5,
        std::remove_reference<char const (&)[7]>::type *args_6,
        bool *args_7,
        std::remove_reference<char const (&)[7]>::type *args_8,
        std::string *args_9)
{
  unsigned int v13; // ebx
  std::string *v14; // r15
  std::remove_reference<char const (&)[7]>::type *v15; // r14
  bool *v16; // r13
  std::remove_reference<char const (&)[7]>::type *v17; // r12
  unsigned int *v18; // rbx
  const char *v19; // rax
  unsigned int *v21; // [rsp+0h] [rbp-B0h]
  char (*v22)[9]; // [rsp+8h] [rbp-A8h]
  unsigned int *v23; // [rsp+10h] [rbp-A0h]
  char (*v24)[10]; // [rsp+18h] [rbp-98h]
  std::allocator<char> __a; // [rsp+5Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+5Ch] [rbp-54h]
  std::string v30; // [rsp+60h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v14 = std::forward<std::string &>(args_9);
    v15 = (std::remove_reference<char const (&)[7]>::type *)std::forward<char const(&)[7]>(args_8);
    v16 = std::forward<bool &>(args_7);
    v17 = (std::remove_reference<char const (&)[7]>::type *)std::forward<char const(&)[7]>(args_6);
    v18 = std::forward<unsigned int &>(args_5);
    v24 = (char (*)[10])std::forward<char const(&)[10]>(args_4);
    v23 = std::forward<unsigned int &>(args_3);
    v22 = (char (*)[9])std::forward<char const(&)[9]>(a6);
    v21 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v19 = (const char *)std::forward<char const(&)[9]>(a4);
    std::string::basic_string<std::allocator<char>>(&v30, v19, &__a);
    v13 = getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[10],unsigned int &,char const(&)[7],bool &,char const(&)[7],std::string &>(
            request,
            &v30,
            v21,
            v22,
            v23,
            v24,
            v18,
            v17,
            v16,
            v15,
            v14);
    std::string::~string(&v30);
    std::allocator<char>::~allocator(&__a);
  }
  return v13;
};

// Line 69: range 000000000CCC8596-000000000CCC8719
__int64 __fastcall getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[9],unsigned int &,char const(&)[10],unsigned int &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[9]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[9]>::type *a6,
        unsigned int *args_3,
        std::remove_reference<char const (&)[10]>::type *args_4,
        unsigned int *args_5,
        std::remove_reference<char const (&)[7]>::type *args_6,
        std::string *args_7)
{
  unsigned int v11; // ebx
  std::string *v12; // r13
  std::remove_reference<char const (&)[7]>::type *v13; // r12
  unsigned int *v14; // rbx
  std::remove_reference<char const (&)[9]>::type *v15; // r15
  unsigned int *v16; // r14
  const char *v17; // rax
  unsigned int *v19; // [rsp+0h] [rbp-A0h]
  char (*v20)[10]; // [rsp+8h] [rbp-98h]
  std::allocator<char> __a; // [rsp+4Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+4Ch] [rbp-54h]
  std::string v26; // [rsp+50h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v12 = std::forward<std::string &>(args_7);
    v13 = (std::remove_reference<char const (&)[7]>::type *)std::forward<char const(&)[7]>(args_6);
    v14 = std::forward<unsigned int &>(args_5);
    v20 = (char (*)[10])std::forward<char const(&)[10]>(args_4);
    v19 = std::forward<unsigned int &>(args_3);
    v15 = (std::remove_reference<char const (&)[9]>::type *)std::forward<char const(&)[9]>(a6);
    v16 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v17 = (const char *)std::forward<char const(&)[9]>(a4);
    std::string::basic_string<std::allocator<char>>(&v26, v17, &__a);
    v11 = getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[10],unsigned int &,char const(&)[7],std::string &>(
            request,
            &v26,
            v16,
            v15,
            v19,
            v20,
            v14,
            v13,
            v12);
    std::string::~string(&v26);
    std::allocator<char>::~allocator(&__a);
  }
  return v11;
};

// Line 69: range 000000000CCC8C42-000000000CCC8DFA
__int64 __fastcall getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[9],unsigned int &,char const(&)[13],std::string &,char const(&)[14],unsigned int &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[9]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[9]>::type *a6,
        unsigned int *args_3,
        std::remove_reference<char const (&)[13]>::type *args_4,
        std::string *args_5,
        std::remove_reference<char const (&)[14]>::type *args_6,
        unsigned int *args_7,
        std::remove_reference<char const (&)[7]>::type *args_8,
        std::string *args_9)
{
  unsigned int v13; // ebx
  std::string *v14; // r15
  std::remove_reference<char const (&)[7]>::type *v15; // r14
  unsigned int *v16; // r13
  std::remove_reference<char const (&)[14]>::type *v17; // r12
  std::string *v18; // rbx
  const char *v19; // rax
  unsigned int *v21; // [rsp+0h] [rbp-B0h]
  char (*v22)[9]; // [rsp+8h] [rbp-A8h]
  unsigned int *v23; // [rsp+10h] [rbp-A0h]
  char (*v24)[13]; // [rsp+18h] [rbp-98h]
  std::allocator<char> __a; // [rsp+5Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+5Ch] [rbp-54h]
  std::string v30; // [rsp+60h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v14 = std::forward<std::string &>(args_9);
    v15 = (std::remove_reference<char const (&)[7]>::type *)std::forward<char const(&)[7]>(args_8);
    v16 = std::forward<unsigned int &>(args_7);
    v17 = (std::remove_reference<char const (&)[14]>::type *)std::forward<char const(&)[14]>(args_6);
    v18 = std::forward<std::string &>(args_5);
    v24 = (char (*)[13])std::forward<char const(&)[13]>(args_4);
    v23 = std::forward<unsigned int &>(args_3);
    v22 = (char (*)[9])std::forward<char const(&)[9]>(a6);
    v21 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v19 = (const char *)std::forward<char const(&)[9]>(a4);
    std::string::basic_string<std::allocator<char>>(&v30, v19, &__a);
    v13 = getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[13],std::string &,char const(&)[14],unsigned int &,char const(&)[7],std::string &>(
            request,
            &v30,
            v21,
            v22,
            v23,
            v24,
            v18,
            v17,
            v16,
            v15,
            v14);
    std::string::~string(&v30);
    std::allocator<char>::~allocator(&__a);
  }
  return v13;
};

// Line 69: range 000000000CCC8ABE-000000000CCC8C41
__int64 __fastcall getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[9],unsigned int &,char const(&)[13],std::string &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[9]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[9]>::type *a6,
        unsigned int *args_3,
        std::remove_reference<char const (&)[13]>::type *args_4,
        std::string *args_5,
        std::remove_reference<char const (&)[7]>::type *args_6,
        std::string *args_7)
{
  unsigned int v11; // ebx
  std::string *v12; // r13
  std::remove_reference<char const (&)[7]>::type *v13; // r12
  std::string *v14; // rbx
  std::remove_reference<char const (&)[9]>::type *v15; // r15
  unsigned int *v16; // r14
  const char *v17; // rax
  unsigned int *v19; // [rsp+0h] [rbp-A0h]
  char (*v20)[13]; // [rsp+8h] [rbp-98h]
  std::allocator<char> __a; // [rsp+4Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+4Ch] [rbp-54h]
  std::string v26; // [rsp+50h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v12 = std::forward<std::string &>(args_7);
    v13 = (std::remove_reference<char const (&)[7]>::type *)std::forward<char const(&)[7]>(args_6);
    v14 = std::forward<std::string &>(args_5);
    v20 = (char (*)[13])std::forward<char const(&)[13]>(args_4);
    v19 = std::forward<unsigned int &>(args_3);
    v15 = (std::remove_reference<char const (&)[9]>::type *)std::forward<char const(&)[9]>(a6);
    v16 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v17 = (const char *)std::forward<char const(&)[9]>(a4);
    std::string::basic_string<std::allocator<char>>(&v26, v17, &__a);
    v11 = getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[13],std::string &,char const(&)[7],std::string &>(
            request,
            &v26,
            v16,
            v15,
            v19,
            v20,
            v14,
            v13,
            v12);
    std::string::~string(&v26);
    std::allocator<char>::~allocator(&__a);
  }
  return v11;
};

// Line 69: range 000000000CCC8FB4-000000000CCC9137
__int64 __fastcall getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[9],unsigned int &,char const(&)[13],unsigned int &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[9]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[9]>::type *a6,
        unsigned int *args_3,
        std::remove_reference<char const (&)[13]>::type *args_4,
        unsigned int *args_5,
        std::remove_reference<char const (&)[7]>::type *args_6,
        std::string *args_7)
{
  unsigned int v11; // ebx
  std::string *v12; // r13
  std::remove_reference<char const (&)[7]>::type *v13; // r12
  unsigned int *v14; // rbx
  std::remove_reference<char const (&)[9]>::type *v15; // r15
  unsigned int *v16; // r14
  const char *v17; // rax
  unsigned int *v19; // [rsp+0h] [rbp-A0h]
  char (*v20)[13]; // [rsp+8h] [rbp-98h]
  std::allocator<char> __a; // [rsp+4Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+4Ch] [rbp-54h]
  std::string v26; // [rsp+50h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v12 = std::forward<std::string &>(args_7);
    v13 = (std::remove_reference<char const (&)[7]>::type *)std::forward<char const(&)[7]>(args_6);
    v14 = std::forward<unsigned int &>(args_5);
    v20 = (char (*)[13])std::forward<char const(&)[13]>(args_4);
    v19 = std::forward<unsigned int &>(args_3);
    v15 = (std::remove_reference<char const (&)[9]>::type *)std::forward<char const(&)[9]>(a6);
    v16 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v17 = (const char *)std::forward<char const(&)[9]>(a4);
    std::string::basic_string<std::allocator<char>>(&v26, v17, &__a);
    v11 = getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[13],unsigned int &,char const(&)[7],std::string &>(
            request,
            &v26,
            v16,
            v15,
            v19,
            v20,
            v14,
            v13,
            v12);
    std::string::~string(&v26);
    std::allocator<char>::~allocator(&__a);
  }
  return v11;
};

// Line 69: range 000000000CCC8DFB-000000000CCC8FB3
__int64 __fastcall getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[9],unsigned int &,char const(&)[14],std::string &,char const(&)[6],int &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[9]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[9]>::type *a6,
        unsigned int *args_3,
        std::remove_reference<char const (&)[14]>::type *args_4,
        std::string *args_5,
        std::remove_reference<char const (&)[6]>::type *args_6,
        int *args_7,
        std::remove_reference<char const (&)[7]>::type *args_8,
        std::string *args_9)
{
  unsigned int v13; // ebx
  std::string *v14; // r15
  std::remove_reference<char const (&)[7]>::type *v15; // r14
  int *v16; // r13
  std::remove_reference<char const (&)[6]>::type *v17; // r12
  std::string *v18; // rbx
  const char *v19; // rax
  unsigned int *v21; // [rsp+0h] [rbp-B0h]
  char (*v22)[9]; // [rsp+8h] [rbp-A8h]
  unsigned int *v23; // [rsp+10h] [rbp-A0h]
  char (*v24)[14]; // [rsp+18h] [rbp-98h]
  std::allocator<char> __a; // [rsp+5Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+5Ch] [rbp-54h]
  std::string v30; // [rsp+60h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v14 = std::forward<std::string &>(args_9);
    v15 = (std::remove_reference<char const (&)[7]>::type *)std::forward<char const(&)[7]>(args_8);
    v16 = std::forward<int &>(args_7);
    v17 = (std::remove_reference<char const (&)[6]>::type *)std::forward<char const(&)[6]>(args_6);
    v18 = std::forward<std::string &>(args_5);
    v24 = (char (*)[14])std::forward<char const(&)[14]>(args_4);
    v23 = std::forward<unsigned int &>(args_3);
    v22 = (char (*)[9])std::forward<char const(&)[9]>(a6);
    v21 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v19 = (const char *)std::forward<char const(&)[9]>(a4);
    std::string::basic_string<std::allocator<char>>(&v30, v19, &__a);
    v13 = getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[14],std::string &,char const(&)[6],int &,char const(&)[7],std::string &>(
            request,
            &v30,
            v21,
            v22,
            v23,
            v24,
            v18,
            v17,
            v16,
            v15,
            v14);
    std::string::~string(&v30);
    std::allocator<char>::~allocator(&__a);
  }
  return v13;
};

// Line 69: range 000000000CCC8444-000000000CCC8595
__int64 __fastcall getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[9],unsigned int &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[9]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[9]>::type *a6,
        unsigned int *args_3,
        std::remove_reference<char const (&)[7]>::type *args_4,
        std::string *args_5)
{
  unsigned int v9; // ebx
  std::string *v10; // rbx
  std::remove_reference<char const (&)[7]>::type *v11; // r15
  unsigned int *v12; // r14
  std::remove_reference<char const (&)[9]>::type *v13; // r13
  unsigned int *v14; // r12
  const char *v15; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-54h]
  std::string v22; // [rsp+40h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v10 = std::forward<std::string &>(args_5);
    v11 = (std::remove_reference<char const (&)[7]>::type *)std::forward<char const(&)[7]>(args_4);
    v12 = std::forward<unsigned int &>(args_3);
    v13 = (std::remove_reference<char const (&)[9]>::type *)std::forward<char const(&)[9]>(a6);
    v14 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v15 = (const char *)std::forward<char const(&)[9]>(a4);
    std::string::basic_string<std::allocator<char>>(&v22, v15, &__a);
    v9 = getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[7],std::string &>(
           request,
           &v22,
           v14,
           v13,
           v12,
           v11,
           v10);
    std::string::~string(&v22);
    std::allocator<char>::~allocator(&__a);
  }
  return v9;
};

// Line 74: range 000000000CCC317E-000000000CCC337C
ApiRetcode __cdecl getRequestParam<std::string>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        std::string *value)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  common::milog::MiLogStream *v6; // rdx
  common::milog::MiLogStream *v7; // rax
  ApiRetcode result; // eax
  std::_Rb_tree_const_iterator<std::pair<const std::string,std::string > >::pointer v9; // rax
  std::_Rb_tree_const_iterator<std::pair<const std::string,std::string > >::_Self __y; // [rsp+28h] [rbp-88h] BYREF
  common::milog::MiLogStream v12; // [rsp+30h] [rbp-80h] BYREF
  char v13[96]; // [rsp+50h] [rbp-60h] BYREF

  v3 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 8 7 iter:58";
  *(_QWORD *)(v3 + 16) = getRequestParam<std::string>;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116352;
  *(std::map<std::string,std::string>::const_iterator *)(v3 + 32) = std::map<std::string,std::string>::find(
                                                                      &request->param_map,
                                                                      key);
  __y._M_node = std::map<std::string,std::string>::end(&request->param_map)._M_node;
  if ( std::operator==(
         (const std::_Rb_tree_const_iterator<std::pair<const std::string,std::string > >::_Self *)(v3 + 32),
         &__y) )
  {
    common::milog::MiLogStream::create(
      &v12,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/handler/request_handler.api.hpp",
      "getRequestParam",
      61);
    v6 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(&v12, (const char (*)[6])"key: ");
    v7 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v6, key);
    common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v7, (const char (*)[11])" not found");
    common::milog::MiLogStream::~MiLogStream(&v12);
    result = RETCODE_PARA_ERROR;
  }
  else
  {
    v9 = std::_Rb_tree_const_iterator<std::pair<std::string const,std::string>>::operator->((const std::_Rb_tree_const_iterator<std::pair<const std::string,std::string > > *const)(v3 + 32));
    common::tools::Converter<std::string>::convertTo((std::string *)&v12, &v9->second);
    std::string::operator=(value, &v12);
    std::string::~string(&v12);
    result = RETCODE_SUCC_0;
  }
  if ( v13 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 74: range 000000000CCC1614-000000000CCC182F
ApiRetcode __cdecl getRequestParam<unsigned int>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *value)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  std::_Rb_tree_const_iterator<std::pair<const std::string,std::string > >::_Self *p_y; // rsi
  common::milog::MiLogStream *v7; // rdx
  common::milog::MiLogStream *v8; // rax
  ApiRetcode result; // eax
  std::_Rb_tree_const_iterator<std::pair<const std::string,std::string > >::pointer v10; // rax
  unsigned int v11; // ecx
  char v12; // dl
  std::_Rb_tree_const_iterator<std::pair<const std::string,std::string > >::_Self __y; // [rsp+28h] [rbp-88h] BYREF
  common::milog::MiLogStream v16; // [rsp+30h] [rbp-80h] BYREF
  char v17[96]; // [rsp+50h] [rbp-60h] BYREF

  v3 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 8 7 iter:58";
  *(_QWORD *)(v3 + 16) = getRequestParam<unsigned int>;
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202116352;
  *(std::map<std::string,std::string>::const_iterator *)(v3 + 32) = std::map<std::string,std::string>::find(
                                                                      &request->param_map,
                                                                      key);
  __y._M_node = std::map<std::string,std::string>::end(&request->param_map)._M_node;
  p_y = &__y;
  if ( std::operator==(
         (const std::_Rb_tree_const_iterator<std::pair<const std::string,std::string > >::_Self *)(v3 + 32),
         &__y) )
  {
    common::milog::MiLogStream::create(
      &v16,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/handler/request_handler.api.hpp",
      "getRequestParam",
      61);
    v7 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(&v16, (const char (*)[6])"key: ");
    v8 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v7, key);
    common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v8, (const char (*)[11])" not found");
    common::milog::MiLogStream::~MiLogStream(&v16);
    result = RETCODE_PARA_ERROR;
  }
  else
  {
    v10 = std::_Rb_tree_const_iterator<std::pair<std::string const,std::string>>::operator->((const std::_Rb_tree_const_iterator<std::pair<const std::string,std::string > > *const)(v3 + 32));
    v11 = common::tools::Converter<unsigned int>::convertTo(&v10->second);
    v12 = *(_BYTE *)(((unsigned __int64)value >> 3) + 0x7FFF8000);
    if ( v12 != 0 && (char)(((unsigned __int8)value & 7) + 3) >= v12 )
    {
      LOBYTE(p_y) = v12 != 0;
      __asan_report_store4(value, p_y);
    }
    *value = v11;
    result = RETCODE_SUCC_0;
  }
  if ( v17 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 74: range 000000000CCC67C2-000000000CCC68A8
__int64 __fastcall getRequestParam<std::string,char const(&)[12],std::string&>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        std::string *para,
        std::remove_reference<char const (&)[12]>::type *a4,
        std::string *a5,
        const char (*args_0)[12])
{
  ApiRetcode v6; // ebx
  std::string *v7; // rbx
  const char *v8; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-35h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-34h]
  std::string v14; // [rsp+40h] [rbp-30h] BYREF

  ret = getRequestParam<std::string>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v7 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v8 = (const char *)std::forward<char const(&)[12]>(a4);
    std::string::basic_string<std::allocator<char>>(&v14, v8, &__a);
    v6 = getRequestParam<std::string>(request, &v14, v7);
    std::string::~string(&v14);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v6;
};

// Line 74: range 000000000CCD325A-000000000CCD33DD
__int64 __fastcall getRequestParam<unsigned int,char const(&)[10],unsigned int &,char const(&)[9],unsigned int &,char const(&)[8],unsigned int &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[10]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[9]>::type *a6,
        unsigned int *args_3,
        std::remove_reference<char const (&)[8]>::type *args_4,
        unsigned int *args_5,
        std::remove_reference<char const (&)[7]>::type *args_6,
        std::string *args_7)
{
  unsigned int v11; // ebx
  std::string *v12; // r13
  std::remove_reference<char const (&)[7]>::type *v13; // r12
  unsigned int *v14; // rbx
  std::remove_reference<char const (&)[9]>::type *v15; // r15
  unsigned int *v16; // r14
  const char *v17; // rax
  unsigned int *v19; // [rsp+0h] [rbp-A0h]
  char (*v20)[8]; // [rsp+8h] [rbp-98h]
  std::allocator<char> __a; // [rsp+4Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+4Ch] [rbp-54h]
  std::string v26; // [rsp+50h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v12 = std::forward<std::string &>(args_7);
    v13 = (std::remove_reference<char const (&)[7]>::type *)std::forward<char const(&)[7]>(args_6);
    v14 = std::forward<unsigned int &>(args_5);
    v20 = (char (*)[8])std::forward<char const(&)[8]>(args_4);
    v19 = std::forward<unsigned int &>(args_3);
    v15 = (std::remove_reference<char const (&)[9]>::type *)std::forward<char const(&)[9]>(a6);
    v16 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v17 = (const char *)std::forward<char const(&)[10]>(a4);
    std::string::basic_string<std::allocator<char>>(&v26, v17, &__a);
    v11 = getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[8],unsigned int &,char const(&)[7],std::string &>(
            request,
            &v26,
            v16,
            v15,
            v19,
            v20,
            v14,
            v13,
            v12);
    std::string::~string(&v26);
    std::allocator<char>::~allocator(&__a);
  }
  return v11;
};

// Line 74: range 000000000CCC6636-000000000CCC671C
__int64 __fastcall getRequestParam<unsigned int,char const(&)[10],unsigned long &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[10]>::type *a4,
        unsigned __int64 *a5,
        const char (*args_0)[10])
{
  ApiRetcode v6; // ebx
  unsigned __int64 *v7; // rbx
  const char *v8; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-35h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-34h]
  std::string v14; // [rsp+40h] [rbp-30h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v7 = std::forward<unsigned long &>(a5);
    std::allocator<char>::allocator(&__a);
    v8 = (const char *)std::forward<char const(&)[10]>(a4);
    std::string::basic_string<std::allocator<char>>(&v14, v8, &__a);
    v6 = getRequestParam<unsigned long>(request, &v14, v7);
    std::string::~string(&v14);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v6;
};

// Line 74: range 000000000CCC55EC-000000000CCC56FF
__int64 __fastcall getRequestParam<unsigned int,char const(&)[11],std::string &,char const(&)[9],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[11]>::type *a4,
        std::string *a5,
        std::remove_reference<char const (&)[9]>::type *a6,
        std::string *args_3)
{
  ApiRetcode v7; // ebx
  std::string *v8; // r13
  const char (*v9)[9]; // r12
  std::string *v10; // rbx
  const char *v11; // rax
  const char (*v12)[9]; // r9
  std::allocator<char> __a; // [rsp+3Bh] [rbp-45h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-44h]
  std::string v19; // [rsp+40h] [rbp-40h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v8 = std::forward<std::string &>(args_3);
    v9 = std::forward<char const(&)[9]>(a6);
    v10 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v11 = (const char *)std::forward<char const(&)[11]>(a4);
    std::string::basic_string<std::allocator<char>>(&v19, v11, &__a);
    v7 = getRequestParam<std::string,char const(&)[9],std::string&>(request, &v19, v10, v9, v8, v12, (std::string *)a6);
    std::string::~string(&v19);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v7;
};

// Line 74: range 000000000CCCF936-000000000CCCFA49
__int64 __fastcall getRequestParam<unsigned int,char const(&)[11],unsigned int &,char const(&)[15],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[11]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[15]>::type *a6,
        unsigned int *args_3)
{
  unsigned int v7; // ebx
  unsigned int *v8; // r13
  std::remove_reference<char const (&)[15]>::type *v9; // r12
  unsigned int *v10; // rbx
  const char *v11; // rax
  const char (*v12)[15]; // r9
  std::allocator<char> __a; // [rsp+3Bh] [rbp-45h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-44h]
  std::string v19; // [rsp+40h] [rbp-40h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v8 = std::forward<unsigned int &>(args_3);
    v9 = (std::remove_reference<char const (&)[15]>::type *)std::forward<char const(&)[15]>(a6);
    v10 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v11 = (const char *)std::forward<char const(&)[11]>(a4);
    std::string::basic_string<std::allocator<char>>(&v19, v11, &__a);
    v7 = getRequestParam<unsigned int,char const(&)[15],unsigned int &>(request, &v19, v10, v9, v8, v12);
    std::string::~string(&v19);
    std::allocator<char>::~allocator(&__a);
  }
  return v7;
};

// Line 74: range 000000000CCC190D-000000000CCC19F3
__int64 __fastcall getRequestParam<unsigned int,char const(&)[12],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[12]>::type *a4,
        std::string *a5,
        const char (*args_0)[12])
{
  ApiRetcode v6; // ebx
  std::string *v7; // rbx
  const char *v8; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-35h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-34h]
  std::string v14; // [rsp+40h] [rbp-30h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v7 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v8 = (const char *)std::forward<char const(&)[12]>(a4);
    std::string::basic_string<std::allocator<char>>(&v14, v8, &__a);
    v6 = getRequestParam<std::string>(request, &v14, v7);
    std::string::~string(&v14);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v6;
};

// Line 74: range 000000000CCD7FB4-000000000CCD80C7
__int64 __fastcall getRequestParam<unsigned int,char const(&)[13],unsigned int &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[13]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[7]>::type *a6,
        std::string *args_3)
{
  unsigned int v7; // ebx
  std::string *v8; // r13
  std::remove_reference<char const (&)[7]>::type *v9; // r12
  unsigned int *v10; // rbx
  const char *v11; // rax
  const char (*v12)[7]; // r9
  std::allocator<char> __a; // [rsp+3Bh] [rbp-45h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-44h]
  std::string v19; // [rsp+40h] [rbp-40h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v8 = std::forward<std::string &>(args_3);
    v9 = (std::remove_reference<char const (&)[7]>::type *)std::forward<char const(&)[7]>(a6);
    v10 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v11 = (const char *)std::forward<char const(&)[13]>(a4);
    std::string::basic_string<std::allocator<char>>(&v19, v11, &__a);
    v7 = getRequestParam<unsigned int,char const(&)[7],std::string &>(request, &v19, v10, v9, v8, v12);
    std::string::~string(&v19);
    std::allocator<char>::~allocator(&__a);
  }
  return v7;
};

// Line 74: range 000000000CCC5C20-000000000CCC5D06
__int64 __fastcall getRequestParam<unsigned int,char const(&)[14],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[14]>::type *a4,
        std::string *a5,
        const char (*args_0)[14])
{
  ApiRetcode v6; // ebx
  std::string *v7; // rbx
  const char *v8; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-35h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-34h]
  std::string v14; // [rsp+40h] [rbp-30h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v7 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v8 = (const char *)std::forward<char const(&)[14]>(a4);
    std::string::basic_string<std::allocator<char>>(&v14, v8, &__a);
    v6 = getRequestParam<std::string>(request, &v14, v7);
    std::string::~string(&v14);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v6;
};

// Line 74: range 000000000CCCED9C-000000000CCCEE82
__int64 __fastcall getRequestParam<unsigned int,char const(&)[15],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[15]>::type *a4,
        std::string *a5,
        const char (*args_0)[15])
{
  ApiRetcode v6; // ebx
  std::string *v7; // rbx
  const char *v8; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-35h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-34h]
  std::string v14; // [rsp+40h] [rbp-30h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v7 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v8 = (const char *)std::forward<char const(&)[15]>(a4);
    std::string::basic_string<std::allocator<char>>(&v14, v8, &__a);
    v6 = getRequestParam<std::string>(request, &v14, v7);
    std::string::~string(&v14);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v6;
};

// Line 74: range 000000000CCC6434-000000000CCC651A
__int64 __fastcall getRequestParam<unsigned int,char const(&)[16],unsigned long &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[16]>::type *a4,
        unsigned __int64 *a5,
        const char (*args_0)[16])
{
  ApiRetcode v6; // ebx
  unsigned __int64 *v7; // rbx
  const char *v8; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-35h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-34h]
  std::string v14; // [rsp+40h] [rbp-30h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v7 = std::forward<unsigned long &>(a5);
    std::allocator<char>::allocator(&__a);
    v8 = (const char *)std::forward<char const(&)[16]>(a4);
    std::string::basic_string<std::allocator<char>>(&v14, v8, &__a);
    v6 = getRequestParam<unsigned long>(request, &v14, v7);
    std::string::~string(&v14);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v6;
};

// Line 74: range 000000000CCCF388-000000000CCCF46E
__int64 __fastcall getRequestParam<unsigned int,char const(&)[20],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[20]>::type *a4,
        std::string *a5,
        const char (*args_0)[20])
{
  ApiRetcode v6; // ebx
  std::string *v7; // rbx
  const char *v8; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-35h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-34h]
  std::string v14; // [rsp+40h] [rbp-30h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v7 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v8 = (const char *)std::forward<char const(&)[20]>(a4);
    std::string::basic_string<std::allocator<char>>(&v14, v8, &__a);
    v6 = getRequestParam<std::string>(request, &v14, v7);
    std::string::~string(&v14);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v6;
};

// Line 74: range 000000000CCD0282-000000000CCD0368
__int64 __fastcall getRequestParam<unsigned int,char const(&)[5],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[5]>::type *a4,
        std::string *a5,
        const char (*args_0)[5])
{
  ApiRetcode v6; // ebx
  std::string *v7; // rbx
  const char *v8; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-35h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-34h]
  std::string v14; // [rsp+40h] [rbp-30h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v7 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v8 = (const char *)std::forward<char const(&)[5]>(a4);
    std::string::basic_string<std::allocator<char>>(&v14, v8, &__a);
    v6 = getRequestParam<std::string>(request, &v14, v7);
    std::string::~string(&v14);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v6;
};

// Line 74: range 000000000CCCFC7C-000000000CCCFD8F
__int64 __fastcall getRequestParam<unsigned int,char const(&)[5],unsigned int &,char const(&)[4],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[5]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[4]>::type *a6,
        std::string *args_3)
{
  ApiRetcode v7; // ebx
  std::string *v8; // r13
  const char (*v9)[4]; // r12
  unsigned int *v10; // rbx
  const char *v11; // rax
  const char (*v12)[4]; // r9
  std::allocator<char> __a; // [rsp+3Bh] [rbp-45h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-44h]
  std::string v19; // [rsp+40h] [rbp-40h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v8 = std::forward<std::string &>(args_3);
    v9 = std::forward<char const(&)[4]>(a6);
    v10 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v11 = (const char *)std::forward<char const(&)[5]>(a4);
    std::string::basic_string<std::allocator<char>>(&v19, v11, &__a);
    v7 = getRequestParam<unsigned int,char const(&)[4],std::string &>(
           request,
           &v19,
           v10,
           v9,
           v8,
           v12,
           (std::string *)a6);
    std::string::~string(&v19);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v7;
};

// Line 74: range 000000000CCCB680-000000000CCCB793
__int64 __fastcall getRequestParam<unsigned int,char const(&)[5],unsigned long &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[5]>::type *a4,
        unsigned __int64 *a5,
        std::remove_reference<char const (&)[7]>::type *a6,
        std::string *args_3)
{
  ApiRetcode v7; // ebx
  std::string *v8; // r13
  const char (*v9)[7]; // r12
  unsigned __int64 *v10; // rbx
  const char *v11; // rax
  const char (*v12)[7]; // r9
  std::allocator<char> __a; // [rsp+3Bh] [rbp-45h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-44h]
  std::string v19; // [rsp+40h] [rbp-40h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v8 = std::forward<std::string &>(args_3);
    v9 = std::forward<char const(&)[7]>(a6);
    v10 = std::forward<unsigned long &>(a5);
    std::allocator<char>::allocator(&__a);
    v11 = (const char *)std::forward<char const(&)[5]>(a4);
    std::string::basic_string<std::allocator<char>>(&v19, v11, &__a);
    v7 = getRequestParam<unsigned long,char const(&)[7],std::string &>(
           request,
           &v19,
           v10,
           v9,
           v8,
           v12,
           (std::string *)a6);
    std::string::~string(&v19);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v7;
};

// Line 74: range 000000000CCD1718-000000000CCD189B
__int64 __fastcall getRequestParam<unsigned int,char const(&)[7],std::string &,char const(&)[10],unsigned int &,char const(&)[12],unsigned int &,char const(&)[13],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[7]>::type *a4,
        std::string *a5,
        std::remove_reference<char const (&)[10]>::type *a6,
        unsigned int *args_3,
        std::remove_reference<char const (&)[12]>::type *args_4,
        unsigned int *args_5,
        std::remove_reference<char const (&)[13]>::type *args_6,
        unsigned int *args_7)
{
  unsigned int v11; // ebx
  unsigned int *v12; // r13
  std::remove_reference<char const (&)[13]>::type *v13; // r12
  unsigned int *v14; // rbx
  std::remove_reference<char const (&)[10]>::type *v15; // r15
  std::string *v16; // r14
  const char *v17; // rax
  unsigned int *v19; // [rsp+0h] [rbp-A0h]
  char (*v20)[12]; // [rsp+8h] [rbp-98h]
  std::allocator<char> __a; // [rsp+4Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+4Ch] [rbp-54h]
  std::string v26; // [rsp+50h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v12 = std::forward<unsigned int &>(args_7);
    v13 = (std::remove_reference<char const (&)[13]>::type *)std::forward<char const(&)[13]>(args_6);
    v14 = std::forward<unsigned int &>(args_5);
    v20 = (char (*)[12])std::forward<char const(&)[12]>(args_4);
    v19 = std::forward<unsigned int &>(args_3);
    v15 = (std::remove_reference<char const (&)[10]>::type *)std::forward<char const(&)[10]>(a6);
    v16 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v17 = (const char *)std::forward<char const(&)[7]>(a4);
    std::string::basic_string<std::allocator<char>>(&v26, v17, &__a);
    v11 = getRequestParam<std::string,char const(&)[10],unsigned int &,char const(&)[12],unsigned int &,char const(&)[13],unsigned int &>(
            request,
            &v26,
            v16,
            v15,
            v19,
            v20,
            v14,
            v13,
            v12);
    std::string::~string(&v26);
    std::allocator<char>::~allocator(&__a);
  }
  return v11;
};

// Line 74: range 000000000CCC68FC-000000000CCC6A4D
__int64 __fastcall getRequestParam<unsigned int,char const(&)[8],unsigned int &,char const(&)[9],unsigned int &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[8]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[9]>::type *a6,
        unsigned int *args_3,
        std::remove_reference<char const (&)[7]>::type *args_4,
        std::string *args_5)
{
  unsigned int v9; // ebx
  std::string *v10; // rbx
  std::remove_reference<char const (&)[7]>::type *v11; // r15
  unsigned int *v12; // r14
  std::remove_reference<char const (&)[9]>::type *v13; // r13
  unsigned int *v14; // r12
  const char *v15; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-54h]
  std::string v22; // [rsp+40h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v10 = std::forward<std::string &>(args_5);
    v11 = (std::remove_reference<char const (&)[7]>::type *)std::forward<char const(&)[7]>(args_4);
    v12 = std::forward<unsigned int &>(args_3);
    v13 = (std::remove_reference<char const (&)[9]>::type *)std::forward<char const(&)[9]>(a6);
    v14 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v15 = (const char *)std::forward<char const(&)[8]>(a4);
    std::string::basic_string<std::allocator<char>>(&v22, v15, &__a);
    v9 = getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[7],std::string &>(
           request,
           &v22,
           v14,
           v13,
           v12,
           v11,
           v10);
    std::string::~string(&v22);
    std::allocator<char>::~allocator(&__a);
  }
  return v9;
};

// Line 74: range 000000000CCC2876-000000000CCC2989
__int64 __fastcall getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[9],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[9]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[9]>::type *a6,
        unsigned int *args_3)
{
  ApiRetcode v7; // ebx
  unsigned int *v8; // r13
  const char (*v9)[9]; // r12
  unsigned int *v10; // rbx
  const char *v11; // rax
  const char (*v12)[9]; // r9
  std::allocator<char> __a; // [rsp+3Bh] [rbp-45h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-44h]
  std::string v19; // [rsp+40h] [rbp-40h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v8 = std::forward<unsigned int &>(args_3);
    v9 = std::forward<char const(&)[9]>(a6);
    v10 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v11 = (const char *)std::forward<char const(&)[9]>(a4);
    std::string::basic_string<std::allocator<char>>(&v19, v11, &__a);
    v7 = getRequestParam<unsigned int,char const(&)[9],unsigned int &>(
           request,
           &v19,
           v10,
           v9,
           v8,
           v12,
           (unsigned int *)a6);
    std::string::~string(&v19);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v7;
};

// Line 74: range 000000000CCC265E-000000000CCC2744
__int64 __fastcall getRequestParam<unsigned int,char const(&)[9],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[9]>::type *a4,
        unsigned int *a5,
        const char (*args_0)[9])
{
  ApiRetcode v6; // ebx
  unsigned int *v7; // rbx
  const char *v8; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-35h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-34h]
  std::string v14; // [rsp+40h] [rbp-30h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v7 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v8 = (const char *)std::forward<char const(&)[9]>(a4);
    std::string::basic_string<std::allocator<char>>(&v14, v8, &__a);
    v6 = getRequestParam<unsigned int>(request, &v14, v7);
    std::string::~string(&v14);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v6;
};

// Line 75: range 000000000CD5404B-000000000CD541CE
__int64 __fastcall getRequestParam<unsigned int,char const(&)[2],float &,char const(&)[2],float &,char const(&)[2],float &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[2]>::type *a4,
        float *a5,
        std::remove_reference<char const (&)[2]>::type *a6,
        float *args_3,
        std::remove_reference<char const (&)[2]>::type *args_4,
        float *args_5,
        std::remove_reference<char const (&)[7]>::type *args_6,
        std::string *args_7)
{
  unsigned int v11; // ebx
  std::string *v12; // r13
  std::remove_reference<char const (&)[7]>::type *v13; // r12
  float *v14; // rbx
  std::remove_reference<char const (&)[2]>::type *v15; // r15
  float *v16; // r14
  const char *v17; // rax
  float *v19; // [rsp+0h] [rbp-A0h]
  char (*v20)[2]; // [rsp+8h] [rbp-98h]
  std::allocator<char> __a; // [rsp+4Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+4Ch] [rbp-54h]
  std::string v26; // [rsp+50h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v12 = std::forward<std::string &>(args_7);
    v13 = (std::remove_reference<char const (&)[7]>::type *)std::forward<char const(&)[7]>(args_6);
    v14 = std::forward<float &>(args_5);
    v20 = (char (*)[2])std::forward<char const(&)[2]>(args_4);
    v19 = std::forward<float &>(args_3);
    v15 = (std::remove_reference<char const (&)[2]>::type *)std::forward<char const(&)[2]>(a6);
    v16 = std::forward<float &>(a5);
    std::allocator<char>::allocator(&__a);
    v17 = (const char *)std::forward<char const(&)[2]>(a4);
    std::string::basic_string<std::allocator<char>>(&v26, v17, &__a);
    v11 = getRequestParam<float,char const(&)[2],float &,char const(&)[2],float &,char const(&)[7],std::string &>(
            request,
            &v26,
            v16,
            v15,
            v19,
            v20,
            v14,
            v13,
            v12);
    std::string::~string(&v26);
    std::allocator<char>::~allocator(&__a);
  }
  return v11;
};

// Line 75: range 000000000CD5A3F9-000000000CD5A4DF
__int64 __fastcall getRequestParam<unsigned int,char const(&)[4],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[4]>::type *a4,
        std::string *a5,
        const char (*args_0)[4])
{
  ApiRetcode v6; // ebx
  std::string *v7; // rbx
  const char *v8; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-35h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-34h]
  std::string v14; // [rsp+40h] [rbp-30h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v7 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v8 = (const char *)std::forward<char const(&)[4]>(a4);
    std::string::basic_string<std::allocator<char>>(&v14, v8, &__a);
    v6 = getRequestParam<std::string>(request, &v14, v7);
    std::string::~string(&v14);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v6;
};

// Line 77: range 000000000CDBDFA0-000000000CDBE0F1
__int64 __fastcall getRequestParam<unsigned int,char const(&)[12],std::string &,char const(&)[8],bool &,char const(&)[12],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[12]>::type *a4,
        std::string *a5,
        std::remove_reference<char const (&)[8]>::type *a6,
        bool *args_3,
        std::remove_reference<char const (&)[12]>::type *args_4,
        unsigned int *args_5)
{
  unsigned int v9; // ebx
  unsigned int *v10; // rbx
  std::remove_reference<char const (&)[12]>::type *v11; // r15
  bool *v12; // r14
  std::remove_reference<char const (&)[8]>::type *v13; // r13
  std::string *v14; // r12
  const char *v15; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-54h]
  std::string v22; // [rsp+40h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v10 = std::forward<unsigned int &>(args_5);
    v11 = (std::remove_reference<char const (&)[12]>::type *)std::forward<char const(&)[12]>(args_4);
    v12 = std::forward<bool &>(args_3);
    v13 = (std::remove_reference<char const (&)[8]>::type *)std::forward<char const(&)[8]>(a6);
    v14 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v15 = (const char *)std::forward<char const(&)[12]>(a4);
    std::string::basic_string<std::allocator<char>>(&v22, v15, &__a);
    v9 = getRequestParam<std::string,char const(&)[8],bool &,char const(&)[12],unsigned int &>(
           request,
           &v22,
           v14,
           v13,
           v12,
           v11,
           v10);
    std::string::~string(&v22);
    std::allocator<char>::~allocator(&__a);
  }
  return v9;
};

// Line 95: range 000000000CCCA559-000000000CCCA66C
__int64 __fastcall getRequestParam<unsigned int,char const(&)[15],unsigned int &,char const(&)[23],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[15]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[23]>::type *a6,
        unsigned int *args_3)
{
  ApiRetcode v7; // ebx
  unsigned int *v8; // r13
  const char (*v9)[23]; // r12
  unsigned int *v10; // rbx
  const char *v11; // rax
  const char (*v12)[23]; // r9
  std::allocator<char> __a; // [rsp+3Bh] [rbp-45h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-44h]
  std::string v19; // [rsp+40h] [rbp-40h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v8 = std::forward<unsigned int &>(args_3);
    v9 = std::forward<char const(&)[23]>(a6);
    v10 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v11 = (const char *)std::forward<char const(&)[15]>(a4);
    std::string::basic_string<std::allocator<char>>(&v19, v11, &__a);
    v7 = getRequestParam<unsigned int,char const(&)[23],unsigned int &>(
           request,
           &v19,
           v10,
           v9,
           v8,
           v12,
           (unsigned int *)a6);
    std::string::~string(&v19);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v7;
};

// Line 98: range 000000000CEA3C5F-000000000CEA3D72
__int64 __fastcall getRequestParam<unsigned int,char const(&)[15],unsigned int &,char const(&)[13],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[15]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[13]>::type *a6,
        unsigned int *args_3)
{
  unsigned int v7; // ebx
  unsigned int *v8; // r13
  std::remove_reference<char const (&)[13]>::type *v9; // r12
  unsigned int *v10; // rbx
  const char *v11; // rax
  const char (*v12)[13]; // r9
  std::allocator<char> __a; // [rsp+3Bh] [rbp-45h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-44h]
  std::string v19; // [rsp+40h] [rbp-40h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v8 = std::forward<unsigned int &>(args_3);
    v9 = (std::remove_reference<char const (&)[13]>::type *)std::forward<char const(&)[13]>(a6);
    v10 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v11 = (const char *)std::forward<char const(&)[15]>(a4);
    std::string::basic_string<std::allocator<char>>(&v19, v11, &__a);
    v7 = getRequestParam<unsigned int,char const(&)[13],unsigned int &>(request, &v19, v10, v9, v8, v12);
    std::string::~string(&v19);
    std::allocator<char>::~allocator(&__a);
  }
  return v7;
};

// Line 109: range 000000000CE4DD0B-000000000CE4DDF1
__int64 __fastcall getRequestParam<std::string,char const(&)[6],std::string&>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        std::string *para,
        std::remove_reference<char const (&)[6]>::type *a4,
        std::string *a5,
        const char (*args_0)[6])
{
  ApiRetcode v6; // ebx
  std::string *v7; // rbx
  const char *v8; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-35h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-34h]
  std::string v14; // [rsp+40h] [rbp-30h] BYREF

  ret = getRequestParam<std::string>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v7 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v8 = (const char *)std::forward<char const(&)[6]>(a4);
    std::string::basic_string<std::allocator<char>>(&v14, v8, &__a);
    v6 = getRequestParam<std::string>(request, &v14, v7);
    std::string::~string(&v14);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v6;
};

// Line 109: range 000000000CE50C1E-000000000CE50D6F
__int64 __fastcall getRequestParam<unsigned int,char const(&)[21],unsigned int &,char const(&)[15],unsigned int &,char const(&)[13],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[21]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[15]>::type *a6,
        unsigned int *args_3,
        std::remove_reference<char const (&)[13]>::type *args_4,
        unsigned int *args_5)
{
  unsigned int v9; // ebx
  unsigned int *v10; // rbx
  std::remove_reference<char const (&)[13]>::type *v11; // r15
  unsigned int *v12; // r14
  std::remove_reference<char const (&)[15]>::type *v13; // r13
  unsigned int *v14; // r12
  const char *v15; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-54h]
  std::string v22; // [rsp+40h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v10 = std::forward<unsigned int &>(args_5);
    v11 = (std::remove_reference<char const (&)[13]>::type *)std::forward<char const(&)[13]>(args_4);
    v12 = std::forward<unsigned int &>(args_3);
    v13 = (std::remove_reference<char const (&)[15]>::type *)std::forward<char const(&)[15]>(a6);
    v14 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v15 = (const char *)std::forward<char const(&)[21]>(a4);
    std::string::basic_string<std::allocator<char>>(&v22, v15, &__a);
    v9 = getRequestParam<unsigned int,char const(&)[15],unsigned int &,char const(&)[13],unsigned int &>(
           request,
           &v22,
           v14,
           v13,
           v12,
           v11,
           v10);
    std::string::~string(&v22);
    std::allocator<char>::~allocator(&__a);
  }
  return v9;
};

// Line 110: range 000000000CCD1E68-000000000CCD2302
int32_t __cdecl RequestHandler::parseProtoStrToJson<proto::HomeDataBin>(
        RequestHandler *const this,
        const std::string *proto_str,
        Json::Value *json_value)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  int32_t result; // eax
  int v8; // [rsp+0h] [rbp-310h]
  Json::Value *json_valueb; // [rsp+8h] [rbp-308h]
  common::milog::MiLogStream v11; // [rsp+20h] [rbp-2F0h] BYREF
  char v12[720]; // [rsp+40h] [rbp-2D0h] BYREF

  v3 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(672LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 32 4 11 options:118 48 32 15 json_string:122 112 40 14 status_ret:123 192 112 9 proto:112 336 "
                        "272 15 json_reader:130";
  *(_QWORD *)(v3 + 16) = RequestHandler::parseProtoStrToJson<proto::HomeDataBin>;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61956;
  v5[536862722] = -219021312;
  v5[536862723] = 62194;
  v5[536862724] = -234881024;
  v5[536862725] = -218959118;
  v5[536862729] = -219021312;
  v5[536862730] = 62194;
  v5[536862739] = -202116109;
  v5[536862740] = -202116109;
  proto::HomeDataBin::HomeDataBin((proto::HomeDataBin *const)(v3 + 192));
  if ( (unsigned __int8)google::protobuf::MessageLite::ParseFromString(v3 + 192, proto_str) != 1 )
  {
    common::milog::MiLogStream::create(
      &v11,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/handler/request_handler.api.hpp",
      "parseProtoStrToJson",
      115);
    common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(&v11, (const char (*)[22])"ParseFromString fails");
    common::milog::MiLogStream::~MiLogStream(&v11);
    v6 = -1;
  }
  else
  {
    google::protobuf::util::JsonPrintOptions::JsonPrintOptions((google::protobuf::util::JsonPrintOptions *const)(v3 + 32));
    *(_BYTE *)(v3 + 32) = 1;
    *(_BYTE *)(v3 + 33) = 1;
    *(_BYTE *)(v3 + 35) = 1;
    std::string::basic_string(v3 + 48);
    google::protobuf::util::MessageToJsonString(
      (google::protobuf::util::Status *)(v3 + 112),
      (google::protobuf::Message *)(v3 + 192),
      v8,
      json_value,
      (int)proto_str,
      (char)this,
      (int)v11.log_,
      v11.ostr_ptr_._M_ptr);
    if ( !google::protobuf::util::Status::ok((const google::protobuf::util::Status *const)(v3 + 112)) )
    {
      common::milog::MiLogStream::create(
        &v11,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "parseProtoStrToJson",
        126);
      common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
        &v11,
        (const char (*)[28])"proto to json_string failed");
      common::milog::MiLogStream::~MiLogStream(&v11);
      v6 = -1;
    }
    else
    {
      Json::Reader::Reader((Json::Reader *)(v3 + 336));
      if ( !Json::Reader::parse((Json::Reader *const)(v3 + 336), (const std::string *)(v3 + 48), json_valueb, 1) )
      {
        common::milog::MiLogStream::create(
          &v11,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/handler/request_handler.api.hpp",
          "parseProtoStrToJson",
          133);
        common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
          &v11,
          (const char (*)[33])"json_string to json_value failed");
        common::milog::MiLogStream::~MiLogStream(&v11);
        v6 = -1;
      }
      else
      {
        v6 = 0;
      }
      Json::Reader::~Reader((Json::Reader *const)(v3 + 336));
    }
    google::protobuf::util::Status::~Status((google::protobuf::util::Status *const)(v3 + 112));
    std::string::~string((void *)(v3 + 48));
  }
  proto::HomeDataBin::~HomeDataBin((proto::HomeDataBin *const)(v3 + 192));
  result = v6;
  if ( v12 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF804C) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8050) = -168430091;
  }
  return result;
};

// Line 138: range 000000000CDBAFE9-000000000CDBB16C
__int64 __fastcall getRequestParam<std::string,char const(&)[17],unsigned int &,char const(&)[21],unsigned int &,char const(&)[15],unsigned int &,char const(&)[13],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        std::string *para,
        std::remove_reference<char const (&)[17]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[21]>::type *a6,
        unsigned int *args_3,
        std::remove_reference<char const (&)[15]>::type *args_4,
        unsigned int *args_5,
        std::remove_reference<char const (&)[13]>::type *args_6,
        unsigned int *args_7)
{
  unsigned int v11; // ebx
  unsigned int *v12; // r13
  std::remove_reference<char const (&)[13]>::type *v13; // r12
  unsigned int *v14; // rbx
  std::remove_reference<char const (&)[21]>::type *v15; // r15
  unsigned int *v16; // r14
  const char *v17; // rax
  unsigned int *v19; // [rsp+0h] [rbp-A0h]
  char (*v20)[15]; // [rsp+8h] [rbp-98h]
  std::allocator<char> __a; // [rsp+4Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+4Ch] [rbp-54h]
  std::string v26; // [rsp+50h] [rbp-50h] BYREF

  ret = getRequestParam<std::string>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v12 = std::forward<unsigned int &>(args_7);
    v13 = (std::remove_reference<char const (&)[13]>::type *)std::forward<char const(&)[13]>(args_6);
    v14 = std::forward<unsigned int &>(args_5);
    v20 = (char (*)[15])std::forward<char const(&)[15]>(args_4);
    v19 = std::forward<unsigned int &>(args_3);
    v15 = (std::remove_reference<char const (&)[21]>::type *)std::forward<char const(&)[21]>(a6);
    v16 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v17 = (const char *)std::forward<char const(&)[17]>(a4);
    std::string::basic_string<std::allocator<char>>(&v26, v17, &__a);
    v11 = getRequestParam<unsigned int,char const(&)[21],unsigned int &,char const(&)[15],unsigned int &,char const(&)[13],unsigned int &>(
            request,
            &v26,
            v16,
            v15,
            v19,
            v20,
            v14,
            v13,
            v12);
    std::string::~string(&v26);
    std::allocator<char>::~allocator(&__a);
  }
  return v11;
};

// Line 138: range 000000000CDB852B-000000000CDB863E
__int64 __fastcall getRequestParam<std::string,char const(&)[4],std::string&,char const(&)[6],std::string&>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        std::string *para,
        std::remove_reference<char const (&)[4]>::type *a4,
        std::string *a5,
        std::remove_reference<char const (&)[6]>::type *a6,
        std::string *args_3)
{
  unsigned int v7; // ebx
  std::string *v8; // r13
  std::remove_reference<char const (&)[6]>::type *v9; // r12
  std::string *v10; // rbx
  const char *v11; // rax
  const char (*v12)[6]; // r9
  std::allocator<char> __a; // [rsp+3Bh] [rbp-45h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-44h]
  std::string v19; // [rsp+40h] [rbp-40h] BYREF

  ret = getRequestParam<std::string>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v8 = std::forward<std::string &>(args_3);
    v9 = (std::remove_reference<char const (&)[6]>::type *)std::forward<char const(&)[6]>(a6);
    v10 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v11 = (const char *)std::forward<char const(&)[4]>(a4);
    std::string::basic_string<std::allocator<char>>(&v19, v11, &__a);
    v7 = getRequestParam<std::string,char const(&)[6],std::string&>(request, &v19, v10, v9, v8, v12);
    std::string::~string(&v19);
    std::allocator<char>::~allocator(&__a);
  }
  return v7;
};

// Line 140: range 000000000CB95D0A-000000000CB95D90
int32_t __cdecl RequestHandler::testFunc(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  Json::Value_0 *v4; // rax
  Json::Value_0 other; // [rsp+20h] [rbp-40h] BYREF

  Json::Value::Value((Json::Value *)&other, "test_value");
  v4 = Json::Value::operator[]((Json::Value_0 *const)jval, "test_key");
  Json::Value::operator=(v4, &other);
  Json::Value::~Value(&other);
  return 0;
};

// Line 146: range 000000000CB95D92-000000000CB96247
int32_t __cdecl RequestHandler::queryPlayerAccountUid(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  int32_t v7; // r14d
  common::milog::MiLogStream *v8; // rax
  Json::Value_0 *v9; // rax
  Json::Value_0 *v10; // rax
  Json::Value_0 *v11; // rax
  Json::Value_0 *v12; // rax
  int32_t result; // eax
  int32_t retcode; // [rsp+2Ch] [rbp-164h]
  std::string key; // [rsp+30h] [rbp-160h] BYREF
  Json::Value_0 other; // [rsp+50h] [rbp-140h] BYREF
  char v18[272]; // [rsp+80h] [rbp-110h] BYREF

  v4 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(224LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 32 1 20 is_account_exist:154 48 4 7 uid:147 64 120 7 row:153";
  *(_QWORD *)(v4 + 16) = RequestHandler::queryPlayerAccountUid;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556927;
  v6[536862725] = -218103808;
  v6[536862726] = -202116109;
  *(_DWORD *)(v4 + 48) = 0;
  std::allocator<char>::allocator(v4 + 32);
  std::string::basic_string<std::allocator<char>>(&key, off_1A660020, (const std::allocator<char> *)(v4 + 32));
  retcode = getRequestParam<unsigned int>(request, &key, (unsigned int *)(v4 + 48));
  std::string::~string(&key);
  std::allocator<char>::~allocator(v4 + 32);
  if ( retcode )
  {
    v7 = retcode;
  }
  else
  {
    TablePlayerUid::TablePlayerUid((TablePlayerUid *const)(v4 + 64));
    *(_BYTE *)(v4 + 32) = 0;
    if ( MysqlOpPlayerData::selectPlayerUidByUid(*(_DWORD *)(v4 + 48), (TablePlayerUid *)(v4 + 64), (bool *)(v4 + 32)) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "queryPlayerAccountUid",
        157);
      v8 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
             (common::milog::MiLogStream *const)&key,
             (const char (*)[33])"selectPlayerUidByUid failed uid:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v4 + 48));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      v7 = 1;
    }
    else
    {
      Json::Value::Value((Json::Value *)&other, *(_BYTE *)(v4 + 32));
      v9 = Json::Value::operator[]((Json::Value_0 *const)jval, "is_account_exist");
      Json::Value::operator=(v9, &other);
      Json::Value::~Value(&other);
      if ( *(_BYTE *)(v4 + 32) == 1 )
      {
        Json::Value::Value((Json::Value *)&other, *(_DWORD *)(v4 + 64));
        v10 = Json::Value::operator[]((Json::Value_0 *const)jval, off_1A660020);
        Json::Value::operator=(v10, &other);
        Json::Value::~Value(&other);
        Json::Value::Value((Json::Value *)&other, *(_DWORD *)(v4 + 68));
        v11 = Json::Value::operator[]((Json::Value_0 *const)jval, "account_type");
        Json::Value::operator=(v11, &other);
        Json::Value::~Value(&other);
        Json::Value::Value(&other, v4 + 72);
        v12 = Json::Value::operator[]((Json::Value_0 *const)jval, "account_uid");
        Json::Value::operator=(v12, &other);
        Json::Value::~Value(&other);
      }
      v7 = 0;
    }
    TablePlayerUid::~TablePlayerUid((TablePlayerUid *const)(v4 + 64));
  }
  result = v7;
  if ( v18 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8014) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 173: range 000000000CB96248-000000000CB96732
int32_t __cdecl RequestHandler::queryPlayerUidByAccountUid(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  const char (*v7)[12]; // r9
  int32_t v8; // r14d
  common::milog::MiLogStream *v9; // rax
  Json::Value_0 *v10; // rax
  Json::Value_0 *v11; // rax
  Json::Value_0 *v12; // rax
  Json::Value_0 *v13; // rax
  int32_t result; // eax
  int32_t retcode; // [rsp+2Ch] [rbp-1A4h]
  std::string key; // [rsp+30h] [rbp-1A0h] BYREF
  Json::Value_0 other; // [rsp+50h] [rbp-180h] BYREF
  char v19[336]; // [rsp+80h] [rbp-150h] BYREF

  v4 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(288LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 32 1 20 is_account_exist:182 48 4 16 account_type:174 64 32 15 account_uid:175 128 120 7 row:181";
  *(_QWORD *)(v4 + 16) = RequestHandler::queryPlayerUidByAccountUid;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556927;
  v6[536862723] = -218959118;
  v6[536862727] = -218103808;
  v6[536862728] = -202116109;
  *(_DWORD *)(v4 + 48) = 0;
  std::string::basic_string(v4 + 64);
  std::allocator<char>::allocator(v4 + 32);
  std::string::basic_string<std::allocator<char>>(&key, "account_type", (const std::allocator<char> *)(v4 + 32));
  retcode = getRequestParam<unsigned int,char const(&)[12],std::string &>(
              request,
              &key,
              (unsigned int *)(v4 + 48),
              "account_uid",
              (std::string *)(v4 + 64),
              v7);
  std::string::~string(&key);
  std::allocator<char>::~allocator(v4 + 32);
  if ( retcode )
  {
    v8 = retcode;
  }
  else
  {
    TablePlayerUid::TablePlayerUid((TablePlayerUid *const)(v4 + 128));
    *(_BYTE *)(v4 + 32) = 0;
    if ( MysqlOpPlayerData::selectPlayerUidByAccount(
           *(_DWORD *)(v4 + 48),
           (const std::string *)(v4 + 64),
           (TablePlayerUid *)(v4 + 128),
           (bool *)(v4 + 32)) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "queryPlayerUidByAccountUid",
        185);
      v9 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
             (common::milog::MiLogStream *const)&key,
             (const char (*)[33])"selectPlayerUidByAccount failed ");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v9, (const std::string *)(v4 + 64));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      v8 = 1;
    }
    else
    {
      Json::Value::Value((Json::Value *)&other, *(_DWORD *)(v4 + 48));
      v10 = Json::Value::operator[]((Json::Value_0 *const)jval, "account_type");
      Json::Value::operator=(v10, &other);
      Json::Value::~Value(&other);
      Json::Value::Value(&other, v4 + 64);
      v11 = Json::Value::operator[]((Json::Value_0 *const)jval, aAccountUid[0]);
      Json::Value::operator=(v11, &other);
      Json::Value::~Value(&other);
      Json::Value::Value((Json::Value *)&other, *(_BYTE *)(v4 + 32));
      v12 = Json::Value::operator[]((Json::Value_0 *const)jval, "is_exist");
      Json::Value::operator=(v12, &other);
      Json::Value::~Value(&other);
      if ( *(_BYTE *)(v4 + 32) )
      {
        Json::Value::Value((Json::Value *)&other, *(_DWORD *)(v4 + 128));
        v13 = Json::Value::operator[]((Json::Value_0 *const)jval, off_1A660020);
        Json::Value::operator=(v13, &other);
        Json::Value::~Value(&other);
      }
      v8 = 0;
    }
    TablePlayerUid::~TablePlayerUid((TablePlayerUid *const)(v4 + 128));
  }
  std::string::~string((void *)(v4 + 64));
  result = v8;
  if ( v19 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF800C) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF801C) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 199: range 000000000CB96734-000000000CB9749A
int32_t __cdecl RequestHandler::queryPlayerBinInfo(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  int32_t v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  int v8; // r15d
  int v9; // r15d
  common::milog::MiLogStream *v10; // rax
  Json::Value_0 *v11; // rax
  Json::Value_0 *v12; // rax
  Json::Value_0 *v13; // rax
  Json::Value_0 *v14; // rax
  Json::Value_0 *v15; // rax
  Json::Value_0 *v16; // rax
  Json::Value_0 *v17; // rax
  _BOOL4 v18; // r15d
  common::milog::MiLogStream *v19; // rax
  _BOOL4 v20; // r15d
  common::milog::MiLogStream *v21; // rax
  int v22; // r15d
  Json::Value *v23; // rax
  int v25; // [rsp+0h] [rbp-7B0h]
  char *v26; // [rsp+8h] [rbp-7A8h]
  int p_yielda; // [rsp+10h] [rbp-7A0h]
  Json::Value *jvalb; // [rsp+18h] [rbp-798h]
  std::allocator<char> __a; // [rsp+33h] [rbp-77Dh] BYREF
  int32_t retcode; // [rsp+34h] [rbp-77Ch]
  proto::PlayerSceneCompBin *scene_bin; // [rsp+38h] [rbp-778h]
  std::string key; // [rsp+40h] [rbp-770h] BYREF
  char v34[1872]; // [rsp+60h] [rbp-750h] BYREF

  p_yielda = (int)p_yield;
  v5 = (unsigned __int64)v34;
  v26 = v34;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_5(1824LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "12 48 1 12 is_exist:213 64 4 7 uid:200 80 4 11 options:262 96 16 6 os:235 128 32 12 bin_data:243"
                        " 192 32 15 json_string:261 256 40 14 status_ret:266 336 40 14 json_value:273 416 120 18 player_u"
                        "id_row:224 576 192 19 player_data_row:214 832 272 15 json_reader:272 1168 520 19 player_data_bin:249";
  *(_QWORD *)(v5 + 16) = RequestHandler::queryPlayerBinInfo;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234753551;
  v7[536862722] = -234556924;
  v7[536862723] = -219021312;
  v7[536862725] = -218959118;
  v7[536862727] = -218959118;
  v7[536862729] = -218959360;
  v7[536862730] = 62194;
  v7[536862731] = -234881024;
  v7[536862732] = -218959118;
  v7[536862736] = -234881024;
  v7[536862737] = -218959118;
  v7[536862744] = -218959118;
  v7[536862745] = -218959118;
  v7[536862754] = -219021312;
  v7[536862755] = -218959118;
  v7[536862756] = 62194;
  v7[536862772] = -218103808;
  v7[536862773] = -202116109;
  v7[536862774] = -202116109;
  v7[536862775] = -202116109;
  v7[536862776] = -202116109;
  *(_DWORD *)(v5 + 64) = 0;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&key, off_1A660020, &__a);
  retcode = getRequestParam<unsigned int>(request, &key, (unsigned int *)(v5 + 64));
  std::string::~string(&key);
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v4 = retcode;
  }
  else if ( *(_DWORD *)(v5 + 64) )
  {
    retcode = 1;
    *(_BYTE *)(v5 + 48) = 0;
    TablePlayerData::TablePlayerData((TablePlayerData *const)(v5 + 576));
    if ( MysqlOpPlayerData::selectPlayerDataByUid(
           *(_DWORD *)(v5 + 64),
           (TablePlayerData *)(v5 + 576),
           (bool *)(v5 + 48)) )
    {
      v8 = 0;
    }
    else if ( *(_BYTE *)(v5 + 48) != 1 )
    {
      retcode = 2001;
      v8 = 0;
    }
    else
    {
      TablePlayerUid::TablePlayerUid((TablePlayerUid *const)(v5 + 416));
      if ( MysqlOpPlayerData::selectPlayerUidByUid(
             *(_DWORD *)(v5 + 64),
             (TablePlayerUid *)(v5 + 416),
             (bool *)(v5 + 48)) )
      {
        v9 = 0;
      }
      else if ( *(_BYTE *)(v5 + 48) != 1 )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&key,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/handler/request_handler.api.hpp",
          "queryPlayerBinInfo",
          231);
        v10 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
                (common::milog::MiLogStream *const)&key,
                (const char (*)[44])"player_uid table select by uid failed uid: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v5 + 64));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
        retcode = 2001;
        v9 = 0;
      }
      else
      {
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v5 + 96));
        Json::Value::Value(v5 + 336, v5 + 424);
        v11 = Json::Value::operator[]((Json::Value_0 *const)jval, aAccountUid[0]);
        Json::Value::operator=(v11, (Json::Value_0 *)(v5 + 336));
        Json::Value::~Value((Json::Value_0 *const)(v5 + 336));
        Json::Value::Value((Json::Value *)(v5 + 336), *(_DWORD *)(v5 + 420));
        v12 = Json::Value::operator[]((Json::Value_0 *const)jval, "account_type");
        Json::Value::operator=(v12, (Json::Value_0 *)(v5 + 336));
        Json::Value::~Value((Json::Value_0 *const)(v5 + 336));
        Json::Value::Value(v5 + 336, v5 + 584);
        v13 = Json::Value::operator[]((Json::Value_0 *const)jval, "nickname");
        Json::Value::operator=(v13, (Json::Value_0 *)(v5 + 336));
        Json::Value::~Value((Json::Value_0 *const)(v5 + 336));
        Json::Value::Value((Json::Value *)(v5 + 336), *(_DWORD *)(v5 + 616));
        v14 = Json::Value::operator[]((Json::Value_0 *const)jval, "level");
        Json::Value::operator=(v14, (Json::Value_0 *)(v5 + 336));
        Json::Value::~Value((Json::Value_0 *const)(v5 + 336));
        Json::Value::Value((Json::Value *)(v5 + 336), *(_DWORD *)(v5 + 620));
        v15 = Json::Value::operator[]((Json::Value_0 *const)jval, off_1A6605E0);
        Json::Value::operator=(v15, (Json::Value_0 *)(v5 + 336));
        Json::Value::~Value((Json::Value_0 *const)(v5 + 336));
        Json::Value::Value(v5 + 336, v5 + 632);
        v16 = Json::Value::operator[]((Json::Value_0 *const)jval, "json_data");
        Json::Value::operator=(v16, (Json::Value_0 *)(v5 + 336));
        Json::Value::~Value((Json::Value_0 *const)(v5 + 336));
        Json::Value::Value((Json::Value *)(v5 + 336), *(_DWORD *)(v5 + 696));
        v17 = Json::Value::operator[]((Json::Value_0 *const)jval, "data_version");
        Json::Value::operator=(v17, (Json::Value_0 *)(v5 + 336));
        Json::Value::~Value((Json::Value_0 *const)(v5 + 336));
        std::string::basic_string(v5 + 128);
        mysqlpp::String::to_string((const mysqlpp::String *const)(v5 + 664), (std::string *)(v5 + 128));
        if ( common::tools::ZlibUtil::isCompressWithPad((const std::string *)(v5 + 128)) )
        {
          common::tools::ZlibUtil::uncompressWithPad(&key, (const std::string *)(v5 + 128));
          std::string::operator=(v5 + 128, &key);
          std::string::~string(&key);
        }
        proto::PlayerDataBin::PlayerDataBin((proto::PlayerDataBin *const)(v5 + 1168));
        if ( (unsigned __int8)google::protobuf::MessageLite::ParseFromString(v5 + 1168, v5 + 128) != 1 )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&key,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/handler/request_handler.api.hpp",
            "queryPlayerBinInfo",
            252);
          common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
            (common::milog::MiLogStream *const)&key,
            (const char (*)[38])"player_data_bin ParseFromString fails");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
          v4 = -1;
          v18 = 0;
        }
        else
        {
          scene_bin = proto::PlayerDataBin::mutable_scene_bin((proto::PlayerDataBin *const)(v5 + 1168));
          proto::PlayerSceneCompBin::clear_world(scene_bin);
          proto::PlayerDataBin::clear_item_bin((proto::PlayerDataBin *const)(v5 + 1168));
          proto::PlayerDataBin::clear_quest_bin((proto::PlayerDataBin *const)(v5 + 1168));
          std::allocator<char>::allocator(&__a);
          std::string::basic_string<std::allocator<char>>((std::string *const)(v5 + 192), byte_1A5D1560, &__a);
          std::allocator<char>::~allocator(&__a);
          google::protobuf::util::JsonPrintOptions::JsonPrintOptions((google::protobuf::util::JsonPrintOptions *const)(v5 + 80));
          *(_BYTE *)(v5 + 80) = 1;
          *(_BYTE *)(v5 + 81) = 1;
          *(_BYTE *)(v5 + 83) = 1;
          google::protobuf::util::MessageToJsonString(
            (google::protobuf::util::Status *)(v5 + 256),
            (google::protobuf::Message *)(v5 + 1168),
            v25,
            v34,
            p_yielda,
            (char)jval,
            (int)request,
            this);
          if ( !google::protobuf::util::Status::ok((const google::protobuf::util::Status *const)(v5 + 256)) )
          {
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)&key,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/handler/request_handler.api.hpp",
              "queryPlayerBinInfo",
              269);
            v19 = common::milog::MiLogStream::operator<<<char [51],(char *[51])0>(
                    (common::milog::MiLogStream *const)&key,
                    (const char (*)[51])"player_bin_data to json_string failed player_uid: ");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, (const unsigned int *)(v5 + 64));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
            v4 = -1;
            v20 = 0;
          }
          else
          {
            Json::Reader::Reader((Json::Reader *)(v5 + 832));
            Json::Value::Value(v5 + 336, 0LL);
            if ( !Json::Reader::parse(
                    (Json::Reader *const)(v5 + 832),
                    (const std::string *)(v5 + 192),
                    (Json::Value *)(v5 + 336),
                    1) )
            {
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)&key,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/handler/request_handler.api.hpp",
                "queryPlayerBinInfo",
                276);
              v21 = common::milog::MiLogStream::operator<<<char [62],(char *[62])0>(
                      (common::milog::MiLogStream *const)&key,
                      (const char (*)[62])"player_bin_data json_string to json_value failed player_uid: ");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v21,
                (const unsigned int *)(v5 + 64));
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
              v4 = -1;
              v22 = 0;
            }
            else
            {
              v23 = (Json::Value *)Json::Value::operator[]((Json::Value_0 *const)jvalb, "bin_data");
              Json::Value::operator=(v23);
              retcode = 0;
              v22 = 1;
            }
            Json::Value::~Value((Json::Value_0 *const)(v5 + 336));
            Json::Reader::~Reader((Json::Reader *const)(v5 + 832));
            v20 = v22 == 1;
          }
          google::protobuf::util::Status::~Status((google::protobuf::util::Status *const)(v5 + 256));
          std::string::~string((void *)(v5 + 192));
          v18 = v20;
        }
        proto::PlayerDataBin::~PlayerDataBin((proto::PlayerDataBin *const)(v5 + 1168));
        std::string::~string((void *)(v5 + 128));
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v5 + 96));
        if ( v18 )
          v9 = 2;
        else
          v9 = 1;
      }
      TablePlayerUid::~TablePlayerUid((TablePlayerUid *const)(v5 + 416));
      if ( v9 )
      {
        if ( v9 == 2 )
          v8 = 2;
        else
          v8 = 1;
      }
      else
      {
        v8 = 0;
      }
    }
    TablePlayerData::~TablePlayerData((TablePlayerData *const)(v5 + 576));
    if ( !v8 || v8 == 2 )
      v4 = retcode;
  }
  else
  {
    v4 = 1002;
  }
  if ( v26 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8014) = 0;
    *(_DWORD *)((v5 >> 3) + 0x7FFF801C) = 0;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF802C) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8040) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8060) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8088) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8090) = 0;
    *(_QWORD *)((v5 >> 3) + 0x7FFF80D0) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF80D8) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF80E0) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    __asan_stack_free_5(v5, 1824LL, v26);
  }
  return v4;
};

// Line 207: range 000000000CD5CA4C-000000000CD5CC04
__int64 __fastcall getRequestParam<std::string,char const(&)[12],std::string&,char const(&)[17],unsigned int &,char const(&)[21],unsigned int &,char const(&)[15],unsigned int &,char const(&)[13],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        std::string *para,
        std::remove_reference<char const (&)[12]>::type *a4,
        std::string *a5,
        std::remove_reference<char const (&)[17]>::type *a6,
        unsigned int *args_3,
        std::remove_reference<char const (&)[21]>::type *args_4,
        unsigned int *args_5,
        std::remove_reference<char const (&)[15]>::type *args_6,
        unsigned int *args_7,
        std::remove_reference<char const (&)[13]>::type *args_8,
        unsigned int *args_9)
{
  unsigned int v13; // ebx
  unsigned int *v14; // r15
  std::remove_reference<char const (&)[13]>::type *v15; // r14
  unsigned int *v16; // r13
  std::remove_reference<char const (&)[15]>::type *v17; // r12
  unsigned int *v18; // rbx
  const char *v19; // rax
  std::string *v21; // [rsp+0h] [rbp-B0h]
  char (*v22)[17]; // [rsp+8h] [rbp-A8h]
  unsigned int *v23; // [rsp+10h] [rbp-A0h]
  char (*v24)[21]; // [rsp+18h] [rbp-98h]
  std::allocator<char> __a; // [rsp+5Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+5Ch] [rbp-54h]
  std::string v30; // [rsp+60h] [rbp-50h] BYREF

  ret = getRequestParam<std::string>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v14 = std::forward<unsigned int &>(args_9);
    v15 = (std::remove_reference<char const (&)[13]>::type *)std::forward<char const(&)[13]>(args_8);
    v16 = std::forward<unsigned int &>(args_7);
    v17 = (std::remove_reference<char const (&)[15]>::type *)std::forward<char const(&)[15]>(args_6);
    v18 = std::forward<unsigned int &>(args_5);
    v24 = (char (*)[21])std::forward<char const(&)[21]>(args_4);
    v23 = std::forward<unsigned int &>(args_3);
    v22 = (char (*)[17])std::forward<char const(&)[17]>(a6);
    v21 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v19 = (const char *)std::forward<char const(&)[12]>(a4);
    std::string::basic_string<std::allocator<char>>(&v30, v19, &__a);
    v13 = getRequestParam<std::string,char const(&)[17],unsigned int &,char const(&)[21],unsigned int &,char const(&)[15],unsigned int &,char const(&)[13],unsigned int &>(
            request,
            &v30,
            v21,
            v22,
            v23,
            v24,
            v18,
            v17,
            v16,
            v15,
            v14);
    std::string::~string(&v30);
    std::allocator<char>::~allocator(&__a);
  }
  return v13;
};

// Line 239: range 000000000CD590A6-000000000CD5918C
__int64 __fastcall getRequestParam<std::string,char const(&)[15],std::string&>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        std::string *para,
        std::remove_reference<char const (&)[15]>::type *a4,
        std::string *a5,
        const char (*args_0)[15])
{
  ApiRetcode v6; // ebx
  std::string *v7; // rbx
  const char *v8; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-35h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-34h]
  std::string v14; // [rsp+40h] [rbp-30h] BYREF

  ret = getRequestParam<std::string>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v7 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v8 = (const char *)std::forward<char const(&)[15]>(a4);
    std::string::basic_string<std::allocator<char>>(&v14, v8, &__a);
    v6 = getRequestParam<std::string>(request, &v14, v7);
    std::string::~string(&v14);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v6;
};

// Line 239: range 000000000CD6066E-000000000CD607BF
__int64 __fastcall getRequestParam<unsigned int,char const(&)[6],unsigned int &,char const(&)[6],int &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[6]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[6]>::type *a6,
        int *args_3,
        std::remove_reference<char const (&)[7]>::type *args_4,
        std::string *args_5)
{
  unsigned int v9; // ebx
  std::string *v10; // rbx
  std::remove_reference<char const (&)[7]>::type *v11; // r15
  int *v12; // r14
  std::remove_reference<char const (&)[6]>::type *v13; // r13
  unsigned int *v14; // r12
  const char *v15; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-54h]
  std::string v22; // [rsp+40h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v10 = std::forward<std::string &>(args_5);
    v11 = (std::remove_reference<char const (&)[7]>::type *)std::forward<char const(&)[7]>(args_4);
    v12 = std::forward<int &>(args_3);
    v13 = (std::remove_reference<char const (&)[6]>::type *)std::forward<char const(&)[6]>(a6);
    v14 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v15 = (const char *)std::forward<char const(&)[6]>(a4);
    std::string::basic_string<std::allocator<char>>(&v22, v15, &__a);
    v9 = getRequestParam<unsigned int,char const(&)[6],int &,char const(&)[7],std::string &>(
           request,
           &v22,
           v14,
           v13,
           v12,
           v11,
           v10);
    std::string::~string(&v22);
    std::allocator<char>::~allocator(&__a);
  }
  return v9;
};

// Line 239: range 000000000CD5753C-000000000CD57622
__int64 __fastcall getRequestParam<unsigned long,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned __int64 *para,
        std::remove_reference<char const (&)[7]>::type *a4,
        std::string *a5,
        const char (*args_0)[7])
{
  ApiRetcode v6; // ebx
  std::string *v7; // rbx
  const char *v8; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-35h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-34h]
  std::string v14; // [rsp+40h] [rbp-30h] BYREF

  ret = getRequestParam<unsigned long>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v7 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v8 = (const char *)std::forward<char const(&)[7]>(a4);
    std::string::basic_string<std::allocator<char>>(&v14, v8, &__a);
    v6 = getRequestParam<std::string>(request, &v14, v7);
    std::string::~string(&v14);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v6;
};

// Line 271: range 000000000CD53921-000000000CD53A07
__int64 __fastcall getRequestParam<std::string,char const(&)[9],std::string&>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        std::string *para,
        std::remove_reference<char const (&)[9]>::type *a4,
        std::string *a5,
        const char (*args_0)[9])
{
  ApiRetcode v6; // ebx
  std::string *v7; // rbx
  const char *v8; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-35h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-34h]
  std::string v14; // [rsp+40h] [rbp-30h] BYREF

  ret = getRequestParam<std::string>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v7 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v8 = (const char *)std::forward<char const(&)[9]>(a4);
    std::string::basic_string<std::allocator<char>>(&v14, v8, &__a);
    v6 = getRequestParam<std::string>(request, &v14, v7);
    std::string::~string(&v14);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v6;
};

// Line 271: range 000000000CD560FF-000000000CD561E5
__int64 __fastcall getRequestParam<unsigned int,char const(&)[23],unsigned int &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[23]>::type *a4,
        unsigned int *a5,
        const char (*args_0)[23])
{
  ApiRetcode v6; // ebx
  unsigned int *v7; // rbx
  const char *v8; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-35h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-34h]
  std::string v14; // [rsp+40h] [rbp-30h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v7 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v8 = (const char *)std::forward<char const(&)[23]>(a4);
    std::string::basic_string<std::allocator<char>>(&v14, v8, &__a);
    v6 = getRequestParam<unsigned int>(request, &v14, v7);
    std::string::~string(&v14);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v6;
};

// Line 278: range 000000000CCCE0DA-000000000CCCE22B
__int64 __fastcall getRequestParam<unsigned int,char const(&)[11],unsigned int &,char const(&)[9],unsigned int &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[11]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[9]>::type *a6,
        unsigned int *args_3,
        std::remove_reference<char const (&)[7]>::type *args_4,
        std::string *args_5)
{
  unsigned int v9; // ebx
  std::string *v10; // rbx
  std::remove_reference<char const (&)[7]>::type *v11; // r15
  unsigned int *v12; // r14
  std::remove_reference<char const (&)[9]>::type *v13; // r13
  unsigned int *v14; // r12
  const char *v15; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-54h]
  std::string v22; // [rsp+40h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v10 = std::forward<std::string &>(args_5);
    v11 = (std::remove_reference<char const (&)[7]>::type *)std::forward<char const(&)[7]>(args_4);
    v12 = std::forward<unsigned int &>(args_3);
    v13 = (std::remove_reference<char const (&)[9]>::type *)std::forward<char const(&)[9]>(a6);
    v14 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v15 = (const char *)std::forward<char const(&)[11]>(a4);
    std::string::basic_string<std::allocator<char>>(&v22, v15, &__a);
    v9 = getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[7],std::string &>(
           request,
           &v22,
           v14,
           v13,
           v12,
           v11,
           v10);
    std::string::~string(&v22);
    std::allocator<char>::~allocator(&__a);
  }
  return v9;
};

// Line 288: range 000000000CB9749C-000000000CB97AE5
int32_t __cdecl RequestHandler::queryPlayerRawBinInfo(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  int32_t result; // eax
  Json::Value_0 *v8; // rax
  Json::Value_0 *v9; // rax
  Json::Value_0 *v10; // rax
  Json::Value_0 *v11; // rax
  Json::Value_0 *v12; // rax
  unsigned __int64 v13; // rax
  Json::Value_0 *v14; // rax
  Json::Value_0 *v15; // rax
  ApiRetcode retcode; // [rsp+2Ch] [rbp-204h]
  int32_t retcodea; // [rsp+2Ch] [rbp-204h]
  std::string key; // [rsp+30h] [rbp-200h] BYREF
  Json::Value_0 other; // [rsp+50h] [rbp-1E0h] BYREF
  char v21[432]; // [rsp+80h] [rbp-1B0h] BYREF

  v4 = (unsigned __int64)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(384LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 32 1 12 is_exist:298 48 4 7 uid:289 64 32 12 bin_data:315 128 192 19 player_data_row:299";
  *(_QWORD *)(v4 + 16) = RequestHandler::queryPlayerRawBinInfo;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556927;
  v6[536862723] = -218959118;
  v6[536862730] = -202116109;
  v6[536862731] = -202116109;
  *(_DWORD *)(v4 + 48) = 0;
  std::allocator<char>::allocator(v4 + 32);
  std::string::basic_string<std::allocator<char>>(&key, off_1A660020, (const std::allocator<char> *)(v4 + 32));
  retcode = getRequestParam<unsigned int>(request, &key, (unsigned int *)(v4 + 48));
  std::string::~string(&key);
  std::allocator<char>::~allocator(v4 + 32);
  if ( retcode )
  {
    result = retcode;
  }
  else
  {
    retcodea = 1;
    *(_BYTE *)(v4 + 32) = 0;
    TablePlayerData::TablePlayerData((TablePlayerData *const)(v4 + 128));
    if ( !MysqlOpPlayerData::selectPlayerDataByUid(
            *(_DWORD *)(v4 + 48),
            (TablePlayerData *)(v4 + 128),
            (bool *)(v4 + 32)) )
    {
      if ( *(_BYTE *)(v4 + 32) != 1 )
      {
        retcodea = 2001;
      }
      else
      {
        Json::Value::Value(&other, v4 + 136);
        v8 = Json::Value::operator[]((Json::Value_0 *const)jval, "nickname");
        Json::Value::operator=(v8, &other);
        Json::Value::~Value(&other);
        Json::Value::Value((Json::Value *)&other, *(_DWORD *)(v4 + 168));
        v9 = Json::Value::operator[]((Json::Value_0 *const)jval, "level");
        Json::Value::operator=(v9, &other);
        Json::Value::~Value(&other);
        Json::Value::Value((Json::Value *)&other, *(_DWORD *)(v4 + 172));
        v10 = Json::Value::operator[]((Json::Value_0 *const)jval, off_1A6605E0);
        Json::Value::operator=(v10, &other);
        Json::Value::~Value(&other);
        Json::Value::Value(&other, v4 + 184);
        v11 = Json::Value::operator[]((Json::Value_0 *const)jval, "json_data");
        Json::Value::operator=(v11, &other);
        Json::Value::~Value(&other);
        Json::Value::Value((Json::Value *)&other, *(_DWORD *)(v4 + 248));
        v12 = Json::Value::operator[]((Json::Value_0 *const)jval, "data_version");
        Json::Value::operator=(v12, &other);
        Json::Value::~Value(&other);
        std::string::basic_string(v4 + 64);
        mysqlpp::String::to_string((const mysqlpp::String *const)(v4 + 216), (std::string *)(v4 + 64));
        common::tools::StringUtils::base64Encode(&key, (const std::string *)(v4 + 64));
        std::string::operator=(v4 + 64, &key);
        std::string::~string(&key);
        v13 = std::string::size(v4 + 64);
        Json::Value::Value((Json::Value *)&other, v13);
        v14 = Json::Value::operator[]((Json::Value_0 *const)jval, "bin_data_size");
        Json::Value::operator=(v14, &other);
        Json::Value::~Value(&other);
        Json::Value::Value(&other, v4 + 64);
        v15 = Json::Value::operator[]((Json::Value_0 *const)jval, "bin_data");
        Json::Value::operator=(v15, &other);
        Json::Value::~Value(&other);
        retcodea = 0;
        std::string::~string((void *)(v4 + 64));
      }
    }
    TablePlayerData::~TablePlayerData((TablePlayerData *const)(v4 + 128));
    result = retcodea;
  }
  if ( v21 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF800C) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 329: range 000000000CB97AE6-000000000CB98518
int32_t __cdecl RequestHandler::queryPlayerWorldBinInfo(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  int32_t v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  int v8; // r15d
  int v9; // r15d
  common::milog::MiLogStream *v10; // rax
  _BOOL4 v11; // r15d
  const proto::PlayerSceneCompBin *v12; // rax
  proto::WorldBin *v13; // rax
  common::milog::MiLogStream *v14; // rax
  _BOOL4 v15; // r15d
  common::milog::MiLogStream *v16; // rax
  int v17; // r15d
  Json::Value *v18; // rax
  int v20; // [rsp+0h] [rbp-7B0h]
  char *v21; // [rsp+8h] [rbp-7A8h]
  int p_yielda; // [rsp+10h] [rbp-7A0h]
  char jvala; // [rsp+18h] [rbp-798h]
  Json::Value *jvalb; // [rsp+18h] [rbp-798h]
  std::allocator<char> __a; // [rsp+3Bh] [rbp-775h] BYREF
  int32_t retcode; // [rsp+3Ch] [rbp-774h]
  std::string key; // [rsp+40h] [rbp-770h] BYREF
  char v28[1872]; // [rsp+60h] [rbp-750h] BYREF

  jvala = (char)jval;
  p_yielda = (int)p_yield;
  v5 = (unsigned __int64)v28;
  v21 = v28;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_5(1824LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "12 48 1 12 is_exist:339 64 4 7 uid:330 80 4 11 options:375 96 16 6 os:361 128 32 12 bin_data:362"
                        " 192 32 15 json_string:374 256 40 14 status_ret:379 336 40 14 json_value:386 416 120 18 player_u"
                        "id_row:350 576 192 19 player_data_row:340 832 272 15 json_reader:385 1168 520 19 player_data_bin:368";
  *(_QWORD *)(v5 + 16) = RequestHandler::queryPlayerWorldBinInfo;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234753551;
  v7[536862722] = -234556924;
  v7[536862723] = -219021312;
  v7[536862725] = -218959118;
  v7[536862727] = -218959118;
  v7[536862729] = -218959360;
  v7[536862730] = 62194;
  v7[536862731] = -234881024;
  v7[536862732] = -218959118;
  v7[536862736] = -234881024;
  v7[536862737] = -218959118;
  v7[536862744] = -218959118;
  v7[536862745] = -218959118;
  v7[536862754] = -219021312;
  v7[536862755] = -218959118;
  v7[536862756] = 62194;
  v7[536862772] = -218103808;
  v7[536862773] = -202116109;
  v7[536862774] = -202116109;
  v7[536862775] = -202116109;
  v7[536862776] = -202116109;
  *(_DWORD *)(v5 + 64) = 0;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&key, off_1A660020, &__a);
  retcode = getRequestParam<unsigned int>(request, &key, (unsigned int *)(v5 + 64));
  std::string::~string(&key);
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v4 = retcode;
  }
  else
  {
    retcode = 1;
    *(_BYTE *)(v5 + 48) = 0;
    TablePlayerData::TablePlayerData((TablePlayerData *const)(v5 + 576));
    if ( MysqlOpPlayerData::selectPlayerDataByUid(
           *(_DWORD *)(v5 + 64),
           (TablePlayerData *)(v5 + 576),
           (bool *)(v5 + 48)) )
    {
      v8 = 0;
    }
    else if ( *(_BYTE *)(v5 + 48) != 1 )
    {
      retcode = 2001;
      v8 = 0;
    }
    else
    {
      TablePlayerUid::TablePlayerUid((TablePlayerUid *const)(v5 + 416));
      if ( MysqlOpPlayerData::selectPlayerUidByUid(
             *(_DWORD *)(v5 + 64),
             (TablePlayerUid *)(v5 + 416),
             (bool *)(v5 + 48)) )
      {
        v9 = 0;
      }
      else if ( *(_BYTE *)(v5 + 48) != 1 )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&key,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/handler/request_handler.api.hpp",
          "queryPlayerWorldBinInfo",
          357);
        v10 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
                (common::milog::MiLogStream *const)&key,
                (const char (*)[44])"player_uid table select by uid failed uid: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v5 + 64));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
        retcode = 2001;
        v9 = 0;
      }
      else
      {
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v5 + 96));
        std::string::basic_string(v5 + 128);
        mysqlpp::String::to_string((const mysqlpp::String *const)(v5 + 664), (std::string *)(v5 + 128));
        if ( common::tools::ZlibUtil::isCompressWithPad((const std::string *)(v5 + 128)) )
        {
          common::tools::ZlibUtil::uncompressWithPad(&key, (const std::string *)(v5 + 128));
          std::string::operator=(v5 + 128, &key);
          std::string::~string(&key);
        }
        proto::PlayerDataBin::PlayerDataBin((proto::PlayerDataBin *const)(v5 + 1168));
        if ( (unsigned __int8)google::protobuf::MessageLite::ParseFromString(v5 + 1168, v5 + 128) != 1 )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&key,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/handler/request_handler.api.hpp",
            "queryPlayerWorldBinInfo",
            371);
          common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
            (common::milog::MiLogStream *const)&key,
            (const char (*)[38])"player_data_bin ParseFromString fails");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
          v4 = -1;
          v11 = 0;
        }
        else
        {
          std::allocator<char>::allocator(&__a);
          std::string::basic_string<std::allocator<char>>((std::string *const)(v5 + 192), byte_1A5D1560, &__a);
          std::allocator<char>::~allocator(&__a);
          google::protobuf::util::JsonPrintOptions::JsonPrintOptions((google::protobuf::util::JsonPrintOptions *const)(v5 + 80));
          *(_BYTE *)(v5 + 80) = 1;
          *(_BYTE *)(v5 + 81) = 1;
          *(_BYTE *)(v5 + 83) = 1;
          v12 = proto::PlayerDataBin::scene_bin((const proto::PlayerDataBin *const)(v5 + 1168));
          v13 = (proto::WorldBin *)proto::PlayerSceneCompBin::world(v12);
          google::protobuf::util::MessageToJsonString(
            (google::protobuf::util::Status *)(v5 + 256),
            v13,
            v20,
            v28,
            p_yielda,
            jvala,
            (int)request,
            this);
          if ( !google::protobuf::util::Status::ok((const google::protobuf::util::Status *const)(v5 + 256)) )
          {
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)&key,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/handler/request_handler.api.hpp",
              "queryPlayerWorldBinInfo",
              382);
            v14 = common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(
                    (common::milog::MiLogStream *const)&key,
                    (const char (*)[46])"world_bin to json_string faile d player_uid: ");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, (const unsigned int *)(v5 + 64));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
            v4 = -1;
            v15 = 0;
          }
          else
          {
            Json::Reader::Reader((Json::Reader *)(v5 + 832));
            Json::Value::Value(v5 + 336, 0LL);
            if ( !Json::Reader::parse(
                    (Json::Reader *const)(v5 + 832),
                    (const std::string *)(v5 + 192),
                    (Json::Value *)(v5 + 336),
                    1) )
            {
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)&key,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/handler/request_handler.api.hpp",
                "queryPlayerWorldBinInfo",
                389);
              v16 = common::milog::MiLogStream::operator<<<char [56],(char *[56])0>(
                      (common::milog::MiLogStream *const)&key,
                      (const char (*)[56])"world_bin json_string to json_value failed player_uid: ");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v16,
                (const unsigned int *)(v5 + 64));
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
              v4 = -1;
              v17 = 0;
            }
            else
            {
              v18 = (Json::Value *)Json::Value::operator[]((Json::Value_0 *const)jvalb, "world_bin_data");
              Json::Value::operator=(v18);
              retcode = 0;
              v17 = 1;
            }
            Json::Value::~Value((Json::Value_0 *const)(v5 + 336));
            Json::Reader::~Reader((Json::Reader *const)(v5 + 832));
            v15 = v17 == 1;
          }
          google::protobuf::util::Status::~Status((google::protobuf::util::Status *const)(v5 + 256));
          std::string::~string((void *)(v5 + 192));
          v11 = v15;
        }
        proto::PlayerDataBin::~PlayerDataBin((proto::PlayerDataBin *const)(v5 + 1168));
        std::string::~string((void *)(v5 + 128));
        common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v5 + 96));
        if ( v11 )
          v9 = 2;
        else
          v9 = 1;
      }
      TablePlayerUid::~TablePlayerUid((TablePlayerUid *const)(v5 + 416));
      if ( v9 )
      {
        if ( v9 == 2 )
          v8 = 2;
        else
          v8 = 1;
      }
      else
      {
        v8 = 0;
      }
    }
    TablePlayerData::~TablePlayerData((TablePlayerData *const)(v5 + 576));
    if ( !v8 || v8 == 2 )
      v4 = retcode;
  }
  if ( v21 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8014) = 0;
    *(_DWORD *)((v5 >> 3) + 0x7FFF801C) = 0;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF802C) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8040) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8060) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8088) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8090) = 0;
    *(_QWORD *)((v5 >> 3) + 0x7FFF80D0) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF80D8) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF80E0) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    __asan_stack_free_5(v5, 1824LL, v21);
  }
  return v4;
};

// Line 357: range 000000000CCCE2EE-000000000CCCE401
__int64 __fastcall getRequestParam<unsigned int,char const(&)[17],std::string &,char const(&)[15],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[17]>::type *a4,
        std::string *a5,
        std::remove_reference<char const (&)[15]>::type *a6,
        std::string *args_3)
{
  unsigned int v7; // ebx
  std::string *v8; // r13
  std::remove_reference<char const (&)[15]>::type *v9; // r12
  std::string *v10; // rbx
  const char *v11; // rax
  const char (*v12)[15]; // r9
  std::allocator<char> __a; // [rsp+3Bh] [rbp-45h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-44h]
  std::string v19; // [rsp+40h] [rbp-40h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v8 = std::forward<std::string &>(args_3);
    v9 = (std::remove_reference<char const (&)[15]>::type *)std::forward<char const(&)[15]>(a6);
    v10 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v11 = (const char *)std::forward<char const(&)[17]>(a4);
    std::string::basic_string<std::allocator<char>>(&v19, v11, &__a);
    v7 = getRequestParam<std::string,char const(&)[15],std::string&>(request, &v19, v10, v9, v8, v12);
    std::string::~string(&v19);
    std::allocator<char>::~allocator(&__a);
  }
  return v7;
};

// Line 357: range 000000000CCD90EE-000000000CCD9271
__int64 __fastcall getRequestParam<unsigned int,char const(&)[8],unsigned int &,char const(&)[6],unsigned int &,char const(&)[6],int &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[8]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[6]>::type *a6,
        unsigned int *args_3,
        std::remove_reference<char const (&)[6]>::type *args_4,
        int *args_5,
        std::remove_reference<char const (&)[7]>::type *args_6,
        std::string *args_7)
{
  unsigned int v11; // ebx
  std::string *v12; // r13
  std::remove_reference<char const (&)[7]>::type *v13; // r12
  int *v14; // rbx
  std::remove_reference<char const (&)[6]>::type *v15; // r15
  unsigned int *v16; // r14
  const char *v17; // rax
  unsigned int *v19; // [rsp+0h] [rbp-A0h]
  char (*v20)[6]; // [rsp+8h] [rbp-98h]
  std::allocator<char> __a; // [rsp+4Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+4Ch] [rbp-54h]
  std::string v26; // [rsp+50h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v12 = std::forward<std::string &>(args_7);
    v13 = (std::remove_reference<char const (&)[7]>::type *)std::forward<char const(&)[7]>(args_6);
    v14 = std::forward<int &>(args_5);
    v20 = (char (*)[6])std::forward<char const(&)[6]>(args_4);
    v19 = std::forward<unsigned int &>(args_3);
    v15 = (std::remove_reference<char const (&)[6]>::type *)std::forward<char const(&)[6]>(a6);
    v16 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v17 = (const char *)std::forward<char const(&)[8]>(a4);
    std::string::basic_string<std::allocator<char>>(&v26, v17, &__a);
    v11 = getRequestParam<unsigned int,char const(&)[6],unsigned int &,char const(&)[6],int &,char const(&)[7],std::string &>(
            request,
            &v26,
            v16,
            v15,
            v19,
            v20,
            v14,
            v13,
            v12);
    std::string::~string(&v26);
    std::allocator<char>::~allocator(&__a);
  }
  return v11;
};

// Line 402: range 000000000CB9851A-000000000CB98F36
int32_t __cdecl RequestHandler::queryPlayerBlockBinInfo(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  int32_t v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // rax
  int v9; // r15d
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  _BOOL4 v13; // r15d
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  int v17; // r15d
  Json::Value *v18; // rax
  int v19; // r15d
  Json::Value *v20; // rax
  Json::Value *v21; // rax
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-365h] BYREF
  int32_t retcode; // [rsp+3Ch] [rbp-364h]
  std::vector<TableBlockData>::iterator __for_begin; // [rsp+40h] [rbp-360h] BYREF
  std::vector<TableBlockData>::iterator __for_end; // [rsp+48h] [rbp-358h] BYREF
  std::vector<TableBlockData> *__for_range; // [rsp+50h] [rbp-350h]
  TableBlockData *row; // [rsp+58h] [rbp-348h]
  const google::protobuf::Map<unsigned int,std::string > *__for_range_0; // [rsp+60h] [rbp-340h]
  const unsigned int *p_group_id; // [rsp+68h] [rbp-338h]
  google::protobuf::Map<unsigned int,std::string >::const_iterator __for_begin_0; // [rsp+70h] [rbp-330h] BYREF
  google::protobuf::Map<unsigned int,std::string >::const_iterator __for_end_0; // [rsp+90h] [rbp-310h] BYREF
  std::string key; // [rsp+B0h] [rbp-2F0h] BYREF
  char v35[720]; // [rsp+D0h] [rbp-2D0h] BYREF

  v5 = (unsigned __int64)v35;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_4(672LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "7 48 4 7 uid:403 64 24 11 row_vec:413 128 32 12 bin_data:422 192 40 24 all_block_json_value:410 "
                        "272 40 24 all_group_json_value:436 352 40 14 json_value:439 432 168 13 block_bin:429";
  *(_QWORD *)(v5 + 16) = RequestHandler::queryPlayerBlockBinInfo;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234556943;
  v7[536862722] = -234881024;
  v7[536862723] = -218959118;
  v7[536862725] = -218959118;
  v7[536862727] = -218959360;
  v7[536862728] = 62194;
  v7[536862729] = -234881024;
  v7[536862730] = -218959118;
  v7[536862732] = -218959360;
  v7[536862733] = 62194;
  v7[536862738] = -218103808;
  v7[536862739] = -202116109;
  v7[536862740] = -202116109;
  *(_DWORD *)(v5 + 48) = 0;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&key, off_1A660020, &__a);
  retcode = getRequestParam<unsigned int>(request, &key, (unsigned int *)(v5 + 48));
  std::string::~string(&key);
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v4 = retcode;
  }
  else
  {
    retcode = 1;
    Json::Value::Value(v5 + 192, 0LL);
    std::vector<TableBlockData>::vector((std::vector<TableBlockData> *const)(v5 + 64));
    if ( MysqlOpPlayerData::selectAllBlockData(*(_DWORD *)(v5 + 48), (std::vector<TableBlockData> *)(v5 + 64)) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/handler/request_handler.api.hpp",
        "queryPlayerBlockBinInfo",
        416);
      v8 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
             (common::milog::MiLogStream *const)&key,
             (const char (*)[30])"selectAllBlockData error,uid:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v5 + 48));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      v4 = -1;
      v9 = 0;
    }
    else
    {
      __for_range = (std::vector<TableBlockData> *)(v5 + 64);
      __for_begin._M_current = std::vector<TableBlockData>::begin((std::vector<TableBlockData> *const)(v5 + 64))._M_current;
      __for_end._M_current = std::vector<TableBlockData>::end(__for_range)._M_current;
      while ( __gnu_cxx::operator!=<TableBlockData *,std::vector<TableBlockData>>(&__for_begin, &__for_end) )
      {
        row = __gnu_cxx::__normal_iterator<TableBlockData *,std::vector<TableBlockData>>::operator*(&__for_begin);
        std::string::basic_string(v5 + 128);
        mysqlpp::String::to_string(&row->bin_data, (std::string *)(v5 + 128));
        if ( common::tools::ZlibUtil::isCompressWithPad((const std::string *)(v5 + 128)) )
        {
          common::tools::ZlibUtil::uncompressWithPad(&key, (const std::string *)(v5 + 128));
          std::string::operator=(v5 + 128, &key);
          std::string::~string(&key);
        }
        proto::BlockBin::BlockBin((proto::BlockBin *const)(v5 + 432));
        if ( (unsigned __int8)google::protobuf::MessageLite::ParseFromString(v5 + 432, v5 + 128) != 1 )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&key,
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/handler/request_handler.api.hpp",
            "queryPlayerBlockBinInfo",
            432);
          v10 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
                  (common::milog::MiLogStream *const)&key,
                  (const char (*)[44])"BlockBin parse from string failed,block_id:");
          v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, &row->block_id);
          v12 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v11, (const char (*)[7])", uid:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v5 + 48));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
          v4 = -1;
          v13 = 0;
        }
        else
        {
          Json::Value::Value(v5 + 272, 0LL);
          __for_range_0 = proto::BlockBin::group_map[abi:cxx11]((const proto::BlockBin *const)(v5 + 432));
          google::protobuf::Map<unsigned int,std::string>::begin(&__for_begin_0, __for_range_0);
          google::protobuf::Map<unsigned int,std::string>::end(&__for_end_0, __for_range_0);
          while ( google::protobuf::operator!=(&__for_begin_0, &__for_end_0) )
          {
            p_group_id = (const unsigned int *)google::protobuf::Map<unsigned int,std::string>::const_iterator::operator*(&__for_begin_0);
            Json::Value::Value(v5 + 352, 0LL);
            if ( RequestHandler::parseProtoStrToJson<proto::GroupBin>(
                   this,
                   (const std::string *)(p_group_id + 2),
                   (Json::Value *)(v5 + 352)) )
            {
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)&key,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/handler/request_handler.api.hpp",
                "queryPlayerBlockBinInfo",
                442);
              v14 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                      (common::milog::MiLogStream *const)&key,
                      (const char (*)[32])"parseProtoStrToJson fails, uid:");
              v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v14,
                      (const unsigned int *)(v5 + 48));
              v16 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
                      v15,
                      (const char (*)[11])" group_id:");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, p_group_id);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
              v4 = -1;
              v17 = 0;
            }
            else
            {
              if ( *(_BYTE *)(((unsigned __int64)p_group_id >> 3) + 0x7FFF8000) != 0
                && *(_BYTE *)(((unsigned __int64)p_group_id >> 3) + 0x7FFF8000) <= 3 )
              {
                __asan_report_load4(p_group_id);
              }
              std::to_string(&key, *p_group_id);
              v18 = (Json::Value *)Json::Value::operator[]((Json::Value_0 *const)(v5 + 272), &key);
              Json::Value::operator=(v18);
              std::string::~string(&key);
              v17 = 1;
            }
            Json::Value::~Value((Json::Value_0 *const)(v5 + 352));
            if ( v17 != 1 )
            {
              v19 = 0;
              goto LABEL_27;
            }
            google::protobuf::Map<unsigned int,std::string>::const_iterator::operator++(&__for_begin_0);
          }
          if ( *(_BYTE *)(((unsigned __int64)&row->block_id >> 3) + 0x7FFF8000) != 0
            && (char)((((_BYTE)row + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&row->block_id >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(&row->block_id);
          }
          std::to_string(&key, row->block_id);
          v20 = (Json::Value *)Json::Value::operator[]((Json::Value_0 *const)(v5 + 192), &key);
          Json::Value::operator=(v20);
          std::string::~string(&key);
          v19 = 1;
LABEL_27:
          Json::Value::~Value((Json::Value_0 *const)(v5 + 272));
          v13 = v19 == 1;
        }
        proto::BlockBin::~BlockBin((proto::BlockBin *const)(v5 + 432));
        std::string::~string((void *)(v5 + 128));
        if ( !v13 )
        {
          v9 = 0;
          goto LABEL_32;
        }
        __gnu_cxx::__normal_iterator<TableBlockData *,std::vector<TableBlockData>>::operator++(&__for_begin);
      }
      v21 = (Json::Value *)Json::Value::operator[]((Json::Value_0 *const)jval, "block_bin_data");
      Json::Value::operator=(v21);
      retcode = 0;
      v9 = 1;
    }
LABEL_32:
    std::vector<TableBlockData>::~vector((std::vector<TableBlockData> *const)(v5 + 64));
    if ( v9 == 1 )
      v4 = retcode;
    Json::Value::~Value((Json::Value_0 *const)(v5 + 192));
  }
  result = v4;
  if ( v35 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8014) = 0;
    *(_QWORD *)((v5 >> 3) + 0x7FFF801C) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8030) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8048) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8050) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8050) = -168430091;
  }
  return result;
};

// Line 415: range 000000000CCD04AC-000000000CCD0592
__int64 __fastcall getRequestParam<std::string,char const(&)[10],bool &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        std::string *para,
        std::remove_reference<char const (&)[10]>::type *a4,
        bool *a5,
        const char (*args_0)[10])
{
  ApiRetcode v6; // ebx
  bool *v7; // rbx
  const char *v8; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-35h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-34h]
  std::string v14; // [rsp+40h] [rbp-30h] BYREF

  ret = getRequestParam<std::string>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v7 = std::forward<bool &>(a5);
    std::allocator<char>::allocator(&__a);
    v8 = (const char *)std::forward<char const(&)[10]>(a4);
    std::string::basic_string<std::allocator<char>>(&v14, v8, &__a);
    v6 = getRequestParam<bool>(request, &v14, v7);
    std::string::~string(&v14);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v6;
};

// Line 459: range 000000000CB98F38-000000000CB999E5
int32_t __cdecl RequestHandler::queryPlayerGroupBinInfo(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  int32_t v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  const char (*v8)[9]; // r9
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  int v13; // r15d
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  Json::Value_0 *v17; // r14
  Json::Value *v18; // rax
  common::milog::MiLogStream *v19; // r14
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // r14
  common::milog::MiLogStream *v22; // rax
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+37h] [rbp-309h] BYREF
  int val; // [rsp+38h] [rbp-308h] BYREF
  int32_t retcode; // [rsp+3Ch] [rbp-304h]
  std::vector<TableBlockData>::iterator __for_begin; // [rsp+40h] [rbp-300h] BYREF
  std::vector<TableBlockData>::iterator __for_end; // [rsp+48h] [rbp-2F8h] BYREF
  std::vector<TableBlockData> *__for_range; // [rsp+50h] [rbp-2F0h]
  TableBlockData *row; // [rsp+58h] [rbp-2E8h]
  const google::protobuf::Map<unsigned int,std::string > *__for_range_0; // [rsp+60h] [rbp-2E0h]
  const unsigned int *p_group_id; // [rsp+68h] [rbp-2D8h]
  google::protobuf::Map<unsigned int,std::string >::const_iterator __for_begin_0; // [rsp+70h] [rbp-2D0h] BYREF
  google::protobuf::Map<unsigned int,std::string >::const_iterator __for_end_0; // [rsp+90h] [rbp-2B0h] BYREF
  std::string v36; // [rsp+B0h] [rbp-290h] BYREF
  std::string key; // [rsp+D0h] [rbp-270h] BYREF
  char v38[592]; // [rsp+F0h] [rbp-250h] BYREF

  v5 = (unsigned __int64)v38;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_4(544LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "7 32 4 7 uid:460 48 4 19 target_group_id:461 64 16 9 timer:468 96 24 11 row_vec:469 160 32 12 bi"
                        "n_data:478 224 40 14 json_value:496 304 168 13 block_bin:485";
  *(_QWORD *)(v5 + 16) = RequestHandler::queryPlayerGroupBinInfo;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234556924;
  v7[536862722] = -219021312;
  v7[536862723] = -234881024;
  v7[536862724] = -218959118;
  v7[536862726] = -218959118;
  v7[536862728] = -218959360;
  v7[536862729] = 62194;
  v7[536862734] = -218103808;
  v7[536862735] = -202116109;
  v7[536862736] = -202116109;
  *(_DWORD *)(v5 + 32) = 0;
  *(_DWORD *)(v5 + 48) = 0;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&key, off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[9],unsigned int &>(
              request,
              &key,
              (unsigned int *)(v5 + 32),
              (std::remove_reference<char const (&)[9]>::type *)"group_id",
              (unsigned int *)(v5 + 48),
              v8);
  std::string::~string(&key);
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v4 = retcode;
  }
  else
  {
    common::tools::TimeUtils::Timer::Timer((common::tools::TimeUtils::Timer *const)(v5 + 64));
    std::vector<TableBlockData>::vector((std::vector<TableBlockData> *const)(v5 + 96));
    if ( MysqlOpPlayerData::selectAllBlockData(*(_DWORD *)(v5 + 32), (std::vector<TableBlockData> *)(v5 + 96)) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/handler/request_handler.api.hpp",
        "queryPlayerGroupBinInfo",
        472);
      v9 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
             (common::milog::MiLogStream *const)&key,
             (const char (*)[30])"selectAllBlockData error,uid:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v5 + 32));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      v4 = -1;
    }
    else
    {
      __for_range = (std::vector<TableBlockData> *)(v5 + 96);
      __for_begin._M_current = std::vector<TableBlockData>::begin((std::vector<TableBlockData> *const)(v5 + 96))._M_current;
      __for_end._M_current = std::vector<TableBlockData>::end(__for_range)._M_current;
      while ( __gnu_cxx::operator!=<TableBlockData *,std::vector<TableBlockData>>(&__for_begin, &__for_end) )
      {
        row = __gnu_cxx::__normal_iterator<TableBlockData *,std::vector<TableBlockData>>::operator*(&__for_begin);
        std::string::basic_string(v5 + 160);
        mysqlpp::String::to_string(&row->bin_data, (std::string *)(v5 + 160));
        if ( common::tools::ZlibUtil::isCompressWithPad((const std::string *)(v5 + 160)) )
        {
          common::tools::ZlibUtil::uncompressWithPad(&key, (const std::string *)(v5 + 160));
          std::string::operator=(v5 + 160, &key);
          std::string::~string(&key);
        }
        proto::BlockBin::BlockBin((proto::BlockBin *const)(v5 + 304));
        if ( (unsigned __int8)google::protobuf::MessageLite::ParseFromString(v5 + 304, v5 + 160) != 1 )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&key,
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/handler/request_handler.api.hpp",
            "queryPlayerGroupBinInfo",
            488);
          v10 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
                  (common::milog::MiLogStream *const)&key,
                  (const char (*)[44])"BlockBin parse from string failed,block_id:");
          v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, &row->block_id);
          v12 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v11, (const char (*)[7])", uid:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v5 + 32));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
          v4 = -1;
          v13 = 0;
        }
        else
        {
          __for_range_0 = proto::BlockBin::group_map[abi:cxx11]((const proto::BlockBin *const)(v5 + 304));
          google::protobuf::Map<unsigned int,std::string>::begin(&__for_begin_0, __for_range_0);
          google::protobuf::Map<unsigned int,std::string>::end(&__for_end_0, __for_range_0);
          while ( 1 )
          {
            if ( !google::protobuf::operator!=(&__for_begin_0, &__for_end_0) )
            {
              v13 = 1;
              goto LABEL_29;
            }
            p_group_id = (const unsigned int *)google::protobuf::Map<unsigned int,std::string>::const_iterator::operator*(&__for_begin_0);
            if ( *(_BYTE *)(((unsigned __int64)p_group_id >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)p_group_id >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(p_group_id);
            }
            if ( *p_group_id == *(_DWORD *)(v5 + 48) )
              break;
            google::protobuf::Map<unsigned int,std::string>::const_iterator::operator++(&__for_begin_0);
          }
          Json::Value::Value(v5 + 224, 0LL);
          if ( RequestHandler::parseProtoStrToJson<proto::GroupBin>(
                 this,
                 (const std::string *)(p_group_id + 2),
                 (Json::Value *)(v5 + 224)) )
          {
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)&key,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/handler/request_handler.api.hpp",
              "queryPlayerGroupBinInfo",
              499);
            v14 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                    (common::milog::MiLogStream *const)&key,
                    (const char (*)[32])"parseProtoStrToJson fails, uid:");
            v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v14,
                    (const unsigned int *)(v5 + 32));
            v16 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v15, (const char (*)[11])" group_id:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, p_group_id);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
            v4 = -1;
          }
          else
          {
            if ( *(_BYTE *)(((unsigned __int64)&row->block_id >> 3) + 0x7FFF8000) != 0
              && (char)((((_BYTE)row + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&row->block_id >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(&row->block_id);
            }
            std::to_string(&v36, row->block_id);
            v17 = Json::Value::operator[]((Json::Value_0 *const)jval, &v36);
            if ( *(_BYTE *)(((unsigned __int64)p_group_id >> 3) + 0x7FFF8000) != 0
              && *(_BYTE *)(((unsigned __int64)p_group_id >> 3) + 0x7FFF8000) <= 3 )
            {
              __asan_report_load4(p_group_id);
            }
            std::to_string(&key, *p_group_id);
            v18 = (Json::Value *)Json::Value::operator[](v17, &key);
            Json::Value::operator=(v18);
            std::string::~string(&key);
            std::string::~string(&v36);
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)&key,
              &common::milog::MiLogDefault::default_log_obj_,
              1u,
              "./src/handler/request_handler.api.hpp",
              "queryPlayerGroupBinInfo",
              503);
            v19 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                    (common::milog::MiLogStream *const)&key,
                    (const char (*)[31])"queryPlayerGroupBinInfo cost: ");
            val = common::tools::TimeUtils::Timer::time((const common::tools::TimeUtils::Timer *const)(v5 + 64));
            v20 = common::milog::MiLogStream::operator<<<int,(int *)0>(v19, &val);
            common::milog::MiLogStream::operator<<<char [3],(char *[3])0>(v20, (const char (*)[3])"us");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
            v4 = 0;
          }
          Json::Value::~Value((Json::Value_0 *const)(v5 + 224));
          v13 = 0;
        }
LABEL_29:
        proto::BlockBin::~BlockBin((proto::BlockBin *const)(v5 + 304));
        std::string::~string((void *)(v5 + 160));
        if ( v13 != 1 )
          goto LABEL_32;
        __gnu_cxx::__normal_iterator<TableBlockData *,std::vector<TableBlockData>>::operator++(&__for_begin);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/handler/request_handler.api.hpp",
        "queryPlayerGroupBinInfo",
        507);
      v21 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
              (common::milog::MiLogStream *const)&key,
              (const char (*)[31])"queryPlayerGroupBinInfo cost: ");
      val = common::tools::TimeUtils::Timer::time((const common::tools::TimeUtils::Timer *const)(v5 + 64));
      v22 = common::milog::MiLogStream::operator<<<int,(int *)0>(v21, &val);
      common::milog::MiLogStream::operator<<<char [3],(char *[3])0>(v22, (const char (*)[3])"us");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      v4 = 0;
    }
LABEL_32:
    std::vector<TableBlockData>::~vector((std::vector<TableBlockData> *const)(v5 + 96));
    common::tools::TimeUtils::Timer::~Timer((common::tools::TimeUtils::Timer *const)(v5 + 64));
  }
  result = v4;
  if ( v38 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8018) = 0;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8038) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8040) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8040) = -168430091;
  }
  return result;
};

// Line 512: range 000000000CB999E6-000000000CB9A565
int32_t __cdecl RequestHandler::queryPlayerGroupBinInfo2(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  bool v7; // r14
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  int v15; // r14d
  const google::protobuf::Map<unsigned int,std::string > *v16; // rax
  const google::protobuf::Map<unsigned int,std::string > *v17; // rax
  google::protobuf::Map<unsigned int,std::string >::const_pointer v18; // rax
  common::milog::MiLogStream *v19; // r14
  common::milog::MiLogStream *v20; // rax
  Json::Value_0 *v21; // r14
  Json::Value *v22; // rax
  common::milog::MiLogStream *v23; // r14
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // r14
  common::milog::MiLogStream *v26; // rax
  int32_t result; // eax
  int32_t v28; // [rsp+Ch] [rbp-394h]
  std::less<unsigned int> __comp; // [rsp+36h] [rbp-36Ah] BYREF
  std::allocator<char> __a; // [rsp+37h] [rbp-369h] BYREF
  int val; // [rsp+38h] [rbp-368h] BYREF
  int32_t retcode; // [rsp+3Ch] [rbp-364h]
  std::vector<TableBlockData>::iterator __for_begin; // [rsp+40h] [rbp-360h] BYREF
  std::vector<TableBlockData> *__for_range; // [rsp+48h] [rbp-358h]
  const TableBlockData *row; // [rsp+50h] [rbp-350h]
  std::vector<TableBlockData>::iterator __for_end; // [rsp+58h] [rbp-348h] BYREF
  google::protobuf::Map<unsigned int,std::string >::const_iterator b; // [rsp+60h] [rbp-340h] BYREF
  std::string v39; // [rsp+80h] [rbp-320h] BYREF
  std::string key; // [rsp+A0h] [rbp-300h] BYREF
  std::set<unsigned int> p_block_id_set; // [rsp+C0h] [rbp-2E0h] BYREF
  char v42[688]; // [rsp+F0h] [rbp-2B0h] BYREF

  v4 = (unsigned __int64)v42;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_4(640LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "9 48 4 7 uid:513 64 4 12 group_id:514 80 4 12 block_id:514 96 16 9 timer:521 128 24 11 row_vec:5"
                        "22 192 24 8 iter:545 256 32 13 block_str:533 320 40 14 group_json:530 400 168 13 block_bin:539";
  *(_QWORD *)(v4 + 16) = RequestHandler::queryPlayerGroupBinInfo2;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -234556924;
  v6[536862723] = -219021312;
  v6[536862724] = -234881024;
  v6[536862725] = -218959118;
  v6[536862726] = -234881024;
  v6[536862727] = -218959118;
  v6[536862729] = -218959118;
  v6[536862731] = -218959360;
  v6[536862732] = 62194;
  v6[536862737] = -218103808;
  v6[536862738] = -202116109;
  v6[536862739] = -202116109;
  *(_DWORD *)(v4 + 48) = 0;
  *(_DWORD *)(v4 + 64) = 0;
  *(_DWORD *)(v4 + 80) = 0;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&key, off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[9],unsigned int &>(
              request,
              &key,
              (unsigned int *)(v4 + 48),
              (std::remove_reference<char const (&)[9]>::type *)"group_id",
              (unsigned int *)(v4 + 64),
              (std::remove_reference<char const (&)[9]>::type *)"block_id",
              (unsigned int *)(v4 + 80));
  std::string::~string(&key);
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v28 = retcode;
  }
  else
  {
    common::tools::TimeUtils::Timer::Timer((common::tools::TimeUtils::Timer *const)(v4 + 96));
    std::vector<TableBlockData>::vector((std::vector<TableBlockData> *const)(v4 + 128));
    LODWORD(__for_end._M_current) = *(_DWORD *)(v4 + 80);
    HIDWORD(__for_end._M_current) = 9999;
    std::allocator<unsigned int>::allocator((std::allocator<unsigned int> *const)&__a);
    std::set<unsigned int>::set(
      &p_block_id_set,
      (std::initializer_list<unsigned int>)__PAIR128__(2LL, &__for_end),
      &__comp,
      (const std::set<unsigned int>::allocator_type *)&__a);
    v7 = MysqlOpPlayerData::selectBlockData(
           *(_DWORD *)(v4 + 48),
           &p_block_id_set,
           (std::vector<TableBlockData> *)(v4 + 128)) != 0;
    std::set<unsigned int>::~set(&p_block_id_set);
    std::allocator<unsigned int>::~allocator((std::allocator<unsigned int> *const)&__a);
    if ( v7 )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/handler/request_handler.api.hpp",
        "queryPlayerGroupBinInfo2",
        526);
      v8 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
             (common::milog::MiLogStream *const)&key,
             (const char (*)[21])"selectBlockData uid:");
      v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v4 + 48));
      v10 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v9, (const char (*)[2])" ");
      v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v4 + 80));
      common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v11, (const char (*)[7])" fails");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      v28 = -1;
    }
    else
    {
      Json::Value::Value(v4 + 320, 0LL);
      __for_range = (std::vector<TableBlockData> *)(v4 + 128);
      __for_begin._M_current = std::vector<TableBlockData>::begin((std::vector<TableBlockData> *const)(v4 + 128))._M_current;
      __for_end._M_current = std::vector<TableBlockData>::end(__for_range)._M_current;
      while ( __gnu_cxx::operator!=<TableBlockData *,std::vector<TableBlockData>>(&__for_begin, &__for_end) )
      {
        row = __gnu_cxx::__normal_iterator<TableBlockData *,std::vector<TableBlockData>>::operator*(&__for_begin);
        std::string::basic_string(v4 + 256);
        mysqlpp::String::to_string(&row->bin_data, (std::string *)(v4 + 256));
        if ( common::tools::ZlibUtil::isCompressWithPad((const std::string *)(v4 + 256)) )
        {
          common::tools::ZlibUtil::uncompressWithPad(&key, (const std::string *)(v4 + 256));
          std::string::operator=(v4 + 256, &key);
          std::string::~string(&key);
        }
        proto::BlockBin::BlockBin((proto::BlockBin *const)(v4 + 400));
        if ( (unsigned __int8)google::protobuf::MessageLite::ParseFromString(v4 + 400, v4 + 256) != 1 )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&key,
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/handler/request_handler.api.hpp",
            "queryPlayerGroupBinInfo2",
            542);
          v12 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
                  (common::milog::MiLogStream *const)&key,
                  (const char (*)[44])"BlockBin parse from string failed,block_id:");
          v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, &row->block_id);
          v14 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v13, (const char (*)[7])", uid:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, (const unsigned int *)(v4 + 48));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
          v28 = -1;
          v15 = 0;
        }
        else
        {
          v16 = proto::BlockBin::group_map[abi:cxx11]((const proto::BlockBin *const)(v4 + 400));
          google::protobuf::Map<unsigned int,std::string>::find(
            (google::protobuf::Map<unsigned int,std::string >::const_iterator *)(v4 + 192),
            v16,
            (const google::protobuf::Map<unsigned int,std::string >::key_type *)(v4 + 64));
          v17 = proto::BlockBin::group_map[abi:cxx11]((const proto::BlockBin *const)(v4 + 400));
          google::protobuf::Map<unsigned int,std::string>::end(&b, v17);
          if ( google::protobuf::operator==(
                 (const google::protobuf::Map<unsigned int,std::string >::const_iterator *)(v4 + 192),
                 &b) )
          {
            v15 = 1;
          }
          else
          {
            v18 = google::protobuf::Map<unsigned int,std::string>::const_iterator::operator->((const google::protobuf::Map<unsigned int,std::string >::const_iterator *const)(v4 + 192));
            if ( RequestHandler::parseProtoStrToJson<proto::GroupBin>(this, &v18->second, (Json::Value *)(v4 + 320)) )
            {
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)&key,
                &common::milog::MiLogDefault::default_log_obj_,
                1u,
                "./src/handler/request_handler.api.hpp",
                "queryPlayerGroupBinInfo2",
                557);
              v23 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
                      (common::milog::MiLogStream *const)&key,
                      (const char (*)[38])"queryPlayerGroupBinInfo2 error cost: ");
              val = common::tools::TimeUtils::Timer::time((const common::tools::TimeUtils::Timer *const)(v4 + 96));
              v24 = common::milog::MiLogStream::operator<<<int,(int *)0>(v23, &val);
              common::milog::MiLogStream::operator<<<char [3],(char *[3])0>(v24, (const char (*)[3])"us");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
              v28 = 2021;
              v15 = 0;
            }
            else
            {
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)&key,
                &common::milog::MiLogDefault::default_log_obj_,
                1u,
                "./src/handler/request_handler.api.hpp",
                "queryPlayerGroupBinInfo2",
                553);
              v19 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
                      (common::milog::MiLogStream *const)&key,
                      (const char (*)[37])"queryPlayerGroupBinInfo2 succ cost: ");
              val = common::tools::TimeUtils::Timer::time((const common::tools::TimeUtils::Timer *const)(v4 + 96));
              v20 = common::milog::MiLogStream::operator<<<int,(int *)0>(v19, &val);
              common::milog::MiLogStream::operator<<<char [3],(char *[3])0>(v20, (const char (*)[3])"us");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
              if ( *(_BYTE *)(((unsigned __int64)&row->block_id >> 3) + 0x7FFF8000) != 0
                && (char)((((_BYTE)row + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&row->block_id >> 3) + 0x7FFF8000) )
              {
                __asan_report_load4(&row->block_id);
              }
              std::to_string(&v39, row->block_id);
              v21 = Json::Value::operator[]((Json::Value_0 *const)jval, &v39);
              std::to_string(&key, *(_DWORD *)(v4 + 64));
              v22 = (Json::Value *)Json::Value::operator[](v21, &key);
              Json::Value::operator=(v22);
              std::string::~string(&key);
              std::string::~string(&v39);
              v28 = 0;
              v15 = 0;
            }
          }
        }
        proto::BlockBin::~BlockBin((proto::BlockBin *const)(v4 + 400));
        std::string::~string((void *)(v4 + 256));
        if ( !v15 )
          goto LABEL_24;
        __gnu_cxx::__normal_iterator<TableBlockData *,std::vector<TableBlockData>>::operator++(&__for_begin);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/handler/request_handler.api.hpp",
        "queryPlayerGroupBinInfo2",
        561);
      v25 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
              (common::milog::MiLogStream *const)&key,
              (const char (*)[23])"Not found group cost: ");
      val = common::tools::TimeUtils::Timer::time((const common::tools::TimeUtils::Timer *const)(v4 + 96));
      v26 = common::milog::MiLogStream::operator<<<int,(int *)0>(v25, &val);
      common::milog::MiLogStream::operator<<<char [3],(char *[3])0>(v26, (const char (*)[3])"us");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      v28 = 2022;
LABEL_24:
      Json::Value::~Value((Json::Value_0 *const)(v4 + 320));
    }
    std::vector<TableBlockData>::~vector((std::vector<TableBlockData> *const)(v4 + 128));
    common::tools::TimeUtils::Timer::~Timer((common::tools::TimeUtils::Timer *const)(v4 + 96));
  }
  result = v28;
  if ( v42 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8024) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF802C) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8044) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF804C) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 566: range 000000000CB9A566-000000000CB9AFC0
int32_t __cdecl RequestHandler::queryPlayerQuestBinInfo(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  int32_t v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  int v8; // r15d
  int v9; // r15d
  common::milog::MiLogStream *v10; // rax
  _BOOL4 v11; // r15d
  proto::PlayerQuestCompBin *v12; // rax
  common::milog::MiLogStream *v13; // rax
  _BOOL4 v14; // r15d
  common::milog::MiLogStream *v15; // rax
  int v16; // r15d
  Json::Value *v17; // rax
  int v19; // [rsp+0h] [rbp-950h]
  char *v20; // [rsp+8h] [rbp-948h]
  int p_yielda; // [rsp+10h] [rbp-940h]
  char jvala; // [rsp+18h] [rbp-938h]
  Json::Value *jvalb; // [rsp+18h] [rbp-938h]
  std::allocator<char> __a; // [rsp+3Bh] [rbp-915h] BYREF
  int32_t retcode; // [rsp+3Ch] [rbp-914h]
  std::string key; // [rsp+40h] [rbp-910h] BYREF
  char v27[2288]; // [rsp+60h] [rbp-8F0h] BYREF

  jvala = (char)jval;
  p_yielda = (int)p_yield;
  v5 = (unsigned __int64)v27;
  v20 = v27;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_6(2240LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "12 48 1 12 is_exist:576 64 4 7 uid:567 80 4 11 options:612 96 32 12 bin_data:599 160 32 15 json_"
                        "string:611 224 40 14 status_ret:616 304 40 14 json_value:623 384 120 18 player_uid_row:587 544 1"
                        "92 19 player_data_row:577 800 272 15 json_reader:622 1136 376 6 os:598 1584 520 19 player_data_bin:605";
  *(_QWORD *)(v5 + 16) = RequestHandler::queryPlayerQuestBinInfo;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234753551;
  v7[536862722] = -234556924;
  v7[536862724] = -218959118;
  v7[536862726] = -218959118;
  v7[536862728] = -218959360;
  v7[536862729] = 62194;
  v7[536862730] = -234881024;
  v7[536862731] = -218959118;
  v7[536862735] = -234881024;
  v7[536862736] = -218959118;
  v7[536862743] = -218959118;
  v7[536862744] = -218959118;
  v7[536862753] = -219021312;
  v7[536862754] = -218959118;
  v7[536862755] = 62194;
  v7[536862767] = -218959360;
  v7[536862768] = -218959118;
  v7[536862769] = 62194;
  v7[536862785] = -218103808;
  v7[536862786] = -202116109;
  v7[536862787] = -202116109;
  v7[536862788] = -202116109;
  v7[536862789] = -202116109;
  *(_DWORD *)(v5 + 64) = 0;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&key, off_1A660020, &__a);
  retcode = getRequestParam<unsigned int>(request, &key, (unsigned int *)(v5 + 64));
  std::string::~string(&key);
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v4 = retcode;
  }
  else
  {
    retcode = 1;
    *(_BYTE *)(v5 + 48) = 0;
    TablePlayerData::TablePlayerData((TablePlayerData *const)(v5 + 544));
    if ( MysqlOpPlayerData::selectPlayerDataByUid(
           *(_DWORD *)(v5 + 64),
           (TablePlayerData *)(v5 + 544),
           (bool *)(v5 + 48)) )
    {
      v8 = 0;
    }
    else if ( *(_BYTE *)(v5 + 48) != 1 )
    {
      retcode = 2001;
      v8 = 0;
    }
    else
    {
      TablePlayerUid::TablePlayerUid((TablePlayerUid *const)(v5 + 384));
      if ( MysqlOpPlayerData::selectPlayerUidByUid(
             *(_DWORD *)(v5 + 64),
             (TablePlayerUid *)(v5 + 384),
             (bool *)(v5 + 48)) )
      {
        v9 = 0;
      }
      else if ( *(_BYTE *)(v5 + 48) != 1 )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&key,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/handler/request_handler.api.hpp",
          "queryPlayerQuestBinInfo",
          594);
        v10 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
                (common::milog::MiLogStream *const)&key,
                (const char (*)[44])"player_uid table select by uid failed uid: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v5 + 64));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
        retcode = 2001;
        v9 = 0;
      }
      else
      {
        std::ostringstream::basic_ostringstream(v5 + 1136);
        std::string::basic_string(v5 + 96);
        mysqlpp::String::to_string((const mysqlpp::String *const)(v5 + 632), (std::string *)(v5 + 96));
        if ( common::tools::ZlibUtil::isCompressWithPad((const std::string *)(v5 + 96)) )
        {
          common::tools::ZlibUtil::uncompressWithPad(&key, (const std::string *)(v5 + 96));
          std::string::operator=(v5 + 96, &key);
          std::string::~string(&key);
        }
        proto::PlayerDataBin::PlayerDataBin((proto::PlayerDataBin *const)(v5 + 1584));
        if ( (unsigned __int8)google::protobuf::MessageLite::ParseFromString(v5 + 1584, v5 + 96) != 1 )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&key,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/handler/request_handler.api.hpp",
            "queryPlayerQuestBinInfo",
            608);
          common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
            (common::milog::MiLogStream *const)&key,
            (const char (*)[38])"player_data_bin ParseFromString fails");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
          v4 = -1;
          v11 = 0;
        }
        else
        {
          std::allocator<char>::allocator(&__a);
          std::string::basic_string<std::allocator<char>>((std::string *const)(v5 + 160), byte_1A5D1560, &__a);
          std::allocator<char>::~allocator(&__a);
          google::protobuf::util::JsonPrintOptions::JsonPrintOptions((google::protobuf::util::JsonPrintOptions *const)(v5 + 80));
          *(_BYTE *)(v5 + 80) = 1;
          *(_BYTE *)(v5 + 81) = 1;
          *(_BYTE *)(v5 + 83) = 1;
          v12 = (proto::PlayerQuestCompBin *)proto::PlayerDataBin::quest_bin((const proto::PlayerDataBin *const)(v5 + 1584));
          google::protobuf::util::MessageToJsonString(
            (google::protobuf::util::Status *)(v5 + 224),
            v12,
            v19,
            v27,
            p_yielda,
            jvala,
            (int)request,
            this);
          if ( !google::protobuf::util::Status::ok((const google::protobuf::util::Status *const)(v5 + 224)) )
          {
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)&key,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/handler/request_handler.api.hpp",
              "queryPlayerQuestBinInfo",
              619);
            v13 = common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(
                    (common::milog::MiLogStream *const)&key,
                    (const char (*)[46])"quest_bin to json_string faile d player_uid: ");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v5 + 64));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
            v4 = -1;
            v14 = 0;
          }
          else
          {
            Json::Reader::Reader((Json::Reader *)(v5 + 800));
            Json::Value::Value(v5 + 304, 0LL);
            if ( !Json::Reader::parse(
                    (Json::Reader *const)(v5 + 800),
                    (const std::string *)(v5 + 160),
                    (Json::Value *)(v5 + 304),
                    1) )
            {
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)&key,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/handler/request_handler.api.hpp",
                "queryPlayerQuestBinInfo",
                626);
              v15 = common::milog::MiLogStream::operator<<<char [56],(char *[56])0>(
                      (common::milog::MiLogStream *const)&key,
                      (const char (*)[56])"quest_bin json_string to json_value failed player_uid: ");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v15,
                (const unsigned int *)(v5 + 64));
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
              v4 = -1;
              v16 = 0;
            }
            else
            {
              v17 = (Json::Value *)Json::Value::operator[]((Json::Value_0 *const)jvalb, "quest_bin_data");
              Json::Value::operator=(v17);
              retcode = 0;
              v16 = 1;
            }
            Json::Value::~Value((Json::Value_0 *const)(v5 + 304));
            Json::Reader::~Reader((Json::Reader *const)(v5 + 800));
            v14 = v16 == 1;
          }
          google::protobuf::util::Status::~Status((google::protobuf::util::Status *const)(v5 + 224));
          std::string::~string((void *)(v5 + 160));
          v11 = v14;
        }
        proto::PlayerDataBin::~PlayerDataBin((proto::PlayerDataBin *const)(v5 + 1584));
        std::string::~string((void *)(v5 + 96));
        std::ostringstream::~ostringstream(v5 + 1136);
        if ( v11 )
          v9 = 2;
        else
          v9 = 1;
      }
      TablePlayerUid::~TablePlayerUid((TablePlayerUid *const)(v5 + 384));
      if ( v9 )
      {
        if ( v9 == 2 )
          v8 = 2;
        else
          v8 = 1;
      }
      else
      {
        v8 = 0;
      }
    }
    TablePlayerData::~TablePlayerData((TablePlayerData *const)(v5 + 544));
    if ( !v8 || v8 == 2 )
      v4 = retcode;
  }
  if ( v20 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8018) = 0;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF803C) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF805C) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8084) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF808C) = 0;
    *(_QWORD *)((v5 >> 3) + 0x7FFF80BC) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF80C4) = 0;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8104) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF810C) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8114) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    __asan_stack_free_6(v5, 2240LL, v20);
  }
  return v4;
};

// Line 617: range 000000000CDB017E-000000000CDB0291
__int64 __fastcall getRequestParam<std::string,char const(&)[8],std::string&,char const(&)[7],std::string&>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        std::string *para,
        std::remove_reference<char const (&)[8]>::type *a4,
        std::string *a5,
        std::remove_reference<char const (&)[7]>::type *a6,
        std::string *args_3)
{
  unsigned int v7; // ebx
  std::string *v8; // r13
  std::remove_reference<char const (&)[7]>::type *v9; // r12
  std::string *v10; // rbx
  const char *v11; // rax
  const char (*v12)[7]; // r9
  std::allocator<char> __a; // [rsp+3Bh] [rbp-45h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-44h]
  std::string v19; // [rsp+40h] [rbp-40h] BYREF

  ret = getRequestParam<std::string>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v8 = std::forward<std::string &>(args_3);
    v9 = (std::remove_reference<char const (&)[7]>::type *)std::forward<char const(&)[7]>(a6);
    v10 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v11 = (const char *)std::forward<char const(&)[8]>(a4);
    std::string::basic_string<std::allocator<char>>(&v19, v11, &__a);
    v7 = getRequestParam<std::string,char const(&)[7],std::string&>(request, &v19, v10, v9, v8, v12);
    std::string::~string(&v19);
    std::allocator<char>::~allocator(&__a);
  }
  return v7;
};

// Line 639: range 000000000CB9AFC2-000000000CB9BA1C
int32_t __cdecl RequestHandler::queryPlayerItemBinInfo(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  int32_t v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  int v8; // r15d
  int v9; // r15d
  common::milog::MiLogStream *v10; // rax
  _BOOL4 v11; // r15d
  proto::PlayerItemCompBin *v12; // rax
  common::milog::MiLogStream *v13; // rax
  _BOOL4 v14; // r15d
  common::milog::MiLogStream *v15; // rax
  int v16; // r15d
  Json::Value *v17; // rax
  int v19; // [rsp+0h] [rbp-950h]
  char *v20; // [rsp+8h] [rbp-948h]
  int p_yielda; // [rsp+10h] [rbp-940h]
  char jvala; // [rsp+18h] [rbp-938h]
  Json::Value *jvalb; // [rsp+18h] [rbp-938h]
  std::allocator<char> __a; // [rsp+3Bh] [rbp-915h] BYREF
  int32_t retcode; // [rsp+3Ch] [rbp-914h]
  std::string key; // [rsp+40h] [rbp-910h] BYREF
  char v27[2288]; // [rsp+60h] [rbp-8F0h] BYREF

  jvala = (char)jval;
  p_yielda = (int)p_yield;
  v5 = (unsigned __int64)v27;
  v20 = v27;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_6(2240LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "12 48 1 12 is_exist:649 64 4 7 uid:640 80 4 11 options:685 96 32 12 bin_data:672 160 32 15 json_"
                        "string:684 224 40 14 status_ret:689 304 40 14 json_value:696 384 120 18 player_uid_row:660 544 1"
                        "92 19 player_data_row:650 800 272 15 json_reader:695 1136 376 6 os:671 1584 520 19 player_data_bin:678";
  *(_QWORD *)(v5 + 16) = RequestHandler::queryPlayerItemBinInfo;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234753551;
  v7[536862722] = -234556924;
  v7[536862724] = -218959118;
  v7[536862726] = -218959118;
  v7[536862728] = -218959360;
  v7[536862729] = 62194;
  v7[536862730] = -234881024;
  v7[536862731] = -218959118;
  v7[536862735] = -234881024;
  v7[536862736] = -218959118;
  v7[536862743] = -218959118;
  v7[536862744] = -218959118;
  v7[536862753] = -219021312;
  v7[536862754] = -218959118;
  v7[536862755] = 62194;
  v7[536862767] = -218959360;
  v7[536862768] = -218959118;
  v7[536862769] = 62194;
  v7[536862785] = -218103808;
  v7[536862786] = -202116109;
  v7[536862787] = -202116109;
  v7[536862788] = -202116109;
  v7[536862789] = -202116109;
  *(_DWORD *)(v5 + 64) = 0;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&key, off_1A660020, &__a);
  retcode = getRequestParam<unsigned int>(request, &key, (unsigned int *)(v5 + 64));
  std::string::~string(&key);
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v4 = retcode;
  }
  else
  {
    retcode = 1;
    *(_BYTE *)(v5 + 48) = 0;
    TablePlayerData::TablePlayerData((TablePlayerData *const)(v5 + 544));
    if ( MysqlOpPlayerData::selectPlayerDataByUid(
           *(_DWORD *)(v5 + 64),
           (TablePlayerData *)(v5 + 544),
           (bool *)(v5 + 48)) )
    {
      v8 = 0;
    }
    else if ( *(_BYTE *)(v5 + 48) != 1 )
    {
      retcode = 2001;
      v8 = 0;
    }
    else
    {
      TablePlayerUid::TablePlayerUid((TablePlayerUid *const)(v5 + 384));
      if ( MysqlOpPlayerData::selectPlayerUidByUid(
             *(_DWORD *)(v5 + 64),
             (TablePlayerUid *)(v5 + 384),
             (bool *)(v5 + 48)) )
      {
        v9 = 0;
      }
      else if ( *(_BYTE *)(v5 + 48) != 1 )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&key,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/handler/request_handler.api.hpp",
          "queryPlayerItemBinInfo",
          667);
        v10 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
                (common::milog::MiLogStream *const)&key,
                (const char (*)[44])"player_uid table select by uid failed uid: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v5 + 64));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
        retcode = 2001;
        v9 = 0;
      }
      else
      {
        std::ostringstream::basic_ostringstream(v5 + 1136);
        std::string::basic_string(v5 + 96);
        mysqlpp::String::to_string((const mysqlpp::String *const)(v5 + 632), (std::string *)(v5 + 96));
        if ( common::tools::ZlibUtil::isCompressWithPad((const std::string *)(v5 + 96)) )
        {
          common::tools::ZlibUtil::uncompressWithPad(&key, (const std::string *)(v5 + 96));
          std::string::operator=(v5 + 96, &key);
          std::string::~string(&key);
        }
        proto::PlayerDataBin::PlayerDataBin((proto::PlayerDataBin *const)(v5 + 1584));
        if ( (unsigned __int8)google::protobuf::MessageLite::ParseFromString(v5 + 1584, v5 + 96) != 1 )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&key,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/handler/request_handler.api.hpp",
            "queryPlayerItemBinInfo",
            681);
          common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
            (common::milog::MiLogStream *const)&key,
            (const char (*)[38])"player_data_bin ParseFromString fails");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
          v4 = -1;
          v11 = 0;
        }
        else
        {
          std::allocator<char>::allocator(&__a);
          std::string::basic_string<std::allocator<char>>((std::string *const)(v5 + 160), byte_1A5D1560, &__a);
          std::allocator<char>::~allocator(&__a);
          google::protobuf::util::JsonPrintOptions::JsonPrintOptions((google::protobuf::util::JsonPrintOptions *const)(v5 + 80));
          *(_BYTE *)(v5 + 80) = 1;
          *(_BYTE *)(v5 + 81) = 1;
          *(_BYTE *)(v5 + 83) = 1;
          v12 = (proto::PlayerItemCompBin *)proto::PlayerDataBin::item_bin((const proto::PlayerDataBin *const)(v5 + 1584));
          google::protobuf::util::MessageToJsonString(
            (google::protobuf::util::Status *)(v5 + 224),
            v12,
            v19,
            v27,
            p_yielda,
            jvala,
            (int)request,
            this);
          if ( !google::protobuf::util::Status::ok((const google::protobuf::util::Status *const)(v5 + 224)) )
          {
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)&key,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/handler/request_handler.api.hpp",
              "queryPlayerItemBinInfo",
              692);
            v13 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
                    (common::milog::MiLogStream *const)&key,
                    (const char (*)[45])"item_bin to json_string faile d player_uid: ");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v5 + 64));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
            v4 = -1;
            v14 = 0;
          }
          else
          {
            Json::Reader::Reader((Json::Reader *)(v5 + 800));
            Json::Value::Value(v5 + 304, 0LL);
            if ( !Json::Reader::parse(
                    (Json::Reader *const)(v5 + 800),
                    (const std::string *)(v5 + 160),
                    (Json::Value *)(v5 + 304),
                    1) )
            {
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)&key,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/handler/request_handler.api.hpp",
                "queryPlayerItemBinInfo",
                699);
              v15 = common::milog::MiLogStream::operator<<<char [55],(char *[55])0>(
                      (common::milog::MiLogStream *const)&key,
                      (const char (*)[55])"item_bin json_string to json_value failed player_uid: ");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v15,
                (const unsigned int *)(v5 + 64));
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
              v4 = -1;
              v16 = 0;
            }
            else
            {
              v17 = (Json::Value *)Json::Value::operator[]((Json::Value_0 *const)jvalb, "item_bin_data");
              Json::Value::operator=(v17);
              retcode = 0;
              v16 = 1;
            }
            Json::Value::~Value((Json::Value_0 *const)(v5 + 304));
            Json::Reader::~Reader((Json::Reader *const)(v5 + 800));
            v14 = v16 == 1;
          }
          google::protobuf::util::Status::~Status((google::protobuf::util::Status *const)(v5 + 224));
          std::string::~string((void *)(v5 + 160));
          v11 = v14;
        }
        proto::PlayerDataBin::~PlayerDataBin((proto::PlayerDataBin *const)(v5 + 1584));
        std::string::~string((void *)(v5 + 96));
        std::ostringstream::~ostringstream(v5 + 1136);
        if ( v11 )
          v9 = 2;
        else
          v9 = 1;
      }
      TablePlayerUid::~TablePlayerUid((TablePlayerUid *const)(v5 + 384));
      if ( v9 )
      {
        if ( v9 == 2 )
          v8 = 2;
        else
          v8 = 1;
      }
      else
      {
        v8 = 0;
      }
    }
    TablePlayerData::~TablePlayerData((TablePlayerData *const)(v5 + 544));
    if ( !v8 || v8 == 2 )
      v4 = retcode;
  }
  if ( v20 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8018) = 0;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF803C) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF805C) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8084) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF808C) = 0;
    *(_QWORD *)((v5 >> 3) + 0x7FFF80BC) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF80C4) = 0;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8104) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF810C) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8114) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    __asan_stack_free_6(v5, 2240LL, v20);
  }
  return v4;
};

// Line 712: range 000000000CB9BA1E-000000000CB9C306
int32_t __cdecl RequestHandler::queryPlayerPostion(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  int32_t v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  int v8; // r15d
  int v9; // r15d
  const proto::WorldBin *v10; // rax
  const google::protobuf::Map<unsigned int,proto::SceneBin> *v11; // rax
  const proto::WorldBin *v12; // rax
  const google::protobuf::Map<unsigned int,proto::SceneBin> *v13; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v14; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v15; // rax
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v16; // r15
  const proto::VectorBin *v17; // rax
  float v18; // xmm0_4
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v19; // rax
  const proto::VectorBin *v20; // rax
  float v21; // xmm0_4
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v22; // rax
  const proto::VectorBin *v23; // rax
  float v24; // xmm0_4
  common::tools::StringStream<common::tools::FixedBuffer<4096> > *v25; // rax
  Json::Value_0 *v26; // rax
  int32_t retcode; // [rsp+34h] [rbp-59Ch]
  int32_t retcodea; // [rsp+34h] [rbp-59Ch]
  const proto::PlayerSceneCompBin *proto_comp; // [rsp+38h] [rbp-598h]
  proto::SceneBin *scene_bin; // [rsp+40h] [rbp-590h]
  const proto::ScenePlayerLocationBin *location_bin; // [rsp+48h] [rbp-588h]
  google::protobuf::Map<unsigned int,proto::SceneBin>::const_iterator b; // [rsp+50h] [rbp-580h] BYREF
  std::string v35; // [rsp+70h] [rbp-560h] BYREF
  std::string key; // [rsp+90h] [rbp-540h] BYREF
  Json::Value_0 other; // [rsp+B0h] [rbp-520h] BYREF
  char v38[1264]; // [rsp+E0h] [rbp-4F0h] BYREF

  v5 = (unsigned __int64)v38;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_5(1216LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "9 32 1 12 is_exist:723 48 4 7 uid:713 64 4 12 scene_id:747 80 16 6 os:756 112 24 14 iter_scene:7"
                        "48 176 32 7 res:720 240 32 12 bin_data:734 304 192 7 row:724 560 520 19 player_data_bin:740";
  *(_QWORD *)(v5 + 16) = RequestHandler::queryPlayerPostion;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234556927;
  v7[536862722] = 61956;
  v7[536862723] = 62194;
  v7[536862724] = -218959360;
  v7[536862725] = 62194;
  v7[536862726] = -219021312;
  v7[536862727] = 62194;
  v7[536862728] = -219021312;
  v7[536862729] = 62194;
  v7[536862735] = -219021312;
  v7[536862736] = -218959118;
  v7[536862737] = 62194;
  v7[536862753] = -218103808;
  v7[536862754] = -202116109;
  v7[536862755] = -202116109;
  v7[536862756] = -202116109;
  v7[536862757] = -202116109;
  *(_DWORD *)(v5 + 48) = 0;
  std::allocator<char>::allocator(v5 + 32);
  std::string::basic_string<std::allocator<char>>(&key, off_1A660020, (const std::allocator<char> *)(v5 + 32));
  retcode = getRequestParam<unsigned int>(request, &key, (unsigned int *)(v5 + 48));
  std::string::~string(&key);
  std::allocator<char>::~allocator(v5 + 32);
  if ( retcode )
  {
    v4 = retcode;
  }
  else
  {
    retcodea = 1;
    std::allocator<char>::allocator(v5 + 32);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v5 + 176),
      "player not exist",
      (const std::allocator<char> *)(v5 + 32));
    std::allocator<char>::~allocator(v5 + 32);
    *(_BYTE *)(v5 + 32) = 0;
    TablePlayerData::TablePlayerData((TablePlayerData *const)(v5 + 304));
    if ( MysqlOpPlayerData::selectPlayerDataByUid(
           *(_DWORD *)(v5 + 48),
           (TablePlayerData *)(v5 + 304),
           (bool *)(v5 + 32)) )
    {
      v8 = 0;
    }
    else if ( *(_BYTE *)(v5 + 32) != 1 )
    {
      retcodea = 2001;
      v8 = 0;
    }
    else
    {
      std::string::basic_string(v5 + 240);
      mysqlpp::String::to_string((const mysqlpp::String *const)(v5 + 392), (std::string *)(v5 + 240));
      if ( common::tools::ZlibUtil::isCompressWithPad((const std::string *)(v5 + 240)) )
      {
        common::tools::ZlibUtil::uncompressWithPad(&v35, (const std::string *)(v5 + 240));
        std::string::operator=(v5 + 240, &v35);
        std::string::~string(&v35);
      }
      proto::PlayerDataBin::PlayerDataBin((proto::PlayerDataBin *const)(v5 + 560));
      if ( (unsigned __int8)google::protobuf::MessageLite::ParseFromString(v5 + 560, v5 + 240) != 1 )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&key,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/handler/request_handler.api.hpp",
          "queryPlayerPostion",
          743);
        common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
          (common::milog::MiLogStream *const)&key,
          (const char (*)[38])"player_data_bin ParseFromString fails");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
        v4 = -1;
        v9 = 0;
      }
      else
      {
        proto_comp = proto::PlayerDataBin::scene_bin((const proto::PlayerDataBin *const)(v5 + 560));
        *(_DWORD *)(v5 + 64) = proto::PlayerSceneCompBin::my_cur_scene_id(proto_comp);
        v10 = proto::PlayerSceneCompBin::world(proto_comp);
        v11 = proto::WorldBin::scene_map(v10);
        google::protobuf::Map<unsigned int,proto::SceneBin>::find(
          (google::protobuf::Map<unsigned int,proto::SceneBin>::const_iterator *)(v5 + 112),
          v11,
          (const google::protobuf::Map<unsigned int,proto::SceneBin>::key_type *)(v5 + 64));
        v12 = proto::PlayerSceneCompBin::world(proto_comp);
        v13 = proto::WorldBin::scene_map(v12);
        google::protobuf::Map<unsigned int,proto::SceneBin>::end(&b, v13);
        if ( google::protobuf::operator==(
               (const google::protobuf::Map<unsigned int,proto::SceneBin>::const_iterator *)(v5 + 112),
               &b) )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&key,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/handler/request_handler.api.hpp",
            "queryPlayerPostion",
            751);
          common::milog::MiLogStream::operator()(
            (common::milog::MiLogStream *const)&key,
            "scene map has no info with uid=%u and scene_id=%u",
            *(unsigned int *)(v5 + 48),
            *(unsigned int *)(v5 + 64));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
          v4 = -1;
          v9 = 0;
        }
        else
        {
          scene_bin = &google::protobuf::Map<unsigned int,proto::SceneBin>::const_iterator::operator->((const google::protobuf::Map<unsigned int,proto::SceneBin>::const_iterator *const)(v5 + 112))->second;
          location_bin = proto::SceneBin::owner_player_location(scene_bin);
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v5 + 80));
          v14 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                  (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v5 + 80),
                  "scene_id:");
          v15 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v14, *(_DWORD *)(v5 + 64));
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v15, "\n");
          v16 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                  (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v5 + 80),
                  "scene_pos:");
          v17 = proto::ScenePlayerLocationBin::cur_pos(location_bin);
          v18 = proto::VectorBin::x(v17);
          v19 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v16, v18);
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v19, ",");
          v20 = proto::ScenePlayerLocationBin::cur_pos(location_bin);
          v21 = proto::VectorBin::y(v20);
          v22 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                  (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v5 + 80),
                  v21);
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v22, ",");
          v23 = proto::ScenePlayerLocationBin::cur_pos(location_bin);
          v24 = proto::VectorBin::z(v23);
          v25 = common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(
                  (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v5 + 80),
                  v24);
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::operator<<(v25, "\n");
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::str[abi:cxx11](
            &key,
            (common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v5 + 80));
          std::string::operator=(v5 + 176, &key);
          std::string::~string(&key);
          retcodea = 0;
          common::tools::StringStream<common::tools::FixedBuffer<4096>>::~StringStream((common::tools::StringStream<common::tools::FixedBuffer<4096> > *const)(v5 + 80));
          v9 = 1;
        }
      }
      proto::PlayerDataBin::~PlayerDataBin((proto::PlayerDataBin *const)(v5 + 560));
      std::string::~string((void *)(v5 + 240));
      if ( v9 == 1 )
        v8 = 2;
      else
        v8 = 1;
    }
    TablePlayerData::~TablePlayerData((TablePlayerData *const)(v5 + 304));
    if ( !v8 || v8 == 2 )
    {
      Json::Value::Value(&other, v5 + 176);
      v26 = Json::Value::operator[]((Json::Value_0 *const)jval, "data");
      Json::Value::operator=(v26, &other);
      Json::Value::~Value(&other);
      v4 = retcodea;
    }
    std::string::~string((void *)(v5 + 176));
  }
  if ( v38 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF803C) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8044) = 0;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8084) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF808C) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8094) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    __asan_stack_free_5(v5, 1216LL, v38);
  }
  return v4;
};

// Line 770: range 000000000CB9DE56-000000000CB9E0C2
int32_t __cdecl RequestHandler::sendMail(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  _DWORD *v6; // r12
  int32_t v7; // r14d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+30h] [rbp-140h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+50h] [rbp-120h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+70h] [rbp-100h] BYREF
  char v14[208]; // [rsp+A0h] [rbp-D0h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(160LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "2 32 32 12 make_req:772 96 32 12 make_rsp:919";
  *(_QWORD *)(v4 + 16) = RequestHandler::sendMail;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862722] = -218959118;
  v6[536862724] = -202116109;
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::sendMail(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    (std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> *const)(v4 + 32),
    (RequestHandler::sendMail::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)>)request);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<RequestHandler::sendMail(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::Packet &,Json::Value &)#2},void,void>(
    (std::function<int(common::minet::Packet&,Json::Value&)> *const)(v4 + 96),
    (RequestHandler::sendMail::<lambda(common::minet::Packet&, Json::Value&)>)request);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function(
    &p_make_rsp,
    (const std::function<int(common::minet::Packet&,Json::Value&)> *)(v4 + 96));
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function(
    &p_make_req,
    (const std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function((std::function<int(common::minet::Packet&,Json::Value&)> *const)(v4 + 96));
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function((std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> *const)(v4 + 32));
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_DWORD *)((v4 >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 772: range 000000000CB9C308-000000000CB9DB39
// local variable allocation has failed, the output may be wrong!
int32_t __cdecl RequestHandler::sendMail(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::sendMail::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  int32_t v3; // r14d
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  bool v7; // r15
  common::milog::MiLogStream *v8; // rax
  int v9; // r15d
  bool v10; // r15
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  int v14; // r15d
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  std::vector<unsigned int>::reference v18; // rax
  google::protobuf::uint32 *v19; // rdx
  std::vector<unsigned int>::reference v20; // rax
  google::protobuf::uint32 *v21; // rdx
  std::vector<unsigned int>::reference v22; // rax
  google::protobuf::uint32 *v23; // rdx
  std::vector<unsigned int>::reference v24; // rax
  google::protobuf::uint32 *v25; // rdx
  bool v26; // r14
  common::milog::MiLogStream *v27; // rax
  std::string *v28; // rax
  std::string *v29; // rax
  std::string *v30; // rax
  std::string *v31; // rax
  google::protobuf::RepeatedPtrField<proto::ItemParamBin> *v32; // rax
  google::protobuf::RepeatedPtrField<std::string > *v33; // rax
  google::protobuf::uint32 v34; // edx
  common::milog::MiLogStream *v35; // r14
  const char (*v37)[4]; // [rsp-8h] [rbp-4A8h]
  unsigned int *v38; // [rsp+0h] [rbp-4A0h]
  common::minet::Packet *packetb; // [rsp+8h] [rbp-498h]
  const common::minet::http_client::HttpRequest *http_requesta; // [rsp+10h] [rbp-490h]
  std::string *v42; // [rsp+20h] [rbp-480h]
  const char (*v43)[7]; // [rsp+28h] [rbp-478h] BYREF
  std::string *send_time; // [rsp+30h] [rbp-470h] OVERLAPPED
  int32_t expire_time_retcode; // [rsp+38h] [rbp-468h]
  int32_t effective_time_retcode; // [rsp+3Ch] [rbp-464h]
  std::vector<std::string>::iterator __for_begin; // [rsp+40h] [rbp-460h] BYREF
  std::vector<std::string>::iterator __for_end; // [rsp+48h] [rbp-458h] BYREF
  std::vector<std::string> *__for_range; // [rsp+50h] [rbp-450h]
  const std::string *temp_string; // [rsp+58h] [rbp-448h]
  proto::ItemParamBin *item_param_bin; // [rsp+60h] [rbp-440h]
  proto::MailBin *mail_bin; // [rsp+68h] [rbp-438h]
  common::milog::MiLogStream v53; // [rsp+70h] [rbp-430h] BYREF
  std::string key; // [rsp+90h] [rbp-410h] BYREF
  unsigned int v55[252]; // [rsp+B0h] [rbp-3F0h] BYREF

  v4 = (unsigned __int64)v55;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_4(960LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "20 48 1 18 is_collectible:793 64 4 7 uid:779 80 4 15 expire_time:785 96 4 18 effective_time:786 "
                        "112 4 14 importance:787 128 4 13 config_id:788 144 4 19 item_limit_type:790 160 4 15 source_type"
                        ":791 176 24 25 proto_item_param_list:783 240 24 16 argument_vec:789 304 24 19 temp_string_vec:83"
                        "5 368 24 13 param_vec:843 432 32 10 ticket:778 496 32 9 title:780 560 32 11 content:781 624 32 1"
                        "0 sender:782 688 32 7 tag:792 752 32 17 item_list_str:831 816 32 21 argument_list_str:868 880 48 7 req:879";
  *(_QWORD *)(v4 + 16) = RequestHandler::sendMail(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234753551;
  v6[536862722] = -234556924;
  v6[536862723] = -234556924;
  v6[536862724] = -234556924;
  v6[536862725] = 61956;
  v6[536862726] = -218959360;
  v6[536862727] = 62194;
  v6[536862728] = -218959360;
  v6[536862729] = 62194;
  v6[536862730] = -218959360;
  v6[536862731] = 62194;
  v6[536862732] = -218959360;
  v6[536862733] = 62194;
  v6[536862734] = -219021312;
  v6[536862735] = 62194;
  v6[536862736] = -219021312;
  v6[536862737] = 62194;
  v6[536862738] = -219021312;
  v6[536862739] = 62194;
  v6[536862740] = -219021312;
  v6[536862741] = 62194;
  v6[536862742] = -219021312;
  v6[536862743] = 62194;
  v6[536862744] = -219021312;
  v6[536862745] = 62194;
  v6[536862746] = -219021312;
  v6[536862747] = 62194;
  v6[536862749] = -202116109;
  std::string::basic_string(v4 + 432);
  *(_DWORD *)(v4 + 64) = 0;
  std::string::basic_string(v4 + 496);
  std::string::basic_string(v4 + 560);
  std::string::basic_string(v4 + 624);
  google::protobuf::RepeatedPtrField<proto::ItemParamBin>::RepeatedPtrField((google::protobuf::RepeatedPtrField<proto::ItemParamBin> *const)(v4 + 176));
  LODWORD(send_time) = common::tools::TimeUtils::getNow();
  *(_DWORD *)(v4 + 80) = 0;
  *(_DWORD *)(v4 + 96) = 0;
  *(_DWORD *)(v4 + 112) = 0;
  *(_DWORD *)(v4 + 128) = 0;
  std::vector<std::string>::vector((std::vector<std::string> *const)(v4 + 240));
  *(_DWORD *)(v4 + 144) = 41;
  *(_DWORD *)(v4 + 160) = 1;
  std::string::basic_string(v4 + 688);
  *(_BYTE *)(v4 + 48) = 0;
  std::allocator<char>::allocator((char *)&v43 + 7);
  std::string::basic_string<std::allocator<char>>(&key, "ticket", (const std::allocator<char> *)&v43 + 7);
  HIDWORD(send_time) = getRequestParam<std::string,char const(&)[4],unsigned int &,char const(&)[6],std::string&,char const(&)[8],std::string&,char const(&)[7],std::string&>(
                         http_request,
                         &key,
                         (std::string *)(v4 + 432),
                         (const char (*)[4])off_1A660020,
                         (unsigned int *)(v4 + 64),
                         (const char (*)[6])"title",
                         (std::string *)(v4 + 496),
                         (const char (*)[8])"content",
                         (std::string *)(v4 + 560),
                         (const char (*)[7])"sender",
                         (std::string *)(v4 + 624),
                         v37,
                         v55,
                         (const char (*)[6])packet,
                         &http_request->host,
                         (const char (*)[8])__closure,
                         v42,
                         v43,
                         send_time);
  std::string::~string(&key);
  std::allocator<char>::~allocator((char *)&v43 + 7);
  if ( HIDWORD(send_time) )
  {
    v3 = HIDWORD(send_time);
  }
  else
  {
    std::allocator<char>::allocator((char *)&v43 + 7);
    std::string::basic_string<std::allocator<char>>(&key, "expire_time", (const std::allocator<char> *)&v43 + 7);
    expire_time_retcode = getRequestParam<unsigned int>(http_requesta, &key, (unsigned int *)(v4 + 80));
    std::string::~string(&key);
    std::allocator<char>::~allocator((char *)&v43 + 7);
    std::allocator<char>::allocator((char *)&v43 + 7);
    std::string::basic_string<std::allocator<char>>(&key, "effective_time", (const std::allocator<char> *)&v43 + 7);
    effective_time_retcode = getRequestParam<unsigned int>(http_requesta, &key, (unsigned int *)(v4 + 96));
    std::string::~string(&key);
    std::allocator<char>::~allocator((char *)&v43 + 7);
    if ( expire_time_retcode == effective_time_retcode )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "operator()",
        811);
      common::milog::MiLogStream::operator<<<char [72],(char *[72])0>(
        (common::milog::MiLogStream *const)&key,
        (const char (*)[72])"[expire_time] and [effective_time] param is needed and only needed one.");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      v3 = 1002;
    }
    else
    {
      if ( !effective_time_retcode )
        *(_DWORD *)(v4 + 80) = *(_DWORD *)(v4 + 96) + (_DWORD)send_time;
      std::allocator<char>::allocator((char *)&v43 + 7);
      std::string::basic_string<std::allocator<char>>(&key, "importance", (const std::allocator<char> *)&v43 + 7);
      getRequestParam<unsigned int>(http_requesta, &key, (unsigned int *)(v4 + 112));
      std::string::~string(&key);
      std::allocator<char>::~allocator((char *)&v43 + 7);
      std::allocator<char>::allocator((char *)&v43 + 7);
      std::string::basic_string<std::allocator<char>>(&key, "config_id", (const std::allocator<char> *)&v43 + 7);
      getRequestParam<unsigned int>(http_requesta, &key, (unsigned int *)(v4 + 128));
      std::string::~string(&key);
      std::allocator<char>::~allocator((char *)&v43 + 7);
      std::allocator<char>::allocator((char *)&v43 + 7);
      std::string::basic_string<std::allocator<char>>(&key, "item_limit_type", (const std::allocator<char> *)&v43 + 7);
      getRequestParam<unsigned int>(http_requesta, &key, (unsigned int *)(v4 + 144));
      std::string::~string(&key);
      std::allocator<char>::~allocator((char *)&v43 + 7);
      std::allocator<char>::allocator((char *)&v43 + 7);
      std::string::basic_string<std::allocator<char>>(&key, off_1A661FC0, (const std::allocator<char> *)&v43 + 7);
      getRequestParam<std::string>(http_requesta, &key, (std::string *)(v4 + 688));
      std::string::~string(&key);
      std::allocator<char>::~allocator((char *)&v43 + 7);
      std::allocator<char>::allocator((char *)&v43 + 7);
      std::string::basic_string<std::allocator<char>>(&key, "source_type", (const std::allocator<char> *)&v43 + 7);
      getRequestParam<unsigned int>(http_requesta, &key, (unsigned int *)(v4 + 160));
      std::string::~string(&key);
      std::allocator<char>::~allocator((char *)&v43 + 7);
      std::allocator<char>::allocator((char *)&v43 + 7);
      std::string::basic_string<std::allocator<char>>(&key, "is_collectible", (const std::allocator<char> *)&v43 + 7);
      getRequestParam<bool>(http_requesta, &key, (bool *)(v4 + 48));
      std::string::~string(&key);
      std::allocator<char>::~allocator((char *)&v43 + 7);
      if ( (unsigned __int64)std::string::size(v4 + 496) <= 0x12C )
      {
        if ( (unsigned __int64)std::string::size(v4 + 560) <= 0xBB8 )
        {
          if ( (unsigned __int64)std::string::size(v4 + 624) <= 0x3C )
          {
            if ( (unsigned int)send_time <= *(_DWORD *)(v4 + 80) )
            {
              std::string::basic_string(v4 + 752);
              std::allocator<char>::allocator((char *)&v43 + 7);
              std::string::basic_string<std::allocator<char>>(&key, "item_list", (const std::allocator<char> *)&v43 + 7);
              getRequestParam<std::string>(http_requesta, &key, (std::string *)(v4 + 752));
              std::string::~string(&key);
              std::allocator<char>::~allocator((char *)&v43 + 7);
              if ( (unsigned __int8)std::string::empty(v4 + 752) == 1 )
                goto LABEL_44;
              std::vector<std::string>::vector((std::vector<std::string> *const)(v4 + 304));
              std::allocator<char>::allocator((char *)&v43 + 7);
              std::string::basic_string<std::allocator<char>>(&key, ",", (const std::allocator<char> *)&v43 + 7);
              v7 = common::tools::StringUtils::splitToList(
                     (const std::string *)(v4 + 752),
                     &key,
                     (std::vector<std::string> *)(v4 + 304),
                     0) != 0;
              std::string::~string(&key);
              std::allocator<char>::~allocator((char *)&v43 + 7);
              if ( v7 )
              {
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)&key,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/handler/request_handler.api.hpp",
                  "operator()",
                  838);
                v8 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                       (common::milog::MiLogStream *const)&key,
                       (const char (*)[15])"invalid param:");
                common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, (const std::string *)(v4 + 752));
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
                v3 = 1002;
                v9 = 0;
              }
              else
              {
                __for_range = (std::vector<std::string> *)(v4 + 304);
                __for_begin._M_current = std::vector<std::string>::begin((std::vector<std::string> *const)(v4 + 304))._M_current;
                __for_end._M_current = std::vector<std::string>::end(__for_range)._M_current;
                while ( __gnu_cxx::operator!=<std::string *,std::vector<std::string>>(&__for_begin, &__for_end) )
                {
                  temp_string = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator*(&__for_begin);
                  std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v4 + 368));
                  std::allocator<char>::allocator((char *)&v43 + 7);
                  std::string::basic_string<std::allocator<char>>(&key, ":", (const std::allocator<char> *)&v43 + 7);
                  v10 = common::tools::StringUtils::splitToList<unsigned int>(
                          temp_string,
                          &key,
                          (std::vector<unsigned int> *)(v4 + 368),
                          0) != 0;
                  std::string::~string(&key);
                  std::allocator<char>::~allocator((char *)&v43 + 7);
                  if ( v10 )
                  {
                    common::milog::MiLogStream::create(
                      (common::milog::MiLogStream *)&key,
                      &common::milog::MiLogDefault::default_log_obj_,
                      3u,
                      "./src/handler/request_handler.api.hpp",
                      "operator()",
                      846);
                    v11 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                            (common::milog::MiLogStream *const)&key,
                            (const char (*)[23])"invalid item_list_str:");
                    v12 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                            v11,
                            (const std::string *)(v4 + 752));
                    v13 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                            v12,
                            (const char (*)[14])" temp_string:");
                    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v13, temp_string);
                    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
                    v3 = 1002;
                    v14 = 0;
                  }
                  else if ( std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v4 + 368)) > 1 )
                  {
                    item_param_bin = google::protobuf::RepeatedPtrField<proto::ItemParamBin>::Add((google::protobuf::RepeatedPtrField<proto::ItemParamBin> *const)(v4 + 176));
                    v18 = std::vector<unsigned int>::operator[]((std::vector<unsigned int> *const)(v4 + 368), 0LL);
                    v19 = v18;
                    if ( *(_BYTE *)(((unsigned __int64)v18 >> 3) + 0x7FFF8000) != 0
                      && (char)(((unsigned __int8)v18 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v18 >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_load4(v18);
                    }
                    proto::ItemParamBin::set_item_id(item_param_bin, *v19);
                    v20 = std::vector<unsigned int>::operator[]((std::vector<unsigned int> *const)(v4 + 368), 1uLL);
                    v21 = v20;
                    if ( *(_BYTE *)(((unsigned __int64)v20 >> 3) + 0x7FFF8000) != 0
                      && (char)(((unsigned __int8)v20 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v20 >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_load4(v20);
                    }
                    proto::ItemParamBin::set_count(item_param_bin, *v21);
                    if ( std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v4 + 368)) > 2 )
                    {
                      v22 = std::vector<unsigned int>::operator[]((std::vector<unsigned int> *const)(v4 + 368), 2uLL);
                      v23 = v22;
                      if ( *(_BYTE *)(((unsigned __int64)v22 >> 3) + 0x7FFF8000) != 0
                        && (char)(((unsigned __int8)v22 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v22 >> 3) + 0x7FFF8000) )
                      {
                        __asan_report_load4(v22);
                      }
                      proto::ItemParamBin::set_level(item_param_bin, *v23);
                      if ( std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v4 + 368)) > 3 )
                      {
                        v24 = std::vector<unsigned int>::operator[]((std::vector<unsigned int> *const)(v4 + 368), 3uLL);
                        v25 = v24;
                        if ( *(_BYTE *)(((unsigned __int64)v24 >> 3) + 0x7FFF8000) != 0
                          && (char)(((unsigned __int8)v24 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v24 >> 3)
                                                                                + 0x7FFF8000) )
                        {
                          __asan_report_load4(v24);
                        }
                        proto::ItemParamBin::set_promote_level(item_param_bin, *v25);
                      }
                    }
                    v14 = 1;
                  }
                  else
                  {
                    common::milog::MiLogStream::create(
                      (common::milog::MiLogStream *)&key,
                      &common::milog::MiLogDefault::default_log_obj_,
                      3u,
                      "./src/handler/request_handler.api.hpp",
                      "operator()",
                      851);
                    v15 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                            (common::milog::MiLogStream *const)&key,
                            (const char (*)[27])"lack param. item_list_str:");
                    v16 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                            v15,
                            (const std::string *)(v4 + 752));
                    v17 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                            v16,
                            (const char (*)[14])" temp_string:");
                    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v17, temp_string);
                    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
                    v3 = 1002;
                    v14 = 0;
                  }
                  std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v4 + 368));
                  if ( v14 != 1 )
                  {
                    v9 = 0;
                    goto LABEL_43;
                  }
                  __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator++(&__for_begin);
                }
                v9 = 1;
              }
LABEL_43:
              std::vector<std::string>::~vector((std::vector<std::string> *const)(v4 + 304));
              if ( v9 == 1 )
              {
LABEL_44:
                std::string::basic_string(v4 + 816);
                std::allocator<char>::allocator((char *)&v43 + 7);
                std::string::basic_string<std::allocator<char>>(
                  &key,
                  "argument_list",
                  (const std::allocator<char> *)&v43 + 7);
                getRequestParam<std::string>(http_requesta, &key, (std::string *)(v4 + 816));
                std::string::~string(&key);
                std::allocator<char>::~allocator((char *)&v43 + 7);
                if ( (unsigned __int8)std::string::empty(v4 + 816) != 1
                  && (std::allocator<char>::allocator((char *)&v43 + 7),
                      std::string::basic_string<std::allocator<char>>(&key, ",", (const std::allocator<char> *)&v43 + 7),
                      v26 = common::tools::StringUtils::split(
                              (const std::string *)(v4 + 816),
                              &key,
                              (std::vector<std::string> *)(v4 + 240),
                              0) != 0,
                      std::string::~string(&key),
                      std::allocator<char>::~allocator((char *)&v43 + 7),
                      v26) )
                {
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)&key,
                    &common::milog::MiLogDefault::default_log_obj_,
                    3u,
                    "./src/handler/request_handler.api.hpp",
                    "operator()",
                    874);
                  v27 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                          (common::milog::MiLogStream *const)&key,
                          (const char (*)[23])"invalid argument_list:");
                  common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                    v27,
                    (const std::string *)(v4 + 816));
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
                  v3 = 1002;
                }
                else
                {
                  proto::AddRedisMailReq::AddRedisMailReq((proto::AddRedisMailReq *const)(v4 + 880));
                  proto::AddRedisMailReq::set_op_type((proto::AddRedisMailReq *const)(v4 + 880), MAIL_ADD_OP_MUIP);
                  v28 = proto::AddRedisMailReq::mutable_ticket[abi:cxx11]((proto::AddRedisMailReq *const)(v4 + 880));
                  std::string::swap(v28, v4 + 432);
                  mail_bin = proto::AddRedisMailReq::mutable_mail_bin((proto::AddRedisMailReq *const)(v4 + 880));
                  v29 = proto::MailBin::mutable_title[abi:cxx11](mail_bin);
                  std::string::swap(v29, v4 + 496);
                  v30 = proto::MailBin::mutable_content[abi:cxx11](mail_bin);
                  std::string::swap(v30, v4 + 560);
                  v31 = proto::MailBin::mutable_sender[abi:cxx11](mail_bin);
                  std::string::swap(v31, v4 + 624);
                  v32 = proto::MailBin::mutable_item_param_list(mail_bin);
                  google::protobuf::RepeatedPtrField<proto::ItemParamBin>::Swap(
                    v32,
                    (google::protobuf::RepeatedPtrField<proto::ItemParamBin> *)(v4 + 176));
                  proto::MailBin::set_send_time(mail_bin, (google::protobuf::uint32)send_time);
                  proto::MailBin::set_expire_time(mail_bin, *(_DWORD *)(v4 + 80));
                  proto::MailBin::set_importance(mail_bin, *(_DWORD *)(v4 + 112));
                  proto::MailBin::set_config_id(mail_bin, *(_DWORD *)(v4 + 128));
                  v33 = proto::MailBin::mutable_argument_list[abi:cxx11](mail_bin);
                  common::tools::MiscUtils::toRepeated<std::string,std::string>(
                    (const std::vector<std::string> *)(v4 + 240),
                    v33);
                  proto::MailBin::set_item_limit_type(mail_bin, *(_DWORD *)(v4 + 144));
                  proto::MailBin::set_source_type(mail_bin, *(_DWORD *)(v4 + 160));
                  proto::MailBin::set_tag(mail_bin, (const std::string *)(v4 + 688));
                  if ( *(_BYTE *)(v4 + 48) )
                  {
                    if ( proto::MailBin::item_param_list_size(mail_bin) )
                      v34 = 2;
                    else
                      v34 = 3;
                    proto::MailBin::set_collect_state(mail_bin, v34);
                  }
                  else
                  {
                    proto::MailBin::set_collect_state(mail_bin, 1u);
                  }
                  if ( proto::MailBin::collect_state(mail_bin) == 3 )
                  {
                    common::milog::MiLogStream::create(
                      (common::milog::MiLogStream *)&key,
                      &common::milog::MiLogDefault::default_log_obj_,
                      3u,
                      "./src/handler/request_handler.api.hpp",
                      "operator()",
                      907);
                    common::milog::MiLogStream::operator<<<char [48],(char *[48])0>(
                      (common::milog::MiLogStream *const)&key,
                      (const char (*)[48])byte_1A662280);
                    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
                    v3 = 1002;
                  }
                  else
                  {
                    common::minet::Packet::setUserId(packetb, *(_DWORD *)(v4 + 64));
                    common::minet::Packet::setTargetService(packetb, 0xAu);
                    common::minet::Packet::setProto<proto::AddRedisMailReq>(
                      packetb,
                      (const proto::AddRedisMailReq *)(v4 + 880));
                    common::milog::MiLogStream::create(
                      &v53,
                      &common::milog::MiLogDefault::default_log_obj_,
                      1u,
                      "./src/handler/request_handler.api.hpp",
                      "operator()",
                      914);
                    v35 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
                            &v53,
                            (const char (*)[30])"send proto::AddRedisMailReq: ");
                    google::protobuf::Message::ShortDebugString[abi:cxx11](
                      &key,
                      (google::protobuf::Message *)(v4 + 880));
                    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v35, &key);
                    std::string::~string(&key);
                    common::milog::MiLogStream::~MiLogStream(&v53);
                    v3 = 0;
                  }
                  proto::AddRedisMailReq::~AddRedisMailReq((proto::AddRedisMailReq *const)(v4 + 880));
                }
                std::string::~string((void *)(v4 + 816));
              }
              std::string::~string((void *)(v4 + 752));
            }
            else
            {
              v3 = 2028;
            }
          }
          else
          {
            v3 = 1306;
          }
        }
        else
        {
          v3 = 1305;
        }
      }
      else
      {
        v3 = 1304;
      }
    }
  }
  std::string::~string((void *)(v4 + 688));
  std::vector<std::string>::~vector((std::vector<std::string> *const)(v4 + 240));
  google::protobuf::RepeatedPtrField<proto::ItemParamBin>::~RepeatedPtrField((google::protobuf::RepeatedPtrField<proto::ItemParamBin> *const)(v4 + 176));
  std::string::~string((void *)(v4 + 624));
  std::string::~string((void *)(v4 + 560));
  std::string::~string((void *)(v4 + 496));
  std::string::~string((void *)(v4 + 432));
  if ( v38 == (unsigned int *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8068) = 0LL;
    memset(
      (void *)((unsigned __int64)(v6 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v6 + 2147450880 - (((_DWORD)v6 + 2147450888) & 0xFFFFFFF8) + 112) & 0xFFFFFFF8) >> 3));
    *(_DWORD *)((v4 >> 3) + 0x7FFF8074) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8060) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8068) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8070) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return v3;
};

// Line 804: range 000000000CDB97BD-000000000CDB98A3
__int64 __fastcall getRequestParam<int,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        int *para,
        std::remove_reference<char const (&)[7]>::type *a4,
        std::string *a5,
        const char (*args_0)[7])
{
  ApiRetcode v6; // ebx
  std::string *v7; // rbx
  const char *v8; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-35h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-34h]
  std::string v14; // [rsp+40h] [rbp-30h] BYREF

  ret = getRequestParam<int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v7 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v8 = (const char *)std::forward<char const(&)[7]>(a4);
    std::string::basic_string<std::allocator<char>>(&v14, v8, &__a);
    v6 = getRequestParam<std::string>(request, &v14, v7);
    std::string::~string(&v14);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v6;
};

// Line 820: range 000000000CCC7D8A-000000000CCC7E70
__int64 __fastcall getRequestParam<unsigned int,char const(&)[11],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[11]>::type *a4,
        std::string *a5,
        const char (*args_0)[11])
{
  ApiRetcode v6; // ebx
  std::string *v7; // rbx
  const char *v8; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-35h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-34h]
  std::string v14; // [rsp+40h] [rbp-30h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v7 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v8 = (const char *)std::forward<char const(&)[11]>(a4);
    std::string::basic_string<std::allocator<char>>(&v14, v8, &__a);
    v6 = getRequestParam<std::string>(request, &v14, v7);
    std::string::~string(&v14);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v6;
};

// Line 820: range 000000000CCCE6C2-000000000CCCE845
__int64 __fastcall getRequestParam<unsigned int,char const(&)[13],unsigned int &,char const(&)[12],std::string &,char const(&)[4],std::string &,char const(&)[6],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[13]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[12]>::type *a6,
        std::string *args_3,
        std::remove_reference<char const (&)[4]>::type *args_4,
        std::string *args_5,
        std::remove_reference<char const (&)[6]>::type *args_6,
        std::string *args_7)
{
  ApiRetcode v11; // ebx
  std::string *v12; // r13
  const char (*v13)[6]; // r12
  std::string *v14; // rbx
  const char (*v15)[12]; // r15
  unsigned int *v16; // r14
  const char *v17; // rax
  const char (*v19)[12]; // [rsp-8h] [rbp-A8h]
  std::string *v20; // [rsp+0h] [rbp-A0h]
  const char (*v21)[4]; // [rsp+8h] [rbp-98h]
  std::allocator<char> __a; // [rsp+4Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+4Ch] [rbp-54h]
  std::string v27; // [rsp+50h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v12 = std::forward<std::string &>(args_7);
    v13 = std::forward<char const(&)[6]>(args_6);
    v14 = std::forward<std::string &>(args_5);
    v21 = std::forward<char const(&)[4]>(args_4);
    v20 = std::forward<std::string &>(args_3);
    v15 = std::forward<char const(&)[12]>(a6);
    v16 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v17 = (const char *)std::forward<char const(&)[13]>(a4);
    std::string::basic_string<std::allocator<char>>(&v27, v17, &__a);
    v11 = getRequestParam<unsigned int,char const(&)[12],std::string &,char const(&)[4],std::string &,char const(&)[6],std::string &>(
            request,
            &v27,
            v16,
            v15,
            v20,
            v21,
            v14,
            v13,
            v12,
            v19,
            v20,
            v21,
            (std::string *)a6,
            (const char (*)[6])a5,
            (std::string *)a4);
    std::string::~string(&v27);
    std::allocator<char>::~allocator(&__a);
  }
  return (unsigned int)v11;
};

// Line 872: range 000000000CD59334-000000000CD59485
__int64 __fastcall getRequestParam<unsigned int,char const(&)[12],std::string &,char const(&)[4],std::string &,char const(&)[6],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[12]>::type *a4,
        std::string *a5,
        std::remove_reference<char const (&)[4]>::type *a6,
        std::string *args_3,
        std::remove_reference<char const (&)[6]>::type *args_4,
        std::string *args_5)
{
  unsigned int v9; // ebx
  std::string *v10; // rbx
  std::remove_reference<char const (&)[6]>::type *v11; // r15
  std::string *v12; // r14
  std::remove_reference<char const (&)[4]>::type *v13; // r13
  std::string *v14; // r12
  const char *v15; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-54h]
  std::string v22; // [rsp+40h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v10 = std::forward<std::string &>(args_5);
    v11 = (std::remove_reference<char const (&)[6]>::type *)std::forward<char const(&)[6]>(args_4);
    v12 = std::forward<std::string &>(args_3);
    v13 = (std::remove_reference<char const (&)[4]>::type *)std::forward<char const(&)[4]>(a6);
    v14 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v15 = (const char *)std::forward<char const(&)[12]>(a4);
    std::string::basic_string<std::allocator<char>>(&v22, v15, &__a);
    v9 = getRequestParam<std::string,char const(&)[4],std::string&,char const(&)[6],std::string&>(
           request,
           &v22,
           v14,
           v13,
           v12,
           v11,
           v10);
    std::string::~string(&v22);
    std::allocator<char>::~allocator(&__a);
  }
  return v9;
};

// Line 916: range 000000000CCD85BA-000000000CCD873D
__int64 __fastcall getRequestParam<unsigned int,char const(&)[10],unsigned int &,char const(&)[14],unsigned int &,char const(&)[17],unsigned int &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[10]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[14]>::type *a6,
        unsigned int *args_3,
        std::remove_reference<char const (&)[17]>::type *args_4,
        unsigned int *args_5,
        std::remove_reference<char const (&)[7]>::type *args_6,
        std::string *args_7)
{
  unsigned int v11; // ebx
  std::string *v12; // r13
  std::remove_reference<char const (&)[7]>::type *v13; // r12
  unsigned int *v14; // rbx
  std::remove_reference<char const (&)[14]>::type *v15; // r15
  unsigned int *v16; // r14
  const char *v17; // rax
  unsigned int *v19; // [rsp+0h] [rbp-A0h]
  char (*v20)[17]; // [rsp+8h] [rbp-98h]
  std::allocator<char> __a; // [rsp+4Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+4Ch] [rbp-54h]
  std::string v26; // [rsp+50h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v12 = std::forward<std::string &>(args_7);
    v13 = (std::remove_reference<char const (&)[7]>::type *)std::forward<char const(&)[7]>(args_6);
    v14 = std::forward<unsigned int &>(args_5);
    v20 = (char (*)[17])std::forward<char const(&)[17]>(args_4);
    v19 = std::forward<unsigned int &>(args_3);
    v15 = (std::remove_reference<char const (&)[14]>::type *)std::forward<char const(&)[14]>(a6);
    v16 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v17 = (const char *)std::forward<char const(&)[10]>(a4);
    std::string::basic_string<std::allocator<char>>(&v26, v17, &__a);
    v11 = getRequestParam<unsigned int,char const(&)[14],unsigned int &,char const(&)[17],unsigned int &,char const(&)[7],std::string &>(
            request,
            &v26,
            v16,
            v15,
            v19,
            v20,
            v14,
            v13,
            v12);
    std::string::~string(&v26);
    std::allocator<char>::~allocator(&__a);
  }
  return v11;
};

// Line 919: range 000000000CB9DB3A-000000000CB9DE54
int32_t __cdecl RequestHandler::sendMail(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::Packet &,Json::Value &)#2}::operator()(
        const RequestHandler::sendMail::<lambda(common::minet::Packet&, Json::Value&)> *const __closure,
        common::minet::Packet *rsp_packet,
        Json::Value *json_val)
{
  proto::AddRedisMailRsp *v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t v6; // r14d
  common::milog::MiLogStream *v7; // r14
  const std::string *v8; // rax
  Json::Value_0 *v9; // rax
  Json::Value_0 *v10; // rax
  int32_t result; // eax
  int32_t ret; // [rsp+28h] [rbp-128h]
  unsigned int uid; // [rsp+2Ch] [rbp-124h]
  common::milog::MiLogStream v15; // [rsp+30h] [rbp-120h] BYREF
  std::string val; // [rsp+50h] [rbp-100h] BYREF
  Json::Value_0 other; // [rsp+70h] [rbp-E0h] BYREF
  char v18[176]; // [rsp+A0h] [rbp-B0h] BYREF

  v3 = (proto::AddRedisMailRsp *)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = (proto::AddRedisMailRsp *)v4;
  }
  v3->_vptr_MessageLite = (int (**)(...))1102416563;
  v3->_internal_metadata_.ptr_ = "1 48 48 7 rsp:921";
  v3->ticket_.ptr_ = (std::string *)RequestHandler::sendMail(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::Packet &,Json::Value &)#2}::operator();
  v5 = (_DWORD *)((unsigned __int64)v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61937;
  v5[536862723] = -202116109;
  proto::AddRedisMailRsp::AddRedisMailRsp(v3 + 1);
  ret = common::minet::Packet::getProto<proto::AddRedisMailRsp>(rsp_packet, v3 + 1);
  if ( ret )
  {
    v6 = ret;
  }
  else
  {
    common::milog::MiLogStream::create(
      &v15,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/handler/request_handler.api.hpp",
      "operator()",
      927);
    v7 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
           &v15,
           (const char (*)[32])"receive proto::AddRedisMailRsp:");
    google::protobuf::Message::ShortDebugString[abi:cxx11](&val, v3 + 1);
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v7, &val);
    std::string::~string(&val);
    common::milog::MiLogStream::~MiLogStream(&v15);
    uid = common::minet::Packet::getUserId(rsp_packet);
    v8 = proto::AddRedisMailRsp::ticket[abi:cxx11](v3 + 1);
    Json::Value::Value(&other, v8);
    v9 = Json::Value::operator[]((Json::Value_0 *const)json_val, "ticket");
    Json::Value::operator=(v9, &other);
    Json::Value::~Value(&other);
    Json::Value::Value((Json::Value *)&other, uid);
    v10 = Json::Value::operator[]((Json::Value_0 *const)json_val, off_1A660020);
    Json::Value::operator=(v10, &other);
    Json::Value::~Value(&other);
    v6 = proto::AddRedisMailRsp::retcode(v3 + 1);
  }
  proto::AddRedisMailRsp::~AddRedisMailRsp(v3 + 1);
  result = v6;
  if ( v18 == (char *)v3 )
  {
    *(_QWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF800C) = 0;
  }
  else
  {
    v3->_vptr_MessageLite = (int (**)(...))1172321806;
    *(_QWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 941: range 000000000CB9EC1E-000000000CB9F054
int32_t __cdecl RequestHandler::queryRedisMailInfo(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  int32_t v7; // r14d
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-165h] BYREF
  int32_t retcode; // [rsp+3Ch] [rbp-164h]
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+40h] [rbp-160h] BYREF
  std::string key; // [rsp+60h] [rbp-140h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v16; // [rsp+80h] [rbp-120h] BYREF
  char v17[240]; // [rsp+B0h] [rbp-F0h] BYREF
  RequestHandler::queryRedisMailInfo::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> v18; // 0:esi.4,8:rdx.8

  v4 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(192LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 32 1 14 is_collect:950 48 4 7 uid:942 64 32 12 make_req:954 128 32 12 make_rsp:967";
  *(_QWORD *)(v4 + 16) = RequestHandler::queryRedisMailInfo;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556927;
  v6[536862723] = -218959118;
  v6[536862725] = -202116109;
  *(_DWORD *)(v4 + 48) = 0;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&key, off_1A660020, &__a);
  retcode = getRequestParam<unsigned int>(request, &key, (unsigned int *)(v4 + 48));
  std::string::~string(&key);
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v7 = retcode;
  }
  else
  {
    *(_BYTE *)(v4 + 32) = 0;
    std::allocator<char>::allocator(&__a);
    std::string::basic_string<std::allocator<char>>(&key, "is_collect", &__a);
    getRequestParam<bool>(request, &key, (bool *)(v4 + 32));
    std::string::~string(&key);
    std::allocator<char>::~allocator(&__a);
    v18.__is_collect = (bool *)(v4 + 32);
    v18.__uid = *(_DWORD *)(v4 + 48);
    std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::queryRedisMailInfo(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
      (std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> *const)(v4 + 64),
      v18);
    std::function<int ()(common::minet::Packet &,Json::Value &)>::function<RequestHandler::queryRedisMailInfo(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::Packet &,Json::Value &)#2},void,void>(
      (std::function<int(common::minet::Packet&,Json::Value&)> *const)(v4 + 128),
      *(RequestHandler::queryRedisMailInfo::<lambda(common::minet::Packet&, Json::Value&)> *)(v4 + 48));
    boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
      &v16,
      p_yield);
    std::function<int ()(common::minet::Packet &,Json::Value &)>::function(
      (std::function<int(common::minet::Packet&,Json::Value&)> *const)&key,
      (const std::function<int(common::minet::Packet&,Json::Value&)> *)(v4 + 128));
    std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function(
      &p_make_req,
      (const std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> *)(v4 + 64));
    v7 = RequestHandler::processRequestOnOtherServer(
           this,
           &p_make_req,
           (RequestHandler::MakeRspFunc *)&key,
           request,
           jval,
           &v16);
    std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
    std::function<int ()(common::minet::Packet &,Json::Value &)>::~function((std::function<int(common::minet::Packet&,Json::Value&)> *const)&key);
    boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v16);
    std::function<int ()(common::minet::Packet &,Json::Value &)>::~function((std::function<int(common::minet::Packet&,Json::Value&)> *const)(v4 + 128));
    std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function((std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> *const)(v4 + 64));
  }
  result = v7;
  if ( v17 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 951: range 000000000CCC214C-000000000CCC25B8
int32_t __cdecl RequestHandler::parseProtoStrToJson<proto::GroupBin>(
        RequestHandler *const this,
        const std::string *proto_str,
        Json::Value *json_value)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  int v8; // [rsp+0h] [rbp-570h]
  Json::Value *json_valueb; // [rsp+8h] [rbp-568h]
  common::milog::MiLogStream v11; // [rsp+20h] [rbp-550h] BYREF
  char v12[1328]; // [rsp+40h] [rbp-530h] BYREF

  v3 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_5(1280LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 48 4 11 options:118 64 32 15 json_string:122 128 40 14 status_ret:123 208 272 15 json_reader:1"
                        "30 544 600 9 proto:112";
  *(_QWORD *)(v3 + 16) = RequestHandler::parseProtoStrToJson<proto::GroupBin>;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862723] = -218959118;
  v5[536862725] = -218959360;
  v5[536862726] = 62194;
  v5[536862735] = -218959118;
  v5[536862736] = -218959118;
  v5[536862755] = -218103808;
  v5[536862756] = -202116109;
  v5[536862757] = -202116109;
  v5[536862758] = -202116109;
  v5[536862759] = -202116109;
  proto::GroupBin::GroupBin((proto::GroupBin *const)(v3 + 544));
  if ( (unsigned __int8)google::protobuf::MessageLite::ParseFromString(v3 + 544, proto_str) != 1 )
  {
    common::milog::MiLogStream::create(
      &v11,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/handler/request_handler.api.hpp",
      "parseProtoStrToJson",
      115);
    common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(&v11, (const char (*)[22])"ParseFromString fails");
    common::milog::MiLogStream::~MiLogStream(&v11);
    v6 = -1;
  }
  else
  {
    google::protobuf::util::JsonPrintOptions::JsonPrintOptions((google::protobuf::util::JsonPrintOptions *const)(v3 + 48));
    *(_BYTE *)(v3 + 48) = 1;
    *(_BYTE *)(v3 + 49) = 1;
    *(_BYTE *)(v3 + 51) = 1;
    std::string::basic_string(v3 + 64);
    google::protobuf::util::MessageToJsonString(
      (google::protobuf::util::Status *)(v3 + 128),
      (google::protobuf::Message *)(v3 + 544),
      v8,
      json_value,
      (int)proto_str,
      (char)this,
      (int)v11.log_,
      v11.ostr_ptr_._M_ptr);
    if ( !google::protobuf::util::Status::ok((const google::protobuf::util::Status *const)(v3 + 128)) )
    {
      common::milog::MiLogStream::create(
        &v11,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "parseProtoStrToJson",
        126);
      common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
        &v11,
        (const char (*)[28])"proto to json_string failed");
      common::milog::MiLogStream::~MiLogStream(&v11);
      v6 = -1;
    }
    else
    {
      Json::Reader::Reader((Json::Reader *)(v3 + 208));
      if ( !Json::Reader::parse((Json::Reader *const)(v3 + 208), (const std::string *)(v3 + 64), json_valueb, 1) )
      {
        common::milog::MiLogStream::create(
          &v11,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/handler/request_handler.api.hpp",
          "parseProtoStrToJson",
          133);
        common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
          &v11,
          (const char (*)[33])"json_string to json_value failed");
        common::milog::MiLogStream::~MiLogStream(&v11);
        v6 = -1;
      }
      else
      {
        v6 = 0;
      }
      Json::Reader::~Reader((Json::Reader *const)(v3 + 208));
    }
    google::protobuf::util::Status::~Status((google::protobuf::util::Status *const)(v3 + 128));
    std::string::~string((void *)(v3 + 64));
  }
  proto::GroupBin::~GroupBin((proto::GroupBin *const)(v3 + 544));
  if ( v12 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF800C) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8014) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF803C) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF808C) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8094) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF809C) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    __asan_stack_free_5(v3, 1280LL, v12);
  }
  return v6;
};

// Line 954: range 000000000CB9E0C4-000000000CB9E3C6
int32_t __cdecl RequestHandler::queryRedisMailInfo(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::queryRedisMailInfo::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r13
  bool *is_collect; // rdx
  proto::MailGetType v7; // edx
  common::milog::MiLogStream *v8; // r14
  int32_t result; // eax
  common::milog::MiLogStream v11; // [rsp+20h] [rbp-F0h] BYREF
  std::string val; // [rsp+40h] [rbp-D0h] BYREF
  char v13[176]; // [rsp+60h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 56 7 req:956";
  *(_QWORD *)(v3 + 16) = RequestHandler::queryRedisMailInfo(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862722] = -218103808;
  v5[536862723] = -202116109;
  proto::GetRedisMailReq::GetRedisMailReq((proto::GetRedisMailReq *const)(v3 + 32));
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(__closure);
  }
  common::minet::Packet::setUserId(packet, __closure->__uid);
  proto::GetRedisMailReq::set_op_type((proto::GetRedisMailReq *const)(v3 + 32), MAIL_GET_OP_MUIP);
  if ( *(_BYTE *)(((unsigned __int64)&__closure->__is_collect >> 3) + 0x7FFF8000) )
    __asan_report_load8(&__closure->__is_collect);
  is_collect = __closure->__is_collect;
  if ( *(_BYTE *)(((unsigned __int64)is_collect >> 3) + 0x7FFF8000) != 0
    && ((__int64)__closure->__is_collect & 7) >= *(_BYTE *)(((unsigned __int64)is_collect >> 3) + 0x7FFF8000) )
  {
    __asan_report_load1(__closure->__is_collect);
  }
  if ( *is_collect )
    v7 = MAIL_GET_ALL_COLLECTED;
  else
    v7 = MAIL_GET_ALL;
  proto::GetRedisMailReq::set_get_type((proto::GetRedisMailReq *const)(v3 + 32), v7);
  common::minet::Packet::setTargetService(packet, 0xAu);
  common::minet::Packet::setProto<proto::GetRedisMailReq>(packet, (const proto::GetRedisMailReq *)(v3 + 32));
  common::milog::MiLogStream::create(
    &v11,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/handler/request_handler.api.hpp",
    "operator()",
    962);
  v8 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(&v11, (const char (*)[18])"GetRedisMailReq: ");
  google::protobuf::Message::ShortDebugString[abi:cxx11](&val, (google::protobuf::Message *)(v3 + 32));
  common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, &val);
  std::string::~string(&val);
  common::milog::MiLogStream::~MiLogStream(&v11);
  proto::GetRedisMailReq::~GetRedisMailReq((proto::GetRedisMailReq *const)(v3 + 32));
  result = 0;
  if ( v13 == (char *)v3 )
  {
    *(_DWORD *)((v3 >> 3) + 0x7FFF8000) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 967: range 000000000CB9E3C8-000000000CB9EC1C
int32_t __cdecl RequestHandler::queryRedisMailInfo(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::Packet &,Json::Value &)#2}::operator()(
        const RequestHandler::queryRedisMailInfo::<lambda(common::minet::Packet&, Json::Value&)> *const __closure,
        common::minet::Packet *rsp_packet,
        Json::Value *jval)
{
  int32_t v3; // r14d
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // r15
  _BOOL4 v8; // r15d
  common::milog::MiLogStream *v9; // rdx
  _BOOL4 v10; // r15d
  common::milog::MiLogStream *v11; // rdx
  int v12; // r15d
  unsigned int v13; // eax
  Json::Value *v14; // rax
  int v15; // eax
  Json::Value_0 *v16; // rax
  int32_t result; // eax
  char *v18; // [rsp+0h] [rbp-3C0h]
  Json::Value *jvala; // [rsp+8h] [rbp-3B8h]
  int rsp_packeta; // [rsp+10h] [rbp-3B0h]
  const unsigned int *p_uid; // [rsp+18h] [rbp-3A8h]
  int idx; // [rsp+20h] [rbp-3A0h]
  int32_t ret; // [rsp+24h] [rbp-39Ch]
  google::protobuf::RepeatedPtrField<std::string >::const_iterator __for_begin; // [rsp+28h] [rbp-398h] BYREF
  google::protobuf::RepeatedPtrField<std::string >::const_iterator __for_end; // [rsp+30h] [rbp-390h] BYREF
  Json::Value *json_mail_list; // [rsp+38h] [rbp-388h]
  const google::protobuf::RepeatedPtrField<std::string > *__for_range; // [rsp+40h] [rbp-380h]
  const std::string *mail_str; // [rsp+48h] [rbp-378h]
  std::string val; // [rsp+50h] [rbp-370h] BYREF
  char v30[848]; // [rsp+70h] [rbp-350h] BYREF

  LOBYTE(p_uid) = (_BYTE)__closure;
  rsp_packeta = (int)rsp_packet;
  jvala = jval;
  v4 = (unsigned __int64)v30;
  v18 = v30;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_4(800LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "7 32 4 11 options:976 48 32 17 json_mail_str:993 112 40 8 mail:986 192 40 14 status_ret:994 272 "
                        "40 14 json_mail:1002 352 80 7 rsp:969 464 272 16 json_reader:1001";
  *(_QWORD *)(v4 + 16) = RequestHandler::queryRedisMailInfo(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::Packet &,Json::Value &)#2}::operator();
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = 61956;
  v6[536862722] = -219021312;
  v6[536862723] = 62194;
  v6[536862724] = -234881024;
  v6[536862725] = -218959118;
  v6[536862727] = -218959360;
  v6[536862728] = 62194;
  v6[536862729] = -234881024;
  v6[536862730] = -218959118;
  v6[536862733] = -219021312;
  v6[536862734] = 62194;
  v6[536862743] = -202116109;
  v6[536862744] = -202116109;
  proto::GetRedisMailRsp::GetRedisMailRsp((proto::GetRedisMailRsp *const)(v4 + 352));
  ret = common::minet::Packet::getProto<proto::GetRedisMailRsp>(rsp_packet, (proto::GetRedisMailRsp *)(v4 + 352));
  if ( ret )
  {
    v3 = ret;
  }
  else
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 48),
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/handler/request_handler.api.hpp",
      "operator()",
      975);
    v7 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
           (common::milog::MiLogStream *const)(v4 + 48),
           (const char (*)[18])"GetRedisMailRsp: ");
    google::protobuf::Message::ShortDebugString[abi:cxx11](&val, (google::protobuf::Message *)(v4 + 352));
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v7, &val);
    std::string::~string(&val);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 48));
    google::protobuf::util::JsonPrintOptions::JsonPrintOptions((google::protobuf::util::JsonPrintOptions *const)(v4 + 32));
    *(_BYTE *)(v4 + 32) = 1;
    *(_BYTE *)(v4 + 33) = 1;
    *(_BYTE *)(v4 + 35) = 1;
    idx = 0;
    json_mail_list = (Json::Value *)Json::Value::operator[]((Json::Value_0 *const)jvala, "mail_list");
    __for_range = proto::GetRedisMailRsp::mail_str_list[abi:cxx11]((const proto::GetRedisMailRsp *const)(v4 + 352));
    __for_begin.it_ = google::protobuf::RepeatedPtrField<std::string>::begin(__for_range).it_;
    __for_end.it_ = google::protobuf::RepeatedPtrField<std::string>::end(__for_range).it_;
    while ( google::protobuf::internal::RepeatedPtrIterator<std::string const>::operator!=(&__for_begin, &__for_end) )
    {
      mail_str = google::protobuf::internal::RepeatedPtrIterator<std::string const>::operator*(&__for_begin);
      proto::MailRedisData::MailRedisData((proto::MailRedisData *const)(v4 + 112));
      if ( (unsigned __int8)google::protobuf::MessageLite::ParseFromString(v4 + 112, mail_str) != 1 )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&val,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/handler/request_handler.api.hpp",
          "operator()",
          989);
        common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
          (common::milog::MiLogStream *const)&val,
          (const char (*)[28])"Mail ParseFromString failed");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&val);
        v3 = -1;
        v8 = 0;
      }
      else
      {
        std::string::basic_string(v4 + 48);
        google::protobuf::util::MessageToJsonString(
          (google::protobuf::util::Status *)(v4 + 192),
          (google::protobuf::Message *)(v4 + 112),
          (int)v18,
          jvala,
          rsp_packeta,
          (char)p_uid,
          idx,
          (void *)__for_begin.it_);
        if ( !google::protobuf::util::Status::ok((const google::protobuf::util::Status *const)(v4 + 192)) )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&val,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/handler/request_handler.api.hpp",
            "operator()",
            997);
          v9 = common::milog::MiLogStream::operator<<<char [51],(char *[51])0>(
                 (common::milog::MiLogStream *const)&val,
                 (const char (*)[51])"MailRedisData to json_mail_str failed player_uid: ");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, p_uid);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&val);
          v3 = -1;
          v10 = 0;
        }
        else
        {
          Json::Reader::Reader((Json::Reader *)(v4 + 464));
          Json::Value::Value(v4 + 272, 0LL);
          if ( !Json::Reader::parse(
                  (Json::Reader *const)(v4 + 464),
                  (const std::string *)(v4 + 48),
                  (Json::Value *)(v4 + 272),
                  1) )
          {
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)&val,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/handler/request_handler.api.hpp",
              "operator()",
              1005);
            v11 = common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
                    (common::milog::MiLogStream *const)&val,
                    (const char (*)[47])"json_mail_str to json_mail failed player_uid: ");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, p_uid);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&val);
            v3 = -1;
            v12 = 0;
          }
          else
          {
            v13 = idx++;
            v14 = (Json::Value *)Json::Value::operator[](json_mail_list, v13);
            Json::Value::operator=(v14);
            v12 = 1;
          }
          Json::Value::~Value((Json::Value_0 *const)(v4 + 272));
          Json::Reader::~Reader((Json::Reader *const)(v4 + 464));
          v10 = v12 == 1;
        }
        google::protobuf::util::Status::~Status((google::protobuf::util::Status *const)(v4 + 192));
        std::string::~string((void *)(v4 + 48));
        v8 = v10;
      }
      proto::MailRedisData::~MailRedisData((proto::MailRedisData *const)(v4 + 112));
      if ( !v8 )
        goto LABEL_20;
      google::protobuf::internal::RepeatedPtrIterator<std::string const>::operator++(&__for_begin);
    }
    v15 = proto::GetRedisMailRsp::mail_str_list_size((const proto::GetRedisMailRsp *const)(v4 + 352));
    Json::Value::Value((Json::Value *)(v4 + 272), v15);
    v16 = Json::Value::operator[]((Json::Value_0 *const)jvala, "mail_num");
    Json::Value::operator=(v16, (Json::Value_0 *)(v4 + 272));
    Json::Value::~Value((Json::Value_0 *const)(v4 + 272));
    v3 = proto::GetRedisMailRsp::retcode((const proto::GetRedisMailRsp *const)(v4 + 352));
  }
LABEL_20:
  proto::GetRedisMailRsp::~GetRedisMailRsp((proto::GetRedisMailRsp *const)(v4 + 352));
  result = v3;
  if ( v18 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF801C) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8034) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF805C) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8060) = -168430091;
  }
  return result;
};

// Line 1022: range 000000000CB9F626-000000000CB9F892
int32_t __cdecl RequestHandler::getPlayerNum(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  _DWORD *v6; // r12
  int32_t v7; // r14d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+30h] [rbp-140h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+50h] [rbp-120h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+70h] [rbp-100h] BYREF
  char v14[208]; // [rsp+A0h] [rbp-D0h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(160LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "2 32 32 13 make_req:1024 96 32 13 make_rsp:1033";
  *(_QWORD *)(v4 + 16) = RequestHandler::getPlayerNum;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862722] = -218959118;
  v6[536862724] = -202116109;
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::getPlayerNum(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    (std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> *const)(v4 + 32),
    (RequestHandler::getPlayerNum::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)>)request);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<RequestHandler::getPlayerNum(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::Packet &,Json::Value &)#2},void,void>(
    (std::function<int(common::minet::Packet&,Json::Value&)> *const)(v4 + 96),
    (RequestHandler::getPlayerNum::<lambda(common::minet::Packet&, Json::Value&)>)request);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function(
    &p_make_rsp,
    (const std::function<int(common::minet::Packet&,Json::Value&)> *)(v4 + 96));
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function(
    &p_make_req,
    (const std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function((std::function<int(common::minet::Packet&,Json::Value&)> *const)(v4 + 96));
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function((std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> *const)(v4 + 32));
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_DWORD *)((v4 >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 1024: range 000000000CB9F056-000000000CB9F1B4
int32_t __cdecl RequestHandler::getPlayerNum(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::getPlayerNum::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t result; // eax
  char v8[144]; // [rsp+20h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 24 8 req:1026";
  *(_QWORD *)(v3 + 16) = RequestHandler::getPlayerNum(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -218103808;
  v5[536862722] = -202116109;
  proto::OnlinePlayerNumReq::OnlinePlayerNumReq((proto::OnlinePlayerNumReq *const)(v3 + 32));
  common::minet::Packet::setTargetService(packet, 4u);
  common::minet::Packet::setProto<proto::OnlinePlayerNumReq>(packet, (const proto::OnlinePlayerNumReq *)(v3 + 32));
  proto::OnlinePlayerNumReq::~OnlinePlayerNumReq((proto::OnlinePlayerNumReq *const)(v3 + 32));
  result = 0;
  if ( v8 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 1033: range 000000000CB9F1B6-000000000CB9F624
int32_t __cdecl RequestHandler::getPlayerNum(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::Packet &,Json::Value &)#2}::operator()(
        const RequestHandler::getPlayerNum::<lambda(common::minet::Packet&, Json::Value&)> *const __closure,
        common::minet::Packet *rsp_packet,
        Json::Value *jval)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  unsigned int v7; // eax
  Json::Value_0 *v8; // rax
  unsigned int v9; // eax
  Json::Value_0 *v10; // rax
  const google::protobuf::MapPair<unsigned int,unsigned int> *v11; // rax
  Json::Value_0 *v12; // rax
  Json::Value *v13; // rax
  int32_t result; // eax
  int32_t ret; // [rsp+2Ch] [rbp-1D4h]
  const google::protobuf::Map<unsigned int,unsigned int> *__for_range; // [rsp+30h] [rbp-1D0h]
  unsigned int gameserver_id[2]; // [rsp+38h] [rbp-1C8h] BYREF
  google::protobuf::Map<unsigned int,unsigned int>::const_iterator __for_begin; // [rsp+40h] [rbp-1C0h] BYREF
  google::protobuf::Map<unsigned int,unsigned int>::const_iterator __for_end; // [rsp+60h] [rbp-1A0h] BYREF
  std::string key; // [rsp+80h] [rbp-180h] BYREF
  Json::Value_0 other; // [rsp+A0h] [rbp-160h] BYREF
  char v23[304]; // [rsp+D0h] [rbp-130h] BYREF

  v3 = (unsigned __int64)v23;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(256LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 32 40 19 player_num_map:1046 112 104 8 rsp:1035";
  *(_QWORD *)(v3 + 16) = RequestHandler::getPlayerNum(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::Packet &,Json::Value &)#2}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862722] = -218959360;
  v5[536862723] = 62194;
  v5[536862726] = -218103808;
  v5[536862727] = -202116109;
  proto::OnlinePlayerNumRsp::OnlinePlayerNumRsp((proto::OnlinePlayerNumRsp *const)(v3 + 112));
  ret = common::minet::Packet::getProto<proto::OnlinePlayerNumRsp>(rsp_packet, (proto::OnlinePlayerNumRsp *)(v3 + 112));
  if ( ret )
  {
    v6 = ret;
  }
  else
  {
    v7 = proto::OnlinePlayerNumRsp::online_player_num((const proto::OnlinePlayerNumRsp *const)(v3 + 112));
    Json::Value::Value((Json::Value *)&other, v7);
    v8 = Json::Value::operator[]((Json::Value_0 *const)jval, "internal_data");
    Json::Value::operator=(v8, &other);
    Json::Value::~Value(&other);
    v9 = proto::OnlinePlayerNumRsp::online_player_num_except_sub_account((const proto::OnlinePlayerNumRsp *const)(v3 + 112));
    Json::Value::Value((Json::Value *)&other, v9);
    v10 = Json::Value::operator[]((Json::Value_0 *const)jval, "online_player_num_except_sub_account");
    Json::Value::operator=(v10, &other);
    Json::Value::~Value(&other);
    Json::Value::Value(v3 + 32, 0LL);
    __for_range = proto::OnlinePlayerNumRsp::gameserver_player_num_map((const proto::OnlinePlayerNumRsp *const)(v3 + 112));
    google::protobuf::Map<unsigned int,unsigned int>::begin(&__for_begin, __for_range);
    google::protobuf::Map<unsigned int,unsigned int>::end(&__for_end, __for_range);
    while ( google::protobuf::operator!=(&__for_begin, &__for_end) )
    {
      v11 = google::protobuf::Map<unsigned int,unsigned int>::const_iterator::operator*(&__for_begin);
      google::protobuf::MapPair<unsigned int,unsigned int>::MapPair(
        (google::protobuf::MapPair<unsigned int,unsigned int> *const)gameserver_id,
        v11);
      Json::Value::Value((Json::Value *)&other, gameserver_id[1]);
      common::tools::AppIdUtils::getAppIdStr[abi:cxx11](&key, gameserver_id[0]);
      v12 = Json::Value::operator[]((Json::Value_0 *const)(v3 + 32), &key);
      Json::Value::operator=(v12, &other);
      std::string::~string(&key);
      Json::Value::~Value(&other);
      google::protobuf::MapPair<unsigned int,unsigned int>::~MapPair((google::protobuf::MapPair<unsigned int,unsigned int> *const)gameserver_id);
      google::protobuf::Map<unsigned int,unsigned int>::const_iterator::operator++(&__for_begin);
    }
    v13 = (Json::Value *)Json::Value::operator[]((Json::Value_0 *const)jval, "gameserver_player_num");
    Json::Value::operator=(v13);
    v6 = proto::OnlinePlayerNumRsp::retcode((const proto::OnlinePlayerNumRsp *const)(v3 + 112));
    Json::Value::~Value((Json::Value_0 *const)(v3 + 32));
  }
  proto::OnlinePlayerNumRsp::~OnlinePlayerNumRsp((proto::OnlinePlayerNumRsp *const)(v3 + 112));
  result = v6;
  if ( v23 == (char *)v3 )
  {
    *(_DWORD *)((v3 >> 3) + 0x7FFF8000) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1059: range 000000000CB9F894-000000000CB9FDD9
int32_t __cdecl RequestHandler::queryLoginBlackUid(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  int32_t v7; // r14d
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  Json::Value_0 *v10; // rax
  Json::Value_0 *v11; // rax
  Json::Value_0 *v12; // rax
  Json::Value_0 *v13; // rax
  int32_t result; // eax
  int32_t retcode; // [rsp+2Ch] [rbp-164h]
  std::string key; // [rsp+30h] [rbp-160h] BYREF
  Json::Value_0 other; // [rsp+50h] [rbp-140h] BYREF
  char v19[272]; // [rsp+80h] [rbp-110h] BYREF

  v4 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(224LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 48 1 13 is_exist:1067 64 4 8 uid:1060 80 112 17 black_config:1068";
  *(_QWORD *)(v4 + 16) = RequestHandler::queryLoginBlackUid;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234753551;
  v6[536862722] = 61956;
  v6[536862726] = -202116109;
  *(_DWORD *)(v4 + 64) = 0;
  std::allocator<char>::allocator(v4 + 48);
  std::string::basic_string<std::allocator<char>>(&key, off_1A660020, (const std::allocator<char> *)(v4 + 48));
  retcode = getRequestParam<unsigned int>(request, &key, (unsigned int *)(v4 + 64));
  std::string::~string(&key);
  std::allocator<char>::~allocator(v4 + 48);
  if ( retcode )
  {
    v7 = retcode;
  }
  else
  {
    *(_BYTE *)(v4 + 48) = 0;
    TableLoginBlackUidConfig::TableLoginBlackUidConfig((TableLoginBlackUidConfig *const)(v4 + 80));
    if ( MysqlOpMisc::selectLoginBlackUidConfig(
           *(_DWORD *)(v4 + 64),
           (TableLoginBlackUidConfig *)(v4 + 80),
           (bool *)(v4 + 48)) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "queryLoginBlackUid",
        1071);
      v8 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
             (common::milog::MiLogStream *const)&key,
             (const char (*)[27])"selectLoginBlackUidConfig ");
      v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v4 + 64));
      common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v9, (const char (*)[8])" failed");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      v7 = 1;
    }
    else
    {
      if ( *(_BYTE *)(v4 + 48) != 1 )
      {
        Json::Value::Value((Json::Value *)&other, *(_BYTE *)(v4 + 48));
        v10 = Json::Value::operator[]((Json::Value_0 *const)jval, "is_exist");
      }
      else
      {
        Json::Value::Value((Json::Value *)&other, *(_DWORD *)(v4 + 64));
        v11 = Json::Value::operator[]((Json::Value_0 *const)jval, off_1A660020);
        Json::Value::operator=(v11, &other);
        Json::Value::~Value(&other);
        Json::Value::Value(&other, v4 + 88);
        v12 = Json::Value::operator[]((Json::Value_0 *const)jval, "begin_time");
        Json::Value::operator=(v12, &other);
        Json::Value::~Value(&other);
        Json::Value::Value(&other, v4 + 120);
        v13 = Json::Value::operator[]((Json::Value_0 *const)jval, "end_time");
        Json::Value::operator=(v13, &other);
        Json::Value::~Value(&other);
        Json::Value::Value(&other, v4 + 152);
        v10 = Json::Value::operator[]((Json::Value_0 *const)jval, off_1A662A20);
      }
      Json::Value::operator=(v10, &other);
      Json::Value::~Value(&other);
      v7 = 0;
    }
    TableLoginBlackUidConfig::~TableLoginBlackUidConfig((TableLoginBlackUidConfig *const)(v4 + 80));
  }
  result = v7;
  if ( v19 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 1089: range 000000000CB9FDDA-000000000CBA06A0
int32_t __cdecl RequestHandler::updateLoginBlackUid(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  int32_t v7; // r14d
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::minet::Packet *v15; // rax
  common::minet::Packet *v16; // rax
  common::minet::Packet *v17; // rax
  std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // rax
  std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v19; // r14
  unsigned __int64 v20; // rax
  void (__fastcall *v21)(std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::shared_ptr<common::minet::Packet> *); // r15
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+3Fh] [rbp-251h] BYREF
  int32_t retcode; // [rsp+40h] [rbp-250h]
  uint32_t begin_time; // [rsp+44h] [rbp-24Ch]
  uint32_t end_time; // [rsp+48h] [rbp-248h]
  uint32_t now; // [rsp+4Ch] [rbp-244h]
  std::shared_ptr<common::minet::Packet> v28; // [rsp+50h] [rbp-240h] BYREF
  std::string key; // [rsp+60h] [rbp-230h] BYREF
  char v30[528]; // [rsp+80h] [rbp-210h] BYREF

  v4 = (unsigned __int64)v30;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(480LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "7 32 4 8 uid:1091 48 16 15 packet_ptr:1132 80 24 11 notify:1130 144 32 19 begin_time_str:1092 20"
                        "8 32 17 end_time_str:1092 272 32 8 msg:1098 336 112 17 black_config:1115";
  *(_QWORD *)(v4 + 16) = RequestHandler::updateLoginBlackUid;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = 61956;
  v6[536862722] = 62194;
  v6[536862723] = -218959360;
  v6[536862724] = 62194;
  v6[536862725] = -219021312;
  v6[536862726] = 62194;
  v6[536862727] = -219021312;
  v6[536862728] = 62194;
  v6[536862729] = -219021312;
  v6[536862730] = 62194;
  v6[536862734] = -202116109;
  *(_DWORD *)(v4 + 32) = 0;
  std::string::basic_string(v4 + 144);
  std::string::basic_string(v4 + 208);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&key, off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[11],std::string &,char const(&)[9],std::string &>(
              request,
              &key,
              (unsigned int *)(v4 + 32),
              (std::remove_reference<char const (&)[11]>::type *)"begin_time",
              (std::string *)(v4 + 144),
              (std::remove_reference<char const (&)[9]>::type *)"end_time",
              (std::string *)(v4 + 208));
  std::string::~string(&key);
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v7 = retcode;
  }
  else
  {
    std::string::basic_string(v4 + 272);
    std::allocator<char>::allocator(&__a);
    std::string::basic_string<std::allocator<char>>(&key, off_1A662A20, &__a);
    getRequestParam<std::string>(request, &key, (std::string *)(v4 + 272));
    std::string::~string(&key);
    std::allocator<char>::~allocator(&__a);
    begin_time = common::tools::TimeUtils::getTimeByStr((const std::string *)(v4 + 144));
    end_time = common::tools::TimeUtils::getTimeByStr((const std::string *)(v4 + 208));
    if ( begin_time && end_time )
    {
      if ( begin_time < end_time )
      {
        TableLoginBlackUidConfig::TableLoginBlackUidConfig((TableLoginBlackUidConfig *const)(v4 + 336));
        *(_DWORD *)(v4 + 336) = *(_DWORD *)(v4 + 32);
        std::string::operator=(v4 + 344, v4 + 144);
        std::string::operator=(v4 + 376, v4 + 208);
        std::string::operator=(v4 + 408, v4 + 272);
        if ( MysqlOpMisc::insertOrUpdateLoginBlackUidConfig((const TableLoginBlackUidConfig *)(v4 + 336)) )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&key,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/handler/request_handler.api.hpp",
            "updateLoginBlackUid",
            1122);
          v13 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                  (common::milog::MiLogStream *const)&key,
                  (const char (*)[27])"updateLoginBlackUidConfig ");
          v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v13,
                  (const unsigned int *)(v4 + 32));
          common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v14, (const char (*)[8])" failed");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
          v7 = 1;
        }
        else
        {
          now = common::tools::TimeUtils::getNow();
          if ( begin_time <= now && now <= end_time )
          {
            proto::KickoutPlayerNotify::KickoutPlayerNotify((proto::KickoutPlayerNotify *const)(v4 + 80));
            proto::KickoutPlayerNotify::set_reason((proto::KickoutPlayerNotify *const)(v4 + 80), 5u);
            common::minet::PacketUtils::createPacket<proto::KickoutPlayerNotify>((const proto::KickoutPlayerNotify *)(v4 + 48));
            if ( std::operator!=<common::minet::Packet>((const std::shared_ptr<common::minet::Packet> *)(v4 + 48), 0LL) )
            {
              v15 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 48));
              common::minet::Packet::setUserId(v15, *(_DWORD *)(v4 + 32));
              v16 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 48));
              common::minet::Packet::setTargetService(v16, 3u);
              v17 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 48));
              common::minet::Packet::setProto<proto::KickoutPlayerNotify>(
                v17,
                (const proto::KickoutPlayerNotify *)(v4 + 80));
              v18 = std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false> *const)&ResourceBox::network_mgr_ptr);
              v19 = v18;
              if ( *(_BYTE *)(((unsigned __int64)v18 >> 3) + 0x7FFF8000) )
                __asan_report_load8(v18);
              v20 = (unsigned __int64)(v19->_vptr_NetworkMgrBase + 8);
              if ( *(_BYTE *)((v20 >> 3) + 0x7FFF8000) )
                v20 = __asan_report_load8(v19->_vptr_NetworkMgrBase + 8);
              v21 = *(void (__fastcall **)(std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::shared_ptr<common::minet::Packet> *))v20;
              std::shared_ptr<common::minet::Packet>::shared_ptr(
                &v28,
                (const std::shared_ptr<common::minet::Packet> *)(v4 + 48));
              v21(v19, &v28);
              std::shared_ptr<common::minet::Packet>::~shared_ptr(&v28);
            }
            std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v4 + 48));
            proto::KickoutPlayerNotify::~KickoutPlayerNotify((proto::KickoutPlayerNotify *const)(v4 + 80));
          }
          v7 = 0;
        }
        TableLoginBlackUidConfig::~TableLoginBlackUidConfig((TableLoginBlackUidConfig *const)(v4 + 336));
      }
      else
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&key,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/handler/request_handler.api.hpp",
          "updateLoginBlackUid",
          1111);
        v11 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(
                (common::milog::MiLogStream *const)&key,
                (const char (*)[6])"uid: ");
        v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v11,
                (const unsigned int *)(v4 + 32));
        common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
          v12,
          (const char (*)[27])" begin_time: >= end_time: ");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
        v7 = 1002;
      }
    }
    else
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "updateLoginBlackUid",
        1106);
      v8 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
             (common::milog::MiLogStream *const)&key,
             (const char (*)[15])"format error: ");
      v9 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, (const std::string *)(v4 + 144));
      v10 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v9, (const char (*)[2])" ");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v10, (const std::string *)(v4 + 208));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      v7 = 1002;
    }
    std::string::~string((void *)(v4 + 272));
  }
  std::string::~string((void *)(v4 + 208));
  std::string::~string((void *)(v4 + 144));
  result = v7;
  if ( v30 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8028) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8038) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8038) = -168430091;
  }
  return result;
};

// Line 1146: range 000000000CBA06A2-000000000CBA08CE
int32_t __cdecl RequestHandler::delLoginBlackUid(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r13
  int32_t result; // eax
  common::milog::MiLogStream *v8; // rax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-85h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-84h]
  std::string key; // [rsp+30h] [rbp-80h] BYREF
  char v12[96]; // [rsp+50h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 4 8 uid:1147";
  *(_QWORD *)(v4 + 16) = RequestHandler::delLoginBlackUid;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116348;
  *(_DWORD *)(v4 + 32) = 0;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&key, off_1A660020, &__a);
  retcode = getRequestParam<unsigned int>(request, &key, (unsigned int *)(v4 + 32));
  std::string::~string(&key);
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    result = retcode;
  }
  else if ( *(_DWORD *)(v4 + 32) )
  {
    if ( MysqlOpMisc::delLoginBlackUidConfig(*(_DWORD *)(v4 + 32)) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "delLoginBlackUid",
        1160);
      v8 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
             (common::milog::MiLogStream *const)&key,
             (const char (*)[30])"delLoginBlackUid failed uid: ");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v4 + 32));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      result = 1;
    }
    else
    {
      result = 0;
    }
  }
  else
  {
    result = 1002;
  }
  if ( v12 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1169: range 000000000CBA08D0-000000000CBA0FB9
int32_t __cdecl RequestHandler::addWhiteAccountUid(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  const char (*v7)[12]; // r9
  int32_t v8; // r14d
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  Json::Value_0 *v19; // rax
  Json::Value_0 *v20; // rax
  Json::Value_0 *v21; // rax
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-1A5h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-1A4h]
  std::string key; // [rsp+30h] [rbp-1A0h] BYREF
  Json::Value_0 other; // [rsp+50h] [rbp-180h] BYREF
  char v28[336]; // [rsp+80h] [rbp-150h] BYREF

  v4 = (unsigned __int64)v28;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(288LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 32 4 17 account_type:1170 48 4 8 ret:1196 64 32 16 account_uid:1171 128 120 8 row:1195";
  *(_QWORD *)(v4 + 16) = RequestHandler::addWhiteAccountUid;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862723] = -218959118;
  v6[536862727] = -218103808;
  v6[536862728] = -202116109;
  *(_DWORD *)(v4 + 32) = 0;
  std::string::basic_string(v4 + 64);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&key, "account_type", &__a);
  retcode = getRequestParam<unsigned int,char const(&)[12],std::string &>(
              request,
              &key,
              (unsigned int *)(v4 + 32),
              "account_uid",
              (std::string *)(v4 + 64),
              v7);
  std::string::~string(&key);
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v8 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v4 + 64) )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&key,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/handler/request_handler.api.hpp",
      "addWhiteAccountUid",
      1179);
    common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
      (common::milog::MiLogStream *const)&key,
      (const char (*)[21])"account_uid is empty");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
    v8 = 1002;
  }
  else if ( std::operator==<char>("0", (const std::string *)(v4 + 64)) )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&key,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/handler/request_handler.api.hpp",
      "addWhiteAccountUid",
      1184);
    common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
      (common::milog::MiLogStream *const)&key,
      (const char (*)[21])"account_uid is 0!!!!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
    v8 = 1;
  }
  else if ( !RequestHandler::isEnableWhiteAccountUid(this) )
  {
    v8 = 2010;
  }
  else
  {
    TablePlayerUid::TablePlayerUid((TablePlayerUid *const)(v4 + 128));
    *(_DWORD *)(v4 + 48) = MysqlOpPlayerData::insertPlayerUidByAccount(
                             *(_DWORD *)(v4 + 32),
                             (const std::string *)(v4 + 64),
                             0,
                             (TablePlayerUid *)(v4 + 128));
    if ( *(_DWORD *)(v4 + 48) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/handler/request_handler.api.hpp",
        "addWhiteAccountUid",
        1199);
      v9 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
             (common::milog::MiLogStream *const)&key,
             (const char (*)[39])"insertPlayerUidByAccount account_type:");
      v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v4 + 32));
      v11 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v10, (const char (*)[14])" account_uid:");
      v12 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v11, (const std::string *)(v4 + 64));
      v13 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v12, (const char (*)[14])" failed, ret:");
      common::milog::MiLogStream::operator<<<int,(int *)0>(v13, (const int *)(v4 + 48));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      if ( *(_DWORD *)(v4 + 48) == 24 )
        v8 = 1011;
      else
        v8 = 1;
    }
    else
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        2u,
        "./src/handler/request_handler.api.hpp",
        "addWhiteAccountUid",
        1207);
      v14 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
              (common::milog::MiLogStream *const)&key,
              (const char (*)[15])"account_type: ");
      v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v14,
              (const unsigned int *)(v4 + 132));
      v16 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v15, (const char (*)[14])"account_uid: ");
      v17 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v16, (const std::string *)(v4 + 136));
      v18 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v17, (const char (*)[7])" uid: ");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v18, (const unsigned int *)(v4 + 128));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      Json::Value::Value((Json::Value *)&other, *(_DWORD *)(v4 + 128));
      v19 = Json::Value::operator[]((Json::Value_0 *const)jval, off_1A660020);
      Json::Value::operator=(v19, &other);
      Json::Value::~Value(&other);
      Json::Value::Value((Json::Value *)&other, *(_DWORD *)(v4 + 132));
      v20 = Json::Value::operator[]((Json::Value_0 *const)jval, "account_type");
      Json::Value::operator=(v20, &other);
      Json::Value::~Value(&other);
      Json::Value::Value(&other, v4 + 136);
      v21 = Json::Value::operator[]((Json::Value_0 *const)jval, aAccountUid[0]);
      Json::Value::operator=(v21, &other);
      Json::Value::~Value(&other);
      v8 = 0;
    }
    TablePlayerUid::~TablePlayerUid((TablePlayerUid *const)(v4 + 128));
  }
  std::string::~string((void *)(v4 + 64));
  result = v8;
  if ( v28 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF800C) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF801C) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 1217: range 000000000CBA0FBA-000000000CBA158D
int32_t __cdecl RequestHandler::isWhiteAccountUid(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  const char (*v7)[12]; // r9
  int32_t v8; // r14d
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  Json::Value_0 *v12; // rax
  Json::Value_0 *v13; // rax
  Json::Value_0 *v14; // rax
  int32_t result; // eax
  int32_t retcode; // [rsp+2Ch] [rbp-1A4h]
  std::string key; // [rsp+30h] [rbp-1A0h] BYREF
  Json::Value_0 other; // [rsp+50h] [rbp-180h] BYREF
  char v20[336]; // [rsp+80h] [rbp-150h] BYREF

  v4 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(288LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 32 1 21 is_account_exist:1238 48 4 17 account_type:1218 64 32 16 account_uid:1219 128 120 8 row:1237";
  *(_QWORD *)(v4 + 16) = RequestHandler::isWhiteAccountUid;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556927;
  v6[536862723] = -218959118;
  v6[536862727] = -218103808;
  v6[536862728] = -202116109;
  *(_DWORD *)(v4 + 48) = 0;
  std::string::basic_string(v4 + 64);
  std::allocator<char>::allocator(v4 + 32);
  std::string::basic_string<std::allocator<char>>(&key, "account_type", (const std::allocator<char> *)(v4 + 32));
  retcode = getRequestParam<unsigned int,char const(&)[12],std::string &>(
              request,
              &key,
              (unsigned int *)(v4 + 48),
              "account_uid",
              (std::string *)(v4 + 64),
              v7);
  std::string::~string(&key);
  std::allocator<char>::~allocator(v4 + 32);
  if ( retcode )
  {
    v8 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v4 + 64) )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&key,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/handler/request_handler.api.hpp",
      "isWhiteAccountUid",
      1227);
    common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
      (common::milog::MiLogStream *const)&key,
      (const char (*)[21])"account_uid is empty");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
    v8 = 1002;
  }
  else if ( !RequestHandler::isEnableWhiteAccountUid(this) )
  {
    v8 = 2010;
  }
  else
  {
    TablePlayerUid::TablePlayerUid((TablePlayerUid *const)(v4 + 128));
    *(_BYTE *)(v4 + 32) = 0;
    if ( MysqlOpPlayerData::selectPlayerUidByAccount(
           *(_DWORD *)(v4 + 48),
           (const std::string *)(v4 + 64),
           (TablePlayerUid *)(v4 + 128),
           (bool *)(v4 + 32)) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "isWhiteAccountUid",
        1241);
      v9 = common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(
             (common::milog::MiLogStream *const)&key,
             (const char (*)[46])"selectPlayerUidByAccount failed account_type:");
      v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v4 + 48));
      v11 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v10, (const char (*)[14])" account_uid:");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v11, (const std::string *)(v4 + 64));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      v8 = 1;
    }
    else
    {
      if ( *(_BYTE *)(v4 + 32) != 1 )
      {
        Json::Value::Value((Json::Value *)&other, *(_BYTE *)(v4 + 32));
        v12 = Json::Value::operator[]((Json::Value_0 *const)jval, "is_account_exist");
      }
      else
      {
        Json::Value::Value((Json::Value *)&other, *(_DWORD *)(v4 + 128));
        v13 = Json::Value::operator[]((Json::Value_0 *const)jval, off_1A660020);
        Json::Value::operator=(v13, &other);
        Json::Value::~Value(&other);
        Json::Value::Value((Json::Value *)&other, *(_DWORD *)(v4 + 132));
        v14 = Json::Value::operator[]((Json::Value_0 *const)jval, "account_type");
        Json::Value::operator=(v14, &other);
        Json::Value::~Value(&other);
        Json::Value::Value(&other, v4 + 136);
        v12 = Json::Value::operator[]((Json::Value_0 *const)jval, aAccountUid[0]);
      }
      Json::Value::operator=(v12, &other);
      Json::Value::~Value(&other);
      v8 = 0;
    }
    TablePlayerUid::~TablePlayerUid((TablePlayerUid *const)(v4 + 128));
  }
  std::string::~string((void *)(v4 + 64));
  result = v8;
  if ( v20 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF800C) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF801C) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 1260: range 000000000CBA158E-000000000CBA1AE1
int32_t __cdecl RequestHandler::queryPlayerStatusRedisData(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  int32_t v7; // r14d
  common::milog::MiLogStream *v8; // rax
  Json::Value_0 *v9; // rax
  int v10; // eax
  Json::Value_0 *v11; // rax
  uint32_t v12; // eax
  Json::Value_0 *v13; // rax
  unsigned __int64 v14; // rax
  Json::Value_0 *v15; // rax
  unsigned int v16; // eax
  Json::Value_0 *v17; // rax
  int32_t result; // eax
  int32_t retcode; // [rsp+2Ch] [rbp-124h]
  std::string key; // [rsp+30h] [rbp-120h] BYREF
  Json::Value_0 other; // [rsp+50h] [rbp-100h] BYREF
  char v23[208]; // [rsp+80h] [rbp-D0h] BYREF

  v4 = (unsigned __int64)v23;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(160LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 48 1 13 is_exist:1269 64 4 8 uid:1261 80 40 16 status_data:1268";
  *(_QWORD *)(v4 + 16) = RequestHandler::queryPlayerStatusRedisData;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234753551;
  v6[536862722] = 61956;
  v6[536862723] = -218103808;
  v6[536862724] = -202116109;
  *(_DWORD *)(v4 + 64) = 0;
  std::allocator<char>::allocator(v4 + 48);
  std::string::basic_string<std::allocator<char>>(&key, off_1A660020, (const std::allocator<char> *)(v4 + 48));
  retcode = getRequestParam<unsigned int>(request, &key, (unsigned int *)(v4 + 64));
  std::string::~string(&key);
  std::allocator<char>::~allocator(v4 + 48);
  if ( retcode )
  {
    v7 = retcode;
  }
  else
  {
    proto::PlayerStatusRedisData::PlayerStatusRedisData((proto::PlayerStatusRedisData *const)(v4 + 80));
    *(_BYTE *)(v4 + 48) = 0;
    if ( RedisOpPlayerStatus::getPlayerStatus(
           *(_DWORD *)(v4 + 64),
           (proto::PlayerStatusRedisData *)(v4 + 80),
           (bool *)(v4 + 48)) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/handler/request_handler.api.hpp",
        "queryPlayerStatusRedisData",
        1272);
      v8 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
             (common::milog::MiLogStream *const)&key,
             (const char (*)[29])"getPlayerStatus fails, uid: ");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v4 + 64));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      v7 = 1;
    }
    else
    {
      Json::Value::Value((Json::Value *)&other, *(_DWORD *)(v4 + 64));
      v9 = Json::Value::operator[]((Json::Value_0 *const)jval, off_1A660020);
      Json::Value::operator=(v9, &other);
      Json::Value::~Value(&other);
      if ( *(_BYTE *)(v4 + 48) )
      {
        v10 = proto::PlayerStatusRedisData::status((const proto::PlayerStatusRedisData *const)(v4 + 80));
        Json::Value::Value((Json::Value *)&other, v10);
        v11 = Json::Value::operator[]((Json::Value_0 *const)jval, "status");
        Json::Value::operator=(v11, &other);
        Json::Value::~Value(&other);
        if ( proto::PlayerStatusRedisData::gameserver_id((const proto::PlayerStatusRedisData *const)(v4 + 80)) )
        {
          v12 = proto::PlayerStatusRedisData::gameserver_id((const proto::PlayerStatusRedisData *const)(v4 + 80));
          common::tools::AppIdUtils::getAppIdStr[abi:cxx11](&key, v12);
          Json::Value::Value(&other, &key);
          v13 = Json::Value::operator[]((Json::Value_0 *const)jval, "gameserver_id");
          Json::Value::operator=(v13, &other);
          Json::Value::~Value(&other);
          std::string::~string(&key);
        }
        v14 = proto::PlayerStatusRedisData::login_rand((const proto::PlayerStatusRedisData *const)(v4 + 80));
        Json::Value::Value((Json::Value *)&other, v14);
        v15 = Json::Value::operator[]((Json::Value_0 *const)jval, "login_rand");
        Json::Value::operator=(v15, &other);
        Json::Value::~Value(&other);
        v16 = proto::PlayerStatusRedisData::login_time((const proto::PlayerStatusRedisData *const)(v4 + 80));
        Json::Value::Value((Json::Value *)&other, v16);
        v17 = Json::Value::operator[]((Json::Value_0 *const)jval, "login_time");
        Json::Value::operator=(v17, &other);
        Json::Value::~Value(&other);
      }
      v7 = 0;
    }
    proto::PlayerStatusRedisData::~PlayerStatusRedisData((proto::PlayerStatusRedisData *const)(v4 + 80));
  }
  result = v7;
  if ( v23 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 1293: range 000000000CBA1AE2-000000000CBA1FC8
int32_t __cdecl RequestHandler::queryHomeStatusRedisData(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  int32_t v7; // r14d
  common::milog::MiLogStream *v8; // rax
  Json::Value_0 *v9; // rax
  int v10; // eax
  Json::Value_0 *v11; // rax
  uint32_t v12; // eax
  Json::Value_0 *v13; // rax
  unsigned __int64 rand; // rax
  Json::Value_0 *v15; // rax
  int32_t result; // eax
  int32_t retcode; // [rsp+2Ch] [rbp-124h]
  std::string key; // [rsp+30h] [rbp-120h] BYREF
  Json::Value_0 other; // [rsp+50h] [rbp-100h] BYREF
  char v21[208]; // [rsp+80h] [rbp-D0h] BYREF

  v4 = (unsigned __int64)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(160LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 48 1 13 is_exist:1302 64 4 8 uid:1294 80 40 16 status_data:1301";
  *(_QWORD *)(v4 + 16) = RequestHandler::queryHomeStatusRedisData;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234753551;
  v6[536862722] = 61956;
  v6[536862723] = -218103808;
  v6[536862724] = -202116109;
  *(_DWORD *)(v4 + 64) = 0;
  std::allocator<char>::allocator(v4 + 48);
  std::string::basic_string<std::allocator<char>>(&key, off_1A660020, (const std::allocator<char> *)(v4 + 48));
  retcode = getRequestParam<unsigned int>(request, &key, (unsigned int *)(v4 + 64));
  std::string::~string(&key);
  std::allocator<char>::~allocator(v4 + 48);
  if ( retcode )
  {
    v7 = retcode;
  }
  else
  {
    proto::HomeStatusRedisData::HomeStatusRedisData((proto::HomeStatusRedisData *const)(v4 + 80));
    *(_BYTE *)(v4 + 48) = 0;
    if ( RedisOpHome::getHomeStatus(*(_DWORD *)(v4 + 64), (proto::HomeStatusRedisData *)(v4 + 80), (bool *)(v4 + 48)) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/handler/request_handler.api.hpp",
        "queryHomeStatusRedisData",
        1305);
      v8 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
             (common::milog::MiLogStream *const)&key,
             (const char (*)[27])"getHomeStatus fails, uid: ");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v4 + 64));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      v7 = 1;
    }
    else
    {
      Json::Value::Value((Json::Value *)&other, *(_DWORD *)(v4 + 64));
      v9 = Json::Value::operator[]((Json::Value_0 *const)jval, off_1A660020);
      Json::Value::operator=(v9, &other);
      Json::Value::~Value(&other);
      if ( *(_BYTE *)(v4 + 48) )
      {
        v10 = proto::HomeStatusRedisData::status((const proto::HomeStatusRedisData *const)(v4 + 80));
        Json::Value::Value((Json::Value *)&other, v10);
        v11 = Json::Value::operator[]((Json::Value_0 *const)jval, "status");
        Json::Value::operator=(v11, &other);
        Json::Value::~Value(&other);
        if ( proto::HomeStatusRedisData::gameserver_id((const proto::HomeStatusRedisData *const)(v4 + 80)) )
        {
          v12 = proto::HomeStatusRedisData::gameserver_id((const proto::HomeStatusRedisData *const)(v4 + 80));
          common::tools::AppIdUtils::getAppIdStr[abi:cxx11](&key, v12);
          Json::Value::Value(&other, &key);
          v13 = Json::Value::operator[]((Json::Value_0 *const)jval, "gameserver_id");
          Json::Value::operator=(v13, &other);
          Json::Value::~Value(&other);
          std::string::~string(&key);
        }
        rand = proto::HomeStatusRedisData::load_rand((const proto::HomeStatusRedisData *const)(v4 + 80));
        Json::Value::Value((Json::Value *)&other, rand);
        v15 = Json::Value::operator[]((Json::Value_0 *const)jval, "load_rand");
        Json::Value::operator=(v15, &other);
        Json::Value::~Value(&other);
      }
      v7 = 0;
    }
    proto::HomeStatusRedisData::~HomeStatusRedisData((proto::HomeStatusRedisData *const)(v4 + 80));
  }
  result = v7;
  if ( v21 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 1325: range 000000000CBA2C90-000000000CBA2E45
int32_t __cdecl RequestHandler::queryPlayerOnline(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 1 18 make_rsp_func:1352";
  *(_QWORD *)(v4 + 16) = RequestHandler::queryPlayerOnline;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116351;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<RequestHandler::queryPlayerOnline(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::Packet &,Json::Value &)#2},void,void>(
    &p_make_rsp,
    (RequestHandler::queryPlayerOnline::<lambda(common::minet::Packet&, Json::Value&)>)p_yield);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::queryPlayerOnline(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    (RequestHandler::queryPlayerOnline::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)>)p_yield);
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1326: range 000000000CBA1FCA-000000000CBA2438
int32_t __cdecl RequestHandler::queryPlayerOnline(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::queryPlayerOnline::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  const char (*v6)[14]; // r9
  int32_t v7; // r14d
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // r14
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-135h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-134h]
  common::milog::MiLogStream v16; // [rsp+30h] [rbp-130h] BYREF
  std::string key; // [rsp+50h] [rbp-110h] BYREF
  char v18[240]; // [rsp+70h] [rbp-F0h] BYREF

  v3 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 4 8 uid:1328 48 4 12 game_id:1335 64 32 18 gameserver_id:1329 128 32 8 req:1342";
  *(_QWORD *)(v3 + 16) = RequestHandler::queryPlayerOnline(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862723] = -218959118;
  v5[536862725] = -202116109;
  *(_DWORD *)(v3 + 32) = 0;
  std::string::basic_string(v3 + 64);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&key, off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[14],std::string &>(
              http_request,
              &key,
              (unsigned int *)(v3 + 32),
              (std::remove_reference<char const (&)[14]>::type *)"gameserver_id",
              (std::string *)(v3 + 64),
              v6);
  std::string::~string(&key);
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v7 = retcode;
  }
  else
  {
    std::string::basic_string(&key, v3 + 64);
    *(_DWORD *)(v3 + 48) = common::tools::AppIdUtils::getAppId(&key);
    std::string::~string(&key);
    if ( *(_DWORD *)(v3 + 48) )
    {
      proto::CheckOnlinePlayerReq::CheckOnlinePlayerReq((proto::CheckOnlinePlayerReq *const)(v3 + 128));
      proto::CheckOnlinePlayerReq::set_gameserver_id(
        (proto::CheckOnlinePlayerReq *const)(v3 + 128),
        *(_DWORD *)(v3 + 48));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 32));
      common::minet::Packet::setTargetService(packet, 4u);
      common::minet::Packet::setProto<proto::CheckOnlinePlayerReq>(
        packet,
        (const proto::CheckOnlinePlayerReq *)(v3 + 128));
      common::milog::MiLogStream::create(
        &v16,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/handler/request_handler.api.hpp",
        "operator()",
        1348);
      v11 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
              &v16,
              (const char (*)[34])"send proto::CheckOnlinePlayerReq ");
      google::protobuf::Message::ShortDebugString[abi:cxx11](&key, (google::protobuf::Message *)(v3 + 128));
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v11, &key);
      std::string::~string(&key);
      common::milog::MiLogStream::~MiLogStream(&v16);
      v7 = 0;
      proto::CheckOnlinePlayerReq::~CheckOnlinePlayerReq((proto::CheckOnlinePlayerReq *const)(v3 + 128));
    }
    else
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/handler/request_handler.api.hpp",
        "operator()",
        1338);
      v8 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
             (common::milog::MiLogStream *const)&key,
             (const char (*)[23])"gameserver_id invalid ");
      v9 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, (const std::string *)(v3 + 64));
      v10 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v9, (const char (*)[6])" --> ");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v3 + 48));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      v7 = -1;
    }
  }
  std::string::~string((void *)(v3 + 64));
  result = v7;
  if ( v18 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1352: range 000000000CBA243A-000000000CBA2C8E
int32_t __cdecl RequestHandler::queryPlayerOnline(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::Packet &,Json::Value &)#2}::operator()(
        const RequestHandler::queryPlayerOnline::<lambda(common::minet::Packet&, Json::Value&)> *const __closure,
        common::minet::Packet *rsp_packet,
        Json::Value *jval)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  const proto::CheckOnlinePlayerRsp_NodeStatus *v7; // rax
  const proto::CheckOnlinePlayerRsp_NodeStatus *v8; // rax
  uint32_t v9; // eax
  Json::Value_0 *v10; // rax
  const proto::CheckOnlinePlayerRsp_NodeStatus *v11; // rax
  uint32_t v12; // eax
  Json::Value_0 *v13; // rax
  Json::Value *v14; // rax
  uint32_t v15; // eax
  Json::Value_0 *v16; // rax
  google::protobuf::uint32 v17; // eax
  Json::Value_0 *v18; // rax
  unsigned __int64 v19; // rax
  Json::Value_0 *v20; // rax
  bool is_wait_save; // al
  Json::Value_0 *v22; // rax
  Json::Value *v23; // rax
  unsigned int UserId; // eax
  Json::Value_0 *v25; // rax
  common::milog::MiLogStream *v26; // r14
  int32_t result; // eax
  int val; // [rsp+20h] [rbp-1B0h] BYREF
  int32_t ret; // [rsp+24h] [rbp-1ACh]
  const proto::CheckOnlinePlayerRsp_GameStatus *game_status; // [rsp+28h] [rbp-1A8h]
  common::milog::MiLogStream v32; // [rsp+30h] [rbp-1A0h] BYREF
  Json::Value_0 other; // [rsp+50h] [rbp-180h] BYREF
  char v34[336]; // [rsp+80h] [rbp-150h] BYREF

  v3 = (unsigned __int64)v34;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(288LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 40 8 rsp:1354 128 40 14 node_json:1362 208 40 14 game_json:1370";
  *(_QWORD *)(v3 + 16) = RequestHandler::queryPlayerOnline(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::Packet &,Json::Value &)#2}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61937;
  v5[536862722] = -234881024;
  v5[536862723] = -218959118;
  v5[536862725] = -218959360;
  v5[536862726] = 62194;
  v5[536862727] = -218103808;
  v5[536862728] = -202116109;
  proto::CheckOnlinePlayerRsp::CheckOnlinePlayerRsp((proto::CheckOnlinePlayerRsp *const)(v3 + 48));
  ret = common::minet::Packet::getProto<proto::CheckOnlinePlayerRsp>(
          rsp_packet,
          (proto::CheckOnlinePlayerRsp *)(v3 + 48));
  if ( ret )
  {
    common::milog::MiLogStream::create(
      &v32,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/handler/request_handler.api.hpp",
      "operator()",
      1358);
    common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
      &v32,
      (const char (*)[26])"rsp_packet.getProto fails");
    common::milog::MiLogStream::~MiLogStream(&v32);
    v6 = ret;
  }
  else
  {
    Json::Value::Value(v3 + 128, 0LL);
    v7 = proto::CheckOnlinePlayerRsp::node_status((const proto::CheckOnlinePlayerRsp *const)(v3 + 48));
    if ( proto::CheckOnlinePlayerRsp_NodeStatus::nodeserver_id(v7) )
    {
      v8 = proto::CheckOnlinePlayerRsp::node_status((const proto::CheckOnlinePlayerRsp *const)(v3 + 48));
      v9 = proto::CheckOnlinePlayerRsp_NodeStatus::nodeserver_id(v8);
      common::tools::AppIdUtils::getAppIdStr[abi:cxx11]((std::string *)&v32, v9);
      Json::Value::Value(&other, &v32);
      v10 = Json::Value::operator[]((Json::Value_0 *const)(v3 + 128), "nodeserver_id");
      Json::Value::operator=(v10, &other);
      Json::Value::~Value(&other);
      std::string::~string(&v32);
      v11 = proto::CheckOnlinePlayerRsp::node_status((const proto::CheckOnlinePlayerRsp *const)(v3 + 48));
      v12 = proto::CheckOnlinePlayerRsp_NodeStatus::gameserver_id(v11);
      common::tools::AppIdUtils::getAppIdStr[abi:cxx11]((std::string *)&v32, v12);
      Json::Value::Value(&other, &v32);
      v13 = Json::Value::operator[]((Json::Value_0 *const)(v3 + 128), "gameserver_id");
      Json::Value::operator=(v13, &other);
      Json::Value::~Value(&other);
      std::string::~string(&v32);
    }
    v14 = (Json::Value *)Json::Value::operator[]((Json::Value_0 *const)jval, "node_status");
    Json::Value::operator=(v14);
    Json::Value::Value(v3 + 208, 0LL);
    game_status = proto::CheckOnlinePlayerRsp::game_status((const proto::CheckOnlinePlayerRsp *const)(v3 + 48));
    if ( proto::CheckOnlinePlayerRsp_GameStatus::gameserver_id(game_status) )
    {
      v15 = proto::CheckOnlinePlayerRsp_GameStatus::gameserver_id(game_status);
      common::tools::AppIdUtils::getAppIdStr[abi:cxx11]((std::string *)&v32, v15);
      Json::Value::Value(&other, &v32);
      v16 = Json::Value::operator[]((Json::Value_0 *const)(v3 + 208), "gameserver_id");
      Json::Value::operator=(v16, &other);
      Json::Value::~Value(&other);
      std::string::~string(&v32);
      v17 = proto::CheckOnlinePlayerRsp_GameStatus::login_time(game_status);
      common::tools::TimeUtils::getStrByTime[abi:cxx11]((std::string *)&v32, v17);
      Json::Value::Value(&other, &v32);
      v18 = Json::Value::operator[]((Json::Value_0 *const)(v3 + 208), "login_time");
      Json::Value::operator=(v18, &other);
      Json::Value::~Value(&other);
      std::string::~string(&v32);
      v19 = proto::CheckOnlinePlayerRsp_GameStatus::login_rand(game_status);
      Json::Value::Value((Json::Value *)&other, v19);
      v20 = Json::Value::operator[]((Json::Value_0 *const)(v3 + 208), "login_rand");
      Json::Value::operator=(v20, &other);
      Json::Value::~Value(&other);
      is_wait_save = proto::CheckOnlinePlayerRsp_GameStatus::is_wait_save(game_status);
      Json::Value::Value((Json::Value *)&other, is_wait_save);
      v22 = Json::Value::operator[]((Json::Value_0 *const)(v3 + 208), "is_wait_save");
      Json::Value::operator=(v22, &other);
      Json::Value::~Value(&other);
    }
    v23 = (Json::Value *)Json::Value::operator[]((Json::Value_0 *const)jval, "game_status");
    Json::Value::operator=(v23);
    UserId = common::minet::Packet::getUserId(rsp_packet);
    Json::Value::Value((Json::Value *)&other, UserId);
    v25 = Json::Value::operator[]((Json::Value_0 *const)jval, off_1A660020);
    Json::Value::operator=(v25, &other);
    Json::Value::~Value(&other);
    if ( proto::CheckOnlinePlayerRsp::retcode((const proto::CheckOnlinePlayerRsp *const)(v3 + 48)) )
    {
      common::milog::MiLogStream::create(
        &v32,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "operator()",
        1384);
      v26 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
              &v32,
              (const char (*)[38])"CheckOnlinePlayerRsp fails, retcode: ");
      val = proto::CheckOnlinePlayerRsp::retcode((const proto::CheckOnlinePlayerRsp *const)(v3 + 48));
      common::milog::MiLogStream::operator<<<int,(int *)0>(v26, &val);
      common::milog::MiLogStream::~MiLogStream(&v32);
      if ( proto::CheckOnlinePlayerRsp::retcode((const proto::CheckOnlinePlayerRsp *const)(v3 + 48)) == 4 )
        v6 = 5;
      else
        v6 = 1;
    }
    else
    {
      v6 = 0;
    }
    Json::Value::~Value((Json::Value_0 *const)(v3 + 208));
    Json::Value::~Value((Json::Value_0 *const)(v3 + 128));
  }
  proto::CheckOnlinePlayerRsp::~CheckOnlinePlayerRsp((proto::CheckOnlinePlayerRsp *const)(v3 + 48));
  result = v6;
  if ( v34 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8014) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF801C) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 1399: range 000000000CBA2E46-000000000CBA3184
int32_t __cdecl RequestHandler::delPlayerStatusRedisData(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  _DWORD *v6; // r13
  const char (*v7)[16]; // r9
  int32_t result; // eax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-A5h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-A4h]
  std::string key; // [rsp+30h] [rbp-A0h] BYREF
  char v18[128]; // [rsp+50h] [rbp-80h] BYREF

  v4 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(96LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "2 48 4 8 uid:1400 64 8 20 last_login_rand:1401";
  *(_QWORD *)(v4 + 16) = RequestHandler::delPlayerStatusRedisData;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -202116352;
  *(_DWORD *)(v4 + 48) = 0;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&key, off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[16],unsigned long &>(
              request,
              &key,
              (unsigned int *)(v4 + 48),
              (std::remove_reference<char const (&)[16]>::type *)"last_login_rand",
              (unsigned __int64 *)(v4 + 64),
              v7);
  std::string::~string(&key);
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    result = retcode;
  }
  else if ( RedisOpPlayerStatus::compareAndDeletePlayerStatus(*(_DWORD *)(v4 + 48), *(_QWORD *)(v4 + 64)) )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&key,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/handler/request_handler.api.hpp",
      "delPlayerStatusRedisData",
      1410);
    v9 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
           (common::milog::MiLogStream *const)&key,
           (const char (*)[42])"compareAndDeletePlayerStatus fails, uid: ");
    v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v4 + 48));
    v11 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(v10, (const char (*)[19])" last_login_rand: ");
    common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v11, (const unsigned __int64 *)(v4 + 64));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
    result = 1;
  }
  else
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&key,
      &common::milog::MiLogDefault::default_log_obj_,
      2u,
      "./src/handler/request_handler.api.hpp",
      "delPlayerStatusRedisData",
      1413);
    v12 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
            (common::milog::MiLogStream *const)&key,
            (const char (*)[42])"compareAndDeletePlayerStatus succs, uid: ");
    v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v4 + 48));
    v14 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(v13, (const char (*)[19])" last_login_rand: ");
    common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v14, (const unsigned __int64 *)(v4 + 64));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
    result = 0;
  }
  if ( v18 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 1420: range 000000000CBA3186-000000000CBA34C6
int32_t __cdecl RequestHandler::delHomeStatusRedisData(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r12
  __int64 v5; // rax
  _DWORD *v6; // r13
  const char (*v7)[10]; // r9
  int32_t result; // eax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-A5h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-A4h]
  std::string key; // [rsp+30h] [rbp-A0h] BYREF
  char v18[128]; // [rsp+50h] [rbp-80h] BYREF

  v4 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(96LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "2 48 4 8 uid:1421 64 8 14 load_rand:1422";
  *(_QWORD *)(v4 + 16) = RequestHandler::delHomeStatusRedisData;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -202116352;
  *(_DWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 64) = 0LL;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&key, off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[10],unsigned long &>(
              request,
              &key,
              (unsigned int *)(v4 + 48),
              (std::remove_reference<char const (&)[10]>::type *)"load_rand",
              (unsigned __int64 *)(v4 + 64),
              v7);
  std::string::~string(&key);
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    result = retcode;
  }
  else if ( RedisOpHome::compareAndDeleteHomeStatus(*(_DWORD *)(v4 + 48), *(_QWORD *)(v4 + 64)) )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&key,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/handler/request_handler.api.hpp",
      "delHomeStatusRedisData",
      1431);
    v9 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
           (common::milog::MiLogStream *const)&key,
           (const char (*)[40])"compareAndDeleteHomeStatus fails, uid: ");
    v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v4 + 48));
    v11 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v10, (const char (*)[13])" load_rand: ");
    common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v11, (const unsigned __int64 *)(v4 + 64));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
    result = 1;
  }
  else
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&key,
      &common::milog::MiLogDefault::default_log_obj_,
      2u,
      "./src/handler/request_handler.api.hpp",
      "delHomeStatusRedisData",
      1434);
    v12 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
            (common::milog::MiLogStream *const)&key,
            (const char (*)[40])"compareAndDeleteHomeStatus succs, uid: ");
    v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v4 + 48));
    v14 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v13, (const char (*)[13])" load_rand: ");
    common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v14, (const unsigned __int64 *)(v4 + 64));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
    result = 0;
  }
  if ( v18 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 1439: range 000000000CD527AE-000000000CD528FF
__int64 __fastcall getRequestParam<unsigned int,char const(&)[6],std::string &,char const(&)[8],std::string &,char const(&)[7],std::string &>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        unsigned int *para,
        std::remove_reference<char const (&)[6]>::type *a4,
        std::string *a5,
        std::remove_reference<char const (&)[8]>::type *a6,
        std::string *args_3,
        std::remove_reference<char const (&)[7]>::type *args_4,
        std::string *args_5)
{
  unsigned int v9; // ebx
  std::string *v10; // rbx
  std::remove_reference<char const (&)[7]>::type *v11; // r15
  std::string *v12; // r14
  std::remove_reference<char const (&)[8]>::type *v13; // r13
  std::string *v14; // r12
  const char *v15; // rax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+3Ch] [rbp-54h]
  std::string v22; // [rsp+40h] [rbp-50h] BYREF

  ret = getRequestParam<unsigned int>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v10 = std::forward<std::string &>(args_5);
    v11 = (std::remove_reference<char const (&)[7]>::type *)std::forward<char const(&)[7]>(args_4);
    v12 = std::forward<std::string &>(args_3);
    v13 = (std::remove_reference<char const (&)[8]>::type *)std::forward<char const(&)[8]>(a6);
    v14 = std::forward<std::string &>(a5);
    std::allocator<char>::allocator(&__a);
    v15 = (const char *)std::forward<char const(&)[6]>(a4);
    std::string::basic_string<std::allocator<char>>(&v22, v15, &__a);
    v9 = getRequestParam<std::string,char const(&)[8],std::string&,char const(&)[7],std::string&>(
           request,
           &v22,
           v14,
           v13,
           v12,
           v11,
           v10);
    std::string::~string(&v22);
    std::allocator<char>::~allocator(&__a);
  }
  return v9;
};

// Line 1441: range 000000000CBA34C8-000000000CBA3E43
int32_t __cdecl RequestHandler::guestBindAccount(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  const char (*v7)[12]; // r9
  int32_t v8; // r14d
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  Json::Value_0 *v20; // rax
  Json::Value_0 *v21; // rax
  Json::Value_0 *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  int32_t result; // eax
  int32_t retcode; // [rsp+28h] [rbp-288h]
  int32_t ret; // [rsp+2Ch] [rbp-284h]
  std::string key; // [rsp+30h] [rbp-280h] BYREF
  Json::Value_0 other; // [rsp+50h] [rbp-260h] BYREF
  char v34[560]; // [rsp+80h] [rbp-230h] BYREF

  v4 = (unsigned __int64)v34;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(512LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "5 48 1 13 is_exist:1451 64 32 13 guest_id:1442 128 32 16 account_uid:1442 192 120 8 row:1450 352"
                        " 120 14 final_row:1477";
  *(_QWORD *)(v4 + 16) = RequestHandler::guestBindAccount;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234753551;
  v6[536862723] = -218959118;
  v6[536862725] = -218959118;
  v6[536862729] = -234881024;
  v6[536862730] = -218959118;
  v6[536862734] = -218103808;
  v6[536862735] = -202116109;
  std::string::basic_string(v4 + 64);
  std::string::basic_string(v4 + 128);
  std::allocator<char>::allocator(v4 + 48);
  std::string::basic_string<std::allocator<char>>(&key, "guest_id", (const std::allocator<char> *)(v4 + 48));
  retcode = getRequestParam<std::string,char const(&)[12],std::string&>(
              request,
              &key,
              (std::string *)(v4 + 64),
              "account_uid",
              (std::string *)(v4 + 128),
              v7);
  std::string::~string(&key);
  std::allocator<char>::~allocator(v4 + 48);
  if ( retcode )
  {
    v8 = retcode;
  }
  else
  {
    TablePlayerUid::TablePlayerUid((TablePlayerUid *const)(v4 + 192));
    *(_BYTE *)(v4 + 48) = 0;
    if ( MysqlOpPlayerData::selectPlayerUidByAccount(
           1u,
           (const std::string *)(v4 + 128),
           (TablePlayerUid *)(v4 + 192),
           (bool *)(v4 + 48)) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "guestBindAccount",
        1454);
      v9 = common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(
             (common::milog::MiLogStream *const)&key,
             (const char (*)[46])"selectPlayerUidByAccount fails, account_uid: ");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v9, (const std::string *)(v4 + 128));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      v8 = 1;
    }
    else if ( *(_BYTE *)(v4 + 48) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "guestBindAccount",
        1459);
      v10 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
              (common::milog::MiLogStream *const)&key,
              (const char (*)[21])"Mihoyo account_uid: ");
      v11 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v10, (const std::string *)(v4 + 128));
      common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v11, (const char (*)[16])" has been bound");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      v8 = 2011;
    }
    else
    {
      ret = MysqlOpPlayerData::guestBindAccount(0, (const std::string *)(v4 + 64), 1u, (const std::string *)(v4 + 128));
      if ( ret == 24 )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&key,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/handler/request_handler.api.hpp",
          "guestBindAccount",
          1467);
        v12 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                (common::milog::MiLogStream *const)&key,
                (const char (*)[27])"Mihoyo guest account_uid: ");
        v13 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v12, (const std::string *)(v4 + 128));
        common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v13, (const char (*)[16])" has been bound");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
        v8 = 2011;
      }
      else if ( ret )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&key,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/handler/request_handler.api.hpp",
          "guestBindAccount",
          1472);
        v14 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
                (common::milog::MiLogStream *const)&key,
                (const char (*)[35])"guestBindAccount fails, guest_id: ");
        v15 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v14, (const std::string *)(v4 + 64));
        v16 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
                v15,
                (const char (*)[22])" mihoyo account_uid: ");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v16, (const std::string *)(v4 + 128));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
        v8 = 2003;
      }
      else
      {
        TablePlayerUid::TablePlayerUid((TablePlayerUid *const)(v4 + 352));
        if ( MysqlOpPlayerData::selectPlayerUidByAccount(
               1u,
               (const std::string *)(v4 + 128),
               (TablePlayerUid *)(v4 + 352),
               (bool *)(v4 + 48)) )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&key,
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/handler/request_handler.api.hpp",
            "guestBindAccount",
            1480);
          v17 = common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(
                  (common::milog::MiLogStream *const)&key,
                  (const char (*)[46])"selectPlayerUidByAccount fails, account_uid: ");
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v17, (const std::string *)(v4 + 128));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
          v8 = 1;
        }
        else if ( *(_BYTE *)(v4 + 48) != 1 )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&key,
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/handler/request_handler.api.hpp",
            "guestBindAccount",
            1485);
          v18 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
                  (common::milog::MiLogStream *const)&key,
                  (const char (*)[21])"Mihoyo account_uid: ");
          v19 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                  v18,
                  (const std::string *)(v4 + 128));
          common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v19, (const char (*)[16])" has been bound");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
          v8 = 1;
        }
        else
        {
          Json::Value::Value((Json::Value *)&other, *(_DWORD *)(v4 + 352));
          v20 = Json::Value::operator[]((Json::Value_0 *const)jval, off_1A660020);
          Json::Value::operator=(v20, &other);
          Json::Value::~Value(&other);
          Json::Value::Value((Json::Value *)&other, *(_DWORD *)(v4 + 356));
          v21 = Json::Value::operator[]((Json::Value_0 *const)jval, "account_type");
          Json::Value::operator=(v21, &other);
          Json::Value::~Value(&other);
          Json::Value::Value(&other, v4 + 360);
          v22 = Json::Value::operator[]((Json::Value_0 *const)jval, aAccountUid[0]);
          Json::Value::operator=(v22, &other);
          Json::Value::~Value(&other);
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&key,
            &common::milog::MiLogDefault::default_log_obj_,
            2u,
            "./src/handler/request_handler.api.hpp",
            "guestBindAccount",
            1492);
          v23 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
                  (common::milog::MiLogStream *const)&key,
                  (const char (*)[18])"mihoyo guest_id: ");
          v24 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v23, (const std::string *)(v4 + 64));
          v25 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
                  v24,
                  (const char (*)[30])" bind to mihoyo account_uid: ");
          v26 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                  v25,
                  (const std::string *)(v4 + 128));
          v27 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v26, (const char (*)[6])" uid:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v27, (const unsigned int *)(v4 + 352));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
          v8 = 0;
        }
        TablePlayerUid::~TablePlayerUid((TablePlayerUid *const)(v4 + 352));
      }
    }
    TablePlayerUid::~TablePlayerUid((TablePlayerUid *const)(v4 + 192));
  }
  std::string::~string((void *)(v4 + 128));
  std::string::~string((void *)(v4 + 64));
  result = v8;
  if ( v34 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8014) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8038) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1499: range 000000000CBA4224-000000000CBA43FC
int32_t __cdecl RequestHandler::delItem(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:1500";
  *(_QWORD *)(v4 + 16) = RequestHandler::delItem;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::delItem(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::delItem::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1500: range 000000000CBA3E44-000000000CBA4222
int32_t __cdecl RequestHandler::delItem(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::delItem::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-125h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-124h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-120h]
  proto::DelItemOp *del_item_op; // [rsp+38h] [rbp-118h]
  char v14[272]; // [rsp+40h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 48 4 8 uid:1502 64 4 12 item_id:1503 80 4 13 item_num:1504 96 32 11 ticket:1505 160 32 8 req:1521";
  *(_QWORD *)(v3 + 16) = RequestHandler::delItem(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862724] = -218959118;
  v5[536862726] = -202116109;
  *(_DWORD *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 64) = 0;
  *(_DWORD *)(v3 + 80) = 0;
  std::string::basic_string(v3 + 96);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 160), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[8],unsigned int &,char const(&)[9],unsigned int &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 160),
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[8]>::type *)"item_id",
              (unsigned int *)(v3 + 64),
              (std::remove_reference<char const (&)[9]>::type *)"item_num",
              (unsigned int *)(v3 + 80),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 96));
  std::string::~string((void *)(v3 + 160));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 96) )
  {
    v6 = 2012;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 48) )
      goto LABEL_12;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 48)) )
      v7 = 0;
    else
LABEL_12:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 160));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 96));
      del_item_op = proto::OfflineMsgBin::mutable_del_item_op(msg);
      proto::DelItemOp::set_item_id(del_item_op, *(_DWORD *)(v3 + 64));
      proto::DelItemOp::set_item_num(del_item_op, *(_DWORD *)(v3 + 80));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 48));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 160));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
    }
  }
  std::string::~string((void *)(v3 + 96));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 1538: range 000000000CBA4860-000000000CBA4A38
int32_t __cdecl RequestHandler::playerGoto(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:1539";
  *(_QWORD *)(v4 + 16) = RequestHandler::playerGoto;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::playerGoto(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::playerGoto::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1539: range 000000000CBA43FE-000000000CBA485E
int32_t __cdecl RequestHandler::playerGoto(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::playerGoto::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+23h] [rbp-14Dh] BYREF
  int32_t retcode; // [rsp+24h] [rbp-14Ch]
  proto::OfflineMsgBin *msg; // [rsp+28h] [rbp-148h]
  proto::PlayerGotoOp *goto_op; // [rsp+30h] [rbp-140h]
  proto::VectorBin *pos_proto; // [rsp+38h] [rbp-138h]
  char v15[304]; // [rsp+40h] [rbp-130h] BYREF

  v3 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(256LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "7 48 4 8 uid:1541 64 4 13 scene_id:1542 80 4 6 x:1543 96 4 6 y:1543 112 4 6 z:1543 128 32 11 tic"
                        "ket:1544 192 32 8 req:1559";
  *(_QWORD *)(v3 + 16) = RequestHandler::playerGoto(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862723] = -234556924;
  v5[536862725] = -218959118;
  v5[536862727] = -202116109;
  *(_DWORD *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 64) = 0;
  *(_DWORD *)(v3 + 80) = 0;
  *(_DWORD *)(v3 + 96) = 0;
  *(_DWORD *)(v3 + 112) = 0;
  std::string::basic_string(v3 + 128);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 192), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[2],float &,char const(&)[2],float &,char const(&)[2],float &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 192),
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[9]>::type *)"scene_id",
              (unsigned int *)(v3 + 64),
              (std::remove_reference<char const (&)[2]>::type *)"x",
              (float *)(v3 + 80),
              (std::remove_reference<char const (&)[2]>::type *)"y",
              (float *)(v3 + 96),
              (std::remove_reference<char const (&)[2]>::type *)"z",
              (float *)(v3 + 112),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 128));
  std::string::~string((void *)(v3 + 192));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 128) )
  {
    v6 = 2012;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 48) )
      goto LABEL_12;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 48)) )
      v7 = 0;
    else
LABEL_12:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 192));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 192));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 128));
      goto_op = proto::OfflineMsgBin::mutable_goto_op(msg);
      proto::PlayerGotoOp::set_scene_id(goto_op, *(_DWORD *)(v3 + 64));
      pos_proto = proto::PlayerGotoOp::mutable_pos(goto_op);
      proto::VectorBin::set_x(pos_proto, *(float *)(v3 + 80));
      proto::VectorBin::set_y(pos_proto, *(float *)(v3 + 96));
      proto::VectorBin::set_z(pos_proto, *(float *)(v3 + 112));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 48));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 192));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 192));
    }
  }
  std::string::~string((void *)(v3 + 128));
  result = v6;
  if ( v15 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1580: range 000000000CBA4E1E-000000000CBA4FF6
int32_t __cdecl RequestHandler::setNickName(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:1581";
  *(_QWORD *)(v4 + 16) = RequestHandler::setNickName;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::setNickName(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::setNickName::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1581: range 000000000CBA4A3A-000000000CBA4E1C
int32_t __cdecl RequestHandler::setNickName(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::setNickName::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-145h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-144h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-140h]
  proto::SetPlayerNickNameOp *op; // [rsp+38h] [rbp-138h]
  char v14[304]; // [rsp+40h] [rbp-130h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(256LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 48 4 8 uid:1585 64 32 14 nick_name:1583 128 32 11 ticket:1584 192 32 8 req:1604";
  *(_QWORD *)(v3 + 16) = RequestHandler::setNickName(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862723] = -218959118;
  v5[536862725] = -218959118;
  v5[536862727] = -202116109;
  std::string::basic_string(v3 + 64);
  std::string::basic_string(v3 + 128);
  *(_DWORD *)(v3 + 48) = 0;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 192), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[9],std::string &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 192),
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[9]>::type *)"nickname",
              (std::string *)(v3 + 64),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 128));
  std::string::~string((void *)(v3 + 192));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 48) )
      goto LABEL_10;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 48)) )
      v7 = 0;
    else
LABEL_10:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else if ( (unsigned __int8)std::string::empty(v3 + 128) )
    {
      v6 = 2012;
    }
    else if ( (unsigned __int8)std::string::empty(v3 + 64) )
    {
      v6 = -1;
    }
    else
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 192));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 192));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 128));
      op = proto::OfflineMsgBin::mutable_set_nick_name_op(msg);
      proto::SetPlayerNickNameOp::set_nick_name(op, (const std::string *)(v3 + 64));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 48));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 192));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 192));
    }
  }
  std::string::~string((void *)(v3 + 128));
  std::string::~string((void *)(v3 + 64));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1621: range 000000000CBA52F8-000000000CBA54B7
int32_t __cdecl RequestHandler::refreshShop(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 1 18 make_req_func:1622";
  *(_QWORD *)(v4 + 16) = RequestHandler::refreshShop;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116351;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::refreshShop(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    (RequestHandler::refreshShop::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)>)RequestHandler::onSendOfflineMsgRsp);
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1622: range 000000000CBA4FF8-000000000CBA52F7
int32_t __cdecl RequestHandler::refreshShop(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::refreshShop::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  const char (*v6)[7]; // r9
  int32_t v7; // r14d
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-105h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-104h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-100h]
  proto::RefreshShopOp *op; // [rsp+38h] [rbp-F8h]
  char v14[240]; // [rsp+40h] [rbp-F0h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 4 8 uid:1625 64 32 11 ticket:1624 128 32 8 req:1640";
  *(_QWORD *)(v3 + 16) = RequestHandler::refreshShop(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862723] = -218959118;
  v5[536862725] = -202116109;
  std::string::basic_string(v3 + 64);
  *(_DWORD *)(v3 + 48) = 0;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 128), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 128),
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 64),
              v6);
  std::string::~string((void *)(v3 + 128));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v7 = retcode;
  }
  else if ( *(_DWORD *)(v3 + 48) )
  {
    if ( (unsigned __int8)std::string::empty(v3 + 64) )
    {
      v7 = 2012;
    }
    else
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 128));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 128));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 64));
      op = proto::OfflineMsgBin::mutable_refresh_shop_op(msg);
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 48));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 128));
      v7 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 128));
    }
  }
  else
  {
    v7 = 2001;
  }
  std::string::~string((void *)(v3 + 64));
  result = v7;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1655: range 000000000CBA58F2-000000000CBA5ACA
int32_t __cdecl RequestHandler::unlockTalent(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:1656";
  *(_QWORD *)(v4 + 16) = RequestHandler::unlockTalent;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::unlockTalent(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::unlockTalent::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1656: range 000000000CBA54B8-000000000CBA58F0
int32_t __cdecl RequestHandler::unlockTalent(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::unlockTalent::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-125h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-124h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-120h]
  proto::UnlockTalentOp *op; // [rsp+38h] [rbp-118h]
  char v14[272]; // [rsp+40h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 32 4 8 uid:1659 48 4 14 avatar_id:1660 64 4 19 skill_depot_id:1661 80 4 14 talent_id:1662 96 3"
                        "2 11 ticket:1658 160 32 8 req:1681";
  *(_QWORD *)(v3 + 16) = RequestHandler::unlockTalent(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -234556924;
  v5[536862724] = -218959118;
  v5[536862726] = -202116109;
  std::string::basic_string(v3 + 96);
  *(_DWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 64) = 0;
  *(_DWORD *)(v3 + 80) = 0;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 160), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[7],std::string &,char const(&)[10],unsigned int &,char const(&)[15],unsigned int &,char const(&)[10],unsigned int &>(
              http_request,
              (const std::string *)(v3 + 160),
              (unsigned int *)(v3 + 32),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 96),
              (std::remove_reference<char const (&)[10]>::type *)"avatar_id",
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[15]>::type *)"skill_depot_id",
              (unsigned int *)(v3 + 64),
              (std::remove_reference<char const (&)[10]>::type *)"talent_id",
              (unsigned int *)(v3 + 80));
  std::string::~string((void *)(v3 + 160));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 32) )
      goto LABEL_10;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 32)) )
      v7 = 0;
    else
LABEL_10:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else if ( (unsigned __int8)std::string::empty(v3 + 96) )
    {
      v6 = 2012;
    }
    else if ( *(_DWORD *)(v3 + 48) && *(_DWORD *)(v3 + 64) && *(_DWORD *)(v3 + 80) )
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 160));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 96));
      op = proto::OfflineMsgBin::mutable_unlock_talent_op(msg);
      proto::UnlockTalentOp::set_avatar_id(op, *(_DWORD *)(v3 + 48));
      proto::UnlockTalentOp::set_skill_depot_id(op, *(_DWORD *)(v3 + 64));
      proto::UnlockTalentOp::set_talent_id(op, *(_DWORD *)(v3 + 80));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 32));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 160));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
    }
    else
    {
      v6 = 1002;
    }
  }
  std::string::~string((void *)(v3 + 96));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 1699: range 000000000CBA6358-000000000CBA6530
int32_t __cdecl RequestHandler::addItem(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:1700";
  *(_QWORD *)(v4 + 16) = RequestHandler::addItem;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::addItem(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::addItem::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1700: range 000000000CBA5ACC-000000000CBA6356
int32_t __cdecl RequestHandler::addItem(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::addItem::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  int32_t v3; // r14d
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  char v7; // al
  proto::ReliquaryBin *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  int v12; // r15d
  proto::WeaponBin *v13; // rax
  int v14; // r15d
  int32_t result; // eax
  char *v16; // [rsp+0h] [rbp-320h]
  common::minet::Packet *packeta; // [rsp+8h] [rbp-318h]
  int http_requesta; // [rsp+10h] [rbp-310h]
  int p_this; // [rsp+18h] [rbp-308h]
  int v20; // [rsp+20h] [rbp-300h]
  int v21; // [rsp+20h] [rbp-300h]
  void *v22; // [rsp+28h] [rbp-2F8h]
  void *v23; // [rsp+28h] [rbp-2F8h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-2F0h]
  int msga; // [rsp+30h] [rbp-2F0h]
  proto::AddItemOp *op; // [rsp+38h] [rbp-2E8h]
  proto::AddItemOp *opa; // [rsp+38h] [rbp-2E8h]
  proto::AddItemOp *opb; // [rsp+38h] [rbp-2E8h]
  std::string key; // [rsp+40h] [rbp-2E0h] BYREF
  google::protobuf::util::Status other; // [rsp+60h] [rbp-2C0h] BYREF
  char v31[656]; // [rsp+90h] [rbp-290h] BYREF

  packeta = packet;
  v4 = (unsigned __int64)v31;
  v16 = v31;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_4(608LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "10 32 1 11 option:1736 48 4 8 uid:1703 64 4 12 item_id:1704 80 4 15 item_count:1705 96 32 11 tic"
                        "ket:1702 160 32 21 extra_params_str:1711 224 32 8 req:1726 288 40 11 status:1735 368 56 18 reliq"
                        "uary_bin:1737 464 104 15 weapon_bin:1745";
  *(_QWORD *)(v4 + 16) = RequestHandler::addItem(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556927;
  v6[536862722] = -234556924;
  v6[536862724] = -218959118;
  v6[536862726] = -218959118;
  v6[536862728] = -218959118;
  v6[536862730] = -218959360;
  v6[536862731] = 62194;
  v6[536862733] = -218959360;
  v6[536862734] = 62194;
  v6[536862737] = -218103808;
  v6[536862738] = -202116109;
  std::string::basic_string(v4 + 96);
  *(_DWORD *)(v4 + 48) = 0;
  *(_DWORD *)(v4 + 64) = 0;
  *(_DWORD *)(v4 + 80) = 0;
  std::allocator<char>::allocator(v4 + 32);
  std::string::basic_string<std::allocator<char>>(&key, off_1A660020, (const std::allocator<char> *)(v4 + 32));
  HIDWORD(v22) = getRequestParam<unsigned int,char const(&)[7],std::string &,char const(&)[8],unsigned int &,char const(&)[11],unsigned int &>(
                   http_request,
                   &key,
                   (unsigned int *)(v4 + 48),
                   (std::remove_reference<char const (&)[7]>::type *)"ticket",
                   (std::string *)(v4 + 96),
                   (std::remove_reference<char const (&)[8]>::type *)"item_id",
                   (unsigned int *)(v4 + 64),
                   (std::remove_reference<char const (&)[11]>::type *)"item_count",
                   (unsigned int *)(v4 + 80));
  std::string::~string(&key);
  std::allocator<char>::~allocator(v4 + 32);
  if ( HIDWORD(v22) )
  {
    v3 = HIDWORD(v22);
    goto LABEL_32;
  }
  std::string::basic_string(v4 + 160);
  std::allocator<char>::allocator(v4 + 32);
  std::string::basic_string<std::allocator<char>>(&key, "extra_params", (const std::allocator<char> *)(v4 + 32));
  getRequestParam<std::string>(http_request, &key, (std::string *)(v4 + 160));
  std::string::~string(&key);
  std::allocator<char>::~allocator(v4 + 32);
  if ( !*(_DWORD *)(v4 + 48) )
    goto LABEL_10;
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8(__closure);
  if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v4 + 48)) )
    v7 = 0;
  else
LABEL_10:
    v7 = 1;
  if ( !v7 )
  {
    if ( (unsigned __int8)std::string::empty(v4 + 96) )
    {
      v3 = 2012;
      goto LABEL_31;
    }
    if ( !*(_DWORD *)(v4 + 64) || !*(_DWORD *)(v4 + 80) )
    {
      v3 = 1002;
      goto LABEL_31;
    }
    proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v4 + 224));
    msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v4 + 224));
    proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v4 + 96));
    op = proto::OfflineMsgBin::mutable_add_item_op(msg);
    proto::AddItemOp::set_item_id(op, *(_DWORD *)(v4 + 64));
    proto::AddItemOp::set_item_count(op, *(_DWORD *)(v4 + 80));
    if ( (unsigned __int8)std::string::empty(v4 + 160) == 1 )
      goto LABEL_29;
    google::protobuf::util::Status::Status((google::protobuf::util::Status *const)(v4 + 288));
    google::protobuf::util::JsonParseOptions::JsonParseOptions((google::protobuf::util::JsonParseOptions *const)(v4 + 32));
    proto::ReliquaryBin::ReliquaryBin((proto::ReliquaryBin *const)(v4 + 368));
    google::protobuf::util::JsonStringToMessage(
      &other,
      (int)v31,
      (int)packeta,
      (int)http_request,
      (int)__closure,
      v20,
      v22,
      (int)msg,
      (char)op);
    google::protobuf::util::Status::operator=((google::protobuf::util::Status *const)(v4 + 288), &other);
    google::protobuf::util::Status::~Status(&other);
    if ( google::protobuf::util::Status::ok((const google::protobuf::util::Status *const)(v4 + 288)) )
    {
      v8 = proto::AddItemOp::mutable_reliquary(opa);
      proto::ReliquaryBin::Swap(v8, (proto::ReliquaryBin *)(v4 + 368));
    }
    else
    {
      proto::WeaponBin::WeaponBin((proto::WeaponBin *const)(v4 + 464));
      google::protobuf::util::JsonStringToMessage(
        &other,
        (int)v16,
        (int)packeta,
        http_requesta,
        p_this,
        v21,
        v23,
        msga,
        (char)opa);
      google::protobuf::util::Status::operator=((google::protobuf::util::Status *const)(v4 + 288), &other);
      google::protobuf::util::Status::~Status(&other);
      if ( !google::protobuf::util::Status::ok((const google::protobuf::util::Status *const)(v4 + 288)) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&key,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/handler/request_handler.api.hpp",
          "operator()",
          1749);
        v9 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
               (common::milog::MiLogStream *const)&key,
               (const char (*)[44])"JsonStringToMessage fail, extra_params_str:");
        v10 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v9, (const std::string *)(v4 + 160));
        v11 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v10, (const char (*)[9])" status:");
        common::milog::MiLogStream::operator<<<google::protobuf::util::Status,(google::protobuf::util::Status*)0>(
          v11,
          (const google::protobuf::util::Status *)(v4 + 288));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
        v3 = 1002;
        v12 = 0;
      }
      else
      {
        v13 = proto::AddItemOp::mutable_weapon(opb);
        proto::WeaponBin::Swap(v13, (proto::WeaponBin *)(v4 + 464));
        v12 = 1;
      }
      proto::WeaponBin::~WeaponBin((proto::WeaponBin *const)(v4 + 464));
      if ( v12 != 1 )
      {
        v14 = 0;
        goto LABEL_28;
      }
    }
    v14 = 1;
LABEL_28:
    proto::ReliquaryBin::~ReliquaryBin((proto::ReliquaryBin *const)(v4 + 368));
    google::protobuf::util::Status::~Status((google::protobuf::util::Status *const)(v4 + 288));
    if ( v14 != 1 )
    {
LABEL_30:
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v4 + 224));
      goto LABEL_31;
    }
LABEL_29:
    common::minet::Packet::setUserId(packeta, *(_DWORD *)(v4 + 48));
    common::minet::Packet::setTargetService(packeta, 9u);
    common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packeta, (const proto::SendOfflineMsgReq *)(v4 + 224));
    v3 = 0;
    goto LABEL_30;
  }
  v3 = 2001;
LABEL_31:
  std::string::~string((void *)(v4 + 160));
LABEL_32:
  std::string::~string((void *)(v4 + 96));
  result = v3;
  if ( v16 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8020) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8034) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8044) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8048) = -168430091;
  }
  return result;
};

// Line 1766: range 000000000CBA68D2-000000000CBA6AAA
int32_t __cdecl RequestHandler::unlockArea(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:1767";
  *(_QWORD *)(v4 + 16) = RequestHandler::unlockArea;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::unlockArea(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::unlockArea::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1767: range 000000000CBA6532-000000000CBA68D0
int32_t __cdecl RequestHandler::unlockArea(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::unlockArea::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-105h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-104h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-100h]
  proto::UnlockAreaOp *op; // [rsp+38h] [rbp-F8h]
  char v14[240]; // [rsp+40h] [rbp-F0h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 4 8 uid:1770 48 4 12 area_id:1771 64 32 11 ticket:1769 128 32 8 req:1790";
  *(_QWORD *)(v3 + 16) = RequestHandler::unlockArea(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862723] = -218959118;
  v5[536862725] = -202116109;
  std::string::basic_string(v3 + 64);
  *(_DWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 128), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[7],std::string &,char const(&)[8],unsigned int &>(
              http_request,
              (const std::string *)(v3 + 128),
              (unsigned int *)(v3 + 32),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 64),
              (std::remove_reference<char const (&)[8]>::type *)"area_id",
              (unsigned int *)(v3 + 48));
  std::string::~string((void *)(v3 + 128));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 32) )
      goto LABEL_10;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 32)) )
      v7 = 0;
    else
LABEL_10:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else if ( (unsigned __int8)std::string::empty(v3 + 64) )
    {
      v6 = 2012;
    }
    else if ( *(_DWORD *)(v3 + 48) )
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 128));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 128));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 64));
      op = proto::OfflineMsgBin::mutable_unlock_area_op(msg);
      proto::UnlockAreaOp::set_area_id(op, *(_DWORD *)(v3 + 48));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 32));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 128));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 128));
    }
    else
    {
      v6 = 1002;
    }
  }
  std::string::~string((void *)(v3 + 64));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1806: range 000000000CBA6EAA-000000000CBA7082
int32_t __cdecl RequestHandler::takeoffEquip(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:1807";
  *(_QWORD *)(v4 + 16) = RequestHandler::takeoffEquip;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::takeoffEquip(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::takeoffEquip::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1807: range 000000000CBA6AAC-000000000CBA6EA9
int32_t __cdecl RequestHandler::takeoffEquip(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::takeoffEquip::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-125h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-124h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-120h]
  proto::TakeOffEquipOp *op; // [rsp+38h] [rbp-118h]
  char v14[272]; // [rsp+40h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 48 4 8 uid:1810 64 4 14 avatar_id:1811 80 4 15 equip_type:1812 96 32 11 ticket:1809 160 32 8 req:1831";
  *(_QWORD *)(v3 + 16) = RequestHandler::takeoffEquip(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862724] = -218959118;
  v5[536862726] = -202116109;
  std::string::basic_string(v3 + 96);
  *(_DWORD *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 64) = 0;
  *(_DWORD *)(v3 + 80) = 0;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 160), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[7],std::string &,char const(&)[10],unsigned int &,char const(&)[11],unsigned int &>(
              http_request,
              (const std::string *)(v3 + 160),
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 96),
              (std::remove_reference<char const (&)[10]>::type *)"avatar_id",
              (unsigned int *)(v3 + 64),
              (std::remove_reference<char const (&)[11]>::type *)"equip_type",
              (unsigned int *)(v3 + 80));
  std::string::~string((void *)(v3 + 160));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 48) )
      goto LABEL_10;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 48)) )
      v7 = 0;
    else
LABEL_10:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else if ( (unsigned __int8)std::string::empty(v3 + 96) )
    {
      v6 = 2012;
    }
    else if ( *(_DWORD *)(v3 + 64) && *(_DWORD *)(v3 + 80) )
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 160));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 96));
      op = proto::OfflineMsgBin::mutable_take_off_equip_op(msg);
      proto::TakeOffEquipOp::set_avatar_id(op, *(_DWORD *)(v3 + 64));
      proto::TakeOffEquipOp::set_equip_type(op, *(_DWORD *)(v3 + 80));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 48));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 160));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
    }
    else
    {
      v6 = 1002;
    }
  }
  std::string::~string((void *)(v3 + 96));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 1849: range 000000000CBA76AC-000000000CBA7884
int32_t __cdecl RequestHandler::delMail(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:1850";
  *(_QWORD *)(v4 + 16) = RequestHandler::delMail;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::delMail(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::delMail::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1850: range 000000000CBA7084-000000000CBA76AA
int32_t __cdecl RequestHandler::delMail(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::delMail::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v11; // rax
  unsigned int *v12; // rdx
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Fh] [rbp-1A1h] BYREF
  int32_t retcode; // [rsp+30h] [rbp-1A0h]
  unsigned int mail_id; // [rsp+34h] [rbp-19Ch]
  std::vector<unsigned int>::iterator __for_begin; // [rsp+38h] [rbp-198h] BYREF
  std::vector<unsigned int>::iterator __for_end; // [rsp+40h] [rbp-190h] BYREF
  proto::OfflineMsgBin *msg; // [rsp+48h] [rbp-188h]
  proto::DelMailOp *op; // [rsp+50h] [rbp-180h]
  std::vector<unsigned int> *__for_range; // [rsp+58h] [rbp-178h]
  char v23[368]; // [rsp+60h] [rbp-170h] BYREF

  v3 = (unsigned __int64)v23;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(320LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 48 4 8 uid:1853 64 24 16 mail_id_vec:1855 128 32 11 ticket:1852 192 32 16 mail_id_str:1854 256 32 8 req:1876";
  *(_QWORD *)(v3 + 16) = RequestHandler::delMail(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234881024;
  v5[536862723] = -218959118;
  v5[536862725] = -218959118;
  v5[536862727] = -218959118;
  v5[536862729] = -202116109;
  std::string::basic_string(v3 + 128);
  *(_DWORD *)(v3 + 48) = 0;
  std::string::basic_string(v3 + 192);
  std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v3 + 64));
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 256), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[7],std::string &,char const(&)[8],std::string &>(
              http_request,
              (const std::string *)(v3 + 256),
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 128),
              (std::remove_reference<char const (&)[8]>::type *)"mail_id",
              (std::string *)(v3 + 192));
  std::string::~string((void *)(v3 + 256));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 48) )
      goto LABEL_10;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 48)) )
      v7 = 0;
    else
LABEL_10:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else if ( (unsigned __int8)std::string::empty(v3 + 128) )
    {
      v6 = 2012;
    }
    else
    {
      std::allocator<char>::allocator(&__a);
      std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 256), ",", &__a);
      common::tools::StringUtils::splitToList<unsigned int>(
        (const std::string *)(v3 + 192),
        (const std::string *)(v3 + 256),
        (std::vector<unsigned int> *)(v3 + 64),
        1);
      std::string::~string((void *)(v3 + 256));
      std::allocator<char>::~allocator(&__a);
      if ( std::vector<unsigned int>::empty((const std::vector<unsigned int> *const)(v3 + 64)) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 256),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/handler/request_handler.api.hpp",
          "operator()",
          1872);
        v8 = common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
               (common::milog::MiLogStream *const)(v3 + 256),
               (const char (*)[24])"mail_id_vec empty uid: ");
        v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v3 + 48));
        v10 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v9, (const char (*)[9])"ticket: ");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v10, (const std::string *)(v3 + 128));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 256));
        v6 = -1;
      }
      else
      {
        proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 256));
        msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 256));
        proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 128));
        op = proto::OfflineMsgBin::mutable_del_mail_op(msg);
        __for_range = (std::vector<unsigned int> *)(v3 + 64);
        __for_begin._M_current = std::vector<unsigned int>::begin((std::vector<unsigned int> *const)(v3 + 64))._M_current;
        __for_end._M_current = std::vector<unsigned int>::end(__for_range)._M_current;
        while ( __gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(&__for_begin, &__for_end) )
        {
          v11 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*(&__for_begin);
          v12 = v11;
          if ( *(_BYTE *)(((unsigned __int64)v11 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v11 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v11 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v11);
          }
          mail_id = *v12;
          proto::DelMailOp::add_mail_id_list(op, mail_id);
          __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++(&__for_begin);
        }
        common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 48));
        common::minet::Packet::setTargetService(packet, 9u);
        common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 256));
        v6 = 0;
        proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 256));
      }
    }
  }
  std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v3 + 64));
  std::string::~string((void *)(v3 + 192));
  std::string::~string((void *)(v3 + 128));
  result = v6;
  if ( v23 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF801C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8024) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1893: range 000000000CCC2FA7-000000000CCC312A
__int64 __fastcall getRequestParam<std::string,char const(&)[4],unsigned int &,char const(&)[6],std::string&,char const(&)[8],std::string&,char const(&)[7],std::string&>(
        const common::minet::http_client::HttpRequest *request,
        const std::string *key,
        std::string *para,
        std::remove_reference<char const (&)[4]>::type *a4,
        unsigned int *a5,
        std::remove_reference<char const (&)[6]>::type *a6,
        std::string *args_3,
        std::remove_reference<char const (&)[8]>::type *args_4,
        std::string *args_5,
        std::remove_reference<char const (&)[7]>::type *args_6,
        std::string *args_7)
{
  unsigned int v11; // ebx
  std::string *v12; // r13
  std::remove_reference<char const (&)[7]>::type *v13; // r12
  std::string *v14; // rbx
  std::remove_reference<char const (&)[6]>::type *v15; // r15
  unsigned int *v16; // r14
  const char *v17; // rax
  std::string *v19; // [rsp+0h] [rbp-A0h]
  char (*v20)[8]; // [rsp+8h] [rbp-98h]
  std::allocator<char> __a; // [rsp+4Bh] [rbp-55h] BYREF
  ApiRetcode ret; // [rsp+4Ch] [rbp-54h]
  std::string v26; // [rsp+50h] [rbp-50h] BYREF

  ret = getRequestParam<std::string>(request, key, para);
  if ( ret )
  {
    return (unsigned int)ret;
  }
  else
  {
    v12 = std::forward<std::string &>(args_7);
    v13 = (std::remove_reference<char const (&)[7]>::type *)std::forward<char const(&)[7]>(args_6);
    v14 = std::forward<std::string &>(args_5);
    v20 = (char (*)[8])std::forward<char const(&)[8]>(args_4);
    v19 = std::forward<std::string &>(args_3);
    v15 = (std::remove_reference<char const (&)[6]>::type *)std::forward<char const(&)[6]>(a6);
    v16 = std::forward<unsigned int &>(a5);
    std::allocator<char>::allocator(&__a);
    v17 = (const char *)std::forward<char const(&)[4]>(a4);
    std::string::basic_string<std::allocator<char>>(&v26, v17, &__a);
    v11 = getRequestParam<unsigned int,char const(&)[6],std::string &,char const(&)[8],std::string &,char const(&)[7],std::string &>(
            request,
            &v26,
            v16,
            v15,
            v19,
            v20,
            v14,
            v13,
            v12);
    std::string::~string(&v26);
    std::allocator<char>::~allocator(&__a);
  }
  return v11;
};

// Line 1895: range 000000000CBA805C-000000000CBA8211
int32_t __cdecl RequestHandler::delRedisMail(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 1 18 make_rsp_func:1928";
  *(_QWORD *)(v4 + 16) = RequestHandler::delRedisMail;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116351;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<RequestHandler::delRedisMail(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::Packet &,Json::Value &)#2},void,void>(
    &p_make_rsp,
    (RequestHandler::delRedisMail::<lambda(common::minet::Packet&, Json::Value&)>)p_yield);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::delRedisMail(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    (RequestHandler::delRedisMail::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)>)p_yield);
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1896: range 000000000CBA7886-000000000CBA7DF9
int32_t __cdecl RequestHandler::delRedisMail(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::delRedisMail::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  const char (*v6)[11]; // r9
  int32_t v7; // r14d
  common::milog::MiLogStream *v8; // rax
  std::__shared_ptr_access<proto::DelRedisMailReq,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v10; // rax
  uint32_t *v11; // rdx
  std::__shared_ptr_access<proto::DelRedisMailReq,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  common::minet::ConstMessagePtr v13; // rdx
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Fh] [rbp-161h] BYREF
  int32_t retcode; // [rsp+30h] [rbp-160h]
  uint32_t mail_index; // [rsp+34h] [rbp-15Ch]
  std::vector<unsigned int>::iterator __for_begin; // [rsp+38h] [rbp-158h] BYREF
  std::vector<unsigned int>::iterator __for_end; // [rsp+40h] [rbp-150h] BYREF
  std::vector<unsigned int> *__for_range; // [rsp+48h] [rbp-148h]
  std::shared_ptr<proto::DelRedisMailReq> __r; // [rsp+50h] [rbp-140h] BYREF
  std::string key; // [rsp+60h] [rbp-130h] BYREF
  char v24[272]; // [rsp+80h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 48 4 8 uid:1898 64 16 12 req_ptr:1917 96 24 19 mail_index_vec:1900 160 32 19 mail_index_str:1899";
  *(_QWORD *)(v3 + 16) = RequestHandler::delRedisMail(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -219021312;
  v5[536862723] = -234881024;
  v5[536862724] = -218959118;
  v5[536862726] = -202116109;
  *(_DWORD *)(v3 + 48) = 0;
  std::string::basic_string(v3 + 160);
  std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v3 + 96));
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&key, off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[11],std::string &>(
              http_request,
              &key,
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[11]>::type *)"mail_index",
              (std::string *)(v3 + 160),
              v6);
  std::string::~string(&key);
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v7 = retcode;
  }
  else if ( *(_DWORD *)(v3 + 48) )
  {
    std::allocator<char>::allocator(&__a);
    std::string::basic_string<std::allocator<char>>(&key, ",", &__a);
    common::tools::StringUtils::splitToList<unsigned int>(
      (const std::string *)(v3 + 160),
      &key,
      (std::vector<unsigned int> *)(v3 + 96),
      1);
    std::string::~string(&key);
    std::allocator<char>::~allocator(&__a);
    if ( std::vector<unsigned int>::empty((const std::vector<unsigned int> *const)(v3 + 96)) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "operator()",
        1913);
      v8 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
             (common::milog::MiLogStream *const)&key,
             (const char (*)[31])"mail_index_vec is empty, uid: ");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v3 + 48));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      v7 = -1;
    }
    else
    {
      common::tools::perf::make_shared<proto::DelRedisMailReq>();
      v9 = std::__shared_ptr_access<proto::DelRedisMailReq,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::DelRedisMailReq,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      proto::DelRedisMailReq::set_op_type(v9, MAIL_DEL_OP_MUIP);
      __for_range = (std::vector<unsigned int> *)(v3 + 96);
      __for_begin._M_current = std::vector<unsigned int>::begin((std::vector<unsigned int> *const)(v3 + 96))._M_current;
      __for_end._M_current = std::vector<unsigned int>::end(__for_range)._M_current;
      while ( __gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(&__for_begin, &__for_end) )
      {
        v10 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*(&__for_begin);
        v11 = v10;
        if ( *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v10 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v10);
        }
        mail_index = *v11;
        v12 = std::__shared_ptr_access<proto::DelRedisMailReq,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::DelRedisMailReq,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
        proto::DelRedisMailReq::add_mail_id_list(v12, mail_index);
        __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++(&__for_begin);
      }
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 48));
      common::minet::Packet::setTargetService(packet, 0xAu);
      std::dynamic_pointer_cast<google::protobuf::Message const,proto::DelRedisMailReq>(&__r);
      v13._M_ptr = (std::__shared_ptr<const google::protobuf::Message,(__gnu_cxx::_Lock_policy)2>::element_type *)&__r;
      common::minet::Packet::setMessagePtr(packet, 0x2848u, v13);
      std::shared_ptr<google::protobuf::Message const>::~shared_ptr((std::shared_ptr<const google::protobuf::Message> *const)&__r);
      v7 = 0;
      std::shared_ptr<proto::DelRedisMailReq>::~shared_ptr((std::shared_ptr<proto::DelRedisMailReq> *const)(v3 + 64));
    }
  }
  else
  {
    v7 = 2001;
  }
  std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v3 + 96));
  std::string::~string((void *)(v3 + 160));
  result = v7;
  if ( v24 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 1928: range 000000000CBA7DFA-000000000CBA805B
int32_t __cdecl RequestHandler::delRedisMail(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::Packet &,Json::Value &)#2}::operator()(
        const RequestHandler::delRedisMail::<lambda(common::minet::Packet&, Json::Value&)> *const __closure,
        common::minet::Packet *rsp_packet,
        Json::Value *jval)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r13
  int32_t v6; // r14d
  std::__shared_ptr_access<const proto::DelRedisMailRsp,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  common::milog::MiLogStream *v8; // r14
  std::__shared_ptr_access<const proto::DelRedisMailRsp,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  int32_t result; // eax
  int val; // [rsp+2Ch] [rbp-94h] BYREF
  common::milog::MiLogStream v12; // [rsp+30h] [rbp-90h] BYREF
  char v13[112]; // [rsp+50h] [rbp-70h] BYREF

  v3 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 16 12 rsp_ptr:1930";
  *(_QWORD *)(v3 + 16) = RequestHandler::delRedisMail(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::Packet &,Json::Value &)#2}::operator();
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202178560;
  common::minet::Packet::getConstProto<proto::DelRedisMailRsp>((common::minet::Packet *const)(v3 + 32));
  if ( std::operator==<proto::DelRedisMailRsp const>(
         0LL,
         (const std::shared_ptr<const proto::DelRedisMailRsp> *)(v3 + 32)) )
  {
    common::milog::MiLogStream::create(
      &v12,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/handler/request_handler.api.hpp",
      "operator()",
      1933);
    common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(&v12, (const char (*)[22])"getConstProto<> fails");
    common::milog::MiLogStream::~MiLogStream(&v12);
    v6 = -1;
  }
  else
  {
    v7 = std::__shared_ptr_access<proto::DelRedisMailRsp const,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<const proto::DelRedisMailRsp,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
    if ( proto::DelRedisMailRsp::retcode(v7) )
    {
      common::milog::MiLogStream::create(
        &v12,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "operator()",
        1938);
      v8 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
             &v12,
             (const char (*)[29])"proto::DelRedisMailRsp ret: ");
      v9 = std::__shared_ptr_access<proto::DelRedisMailRsp const,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<const proto::DelRedisMailRsp,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
      val = proto::DelRedisMailRsp::retcode(v9);
      common::milog::MiLogStream::operator<<<int,(int *)0>(v8, &val);
      common::milog::MiLogStream::~MiLogStream(&v12);
      v6 = 1;
    }
    else
    {
      v6 = 0;
    }
  }
  std::shared_ptr<proto::DelRedisMailRsp const>::~shared_ptr((std::shared_ptr<const proto::DelRedisMailRsp> *const)(v3 + 32));
  result = v6;
  if ( v13 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1948: range 000000000CBA859C-000000000CBA8774
int32_t __cdecl RequestHandler::resetParentQuest(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:1949";
  *(_QWORD *)(v4 + 16) = RequestHandler::resetParentQuest;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::resetParentQuest(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::resetParentQuest::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1949: range 000000000CBA8212-000000000CBA859B
int32_t __cdecl RequestHandler::resetParentQuest(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::resetParentQuest::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-105h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-104h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-100h]
  proto::ResetParentQuestOp *parent_quest_op; // [rsp+38h] [rbp-F8h]
  char v14[240]; // [rsp+40h] [rbp-F0h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 4 8 uid:1951 48 4 20 parent_quest_id:1952 64 32 11 ticket:1953 128 32 8 req:1968";
  *(_QWORD *)(v3 + 16) = RequestHandler::resetParentQuest(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862723] = -218959118;
  v5[536862725] = -202116109;
  *(_DWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  std::string::basic_string(v3 + 64);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 128), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[16],unsigned int &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 128),
              (unsigned int *)(v3 + 32),
              (std::remove_reference<char const (&)[16]>::type *)"parent_quest_id",
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 64));
  std::string::~string((void *)(v3 + 128));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 64) )
  {
    v6 = 2012;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 32) )
      goto LABEL_12;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 32)) )
      v7 = 0;
    else
LABEL_12:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 128));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 128));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 64));
      parent_quest_op = proto::OfflineMsgBin::mutable_reset_parent_quest_op(msg);
      proto::ResetParentQuestOp::set_parent_quest_id(parent_quest_op, *(_DWORD *)(v3 + 48));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 32));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 128));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 128));
    }
  }
  std::string::~string((void *)(v3 + 64));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1985: range 000000000CBA8BFC-000000000CBA8DD4
int32_t __cdecl RequestHandler::refreshGroupSuite(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:1986";
  *(_QWORD *)(v4 + 16) = RequestHandler::refreshGroupSuite;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::refreshGroupSuite(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::refreshGroupSuite::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1986: range 000000000CBA8776-000000000CBA8BFB
int32_t __cdecl RequestHandler::refreshGroupSuite(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::refreshGroupSuite::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-125h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-124h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-120h]
  proto::RefreshGroupOp *refresh_group_op; // [rsp+38h] [rbp-118h]
  char v14[272]; // [rsp+40h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 32 4 8 uid:1988 48 4 13 group_id:1989 64 4 13 suite_id:1990 80 4 13 scene_id:1991 96 32 11 tic"
                        "ket:1992 160 32 8 req:2008";
  *(_QWORD *)(v3 + 16) = RequestHandler::refreshGroupSuite(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -234556924;
  v5[536862724] = -218959118;
  v5[536862726] = -202116109;
  *(_DWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 64) = 0;
  *(_DWORD *)(v3 + 80) = 0;
  std::string::basic_string(v3 + 96);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 160), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[9],unsigned int &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 160),
              (unsigned int *)(v3 + 32),
              (std::remove_reference<char const (&)[9]>::type *)"group_id",
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[9]>::type *)"suite_id",
              (unsigned int *)(v3 + 64),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 96));
  std::string::~string((void *)(v3 + 160));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else
  {
    std::allocator<char>::allocator(&__a);
    std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 160), "scene_id", &__a);
    getRequestParam<unsigned int>(http_request, (const std::string *)(v3 + 160), (unsigned int *)(v3 + 80));
    std::string::~string((void *)(v3 + 160));
    std::allocator<char>::~allocator(&__a);
    if ( (unsigned __int8)std::string::empty(v3 + 96) )
    {
      v6 = 2012;
    }
    else
    {
      if ( !*(_DWORD *)(v3 + 32) )
        goto LABEL_12;
      if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
        __asan_report_load8(__closure);
      if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 32)) )
        v7 = 0;
      else
LABEL_12:
        v7 = 1;
      if ( v7 )
      {
        v6 = 2001;
      }
      else
      {
        proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
        msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 160));
        proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 96));
        refresh_group_op = proto::OfflineMsgBin::mutable_refresh_group_op(msg);
        proto::RefreshGroupOp::set_group_id(refresh_group_op, *(_DWORD *)(v3 + 48));
        proto::RefreshGroupOp::set_suite_id(refresh_group_op, *(_DWORD *)(v3 + 64));
        proto::RefreshGroupOp::set_scene_id(refresh_group_op, *(_DWORD *)(v3 + 80));
        common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 32));
        common::minet::Packet::setTargetService(packet, 9u);
        common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 160));
        v6 = 0;
        proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
      }
    }
  }
  std::string::~string((void *)(v3 + 96));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 2026: range 000000000CBA91FA-000000000CBA93D2
int32_t __cdecl RequestHandler::removeGadgetInGroupByConfigId(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:2027";
  *(_QWORD *)(v4 + 16) = RequestHandler::removeGadgetInGroupByConfigId;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::removeGadgetInGroupByConfigId(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::removeGadgetInGroupByConfigId::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2027: range 000000000CBA8DD6-000000000CBA91F9
int32_t __cdecl RequestHandler::removeGadgetInGroupByConfigId(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::removeGadgetInGroupByConfigId::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-125h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-124h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-120h]
  proto::GroupBinOp *group_bin_op; // [rsp+38h] [rbp-118h]
  char v14[272]; // [rsp+40h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 32 4 8 uid:2029 48 4 13 scene_id:2030 64 4 13 group_id:2031 80 4 14 config_id:2032 96 32 11 ti"
                        "cket:2033 160 32 8 req:2048";
  *(_QWORD *)(v3 + 16) = RequestHandler::removeGadgetInGroupByConfigId(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -234556924;
  v5[536862724] = -218959118;
  v5[536862726] = -202116109;
  *(_DWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 64) = 0;
  *(_DWORD *)(v3 + 80) = 0;
  std::string::basic_string(v3 + 96);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 160), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[9],unsigned int &,char const(&)[10],unsigned int &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 160),
              (unsigned int *)(v3 + 32),
              (std::remove_reference<char const (&)[9]>::type *)"scene_id",
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[9]>::type *)"group_id",
              (unsigned int *)(v3 + 64),
              (std::remove_reference<char const (&)[10]>::type *)"config_id",
              (unsigned int *)(v3 + 80),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 96));
  std::string::~string((void *)(v3 + 160));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 96) )
  {
    v6 = 2012;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 32) )
      goto LABEL_12;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 32)) )
      v7 = 0;
    else
LABEL_12:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 160));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 96));
      group_bin_op = proto::OfflineMsgBin::mutable_group_bin_op(msg);
      proto::GroupBinOp::set_op_type(group_bin_op, GROUP_OP_GADGET_MAP_DEL);
      proto::GroupBinOp::set_scene_id(group_bin_op, *(_DWORD *)(v3 + 48));
      proto::GroupBinOp::set_group_id(group_bin_op, *(_DWORD *)(v3 + 64));
      proto::GroupBinOp::set_config_id(group_bin_op, *(_DWORD *)(v3 + 80));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 32));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 160));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
    }
  }
  std::string::~string((void *)(v3 + 96));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 2067: range 000000000CBA97F8-000000000CBA99D0
int32_t __cdecl RequestHandler::removeMonsterInGroupByConfigId(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:2068";
  *(_QWORD *)(v4 + 16) = RequestHandler::removeMonsterInGroupByConfigId;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::removeMonsterInGroupByConfigId(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::removeMonsterInGroupByConfigId::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2068: range 000000000CBA93D4-000000000CBA97F7
int32_t __cdecl RequestHandler::removeMonsterInGroupByConfigId(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::removeMonsterInGroupByConfigId::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-125h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-124h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-120h]
  proto::GroupBinOp *group_bin_op; // [rsp+38h] [rbp-118h]
  char v14[272]; // [rsp+40h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 32 4 8 uid:2070 48 4 13 scene_id:2071 64 4 13 group_id:2072 80 4 14 config_id:2073 96 32 11 ti"
                        "cket:2074 160 32 8 req:2089";
  *(_QWORD *)(v3 + 16) = RequestHandler::removeMonsterInGroupByConfigId(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -234556924;
  v5[536862724] = -218959118;
  v5[536862726] = -202116109;
  *(_DWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 64) = 0;
  *(_DWORD *)(v3 + 80) = 0;
  std::string::basic_string(v3 + 96);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 160), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[9],unsigned int &,char const(&)[10],unsigned int &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 160),
              (unsigned int *)(v3 + 32),
              (std::remove_reference<char const (&)[9]>::type *)"scene_id",
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[9]>::type *)"group_id",
              (unsigned int *)(v3 + 64),
              (std::remove_reference<char const (&)[10]>::type *)"config_id",
              (unsigned int *)(v3 + 80),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 96));
  std::string::~string((void *)(v3 + 160));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 96) )
  {
    v6 = 2012;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 32) )
      goto LABEL_12;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 32)) )
      v7 = 0;
    else
LABEL_12:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 160));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 96));
      group_bin_op = proto::OfflineMsgBin::mutable_group_bin_op(msg);
      proto::GroupBinOp::set_op_type(group_bin_op, GROUP_OP_MONSTER_MAP_DEL);
      proto::GroupBinOp::set_scene_id(group_bin_op, *(_DWORD *)(v3 + 48));
      proto::GroupBinOp::set_group_id(group_bin_op, *(_DWORD *)(v3 + 64));
      proto::GroupBinOp::set_config_id(group_bin_op, *(_DWORD *)(v3 + 80));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 32));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 160));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
    }
  }
  std::string::~string((void *)(v3 + 96));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 2108: range 000000000CBA9E26-000000000CBA9FFE
int32_t __cdecl RequestHandler::operateDelGadgetInGroupByConfigId(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:2109";
  *(_QWORD *)(v4 + 16) = RequestHandler::operateDelGadgetInGroupByConfigId;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::operateDelGadgetInGroupByConfigId(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::operateDelGadgetInGroupByConfigId::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2109: range 000000000CBA99D2-000000000CBA9E25
int32_t __cdecl RequestHandler::operateDelGadgetInGroupByConfigId(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::operateDelGadgetInGroupByConfigId::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-145h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-144h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-140h]
  proto::GroupBinOp *group_bin_op; // [rsp+38h] [rbp-138h]
  char v14[304]; // [rsp+40h] [rbp-130h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(256LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "7 48 1 11 is_add:2115 64 4 8 uid:2111 80 4 13 scene_id:2112 96 4 13 group_id:2113 112 4 14 confi"
                        "g_id:2114 128 32 11 ticket:2116 192 32 8 req:2131";
  *(_QWORD *)(v3 + 16) = RequestHandler::operateDelGadgetInGroupByConfigId(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753551;
  v5[536862722] = -234556924;
  v5[536862723] = -234556924;
  v5[536862725] = -218959118;
  v5[536862727] = -202116109;
  *(_DWORD *)(v3 + 64) = 0;
  *(_DWORD *)(v3 + 80) = 0;
  *(_DWORD *)(v3 + 96) = 0;
  *(_DWORD *)(v3 + 112) = 0;
  *(_BYTE *)(v3 + 48) = 0;
  std::string::basic_string(v3 + 128);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 192), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[9],unsigned int &,char const(&)[10],unsigned int &,char const(&)[7],bool &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 192),
              (unsigned int *)(v3 + 64),
              (std::remove_reference<char const (&)[9]>::type *)"scene_id",
              (unsigned int *)(v3 + 80),
              (std::remove_reference<char const (&)[9]>::type *)"group_id",
              (unsigned int *)(v3 + 96),
              (std::remove_reference<char const (&)[10]>::type *)"config_id",
              (unsigned int *)(v3 + 112),
              (std::remove_reference<char const (&)[7]>::type *)"is_add",
              (bool *)(v3 + 48),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 128));
  std::string::~string((void *)(v3 + 192));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 128) )
  {
    v6 = 2012;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 64) )
      goto LABEL_12;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 64)) )
      v7 = 0;
    else
LABEL_12:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 192));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 192));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 128));
      group_bin_op = proto::OfflineMsgBin::mutable_group_bin_op(msg);
      proto::GroupBinOp::set_op_type(group_bin_op, GROUP_OP_DEL_GADGET_LIST);
      proto::GroupBinOp::set_scene_id(group_bin_op, *(_DWORD *)(v3 + 80));
      proto::GroupBinOp::set_group_id(group_bin_op, *(_DWORD *)(v3 + 96));
      proto::GroupBinOp::set_config_id(group_bin_op, *(_DWORD *)(v3 + 112));
      proto::GroupBinOp::set_is_add(group_bin_op, *(_BYTE *)(v3 + 48));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 64));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 192));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 192));
    }
  }
  std::string::~string((void *)(v3 + 128));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2151: range 000000000CBAA454-000000000CBAA62C
int32_t __cdecl RequestHandler::operateDelMonsterInGroupByConfigId(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:2152";
  *(_QWORD *)(v4 + 16) = RequestHandler::operateDelMonsterInGroupByConfigId;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::operateDelMonsterInGroupByConfigId(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::operateDelMonsterInGroupByConfigId::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2152: range 000000000CBAA000-000000000CBAA453
int32_t __cdecl RequestHandler::operateDelMonsterInGroupByConfigId(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::operateDelMonsterInGroupByConfigId::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-145h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-144h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-140h]
  proto::GroupBinOp *group_bin_op; // [rsp+38h] [rbp-138h]
  char v14[304]; // [rsp+40h] [rbp-130h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(256LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "7 48 1 11 is_add:2158 64 4 8 uid:2154 80 4 13 scene_id:2155 96 4 13 group_id:2156 112 4 14 confi"
                        "g_id:2157 128 32 11 ticket:2159 192 32 8 req:2174";
  *(_QWORD *)(v3 + 16) = RequestHandler::operateDelMonsterInGroupByConfigId(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753551;
  v5[536862722] = -234556924;
  v5[536862723] = -234556924;
  v5[536862725] = -218959118;
  v5[536862727] = -202116109;
  *(_DWORD *)(v3 + 64) = 0;
  *(_DWORD *)(v3 + 80) = 0;
  *(_DWORD *)(v3 + 96) = 0;
  *(_DWORD *)(v3 + 112) = 0;
  *(_BYTE *)(v3 + 48) = 0;
  std::string::basic_string(v3 + 128);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 192), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[9],unsigned int &,char const(&)[10],unsigned int &,char const(&)[7],bool &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 192),
              (unsigned int *)(v3 + 64),
              (std::remove_reference<char const (&)[9]>::type *)"scene_id",
              (unsigned int *)(v3 + 80),
              (std::remove_reference<char const (&)[9]>::type *)"group_id",
              (unsigned int *)(v3 + 96),
              (std::remove_reference<char const (&)[10]>::type *)"config_id",
              (unsigned int *)(v3 + 112),
              (std::remove_reference<char const (&)[7]>::type *)"is_add",
              (bool *)(v3 + 48),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 128));
  std::string::~string((void *)(v3 + 192));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 128) )
  {
    v6 = 2012;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 64) )
      goto LABEL_12;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 64)) )
      v7 = 0;
    else
LABEL_12:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 192));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 192));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 128));
      group_bin_op = proto::OfflineMsgBin::mutable_group_bin_op(msg);
      proto::GroupBinOp::set_op_type(group_bin_op, GROUP_OP_DEL_MONSTER_LIST);
      proto::GroupBinOp::set_scene_id(group_bin_op, *(_DWORD *)(v3 + 80));
      proto::GroupBinOp::set_group_id(group_bin_op, *(_DWORD *)(v3 + 96));
      proto::GroupBinOp::set_config_id(group_bin_op, *(_DWORD *)(v3 + 112));
      proto::GroupBinOp::set_is_add(group_bin_op, *(_BYTE *)(v3 + 48));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 64));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 192));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 192));
    }
  }
  std::string::~string((void *)(v3 + 128));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2194: range 000000000CBAAAB4-000000000CBAAC8C
int32_t __cdecl RequestHandler::operateGadgetStateInGroupByConfigId(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:2195";
  *(_QWORD *)(v4 + 16) = RequestHandler::operateGadgetStateInGroupByConfigId;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::operateGadgetStateInGroupByConfigId(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::operateGadgetStateInGroupByConfigId::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2195: range 000000000CBAA62E-000000000CBAAAB2
int32_t __cdecl RequestHandler::operateGadgetStateInGroupByConfigId(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::operateGadgetStateInGroupByConfigId::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-145h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-144h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-140h]
  proto::GroupBinOp *group_bin_op; // [rsp+38h] [rbp-138h]
  char v14[304]; // [rsp+40h] [rbp-130h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(256LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "8 32 1 14 is_create:2202 48 4 8 uid:2197 64 4 13 scene_id:2198 80 4 13 group_id:2199 96 4 14 con"
                        "fig_id:2200 112 4 10 state:2201 128 32 11 ticket:2203 192 32 8 req:2218";
  *(_QWORD *)(v3 + 16) = RequestHandler::operateGadgetStateInGroupByConfigId(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556927;
  v5[536862722] = -234556924;
  v5[536862723] = -234556924;
  v5[536862725] = -218959118;
  v5[536862727] = -202116109;
  *(_DWORD *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 64) = 0;
  *(_DWORD *)(v3 + 80) = 0;
  *(_DWORD *)(v3 + 96) = 0;
  *(_DWORD *)(v3 + 112) = 0;
  *(_BYTE *)(v3 + 32) = 0;
  std::string::basic_string(v3 + 128);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 192), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[9],unsigned int &,char const(&)[10],unsigned int &,char const(&)[6],unsigned int &,char const(&)[10],bool &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 192),
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[9]>::type *)"scene_id",
              (unsigned int *)(v3 + 64),
              (std::remove_reference<char const (&)[9]>::type *)"group_id",
              (unsigned int *)(v3 + 80),
              (std::remove_reference<char const (&)[10]>::type *)"config_id",
              (unsigned int *)(v3 + 96),
              (std::remove_reference<char const (&)[6]>::type *)"state",
              (unsigned int *)(v3 + 112),
              (std::remove_reference<char const (&)[10]>::type *)"is_create",
              (bool *)(v3 + 32),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 128));
  std::string::~string((void *)(v3 + 192));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 128) )
  {
    v6 = 2012;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 48) )
      goto LABEL_12;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 48)) )
      v7 = 0;
    else
LABEL_12:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 192));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 192));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 128));
      group_bin_op = proto::OfflineMsgBin::mutable_group_bin_op(msg);
      proto::GroupBinOp::set_op_type(group_bin_op, GROUP_OP_SET_GADGET_STATE);
      proto::GroupBinOp::set_scene_id(group_bin_op, *(_DWORD *)(v3 + 64));
      proto::GroupBinOp::set_group_id(group_bin_op, *(_DWORD *)(v3 + 80));
      proto::GroupBinOp::set_config_id(group_bin_op, *(_DWORD *)(v3 + 96));
      proto::GroupBinOp::set_state(group_bin_op, *(_DWORD *)(v3 + 112));
      proto::GroupBinOp::set_is_create(group_bin_op, *(_BYTE *)(v3 + 32));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 48));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 192));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 192));
    }
  }
  std::string::~string((void *)(v3 + 128));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2239: range 000000000CBAB0EE-000000000CBAB2C6
int32_t __cdecl RequestHandler::removeGroupTriggerByName(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:2240";
  *(_QWORD *)(v4 + 16) = RequestHandler::removeGroupTriggerByName;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::removeGroupTriggerByName(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::removeGroupTriggerByName::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2240: range 000000000CBAAC8E-000000000CBAB0EC
int32_t __cdecl RequestHandler::removeGroupTriggerByName(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::removeGroupTriggerByName::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-165h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-164h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-160h]
  proto::GroupBinOp *group_bin_op; // [rsp+38h] [rbp-158h]
  char v14[336]; // [rsp+40h] [rbp-150h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(288LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 48 4 8 uid:2242 64 4 13 scene_id:2243 80 4 13 group_id:2244 96 32 17 trigger_name:2245 160 32 "
                        "11 ticket:2246 224 32 8 req:2261";
  *(_QWORD *)(v3 + 16) = RequestHandler::removeGroupTriggerByName(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862724] = -218959118;
  v5[536862726] = -218959118;
  v5[536862728] = -202116109;
  *(_DWORD *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 64) = 0;
  *(_DWORD *)(v3 + 80) = 0;
  std::string::basic_string(v3 + 96);
  std::string::basic_string(v3 + 160);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 224), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[9],unsigned int &,char const(&)[13],std::string &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 224),
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[9]>::type *)"scene_id",
              (unsigned int *)(v3 + 64),
              (std::remove_reference<char const (&)[9]>::type *)"group_id",
              (unsigned int *)(v3 + 80),
              (std::remove_reference<char const (&)[13]>::type *)"trigger_name",
              (std::string *)(v3 + 96),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 160));
  std::string::~string((void *)(v3 + 224));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 160) )
  {
    v6 = 2012;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 48) )
      goto LABEL_12;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 48)) )
      v7 = 0;
    else
LABEL_12:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 224));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 224));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 160));
      group_bin_op = proto::OfflineMsgBin::mutable_group_bin_op(msg);
      proto::GroupBinOp::set_op_type(group_bin_op, GORUP_OP_DEL_TRIGGER);
      proto::GroupBinOp::set_scene_id(group_bin_op, *(_DWORD *)(v3 + 64));
      proto::GroupBinOp::set_group_id(group_bin_op, *(_DWORD *)(v3 + 80));
      proto::GroupBinOp::set_trigger_name(group_bin_op, (const std::string *)(v3 + 96));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 48));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 224));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 224));
    }
  }
  std::string::~string((void *)(v3 + 160));
  std::string::~string((void *)(v3 + 96));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 2280: range 000000000CBAB758-000000000CBAB930
int32_t __cdecl RequestHandler::setGroupTriggerCountByName(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:2281";
  *(_QWORD *)(v4 + 16) = RequestHandler::setGroupTriggerCountByName;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::setGroupTriggerCountByName(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::setGroupTriggerCountByName::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2281: range 000000000CBAB2C8-000000000CBAB757
int32_t __cdecl RequestHandler::setGroupTriggerCountByName(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::setGroupTriggerCountByName::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-165h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-164h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-160h]
  proto::GroupBinOp *group_bin_op; // [rsp+38h] [rbp-158h]
  char v14[336]; // [rsp+40h] [rbp-150h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(288LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "7 32 4 8 uid:2283 48 4 13 scene_id:2284 64 4 13 group_id:2285 80 4 18 trigger_count:2287 96 32 1"
                        "7 trigger_name:2286 160 32 11 ticket:2288 224 32 8 req:2303";
  *(_QWORD *)(v3 + 16) = RequestHandler::setGroupTriggerCountByName(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -234556924;
  v5[536862724] = -218959118;
  v5[536862726] = -218959118;
  v5[536862728] = -202116109;
  *(_DWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 64) = 0;
  std::string::basic_string(v3 + 96);
  *(_DWORD *)(v3 + 80) = 0;
  std::string::basic_string(v3 + 160);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 224), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[9],unsigned int &,char const(&)[13],std::string &,char const(&)[14],unsigned int &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 224),
              (unsigned int *)(v3 + 32),
              (std::remove_reference<char const (&)[9]>::type *)"scene_id",
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[9]>::type *)"group_id",
              (unsigned int *)(v3 + 64),
              (std::remove_reference<char const (&)[13]>::type *)"trigger_name",
              (std::string *)(v3 + 96),
              (std::remove_reference<char const (&)[14]>::type *)"trigger_count",
              (unsigned int *)(v3 + 80),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 160));
  std::string::~string((void *)(v3 + 224));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 160) )
  {
    v6 = 2012;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 32) )
      goto LABEL_12;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 32)) )
      v7 = 0;
    else
LABEL_12:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 224));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 224));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 160));
      group_bin_op = proto::OfflineMsgBin::mutable_group_bin_op(msg);
      proto::GroupBinOp::set_op_type(group_bin_op, GROUP_OP_SET_TRIGGER_COUNT);
      proto::GroupBinOp::set_scene_id(group_bin_op, *(_DWORD *)(v3 + 48));
      proto::GroupBinOp::set_group_id(group_bin_op, *(_DWORD *)(v3 + 64));
      proto::GroupBinOp::set_trigger_name(group_bin_op, (const std::string *)(v3 + 96));
      proto::GroupBinOp::set_trigger_count(group_bin_op, *(_DWORD *)(v3 + 80));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 32));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 224));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 224));
    }
  }
  std::string::~string((void *)(v3 + 160));
  std::string::~string((void *)(v3 + 96));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 2323: range 000000000CBABDC2-000000000CBABF9A
int32_t __cdecl RequestHandler::setGroupVariableByName(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:2324";
  *(_QWORD *)(v4 + 16) = RequestHandler::setGroupVariableByName;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::setGroupVariableByName(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::setGroupVariableByName::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2324: range 000000000CBAB932-000000000CBABDC1
int32_t __cdecl RequestHandler::setGroupVariableByName(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::setGroupVariableByName::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-165h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-164h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-160h]
  proto::GroupBinOp *group_bin_op; // [rsp+38h] [rbp-158h]
  char v14[336]; // [rsp+40h] [rbp-150h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(288LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "7 32 4 8 uid:2326 48 4 13 scene_id:2327 64 4 13 group_id:2328 80 4 10 value:2330 96 32 18 variab"
                        "le_name:2329 160 32 11 ticket:2331 224 32 8 req:2346";
  *(_QWORD *)(v3 + 16) = RequestHandler::setGroupVariableByName(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -234556924;
  v5[536862724] = -218959118;
  v5[536862726] = -218959118;
  v5[536862728] = -202116109;
  *(_DWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 64) = 0;
  std::string::basic_string(v3 + 96);
  *(_DWORD *)(v3 + 80) = 0;
  std::string::basic_string(v3 + 160);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 224), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[9],unsigned int &,char const(&)[14],std::string &,char const(&)[6],int &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 224),
              (unsigned int *)(v3 + 32),
              (std::remove_reference<char const (&)[9]>::type *)"scene_id",
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[9]>::type *)"group_id",
              (unsigned int *)(v3 + 64),
              (std::remove_reference<char const (&)[14]>::type *)"variable_name",
              (std::string *)(v3 + 96),
              (std::remove_reference<char const (&)[6]>::type *)"value",
              (int *)(v3 + 80),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 160));
  std::string::~string((void *)(v3 + 224));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 160) )
  {
    v6 = 2012;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 32) )
      goto LABEL_12;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 32)) )
      v7 = 0;
    else
LABEL_12:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 224));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 224));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 160));
      group_bin_op = proto::OfflineMsgBin::mutable_group_bin_op(msg);
      proto::GroupBinOp::set_op_type(group_bin_op, GROUP_OP_SET_VARIABLE_VAL);
      proto::GroupBinOp::set_scene_id(group_bin_op, *(_DWORD *)(v3 + 48));
      proto::GroupBinOp::set_group_id(group_bin_op, *(_DWORD *)(v3 + 64));
      proto::GroupBinOp::set_variable_name(group_bin_op, (const std::string *)(v3 + 96));
      proto::GroupBinOp::set_variable_value(group_bin_op, *(_DWORD *)(v3 + 80));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 32));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 224));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 224));
    }
  }
  std::string::~string((void *)(v3 + 160));
  std::string::~string((void *)(v3 + 96));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 2366: range 000000000CBAC3C0-000000000CBAC598
int32_t __cdecl RequestHandler::setGroupTargetSuite(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:2367";
  *(_QWORD *)(v4 + 16) = RequestHandler::setGroupTargetSuite;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::setGroupTargetSuite(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::setGroupTargetSuite::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2367: range 000000000CBABF9C-000000000CBAC3BF
int32_t __cdecl RequestHandler::setGroupTargetSuite(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::setGroupTargetSuite::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-125h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-124h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-120h]
  proto::GroupBinOp *group_bin_op; // [rsp+38h] [rbp-118h]
  char v14[272]; // [rsp+40h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 32 4 8 uid:2369 48 4 13 scene_id:2370 64 4 13 group_id:2371 80 4 17 target_suite:2372 96 32 11"
                        " ticket:2373 160 32 8 req:2388";
  *(_QWORD *)(v3 + 16) = RequestHandler::setGroupTargetSuite(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -234556924;
  v5[536862724] = -218959118;
  v5[536862726] = -202116109;
  *(_DWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 64) = 0;
  *(_DWORD *)(v3 + 80) = 0;
  std::string::basic_string(v3 + 96);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 160), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[9],unsigned int &,char const(&)[13],unsigned int &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 160),
              (unsigned int *)(v3 + 32),
              (std::remove_reference<char const (&)[9]>::type *)"scene_id",
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[9]>::type *)"group_id",
              (unsigned int *)(v3 + 64),
              (std::remove_reference<char const (&)[13]>::type *)"target_suite",
              (unsigned int *)(v3 + 80),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 96));
  std::string::~string((void *)(v3 + 160));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 96) )
  {
    v6 = 2012;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 32) )
      goto LABEL_12;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 32)) )
      v7 = 0;
    else
LABEL_12:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 160));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 96));
      group_bin_op = proto::OfflineMsgBin::mutable_group_bin_op(msg);
      proto::GroupBinOp::set_op_type(group_bin_op, GROUP_OP_SET_TARGET_SUITE);
      proto::GroupBinOp::set_scene_id(group_bin_op, *(_DWORD *)(v3 + 48));
      proto::GroupBinOp::set_group_id(group_bin_op, *(_DWORD *)(v3 + 64));
      proto::GroupBinOp::set_target_suite(group_bin_op, *(_DWORD *)(v3 + 80));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 32));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 160));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
    }
  }
  std::string::~string((void *)(v3 + 96));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 2406: range 000000000CBAC98E-000000000CBACB66
int32_t __cdecl RequestHandler::operateSetGroupDead(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:2407";
  *(_QWORD *)(v4 + 16) = RequestHandler::operateSetGroupDead;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::operateSetGroupDead(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::operateSetGroupDead::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2407: range 000000000CBAC59A-000000000CBAC98C
int32_t __cdecl RequestHandler::operateSetGroupDead(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::operateSetGroupDead::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-125h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-124h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-120h]
  proto::GroupBinOp *group_bin_op; // [rsp+38h] [rbp-118h]
  char v14[272]; // [rsp+40h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 48 4 8 uid:2409 64 4 13 scene_id:2410 80 4 13 group_id:2411 96 32 11 ticket:2412 160 32 8 req:2427";
  *(_QWORD *)(v3 + 16) = RequestHandler::operateSetGroupDead(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862724] = -218959118;
  v5[536862726] = -202116109;
  *(_DWORD *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 64) = 0;
  *(_DWORD *)(v3 + 80) = 0;
  std::string::basic_string(v3 + 96);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 160), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[9],unsigned int &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 160),
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[9]>::type *)"scene_id",
              (unsigned int *)(v3 + 64),
              (std::remove_reference<char const (&)[9]>::type *)"group_id",
              (unsigned int *)(v3 + 80),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 96));
  std::string::~string((void *)(v3 + 160));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 96) )
  {
    v6 = 2012;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 48) )
      goto LABEL_12;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 48)) )
      v7 = 0;
    else
LABEL_12:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 160));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 96));
      group_bin_op = proto::OfflineMsgBin::mutable_group_bin_op(msg);
      proto::GroupBinOp::set_op_type(group_bin_op, GROUP_OP_SET_DEAD);
      proto::GroupBinOp::set_scene_id(group_bin_op, *(_DWORD *)(v3 + 64));
      proto::GroupBinOp::set_group_id(group_bin_op, *(_DWORD *)(v3 + 80));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 48));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 160));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
    }
  }
  std::string::~string((void *)(v3 + 96));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 2444: range 000000000CBACF5C-000000000CBAD134
int32_t __cdecl RequestHandler::operateSetGroupUnregister(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:2445";
  *(_QWORD *)(v4 + 16) = RequestHandler::operateSetGroupUnregister;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::operateSetGroupUnregister(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::operateSetGroupUnregister::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2445: range 000000000CBACB68-000000000CBACF5A
int32_t __cdecl RequestHandler::operateSetGroupUnregister(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::operateSetGroupUnregister::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-125h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-124h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-120h]
  proto::GroupBinOp *group_bin_op; // [rsp+38h] [rbp-118h]
  char v14[272]; // [rsp+40h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 48 4 8 uid:2447 64 4 13 scene_id:2448 80 4 13 group_id:2449 96 32 11 ticket:2450 160 32 8 req:2465";
  *(_QWORD *)(v3 + 16) = RequestHandler::operateSetGroupUnregister(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862724] = -218959118;
  v5[536862726] = -202116109;
  *(_DWORD *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 64) = 0;
  *(_DWORD *)(v3 + 80) = 0;
  std::string::basic_string(v3 + 96);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 160), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[9],unsigned int &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 160),
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[9]>::type *)"scene_id",
              (unsigned int *)(v3 + 64),
              (std::remove_reference<char const (&)[9]>::type *)"group_id",
              (unsigned int *)(v3 + 80),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 96));
  std::string::~string((void *)(v3 + 160));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 96) )
  {
    v6 = 2012;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 48) )
      goto LABEL_12;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 48)) )
      v7 = 0;
    else
LABEL_12:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 160));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 96));
      group_bin_op = proto::OfflineMsgBin::mutable_group_bin_op(msg);
      proto::GroupBinOp::set_op_type(group_bin_op, GROUP_OP_SET_UNREGISTER);
      proto::GroupBinOp::set_scene_id(group_bin_op, *(_DWORD *)(v3 + 64));
      proto::GroupBinOp::set_group_id(group_bin_op, *(_DWORD *)(v3 + 80));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 48));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 160));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
    }
  }
  std::string::~string((void *)(v3 + 96));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 2482: range 000000000CBAD4C0-000000000CBAD698
int32_t __cdecl RequestHandler::finishRoutine(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:2483";
  *(_QWORD *)(v4 + 16) = RequestHandler::finishRoutine;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::finishRoutine(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::finishRoutine::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2483: range 000000000CBAD136-000000000CBAD4BF
int32_t __cdecl RequestHandler::finishRoutine(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::finishRoutine::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-105h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-104h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-100h]
  proto::FinishRoutineOp *op; // [rsp+38h] [rbp-F8h]
  char v14[240]; // [rsp+40h] [rbp-F0h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 4 8 uid:2485 48 4 15 routine_id:2486 64 32 11 ticket:2487 128 32 8 req:2502";
  *(_QWORD *)(v3 + 16) = RequestHandler::finishRoutine(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862723] = -218959118;
  v5[536862725] = -202116109;
  *(_DWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  std::string::basic_string(v3 + 64);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 128), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[11],unsigned int &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 128),
              (unsigned int *)(v3 + 32),
              (std::remove_reference<char const (&)[11]>::type *)"routine_id",
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 64));
  std::string::~string((void *)(v3 + 128));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 64) )
  {
    v6 = 2012;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 32) )
      goto LABEL_12;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 32)) )
      v7 = 0;
    else
LABEL_12:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 128));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 128));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 64));
      op = proto::OfflineMsgBin::mutable_finish_routine_op(msg);
      proto::FinishRoutineOp::set_routine_id(op, *(_DWORD *)(v3 + 48));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 32));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 128));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 128));
    }
  }
  std::string::~string((void *)(v3 + 64));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2518: range 000000000CBADA3C-000000000CBADC14
int32_t __cdecl RequestHandler::finishDailyTaskUnloadGroup(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:2519";
  *(_QWORD *)(v4 + 16) = RequestHandler::finishDailyTaskUnloadGroup;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::finishDailyTaskUnloadGroup(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::finishDailyTaskUnloadGroup::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2519: range 000000000CBAD69A-000000000CBADA3B
int32_t __cdecl RequestHandler::finishDailyTaskUnloadGroup(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::finishDailyTaskUnloadGroup::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  google::protobuf::uint32 Now; // eax
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-105h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-104h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-100h]
  proto::FinishDailyTaskUnloadGroupOp *finish_daily_task_group_op; // [rsp+38h] [rbp-F8h]
  char v15[240]; // [rsp+40h] [rbp-F0h] BYREF

  v3 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 4 8 uid:2521 48 4 18 daily_task_id:2522 64 32 11 ticket:2523 128 32 8 req:2538";
  *(_QWORD *)(v3 + 16) = RequestHandler::finishDailyTaskUnloadGroup(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862723] = -218959118;
  v5[536862725] = -202116109;
  *(_DWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  std::string::basic_string(v3 + 64);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 128), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[14],unsigned int &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 128),
              (unsigned int *)(v3 + 32),
              (std::remove_reference<char const (&)[14]>::type *)"daily_task_id",
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 64));
  std::string::~string((void *)(v3 + 128));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 64) )
  {
    v6 = 2012;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 32) )
      goto LABEL_12;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 32)) )
      v7 = 0;
    else
LABEL_12:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 128));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 128));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 64));
      finish_daily_task_group_op = proto::OfflineMsgBin::mutable_finish_daily_task_group_op(msg);
      proto::FinishDailyTaskUnloadGroupOp::set_daily_task_id(finish_daily_task_group_op, *(_DWORD *)(v3 + 48));
      Now = common::tools::TimeUtils::getNow();
      proto::FinishDailyTaskUnloadGroupOp::set_daily_time(finish_daily_task_group_op, Now);
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 32));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 128));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 128));
    }
  }
  std::string::~string((void *)(v3 + 64));
  result = v6;
  if ( v15 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2555: range 000000000CBAE028-000000000CBAE200
int32_t __cdecl RequestHandler::setScenePointLockStatus(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:2556";
  *(_QWORD *)(v4 + 16) = RequestHandler::setScenePointLockStatus;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::setScenePointLockStatus(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::setScenePointLockStatus::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2556: range 000000000CBADC16-000000000CBAE026
int32_t __cdecl RequestHandler::setScenePointLockStatus(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::setScenePointLockStatus::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-125h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-124h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-120h]
  proto::SetScenePointLockStatusOp *set_scene_point_lock_status_op; // [rsp+38h] [rbp-118h]
  char v14[272]; // [rsp+40h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 32 1 14 is_locked:2561 48 4 8 uid:2558 64 4 13 scene_id:2559 80 4 13 point_id:2560 96 32 11 ti"
                        "cket:2562 160 32 8 req:2579";
  *(_QWORD *)(v3 + 16) = RequestHandler::setScenePointLockStatus(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556927;
  v5[536862722] = -234556924;
  v5[536862724] = -218959118;
  v5[536862726] = -202116109;
  *(_DWORD *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 64) = 0;
  *(_DWORD *)(v3 + 80) = 0;
  *(_BYTE *)(v3 + 32) = 0;
  std::string::basic_string(v3 + 96);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 160), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[9],unsigned int &,char const(&)[10],bool &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 160),
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[9]>::type *)"scene_id",
              (unsigned int *)(v3 + 64),
              (std::remove_reference<char const (&)[9]>::type *)"point_id",
              (unsigned int *)(v3 + 80),
              (std::remove_reference<char const (&)[10]>::type *)"is_locked",
              (bool *)(v3 + 32),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 96));
  std::string::~string((void *)(v3 + 160));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 96) )
  {
    v6 = 2012;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 48) )
      goto LABEL_12;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 48)) )
      v7 = 0;
    else
LABEL_12:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 160));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 96));
      set_scene_point_lock_status_op = proto::OfflineMsgBin::mutable_set_scene_point_lock_status_op(msg);
      proto::SetScenePointLockStatusOp::set_scene_id(set_scene_point_lock_status_op, *(_DWORD *)(v3 + 64));
      proto::SetScenePointLockStatusOp::set_point_id(set_scene_point_lock_status_op, *(_DWORD *)(v3 + 80));
      proto::SetScenePointLockStatusOp::set_is_locked(set_scene_point_lock_status_op, *(_BYTE *)(v3 + 32));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 48));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 160));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
    }
  }
  std::string::~string((void *)(v3 + 96));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 2596: range 000000000CBAE6AA-000000000CBAE916
int32_t __cdecl RequestHandler::gmTalk(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  _DWORD *v6; // r12
  int32_t v7; // r14d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+30h] [rbp-140h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+50h] [rbp-120h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+70h] [rbp-100h] BYREF
  char v14[208]; // [rsp+A0h] [rbp-D0h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(160LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "2 32 32 13 make_req:2598 96 32 13 make_rsp:2614";
  *(_QWORD *)(v4 + 16) = RequestHandler::gmTalk;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862722] = -218959118;
  v6[536862724] = -202116109;
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::gmTalk(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    (std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> *const)(v4 + 32),
    (RequestHandler::gmTalk::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)>)request);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<RequestHandler::gmTalk(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::Packet &,Json::Value &)#2},void,void>(
    (std::function<int(common::minet::Packet&,Json::Value&)> *const)(v4 + 96),
    (RequestHandler::gmTalk::<lambda(common::minet::Packet&, Json::Value&)>)request);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function(
    &p_make_rsp,
    (const std::function<int(common::minet::Packet&,Json::Value&)> *)(v4 + 96));
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function(
    &p_make_req,
    (const std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function((std::function<int(common::minet::Packet&,Json::Value&)> *const)(v4 + 96));
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function((std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> *const)(v4 + 32));
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_DWORD *)((v4 >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 2598: range 000000000CBAE202-000000000CBAE447
int32_t __cdecl RequestHandler::gmTalk(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::gmTalk::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r13
  std::string *v6; // r14
  const char (*v7)[4]; // r9
  int32_t v8; // r14d
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-D5h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-D4h]
  std::string key; // [rsp+30h] [rbp-D0h] BYREF
  char v14[176]; // [rsp+50h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 8 uid:2601 64 32 8 req:2600";
  *(_QWORD *)(v3 + 16) = RequestHandler::gmTalk(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862723] = -202116109;
  proto::GmTalkReq::GmTalkReq((proto::GmTalkReq *const)(v3 + 64));
  *(_DWORD *)(v3 + 48) = 0;
  v6 = proto::GmTalkReq::mutable_msg[abi:cxx11]((proto::GmTalkReq *const)(v3 + 64));
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&key, off_1A662A20, &__a);
  retcode = getRequestParam<std::string,char const(&)[4],unsigned int &>(
              http_request,
              &key,
              v6,
              (std::remove_reference<char const (&)[4]>::type *)off_1A660020,
              (unsigned int *)(v3 + 48),
              v7);
  std::string::~string(&key);
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v8 = retcode;
  }
  else
  {
    common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 48));
    common::minet::Packet::setTargetService(packet, 3u);
    common::minet::Packet::setProto<proto::GmTalkReq>(packet, (const proto::GmTalkReq *)(v3 + 64));
    v8 = 0;
  }
  proto::GmTalkReq::~GmTalkReq((proto::GmTalkReq *const)(v3 + 64));
  result = v8;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF800C) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2614: range 000000000CBAE448-000000000CBAE6A8
int32_t __cdecl RequestHandler::gmTalk(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::Packet &,Json::Value &)#2}::operator()(
        const RequestHandler::gmTalk::<lambda(common::minet::Packet&, Json::Value&)> *const __closure,
        common::minet::Packet *rsp_packet,
        Json::Value *jval)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t v6; // r14d
  const std::string *v7; // rax
  Json::Value_0 *v8; // rax
  const std::string *v9; // rax
  Json::Value_0 *v10; // rax
  int32_t result; // eax
  int32_t ret; // [rsp+2Ch] [rbp-E4h]
  Json::Value_0 other; // [rsp+30h] [rbp-E0h] BYREF
  char v15[176]; // [rsp+60h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 48 40 8 rsp:2616";
  *(_QWORD *)(v3 + 16) = RequestHandler::gmTalk(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::Packet &,Json::Value &)#2}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61937;
  v5[536862722] = -218103808;
  v5[536862723] = -202116109;
  proto::GmTalkRsp::GmTalkRsp((proto::GmTalkRsp *const)(v3 + 48));
  ret = common::minet::Packet::getProto<proto::GmTalkRsp>(rsp_packet, (proto::GmTalkRsp *)(v3 + 48));
  if ( ret )
  {
    v6 = ret;
  }
  else
  {
    v7 = proto::GmTalkRsp::msg[abi:cxx11]((const proto::GmTalkRsp *const)(v3 + 48));
    Json::Value::Value(&other, v7);
    v8 = Json::Value::operator[]((Json::Value_0 *const)jval, off_1A662A20);
    Json::Value::operator=(v8, &other);
    Json::Value::~Value(&other);
    v9 = proto::GmTalkRsp::retmsg[abi:cxx11]((const proto::GmTalkRsp *const)(v3 + 48));
    Json::Value::Value(&other, v9);
    v10 = Json::Value::operator[]((Json::Value_0 *const)jval, "retmsg");
    Json::Value::operator=(v10, &other);
    Json::Value::~Value(&other);
    v6 = proto::GmTalkRsp::retcode((const proto::GmTalkRsp *const)(v3 + 48));
  }
  proto::GmTalkRsp::~GmTalkRsp((proto::GmTalkRsp *const)(v3 + 48));
  result = v6;
  if ( v15 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2632: range 000000000CBAEFE0-000000000CBAF24C
int32_t __cdecl RequestHandler::queryCombatForce(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  _DWORD *v6; // r12
  int32_t v7; // r14d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+30h] [rbp-140h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+50h] [rbp-120h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+70h] [rbp-100h] BYREF
  char v14[208]; // [rsp+A0h] [rbp-D0h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(160LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "2 32 32 13 make_req:2634 96 32 13 make_rsp:2650";
  *(_QWORD *)(v4 + 16) = RequestHandler::queryCombatForce;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862722] = -218959118;
  v6[536862724] = -202116109;
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::queryCombatForce(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    (std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> *const)(v4 + 32),
    (RequestHandler::queryCombatForce::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)>)request);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<RequestHandler::queryCombatForce(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::Packet &,Json::Value &)#2},void,void>(
    (std::function<int(common::minet::Packet&,Json::Value&)> *const)(v4 + 96),
    (RequestHandler::queryCombatForce::<lambda(common::minet::Packet&, Json::Value&)>)request);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function(
    &p_make_rsp,
    (const std::function<int(common::minet::Packet&,Json::Value&)> *)(v4 + 96));
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function(
    &p_make_req,
    (const std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function((std::function<int(common::minet::Packet&,Json::Value&)> *const)(v4 + 96));
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function((std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> *const)(v4 + 32));
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_DWORD *)((v4 >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 2634: range 000000000CBAE918-000000000CBAEB4D
int32_t __cdecl RequestHandler::queryCombatForce(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::queryCombatForce::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t v6; // r14d
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-D5h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-D4h]
  std::string key; // [rsp+30h] [rbp-D0h] BYREF
  char v12[176]; // [rsp+50h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 8 uid:2637 64 24 8 req:2636";
  *(_QWORD *)(v3 + 16) = RequestHandler::queryCombatForce(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218103808;
  v5[536862723] = -202116109;
  proto::PlayerCombatForceReq::PlayerCombatForceReq((proto::PlayerCombatForceReq *const)(v3 + 64));
  *(_DWORD *)(v3 + 48) = 0;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&key, off_1A660020, &__a);
  retcode = getRequestParam<unsigned int>(http_request, &key, (unsigned int *)(v3 + 48));
  std::string::~string(&key);
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = -233;
  }
  else
  {
    common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 48));
    common::minet::Packet::setTargetService(packet, 3u);
    common::minet::Packet::setProto<proto::PlayerCombatForceReq>(packet, (const proto::PlayerCombatForceReq *)(v3 + 64));
    v6 = 0;
  }
  proto::PlayerCombatForceReq::~PlayerCombatForceReq((proto::PlayerCombatForceReq *const)(v3 + 64));
  result = v6;
  if ( v12 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2650: range 000000000CBAEB4E-000000000CBAEFDE
int32_t __cdecl RequestHandler::queryCombatForce(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::Packet &,Json::Value &)#2}::operator()(
        const RequestHandler::queryCombatForce::<lambda(common::minet::Packet&, Json::Value&)> *const __closure,
        common::minet::Packet *rsp_packet,
        Json::Value *jval)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  float v7; // xmm0_4
  Json::Value_0 *v8; // rax
  const google::protobuf::MapPair<unsigned int,float> *v9; // rax
  Json::Value_0 *v10; // rax
  Json::Value *v11; // rax
  int32_t result; // eax
  int32_t ret; // [rsp+2Ch] [rbp-1F4h]
  const google::protobuf::Map<unsigned int,float> *__for_range; // [rsp+30h] [rbp-1F0h]
  unsigned int avatar_id[2]; // [rsp+38h] [rbp-1E8h] BYREF
  google::protobuf::Map<unsigned int,float>::const_iterator __for_begin; // [rsp+40h] [rbp-1E0h] BYREF
  google::protobuf::Map<unsigned int,float>::const_iterator __for_end; // [rsp+60h] [rbp-1C0h] BYREF
  std::string key; // [rsp+80h] [rbp-1A0h] BYREF
  std::string v20; // [rsp+A0h] [rbp-180h] BYREF
  Json::Value_0 other; // [rsp+C0h] [rbp-160h] BYREF
  char v22[304]; // [rsp+F0h] [rbp-130h] BYREF

  v3 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(256LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 32 40 21 json_avatar_list:2661 112 104 8 rsp:2652";
  *(_QWORD *)(v3 + 16) = RequestHandler::queryCombatForce(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::Packet &,Json::Value &)#2}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862722] = -218959360;
  v5[536862723] = 62194;
  v5[536862726] = -218103808;
  v5[536862727] = -202116109;
  proto::PlayerCombatForceRsp::PlayerCombatForceRsp((proto::PlayerCombatForceRsp *const)(v3 + 112));
  ret = common::minet::Packet::getProto<proto::PlayerCombatForceRsp>(
          rsp_packet,
          (proto::PlayerCombatForceRsp *)(v3 + 112));
  if ( ret )
  {
    v6 = ret;
  }
  else
  {
    if ( !proto::PlayerCombatForceRsp::retcode((const proto::PlayerCombatForceRsp *const)(v3 + 112)) )
    {
      v7 = proto::PlayerCombatForceRsp::player_combat_force((const proto::PlayerCombatForceRsp *const)(v3 + 112));
      std::to_string(&v20, v7);
      Json::Value::Value(&other, &v20);
      v8 = Json::Value::operator[]((Json::Value_0 *const)jval, "player_combat_force");
      Json::Value::operator=(v8, &other);
      Json::Value::~Value(&other);
      std::string::~string(&v20);
      Json::Value::Value(v3 + 32, 0LL);
      __for_range = proto::PlayerCombatForceRsp::player_combat_force_map((const proto::PlayerCombatForceRsp *const)(v3 + 112));
      google::protobuf::Map<unsigned int,float>::begin(&__for_begin, __for_range);
      google::protobuf::Map<unsigned int,float>::end(&__for_end, __for_range);
      while ( google::protobuf::operator!=(&__for_begin, &__for_end) )
      {
        v9 = google::protobuf::Map<unsigned int,float>::const_iterator::operator*(&__for_begin);
        google::protobuf::MapPair<unsigned int,float>::MapPair(
          (google::protobuf::MapPair<unsigned int,float> *const)avatar_id,
          v9);
        std::to_string(&v20, *(float *)&avatar_id[1]);
        Json::Value::Value(&other, &v20);
        std::to_string(&key, avatar_id[0]);
        v10 = Json::Value::operator[]((Json::Value_0 *const)(v3 + 32), &key);
        Json::Value::operator=(v10, &other);
        std::string::~string(&key);
        Json::Value::~Value(&other);
        std::string::~string(&v20);
        google::protobuf::MapPair<unsigned int,float>::~MapPair((google::protobuf::MapPair<unsigned int,float> *const)avatar_id);
        google::protobuf::Map<unsigned int,float>::const_iterator::operator++(&__for_begin);
      }
      v11 = (Json::Value *)Json::Value::operator[]((Json::Value_0 *const)jval, "avatar_combat_force");
      Json::Value::operator=(v11);
      Json::Value::~Value((Json::Value_0 *const)(v3 + 32));
    }
    v6 = proto::PlayerCombatForceRsp::retcode((const proto::PlayerCombatForceRsp *const)(v3 + 112));
  }
  proto::PlayerCombatForceRsp::~PlayerCombatForceRsp((proto::PlayerCombatForceRsp *const)(v3 + 112));
  result = v6;
  if ( v22 == (char *)v3 )
  {
    *(_DWORD *)((v3 >> 3) + 0x7FFF8000) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2676: range 000000000CBB02A0-000000000CBB0676
int32_t __cdecl RequestHandler::checkVersions(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  int32_t v7; // r14d
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Fh] [rbp-191h] BYREF
  int32_t retcode; // [rsp+30h] [rbp-190h]
  RequestHandler::checkVersions::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> __f; // [rsp+34h] [rbp-18Ch]
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+40h] [rbp-180h] BYREF
  std::string key; // [rsp+60h] [rbp-160h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v17; // [rsp+80h] [rbp-140h] BYREF
  char v18[272]; // [rsp+B0h] [rbp-110h] BYREF
  RequestHandler::checkVersions::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> v19; // 0:rsi.8,8:edx.4

  v4 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(224LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "5 48 4 19 server_version:2677 64 4 19 client_version:2677 80 4 27 client_silence_version:2677 96"
                        " 32 13 make_req:2685 160 32 13 make_rsp:2722";
  *(_QWORD *)(v4 + 16) = RequestHandler::checkVersions;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -234556924;
  v6[536862724] = -218959118;
  v6[536862726] = -202116109;
  *(_DWORD *)(v4 + 48) = 0;
  *(_DWORD *)(v4 + 64) = 0;
  *(_DWORD *)(v4 + 80) = 0;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&key, "server_version", &__a);
  retcode = getRequestParam<unsigned int,char const(&)[15],unsigned int &,char const(&)[23],unsigned int &>(
              request,
              &key,
              (unsigned int *)(v4 + 48),
              (std::remove_reference<char const (&)[15]>::type *)"client_version",
              (unsigned int *)(v4 + 64),
              (std::remove_reference<char const (&)[23]>::type *)"client_silence_version",
              (unsigned int *)(v4 + 80));
  std::string::~string(&key);
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v7 = retcode;
  }
  else
  {
    __f.__server_version = *(_DWORD *)(v4 + 48);
    __f.__client_version = *(_DWORD *)(v4 + 64);
    __f.__client_silence_version = *(_DWORD *)(v4 + 80);
    v19 = __f;
    std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::checkVersions(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
      (std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> *const)(v4 + 96),
      __f);
    std::function<int ()(common::minet::Packet &,Json::Value &)>::function<RequestHandler::checkVersions(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::Packet &,Json::Value &)#2},void,void>(
      (std::function<int(common::minet::Packet&,Json::Value&)> *const)(v4 + 160),
      (RequestHandler::checkVersions::<lambda(common::minet::Packet&, Json::Value&)>)v19.__server_version);
    boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
      &v17,
      p_yield);
    std::function<int ()(common::minet::Packet &,Json::Value &)>::function(
      (std::function<int(common::minet::Packet&,Json::Value&)> *const)&key,
      (const std::function<int(common::minet::Packet&,Json::Value&)> *)(v4 + 160));
    std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function(
      &p_make_req,
      (const std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> *)(v4 + 96));
    v7 = RequestHandler::processRequestOnOtherServer(
           this,
           &p_make_req,
           (RequestHandler::MakeRspFunc *)&key,
           request,
           jval,
           &v17);
    std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
    std::function<int ()(common::minet::Packet &,Json::Value &)>::~function((std::function<int(common::minet::Packet&,Json::Value&)> *const)&key);
    boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v17);
    std::function<int ()(common::minet::Packet &,Json::Value &)>::~function((std::function<int(common::minet::Packet&,Json::Value&)> *const)(v4 + 160));
    std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function((std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> *const)(v4 + 96));
  }
  result = v7;
  if ( v18 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 2685: range 000000000CBAF530-000000000CBAF8DF
int32_t __cdecl RequestHandler::checkVersions(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::checkVersions::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // rbx
  google::protobuf::Map<unsigned int,unsigned int> *v6; // rax
  google::protobuf::Map<unsigned int,unsigned int> *res_version_map; // r14
  int32_t result; // eax
  proto::PlatformType platform; // [rsp+24h] [rbp-19Ch]
  const std::string *platform_name; // [rsp+28h] [rbp-198h]
  std::string param_name; // [rsp+30h] [rbp-190h] BYREF
  char v13[368]; // [rsp+50h] [rbp-170h] BYREF

  v3 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(320LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 8 20 get_res_version:2691 80 176 8 req:2687";
  *(_QWORD *)(v3 + 16) = RequestHandler::checkVersions(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61937;
  v5[536862721] = -234881024;
  v5[536862722] = 62194;
  v5[536862728] = -202116109;
  v5[536862729] = -202116109;
  proto::CheckGameVersionReq::CheckGameVersionReq((proto::CheckGameVersionReq *const)(v3 + 80));
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)__closure & 7) + 3) >= *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(__closure);
  }
  proto::CheckGameVersionReq::set_server_version(
    (proto::CheckGameVersionReq *const)(v3 + 80),
    __closure->__server_version);
  if ( *(_BYTE *)(((unsigned __int64)&__closure->__client_version >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)__closure + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&__closure->__client_version >> 3)
                                                            + 0x7FFF8000) )
  {
    __asan_report_load4(&__closure->__client_version);
  }
  proto::CheckGameVersionReq::set_client_version(
    (proto::CheckGameVersionReq *const)(v3 + 80),
    __closure->__client_version);
  if ( *(_BYTE *)(((unsigned __int64)&__closure->__client_silence_version >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)__closure + 8) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&__closure->__client_silence_version >> 3)
                                                            + 0x7FFF8000) )
  {
    __asan_report_load4(&__closure->__client_silence_version);
  }
  proto::CheckGameVersionReq::set_client_silence_version(
    (proto::CheckGameVersionReq *const)(v3 + 80),
    __closure->__client_silence_version);
  *(_QWORD *)(v3 + 48) = http_request;
  for ( platform = EDITOR; (unsigned int)platform <= CLOUD_THIRD_PARTY_PC; ++platform )
  {
    platform_name = proto::PlatformType_Name[abi:cxx11](platform);
    v6 = proto::CheckGameVersionReq::mutable_res_version_map((proto::CheckGameVersionReq *const)(v3 + 80));
    RequestHandler::checkVersions(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator() const(common::minet::http_client::HttpRequest const&,common::minet::Packet &)::{lambda(unsigned int,std::string const&,google::protobuf::Map<unsigned int,unsigned int> &)#1}::operator()(
      (const RequestHandler::checkVersions::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)>::operator()::<lambda(uint32_t, const string&, google::protobuf::Map<unsigned int, unsigned int>&)> *const)(v3 + 48),
      platform,
      platform_name,
      v6);
    res_version_map = proto::CheckGameVersionReq::mutable_next_res_version_map((proto::CheckGameVersionReq *const)(v3 + 80));
    std::operator+<char>(&param_name, platform_name, "_next");
    RequestHandler::checkVersions(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator() const(common::minet::http_client::HttpRequest const&,common::minet::Packet &)::{lambda(unsigned int,std::string const&,google::protobuf::Map<unsigned int,unsigned int> &)#1}::operator()(
      (const RequestHandler::checkVersions::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)>::operator()::<lambda(uint32_t, const string&, google::protobuf::Map<unsigned int, unsigned int>&)> *const)(v3 + 48),
      platform,
      &param_name,
      res_version_map);
    std::string::~string(&param_name);
  }
  common::minet::Packet::setTargetService(packet, 4u);
  common::minet::Packet::setProto<proto::CheckGameVersionReq>(packet, (const proto::CheckGameVersionReq *)(v3 + 80));
  proto::CheckGameVersionReq::~CheckGameVersionReq((proto::CheckGameVersionReq *const)(v3 + 80));
  result = 0;
  if ( v13 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2691: range 000000000CBAF24E-000000000CBAF52E
void __fastcall RequestHandler::checkVersions(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator() const(common::minet::http_client::HttpRequest const&,common::minet::Packet &)::{lambda(unsigned int,std::string const&,google::protobuf::Map<unsigned int,unsigned int> &)#1}::operator()(
        unsigned __int64 __closure,
        uint32_t platform,
        const std::string *param_name,
        google::protobuf::Map<unsigned int,unsigned int> *res_version_map)
{
  unsigned __int64 v4; // r12
  __int64 v5; // rax
  _DWORD *v6; // r13
  std::_Rb_tree_const_iterator<std::pair<const std::string,std::string > >::pointer v7; // rax
  common::milog::MiLogStream *v8; // r14
  std::_Rb_tree_const_iterator<std::pair<const std::string,std::string > >::pointer v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  int v12; // r14d
  char *v13; // rsi
  unsigned int *v14; // rax
  _DWORD *v15; // rdx
  char v16; // cl
  std::_Rb_tree_const_iterator<std::pair<const std::string,std::string > >::_Self __y; // [rsp+28h] [rbp-B8h] BYREF
  common::milog::MiLogStream v20; // [rsp+30h] [rbp-B0h] BYREF
  char v21[144]; // [rsp+50h] [rbp-90h] BYREF

  v4 = (unsigned __int64)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(96LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 32 4 16 res_version:2698 48 4 13 platform:2691 64 8 9 iter:2693";
  *(_QWORD *)(v4 + 16) = RequestHandler::checkVersions(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator() const(common::minet::http_client::HttpRequest const&,common::minet::Packet &)::{lambda(unsigned int,std::string const&,google::protobuf::Map<unsigned int,unsigned int> &)#1}::operator();
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862722] = -202116352;
  *(_DWORD *)(v4 + 48) = platform;
  if ( *(_BYTE *)((__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8(__closure);
  *(std::map<std::string,std::string>::const_iterator *)(v4 + 64) = std::map<std::string,std::string>::find(
                                                                      (const std::map<std::string,std::string> *const)(*(_QWORD *)__closure + 144LL),
                                                                      param_name);
  __y._M_node = std::map<std::string,std::string>::end((const std::map<std::string,std::string> *const)(*(_QWORD *)__closure + 144LL))._M_node;
  if ( !std::operator==(
          (const std::_Rb_tree_const_iterator<std::pair<const std::string,std::string > >::_Self *)(v4 + 64),
          &__y) )
  {
    *(_DWORD *)(v4 + 32) = 0;
    v7 = std::_Rb_tree_const_iterator<std::pair<std::string const,std::string>>::operator->((const std::_Rb_tree_const_iterator<std::pair<const std::string,std::string > > *const)(v4 + 64));
    if ( common::tools::StringUtils::strToNum<unsigned int>(&v7->second, (unsigned int *)(v4 + 32), 1) )
    {
      common::milog::MiLogStream::create(
        &v20,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "operator()",
        2701);
      v8 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(&v20, (const char (*)[16])"strToNum fails:");
      v9 = std::_Rb_tree_const_iterator<std::pair<std::string const,std::string>>::operator->((const std::_Rb_tree_const_iterator<std::pair<const std::string,std::string > > *const)(v4 + 64));
      v10 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, &v9->second);
      v11 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v10, (const char (*)[13])" param_name:");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v11, param_name);
      common::milog::MiLogStream::~MiLogStream(&v20);
    }
    else if ( *(_DWORD *)(v4 + 32) )
    {
      v12 = *(_DWORD *)(v4 + 32);
      v13 = (char *)(v4 + 48);
      v14 = google::protobuf::Map<unsigned int,unsigned int>::operator[](
              res_version_map,
              (const google::protobuf::Map<unsigned int,unsigned int>::key_type *)(v4 + 48));
      v15 = v14;
      v16 = *(_BYTE *)(((unsigned __int64)v14 >> 3) + 0x7FFF8000);
      if ( v16 != 0 && (char)(((unsigned __int8)v14 & 7) + 3) >= v16 )
      {
        LOBYTE(v13) = v16 != 0;
        __asan_report_store4(v14, v13);
      }
      *v15 = v12;
    }
  }
  if ( v21 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 2722: range 000000000CBAFB06-000000000CBB029F
int32_t __cdecl RequestHandler::checkVersions(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::Packet &,Json::Value &)#2}::operator()(
        const RequestHandler::checkVersions::<lambda(common::minet::Packet&, Json::Value&)> *const __closure,
        common::minet::Packet *rsp_packet,
        Json::Value *jval)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  const std::string *v8; // rax
  Json::Value_0 *v9; // rax
  unsigned int v10; // eax
  Json::Value_0 *v11; // rax
  const proto::GameVersionResult *v12; // rax
  Json::Value *v13; // r14
  const proto::GameVersionResult *v14; // rax
  const proto::GameVersionResult *v15; // rax
  Json::Value *v16; // r14
  const proto::GameVersionResult *v17; // rax
  const proto::GameVersionResult *v18; // rax
  Json::Value *v19; // r14
  const proto::GameVersionResult *v20; // rax
  Json::Value *v21; // rax
  Json::Value *v22; // rax
  int32_t result; // eax
  int32_t ret; // [rsp+2Ch] [rbp-284h]
  const google::protobuf::Map<unsigned int,proto::GameVersionResult> *__for_range; // [rsp+38h] [rbp-278h]
  const google::protobuf::Map<unsigned int,proto::GameVersionResult> *__for_range_0; // [rsp+48h] [rbp-268h]
  google::protobuf::Map<unsigned int,proto::GameVersionResult>::const_reference p_platform_0; // [rsp+50h] [rbp-260h]
  const std::string *platform_name_0; // [rsp+58h] [rbp-258h]
  google::protobuf::Map<unsigned int,proto::GameVersionResult>::const_reference p_platform; // [rsp+60h] [rbp-250h]
  const Json::String *platform_name; // [rsp+68h] [rbp-248h]
  std::shared_ptr<Config> v32; // [rsp+70h] [rbp-240h] BYREF
  google::protobuf::Map<unsigned int,proto::GameVersionResult>::const_iterator __for_begin; // [rsp+80h] [rbp-230h] BYREF
  google::protobuf::Map<unsigned int,proto::GameVersionResult>::const_iterator __for_end; // [rsp+A0h] [rbp-210h] BYREF
  std::string key; // [rsp+C0h] [rbp-1F0h] BYREF
  char v36[464]; // [rsp+E0h] [rbp-1D0h] BYREF

  v3 = (unsigned __int64)v36;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(416LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 1 15 parse_func:2735 64 40 11 result:2773 144 200 8 rsp:2724";
  *(_QWORD *)(v3 + 16) = RequestHandler::checkVersions(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::Packet &,Json::Value &)#2}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753551;
  v5[536862723] = -218959360;
  v5[536862724] = 62194;
  v5[536862730] = -218103808;
  v5[536862731] = -202116109;
  v5[536862732] = -202116109;
  proto::CheckGameVersionRsp::CheckGameVersionRsp((proto::CheckGameVersionRsp *const)(v3 + 144));
  ret = common::minet::Packet::getProto<proto::CheckGameVersionRsp>(
          rsp_packet,
          (proto::CheckGameVersionRsp *)(v3 + 144));
  if ( ret )
  {
    v6 = ret;
  }
  else if ( proto::CheckGameVersionRsp::retcode((const proto::CheckGameVersionRsp *const)(v3 + 144)) )
  {
    v6 = proto::CheckGameVersionRsp::retcode((const proto::CheckGameVersionRsp *const)(v3 + 144));
  }
  else
  {
    ServiceBox::findService<MuipserverService>();
    MuipserverService::getConfig((MuipserverService *const)&v32);
    v7 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v32);
    v8 = ConfigBase::getRegionName[abi:cxx11](v7);
    Json::Value::Value(v3 + 64, v8);
    v9 = Json::Value::operator[]((Json::Value_0 *const)jval, "region");
    Json::Value::operator=(v9, (Json::Value_0 *)(v3 + 64));
    Json::Value::~Value((Json::Value_0 *const)(v3 + 64));
    std::shared_ptr<Config>::~shared_ptr(&v32);
    v10 = proto::CheckGameVersionRsp::total_game((const proto::CheckGameVersionRsp *const)(v3 + 144));
    Json::Value::Value((Json::Value *)(v3 + 64), v10);
    v11 = Json::Value::operator[]((Json::Value_0 *const)jval, "total_gameserver");
    Json::Value::operator=(v11, (Json::Value_0 *)(v3 + 64));
    Json::Value::~Value((Json::Value_0 *const)(v3 + 64));
    v12 = proto::CheckGameVersionRsp::server_version_result((const proto::CheckGameVersionRsp *const)(v3 + 144));
    if ( proto::GameVersionResult::version(v12) )
    {
      v13 = (Json::Value *)Json::Value::operator[]((Json::Value_0 *const)jval, "server_version");
      v14 = proto::CheckGameVersionRsp::server_version_result((const proto::CheckGameVersionRsp *const)(v3 + 144));
      RequestHandler::checkVersions(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::Packet &,Json::Value &)#2}::operator() const(common::minet::Packet &,Json::Value &)::{lambda(proto::GameVersionResult const&,Json::Value &)#1}::operator()(
        (const RequestHandler::checkVersions::<lambda(common::minet::Packet&, Json::Value&)>::operator()::<lambda(const proto::GameVersionResult&, Json::Value&)> *const)(v3 + 48),
        v14,
        v13);
    }
    v15 = proto::CheckGameVersionRsp::client_version_result((const proto::CheckGameVersionRsp *const)(v3 + 144));
    if ( proto::GameVersionResult::version(v15) )
    {
      v16 = (Json::Value *)Json::Value::operator[]((Json::Value_0 *const)jval, "client_version");
      v17 = proto::CheckGameVersionRsp::client_version_result((const proto::CheckGameVersionRsp *const)(v3 + 144));
      RequestHandler::checkVersions(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::Packet &,Json::Value &)#2}::operator() const(common::minet::Packet &,Json::Value &)::{lambda(proto::GameVersionResult const&,Json::Value &)#1}::operator()(
        (const RequestHandler::checkVersions::<lambda(common::minet::Packet&, Json::Value&)>::operator()::<lambda(const proto::GameVersionResult&, Json::Value&)> *const)(v3 + 48),
        v17,
        v16);
    }
    v18 = proto::CheckGameVersionRsp::client_silence_version_result((const proto::CheckGameVersionRsp *const)(v3 + 144));
    if ( proto::GameVersionResult::version(v18) )
    {
      v19 = (Json::Value *)Json::Value::operator[]((Json::Value_0 *const)jval, "client_silence_version");
      v20 = proto::CheckGameVersionRsp::client_silence_version_result((const proto::CheckGameVersionRsp *const)(v3 + 144));
      RequestHandler::checkVersions(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::Packet &,Json::Value &)#2}::operator() const(common::minet::Packet &,Json::Value &)::{lambda(proto::GameVersionResult const&,Json::Value &)#1}::operator()(
        (const RequestHandler::checkVersions::<lambda(common::minet::Packet&, Json::Value&)>::operator()::<lambda(const proto::GameVersionResult&, Json::Value&)> *const)(v3 + 48),
        v20,
        v19);
    }
    __for_range = proto::CheckGameVersionRsp::res_version_result_map((const proto::CheckGameVersionRsp *const)(v3 + 144));
    google::protobuf::Map<unsigned int,proto::GameVersionResult>::begin(&__for_begin, __for_range);
    google::protobuf::Map<unsigned int,proto::GameVersionResult>::end(&__for_end, __for_range);
    while ( google::protobuf::operator!=(&__for_begin, &__for_end) )
    {
      p_platform = google::protobuf::Map<unsigned int,proto::GameVersionResult>::const_iterator::operator*(&__for_begin);
      if ( *(_BYTE *)(((unsigned __int64)p_platform >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)p_platform >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(p_platform);
      }
      platform_name = proto::PlatformType_Name[abi:cxx11]((proto::PlatformType)p_platform->first);
      Json::Value::Value(v3 + 64, 0LL);
      RequestHandler::checkVersions(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::Packet &,Json::Value &)#2}::operator() const(common::minet::Packet &,Json::Value &)::{lambda(proto::GameVersionResult const&,Json::Value &)#1}::operator()(
        (const RequestHandler::checkVersions::<lambda(common::minet::Packet&, Json::Value&)>::operator()::<lambda(const proto::GameVersionResult&, Json::Value&)> *const)(v3 + 48),
        &p_platform->second,
        (Json::Value *)(v3 + 64));
      v21 = (Json::Value *)Json::Value::operator[]((Json::Value_0 *const)jval, platform_name);
      Json::Value::operator=(v21);
      Json::Value::~Value((Json::Value_0 *const)(v3 + 64));
      google::protobuf::Map<unsigned int,proto::GameVersionResult>::const_iterator::operator++(&__for_begin);
    }
    __for_range_0 = proto::CheckGameVersionRsp::next_res_version_result_map((const proto::CheckGameVersionRsp *const)(v3 + 144));
    google::protobuf::Map<unsigned int,proto::GameVersionResult>::begin(&__for_begin, __for_range_0);
    google::protobuf::Map<unsigned int,proto::GameVersionResult>::end(&__for_end, __for_range_0);
    while ( google::protobuf::operator!=(&__for_begin, &__for_end) )
    {
      p_platform_0 = google::protobuf::Map<unsigned int,proto::GameVersionResult>::const_iterator::operator*(&__for_begin);
      if ( *(_BYTE *)(((unsigned __int64)p_platform_0 >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)p_platform_0 >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(p_platform_0);
      }
      platform_name_0 = proto::PlatformType_Name[abi:cxx11]((proto::PlatformType)p_platform_0->first);
      Json::Value::Value(v3 + 64, 0LL);
      RequestHandler::checkVersions(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::Packet &,Json::Value &)#2}::operator() const(common::minet::Packet &,Json::Value &)::{lambda(proto::GameVersionResult const&,Json::Value &)#1}::operator()(
        (const RequestHandler::checkVersions::<lambda(common::minet::Packet&, Json::Value&)>::operator()::<lambda(const proto::GameVersionResult&, Json::Value&)> *const)(v3 + 48),
        &p_platform_0->second,
        (Json::Value *)(v3 + 64));
      std::operator+<char>(&key, platform_name_0, "_next");
      v22 = (Json::Value *)Json::Value::operator[]((Json::Value_0 *const)jval, &key);
      Json::Value::operator=(v22);
      std::string::~string(&key);
      Json::Value::~Value((Json::Value_0 *const)(v3 + 64));
      google::protobuf::Map<unsigned int,proto::GameVersionResult>::const_iterator::operator++(&__for_begin);
    }
    v6 = 0;
  }
  proto::CheckGameVersionRsp::~CheckGameVersionRsp((proto::CheckGameVersionRsp *const)(v3 + 144));
  result = v6;
  if ( v36 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF800C) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8030) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8030) = -168430091;
  }
  return result;
};

// Line 2735: range 000000000CBAF8E0-000000000CBAFB05
void __cdecl RequestHandler::checkVersions(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::Packet &,Json::Value &)#2}::operator() const(common::minet::Packet &,Json::Value &)::{lambda(proto::GameVersionResult const&,Json::Value &)#1}::operator()(
        const RequestHandler::checkVersions::<lambda(common::minet::Packet&, Json::Value&)>::operator()::<lambda(const proto::GameVersionResult&, Json::Value&)> *const __closure,
        const proto::GameVersionResult *proto,
        Json::Value *result)
{
  unsigned int v3; // eax
  Json::Value_0 *v4; // rax
  unsigned int v5; // eax
  Json::Value_0 *v6; // rax
  Json::Value_0 *v7; // rbx
  int v8; // [rsp+0h] [rbp-A0h]
  Json::Value *resulta; // [rsp+8h] [rbp-98h]
  unsigned int app_id; // [rsp+24h] [rbp-7Ch]
  unsigned int *__for_begin; // [rsp+28h] [rbp-78h]
  const google::protobuf::RepeatedField<unsigned int> *__for_range; // [rsp+30h] [rbp-70h]
  google::protobuf::RepeatedField<unsigned int>::const_iterator __for_end; // [rsp+38h] [rbp-68h]
  std::string v14; // [rsp+40h] [rbp-60h] BYREF
  Json::Value_0 other; // [rsp+60h] [rbp-40h] BYREF

  resulta = result;
  v3 = proto::GameVersionResult::version(proto);
  Json::Value::Value((Json::Value *)&other, v3);
  v4 = Json::Value::operator[]((Json::Value_0 *const)resulta, "version");
  Json::Value::operator=(v4, &other);
  Json::Value::~Value(&other);
  v5 = proto::GameVersionResult::wrong_num(proto);
  Json::Value::Value((Json::Value *)&other, v5);
  v6 = Json::Value::operator[]((Json::Value_0 *const)resulta, "wrong");
  Json::Value::operator=(v6, &other);
  Json::Value::~Value(&other);
  __for_range = proto::GameVersionResult::wrong_name_list(proto);
  __for_begin = (unsigned int *)google::protobuf::RepeatedField<unsigned int>::begin(__for_range);
  __for_end = google::protobuf::RepeatedField<unsigned int>::end(__for_range);
  while ( __for_begin != __for_end )
  {
    if ( *(_BYTE *)(((unsigned __int64)__for_begin >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)__for_begin & 7) + 3) >= *(_BYTE *)(((unsigned __int64)__for_begin >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(__for_begin);
    }
    app_id = *__for_begin;
    v7 = Json::Value::operator[]((Json::Value_0 *const)resulta, "wrong_name");
    common::tools::AppIdUtils::getAppIdStr[abi:cxx11](&v14, app_id);
    Json::Value::Value(&other, &v14);
    Json::Value::append(v7, &other, v8, (char)resulta);
    Json::Value::~Value(&other);
    std::string::~string(&v14);
    ++__for_begin;
  }
};

// Line 2784: range 000000000CBB0678-000000000CBB0C94
// local variable allocation has failed, the output may be wrong!
int32_t __cdecl RequestHandler::queryPlayerBriefData(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  int32_t v7; // r14d
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  Json::Value *v10; // rax
  int32_t result; // eax
  int p_yielda; // [rsp+0h] [rbp-360h]
  Json::Value *jvalb; // [rsp+8h] [rbp-358h]
  int v15; // [rsp+20h] [rbp-340h]
  void *v16; // [rsp+28h] [rbp-338h] OVERLAPPED BYREF
  std::string key; // [rsp+30h] [rbp-330h] BYREF
  char v18[784]; // [rsp+50h] [rbp-310h] BYREF

  p_yielda = (int)p_yield;
  v4 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_4(736LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "8 32 1 13 is_exist:2793 48 4 8 uid:2785 64 4 12 options:2800 80 32 16 json_string:2799 144 40 15"
                        " status_ret:2804 224 40 15 json_value:2812 304 56 15 brief_data:2792 400 272 16 json_reader:2811";
  *(_QWORD *)(v4 + 16) = RequestHandler::queryPlayerBriefData;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556927;
  v6[536862722] = 61956;
  v6[536862723] = -219021312;
  v6[536862724] = 62194;
  v6[536862725] = -234881024;
  v6[536862726] = -218959118;
  v6[536862728] = -218959360;
  v6[536862729] = 62194;
  v6[536862731] = -218959360;
  v6[536862732] = 62194;
  v6[536862741] = -202116109;
  v6[536862742] = -202116109;
  *(_DWORD *)(v4 + 48) = 0;
  std::allocator<char>::allocator((char *)&v16 + 3);
  std::string::basic_string<std::allocator<char>>(&key, off_1A660020, (const std::allocator<char> *)&v16 + 3);
  HIDWORD(v16) = getRequestParam<unsigned int>(request, &key, (unsigned int *)(v4 + 48));
  std::string::~string(&key);
  std::allocator<char>::~allocator((char *)&v16 + 3);
  if ( HIDWORD(v16) )
  {
    v7 = HIDWORD(v16);
  }
  else
  {
    proto::PlayerBriefDataRedisData::PlayerBriefDataRedisData((proto::PlayerBriefDataRedisData *const)(v4 + 304));
    if ( RedisOpSocialData::getPlayerBriefData(
           *(_DWORD *)(v4 + 48),
           (proto::PlayerBriefDataRedisData *)(v4 + 304),
           (bool *)(v4 + 32)) )
    {
      v7 = -1;
    }
    else
    {
      std::allocator<char>::allocator((char *)&v16 + 3);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v4 + 80),
        byte_1A5D1560,
        (const std::allocator<char> *)&v16 + 3);
      std::allocator<char>::~allocator((char *)&v16 + 3);
      google::protobuf::util::JsonPrintOptions::JsonPrintOptions((google::protobuf::util::JsonPrintOptions *const)(v4 + 64));
      *(_BYTE *)(v4 + 64) = 1;
      *(_BYTE *)(v4 + 65) = 1;
      *(_BYTE *)(v4 + 67) = 1;
      google::protobuf::util::MessageToJsonString(
        (google::protobuf::util::Status *)(v4 + 144),
        (google::protobuf::Message *)(v4 + 304),
        p_yielda,
        jval,
        (int)request,
        (char)this,
        v15,
        v16);
      if ( !google::protobuf::util::Status::ok((const google::protobuf::util::Status *const)(v4 + 144)) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&key,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/handler/request_handler.api.hpp",
          "queryPlayerBriefData",
          2807);
        v8 = common::milog::MiLogStream::operator<<<char [60],(char *[60])0>(
               (common::milog::MiLogStream *const)&key,
               (const char (*)[60])"PlayerBriefDataRedisData to json_string failed player_uid: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v4 + 48));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
        v7 = -1;
      }
      else
      {
        Json::Reader::Reader((Json::Reader *)(v4 + 400));
        Json::Value::Value(v4 + 224, 0LL);
        if ( !Json::Reader::parse(
                (Json::Reader *const)(v4 + 400),
                (const std::string *)(v4 + 80),
                (Json::Value *)(v4 + 224),
                1) )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&key,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/handler/request_handler.api.hpp",
            "queryPlayerBriefData",
            2815);
          v9 = common::milog::MiLogStream::operator<<<char [71],(char *[71])0>(
                 (common::milog::MiLogStream *const)&key,
                 (const char (*)[71])"PlayerBriefDataRedisData json_string to json_value failed player_uid: ");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v4 + 48));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
          v7 = -1;
        }
        else
        {
          v10 = (Json::Value *)Json::Value::operator[]((Json::Value_0 *const)jvalb, "data");
          Json::Value::operator=(v10);
          v7 = 0;
        }
        Json::Value::~Value((Json::Value_0 *const)(v4 + 224));
        Json::Reader::~Reader((Json::Reader *const)(v4 + 400));
      }
      google::protobuf::util::Status::~Status((google::protobuf::util::Status *const)(v4 + 144));
      std::string::~string((void *)(v4 + 80));
    }
    proto::PlayerBriefDataRedisData::~PlayerBriefDataRedisData((proto::PlayerBriefDataRedisData *const)(v4 + 304));
  }
  result = v7;
  if ( v18 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF802C) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8054) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8058) = -168430091;
  }
  return result;
};

// Line 2824: range 000000000CBB0C96-000000000CBB11DF
int32_t __cdecl RequestHandler::queryRegions(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r12
  __int64 v5; // rax
  _DWORD *v6; // r13
  Json::Value_0 *v7; // rax
  Json::Value_0 *v8; // rax
  Json::Value_0 *v9; // rax
  Json::Value_0 *v10; // rax
  Json::Value_0 *v11; // rax
  Json::Value_0 *v12; // rax
  Json::Value *v13; // rax
  int32_t result; // eax
  std::map<std::string,data::DbRegionConfig>::const_iterator __for_begin; // [rsp+20h] [rbp-110h] BYREF
  std::map<std::string,data::DbRegionConfig>::const_iterator __for_end; // [rsp+28h] [rbp-108h] BYREF
  const std::map<std::string,data::DbRegionConfig> *__for_range; // [rsp+30h] [rbp-100h]
  const std::pair<const std::string,data::DbRegionConfig> *v19; // [rsp+38h] [rbp-F8h]
  std::tuple_element<0,const std::pair<const std::string,data::DbRegionConfig> >::type *region; // [rsp+40h] [rbp-F0h]
  std::tuple_element<1,const std::pair<const std::string,data::DbRegionConfig> >::type *config; // [rsp+48h] [rbp-E8h]
  std::shared_ptr<Config> v22; // [rsp+50h] [rbp-E0h] BYREF
  Json::Value_0 other; // [rsp+60h] [rbp-D0h] BYREF
  char v24[160]; // [rsp+90h] [rbp-A0h] BYREF

  v4 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(128LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 48 40 14 json_node:2827";
  *(_QWORD *)(v4 + 16) = RequestHandler::queryRegions;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = 61937;
  v6[536862722] = -218103808;
  v6[536862723] = -202116109;
  ServiceBox::findService<MuipserverService>();
  MuipserverService::getConfig((MuipserverService *const)&v22);
  __for_range = &std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v22)->design_config.db_config_mgr.db_deploy_config_mgr.db_region_config_map;
  std::shared_ptr<Config>::~shared_ptr(&v22);
  __for_begin._M_node = std::map<std::string,data::DbRegionConfig>::begin(__for_range)._M_node;
  __for_end._M_node = std::map<std::string,data::DbRegionConfig>::end(__for_range)._M_node;
  while ( std::operator!=(&__for_begin, &__for_end) )
  {
    v19 = std::_Rb_tree_const_iterator<std::pair<std::string const,data::DbRegionConfig>>::operator*(&__for_begin);
    region = std::get<0ul,std::string const,data::DbRegionConfig>(v19);
    config = (std::tuple_element<1,const std::pair<const std::string,data::DbRegionConfig> >::type *)std::get<1ul,std::string const,data::DbRegionConfig>(v19);
    Json::Value::Value(v4 + 48, 0LL);
    if ( *(_BYTE *)(((unsigned __int64)config >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)config >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(config);
    }
    Json::Value::Value((Json::Value *)&other, config->id);
    v7 = Json::Value::operator[]((Json::Value_0 *const)(v4 + 48), "id");
    Json::Value::operator=(v7, &other);
    Json::Value::~Value(&other);
    Json::Value::Value(&other, &config->name);
    v8 = Json::Value::operator[]((Json::Value_0 *const)(v4 + 48), "name");
    Json::Value::operator=(v8, &other);
    Json::Value::~Value(&other);
    Json::Value::Value(&other, &config->title);
    v9 = Json::Value::operator[]((Json::Value_0 *const)(v4 + 48), "title");
    Json::Value::operator=(v9, &other);
    Json::Value::~Value(&other);
    Json::Value::Value(&other, &config->region_type);
    v10 = Json::Value::operator[]((Json::Value_0 *const)(v4 + 48), "region_type");
    Json::Value::operator=(v10, &other);
    Json::Value::~Value(&other);
    Json::Value::Value(&other, &config->area_type);
    v11 = Json::Value::operator[]((Json::Value_0 *const)(v4 + 48), "area_type");
    Json::Value::operator=(v11, &other);
    Json::Value::~Value(&other);
    if ( *(_BYTE *)(((unsigned __int64)&config->sdk_env >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&config->sdk_env >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&config->sdk_env);
    }
    Json::Value::Value((Json::Value *)&other, config->sdk_env);
    v12 = Json::Value::operator[]((Json::Value_0 *const)(v4 + 48), "sdk_env");
    Json::Value::operator=(v12, &other);
    Json::Value::~Value(&other);
    v13 = (Json::Value *)Json::Value::operator[]((Json::Value_0 *const)jval, &config->name);
    Json::Value::operator=(v13);
    Json::Value::~Value((Json::Value_0 *const)(v4 + 48));
    std::_Rb_tree_const_iterator<std::pair<std::string const,data::DbRegionConfig>>::operator++(&__for_begin);
  }
  result = 0;
  if ( v24 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2841: range 000000000CBB1582-000000000CBB175A
int32_t __cdecl RequestHandler::finishDailyTask(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:2842";
  *(_QWORD *)(v4 + 16) = RequestHandler::finishDailyTask;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::finishDailyTask(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::finishDailyTask::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2842: range 000000000CBB11E0-000000000CBB1581
int32_t __cdecl RequestHandler::finishDailyTask(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::finishDailyTask::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  google::protobuf::uint32 Now; // eax
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-105h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-104h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-100h]
  proto::FinishDailyTaskOp *finish_daily_task_op; // [rsp+38h] [rbp-F8h]
  char v15[240]; // [rsp+40h] [rbp-F0h] BYREF

  v3 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 4 8 uid:2844 48 4 18 daily_task_id:2845 64 32 11 ticket:2846 128 32 8 req:2861";
  *(_QWORD *)(v3 + 16) = RequestHandler::finishDailyTask(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862723] = -218959118;
  v5[536862725] = -202116109;
  *(_DWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  std::string::basic_string(v3 + 64);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 128), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[14],unsigned int &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 128),
              (unsigned int *)(v3 + 32),
              (std::remove_reference<char const (&)[14]>::type *)"daily_task_id",
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 64));
  std::string::~string((void *)(v3 + 128));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 64) )
  {
    v6 = 2012;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 32) )
      goto LABEL_12;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 32)) )
      v7 = 0;
    else
LABEL_12:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 128));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 128));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 64));
      finish_daily_task_op = proto::OfflineMsgBin::mutable_finish_daily_task_op(msg);
      proto::FinishDailyTaskOp::set_daily_task_id(finish_daily_task_op, *(_DWORD *)(v3 + 48));
      Now = common::tools::TimeUtils::getNow();
      proto::FinishDailyTaskOp::set_daily_time(finish_daily_task_op, Now);
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 32));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 128));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 128));
    }
  }
  std::string::~string((void *)(v3 + 64));
  result = v6;
  if ( v15 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2878: range 000000000CBB175C-000000000CBB1D54
// local variable allocation has failed, the output may be wrong!
int32_t __cdecl RequestHandler::queryRedisOfflineMsg(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  int32_t v7; // r14d
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  Json::Value *v10; // rax
  int32_t result; // eax
  int p_yielda; // [rsp+0h] [rbp-360h]
  Json::Value *jvalb; // [rsp+8h] [rbp-358h]
  int v15; // [rsp+20h] [rbp-340h]
  void *v16; // [rsp+28h] [rbp-338h] OVERLAPPED BYREF
  std::string key; // [rsp+30h] [rbp-330h] BYREF
  char v18[784]; // [rsp+50h] [rbp-310h] BYREF

  p_yielda = (int)p_yield;
  v4 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_4(736LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "7 32 4 8 uid:2879 48 4 12 options:2892 64 32 16 json_string:2891 128 40 15 status_ret:2896 208 4"
                        "0 15 json_value:2903 288 72 21 offline_msg_data:2885 400 272 16 json_reader:2902";
  *(_QWORD *)(v4 + 16) = RequestHandler::queryRedisOfflineMsg;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862723] = -218959118;
  v6[536862725] = -218959360;
  v6[536862726] = 62194;
  v6[536862727] = -234881024;
  v6[536862728] = -218959118;
  v6[536862731] = -218959360;
  v6[536862732] = 62194;
  v6[536862741] = -202116109;
  v6[536862742] = -202116109;
  *(_DWORD *)(v4 + 32) = 0;
  std::allocator<char>::allocator((char *)&v16 + 3);
  std::string::basic_string<std::allocator<char>>(&key, off_1A660020, (const std::allocator<char> *)&v16 + 3);
  HIDWORD(v16) = getRequestParam<unsigned int>(request, &key, (unsigned int *)(v4 + 32));
  std::string::~string(&key);
  std::allocator<char>::~allocator((char *)&v16 + 3);
  if ( HIDWORD(v16) )
  {
    v7 = HIDWORD(v16);
  }
  else
  {
    proto::OfflineMsgRedisData::OfflineMsgRedisData((proto::OfflineMsgRedisData *const)(v4 + 288));
    HIDWORD(v16) = RedisOpOfflineMsg::getOfflineMsgData(*(_DWORD *)(v4 + 32), (proto::OfflineMsgRedisData *)(v4 + 288));
    if ( HIDWORD(v16) )
    {
      v7 = HIDWORD(v16);
    }
    else
    {
      std::allocator<char>::allocator((char *)&v16 + 3);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v4 + 64),
        byte_1A5D1560,
        (const std::allocator<char> *)&v16 + 3);
      std::allocator<char>::~allocator((char *)&v16 + 3);
      google::protobuf::util::JsonPrintOptions::JsonPrintOptions((google::protobuf::util::JsonPrintOptions *const)(v4 + 48));
      *(_BYTE *)(v4 + 48) = 1;
      *(_BYTE *)(v4 + 49) = 1;
      *(_BYTE *)(v4 + 51) = 1;
      google::protobuf::util::MessageToJsonString(
        (google::protobuf::util::Status *)(v4 + 128),
        (google::protobuf::Message *)(v4 + 288),
        p_yielda,
        jval,
        (int)request,
        (char)this,
        v15,
        v16);
      if ( !google::protobuf::util::Status::ok((const google::protobuf::util::Status *const)(v4 + 128)) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&key,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/handler/request_handler.api.hpp",
          "queryRedisOfflineMsg",
          2899);
        v8 = common::milog::MiLogStream::operator<<<char [55],(char *[55])0>(
               (common::milog::MiLogStream *const)&key,
               (const char (*)[55])"OfflineMsgRedisData to json_string failed player_uid: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v4 + 32));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
        v7 = -1;
      }
      else
      {
        Json::Reader::Reader((Json::Reader *)(v4 + 400));
        Json::Value::Value(v4 + 208, 0LL);
        if ( !Json::Reader::parse(
                (Json::Reader *const)(v4 + 400),
                (const std::string *)(v4 + 64),
                (Json::Value *)(v4 + 208),
                1) )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&key,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/handler/request_handler.api.hpp",
            "queryRedisOfflineMsg",
            2906);
          v9 = common::milog::MiLogStream::operator<<<char [66],(char *[66])0>(
                 (common::milog::MiLogStream *const)&key,
                 (const char (*)[66])"OfflineMsgRedisData json_string to json_value failed player_uid: ");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v4 + 32));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
          v7 = -1;
        }
        else
        {
          v10 = (Json::Value *)Json::Value::operator[]((Json::Value_0 *const)jvalb, "data");
          Json::Value::operator=(v10);
          v7 = 0;
        }
        Json::Value::~Value((Json::Value_0 *const)(v4 + 208));
        Json::Reader::~Reader((Json::Reader *const)(v4 + 400));
      }
      google::protobuf::util::Status::~Status((google::protobuf::util::Status *const)(v4 + 128));
      std::string::~string((void *)(v4 + 64));
    }
    proto::OfflineMsgRedisData::~OfflineMsgRedisData((proto::OfflineMsgRedisData *const)(v4 + 288));
  }
  result = v7;
  if ( v18 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF800C) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8014) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF801C) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF802C) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8054) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8058) = -168430091;
  }
  return result;
};

// Line 2915: range 000000000CBB214C-000000000CBB2324
int32_t __cdecl RequestHandler::delItemNegative(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:2916";
  *(_QWORD *)(v4 + 16) = RequestHandler::delItemNegative;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::delItemNegative(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::delItemNegative::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2916: range 000000000CBB1D56-000000000CBB214B
int32_t __cdecl RequestHandler::delItemNegative(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::delItemNegative::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-125h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-124h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-120h]
  proto::DelItemNegativeOp *op; // [rsp+38h] [rbp-118h]
  char v14[272]; // [rsp+40h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 48 4 8 uid:2918 64 4 12 item_id:2919 80 4 13 item_num:2920 96 32 11 ticket:2921 160 32 8 req:2937";
  *(_QWORD *)(v3 + 16) = RequestHandler::delItemNegative(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862724] = -218959118;
  v5[536862726] = -202116109;
  *(_DWORD *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 64) = 0;
  *(_DWORD *)(v3 + 80) = 0;
  std::string::basic_string(v3 + 96);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 160), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[8],unsigned int &,char const(&)[9],unsigned int &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 160),
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[8]>::type *)"item_id",
              (unsigned int *)(v3 + 64),
              (std::remove_reference<char const (&)[9]>::type *)"item_num",
              (unsigned int *)(v3 + 80),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 96));
  std::string::~string((void *)(v3 + 160));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 96) )
  {
    v6 = 2012;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 48) )
      goto LABEL_12;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 48)) )
      v7 = 0;
    else
LABEL_12:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 160));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 96));
      op = proto::OfflineMsgBin::mutable_del_item_negative_op(msg);
      proto::DelItemNegativeOp::set_item_id(op, *(_DWORD *)(v3 + 64));
      proto::DelItemNegativeOp::set_item_num(op, *(_DWORD *)(v3 + 80));
      proto::DelItemNegativeOp::set_remain_num(op, *(_DWORD *)(v3 + 80));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 48));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 160));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
    }
  }
  std::string::~string((void *)(v3 + 96));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 2955: range 000000000CBB26EE-000000000CBB28C6
int32_t __cdecl RequestHandler::delEquip(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:2956";
  *(_QWORD *)(v4 + 16) = RequestHandler::delEquip;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::delEquip(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::delEquip::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2956: range 000000000CBB2326-000000000CBB26ED
int32_t __cdecl RequestHandler::delEquip(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::delEquip::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-125h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-124h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-120h]
  proto::DelEquipOp *op; // [rsp+38h] [rbp-118h]
  char v14[272]; // [rsp+40h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 48 4 8 uid:2958 64 8 9 guid:2959 96 32 11 ticket:2960 160 32 8 req:2979";
  *(_QWORD *)(v3 + 16) = RequestHandler::delEquip(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218959360;
  v5[536862724] = -218959118;
  v5[536862726] = -202116109;
  *(_DWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 64) = 0LL;
  std::string::basic_string(v3 + 96);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 160), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[5],unsigned long &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 160),
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[5]>::type *)"guid",
              (unsigned __int64 *)(v3 + 64),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 96));
  std::string::~string((void *)(v3 + 160));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 96) )
  {
    v6 = 2012;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 48) )
      goto LABEL_12;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 48)) )
      v7 = 0;
    else
LABEL_12:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else if ( *(_QWORD *)(v3 + 64) )
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 160));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 96));
      op = proto::OfflineMsgBin::mutable_del_equip_op(msg);
      proto::DelEquipOp::set_guid(op, *(_QWORD *)(v3 + 64));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 48));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 160));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
    }
    else
    {
      v6 = 1002;
    }
  }
  std::string::~string((void *)(v3 + 96));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 2995: range 000000000CBB2FBE-000000000CBB3196
int32_t __cdecl RequestHandler::modifyBornPos(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:2996";
  *(_QWORD *)(v4 + 16) = RequestHandler::modifyBornPos;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::modifyBornPos(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::modifyBornPos::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2996: range 000000000CBB28C8-000000000CBB2FBC
int32_t __cdecl RequestHandler::modifyBornPos(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::modifyBornPos::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  std::vector<float>::reference v10; // rax
  float *v11; // rdx
  std::vector<float>::reference v12; // rax
  float *v13; // rdx
  std::vector<float>::reference v14; // rax
  float *v15; // rdx
  int32_t result; // eax
  bool v17; // [rsp+17h] [rbp-1A9h]
  std::allocator<char> __a; // [rsp+33h] [rbp-18Dh] BYREF
  int32_t retcode; // [rsp+34h] [rbp-18Ch]
  proto::OfflineMsgBin *msg; // [rsp+38h] [rbp-188h]
  proto::ModifyBornPosOp *op; // [rsp+40h] [rbp-180h]
  proto::VectorBin *bin_pos; // [rsp+48h] [rbp-178h]
  char v24[368]; // [rsp+50h] [rbp-170h] BYREF

  v3 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(320LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 32 4 8 uid:2998 48 4 13 scene_id:2998 64 24 12 pos_vec:3013 128 32 11 ticket:2999 192 32 8 pos"
                        ":2999 256 32 8 req:3019";
  *(_QWORD *)(v3 + 16) = RequestHandler::modifyBornPos(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -234881024;
  v5[536862723] = -218959118;
  v5[536862725] = -218959118;
  v5[536862727] = -218959118;
  v5[536862729] = -202116109;
  *(_DWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  std::string::basic_string(v3 + 128);
  std::string::basic_string(v3 + 192);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 256), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[4],std::string &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 256),
              (unsigned int *)(v3 + 32),
              (std::remove_reference<char const (&)[9]>::type *)"scene_id",
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[4]>::type *)off_1A666540,
              (std::string *)(v3 + 192),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 128));
  std::string::~string((void *)(v3 + 256));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 128) )
  {
    v6 = 2012;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 32) )
      goto LABEL_12;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 32)) )
      v7 = 0;
    else
LABEL_12:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else
    {
      std::vector<float>::vector((std::vector<float> *const)(v3 + 64));
      std::allocator<char>::allocator(&__a);
      std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 256), ",", &__a);
      v17 = common::tools::StringUtils::splitToList<float>(
              (const std::string *)(v3 + 192),
              (const std::string *)(v3 + 256),
              (std::vector<float> *)(v3 + 64),
              1)
         || std::vector<float>::size((const std::vector<float> *const)(v3 + 64)) != 3;
      std::string::~string((void *)(v3 + 256));
      std::allocator<char>::~allocator(&__a);
      if ( v17 )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 256),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/handler/request_handler.api.hpp",
          "operator()",
          3016);
        v8 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(
               (common::milog::MiLogStream *const)(v3 + 256),
               (const char (*)[6])"pos: ");
        v9 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, (const std::string *)(v3 + 192));
        common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(v9, (const char (*)[19])" splitToList fails");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 256));
        v6 = 1002;
      }
      else
      {
        proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 256));
        msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 256));
        proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 128));
        op = proto::OfflineMsgBin::mutable_modify_born_pos_op(msg);
        proto::ModifyBornPosOp::set_scene_id(op, *(_DWORD *)(v3 + 48));
        bin_pos = proto::ModifyBornPosOp::mutable_pos(op);
        v10 = std::vector<float>::operator[]((std::vector<float> *const)(v3 + 64), 0LL);
        v11 = v10;
        if ( *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v10 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v10 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v10);
        }
        proto::VectorBin::set_x(bin_pos, *v11);
        v12 = std::vector<float>::operator[]((std::vector<float> *const)(v3 + 64), 1uLL);
        v13 = v12;
        if ( *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v12 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v12);
        }
        proto::VectorBin::set_y(bin_pos, *v13);
        v14 = std::vector<float>::operator[]((std::vector<float> *const)(v3 + 64), 2uLL);
        v15 = v14;
        if ( *(_BYTE *)(((unsigned __int64)v14 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v14 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v14 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v14);
        }
        proto::VectorBin::set_z(bin_pos, *v15);
        common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 32));
        common::minet::Packet::setTargetService(packet, 9u);
        common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 256));
        v6 = 0;
        proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 256));
      }
      std::vector<float>::~vector((std::vector<float> *const)(v3 + 64));
    }
  }
  std::string::~string((void *)(v3 + 192));
  std::string::~string((void *)(v3 + 128));
  result = v6;
  if ( v24 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF801C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8024) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3039: range 000000000CBB3786-000000000CBB39F2
int32_t __cdecl RequestHandler::getPlatformPlayerNum(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  _DWORD *v6; // r12
  int32_t v7; // r14d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+30h] [rbp-140h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+50h] [rbp-120h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+70h] [rbp-100h] BYREF
  char v14[208]; // [rsp+A0h] [rbp-D0h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(160LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "2 32 32 13 make_req:3041 96 32 13 make_rsp:3050";
  *(_QWORD *)(v4 + 16) = RequestHandler::getPlatformPlayerNum;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862722] = -218959118;
  v6[536862724] = -202116109;
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::getPlatformPlayerNum(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    (std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> *const)(v4 + 32),
    (RequestHandler::getPlatformPlayerNum::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)>)request);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<RequestHandler::getPlatformPlayerNum(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::Packet &,Json::Value &)#2},void,void>(
    (std::function<int(common::minet::Packet&,Json::Value&)> *const)(v4 + 96),
    (RequestHandler::getPlatformPlayerNum::<lambda(common::minet::Packet&, Json::Value&)>)request);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function(
    &p_make_rsp,
    (const std::function<int(common::minet::Packet&,Json::Value&)> *)(v4 + 96));
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function(
    &p_make_req,
    (const std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function((std::function<int(common::minet::Packet&,Json::Value&)> *const)(v4 + 96));
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function((std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> *const)(v4 + 32));
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_DWORD *)((v4 >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 3041: range 000000000CBB3198-000000000CBB32F6
int32_t __cdecl RequestHandler::getPlatformPlayerNum(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::getPlatformPlayerNum::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t result; // eax
  char v8[144]; // [rsp+20h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 24 8 req:3043";
  *(_QWORD *)(v3 + 16) = RequestHandler::getPlatformPlayerNum(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -218103808;
  v5[536862722] = -202116109;
  proto::PlatformPlayerNumReq::PlatformPlayerNumReq((proto::PlatformPlayerNumReq *const)(v3 + 32));
  common::minet::Packet::setTargetService(packet, 4u);
  common::minet::Packet::setProto<proto::PlatformPlayerNumReq>(packet, (const proto::PlatformPlayerNumReq *)(v3 + 32));
  proto::PlatformPlayerNumReq::~PlatformPlayerNumReq((proto::PlatformPlayerNumReq *const)(v3 + 32));
  result = 0;
  if ( v8 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 3050: range 000000000CBB32F8-000000000CBB3785
int32_t __cdecl RequestHandler::getPlatformPlayerNum(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::Packet &,Json::Value &)#2}::operator()(
        const RequestHandler::getPlatformPlayerNum::<lambda(common::minet::Packet&, Json::Value&)> *const __closure,
        common::minet::Packet *rsp_packet,
        Json::Value *jval)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  unsigned int v7; // eax
  Json::Value_0 *v8; // rax
  const google::protobuf::MapPair<unsigned int,unsigned int> *v9; // rax
  Json::Value_0 *v10; // rax
  Json::Value_0 *v11; // rax
  Json::Value *v12; // rax
  int32_t result; // eax
  int32_t ret; // [rsp+24h] [rbp-1DCh]
  const google::protobuf::Map<unsigned int,unsigned int> *__for_range; // [rsp+28h] [rbp-1D8h]
  const Json::String *platform_name; // [rsp+30h] [rbp-1D0h]
  unsigned int platform; // [rsp+38h] [rbp-1C8h] BYREF
  unsigned int v19; // [rsp+3Ch] [rbp-1C4h]
  google::protobuf::Map<unsigned int,unsigned int>::const_iterator __for_begin; // [rsp+40h] [rbp-1C0h] BYREF
  google::protobuf::Map<unsigned int,unsigned int>::const_iterator __for_end; // [rsp+60h] [rbp-1A0h] BYREF
  std::string key; // [rsp+80h] [rbp-180h] BYREF
  Json::Value_0 other; // [rsp+A0h] [rbp-160h] BYREF
  char v24[304]; // [rsp+D0h] [rbp-130h] BYREF

  v3 = (unsigned __int64)v24;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(256LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 32 40 19 player_num_map:3062 112 104 8 rsp:3052";
  *(_QWORD *)(v3 + 16) = RequestHandler::getPlatformPlayerNum(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::Packet &,Json::Value &)#2}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862722] = -218959360;
  v5[536862723] = 62194;
  v5[536862726] = -218103808;
  v5[536862727] = -202116109;
  proto::PlatformPlayerNumRsp::PlatformPlayerNumRsp((proto::PlatformPlayerNumRsp *const)(v3 + 112));
  ret = common::minet::Packet::getProto<proto::PlatformPlayerNumRsp>(
          rsp_packet,
          (proto::PlatformPlayerNumRsp *)(v3 + 112));
  if ( ret )
  {
    v6 = ret;
  }
  else
  {
    v7 = proto::PlatformPlayerNumRsp::online_player_num((const proto::PlatformPlayerNumRsp *const)(v3 + 112));
    Json::Value::Value((Json::Value *)&other, v7);
    v8 = Json::Value::operator[]((Json::Value_0 *const)jval, "online_player_num");
    Json::Value::operator=(v8, &other);
    Json::Value::~Value(&other);
    Json::Value::Value(v3 + 32, 0LL);
    __for_range = proto::PlatformPlayerNumRsp::platform_player_num_map((const proto::PlatformPlayerNumRsp *const)(v3 + 112));
    google::protobuf::Map<unsigned int,unsigned int>::begin(&__for_begin, __for_range);
    google::protobuf::Map<unsigned int,unsigned int>::end(&__for_end, __for_range);
    while ( google::protobuf::operator!=(&__for_begin, &__for_end) )
    {
      v9 = google::protobuf::Map<unsigned int,unsigned int>::const_iterator::operator*(&__for_begin);
      google::protobuf::MapPair<unsigned int,unsigned int>::MapPair(
        (google::protobuf::MapPair<unsigned int,unsigned int> *const)&platform,
        v9);
      if ( proto::PlatformType_IsValid(platform) )
      {
        platform_name = proto::PlatformType_Name[abi:cxx11]((proto::PlatformType)platform);
        Json::Value::Value((Json::Value *)&other, v19);
        v10 = Json::Value::operator[]((Json::Value_0 *const)(v3 + 32), platform_name);
        Json::Value::operator=(v10, &other);
      }
      else
      {
        Json::Value::Value((Json::Value *)&other, v19);
        std::to_string(&key, platform);
        v11 = Json::Value::operator[]((Json::Value_0 *const)(v3 + 32), &key);
        Json::Value::operator=(v11, &other);
        std::string::~string(&key);
      }
      Json::Value::~Value(&other);
      google::protobuf::MapPair<unsigned int,unsigned int>::~MapPair((google::protobuf::MapPair<unsigned int,unsigned int> *const)&platform);
      google::protobuf::Map<unsigned int,unsigned int>::const_iterator::operator++(&__for_begin);
    }
    v12 = (Json::Value *)Json::Value::operator[]((Json::Value_0 *const)jval, "platform_player_num");
    Json::Value::operator=(v12);
    v6 = proto::PlatformPlayerNumRsp::retcode((const proto::PlatformPlayerNumRsp *const)(v3 + 112));
    Json::Value::~Value((Json::Value_0 *const)(v3 + 32));
  }
  proto::PlatformPlayerNumRsp::~PlatformPlayerNumRsp((proto::PlatformPlayerNumRsp *const)(v3 + 112));
  result = v6;
  if ( v24 == (char *)v3 )
  {
    *(_DWORD *)((v3 >> 3) + 0x7FFF8000) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3084: range 000000000CBB3F16-000000000CBB4182
int32_t __cdecl RequestHandler::getFineGrainedPlayerNum(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  _DWORD *v6; // r12
  int32_t v7; // r14d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+30h] [rbp-140h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+50h] [rbp-120h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+70h] [rbp-100h] BYREF
  char v14[208]; // [rsp+A0h] [rbp-D0h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(160LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "2 32 32 13 make_req:3086 96 32 13 make_rsp:3095";
  *(_QWORD *)(v4 + 16) = RequestHandler::getFineGrainedPlayerNum;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862722] = -218959118;
  v6[536862724] = -202116109;
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::getFineGrainedPlayerNum(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    (std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> *const)(v4 + 32),
    (RequestHandler::getFineGrainedPlayerNum::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)>)request);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<RequestHandler::getFineGrainedPlayerNum(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::Packet &,Json::Value &)#2},void,void>(
    (std::function<int(common::minet::Packet&,Json::Value&)> *const)(v4 + 96),
    (RequestHandler::getFineGrainedPlayerNum::<lambda(common::minet::Packet&, Json::Value&)>)request);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function(
    &p_make_rsp,
    (const std::function<int(common::minet::Packet&,Json::Value&)> *)(v4 + 96));
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function(
    &p_make_req,
    (const std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function((std::function<int(common::minet::Packet&,Json::Value&)> *const)(v4 + 96));
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function((std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> *const)(v4 + 32));
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_DWORD *)((v4 >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 3086: range 000000000CBB39F4-000000000CBB3B52
int32_t __cdecl RequestHandler::getFineGrainedPlayerNum(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::getFineGrainedPlayerNum::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t result; // eax
  char v8[144]; // [rsp+20h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 24 8 req:3088";
  *(_QWORD *)(v3 + 16) = RequestHandler::getFineGrainedPlayerNum(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -218103808;
  v5[536862722] = -202116109;
  proto::FineGrainedPlayerNumReq::FineGrainedPlayerNumReq((proto::FineGrainedPlayerNumReq *const)(v3 + 32));
  common::minet::Packet::setTargetService(packet, 4u);
  common::minet::Packet::setProto<proto::FineGrainedPlayerNumReq>(
    packet,
    (const proto::FineGrainedPlayerNumReq *)(v3 + 32));
  proto::FineGrainedPlayerNumReq::~FineGrainedPlayerNumReq((proto::FineGrainedPlayerNumReq *const)(v3 + 32));
  result = 0;
  if ( v8 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 3095: range 000000000CBB3B54-000000000CBB3F15
int32_t __cdecl RequestHandler::getFineGrainedPlayerNum(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::Packet &,Json::Value &)#2}::operator()(
        const RequestHandler::getFineGrainedPlayerNum::<lambda(common::minet::Packet&, Json::Value&)> *const __closure,
        common::minet::Packet *rsp_packet,
        Json::Value *jval)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  unsigned int v7; // eax
  Json::Value_0 *v8; // rax
  const google::protobuf::MapPair<std::string,unsigned int> *v9; // rax
  Json::Value_0 *v10; // rax
  Json::Value *v11; // rax
  int32_t result; // eax
  int32_t ret; // [rsp+24h] [rbp-1DCh]
  const google::protobuf::Map<std::string,unsigned int> *__for_range; // [rsp+28h] [rbp-1D8h]
  google::protobuf::Map<std::string,unsigned int>::const_iterator __for_begin; // [rsp+30h] [rbp-1D0h] BYREF
  google::protobuf::Map<std::string,unsigned int>::const_iterator __for_end; // [rsp+50h] [rbp-1B0h] BYREF
  std::string detail; // [rsp+70h] [rbp-190h] BYREF
  unsigned int v19; // [rsp+90h] [rbp-170h]
  Json::Value_0 other; // [rsp+A0h] [rbp-160h] BYREF
  char v21[304]; // [rsp+D0h] [rbp-130h] BYREF

  v3 = (unsigned __int64)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(256LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 32 40 19 player_num_map:3107 112 104 8 rsp:3097";
  *(_QWORD *)(v3 + 16) = RequestHandler::getFineGrainedPlayerNum(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::Packet &,Json::Value &)#2}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862722] = -218959360;
  v5[536862723] = 62194;
  v5[536862726] = -218103808;
  v5[536862727] = -202116109;
  proto::FineGrainedPlayerNumRsp::FineGrainedPlayerNumRsp((proto::FineGrainedPlayerNumRsp *const)(v3 + 112));
  ret = common::minet::Packet::getProto<proto::FineGrainedPlayerNumRsp>(
          rsp_packet,
          (proto::FineGrainedPlayerNumRsp *)(v3 + 112));
  if ( ret )
  {
    v6 = ret;
  }
  else
  {
    v7 = proto::FineGrainedPlayerNumRsp::online_player_num((const proto::FineGrainedPlayerNumRsp *const)(v3 + 112));
    Json::Value::Value((Json::Value *)&other, v7);
    v8 = Json::Value::operator[]((Json::Value_0 *const)jval, "online_player_num");
    Json::Value::operator=(v8, &other);
    Json::Value::~Value(&other);
    Json::Value::Value(v3 + 32, 0LL);
    __for_range = proto::FineGrainedPlayerNumRsp::fine_grained_player_num_map[abi:cxx11]((const proto::FineGrainedPlayerNumRsp *const)(v3 + 112));
    google::protobuf::Map<std::string,unsigned int>::begin(&__for_begin, __for_range);
    google::protobuf::Map<std::string,unsigned int>::end(&__for_end, __for_range);
    while ( google::protobuf::operator!=(&__for_begin, &__for_end) )
    {
      v9 = google::protobuf::Map<std::string,unsigned int>::const_iterator::operator*(&__for_begin);
      google::protobuf::MapPair<std::string,unsigned int>::MapPair(
        (google::protobuf::MapPair<std::string,unsigned int> *const)&detail,
        v9);
      Json::Value::Value((Json::Value *)&other, v19);
      v10 = Json::Value::operator[]((Json::Value_0 *const)(v3 + 32), &detail);
      Json::Value::operator=(v10, &other);
      Json::Value::~Value(&other);
      google::protobuf::MapPair<std::string,unsigned int>::~MapPair((google::protobuf::MapPair<std::string,unsigned int> *const)&detail);
      google::protobuf::Map<std::string,unsigned int>::const_iterator::operator++(&__for_begin);
    }
    v11 = (Json::Value *)Json::Value::operator[]((Json::Value_0 *const)jval, "fine_grained_player_num");
    Json::Value::operator=(v11);
    v6 = proto::FineGrainedPlayerNumRsp::retcode((const proto::FineGrainedPlayerNumRsp *const)(v3 + 112));
    Json::Value::~Value((Json::Value_0 *const)(v3 + 32));
  }
  proto::FineGrainedPlayerNumRsp::~FineGrainedPlayerNumRsp((proto::FineGrainedPlayerNumRsp *const)(v3 + 112));
  result = v6;
  if ( v21 == (char *)v3 )
  {
    *(_DWORD *)((v3 >> 3) + 0x7FFF8000) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3121: range 000000000CBB44B2-000000000CBB471E
int32_t __cdecl RequestHandler::getPlayerLoginPerSecond(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  _DWORD *v6; // r12
  int32_t v7; // r14d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+30h] [rbp-140h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+50h] [rbp-120h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+70h] [rbp-100h] BYREF
  char v14[208]; // [rsp+A0h] [rbp-D0h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(160LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "2 32 32 13 make_req:3123 96 32 13 make_rsp:3132";
  *(_QWORD *)(v4 + 16) = RequestHandler::getPlayerLoginPerSecond;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862722] = -218959118;
  v6[536862724] = -202116109;
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::getPlayerLoginPerSecond(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    (std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> *const)(v4 + 32),
    (RequestHandler::getPlayerLoginPerSecond::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)>)request);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<RequestHandler::getPlayerLoginPerSecond(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::Packet &,Json::Value &)#2},void,void>(
    (std::function<int(common::minet::Packet&,Json::Value&)> *const)(v4 + 96),
    (RequestHandler::getPlayerLoginPerSecond::<lambda(common::minet::Packet&, Json::Value&)>)request);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function(
    &p_make_rsp,
    (const std::function<int(common::minet::Packet&,Json::Value&)> *)(v4 + 96));
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function(
    &p_make_req,
    (const std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function((std::function<int(common::minet::Packet&,Json::Value&)> *const)(v4 + 96));
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function((std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> *const)(v4 + 32));
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_DWORD *)((v4 >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 3123: range 000000000CBB4184-000000000CBB42E2
int32_t __cdecl RequestHandler::getPlayerLoginPerSecond(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::getPlayerLoginPerSecond::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t result; // eax
  char v8[144]; // [rsp+20h] [rbp-90h] BYREF

  v3 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 24 8 req:3125";
  *(_QWORD *)(v3 + 16) = RequestHandler::getPlayerLoginPerSecond(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -218103808;
  v5[536862722] = -202116109;
  proto::PlayerLoginPerSecondReq::PlayerLoginPerSecondReq((proto::PlayerLoginPerSecondReq *const)(v3 + 32));
  common::minet::Packet::setTargetService(packet, 4u);
  common::minet::Packet::setProto<proto::PlayerLoginPerSecondReq>(
    packet,
    (const proto::PlayerLoginPerSecondReq *)(v3 + 32));
  proto::PlayerLoginPerSecondReq::~PlayerLoginPerSecondReq((proto::PlayerLoginPerSecondReq *const)(v3 + 32));
  result = 0;
  if ( v8 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 3132: range 000000000CBB42E4-000000000CBB44B0
int32_t __cdecl RequestHandler::getPlayerLoginPerSecond(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::Packet &,Json::Value &)#2}::operator()(
        const RequestHandler::getPlayerLoginPerSecond::<lambda(common::minet::Packet&, Json::Value&)> *const __closure,
        common::minet::Packet *rsp_packet,
        Json::Value *jval)
{
  proto::PlayerLoginPerSecondRsp *v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  int32_t v6; // r14d
  unsigned int v7; // eax
  Json::Value_0 *v8; // rax
  int32_t result; // eax
  int32_t ret; // [rsp+2Ch] [rbp-C4h]
  Json::Value_0 other; // [rsp+30h] [rbp-C0h] BYREF
  char v13[144]; // [rsp+60h] [rbp-90h] BYREF

  v3 = (proto::PlayerLoginPerSecondRsp *)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = (proto::PlayerLoginPerSecondRsp *)v4;
  }
  v3->_vptr_MessageLite = (int (**)(...))1102416563;
  v3->_internal_metadata_.ptr_ = "1 32 32 8 rsp:3134";
  *(_QWORD *)&v3->retcode_ = RequestHandler::getPlayerLoginPerSecond(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::Packet &,Json::Value &)#2}::operator();
  v5 = (unsigned __int64)v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450888) = -202116109;
  proto::PlayerLoginPerSecondRsp::PlayerLoginPerSecondRsp(v3 + 1);
  ret = common::minet::Packet::getProto<proto::PlayerLoginPerSecondRsp>(rsp_packet, v3 + 1);
  if ( ret )
  {
    v6 = ret;
  }
  else
  {
    v7 = proto::PlayerLoginPerSecondRsp::player_login_per_second(v3 + 1);
    Json::Value::Value((Json::Value *)&other, v7);
    v8 = Json::Value::operator[]((Json::Value_0 *const)jval, "player_login_per_second");
    Json::Value::operator=(v8, &other);
    Json::Value::~Value(&other);
    v6 = proto::PlayerLoginPerSecondRsp::retcode(v3 + 1);
  }
  proto::PlayerLoginPerSecondRsp::~PlayerLoginPerSecondRsp(v3 + 1);
  result = v6;
  if ( v13 == (char *)v3 )
  {
    *(_DWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    v3->_vptr_MessageLite = (int (**)(...))1172321806;
    *(_QWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 3151: range 000000000CBB4E0A-000000000CBB4FE2
int32_t __cdecl RequestHandler::subCoinNegative(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:3152";
  *(_QWORD *)(v4 + 16) = RequestHandler::subCoinNegative;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::subCoinNegative(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::subCoinNegative::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3152: range 000000000CBB4720-000000000CBB4E08
int32_t __cdecl RequestHandler::subCoinNegative(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::subCoinNegative::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  const char (*v6)[7]; // r9
  int32_t v7; // r14d
  char v8; // al
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+27h] [rbp-149h] BYREF
  proto::PlatformType platform_type; // [rsp+28h] [rbp-148h]
  int32_t retcode; // [rsp+2Ch] [rbp-144h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-140h]
  proto::SubCoinNegativeOp *op; // [rsp+38h] [rbp-138h]
  char v18[304]; // [rsp+40h] [rbp-130h] BYREF

  v3 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(256LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "7 48 1 11 is_psn:3156 64 4 8 uid:3154 80 4 10 scoin:3154 96 4 10 hcoin:3154 112 4 10 mcoin:3154 "
                        "128 32 11 ticket:3155 192 32 8 req:3186";
  *(_QWORD *)(v3 + 16) = RequestHandler::subCoinNegative(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753551;
  v5[536862722] = -234556924;
  v5[536862723] = -234556924;
  v5[536862725] = -218959118;
  v5[536862727] = -202116109;
  *(_DWORD *)(v3 + 64) = 0;
  *(_DWORD *)(v3 + 80) = 0;
  *(_DWORD *)(v3 + 96) = 0;
  *(_DWORD *)(v3 + 112) = 0;
  std::string::basic_string(v3 + 128);
  *(_BYTE *)(v3 + 48) = 0;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 192), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 192),
              (unsigned int *)(v3 + 64),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 128),
              v6);
  std::string::~string((void *)(v3 + 192));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v7 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 128) )
  {
    v7 = 2012;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 64) )
      goto LABEL_12;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 64)) )
      v8 = 0;
    else
LABEL_12:
      v8 = 1;
    if ( v8 )
    {
      v7 = 2001;
    }
    else
    {
      std::allocator<char>::allocator(&__a);
      std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 192), "scoin", &__a);
      getRequestParam<unsigned int>(http_request, (const std::string *)(v3 + 192), (unsigned int *)(v3 + 80));
      std::string::~string((void *)(v3 + 192));
      std::allocator<char>::~allocator(&__a);
      std::allocator<char>::allocator(&__a);
      std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 192), "hcoin", &__a);
      getRequestParam<unsigned int>(http_request, (const std::string *)(v3 + 192), (unsigned int *)(v3 + 96));
      std::string::~string((void *)(v3 + 192));
      std::allocator<char>::~allocator(&__a);
      std::allocator<char>::allocator(&__a);
      std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 192), "mcoin", &__a);
      getRequestParam<unsigned int>(http_request, (const std::string *)(v3 + 192), (unsigned int *)(v3 + 112));
      std::string::~string((void *)(v3 + 192));
      std::allocator<char>::~allocator(&__a);
      std::allocator<char>::allocator(&__a);
      std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 192), "is_psn", &__a);
      getRequestParam<bool>(http_request, (const std::string *)(v3 + 192), (bool *)(v3 + 48));
      std::string::~string((void *)(v3 + 192));
      std::allocator<char>::~allocator(&__a);
      if ( *(_DWORD *)(v3 + 80) || *(_DWORD *)(v3 + 96) || *(_DWORD *)(v3 + 112) )
      {
        platform_type = PC;
        if ( *(_BYTE *)(v3 + 48) )
          platform_type = PS4;
        proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 192));
        msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 192));
        proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 128));
        op = proto::OfflineMsgBin::mutable_sub_coin_negative_op(msg);
        proto::SubCoinNegativeOp::set_scoin(op, *(_DWORD *)(v3 + 80));
        proto::SubCoinNegativeOp::set_hcoin(op, *(_DWORD *)(v3 + 96));
        proto::SubCoinNegativeOp::set_mcoin(op, *(_DWORD *)(v3 + 112));
        proto::SubCoinNegativeOp::set_platform_type(op, platform_type);
        common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 64));
        common::minet::Packet::setTargetService(packet, 9u);
        common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 192));
        v7 = 0;
        proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 192));
      }
      else
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 192),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/handler/request_handler.api.hpp",
          "operator()",
          3176);
        v9 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(
               (common::milog::MiLogStream *const)(v3 + 192),
               (const char (*)[6])"uid: ");
        v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v9,
                (const unsigned int *)(v3 + 64));
        common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
          v10,
          (const char (*)[36])"scoin hcoin and mcoin all are zero!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 192));
        v7 = 1;
      }
    }
  }
  std::string::~string((void *)(v3 + 128));
  result = v7;
  if ( v18 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3205: range 000000000CBB4FE4-000000000CBB5457
int32_t __cdecl RequestHandler::bindGmUid(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r12
  __int64 v5; // rax
  _DWORD *v6; // r13
  const char (*v7)[11]; // r9
  int32_t v8; // r14d
  std::__shared_ptr_access<proto::BindGmUidNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  std::__shared_ptr_access<proto::BindGmUidNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  common::minet::Packet *v12; // rax
  std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v13; // rax
  std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // r14
  unsigned __int64 v15; // rax
  void (__fastcall *v16)(std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::shared_ptr<proto::BindGmUidNotify> *); // r15
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-E5h] BYREF
  int32_t retcode; // [rsp+3Ch] [rbp-E4h]
  std::shared_ptr<proto::BindGmUidNotify> __r; // [rsp+40h] [rbp-E0h] BYREF
  std::string key; // [rsp+50h] [rbp-D0h] BYREF
  char v22[176]; // [rsp+70h] [rbp-B0h] BYREF

  v4 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(128LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 32 4 11 gm_uid:3206 48 4 15 player_uid:3206 64 16 15 notify_ptr:3219 96 16 15 packet_ptr:3223";
  *(_QWORD *)(v4 + 16) = RequestHandler::bindGmUid;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862722] = -219021312;
  v6[536862723] = -202178560;
  *(_DWORD *)(v4 + 32) = 0;
  *(_DWORD *)(v4 + 48) = 0;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&key, "gm_uid", &__a);
  retcode = getRequestParam<unsigned int,char const(&)[11],unsigned int &>(
              request,
              &key,
              (unsigned int *)(v4 + 32),
              (std::remove_reference<char const (&)[11]>::type *)"player_uid",
              (unsigned int *)(v4 + 48),
              v7);
  std::string::~string(&key);
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v8 = retcode;
  }
  else if ( !*(_DWORD *)(v4 + 32)
         || !*(_DWORD *)(v4 + 48)
         || !RequestHandler::isUidExist(this, *(_DWORD *)(v4 + 32))
         || !RequestHandler::isUidExist(this, *(_DWORD *)(v4 + 48)) )
  {
    v8 = 2001;
  }
  else
  {
    common::tools::perf::make_shared<proto::BindGmUidNotify>();
    v10 = std::__shared_ptr_access<proto::BindGmUidNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::BindGmUidNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
    proto::BindGmUidNotify::set_gm_uid(v10, *(_DWORD *)(v4 + 32));
    v11 = std::__shared_ptr_access<proto::BindGmUidNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::BindGmUidNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
    proto::BindGmUidNotify::set_player_uid(v11, *(_DWORD *)(v4 + 48));
    std::dynamic_pointer_cast<google::protobuf::Message const,proto::BindGmUidNotify>(&__r);
    common::minet::PacketUtils::createPacket(v4 + 96, (common::minet::ConstMessagePtr)__PAIR128__(&__r, 10297LL));
    std::shared_ptr<google::protobuf::Message const>::~shared_ptr((std::shared_ptr<const google::protobuf::Message> *const)&__r);
    if ( std::operator==<common::minet::Packet>(0LL, (const std::shared_ptr<common::minet::Packet> *)(v4 + 96)) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "bindGmUid",
        3226);
      common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
        (common::milog::MiLogStream *const)&key,
        (const char (*)[19])"createPacket fails");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      v8 = -1;
    }
    else
    {
      v12 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
      common::minet::Packet::setTargetService(v12, 4u);
      v13 = std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false> *const)&ResourceBox::network_mgr_ptr);
      v14 = v13;
      if ( *(_BYTE *)(((unsigned __int64)v13 >> 3) + 0x7FFF8000) )
        __asan_report_load8(v13);
      v15 = (unsigned __int64)(v14->_vptr_NetworkMgrBase + 9);
      if ( *(_BYTE *)((v15 >> 3) + 0x7FFF8000) )
        v15 = __asan_report_load8(v14->_vptr_NetworkMgrBase + 9);
      v16 = *(void (__fastcall **)(std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::shared_ptr<proto::BindGmUidNotify> *))v15;
      std::shared_ptr<common::minet::Packet>::shared_ptr(
        (std::shared_ptr<common::minet::Packet> *const)&__r,
        (const std::shared_ptr<common::minet::Packet> *)(v4 + 96));
      v16(v14, &__r);
      std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)&__r);
      v8 = 0;
    }
    std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v4 + 96));
    std::shared_ptr<proto::BindGmUidNotify>::~shared_ptr((std::shared_ptr<proto::BindGmUidNotify> *const)(v4 + 64));
  }
  result = v8;
  if ( v22 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3237: range 000000000CBB5458-000000000CBB587B
int32_t __cdecl RequestHandler::unBindGmUid(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r12
  __int64 v5; // rax
  _DWORD *v6; // r13
  int32_t v7; // r14d
  std::__shared_ptr_access<proto::UnbindGmUidNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  common::minet::Packet *v10; // rax
  std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // r14
  unsigned __int64 v13; // rax
  void (__fastcall *v14)(std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::shared_ptr<proto::UnbindGmUidNotify> *); // r15
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-E5h] BYREF
  int32_t retcode; // [rsp+3Ch] [rbp-E4h]
  std::shared_ptr<proto::UnbindGmUidNotify> __r; // [rsp+40h] [rbp-E0h] BYREF
  std::string key; // [rsp+50h] [rbp-D0h] BYREF
  char v20[176]; // [rsp+70h] [rbp-B0h] BYREF

  v4 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(128LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 48 4 11 gm_uid:3238 64 16 15 notify_ptr:3251 96 16 15 packet_ptr:3254";
  *(_QWORD *)(v4 + 16) = RequestHandler::unBindGmUid;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -219021312;
  v6[536862723] = -202178560;
  *(_DWORD *)(v4 + 48) = 0;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&key, "gm_uid", &__a);
  retcode = getRequestParam<unsigned int>(request, &key, (unsigned int *)(v4 + 48));
  std::string::~string(&key);
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v7 = retcode;
  }
  else if ( !*(_DWORD *)(v4 + 48) || !RequestHandler::isUidExist(this, *(_DWORD *)(v4 + 48)) )
  {
    v7 = 2001;
  }
  else
  {
    common::tools::perf::make_shared<proto::UnbindGmUidNotify>();
    v9 = std::__shared_ptr_access<proto::UnbindGmUidNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::UnbindGmUidNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
    proto::UnbindGmUidNotify::set_gm_uid(v9, *(_DWORD *)(v4 + 48));
    std::dynamic_pointer_cast<google::protobuf::Message const,proto::UnbindGmUidNotify>(&__r);
    common::minet::PacketUtils::createPacket(v4 + 96, (common::minet::ConstMessagePtr)__PAIR128__(&__r, 10281LL));
    std::shared_ptr<google::protobuf::Message const>::~shared_ptr((std::shared_ptr<const google::protobuf::Message> *const)&__r);
    if ( std::operator==<common::minet::Packet>(0LL, (const std::shared_ptr<common::minet::Packet> *)(v4 + 96)) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "unBindGmUid",
        3257);
      common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
        (common::milog::MiLogStream *const)&key,
        (const char (*)[19])"createPacket fails");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      v7 = -1;
    }
    else
    {
      v10 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 96));
      common::minet::Packet::setTargetService(v10, 4u);
      v11 = std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false> *const)&ResourceBox::network_mgr_ptr);
      v12 = v11;
      if ( *(_BYTE *)(((unsigned __int64)v11 >> 3) + 0x7FFF8000) )
        __asan_report_load8(v11);
      v13 = (unsigned __int64)(v12->_vptr_NetworkMgrBase + 9);
      if ( *(_BYTE *)((v13 >> 3) + 0x7FFF8000) )
        v13 = __asan_report_load8(v12->_vptr_NetworkMgrBase + 9);
      v14 = *(void (__fastcall **)(std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::shared_ptr<proto::UnbindGmUidNotify> *))v13;
      std::shared_ptr<common::minet::Packet>::shared_ptr(
        (std::shared_ptr<common::minet::Packet> *const)&__r,
        (const std::shared_ptr<common::minet::Packet> *)(v4 + 96));
      v14(v12, &__r);
      std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)&__r);
      v7 = 0;
    }
    std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v4 + 96));
    std::shared_ptr<proto::UnbindGmUidNotify>::~shared_ptr((std::shared_ptr<proto::UnbindGmUidNotify> *const)(v4 + 64));
  }
  result = v7;
  if ( v20 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3268: range 000000000CBB6180-000000000CBB6335
int32_t __cdecl RequestHandler::getBindGmUid(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 1 18 make_rsp_func:3282";
  *(_QWORD *)(v4 + 16) = RequestHandler::getBindGmUid;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116351;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<RequestHandler::getBindGmUid(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::Packet &,Json::Value &)#2},void,void>(
    &p_make_rsp,
    (RequestHandler::getBindGmUid::<lambda(common::minet::Packet&, Json::Value&)>)p_yield);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::getBindGmUid(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    (RequestHandler::getBindGmUid::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)>)p_yield);
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3269: range 000000000CBB587C-000000000CBB5BED
int32_t __cdecl RequestHandler::getBindGmUid(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::getBindGmUid::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::minet::ConstMessagePtr v9; // rdx
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Fh] [rbp-101h] BYREF
  std::shared_ptr<proto::GetBindGmUidReq> __r; // [rsp+30h] [rbp-100h] BYREF
  std::string key; // [rsp+40h] [rbp-F0h] BYREF
  char v15[208]; // [rsp+60h] [rbp-D0h] BYREF

  v3 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(160LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 4 12 node_id:3273 64 16 12 req_ptr:3277 96 32 11 app_id:3271";
  *(_QWORD *)(v3 + 16) = RequestHandler::getBindGmUid(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -219021312;
  v5[536862724] = -202116109;
  std::string::basic_string(v3 + 96);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&key, "app_id", &__a);
  getRequestParam<std::string>(http_request, &key, (std::string *)(v3 + 96));
  std::string::~string(&key);
  std::allocator<char>::~allocator(&__a);
  std::string::basic_string(&key, v3 + 96);
  *(_DWORD *)(v3 + 48) = common::tools::AppIdUtils::getAppId(&key);
  std::string::~string(&key);
  common::minet::Packet::setTarget(packet, 4u, *(_DWORD *)(v3 + 48));
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)&key,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/handler/request_handler.api.hpp",
    "operator()",
    3275);
  v6 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(
         (common::milog::MiLogStream *const)&key,
         (const char (*)[9])"app_id: ");
  v7 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v6, (const std::string *)(v3 + 96));
  v8 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v7, (const char (*)[11])" node_id: ");
  common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v3 + 48));
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
  common::tools::perf::make_shared<proto::GetBindGmUidReq>();
  std::dynamic_pointer_cast<google::protobuf::Message const,proto::GetBindGmUidReq>(&__r);
  v9._M_ptr = (std::__shared_ptr<const google::protobuf::Message,(__gnu_cxx::_Lock_policy)2>::element_type *)&__r;
  common::minet::Packet::setMessagePtr(packet, 0x27DDu, v9);
  std::shared_ptr<google::protobuf::Message const>::~shared_ptr((std::shared_ptr<const google::protobuf::Message> *const)&__r);
  std::shared_ptr<proto::GetBindGmUidReq>::~shared_ptr((std::shared_ptr<proto::GetBindGmUidReq> *const)(v3 + 64));
  std::string::~string((void *)(v3 + 96));
  result = 0;
  if ( v15 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 3282: range 000000000CBB5BEE-000000000CBB617E
int32_t __cdecl RequestHandler::getBindGmUid(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::Packet &,Json::Value &)#2}::operator()(
        const RequestHandler::getBindGmUid::<lambda(common::minet::Packet&, Json::Value&)> *const __closure,
        common::minet::Packet *rsp_packet,
        Json::Value *jval)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  std::__shared_ptr_access<const proto::GetBindGmUidRsp,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  common::milog::MiLogStream *v8; // r14
  std::__shared_ptr_access<const proto::GetBindGmUidRsp,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  Json::Value_0 *v10; // rax
  std::__shared_ptr_access<const proto::GetBindGmUidRsp,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v11; // rax
  unsigned __int64 v12; // rax
  Json::Value_0 *v13; // rax
  Json::Value *v14; // rax
  int32_t result; // eax
  int val; // [rsp+28h] [rbp-178h] BYREF
  uint32_t source_appid; // [rsp+2Ch] [rbp-174h]
  const google::protobuf::Map<unsigned int,unsigned int> *__for_range; // [rsp+30h] [rbp-170h]
  const unsigned int *p_gm_uid; // [rsp+38h] [rbp-168h]
  google::protobuf::Map<unsigned int,unsigned int>::const_iterator __for_begin; // [rsp+40h] [rbp-160h] BYREF
  google::protobuf::Map<unsigned int,unsigned int>::const_iterator __for_end; // [rsp+60h] [rbp-140h] BYREF
  common::milog::MiLogStream v23; // [rsp+80h] [rbp-120h] BYREF
  Json::Value_0 other; // [rsp+A0h] [rbp-100h] BYREF
  char v25[208]; // [rsp+D0h] [rbp-D0h] BYREF

  v3 = (unsigned __int64)v25;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(160LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 16 12 rsp_ptr:3284 80 40 15 gm_uid_map:3298";
  *(_QWORD *)(v3 + 16) = RequestHandler::getBindGmUid(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::Packet &,Json::Value &)#2}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61937;
  v5[536862722] = 62194;
  v5[536862723] = -218103808;
  v5[536862724] = -202116109;
  common::minet::Packet::getConstProto<proto::GetBindGmUidRsp>((common::minet::Packet *const)(v3 + 48));
  if ( std::operator==<proto::GetBindGmUidRsp const>(
         0LL,
         (const std::shared_ptr<const proto::GetBindGmUidRsp> *)(v3 + 48)) )
  {
    common::milog::MiLogStream::create(
      &v23,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/handler/request_handler.api.hpp",
      "operator()",
      3287);
    common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
      &v23,
      (const char (*)[44])"getConstProto<proto::GetBindGmUidRsp> fails");
    common::milog::MiLogStream::~MiLogStream(&v23);
    v6 = -1;
  }
  else
  {
    v7 = std::__shared_ptr_access<proto::GetBindGmUidRsp const,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<const proto::GetBindGmUidRsp,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 48));
    if ( proto::GetBindGmUidRsp::retcode(v7) )
    {
      common::milog::MiLogStream::create(
        &v23,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "operator()",
        3292);
      v8 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
             &v23,
             (const char (*)[26])"GetBindGmUidRsp retcode: ");
      v9 = std::__shared_ptr_access<proto::GetBindGmUidRsp const,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<const proto::GetBindGmUidRsp,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 48));
      val = proto::GetBindGmUidRsp::retcode(v9);
      common::milog::MiLogStream::operator<<<int,(int *)0>(v8, &val);
      common::milog::MiLogStream::~MiLogStream(&v23);
      v6 = 1;
    }
    else
    {
      source_appid = common::minet::Packet::getSourceAppId(rsp_packet);
      common::tools::AppIdUtils::getAppIdStr[abi:cxx11]((std::string *)&v23, source_appid);
      Json::Value::Value(&other, &v23);
      v10 = Json::Value::operator[]((Json::Value_0 *const)jval, "nodeserver_appid");
      Json::Value::operator=(v10, &other);
      Json::Value::~Value(&other);
      std::string::~string(&v23);
      Json::Value::Value(v3 + 80, 0LL);
      v11 = std::__shared_ptr_access<proto::GetBindGmUidRsp const,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<const proto::GetBindGmUidRsp,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 48));
      __for_range = proto::GetBindGmUidRsp::gm_uid_map(v11);
      google::protobuf::Map<unsigned int,unsigned int>::begin(&__for_begin, __for_range);
      google::protobuf::Map<unsigned int,unsigned int>::end(&__for_end, __for_range);
      while ( google::protobuf::operator!=(&__for_begin, &__for_end) )
      {
        p_gm_uid = (const unsigned int *)google::protobuf::Map<unsigned int,unsigned int>::const_iterator::operator*(&__for_begin);
        v12 = (unsigned __int64)(p_gm_uid + 1);
        if ( *(_BYTE *)((v12 >> 3) + 0x7FFF8000) != 0 && (char)((v12 & 7) + 3) >= *(_BYTE *)((v12 >> 3) + 0x7FFF8000) )
          __asan_report_load4(v12);
        Json::Value::Value((Json::Value *)&other, p_gm_uid[1]);
        if ( *(_BYTE *)(((unsigned __int64)p_gm_uid >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)p_gm_uid & 7) + 3) >= *(_BYTE *)(((unsigned __int64)p_gm_uid >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(p_gm_uid);
        }
        std::to_string((std::string *)&v23, *p_gm_uid);
        v13 = Json::Value::operator[]((Json::Value_0 *const)(v3 + 80), (const Json::String *)&v23);
        Json::Value::operator=(v13, &other);
        std::string::~string(&v23);
        Json::Value::~Value(&other);
        google::protobuf::Map<unsigned int,unsigned int>::const_iterator::operator++(&__for_begin);
      }
      v14 = (Json::Value *)Json::Value::operator[]((Json::Value_0 *const)jval, "gm_uid_map");
      Json::Value::operator=(v14);
      v6 = 0;
      Json::Value::~Value((Json::Value_0 *const)(v3 + 80));
    }
  }
  std::shared_ptr<proto::GetBindGmUidRsp const>::~shared_ptr((std::shared_ptr<const proto::GetBindGmUidRsp> *const)(v3 + 48));
  result = v6;
  if ( v25 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 3310: range 000000000CBB7032-000000000CBB720A
int32_t __cdecl RequestHandler::setQuestContentProgress(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:3311";
  *(_QWORD *)(v4 + 16) = RequestHandler::setQuestContentProgress;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::setQuestContentProgress(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::setQuestContentProgress::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3311: range 000000000CBB6336-000000000CBB7030
int32_t __cdecl RequestHandler::setQuestContentProgress(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::setQuestContentProgress::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v11; // rax
  std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >::reference v12; // rax
  std::pair<unsigned int const,unsigned int> *v13; // rdx
  std::tuple_element<1,std::pair<unsigned int const,unsigned int> >::type *v14; // rax
  std::tuple_element<1,std::pair<unsigned int const,unsigned int> >::type v15; // r14d
  std::tuple_element<0,std::pair<unsigned int const,unsigned int> >::type *v16; // rsi
  unsigned int *v17; // rax
  std::tuple_element<1,std::pair<unsigned int const,unsigned int> >::type *v18; // rdx
  char v19; // cl
  std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int> >::reference v20; // rax
  std::pair<unsigned int const,unsigned int> *v21; // rdx
  std::tuple_element<1,std::pair<unsigned int const,unsigned int> >::type *v22; // rax
  std::tuple_element<1,std::pair<unsigned int const,unsigned int> >::type v23; // r14d
  std::tuple_element<0,std::pair<unsigned int const,unsigned int> >::type *v24; // rsi
  unsigned int *v25; // rax
  std::tuple_element<1,std::pair<unsigned int const,unsigned int> >::type *v26; // rdx
  char v27; // cl
  int32_t result; // eax
  std::allocator<char> v30; // [rsp+2Eh] [rbp-2A2h] BYREF
  std::allocator<char> __a; // [rsp+2Fh] [rbp-2A1h] BYREF
  int32_t retcode; // [rsp+30h] [rbp-2A0h]
  int32_t ret; // [rsp+34h] [rbp-29Ch]
  std::map<unsigned int,unsigned int>::iterator __for_begin; // [rsp+38h] [rbp-298h] BYREF
  std::map<unsigned int,unsigned int>::iterator __for_end; // [rsp+40h] [rbp-290h] BYREF
  proto::OfflineMsgBin *msg; // [rsp+48h] [rbp-288h]
  proto::SetQuestContentProgressOp *quest_op; // [rsp+50h] [rbp-280h]
  google::protobuf::Map<unsigned int,unsigned int> *finish_proto_map; // [rsp+58h] [rbp-278h]
  google::protobuf::Map<unsigned int,unsigned int> *fail_proto_map; // [rsp+60h] [rbp-270h]
  std::map<unsigned int,unsigned int> *__for_range; // [rsp+68h] [rbp-268h]
  std::map<unsigned int,unsigned int> *__for_range_0; // [rsp+70h] [rbp-260h]
  std::tuple_element<0,std::pair<unsigned int const,unsigned int> >::type *key_0; // [rsp+78h] [rbp-258h]
  std::tuple_element<1,std::pair<unsigned int const,unsigned int> >::type *value_0; // [rsp+80h] [rbp-250h]
  std::tuple_element<0,std::pair<unsigned int const,unsigned int> >::type *key; // [rsp+88h] [rbp-248h]
  std::tuple_element<1,std::pair<unsigned int const,unsigned int> >::type *value; // [rsp+90h] [rbp-240h]
  std::pair<unsigned int const,unsigned int> __in; // [rsp+98h] [rbp-238h] BYREF
  std::string sep_1; // [rsp+A0h] [rbp-230h] BYREF
  char v48[528]; // [rsp+C0h] [rbp-210h] BYREF

  v3 = (unsigned __int64)v48;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(480LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "8 32 4 8 uid:3313 48 4 13 quest_id:3314 64 32 24 finish_progress_str:3315 128 32 22 fail_progres"
                        "s_str:3316 192 32 11 ticket:3317 256 32 8 req:3356 320 48 34 finish_progress_idx_value_map:3335 "
                        "400 48 32 fail_progress_idx_value_map:3336";
  *(_QWORD *)(v3 + 16) = RequestHandler::setQuestContentProgress(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862723] = -218959118;
  v5[536862725] = -218959118;
  v5[536862727] = -218959118;
  v5[536862729] = -218959118;
  v5[536862731] = -219021312;
  v5[536862732] = 62194;
  v5[536862734] = -202116109;
  *(_DWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  std::string::basic_string(v3 + 64);
  std::string::basic_string(v3 + 128);
  std::string::basic_string(v3 + 192);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 256), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[16],std::string &,char const(&)[14],std::string &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 256),
              (unsigned int *)(v3 + 32),
              (std::remove_reference<char const (&)[9]>::type *)"quest_id",
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[16]>::type *)"finish_progress",
              (std::string *)(v3 + 64),
              (std::remove_reference<char const (&)[14]>::type *)"fail_progress",
              (std::string *)(v3 + 128),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 192));
  std::string::~string((void *)(v3 + 256));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 192) )
  {
    v6 = 2012;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 32) )
      goto LABEL_12;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 32)) )
      v7 = 0;
    else
LABEL_12:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else
    {
      ret = 0;
      std::map<unsigned int,unsigned int>::map((std::map<unsigned int,unsigned int> *const)(v3 + 320));
      std::map<unsigned int,unsigned int>::map((std::map<unsigned int,unsigned int> *const)(v3 + 400));
      std::allocator<char>::allocator(&__a);
      std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 256), ":", &__a);
      std::allocator<char>::allocator(&v30);
      std::string::basic_string<std::allocator<char>>(&sep_1, ",", &v30);
      ret = common::tools::StringUtils::splitToMap<unsigned int,unsigned int>(
              (const std::string *)(v3 + 64),
              &sep_1,
              (const std::string *)(v3 + 256),
              (std::map<unsigned int,unsigned int> *)(v3 + 320),
              1);
      std::string::~string(&sep_1);
      std::allocator<char>::~allocator(&v30);
      std::string::~string((void *)(v3 + 256));
      std::allocator<char>::~allocator(&__a);
      if ( ret )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 256),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/handler/request_handler.api.hpp",
          "operator()",
          3340);
        v8 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
               (common::milog::MiLogStream *const)(v3 + 256),
               (const char (*)[38])byte_1A667100);
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v3 + 32));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 256));
        v6 = -1;
      }
      else
      {
        std::allocator<char>::allocator(&__a);
        std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 256), ":", &__a);
        std::allocator<char>::allocator(&v30);
        std::string::basic_string<std::allocator<char>>(&sep_1, ",", &v30);
        ret = common::tools::StringUtils::splitToMap<unsigned int,unsigned int>(
                (const std::string *)(v3 + 128),
                &sep_1,
                (const std::string *)(v3 + 256),
                (std::map<unsigned int,unsigned int> *)(v3 + 400),
                1);
        std::string::~string(&sep_1);
        std::allocator<char>::~allocator(&v30);
        std::string::~string((void *)(v3 + 256));
        std::allocator<char>::~allocator(&__a);
        if ( ret )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v3 + 256),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/handler/request_handler.api.hpp",
            "operator()",
            3346);
          v9 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                 (common::milog::MiLogStream *const)(v3 + 256),
                 (const char (*)[36])byte_1A667160);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v3 + 32));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 256));
          v6 = -1;
        }
        else if ( !std::map<unsigned int,unsigned int>::size((const std::map<unsigned int,unsigned int> *const)(v3 + 320))
               && !std::map<unsigned int,unsigned int>::size((const std::map<unsigned int,unsigned int> *const)(v3 + 400))
               || std::map<unsigned int,unsigned int>::size((const std::map<unsigned int,unsigned int> *const)(v3 + 320))
               && std::map<unsigned int,unsigned int>::size((const std::map<unsigned int,unsigned int> *const)(v3 + 400)) )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v3 + 256),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/handler/request_handler.api.hpp",
            "operator()",
            3352);
          v11 = common::milog::MiLogStream::operator<<<char [74],(char *[74])0>(
                  (common::milog::MiLogStream *const)(v3 + 256),
                  (const char (*)[74])byte_1A6671C0);
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v3 + 32));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 256));
          v6 = -1;
        }
        else
        {
          proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 256));
          msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 256));
          proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 192));
          quest_op = proto::OfflineMsgBin::mutable_set_quest_content_progress_op(msg);
          proto::SetQuestContentProgressOp::set_quest_id(quest_op, *(_DWORD *)(v3 + 48));
          finish_proto_map = proto::SetQuestContentProgressOp::mutable_finish_progress_map(quest_op);
          fail_proto_map = proto::SetQuestContentProgressOp::mutable_fail_progress_map(quest_op);
          __for_range = (std::map<unsigned int,unsigned int> *)(v3 + 320);
          __for_begin._M_node = std::map<unsigned int,unsigned int>::begin((std::map<unsigned int,unsigned int> *const)(v3 + 320))._M_node;
          __for_end._M_node = std::map<unsigned int,unsigned int>::end(__for_range)._M_node;
          while ( std::operator!=(&__for_begin, &__for_end) )
          {
            v12 = std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator*(&__for_begin);
            v13 = v12;
            if ( ((unsigned __int8)v12 & 7) >= *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000)
              && *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) != 0
              || *(_BYTE *)((((unsigned __int64)&v12->second + 3) >> 3) + 0x7FFF8000) != 0
              && (((unsigned __int8)v12 + 7) & 7) >= *(_BYTE *)((((unsigned __int64)&v12->second + 3) >> 3) + 0x7FFF8000) )
            {
              __asan_report_load_n(v12, 8LL);
            }
            __in = *v13;
            key = std::get<0ul,unsigned int const,unsigned int>(&__in);
            v14 = std::get<1ul,unsigned int const,unsigned int>(&__in);
            value = v14;
            if ( *(_BYTE *)(((unsigned __int64)v14 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)v14 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v14 >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(v14);
            }
            v15 = *value;
            v16 = key;
            v17 = google::protobuf::Map<unsigned int,unsigned int>::operator[](finish_proto_map, key);
            v18 = v17;
            v19 = *(_BYTE *)(((unsigned __int64)v17 >> 3) + 0x7FFF8000);
            if ( v19 != 0 && (char)(((unsigned __int8)v17 & 7) + 3) >= v19 )
            {
              LOBYTE(v16) = v19 != 0;
              __asan_report_store4(v17, v16);
            }
            *v18 = v15;
            std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator++(&__for_begin);
          }
          __for_range_0 = (std::map<unsigned int,unsigned int> *)(v3 + 400);
          __for_begin._M_node = std::map<unsigned int,unsigned int>::begin((std::map<unsigned int,unsigned int> *const)(v3 + 400))._M_node;
          __for_end._M_node = std::map<unsigned int,unsigned int>::end(__for_range_0)._M_node;
          while ( std::operator!=(&__for_begin, &__for_end) )
          {
            v20 = std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator*(&__for_begin);
            v21 = v20;
            if ( ((unsigned __int8)v20 & 7) >= *(_BYTE *)(((unsigned __int64)v20 >> 3) + 0x7FFF8000)
              && *(_BYTE *)(((unsigned __int64)v20 >> 3) + 0x7FFF8000) != 0
              || *(_BYTE *)((((unsigned __int64)&v20->second + 3) >> 3) + 0x7FFF8000) != 0
              && (((unsigned __int8)v20 + 7) & 7) >= *(_BYTE *)((((unsigned __int64)&v20->second + 3) >> 3) + 0x7FFF8000) )
            {
              __asan_report_load_n(v20, 8LL);
            }
            __in = *v21;
            key_0 = std::get<0ul,unsigned int const,unsigned int>(&__in);
            v22 = std::get<1ul,unsigned int const,unsigned int>(&__in);
            value_0 = v22;
            if ( *(_BYTE *)(((unsigned __int64)v22 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)v22 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v22 >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(v22);
            }
            v23 = *value_0;
            v24 = key_0;
            v25 = google::protobuf::Map<unsigned int,unsigned int>::operator[](fail_proto_map, key_0);
            v26 = v25;
            v27 = *(_BYTE *)(((unsigned __int64)v25 >> 3) + 0x7FFF8000);
            if ( v27 != 0 && (char)(((unsigned __int8)v25 & 7) + 3) >= v27 )
            {
              LOBYTE(v24) = v27 != 0;
              __asan_report_store4(v25, v24);
            }
            *v26 = v23;
            std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator++(&__for_begin);
          }
          common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 32));
          common::minet::Packet::setTargetService(packet, 9u);
          common::minet::Packet::setProto<proto::SendOfflineMsgReq>(
            packet,
            (const proto::SendOfflineMsgReq *)(v3 + 256));
          v6 = 0;
          proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 256));
        }
      }
      std::map<unsigned int,unsigned int>::~map((std::map<unsigned int,unsigned int> *const)(v3 + 400));
      std::map<unsigned int,unsigned int>::~map((std::map<unsigned int,unsigned int> *const)(v3 + 320));
    }
  }
  std::string::~string((void *)(v3 + 192));
  std::string::~string((void *)(v3 + 128));
  std::string::~string((void *)(v3 + 64));
  result = v6;
  if ( v48 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF801C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8024) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF802C) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8038) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8038) = -168430091;
  }
  return result;
};

// Line 3381: range 000000000CBB75EC-000000000CBB77C4
int32_t __cdecl RequestHandler::addOrModifyWatcher(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:3382";
  *(_QWORD *)(v4 + 16) = RequestHandler::addOrModifyWatcher;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::addOrModifyWatcher(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::addOrModifyWatcher::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3382: range 000000000CBB720C-000000000CBB75EA
int32_t __cdecl RequestHandler::addOrModifyWatcher(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::addOrModifyWatcher::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-125h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-124h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-120h]
  proto::AddOrModifyWatcherOp *op; // [rsp+38h] [rbp-118h]
  char v14[272]; // [rsp+40h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 48 4 8 uid:3384 64 4 15 watcher_id:3385 80 4 13 progress:3386 96 32 11 ticket:3387 160 32 8 req:3401";
  *(_QWORD *)(v3 + 16) = RequestHandler::addOrModifyWatcher(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862724] = -218959118;
  v5[536862726] = -202116109;
  *(_DWORD *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 64) = 0;
  *(_DWORD *)(v3 + 80) = 0;
  std::string::basic_string(v3 + 96);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 160), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[11],unsigned int &,char const(&)[9],unsigned int &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 160),
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[11]>::type *)"watcher_id",
              (unsigned int *)(v3 + 64),
              (std::remove_reference<char const (&)[9]>::type *)"progress",
              (unsigned int *)(v3 + 80),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 96));
  std::string::~string((void *)(v3 + 160));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 96) )
  {
    v6 = 2012;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 48) )
      goto LABEL_12;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 48)) )
      v7 = 0;
    else
LABEL_12:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 160));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 96));
      op = proto::OfflineMsgBin::mutable_add_or_modify_watcher_op(msg);
      proto::AddOrModifyWatcherOp::set_watcher_id(op, *(_DWORD *)(v3 + 64));
      proto::AddOrModifyWatcherOp::set_progress(op, *(_DWORD *)(v3 + 80));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 48));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 160));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
    }
  }
  std::string::~string((void *)(v3 + 96));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 3416: range 000000000CBB7B50-000000000CBB7D28
int32_t __cdecl RequestHandler::delWatcher(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:3417";
  *(_QWORD *)(v4 + 16) = RequestHandler::delWatcher;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::delWatcher(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::delWatcher::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3417: range 000000000CBB77C6-000000000CBB7B4F
int32_t __cdecl RequestHandler::delWatcher(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::delWatcher::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-105h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-104h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-100h]
  proto::DelWatcherOp *op; // [rsp+38h] [rbp-F8h]
  char v14[240]; // [rsp+40h] [rbp-F0h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 4 8 uid:3419 48 4 15 watcher_id:3420 64 32 11 ticket:3421 128 32 8 req:3435";
  *(_QWORD *)(v3 + 16) = RequestHandler::delWatcher(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862723] = -218959118;
  v5[536862725] = -202116109;
  *(_DWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  std::string::basic_string(v3 + 64);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 128), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[11],unsigned int &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 128),
              (unsigned int *)(v3 + 32),
              (std::remove_reference<char const (&)[11]>::type *)"watcher_id",
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 64));
  std::string::~string((void *)(v3 + 128));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 64) )
  {
    v6 = 2012;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 32) )
      goto LABEL_12;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 32)) )
      v7 = 0;
    else
LABEL_12:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 128));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 128));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 64));
      op = proto::OfflineMsgBin::mutable_del_watcher_op(msg);
      proto::DelWatcherOp::set_watcher_id(op, *(_DWORD *)(v3 + 48));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 32));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 128));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 128));
    }
  }
  std::string::~string((void *)(v3 + 64));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3449: range 000000000CBB7D2A-000000000CBB876A
int32_t __cdecl RequestHandler::queryPlayerFriendList(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  int32_t v7; // r14d
  unsigned int *v8; // rax
  uint32_t *v9; // rdx
  Json::Value_0 *v10; // r14
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v11; // rax
  uint32_t *v12; // rdx
  Json::Value_0 *v13; // r14
  unsigned int *v14; // rax
  uint32_t *v15; // rdx
  Json::Value_0 *v16; // r14
  unsigned int *v17; // rax
  uint32_t *v18; // rdx
  Json::Value_0 *v19; // r14
  unsigned int *v20; // rax
  uint32_t *v21; // rdx
  Json::Value_0 *v22; // r14
  int32_t result; // eax
  int p_yielda; // [rsp+0h] [rbp-2C0h]
  Json::Value *jvala; // [rsp+8h] [rbp-2B8h]
  std::allocator<char> __a; // [rsp+2Fh] [rbp-291h] BYREF
  int32_t retcode; // [rsp+30h] [rbp-290h]
  uint32_t uid_3; // [rsp+34h] [rbp-28Ch]
  uint32_t uid_2; // [rsp+38h] [rbp-288h]
  uint32_t uid_1; // [rsp+3Ch] [rbp-284h]
  uint32_t uid_0; // [rsp+40h] [rbp-280h]
  uint32_t uid; // [rsp+44h] [rbp-27Ch]
  std::set<unsigned int>::iterator __for_begin; // [rsp+48h] [rbp-278h] BYREF
  std::set<unsigned int>::iterator __for_end; // [rsp+50h] [rbp-270h] BYREF
  std::set<unsigned int> *__for_range; // [rsp+58h] [rbp-268h]
  std::vector<unsigned int> *__for_range_0; // [rsp+60h] [rbp-260h]
  std::set<unsigned int> *__for_range_1; // [rsp+68h] [rbp-258h]
  std::set<unsigned int> *__for_range_2; // [rsp+70h] [rbp-250h]
  std::set<unsigned int> *__for_range_3; // [rsp+78h] [rbp-248h]
  std::string key; // [rsp+80h] [rbp-240h] BYREF
  Json::Value_0 v41; // [rsp+A0h] [rbp-220h] BYREF
  char v42[496]; // [rsp+D0h] [rbp-1F0h] BYREF

  jvala = jval;
  p_yielda = (int)p_yield;
  v4 = (unsigned __int64)v42;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(448LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "6 48 4 8 uid:3450 64 24 23 ask_add_friend_vec:3469 128 48 15 friend_set:3457 208 48 18 blacklist"
                        "_set:3481 288 48 19 psn_friend_set:3493 368 48 22 psn_blacklist_set:3505";
  *(_QWORD *)(v4 + 16) = RequestHandler::queryPlayerFriendList;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -234881024;
  v6[536862723] = -218959118;
  v6[536862725] = -219021312;
  v6[536862726] = 62194;
  v6[536862728] = -218959118;
  v6[536862730] = -219021312;
  v6[536862731] = 62194;
  v6[536862733] = -202116109;
  *(_DWORD *)(v4 + 48) = 0;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&key, off_1A660020, &__a);
  retcode = getRequestParam<unsigned int>(request, &key, (unsigned int *)(v4 + 48));
  std::string::~string(&key);
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v7 = retcode;
  }
  else
  {
    std::set<unsigned int>::set((std::set<unsigned int> *const)(v4 + 128));
    retcode = RedisOpSocialData::getPlayerFriendSet(*(_DWORD *)(v4 + 48), (std::set<unsigned int> *)(v4 + 128));
    if ( retcode )
    {
      v7 = retcode;
    }
    else
    {
      __for_range = (std::set<unsigned int> *)(v4 + 128);
      __for_begin._M_node = std::set<unsigned int>::begin((const std::set<unsigned int> *const)(v4 + 128))._M_node;
      __for_end._M_node = std::set<unsigned int>::end(__for_range)._M_node;
      while ( std::operator!=(&__for_begin, &__for_end) )
      {
        v8 = (unsigned int *)std::_Rb_tree_const_iterator<unsigned int>::operator*(&__for_begin);
        v9 = v8;
        if ( *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v8 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v8);
        }
        uid = *v9;
        v10 = Json::Value::operator[]((Json::Value_0 *const)jvala, "friend_list");
        Json::Value::Value((Json::Value *)&v41, uid);
        Json::Value::append(v10, &v41, p_yielda, (char)jvala);
        Json::Value::~Value(&v41);
        std::_Rb_tree_const_iterator<unsigned int>::operator++(&__for_begin);
      }
      std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v4 + 64));
      retcode = RedisOpSocialData::getPlayerAskFriendList(*(_DWORD *)(v4 + 48), (std::vector<unsigned int> *)(v4 + 64));
      if ( retcode )
      {
        v7 = retcode;
      }
      else
      {
        __for_range_0 = (std::vector<unsigned int> *)(v4 + 64);
        __for_begin._M_node = (std::_Rb_tree_const_iterator<unsigned int>::_Base_ptr)std::vector<unsigned int>::begin((std::vector<unsigned int> *const)(v4 + 64))._M_current;
        __for_end._M_node = (std::_Rb_tree_const_iterator<unsigned int>::_Base_ptr)std::vector<unsigned int>::end(__for_range_0)._M_current;
        while ( __gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(
                  (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)&__for_begin,
                  (const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *)&__for_end) )
        {
          v11 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*((const __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)&__for_begin);
          v12 = v11;
          if ( *(_BYTE *)(((unsigned __int64)v11 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v11 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v11 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v11);
          }
          uid_0 = *v12;
          v13 = Json::Value::operator[]((Json::Value_0 *const)jvala, "ask_add_friend_list");
          Json::Value::Value((Json::Value *)&v41, uid_0);
          Json::Value::append(v13, &v41, p_yielda, (char)jvala);
          Json::Value::~Value(&v41);
          __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++((__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> > *const)&__for_begin);
        }
        std::set<unsigned int>::set((std::set<unsigned int> *const)(v4 + 208));
        retcode = RedisOpSocialData::getPlayerBlacklistSet(*(_DWORD *)(v4 + 48), (std::set<unsigned int> *)(v4 + 208));
        if ( retcode )
        {
          v7 = retcode;
        }
        else
        {
          __for_range_1 = (std::set<unsigned int> *)(v4 + 208);
          __for_begin._M_node = std::set<unsigned int>::begin((const std::set<unsigned int> *const)(v4 + 208))._M_node;
          __for_end._M_node = std::set<unsigned int>::end(__for_range_1)._M_node;
          while ( std::operator!=(&__for_begin, &__for_end) )
          {
            v14 = (unsigned int *)std::_Rb_tree_const_iterator<unsigned int>::operator*(&__for_begin);
            v15 = v14;
            if ( *(_BYTE *)(((unsigned __int64)v14 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)v14 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v14 >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(v14);
            }
            uid_1 = *v15;
            v16 = Json::Value::operator[]((Json::Value_0 *const)jvala, "blacklist");
            Json::Value::Value((Json::Value *)&v41, uid_1);
            Json::Value::append(v16, &v41, p_yielda, (char)jvala);
            Json::Value::~Value(&v41);
            std::_Rb_tree_const_iterator<unsigned int>::operator++(&__for_begin);
          }
          std::set<unsigned int>::set((std::set<unsigned int> *const)(v4 + 288));
          retcode = RedisOpSocialData::getPlayerPSNFriendSet(*(_DWORD *)(v4 + 48), (std::set<unsigned int> *)(v4 + 288));
          if ( retcode )
          {
            v7 = retcode;
          }
          else
          {
            __for_range_2 = (std::set<unsigned int> *)(v4 + 288);
            __for_begin._M_node = std::set<unsigned int>::begin((const std::set<unsigned int> *const)(v4 + 288))._M_node;
            __for_end._M_node = std::set<unsigned int>::end(__for_range_2)._M_node;
            while ( std::operator!=(&__for_begin, &__for_end) )
            {
              v17 = (unsigned int *)std::_Rb_tree_const_iterator<unsigned int>::operator*(&__for_begin);
              v18 = v17;
              if ( *(_BYTE *)(((unsigned __int64)v17 >> 3) + 0x7FFF8000) != 0
                && (char)(((unsigned __int8)v17 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v17 >> 3) + 0x7FFF8000) )
              {
                __asan_report_load4(v17);
              }
              uid_2 = *v18;
              v19 = Json::Value::operator[]((Json::Value_0 *const)jvala, "psn_friend_list");
              Json::Value::Value((Json::Value *)&v41, uid_2);
              Json::Value::append(v19, &v41, p_yielda, (char)jvala);
              Json::Value::~Value(&v41);
              std::_Rb_tree_const_iterator<unsigned int>::operator++(&__for_begin);
            }
            std::set<unsigned int>::set((std::set<unsigned int> *const)(v4 + 368));
            retcode = RedisOpSocialData::getPlayerPSNBlacklistSet(
                        *(_DWORD *)(v4 + 48),
                        (std::set<unsigned int> *)(v4 + 368));
            if ( retcode )
            {
              v7 = retcode;
            }
            else
            {
              __for_range_3 = (std::set<unsigned int> *)(v4 + 368);
              __for_begin._M_node = std::set<unsigned int>::begin((const std::set<unsigned int> *const)(v4 + 368))._M_node;
              __for_end._M_node = std::set<unsigned int>::end(__for_range_3)._M_node;
              while ( std::operator!=(&__for_begin, &__for_end) )
              {
                v20 = (unsigned int *)std::_Rb_tree_const_iterator<unsigned int>::operator*(&__for_begin);
                v21 = v20;
                if ( *(_BYTE *)(((unsigned __int64)v20 >> 3) + 0x7FFF8000) != 0
                  && (char)(((unsigned __int8)v20 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v20 >> 3) + 0x7FFF8000) )
                {
                  __asan_report_load4(v20);
                }
                uid_3 = *v21;
                v22 = Json::Value::operator[]((Json::Value_0 *const)jvala, "psn_blacklist");
                Json::Value::Value((Json::Value *)&v41, uid_3);
                Json::Value::append(v22, &v41, p_yielda, (char)jvala);
                Json::Value::~Value(&v41);
                std::_Rb_tree_const_iterator<unsigned int>::operator++(&__for_begin);
              }
              v7 = 0;
            }
            std::set<unsigned int>::~set((std::set<unsigned int> *const)(v4 + 368));
          }
          std::set<unsigned int>::~set((std::set<unsigned int> *const)(v4 + 288));
        }
        std::set<unsigned int>::~set((std::set<unsigned int> *const)(v4 + 208));
      }
      std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v4 + 64));
    }
    std::set<unsigned int>::~set((std::set<unsigned int> *const)(v4 + 128));
  }
  result = v7;
  if ( v42 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8014) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8020) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8034) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3522: range 000000000CBB876C-000000000CBB8E5C
int32_t __cdecl RequestHandler::queryOrderDataByUid(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  int32_t v7; // r14d
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  Json::Value *v18; // rax
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-1D5h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-1D4h]
  std::vector<TableOrderData>::iterator __for_begin; // [rsp+30h] [rbp-1D0h] BYREF
  std::vector<TableOrderData>::iterator __for_end; // [rsp+38h] [rbp-1C8h] BYREF
  std::vector<TableOrderData> *__for_range; // [rsp+40h] [rbp-1C0h]
  const TableOrderData *row; // [rsp+48h] [rbp-1B8h]
  std::string key; // [rsp+50h] [rbp-1B0h] BYREF
  char v28[400]; // [rsp+70h] [rbp-190h] BYREF

  v4 = (unsigned __int64)v28;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(352LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "7 32 4 8 uid:3523 48 4 15 begin_time:3531 64 4 13 end_time:3532 80 24 12 row_vec:3544 144 32 21 "
                        "begin_trade_time:3524 208 32 19 end_trade_time:3524 272 40 15 order_json:3552";
  *(_QWORD *)(v4 + 16) = RequestHandler::queryOrderDataByUid;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862722] = 61956;
  v6[536862723] = -218959360;
  v6[536862724] = 62194;
  v6[536862725] = -219021312;
  v6[536862726] = 62194;
  v6[536862727] = -219021312;
  v6[536862728] = 62194;
  v6[536862729] = -218103808;
  v6[536862730] = -202116109;
  *(_DWORD *)(v4 + 32) = 0;
  std::string::basic_string(v4 + 144);
  std::string::basic_string(v4 + 208);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&key, off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[17],std::string &,char const(&)[15],std::string &>(
              request,
              &key,
              (unsigned int *)(v4 + 32),
              (std::remove_reference<char const (&)[17]>::type *)"begin_trade_time",
              (std::string *)(v4 + 144),
              (std::remove_reference<char const (&)[15]>::type *)"end_trade_time",
              (std::string *)(v4 + 208));
  std::string::~string(&key);
  std::allocator<char>::~allocator(&__a);
  if ( !retcode && *(_DWORD *)(v4 + 32) )
  {
    *(_DWORD *)(v4 + 48) = common::tools::TimeUtils::getTimeByStr((const std::string *)(v4 + 144));
    *(_DWORD *)(v4 + 64) = common::tools::TimeUtils::getTimeByStr((const std::string *)(v4 + 208));
    if ( *(_DWORD *)(v4 + 48) && *(_DWORD *)(v4 + 64) )
    {
      if ( *(_DWORD *)(v4 + 48) < *(_DWORD *)(v4 + 64) )
      {
        std::vector<TableOrderData>::vector((std::vector<TableOrderData> *const)(v4 + 80));
        if ( MysqlOpOrder::selectOrderByUid(
               *(_DWORD *)(v4 + 32),
               *(_DWORD *)(v4 + 48),
               *(_DWORD *)(v4 + 64),
               (std::vector<TableOrderData> *)(v4 + 80)) )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&key,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/handler/request_handler.api.hpp",
            "queryOrderDataByUid",
            3547);
          v13 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                  (common::milog::MiLogStream *const)&key,
                  (const char (*)[29])"selectOrderByUid fails, uid:");
          v14 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v13,
                  (const unsigned int *)(v4 + 32));
          v15 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v14, (const char (*)[13])" begin_time:");
          v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v15,
                  (const unsigned int *)(v4 + 48));
          v17 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v16, (const char (*)[11])" end_time:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(v4 + 64));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
          v7 = 1;
        }
        else
        {
          __for_range = (std::vector<TableOrderData> *)(v4 + 80);
          __for_begin._M_current = std::vector<TableOrderData>::begin((std::vector<TableOrderData> *const)(v4 + 80))._M_current;
          __for_end._M_current = std::vector<TableOrderData>::end(__for_range)._M_current;
          while ( __gnu_cxx::operator!=<TableOrderData *,std::vector<TableOrderData>>(&__for_begin, &__for_end) )
          {
            row = __gnu_cxx::__normal_iterator<TableOrderData *,std::vector<TableOrderData>>::operator*(&__for_begin);
            Json::Value::Value(v4 + 272, 0LL);
            RequestHandler::parseTableOrderData(this, 1, row, (Json::Value *)(v4 + 272));
            v18 = (Json::Value *)Json::Value::operator[]((Json::Value_0 *const)jval, "order_list");
            Json::Value::append(v18, (const Json::Value *)(v4 + 272));
            Json::Value::~Value((Json::Value_0 *const)(v4 + 272));
            __gnu_cxx::__normal_iterator<TableOrderData *,std::vector<TableOrderData>>::operator++(&__for_begin);
          }
          v7 = 0;
        }
        std::vector<TableOrderData>::~vector((std::vector<TableOrderData> *const)(v4 + 80));
      }
      else
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&key,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/handler/request_handler.api.hpp",
          "queryOrderDataByUid",
          3540);
        v11 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(
                (common::milog::MiLogStream *const)&key,
                (const char (*)[6])"uid: ");
        v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v11,
                (const unsigned int *)(v4 + 32));
        common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
          v12,
          (const char (*)[27])" begin_time: >= end_time: ");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
        v7 = 1002;
      }
    }
    else
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "queryOrderDataByUid",
        3535);
      v8 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
             (common::milog::MiLogStream *const)&key,
             (const char (*)[15])"format error: ");
      v9 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, (const std::string *)(v4 + 144));
      v10 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v9, (const char (*)[2])" ");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v10, (const std::string *)(v4 + 208));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      v7 = 1002;
    }
  }
  else
  {
    v7 = 1002;
  }
  std::string::~string((void *)(v4 + 208));
  std::string::~string((void *)(v4 + 144));
  result = v7;
  if ( v28 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8028) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 3561: range 000000000CBB8E5E-000000000CBB9223
int32_t __cdecl RequestHandler::queryOrderDataByTradeNo(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // rbx
  int32_t v7; // r14d
  common::milog::MiLogStream *v8; // rax
  int32_t result; // eax
  int32_t retcode; // [rsp+2Ch] [rbp-3B4h]
  std::string key; // [rsp+30h] [rbp-3B0h] BYREF
  char v13[912]; // [rsp+50h] [rbp-390h] BYREF

  v4 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_4(864LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 48 1 13 is_exist:3569 64 32 13 trade_no:3562 128 600 8 row:3568";
  *(_QWORD *)(v4 + 16) = RequestHandler::queryOrderDataByTradeNo;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234753551;
  v6[536862723] = -218959118;
  v6[536862742] = -218103808;
  v6[536862743] = -202116109;
  v6[536862744] = -202116109;
  v6[536862745] = -202116109;
  v6[536862746] = -202116109;
  std::string::basic_string(v4 + 64);
  std::allocator<char>::allocator(v4 + 48);
  std::string::basic_string<std::allocator<char>>(&key, "trade_no", (const std::allocator<char> *)(v4 + 48));
  retcode = getRequestParam<std::string>(request, &key, (std::string *)(v4 + 64));
  std::string::~string(&key);
  std::allocator<char>::~allocator(v4 + 48);
  if ( retcode )
  {
    v7 = retcode;
  }
  else
  {
    TableOrderData::TableOrderData((TableOrderData *const)(v4 + 128));
    *(_BYTE *)(v4 + 48) = 0;
    if ( MysqlOpOrder::selectOrderByTradeNo(
           (const std::string *)(v4 + 64),
           (TableOrderData *)(v4 + 128),
           (bool *)(v4 + 48)) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "queryOrderDataByTradeNo",
        3572);
      v8 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
             (common::milog::MiLogStream *const)&key,
             (const char (*)[38])"selectOrderByTradeNo fails, trade_no:");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, (const std::string *)(v4 + 64));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      v7 = 1;
    }
    else
    {
      RequestHandler::parseTableOrderData(this, *(_BYTE *)(v4 + 48), (const TableOrderData *)(v4 + 128), jval);
      v7 = 0;
    }
    TableOrderData::~TableOrderData((TableOrderData *const)(v4 + 128));
  }
  std::string::~string((void *)(v4 + 64));
  result = v7;
  if ( v13 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF800C) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8058) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8060) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8068) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8060) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8068) = -168430091;
  }
  return result;
};

// Line 3580: range 000000000CBB9224-000000000CBB9F90
void __cdecl RequestHandler::parseTableOrderData(
        RequestHandler *const this,
        bool is_exist,
        const TableOrderData *row,
        Json::Value *jval)
{
  Json::Value_0 *v4; // rax
  Json::Value_0 *v5; // rax
  Json::Value_0 *v6; // rax
  Json::Value_0 *v7; // rax
  Json::Value_0 *v8; // rax
  Json::Value_0 *v9; // rax
  Json::Value_0 *v10; // rax
  Json::Value_0 *v11; // rax
  Json::Value_0 *v12; // rax
  Json::Value_0 *v13; // rax
  Json::Value_0 *v14; // rax
  Json::Value_0 *v15; // rax
  Json::Value_0 *v16; // rax
  Json::Value_0 *v17; // rax
  Json::Value_0 *v18; // rax
  Json::Value_0 *v19; // rax
  Json::Value_0 *v20; // rax
  Json::Value_0 *v21; // rax
  Json::Value_0 *v22; // rax
  Json::Value_0 *v23; // rax
  Json::Value_0 *v24; // rax
  Json::Value_0 *v25; // rax
  Json::Value_0 *v26; // rax
  Json::Value_0 *v27; // rax
  Json::Value_0 *v28; // rax
  Json::Value_0 *v29; // rax
  Json::Value_0 *v30; // rax
  std::string v33; // [rsp+20h] [rbp-60h] BYREF
  Json::Value_0 other; // [rsp+40h] [rbp-40h] BYREF

  Json::Value::Value((Json::Value *)&other, is_exist);
  v4 = Json::Value::operator[]((Json::Value_0 *const)jval, "is_exist");
  Json::Value::operator=(v4, &other);
  Json::Value::~Value(&other);
  if ( is_exist )
  {
    if ( *(_BYTE *)(((unsigned __int64)row >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)row >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(row);
    }
    Json::Value::Value((Json::Value *)&other, row->id);
    v5 = Json::Value::operator[]((Json::Value_0 *const)jval, "order_id");
    Json::Value::operator=(v5, &other);
    Json::Value::~Value(&other);
    if ( *(_BYTE *)(((unsigned __int64)&row->uid >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)row + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&row->uid >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(&row->uid);
    }
    Json::Value::Value((Json::Value *)&other, row->uid);
    v6 = Json::Value::operator[]((Json::Value_0 *const)jval, off_1A660020);
    Json::Value::operator=(v6, &other);
    Json::Value::~Value(&other);
    Json::Value::Value(&other, &row->product_id);
    v7 = Json::Value::operator[]((Json::Value_0 *const)jval, "product_id");
    Json::Value::operator=(v7, &other);
    Json::Value::~Value(&other);
    Json::Value::Value(&other, &row->product_name);
    v8 = Json::Value::operator[]((Json::Value_0 *const)jval, "product_name");
    Json::Value::operator=(v8, &other);
    Json::Value::~Value(&other);
    if ( *(_BYTE *)(((unsigned __int64)&row->product_num >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&row->product_num >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&row->product_num);
    }
    Json::Value::Value((Json::Value *)&other, row->product_num);
    v9 = Json::Value::operator[]((Json::Value_0 *const)jval, "product_num");
    Json::Value::operator=(v9, &other);
    Json::Value::~Value(&other);
    if ( *(_BYTE *)(((unsigned __int64)&row->coin_num >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)row + 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&row->coin_num >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(&row->coin_num);
    }
    Json::Value::Value((Json::Value *)&other, row->coin_num);
    v10 = Json::Value::operator[]((Json::Value_0 *const)jval, "coin_num");
    Json::Value::operator=(v10, &other);
    Json::Value::~Value(&other);
    Json::Value::Value(&other, &row->total_fee);
    v11 = Json::Value::operator[]((Json::Value_0 *const)jval, "total_fee");
    Json::Value::operator=(v11, &other);
    Json::Value::~Value(&other);
    Json::Value::Value(&other, &row->currency);
    v12 = Json::Value::operator[]((Json::Value_0 *const)jval, "currency");
    Json::Value::operator=(v12, &other);
    Json::Value::~Value(&other);
    Json::Value::Value(&other, &row->price_tier);
    v13 = Json::Value::operator[]((Json::Value_0 *const)jval, "price_tier");
    Json::Value::operator=(v13, &other);
    Json::Value::~Value(&other);
    Json::Value::Value(&other, &row->trade_no);
    v14 = Json::Value::operator[]((Json::Value_0 *const)jval, "trade_no");
    Json::Value::operator=(v14, &other);
    Json::Value::~Value(&other);
    if ( *(_BYTE *)(((unsigned __int64)&row->trade_time >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&row->trade_time >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&row->trade_time);
    }
    Json::Value::Value((Json::Value *)&other, row->trade_time);
    v15 = Json::Value::operator[]((Json::Value_0 *const)jval, "trade_time");
    Json::Value::operator=(v15, &other);
    Json::Value::~Value(&other);
    if ( *(_BYTE *)(((unsigned __int64)&row->channel_id >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)row - 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&row->channel_id >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(&row->channel_id);
    }
    Json::Value::Value((Json::Value *)&other, row->channel_id);
    v16 = Json::Value::operator[]((Json::Value_0 *const)jval, "channel_id");
    Json::Value::operator=(v16, &other);
    Json::Value::~Value(&other);
    Json::Value::Value(&other, &row->channel_order_no);
    v17 = Json::Value::operator[]((Json::Value_0 *const)jval, "channel_order_no");
    Json::Value::operator=(v17, &other);
    Json::Value::~Value(&other);
    Json::Value::Value(&other, &row->pay_plat);
    v18 = Json::Value::operator[]((Json::Value_0 *const)jval, "pay_plat");
    Json::Value::operator=(v18, &other);
    Json::Value::~Value(&other);
    Json::Value::Value(&other, &row->env);
    v19 = Json::Value::operator[]((Json::Value_0 *const)jval, off_1A667CA0);
    Json::Value::operator=(v19, &other);
    Json::Value::~Value(&other);
    if ( *(_BYTE *)(((unsigned __int64)&row->is_sandbox >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&row->is_sandbox >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&row->is_sandbox);
    }
    Json::Value::Value((Json::Value *)&other, row->is_sandbox);
    v20 = Json::Value::operator[]((Json::Value_0 *const)jval, "is_sandbox");
    Json::Value::operator=(v20, &other);
    Json::Value::~Value(&other);
    if ( *(_BYTE *)(((unsigned __int64)&row->create_time >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&row->create_time >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&row->create_time);
    }
    common::tools::TimeUtils::getStrByTime[abi:cxx11](&v33, row->create_time);
    Json::Value::Value(&other, &v33);
    v21 = Json::Value::operator[]((Json::Value_0 *const)jval, "create_time");
    Json::Value::operator=(v21, &other);
    Json::Value::~Value(&other);
    std::string::~string(&v33);
    if ( *(_BYTE *)(((unsigned __int64)&row->finish_time >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)row - 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&row->finish_time >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(&row->finish_time);
    }
    Json::Value::Value((Json::Value *)&other, row->finish_time);
    v22 = Json::Value::operator[]((Json::Value_0 *const)jval, "finish_time");
    Json::Value::operator=(v22, &other);
    Json::Value::~Value(&other);
    Json::Value::Value(&other, &row->bonus);
    v23 = Json::Value::operator[]((Json::Value_0 *const)jval, "bonus");
    Json::Value::operator=(v23, &other);
    Json::Value::~Value(&other);
    if ( *(_BYTE *)(((unsigned __int64)&row->bonus_num >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&row->bonus_num >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&row->bonus_num);
    }
    Json::Value::Value((Json::Value *)&other, row->bonus_num);
    v24 = Json::Value::operator[]((Json::Value_0 *const)jval, "bonus_num");
    Json::Value::operator=(v24, &other);
    Json::Value::~Value(&other);
    if ( *(_BYTE *)(((unsigned __int64)&row->vip_point_num >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)row - 92) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&row->vip_point_num >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(&row->vip_point_num);
    }
    Json::Value::Value((Json::Value *)&other, row->vip_point_num);
    v25 = Json::Value::operator[]((Json::Value_0 *const)jval, "vip_point_num");
    Json::Value::operator=(v25, &other);
    Json::Value::~Value(&other);
    Json::Value::Value(&other, &row->pay_type);
    v26 = Json::Value::operator[]((Json::Value_0 *const)jval, "pay_type");
    Json::Value::operator=(v26, &other);
    Json::Value::~Value(&other);
    Json::Value::Value(&other, &row->pay_vendor);
    v27 = Json::Value::operator[]((Json::Value_0 *const)jval, "pay_vendor");
    Json::Value::operator=(v27, &other);
    Json::Value::~Value(&other);
    Json::Value::Value(&other, &row->client_type);
    v28 = Json::Value::operator[]((Json::Value_0 *const)jval, "client_type");
    Json::Value::operator=(v28, &other);
    Json::Value::~Value(&other);
    Json::Value::Value(&other, &row->device);
    v29 = Json::Value::operator[]((Json::Value_0 *const)jval, "device");
    Json::Value::operator=(v29, &other);
    Json::Value::~Value(&other);
    Json::Value::Value(&other, &row->client_ip);
    v30 = Json::Value::operator[]((Json::Value_0 *const)jval, "client_ip");
    Json::Value::operator=(v30, &other);
    Json::Value::~Value(&other);
  }
};

// Line 3616: range 000000000CBBA240-000000000CBBA9C6
int32_t __cdecl RequestHandler::finishOrder(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  const char (*v7)[7]; // r9
  int32_t v8; // r14d
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  int32_t result; // eax
  bool v19; // [rsp+Fh] [rbp-451h]
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+40h] [rbp-420h] BYREF
  std::string key; // [rsp+60h] [rbp-400h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v24; // [rsp+80h] [rbp-3E0h] BYREF
  char v25[944]; // [rsp+B0h] [rbp-3B0h] BYREF

  v4 = (unsigned __int64)v25;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_4(896LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "5 32 1 13 is_exist:3625 48 4 13 order_id:3617 64 16 18 make_req_func:3649 96 32 11 ticket:3618 1"
                        "60 600 8 row:3624";
  *(_QWORD *)(v4 + 16) = RequestHandler::finishOrder;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556927;
  v6[536862722] = -219021312;
  v6[536862724] = -218959118;
  v6[536862743] = -218103808;
  v6[536862744] = -202116109;
  v6[536862745] = -202116109;
  v6[536862746] = -202116109;
  v6[536862747] = -202116109;
  *(_DWORD *)(v4 + 48) = 0;
  std::string::basic_string(v4 + 96);
  std::allocator<char>::allocator(v4 + 32);
  std::string::basic_string<std::allocator<char>>(&key, "order_id", (const std::allocator<char> *)(v4 + 32));
  v19 = (unsigned int)getRequestParam<unsigned int,char const(&)[7],std::string &>(
                        request,
                        &key,
                        (unsigned int *)(v4 + 48),
                        (std::remove_reference<char const (&)[7]>::type *)"ticket",
                        (std::string *)(v4 + 96),
                        v7)
     || !*(_DWORD *)(v4 + 48)
     || (unsigned __int8)std::string::empty(v4 + 96);
  std::string::~string(&key);
  std::allocator<char>::~allocator(v4 + 32);
  if ( v19 )
  {
    v8 = 1002;
  }
  else
  {
    TableOrderData::TableOrderData((TableOrderData *const)(v4 + 160));
    *(_BYTE *)(v4 + 32) = 0;
    if ( MysqlOpOrder::selectOrder(*(_DWORD *)(v4 + 48), (TableOrderData *)(v4 + 160), (bool *)(v4 + 32)) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "finishOrder",
        3628);
      v9 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
             (common::milog::MiLogStream *const)&key,
             (const char (*)[29])"selectOrder fails, order_id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v4 + 48));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      v8 = 1;
    }
    else if ( *(_BYTE *)(v4 + 32) != 1 )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "finishOrder",
        3633);
      v10 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(
              (common::milog::MiLogStream *const)&key,
              (const char (*)[10])"order_id:");
      v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v4 + 48));
      common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v11, (const char (*)[11])" not exist");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      v8 = 2004;
    }
    else if ( *(_DWORD *)(v4 + 588) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "finishOrder",
        3638);
      v12 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(
              (common::milog::MiLogStream *const)&key,
              (const char (*)[10])"order_id:");
      v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v4 + 48));
      v14 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v13, (const char (*)[11])" finished:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, (const unsigned int *)(v4 + 588));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      v8 = 2018;
    }
    else
    {
      common::tools::TimeUtils::getNow();
      if ( common::tools::TimeUtils::getNow() - 2591999 > *(unsigned int *)(v4 + 584) )
      {
        *(_QWORD *)(v4 + 64) = v4 + 160;
        *(_QWORD *)(v4 + 72) = v4 + 96;
        boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
          &v24,
          p_yield);
        std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
          (std::function<int(common::minet::Packet&,Json::Value&)> *const)&key,
          (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
        std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::finishOrder(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
          &p_make_req,
          *(RequestHandler::finishOrder::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 64));
        v8 = RequestHandler::processRequestOnOtherServer(
               this,
               &p_make_req,
               (RequestHandler::MakeRspFunc *)&key,
               request,
               jval,
               &v24);
        std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
        std::function<int ()(common::minet::Packet &,Json::Value &)>::~function((std::function<int(common::minet::Packet&,Json::Value&)> *const)&key);
        boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v24);
      }
      else
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&key,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/handler/request_handler.api.hpp",
          "finishOrder",
          3645);
        v15 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(
                (common::milog::MiLogStream *const)&key,
                (const char (*)[10])"order_id:");
        v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v15,
                (const unsigned int *)(v4 + 48));
        v17 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
                v16,
                (const char (*)[35])" no need muip finish, create_time:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(v4 + 584));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
        v8 = 2019;
      }
    }
    TableOrderData::~TableOrderData((TableOrderData *const)(v4 + 160));
  }
  std::string::~string((void *)(v4 + 96));
  result = v8;
  if ( v25 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF805C) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8064) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF806C) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8060) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8068) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3649: range 000000000CBB9F92-000000000CBBA23E
int32_t __cdecl RequestHandler::finishOrder(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::finishOrder::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  proto::SendOfflineMsgReq *v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  TableOrderData *row; // rax
  TableOrderData *v7; // rdx
  char v8; // cl
  int32_t result; // eax
  proto::OfflineMsgBin *msg; // [rsp+20h] [rbp-A0h]
  proto::FinishOrderOp *op; // [rsp+28h] [rbp-98h]
  char v13[144]; // [rsp+30h] [rbp-90h] BYREF

  v3 = (proto::SendOfflineMsgReq *)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = (proto::SendOfflineMsgReq *)v4;
  }
  v3->_vptr_MessageLite = (int (**)(...))1102416563;
  v3->_internal_metadata_.ptr_ = "1 32 32 8 req:3651";
  v3->msg_ = (proto::OfflineMsgBin *)RequestHandler::finishOrder(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (unsigned __int64)v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450888) = -202116109;
  proto::SendOfflineMsgReq::SendOfflineMsgReq(v3 + 1);
  msg = proto::SendOfflineMsgReq::mutable_msg(v3 + 1);
  if ( *(_BYTE *)(((unsigned __int64)&__closure->__ticket >> 3) + 0x7FFF8000) )
    __asan_report_load8(&__closure->__ticket);
  proto::OfflineMsgBin::set_ticket(msg, __closure->__ticket);
  op = proto::OfflineMsgBin::mutable_finish_order_op(msg);
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8(__closure);
  row = __closure->__row;
  if ( *(_BYTE *)(((unsigned __int64)__closure->__row >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)__closure->__row >> 3) + 0x7FFF8000) <= 3 )
  {
    row = (TableOrderData *)__asan_report_load4(__closure->__row);
  }
  proto::FinishOrderOp::set_order_id(op, row->id);
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8(__closure);
  v7 = __closure->__row;
  v8 = *(_BYTE *)(((unsigned __int64)&__closure->__row->uid >> 3) + 0x7FFF8000);
  if ( v8 != 0 && (char)(((LOBYTE(__closure->__row) + 4) & 7) + 3) >= v8 )
    __asan_report_load4(&__closure->__row->uid);
  common::minet::Packet::setUserId(packet, v7->uid);
  common::minet::Packet::setTargetService(packet, 9u);
  common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, v3 + 1);
  proto::SendOfflineMsgReq::~SendOfflineMsgReq(v3 + 1);
  result = 0;
  if ( v13 == (char *)v3 )
  {
    *(_DWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    v3->_vptr_MessageLite = (int (**)(...))1172321806;
    *(_QWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 3666: range 000000000CBBA9C8-000000000CBBB3B4
int32_t __cdecl RequestHandler::AntiAddictNotify(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  int32_t v7; // r14d
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // r14
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // r14
  const std::string *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // r14
  const std::string *v26; // rax
  common::minet::Packet *v27; // rax
  common::minet::Packet *v28; // rax
  common::minet::Packet *v29; // rax
  MuipserverService *v30; // r14
  unsigned __int64 v31; // rdx
  std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v32; // rax
  std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v33; // r14
  unsigned __int64 v34; // rax
  __int64 (__fastcall *v35)(std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::shared_ptr<common::minet::Packet> *); // r15
  Json::Value_0 *v36; // rax
  int32_t result; // eax
  int val; // [rsp+34h] [rbp-2BCh] BYREF
  int32_t retcode; // [rsp+38h] [rbp-2B8h]
  int ret; // [rsp+3Ch] [rbp-2B4h]
  std::shared_ptr<common::minet::Packet> packet_ptr; // [rsp+40h] [rbp-2B0h] BYREF
  std::string key; // [rsp+50h] [rbp-2A0h] BYREF
  Json::Value_0 other; // [rsp+70h] [rbp-280h] BYREF
  char v45[592]; // [rsp+A0h] [rbp-250h] BYREF

  v4 = (unsigned __int64)v45;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_4(544LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "9 32 1 21 is_account_exist:3680 48 4 13 msg_type:3667 64 4 17 account_type:3668 80 16 15 packet_"
                        "ptr:3707 112 32 16 account_uid:3669 176 32 8 msg:3670 240 32 10 level:3671 304 40 8 req:3694 384 120 8 row:3681";
  *(_QWORD *)(v4 + 16) = RequestHandler::AntiAddictNotify;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556927;
  v6[536862722] = 61956;
  v6[536862723] = 62194;
  v6[536862724] = -219021312;
  v6[536862725] = 62194;
  v6[536862726] = -219021312;
  v6[536862727] = 62194;
  v6[536862728] = -219021312;
  v6[536862729] = 62194;
  v6[536862730] = -234881024;
  v6[536862731] = -218959118;
  v6[536862735] = -218103808;
  v6[536862736] = -202116109;
  std::string::basic_string(v4 + 112);
  std::string::basic_string(v4 + 176);
  std::string::basic_string(v4 + 240);
  std::allocator<char>::allocator(v4 + 32);
  std::string::basic_string<std::allocator<char>>(&key, "msg_type", (const std::allocator<char> *)(v4 + 32));
  retcode = getRequestParam<unsigned int,char const(&)[13],unsigned int &,char const(&)[12],std::string &,char const(&)[4],std::string &,char const(&)[6],std::string &>(
              request,
              &key,
              (unsigned int *)(v4 + 48),
              (std::remove_reference<char const (&)[13]>::type *)"account_type",
              (unsigned int *)(v4 + 64),
              "account_uid",
              (std::string *)(v4 + 112),
              (std::remove_reference<char const (&)[4]>::type *)off_1A662A20,
              (std::string *)(v4 + 176),
              (std::remove_reference<char const (&)[6]>::type *)"level",
              (std::string *)(v4 + 240));
  std::string::~string(&key);
  std::allocator<char>::~allocator(v4 + 32);
  if ( retcode )
  {
    v7 = retcode;
  }
  else
  {
    *(_BYTE *)(v4 + 32) = 0;
    TablePlayerUid::TablePlayerUid((TablePlayerUid *const)(v4 + 384));
    retcode = MysqlOpPlayerData::selectPlayerUidByAccount(
                *(_DWORD *)(v4 + 64),
                (const std::string *)(v4 + 112),
                (TablePlayerUid *)(v4 + 384),
                (bool *)(v4 + 32));
    if ( retcode )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "AntiAddictNotify",
        3685);
      v8 = common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
             (common::milog::MiLogStream *const)&key,
             (const char (*)[47])"selectPlayerUidByAccount failed, account_type:");
      v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v4 + 64));
      v10 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v9, (const char (*)[14])" account_uid:");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v10, (const std::string *)(v4 + 112));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      v7 = -1;
    }
    else if ( *(_BYTE *)(v4 + 32) != 1 )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "AntiAddictNotify",
        3690);
      v11 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
              (common::milog::MiLogStream *const)&key,
              (const char (*)[35])"account is not exit, account_type:");
      v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v4 + 64));
      v13 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v12, (const char (*)[14])" account_uid:");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v13, (const std::string *)(v4 + 112));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      v7 = -1;
    }
    else
    {
      proto::PlatformAntiAddictNotify::PlatformAntiAddictNotify((proto::PlatformAntiAddictNotify *const)(v4 + 304));
      proto::PlatformAntiAddictNotify::set_msg_type(
        (proto::PlatformAntiAddictNotify *const)(v4 + 304),
        *(_DWORD *)(v4 + 48));
      proto::PlatformAntiAddictNotify::set_msg(
        (proto::PlatformAntiAddictNotify *const)(v4 + 304),
        (const std::string *)(v4 + 176));
      proto::PlatformAntiAddictNotify::set_level(
        (proto::PlatformAntiAddictNotify *const)(v4 + 304),
        (const std::string *)(v4 + 240));
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/handler/request_handler.api.hpp",
        "AntiAddictNotify",
        3699);
      v14 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
              (common::milog::MiLogStream *const)&key,
              (const char (*)[14])"account_uid: ");
      v15 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v14, (const std::string *)(v4 + 112));
      v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v15, (const char (*)[16])" account_type: ");
      v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, (const unsigned int *)(v4 + 64));
      v18 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v17, (const char (*)[7])" uid: ");
      v19 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
              v18,
              (const unsigned int *)(v4 + 384));
      v20 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v19, (const char (*)[12])" msg_type: ");
      val = proto::PlatformAntiAddictNotify::msg_type((const proto::PlatformAntiAddictNotify *const)(v4 + 304));
      v21 = common::milog::MiLogStream::operator<<<int,(int *)0>(v20, &val);
      v22 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v21, (const char (*)[7])" msg: ");
      v23 = proto::PlatformAntiAddictNotify::msg[abi:cxx11]((const proto::PlatformAntiAddictNotify *const)(v4 + 304));
      v24 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v22, v23);
      v25 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v24, (const char (*)[9])" level: ");
      v26 = proto::PlatformAntiAddictNotify::level[abi:cxx11]((const proto::PlatformAntiAddictNotify *const)(v4 + 304));
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v25, v26);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      common::minet::PacketUtils::createPacket();
      if ( std::operator==<common::minet::Packet>(0LL, (const std::shared_ptr<common::minet::Packet> *)(v4 + 80)) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&key,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/handler/request_handler.api.hpp",
          "AntiAddictNotify",
          3710);
        common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
          (common::milog::MiLogStream *const)&key,
          (const char (*)[19])"createPacket fails");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
        v7 = -1;
      }
      else
      {
        v27 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
        common::minet::Packet::setUserId(v27, *(_DWORD *)(v4 + 384));
        v28 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
        common::minet::Packet::setTargetService(v28, 3u);
        v29 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 80));
        common::minet::Packet::setProto<proto::PlatformAntiAddictNotify>(
          v29,
          (const proto::PlatformAntiAddictNotify *)(v4 + 304));
        v30 = ServiceBox::findService<MuipserverService>();
        std::shared_ptr<common::minet::Packet>::shared_ptr(
          &packet_ptr,
          (const std::shared_ptr<common::minet::Packet> *)(v4 + 80));
        ServiceBase::setPacketSource(v30, (common::minet::PacketPtr)__PAIR128__(v31, &packet_ptr));
        std::shared_ptr<common::minet::Packet>::~shared_ptr(&packet_ptr);
        v32 = std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false> *const)&ResourceBox::network_mgr_ptr);
        v33 = v32;
        if ( *(_BYTE *)(((unsigned __int64)v32 >> 3) + 0x7FFF8000) )
          __asan_report_load8(v32);
        v34 = (unsigned __int64)(v33->_vptr_NetworkMgrBase + 8);
        if ( *(_BYTE *)((v34 >> 3) + 0x7FFF8000) )
          v34 = __asan_report_load8(v33->_vptr_NetworkMgrBase + 8);
        v35 = *(__int64 (__fastcall **)(std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::shared_ptr<common::minet::Packet> *))v34;
        std::shared_ptr<common::minet::Packet>::shared_ptr(
          &packet_ptr,
          (const std::shared_ptr<common::minet::Packet> *)(v4 + 80));
        ret = v35(v33, &packet_ptr);
        std::shared_ptr<common::minet::Packet>::~shared_ptr(&packet_ptr);
        if ( ret )
        {
          v7 = ret;
        }
        else
        {
          Json::Value::Value((Json::Value *)&other, 0);
          v36 = Json::Value::operator[]((Json::Value_0 *const)jval, "retcode");
          Json::Value::operator=(v36, &other);
          Json::Value::~Value(&other);
          v7 = 0;
        }
      }
      std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v4 + 80));
      proto::PlatformAntiAddictNotify::~PlatformAntiAddictNotify((proto::PlatformAntiAddictNotify *const)(v4 + 304));
    }
    TablePlayerUid::~TablePlayerUid((TablePlayerUid *const)(v4 + 384));
  }
  std::string::~string((void *)(v4 + 240));
  std::string::~string((void *)(v4 + 176));
  std::string::~string((void *)(v4 + 112));
  result = v7;
  if ( v45 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF803C) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8040) = -168430091;
  }
  return result;
};

// Line 3734: range 000000000CBBB9C6-000000000CBBBB7B
int32_t __cdecl RequestHandler::delRedisMailByTicket(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 1 18 make_rsp_func:3763";
  *(_QWORD *)(v4 + 16) = RequestHandler::delRedisMailByTicket;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116351;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<RequestHandler::delRedisMailByTicket(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::Packet &,Json::Value &)#2},void,void>(
    &p_make_rsp,
    (RequestHandler::delRedisMailByTicket::<lambda(common::minet::Packet&, Json::Value&)>)p_yield);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::delRedisMailByTicket(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    (RequestHandler::delRedisMailByTicket::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)>)p_yield);
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3735: range 000000000CBBB3B6-000000000CBBB762
int32_t __cdecl RequestHandler::delRedisMailByTicket(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::delRedisMailByTicket::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  const char (*v6)[12]; // r9
  int32_t v7; // r14d
  common::milog::MiLogStream *v8; // rax
  std::__shared_ptr_access<proto::DelRedisMailReq,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  std::__shared_ptr_access<proto::DelRedisMailReq,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rax
  common::minet::ConstMessagePtr v11; // rdx
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-105h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-104h]
  std::shared_ptr<proto::DelRedisMailReq> __r; // [rsp+30h] [rbp-100h] BYREF
  std::string key; // [rsp+40h] [rbp-F0h] BYREF
  char v18[208]; // [rsp+60h] [rbp-D0h] BYREF

  v3 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(160LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 4 8 uid:3737 64 16 12 req_ptr:3754 96 32 11 ticket:3738";
  *(_QWORD *)(v3 + 16) = RequestHandler::delRedisMailByTicket(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -219021312;
  v5[536862724] = -202116109;
  *(_DWORD *)(v3 + 48) = 0;
  std::string::basic_string(v3 + 96);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&key, off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[12],std::string &>(
              http_request,
              &key,
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[12]>::type *)"mail_ticket",
              (std::string *)(v3 + 96),
              v6);
  std::string::~string(&key);
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v7 = retcode;
  }
  else if ( *(_DWORD *)(v3 + 48) )
  {
    if ( (unsigned __int8)std::string::empty(v3 + 96) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "operator()",
        3750);
      v8 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
             (common::milog::MiLogStream *const)&key,
             (const char (*)[23])"ticket is empty, uid: ");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v3 + 48));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      v7 = -1;
    }
    else
    {
      common::tools::perf::make_shared<proto::DelRedisMailReq>();
      v9 = std::__shared_ptr_access<proto::DelRedisMailReq,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::DelRedisMailReq,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      proto::DelRedisMailReq::set_op_type(v9, MAIL_DEL_OP_MUIP_BY_TICKET);
      v10 = std::__shared_ptr_access<proto::DelRedisMailReq,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::DelRedisMailReq,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 64));
      proto::DelRedisMailReq::add_ticket_list(v10, (const std::string *)(v3 + 96));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 48));
      common::minet::Packet::setTargetService(packet, 0xAu);
      std::dynamic_pointer_cast<google::protobuf::Message const,proto::DelRedisMailReq>(&__r);
      v11._M_ptr = (std::__shared_ptr<const google::protobuf::Message,(__gnu_cxx::_Lock_policy)2>::element_type *)&__r;
      common::minet::Packet::setMessagePtr(packet, 0x2848u, v11);
      std::shared_ptr<google::protobuf::Message const>::~shared_ptr((std::shared_ptr<const google::protobuf::Message> *const)&__r);
      v7 = 0;
      std::shared_ptr<proto::DelRedisMailReq>::~shared_ptr((std::shared_ptr<proto::DelRedisMailReq> *const)(v3 + 64));
    }
  }
  else
  {
    v7 = 2001;
  }
  std::string::~string((void *)(v3 + 96));
  result = v7;
  if ( v18 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 3763: range 000000000CBBB764-000000000CBBB9C5
int32_t __cdecl RequestHandler::delRedisMailByTicket(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::Packet &,Json::Value &)#2}::operator()(
        const RequestHandler::delRedisMailByTicket::<lambda(common::minet::Packet&, Json::Value&)> *const __closure,
        common::minet::Packet *rsp_packet,
        Json::Value *jval)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r13
  int32_t v6; // r14d
  std::__shared_ptr_access<const proto::DelRedisMailRsp,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  common::milog::MiLogStream *v8; // r14
  std::__shared_ptr_access<const proto::DelRedisMailRsp,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v9; // rax
  int32_t result; // eax
  int val; // [rsp+2Ch] [rbp-94h] BYREF
  common::milog::MiLogStream v12; // [rsp+30h] [rbp-90h] BYREF
  char v13[112]; // [rsp+50h] [rbp-70h] BYREF

  v3 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_0(64LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 32 16 12 rsp_ptr:3765";
  *(_QWORD *)(v3 + 16) = RequestHandler::delRedisMailByTicket(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::Packet &,Json::Value &)#2}::operator();
  v5 = v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450884) = -202178560;
  common::minet::Packet::getConstProto<proto::DelRedisMailRsp>((common::minet::Packet *const)(v3 + 32));
  if ( std::operator==<proto::DelRedisMailRsp const>(
         0LL,
         (const std::shared_ptr<const proto::DelRedisMailRsp> *)(v3 + 32)) )
  {
    common::milog::MiLogStream::create(
      &v12,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/handler/request_handler.api.hpp",
      "operator()",
      3768);
    common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(&v12, (const char (*)[22])"getConstProto<> fails");
    common::milog::MiLogStream::~MiLogStream(&v12);
    v6 = -1;
  }
  else
  {
    v7 = std::__shared_ptr_access<proto::DelRedisMailRsp const,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<const proto::DelRedisMailRsp,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
    if ( proto::DelRedisMailRsp::retcode(v7) )
    {
      common::milog::MiLogStream::create(
        &v12,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "operator()",
        3773);
      v8 = common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
             &v12,
             (const char (*)[29])"proto::DelRedisMailRsp ret: ");
      v9 = std::__shared_ptr_access<proto::DelRedisMailRsp const,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<const proto::DelRedisMailRsp,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 32));
      val = proto::DelRedisMailRsp::retcode(v9);
      common::milog::MiLogStream::operator<<<int,(int *)0>(v8, &val);
      common::milog::MiLogStream::~MiLogStream(&v12);
      v6 = 1;
    }
    else
    {
      v6 = 0;
    }
  }
  std::shared_ptr<proto::DelRedisMailRsp const>::~shared_ptr((std::shared_ptr<const proto::DelRedisMailRsp> *const)(v3 + 32));
  result = v6;
  if ( v13 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3782: range 000000000CBBC1F2-000000000CBBC3CA
int32_t __cdecl RequestHandler::addMcoinVipPoint(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:3783";
  *(_QWORD *)(v4 + 16) = RequestHandler::addMcoinVipPoint;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::addMcoinVipPoint(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::addMcoinVipPoint::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3783: range 000000000CBBBB7C-000000000CBBC1F0
int32_t __cdecl RequestHandler::addMcoinVipPoint(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::addMcoinVipPoint::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  const char (*v6)[7]; // r9
  bool v7; // r14
  int32_t v8; // r14d
  common::milog::MiLogStream *v9; // rax
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-125h] BYREF
  proto::PlatformType platform_type; // [rsp+2Ch] [rbp-124h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-120h]
  proto::AddMcoinVipPointOp *add_mcoin_op; // [rsp+38h] [rbp-118h]
  char v16[272]; // [rsp+40h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 32 1 11 is_psn:3786 48 4 8 uid:3785 64 4 10 mcoin:3785 80 4 14 vip_point:3785 96 32 11 ticket:"
                        "3787 160 32 8 req:3819";
  *(_QWORD *)(v3 + 16) = RequestHandler::addMcoinVipPoint(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556927;
  v5[536862722] = -234556924;
  v5[536862724] = -218959118;
  v5[536862726] = -202116109;
  *(_DWORD *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 64) = 0;
  *(_DWORD *)(v3 + 80) = 0;
  *(_BYTE *)(v3 + 32) = 0;
  std::string::basic_string(v3 + 96);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 160), off_1A660020, &__a);
  v7 = (unsigned int)getRequestParam<unsigned int,char const(&)[7],std::string &>(
                       http_request,
                       (const std::string *)(v3 + 160),
                       (unsigned int *)(v3 + 48),
                       (std::remove_reference<char const (&)[7]>::type *)"ticket",
                       (std::string *)(v3 + 96),
                       v6) != 0;
  std::string::~string((void *)(v3 + 160));
  std::allocator<char>::~allocator(&__a);
  if ( v7 )
  {
    v8 = 1002;
  }
  else
  {
    std::allocator<char>::allocator(&__a);
    std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 160), "mcoin", &__a);
    getRequestParam<unsigned int>(http_request, (const std::string *)(v3 + 160), (unsigned int *)(v3 + 64));
    std::string::~string((void *)(v3 + 160));
    std::allocator<char>::~allocator(&__a);
    std::allocator<char>::allocator(&__a);
    std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 160), "vip_point", &__a);
    getRequestParam<unsigned int>(http_request, (const std::string *)(v3 + 160), (unsigned int *)(v3 + 80));
    std::string::~string((void *)(v3 + 160));
    std::allocator<char>::~allocator(&__a);
    std::allocator<char>::allocator(&__a);
    std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 160), "is_psn", &__a);
    getRequestParam<bool>(http_request, (const std::string *)(v3 + 160), (bool *)(v3 + 32));
    std::string::~string((void *)(v3 + 160));
    std::allocator<char>::~allocator(&__a);
    if ( *(_DWORD *)(v3 + 64) || *(_DWORD *)(v3 + 80) )
    {
      if ( (unsigned __int8)std::string::empty(v3 + 96) )
      {
        v8 = 2012;
      }
      else if ( *(_DWORD *)(v3 + 48) )
      {
        if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
          __asan_report_load8(__closure);
        if ( !RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 48)) )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v3 + 160),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/handler/request_handler.api.hpp",
            "operator()",
            3810);
          v9 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                 (common::milog::MiLogStream *const)(v3 + 160),
                 (const char (*)[23])"isUidExist fails, uid:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v3 + 48));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 160));
          v8 = 2001;
        }
        else
        {
          platform_type = PC;
          if ( *(_BYTE *)(v3 + 32) )
            platform_type = PS4;
          proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
          msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 160));
          proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 96));
          add_mcoin_op = proto::OfflineMsgBin::mutable_add_mcoin_op(msg);
          proto::AddMcoinVipPointOp::set_mcoin(add_mcoin_op, *(_DWORD *)(v3 + 64));
          proto::AddMcoinVipPointOp::set_vip_point(add_mcoin_op, *(_DWORD *)(v3 + 80));
          proto::AddMcoinVipPointOp::set_platform_type(add_mcoin_op, platform_type);
          common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 48));
          common::minet::Packet::setTargetService(packet, 9u);
          common::minet::Packet::setProto<proto::SendOfflineMsgReq>(
            packet,
            (const proto::SendOfflineMsgReq *)(v3 + 160));
          v8 = 0;
          proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
        }
      }
      else
      {
        v8 = 2001;
      }
    }
    else
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 160),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "operator()",
        3797);
      common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
        (common::milog::MiLogStream *const)(v3 + 160),
        (const char (*)[28])"mcoin and vip_point both 0!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 160));
      v8 = 1002;
    }
  }
  std::string::~string((void *)(v3 + 96));
  result = v8;
  if ( v16 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 3837: range 000000000CBBC894-000000000CBBCA6C
int32_t __cdecl RequestHandler::exchangeMcoin(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:3838";
  *(_QWORD *)(v4 + 16) = RequestHandler::exchangeMcoin;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::exchangeMcoin(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::exchangeMcoin::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3838: range 000000000CBBC3CC-000000000CBBC893
int32_t __cdecl RequestHandler::exchangeMcoin(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::exchangeMcoin::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-125h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-124h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-120h]
  proto::ExchangeMcoinOp *op; // [rsp+38h] [rbp-118h]
  char v19[272]; // [rsp+40h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 48 4 8 uid:3840 64 4 8 num:3840 80 4 18 exchange_type:3840 96 32 11 ticket:3841 160 32 8 req:3860";
  *(_QWORD *)(v3 + 16) = RequestHandler::exchangeMcoin(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862724] = -218959118;
  v5[536862726] = -202116109;
  *(_DWORD *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 64) = 0;
  *(_DWORD *)(v3 + 80) = 0;
  std::string::basic_string(v3 + 96);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 160), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[4],unsigned int &,char const(&)[14],unsigned int &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 160),
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[4]>::type *)off_1A668860,
              (unsigned int *)(v3 + 64),
              (std::remove_reference<char const (&)[14]>::type *)"exchange_type",
              (unsigned int *)(v3 + 80),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 96));
  std::string::~string((void *)(v3 + 160));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 48) )
      goto LABEL_10;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 48)) )
      v7 = 0;
    else
LABEL_10:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else if ( (unsigned __int8)std::string::empty(v3 + 96) )
    {
      v6 = 2012;
    }
    else if ( *(_DWORD *)(v3 + 64) && *(_DWORD *)(v3 + 80) && *(_DWORD *)(v3 + 80) <= 2u )
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 160));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 96));
      op = proto::OfflineMsgBin::mutable_exchange_mcoin_op(msg);
      proto::ExchangeMcoinOp::set_num(op, *(_DWORD *)(v3 + 64));
      proto::ExchangeMcoinOp::set_exchange_type(op, *(proto::ExchangeMcoinType *)(v3 + 80));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 48));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 160));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
    }
    else
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 160),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "operator()",
        3857);
      v8 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(
             (common::milog::MiLogStream *const)(v3 + 160),
             (const char (*)[6])"uid: ");
      v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v3 + 48));
      v10 = common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
              v9,
              (const char (*)[20])"invalid input! num:");
      v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v3 + 64));
      v12 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v11, (const char (*)[16])" exchange_type:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v3 + 80));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 160));
      v6 = 1;
    }
  }
  std::string::~string((void *)(v3 + 96));
  result = v6;
  if ( v19 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 3877: range 000000000CBBCA6E-000000000CBBD2FF
int32_t __cdecl RequestHandler::updateRedPoint(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  int32_t v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  const char (*v8)[15]; // r9
  bool v9; // r15
  bool v10; // r15
  int v11; // r15d
  std::vector<unsigned int>::reference v12; // rax
  google::protobuf::uint32 *v13; // rdx
  std::vector<unsigned int>::reference v14; // rax
  _DWORD *v15; // rdx
  std::vector<unsigned int>::reference v16; // rax
  google::protobuf::uint32 *v17; // rdx
  common::minet::Packet *v18; // rax
  common::minet::Packet *v19; // rax
  common::minet::Packet *v20; // rax
  std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v22; // r14
  unsigned __int64 v23; // rax
  __int64 (__fastcall *v24)(std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::shared_ptr<common::minet::Packet> *); // r15
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+33h] [rbp-1EDh] BYREF
  int32_t retcode; // [rsp+34h] [rbp-1ECh]
  std::vector<std::string>::iterator __for_begin; // [rsp+38h] [rbp-1E8h] BYREF
  std::vector<std::string>::iterator __for_end; // [rsp+40h] [rbp-1E0h] BYREF
  std::vector<std::string> *__for_range; // [rsp+48h] [rbp-1D8h]
  const std::string *red_point_str; // [rsp+50h] [rbp-1D0h]
  proto::RedPointData *proto_red_point; // [rsp+58h] [rbp-1C8h]
  std::shared_ptr<common::minet::Packet> v33; // [rsp+60h] [rbp-1C0h] BYREF
  std::string key; // [rsp+70h] [rbp-1B0h] BYREF
  char v35[400]; // [rsp+90h] [rbp-190h] BYREF

  v5 = (unsigned __int64)v35;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_3(352LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "6 32 4 8 uid:3878 48 16 15 packet_ptr:3912 80 24 22 red_point_str_vec:3887 144 24 24 red_point_p"
                        "aram_vec:3894 208 32 23 red_point_list_str:3881 272 48 11 notify:3879";
  *(_QWORD *)(v5 + 16) = RequestHandler::updateRedPoint;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = 61956;
  v7[536862722] = 62194;
  v7[536862723] = -218959360;
  v7[536862724] = 62194;
  v7[536862725] = -218959360;
  v7[536862726] = 62194;
  v7[536862727] = -219021312;
  v7[536862728] = 62194;
  v7[536862730] = -202116109;
  *(_DWORD *)(v5 + 32) = 0;
  proto::UpdateRedPointByMuipNotify::UpdateRedPointByMuipNotify((proto::UpdateRedPointByMuipNotify *const)(v5 + 272));
  std::string::basic_string(v5 + 208);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&key, off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[15],std::string &>(
              request,
              &key,
              (unsigned int *)(v5 + 32),
              (std::remove_reference<char const (&)[15]>::type *)"red_point_list",
              (std::string *)(v5 + 208),
              v8);
  std::string::~string(&key);
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v4 = retcode;
  }
  else
  {
    std::vector<std::string>::vector((std::vector<std::string> *const)(v5 + 80));
    std::allocator<char>::allocator(&__a);
    std::string::basic_string<std::allocator<char>>(&key, ",", &__a);
    v9 = common::tools::StringUtils::splitToList(
           (const std::string *)(v5 + 208),
           &key,
           (std::vector<std::string> *)(v5 + 80),
           0) != 0;
    std::string::~string(&key);
    std::allocator<char>::~allocator(&__a);
    if ( v9 )
    {
      v4 = 1002;
    }
    else
    {
      __for_range = (std::vector<std::string> *)(v5 + 80);
      __for_begin._M_current = std::vector<std::string>::begin((std::vector<std::string> *const)(v5 + 80))._M_current;
      __for_end._M_current = std::vector<std::string>::end(__for_range)._M_current;
      while ( __gnu_cxx::operator!=<std::string *,std::vector<std::string>>(&__for_begin, &__for_end) )
      {
        red_point_str = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator*(&__for_begin);
        std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v5 + 144));
        std::allocator<char>::allocator(&__a);
        std::string::basic_string<std::allocator<char>>(&key, ":", &__a);
        v10 = common::tools::StringUtils::splitToList<unsigned int>(
                red_point_str,
                &key,
                (std::vector<unsigned int> *)(v5 + 144),
                0) != 0;
        std::string::~string(&key);
        std::allocator<char>::~allocator(&__a);
        if ( v10 )
        {
          v4 = 1002;
          v11 = 0;
        }
        else if ( std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v5 + 144)) > 1 )
        {
          proto_red_point = proto::UpdateRedPointByMuipNotify::add_red_point_list((proto::UpdateRedPointByMuipNotify *const)(v5 + 272));
          v12 = std::vector<unsigned int>::operator[]((std::vector<unsigned int> *const)(v5 + 144), 0LL);
          v13 = v12;
          if ( *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v12 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v12);
          }
          proto::RedPointData::set_red_point_type(proto_red_point, *v13);
          v14 = std::vector<unsigned int>::operator[]((std::vector<unsigned int> *const)(v5 + 144), 1uLL);
          v15 = v14;
          if ( *(_BYTE *)(((unsigned __int64)v14 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v14 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v14 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v14);
          }
          proto::RedPointData::set_is_show(proto_red_point, *v15 != 0);
          if ( std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v5 + 144)) > 2 )
          {
            v16 = std::vector<unsigned int>::operator[]((std::vector<unsigned int> *const)(v5 + 144), 2uLL);
            v17 = v16;
            if ( *(_BYTE *)(((unsigned __int64)v16 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)v16 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v16 >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(v16);
            }
            proto::RedPointData::set_content_id(proto_red_point, *v17);
          }
          v11 = 1;
        }
        else
        {
          v4 = 1002;
          v11 = 0;
        }
        std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v5 + 144));
        if ( v11 != 1 )
          goto LABEL_33;
        __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator++(&__for_begin);
      }
      common::minet::PacketUtils::createPacket();
      if ( std::operator==<common::minet::Packet>(0LL, (const std::shared_ptr<common::minet::Packet> *)(v5 + 48)) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&key,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/handler/request_handler.api.hpp",
          "updateRedPoint",
          3915);
        common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
          (common::milog::MiLogStream *const)&key,
          (const char (*)[19])"createPacket fails");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
        v4 = -1;
      }
      else
      {
        v18 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 48));
        common::minet::Packet::setUserId(v18, *(_DWORD *)(v5 + 32));
        v19 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 48));
        common::minet::Packet::setTargetService(v19, 3u);
        v20 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 48));
        common::minet::Packet::setProto<proto::UpdateRedPointByMuipNotify>(
          v20,
          (const proto::UpdateRedPointByMuipNotify *)(v5 + 272));
        v21 = std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false> *const)&ResourceBox::network_mgr_ptr);
        v22 = v21;
        if ( *(_BYTE *)(((unsigned __int64)v21 >> 3) + 0x7FFF8000) )
          __asan_report_load8(v21);
        v23 = (unsigned __int64)(v22->_vptr_NetworkMgrBase + 8);
        if ( *(_BYTE *)((v23 >> 3) + 0x7FFF8000) )
          v23 = __asan_report_load8(v22->_vptr_NetworkMgrBase + 8);
        v24 = *(__int64 (__fastcall **)(std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::shared_ptr<common::minet::Packet> *))v23;
        std::shared_ptr<common::minet::Packet>::shared_ptr(
          &v33,
          (const std::shared_ptr<common::minet::Packet> *)(v5 + 48));
        v4 = v24(v22, &v33);
        std::shared_ptr<common::minet::Packet>::~shared_ptr(&v33);
      }
      std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v5 + 48));
    }
LABEL_33:
    std::vector<std::string>::~vector((std::vector<std::string> *const)(v5 + 80));
  }
  std::string::~string((void *)(v5 + 208));
  proto::UpdateRedPointByMuipNotify::~UpdateRedPointByMuipNotify((proto::UpdateRedPointByMuipNotify *const)(v5 + 272));
  result = v4;
  if ( v35 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8020) = 0;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8028) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 3928: range 000000000CBBD6E0-000000000CBBD8B8
int32_t __cdecl RequestHandler::changeMapAreaInfo(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:3929";
  *(_QWORD *)(v4 + 16) = RequestHandler::changeMapAreaInfo;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::changeMapAreaInfo(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::changeMapAreaInfo::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3929: range 000000000CBBD300-000000000CBBD6DF
int32_t __cdecl RequestHandler::changeMapAreaInfo(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::changeMapAreaInfo::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-125h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-124h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-120h]
  proto::ChangeMapAreaInfoOp *op_data; // [rsp+38h] [rbp-118h]
  char v14[272]; // [rsp+40h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 48 1 12 is_open:3933 64 4 8 uid:3931 80 4 16 map_area_id:3932 96 32 11 ticket:3934 160 32 8 req:3949";
  *(_QWORD *)(v3 + 16) = RequestHandler::changeMapAreaInfo(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753551;
  v5[536862722] = -234556924;
  v5[536862724] = -218959118;
  v5[536862726] = -202116109;
  *(_DWORD *)(v3 + 64) = 0;
  *(_DWORD *)(v3 + 80) = 0;
  *(_BYTE *)(v3 + 48) = 0;
  std::string::basic_string(v3 + 96);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 160), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[12],unsigned int &,char const(&)[8],bool &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 160),
              (unsigned int *)(v3 + 64),
              (std::remove_reference<char const (&)[12]>::type *)"map_area_id",
              (unsigned int *)(v3 + 80),
              (std::remove_reference<char const (&)[8]>::type *)"is_open",
              (bool *)(v3 + 48),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 96));
  std::string::~string((void *)(v3 + 160));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 96) )
  {
    v6 = 2012;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 64) )
      goto LABEL_12;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 64)) )
      v7 = 0;
    else
LABEL_12:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 160));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 96));
      op_data = proto::OfflineMsgBin::mutable_change_map_area_info_op(msg);
      proto::ChangeMapAreaInfoOp::set_map_area_id(op_data, *(_DWORD *)(v3 + 80));
      proto::ChangeMapAreaInfoOp::set_is_open(op_data, *(_BYTE *)(v3 + 48));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 64));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 160));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
    }
  }
  std::string::~string((void *)(v3 + 96));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 3966: range 000000000CBBD8BA-000000000CBBDD63
int32_t __cdecl RequestHandler::queryPlayerMemBasicData(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  int32_t v7; // r14d
  common::milog::MiLogStream *v8; // rax
  Json::Value_0 *v9; // rax
  Json::Value_0 *v10; // rax
  int32_t result; // eax
  int32_t retcode; // [rsp+2Ch] [rbp-1B4h]
  Json::Value_0 other; // [rsp+30h] [rbp-1B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v16; // [rsp+60h] [rbp-180h] BYREF
  char v17[336]; // [rsp+90h] [rbp-150h] BYREF

  v4 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(288LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 32 1 13 is_exist:3973 48 4 8 uid:3967 64 32 10 param:3988 128 120 19 player_uid_row:3974";
  *(_QWORD *)(v4 + 16) = RequestHandler::queryPlayerMemBasicData;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556927;
  v6[536862723] = -218959118;
  v6[536862727] = -218103808;
  v6[536862728] = -202116109;
  *(_DWORD *)(v4 + 48) = 0;
  std::allocator<char>::allocator(v4 + 32);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v4 + 64),
    off_1A660020,
    (const std::allocator<char> *)(v4 + 32));
  retcode = getRequestParam<unsigned int>(request, (const std::string *)(v4 + 64), (unsigned int *)(v4 + 48));
  std::string::~string((void *)(v4 + 64));
  std::allocator<char>::~allocator(v4 + 32);
  if ( retcode )
  {
    v7 = retcode;
  }
  else
  {
    *(_BYTE *)(v4 + 32) = 0;
    TablePlayerUid::TablePlayerUid((TablePlayerUid *const)(v4 + 128));
    if ( MysqlOpPlayerData::selectPlayerUidByUid(*(_DWORD *)(v4 + 48), (TablePlayerUid *)(v4 + 128), (bool *)(v4 + 32)) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 64),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "queryPlayerMemBasicData",
        3977);
      v8 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
             (common::milog::MiLogStream *const)(v4 + 64),
             (const char (*)[34])"selectPlayerUidByUid fails, uid: ");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v4 + 48));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 64));
      v7 = 1;
    }
    else if ( *(_BYTE *)(v4 + 32) != 1 )
    {
      v7 = 2001;
    }
    else
    {
      Json::Value::Value((Json::Value *)&other, *(_DWORD *)(v4 + 132));
      v9 = Json::Value::operator[]((Json::Value_0 *const)jval, "account_type");
      Json::Value::operator=(v9, &other);
      Json::Value::~Value(&other);
      Json::Value::Value(&other, v4 + 136);
      v10 = Json::Value::operator[]((Json::Value_0 *const)jval, aAccountUid[0]);
      Json::Value::operator=(v10, &other);
      Json::Value::~Value(&other);
      QueryPlayerMemDataParam::QueryPlayerMemDataParam((QueryPlayerMemDataParam *const)(v4 + 64));
      *(_DWORD *)(v4 + 64) = 0;
      boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
        &v16,
        p_yield);
      v7 = RequestHandler::processQueryPlayerMemData(
             this,
             *(_DWORD *)(v4 + 48),
             (const QueryPlayerMemDataParam *)(v4 + 64),
             request,
             jval,
             &v16);
      boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v16);
      QueryPlayerMemDataParam::~QueryPlayerMemDataParam((QueryPlayerMemDataParam *const)(v4 + 64));
    }
    TablePlayerUid::~TablePlayerUid((TablePlayerUid *const)(v4 + 128));
  }
  result = v7;
  if ( v17 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF800C) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF801C) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 3995: range 000000000CBBDD64-000000000CBBE30C
int32_t __cdecl RequestHandler::queryPlayerMemBasicDataByAccountUid(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  const char (*v7)[12]; // r9
  int32_t v8; // r14d
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  Json::Value_0 *v13; // rax
  Json::Value_0 *v14; // rax
  int32_t result; // eax
  int32_t retcode; // [rsp+2Ch] [rbp-1F4h]
  Json::Value_0 other; // [rsp+30h] [rbp-1F0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v20; // [rsp+60h] [rbp-1C0h] BYREF
  char v21[400]; // [rsp+90h] [rbp-190h] BYREF

  v4 = (unsigned __int64)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(352LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "5 32 1 21 is_account_exist:4005 48 4 17 account_type:3996 64 32 16 account_uid:3997 128 32 10 pa"
                        "ram:4020 192 120 8 row:4004";
  *(_QWORD *)(v4 + 16) = RequestHandler::queryPlayerMemBasicDataByAccountUid;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556927;
  v6[536862723] = -218959118;
  v6[536862725] = -218959118;
  v6[536862729] = -218103808;
  v6[536862730] = -202116109;
  *(_DWORD *)(v4 + 48) = 0;
  std::string::basic_string(v4 + 64);
  std::allocator<char>::allocator(v4 + 32);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v4 + 128),
    "account_type",
    (const std::allocator<char> *)(v4 + 32));
  retcode = getRequestParam<unsigned int,char const(&)[12],std::string &>(
              request,
              (const std::string *)(v4 + 128),
              (unsigned int *)(v4 + 48),
              "account_uid",
              (std::string *)(v4 + 64),
              v7);
  std::string::~string((void *)(v4 + 128));
  std::allocator<char>::~allocator(v4 + 32);
  if ( retcode )
  {
    v8 = retcode;
  }
  else
  {
    TablePlayerUid::TablePlayerUid((TablePlayerUid *const)(v4 + 192));
    *(_BYTE *)(v4 + 32) = 0;
    if ( MysqlOpPlayerData::selectPlayerUidByAccount(
           *(_DWORD *)(v4 + 48),
           (const std::string *)(v4 + 64),
           (TablePlayerUid *)(v4 + 192),
           (bool *)(v4 + 32)) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 128),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "queryPlayerMemBasicDataByAccountUid",
        4008);
      v9 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
             (common::milog::MiLogStream *const)(v4 + 128),
             (const char (*)[33])"selectPlayerUidByAccount failed ");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v9, (const std::string *)(v4 + 64));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 128));
      v8 = 1;
    }
    else if ( *(_BYTE *)(v4 + 32) != 1 )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 128),
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/handler/request_handler.api.hpp",
        "queryPlayerMemBasicDataByAccountUid",
        4013);
      v10 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
              (common::milog::MiLogStream *const)(v4 + 128),
              (const char (*)[25])"is_account_exist false, ");
      v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v4 + 48));
      v12 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v11, (const char (*)[2])":");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v12, (const std::string *)(v4 + 64));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 128));
      v8 = 2001;
    }
    else
    {
      Json::Value::Value((Json::Value *)&other, *(_DWORD *)(v4 + 48));
      v13 = Json::Value::operator[]((Json::Value_0 *const)jval, "account_type");
      Json::Value::operator=(v13, &other);
      Json::Value::~Value(&other);
      Json::Value::Value(&other, v4 + 64);
      v14 = Json::Value::operator[]((Json::Value_0 *const)jval, aAccountUid[0]);
      Json::Value::operator=(v14, &other);
      Json::Value::~Value(&other);
      QueryPlayerMemDataParam::QueryPlayerMemDataParam((QueryPlayerMemDataParam *const)(v4 + 128));
      *(_DWORD *)(v4 + 128) = 0;
      boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
        &v20,
        p_yield);
      v8 = RequestHandler::processQueryPlayerMemData(
             this,
             *(_DWORD *)(v4 + 192),
             (const QueryPlayerMemDataParam *)(v4 + 128),
             request,
             jval,
             &v20);
      boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v20);
      QueryPlayerMemDataParam::~QueryPlayerMemDataParam((QueryPlayerMemDataParam *const)(v4 + 128));
    }
    TablePlayerUid::~TablePlayerUid((TablePlayerUid *const)(v4 + 192));
  }
  std::string::~string((void *)(v4 + 64));
  result = v8;
  if ( v21 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8014) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8024) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 4026: range 000000000CBBE30E-000000000CBBE99E
int32_t __cdecl RequestHandler::queryPlayerRedisBasicData(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  int32_t v7; // r14d
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  Json::Value_0 *v12; // rax
  int32_t result; // eax
  int32_t retcode; // [rsp+28h] [rbp-208h]
  unsigned int create_time; // [rsp+2Ch] [rbp-204h]
  std::string key; // [rsp+30h] [rbp-200h] BYREF
  Json::Value_0 other; // [rsp+50h] [rbp-1E0h] BYREF
  char v19[432]; // [rsp+80h] [rbp-1B0h] BYREF

  v4 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(384LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "5 48 1 13 is_exist:4033 64 4 8 uid:4027 80 32 10 param:4045 144 40 8 rsp:4047 224 120 8 row:4034";
  *(_QWORD *)(v4 + 16) = RequestHandler::queryPlayerRedisBasicData;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234753551;
  v6[536862722] = 61956;
  v6[536862723] = -219021312;
  v6[536862724] = 62194;
  v6[536862725] = -234881024;
  v6[536862726] = -218959118;
  v6[536862730] = -218103808;
  v6[536862731] = -202116109;
  *(_DWORD *)(v4 + 64) = 0;
  std::allocator<char>::allocator(v4 + 48);
  std::string::basic_string<std::allocator<char>>(&key, off_1A660020, (const std::allocator<char> *)(v4 + 48));
  retcode = getRequestParam<unsigned int>(request, &key, (unsigned int *)(v4 + 64));
  std::string::~string(&key);
  std::allocator<char>::~allocator(v4 + 48);
  if ( retcode )
  {
    v7 = retcode;
  }
  else
  {
    *(_BYTE *)(v4 + 48) = 0;
    TablePlayerUid::TablePlayerUid((TablePlayerUid *const)(v4 + 224));
    if ( MysqlOpPlayerData::selectPlayerUidByUid(*(_DWORD *)(v4 + 64), (TablePlayerUid *)(v4 + 224), (bool *)(v4 + 48)) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "queryPlayerRedisBasicData",
        4037);
      v8 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
             (common::milog::MiLogStream *const)&key,
             (const char (*)[34])"selectPlayerUidByUid fails, uid: ");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v4 + 64));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      v7 = 1;
    }
    else if ( *(_BYTE *)(v4 + 48) != 1 )
    {
      v7 = 2001;
    }
    else
    {
      QueryPlayerMemDataParam::QueryPlayerMemDataParam((QueryPlayerMemDataParam *const)(v4 + 80));
      *(_DWORD *)(v4 + 80) = 0;
      proto::QueryPlayerMemDataByMuipRsp::QueryPlayerMemDataByMuipRsp((proto::QueryPlayerMemDataByMuipRsp *const)(v4 + 144));
      RequestHandler::getPlayerMemDataFromDb(
        this,
        *(_DWORD *)(v4 + 64),
        (const QueryPlayerMemDataParam *)(v4 + 80),
        (proto::QueryPlayerMemDataByMuipRsp *)(v4 + 144));
      if ( proto::QueryPlayerMemDataByMuipRsp::retcode((const proto::QueryPlayerMemDataByMuipRsp *const)(v4 + 144)) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&key,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/handler/request_handler.api.hpp",
          "queryPlayerRedisBasicData",
          4051);
        v9 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
               (common::milog::MiLogStream *const)&key,
               (const char (*)[31])"getPlayerRedisData fails, uid:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v4 + 64));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
        if ( proto::QueryPlayerMemDataByMuipRsp::retcode((const proto::QueryPlayerMemDataByMuipRsp *const)(v4 + 144)) == 5002 )
          v7 = 2023;
        else
          v7 = 1;
      }
      else if ( RequestHandler::parsePlayerMemData(
                  this,
                  *(_DWORD *)(v4 + 64),
                  (proto::QueryPlayerMemDataByMuipRsp *)(v4 + 144),
                  jval) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&key,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/handler/request_handler.api.hpp",
          "queryPlayerRedisBasicData",
          4060);
        v10 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                (common::milog::MiLogStream *const)&key,
                (const char (*)[31])"parsePlayerMemData fails, uid:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v4 + 64));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
        v7 = 1;
      }
      else
      {
        create_time = common::tools::TimeUtils::getTimeByStr((const std::string *)(v4 + 264));
        if ( !create_time )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&key,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/handler/request_handler.api.hpp",
            "queryPlayerRedisBasicData",
            4068);
          v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)&key,
                  (const char (*)[16])" invalid time: ");
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v11, (const std::string *)(v4 + 264));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
        }
        Json::Value::Value((Json::Value *)&other, create_time);
        v12 = Json::Value::operator[]((Json::Value_0 *const)jval, "create_timestamp");
        Json::Value::operator=(v12, &other);
        Json::Value::~Value(&other);
        v7 = 0;
      }
      proto::QueryPlayerMemDataByMuipRsp::~QueryPlayerMemDataByMuipRsp((proto::QueryPlayerMemDataByMuipRsp *const)(v4 + 144));
      QueryPlayerMemDataParam::~QueryPlayerMemDataParam((QueryPlayerMemDataParam *const)(v4 + 80));
    }
    TablePlayerUid::~TablePlayerUid((TablePlayerUid *const)(v4 + 224));
  }
  result = v7;
  if ( v19 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4076: range 000000000CBBE9A0-000000000CBBF142
int32_t __cdecl RequestHandler::queryPlayerRedisBasicDataByAccountUid(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  const char (*v7)[12]; // r9
  int32_t v8; // r14d
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  Json::Value_0 *v16; // rax
  int32_t result; // eax
  int32_t retcode; // [rsp+28h] [rbp-248h]
  unsigned int create_time; // [rsp+2Ch] [rbp-244h]
  std::string key; // [rsp+30h] [rbp-240h] BYREF
  Json::Value_0 other; // [rsp+50h] [rbp-220h] BYREF
  char v23[496]; // [rsp+80h] [rbp-1F0h] BYREF

  v4 = (unsigned __int64)v23;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(448LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "6 48 1 21 is_account_exist:4085 64 4 17 account_type:4077 80 32 16 account_uid:4078 144 32 10 pa"
                        "ram:4097 208 40 8 rsp:4099 288 120 8 row:4084";
  *(_QWORD *)(v4 + 16) = RequestHandler::queryPlayerRedisBasicDataByAccountUid;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234753551;
  v6[536862722] = 61956;
  v6[536862723] = -219021312;
  v6[536862724] = 62194;
  v6[536862725] = -219021312;
  v6[536862726] = 62194;
  v6[536862727] = -234881024;
  v6[536862728] = -218959118;
  v6[536862732] = -218103808;
  v6[536862733] = -202116109;
  *(_DWORD *)(v4 + 64) = 0;
  std::string::basic_string(v4 + 80);
  std::allocator<char>::allocator(v4 + 48);
  std::string::basic_string<std::allocator<char>>(&key, "account_type", (const std::allocator<char> *)(v4 + 48));
  retcode = getRequestParam<unsigned int,char const(&)[12],std::string &>(
              request,
              &key,
              (unsigned int *)(v4 + 64),
              "account_uid",
              (std::string *)(v4 + 80),
              v7);
  std::string::~string(&key);
  std::allocator<char>::~allocator(v4 + 48);
  if ( retcode )
  {
    v8 = retcode;
  }
  else
  {
    TablePlayerUid::TablePlayerUid((TablePlayerUid *const)(v4 + 288));
    *(_BYTE *)(v4 + 48) = 0;
    if ( MysqlOpPlayerData::selectPlayerUidByAccount(
           *(_DWORD *)(v4 + 64),
           (const std::string *)(v4 + 80),
           (TablePlayerUid *)(v4 + 288),
           (bool *)(v4 + 48)) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "queryPlayerRedisBasicDataByAccountUid",
        4088);
      v9 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
             (common::milog::MiLogStream *const)&key,
             (const char (*)[33])"selectPlayerUidByAccount failed ");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v9, (const std::string *)(v4 + 80));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      v8 = 1;
    }
    else if ( *(_BYTE *)(v4 + 48) != 1 )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/handler/request_handler.api.hpp",
        "queryPlayerRedisBasicDataByAccountUid",
        4093);
      v10 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
              (common::milog::MiLogStream *const)&key,
              (const char (*)[25])"is_account_exist false, ");
      v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v4 + 64));
      v12 = common::milog::MiLogStream::operator<<<char [2],(char *[2])0>(v11, (const char (*)[2])":");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v12, (const std::string *)(v4 + 80));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      v8 = 2001;
    }
    else
    {
      QueryPlayerMemDataParam::QueryPlayerMemDataParam((QueryPlayerMemDataParam *const)(v4 + 144));
      *(_DWORD *)(v4 + 144) = 0;
      proto::QueryPlayerMemDataByMuipRsp::QueryPlayerMemDataByMuipRsp((proto::QueryPlayerMemDataByMuipRsp *const)(v4 + 208));
      RequestHandler::getPlayerMemDataFromDb(
        this,
        *(_DWORD *)(v4 + 288),
        (const QueryPlayerMemDataParam *)(v4 + 144),
        (proto::QueryPlayerMemDataByMuipRsp *)(v4 + 208));
      if ( proto::QueryPlayerMemDataByMuipRsp::retcode((const proto::QueryPlayerMemDataByMuipRsp *const)(v4 + 208)) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&key,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/handler/request_handler.api.hpp",
          "queryPlayerRedisBasicDataByAccountUid",
          4103);
        v13 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                (common::milog::MiLogStream *const)&key,
                (const char (*)[31])"getPlayerRedisData fails, uid:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v4 + 288));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
        if ( proto::QueryPlayerMemDataByMuipRsp::retcode((const proto::QueryPlayerMemDataByMuipRsp *const)(v4 + 208)) == 5002 )
          v8 = 2023;
        else
          v8 = 1;
      }
      else if ( RequestHandler::parsePlayerMemData(
                  this,
                  *(_DWORD *)(v4 + 288),
                  (proto::QueryPlayerMemDataByMuipRsp *)(v4 + 208),
                  jval) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&key,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/handler/request_handler.api.hpp",
          "queryPlayerRedisBasicDataByAccountUid",
          4112);
        v14 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                (common::milog::MiLogStream *const)&key,
                (const char (*)[31])"parsePlayerMemData fails, uid:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, (const unsigned int *)(v4 + 288));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
        v8 = 1;
      }
      else
      {
        create_time = common::tools::TimeUtils::getTimeByStr((const std::string *)(v4 + 328));
        if ( !create_time )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&key,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/handler/request_handler.api.hpp",
            "queryPlayerRedisBasicDataByAccountUid",
            4119);
          v15 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)&key,
                  (const char (*)[16])" invalid time: ");
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v15, (const std::string *)(v4 + 328));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
        }
        Json::Value::Value((Json::Value *)&other, create_time);
        v16 = Json::Value::operator[]((Json::Value_0 *const)jval, "create_timestamp");
        Json::Value::operator=(v16, &other);
        Json::Value::~Value(&other);
        v8 = 0;
      }
      proto::QueryPlayerMemDataByMuipRsp::~QueryPlayerMemDataByMuipRsp((proto::QueryPlayerMemDataByMuipRsp *const)(v4 + 208));
      QueryPlayerMemDataParam::~QueryPlayerMemDataParam((QueryPlayerMemDataParam *const)(v4 + 144));
    }
    TablePlayerUid::~TablePlayerUid((TablePlayerUid *const)(v4 + 288));
  }
  std::string::~string((void *)(v4 + 80));
  result = v8;
  if ( v23 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8020) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4127: range 000000000CBBF144-000000000CBBF74A
int32_t __cdecl RequestHandler::queryPlayerH5ActivityData(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  const char (*v7)[20]; // r9
  int32_t v8; // r14d
  bool v9; // r14
  common::milog::MiLogStream *v10; // r14
  unsigned int *M_current; // r14
  std::vector<unsigned int>::iterator v12; // rax
  std::set<unsigned int>::size_type v13; // r14
  std::vector<unsigned int> *v14; // rax
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+23h] [rbp-1ADh] BYREF
  int32_t retcode; // [rsp+24h] [rbp-1ACh]
  unsigned __int64 val; // [rsp+28h] [rbp-1A8h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v21; // [rsp+30h] [rbp-1A0h] BYREF
  char v22[368]; // [rsp+60h] [rbp-170h] BYREF

  v4 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(320LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "5 32 4 8 uid:4128 48 24 23 h5_schedule_id_vec:4135 112 32 28 h5_schedule_id_list_str:4129 176 32"
                        " 10 param:4151 240 48 23 h5_schedule_id_set:4145";
  *(_QWORD *)(v4 + 16) = RequestHandler::queryPlayerH5ActivityData;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = 61956;
  v6[536862722] = -218959360;
  v6[536862723] = 62194;
  v6[536862724] = -219021312;
  v6[536862725] = 62194;
  v6[536862726] = -219021312;
  v6[536862727] = 62194;
  v6[536862729] = -202116109;
  *(_DWORD *)(v4 + 32) = 0;
  std::string::basic_string(v4 + 112);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v4 + 176), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[20],std::string &>(
              request,
              (const std::string *)(v4 + 176),
              (unsigned int *)(v4 + 32),
              (std::remove_reference<char const (&)[20]>::type *)"h5_schedule_id_list",
              (std::string *)(v4 + 112),
              v7);
  std::string::~string((void *)(v4 + 176));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v8 = retcode;
  }
  else
  {
    std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v4 + 48));
    std::allocator<char>::allocator(&__a);
    std::string::basic_string<std::allocator<char>>((std::string *const)(v4 + 176), ",", &__a);
    v9 = common::tools::StringUtils::splitToList<unsigned int>(
           (const std::string *)(v4 + 112),
           (const std::string *)(v4 + 176),
           (std::vector<unsigned int> *)(v4 + 48),
           0) != 0;
    std::string::~string((void *)(v4 + 176));
    std::allocator<char>::~allocator(&__a);
    if ( v9 )
    {
      v8 = 1002;
    }
    else if ( std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v4 + 48)) <= 0x3E8 )
    {
      M_current = std::vector<unsigned int>::end((std::vector<unsigned int> *const)(v4 + 48))._M_current;
      v12._M_current = std::vector<unsigned int>::begin((std::vector<unsigned int> *const)(v4 + 48))._M_current;
      std::set<unsigned int>::set<__gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>>(
        (std::set<unsigned int> *const)(v4 + 240),
        v12,
        (__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >)M_current);
      v13 = std::set<unsigned int>::size((const std::set<unsigned int> *const)(v4 + 240));
      if ( v13 == std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v4 + 48)) )
      {
        QueryPlayerMemDataParam::QueryPlayerMemDataParam((QueryPlayerMemDataParam *const)(v4 + 176));
        *(_DWORD *)(v4 + 176) = 1;
        v14 = std::move<std::vector<unsigned int> &>((std::vector<unsigned int> *)(v4 + 48));
        std::vector<unsigned int>::operator=((std::vector<unsigned int> *const)(v4 + 184), v14);
        boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
          &v21,
          p_yield);
        v8 = RequestHandler::processQueryPlayerMemData(
               this,
               *(_DWORD *)(v4 + 32),
               (const QueryPlayerMemDataParam *)(v4 + 176),
               request,
               jval,
               &v21);
        boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v21);
        QueryPlayerMemDataParam::~QueryPlayerMemDataParam((QueryPlayerMemDataParam *const)(v4 + 176));
      }
      else
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 176),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/handler/request_handler.api.hpp",
          "queryPlayerH5ActivityData",
          4148);
        common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
          (common::milog::MiLogStream *const)(v4 + 176),
          (const char (*)[26])"duplicate h5_acitivity_id");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 176));
        v8 = 1002;
      }
      std::set<unsigned int>::~set((std::set<unsigned int> *const)(v4 + 240));
    }
    else
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 176),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "queryPlayerH5ActivityData",
        4142);
      v10 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
              (common::milog::MiLogStream *const)(v4 + 176),
              (const char (*)[39])"h5_schedule_id_vec is too big, length:");
      val = std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v4 + 48));
      common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v10, &val);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 176));
      v8 = 1;
    }
    std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v4 + 48));
  }
  std::string::~string((void *)(v4 + 112));
  result = v8;
  if ( v22 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8024) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4159: range 000000000CBBF74C-000000000CBBF943
int32_t __cdecl RequestHandler::insertMailBlockTag(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t inserted; // r14d
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-B5h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-B4h]
  std::string key; // [rsp+30h] [rbp-B0h] BYREF
  char v12[144]; // [rsp+50h] [rbp-90h] BYREF

  v4 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(96LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 32 8 tag:4160";
  *(_QWORD *)(v4 + 16) = RequestHandler::insertMailBlockTag;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450888) = -202116109;
  std::string::basic_string(v4 + 32);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&key, off_1A661FC0, &__a);
  retcode = getRequestParam<std::string>(request, &key, (std::string *)(v4 + 32));
  std::string::~string(&key);
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    inserted = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v4 + 32) )
  {
    inserted = 1;
  }
  else
  {
    inserted = MysqlOpMisc::insertMailBlockTagConfig((const std::string *)(v4 + 32));
  }
  std::string::~string((void *)(v4 + 32));
  result = inserted;
  if ( v12 == (char *)v4 )
  {
    *(_DWORD *)((v4 >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 4175: range 000000000CBBF944-000000000CBBFD3F
int32_t __cdecl genPlayerBlockMap(const std::string *block_list, std::map<unsigned int,unsigned int> *player_block_map)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  common::milog::MiLogStream *v5; // rdx
  int v6; // r14d
  std::vector<std::string>::size_type v7; // r14
  __int64 v8; // r14
  __int64 *v9; // r8
  int32_t result; // eax
  std::allocator<char> v11; // [rsp+1Eh] [rbp-112h] BYREF
  std::allocator<char> __a; // [rsp+1Fh] [rbp-111h] BYREF
  uint32_t i; // [rsp+20h] [rbp-110h]
  int ret; // [rsp+24h] [rbp-10Ch]
  __int64 v15; // [rsp+28h] [rbp-108h] BYREF
  std::string *key_str; // [rsp+30h] [rbp-100h]
  std::string *val_str; // [rsp+38h] [rbp-F8h]
  std::string sep_1; // [rsp+40h] [rbp-F0h] BYREF
  std::string sep_2; // [rsp+60h] [rbp-D0h] BYREF
  char v20[176]; // [rsp+80h] [rbp-B0h] BYREF

  v2 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 32 4 8 key:4187 48 4 8 val:4191 64 24 19 tmp_split_list:4176";
  *(_QWORD *)(v2 + 16) = genPlayerBlockMap;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = -218103808;
  v4[536862723] = -202116109;
  std::vector<std::string>::vector((std::vector<std::string> *const)(v2 + 64));
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&sep_2, "|", &__a);
  std::allocator<char>::allocator(&v11);
  std::string::basic_string<std::allocator<char>>(&sep_1, ",", &v11);
  ret = common::tools::StringUtils::split(block_list, &sep_1, &sep_2, 2u, (std::vector<std::string> *)(v2 + 64), 1);
  std::string::~string(&sep_1);
  std::allocator<char>::~allocator(&v11);
  std::string::~string(&sep_2);
  std::allocator<char>::~allocator(&__a);
  if ( ret )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&sep_2,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/handler/request_handler.api.hpp",
      "genPlayerBlockMap",
      4180);
    v5 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
           (common::milog::MiLogStream *const)&sep_2,
           (const char (*)[26])"[MP_BLOCK] split failed: ");
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v5, block_list);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&sep_2);
    v6 = ret;
  }
  else
  {
    for ( i = 0; ; i += 2 )
    {
      v7 = i;
      if ( v7 >= std::vector<std::string>::size((const std::vector<std::string> *const)(v2 + 64)) )
        break;
      key_str = std::vector<std::string>::operator[]((std::vector<std::string> *const)(v2 + 64), i);
      val_str = std::vector<std::string>::operator[]((std::vector<std::string> *const)(v2 + 64), i + 1);
      *(_DWORD *)(v2 + 32) = 0;
      ret = common::tools::StringUtils::strToNum<unsigned int>(key_str, (unsigned int *)(v2 + 32), 1);
      if ( !ret )
      {
        *(_DWORD *)(v2 + 48) = 0;
        ret = common::tools::StringUtils::strToNum<unsigned int>(val_str, (unsigned int *)(v2 + 48), 1);
        if ( !ret )
        {
          if ( *(_DWORD *)(v2 + 48) )
          {
            v8 = *(unsigned int *)(v2 + 48);
            v15 = v8 + common::tools::TimeUtils::getNow();
            std::map<unsigned int,unsigned int>::emplace<unsigned int &,long>(
              player_block_map,
              (unsigned int *)(v2 + 32),
              &v15,
              (unsigned int *)(v2 + 32),
              v9);
          }
        }
      }
    }
    v6 = 0;
  }
  std::vector<std::string>::~vector((std::vector<std::string> *const)(v2 + 64));
  result = v6;
  if ( v20 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4204: range 000000000CBBFD40-000000000CBC06A2
int32_t __cdecl RequestHandler::batchBlockPlayerChat(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  int32_t v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *v8; // rax
  uint32_t v9; // ecx
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  _BOOL4 v13; // r15d
  std::__shared_ptr_access<proto::ServerBlockPlayerChatNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v14; // rax
  std::__shared_ptr_access<proto::ServerBlockPlayerChatNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rcx
  common::minet::Packet *v16; // rcx
  common::minet::Packet *v17; // rax
  common::minet::Packet *v18; // r15
  common::minet::ConstMessagePtr v19; // rdx
  std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v20; // rax
  std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // r15
  unsigned __int64 v22; // rax
  int v23; // r15d
  common::milog::MiLogStream *v24; // rax
  int32_t result; // eax
  __int64 (__fastcall *v26)(std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::shared_ptr<proto::ServerBlockPlayerChatNotify> *); // [rsp+8h] [rbp-1E8h]
  std::allocator<char> __a; // [rsp+33h] [rbp-1BDh] BYREF
  int32_t retcode; // [rsp+34h] [rbp-1BCh]
  int ret; // [rsp+38h] [rbp-1B8h]
  uint32_t now; // [rsp+3Ch] [rbp-1B4h]
  std::map<unsigned int,unsigned int>::iterator __for_begin; // [rsp+40h] [rbp-1B0h] BYREF
  std::map<unsigned int,unsigned int>::iterator __for_end; // [rsp+48h] [rbp-1A8h] BYREF
  std::map<unsigned int,unsigned int> *__for_range; // [rsp+50h] [rbp-1A0h]
  std::map<unsigned int,unsigned int> *__for_range_0; // [rsp+58h] [rbp-198h]
  const std::pair<unsigned int const,unsigned int> *v35; // [rsp+60h] [rbp-190h]
  std::tuple_element<0,const std::pair<unsigned int const,unsigned int> >::type *uid_0; // [rsp+68h] [rbp-188h]
  std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *end_time_0; // [rsp+70h] [rbp-180h]
  const std::pair<unsigned int const,unsigned int> *v38; // [rsp+78h] [rbp-178h]
  std::tuple_element<0,const std::pair<unsigned int const,unsigned int> >::type *uid; // [rsp+80h] [rbp-170h]
  std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *end_time; // [rsp+88h] [rbp-168h]
  std::shared_ptr<proto::ServerBlockPlayerChatNotify> __r; // [rsp+90h] [rbp-160h] BYREF
  std::string key; // [rsp+A0h] [rbp-150h] BYREF
  char v43[304]; // [rsp+C0h] [rbp-130h] BYREF

  v5 = (unsigned __int64)v43;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_2(256LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "4 48 16 15 packet_ptr:4235 80 16 21 block_notify_ptr:4242 112 32 15 block_list:4205 176 48 26 pl"
                        "ayer_chat_block_map:4217";
  *(_QWORD *)(v5 + 16) = RequestHandler::batchBlockPlayerChat;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = 61937;
  v7[536862722] = 62194;
  v7[536862723] = 62194;
  v7[536862724] = -219021312;
  v7[536862725] = 62194;
  v7[536862727] = -202116109;
  std::string::basic_string(v5 + 112);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&key, "block_list", &__a);
  retcode = getRequestParam<std::string>(request, &key, (std::string *)(v5 + 112));
  std::string::~string(&key);
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v4 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v5 + 112) )
  {
    v4 = 1;
  }
  else
  {
    std::map<unsigned int,unsigned int>::map((std::map<unsigned int,unsigned int> *const)(v5 + 176));
    ret = genPlayerBlockMap((const std::string *)(v5 + 112), (std::map<unsigned int,unsigned int> *)(v5 + 176));
    if ( ret )
    {
      v4 = ret;
    }
    else
    {
      now = common::tools::TimeUtils::getNow();
      __for_range = (std::map<unsigned int,unsigned int> *)(v5 + 176);
      __for_begin._M_node = std::map<unsigned int,unsigned int>::begin((std::map<unsigned int,unsigned int> *const)(v5 + 176))._M_node;
      __for_end._M_node = std::map<unsigned int,unsigned int>::end(__for_range)._M_node;
      while ( std::operator!=(&__for_begin, &__for_end) )
      {
        v38 = std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator*(&__for_begin);
        uid = std::get<0ul,unsigned int const,unsigned int>(v38);
        v8 = (std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *)std::get<1ul,unsigned int const,unsigned int>(v38);
        end_time = v8;
        if ( *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v8 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v8 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v8);
        }
        v9 = *end_time;
        if ( *(_BYTE *)(((unsigned __int64)uid >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)uid & 7) + 3) >= *(_BYTE *)(((unsigned __int64)uid >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(uid);
        }
        if ( MysqlOpMisc::insertOrUpdatePlayerFeatureBlockConfig(*uid, 1u, now, v9) )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&key,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/handler/request_handler.api.hpp",
            "batchBlockPlayerChat",
            4227);
          v10 = common::milog::MiLogStream::operator<<<char [53],(char *[53])0>(
                  (common::milog::MiLogStream *const)&key,
                  (const char (*)[53])"insertOrUpdatePlayerFeatureBlockConfig failed, uid: ");
          v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, uid);
          v12 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v11, (const char (*)[13])", end_time: ");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, end_time);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
          v4 = -1;
          goto LABEL_38;
        }
        std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator++(&__for_begin);
      }
      __for_range_0 = (std::map<unsigned int,unsigned int> *)(v5 + 176);
      __for_begin._M_node = std::map<unsigned int,unsigned int>::begin((std::map<unsigned int,unsigned int> *const)(v5 + 176))._M_node;
      __for_end._M_node = std::map<unsigned int,unsigned int>::end(__for_range_0)._M_node;
      while ( std::operator!=(&__for_begin, &__for_end) )
      {
        v35 = std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator*(&__for_begin);
        uid_0 = std::get<0ul,unsigned int const,unsigned int>(v35);
        end_time_0 = (std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *)std::get<1ul,unsigned int const,unsigned int>(v35);
        common::minet::PacketUtils::createPacket();
        if ( std::operator==<common::minet::Packet>(0LL, (const std::shared_ptr<common::minet::Packet> *)(v5 + 48)) )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&key,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/handler/request_handler.api.hpp",
            "batchBlockPlayerChat",
            4238);
          common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
            (common::milog::MiLogStream *const)&key,
            (const char (*)[19])"createPacket fails");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
          v4 = -1;
          v13 = 0;
        }
        else
        {
          common::tools::perf::make_shared<proto::ServerBlockPlayerChatNotify>();
          v14 = std::__shared_ptr_access<proto::ServerBlockPlayerChatNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::ServerBlockPlayerChatNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 80));
          proto::ServerBlockPlayerChatNotify::set_is_unlock(v14, 0);
          v15 = std::__shared_ptr_access<proto::ServerBlockPlayerChatNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::ServerBlockPlayerChatNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 80));
          if ( *(_BYTE *)(((unsigned __int64)end_time_0 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)end_time_0 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)end_time_0 >> 3)
                                                                         + 0x7FFF8000) )
          {
            __asan_report_load4(end_time_0);
          }
          proto::ServerBlockPlayerChatNotify::set_end_time(v15, *end_time_0);
          v16 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 48));
          if ( *(_BYTE *)(((unsigned __int64)uid_0 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)uid_0 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)uid_0 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(uid_0);
          }
          common::minet::Packet::setUserId(v16, *uid_0);
          v17 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 48));
          common::minet::Packet::setTargetService(v17, 3u);
          v18 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 48));
          std::dynamic_pointer_cast<google::protobuf::Message const,proto::ServerBlockPlayerChatNotify>(&__r);
          v19._M_ptr = (std::__shared_ptr<const google::protobuf::Message,(__gnu_cxx::_Lock_policy)2>::element_type *)&__r;
          common::minet::Packet::setMessagePtr(v18, 0x2715u, v19);
          std::shared_ptr<google::protobuf::Message const>::~shared_ptr((std::shared_ptr<const google::protobuf::Message> *const)&__r);
          v20 = std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false> *const)&ResourceBox::network_mgr_ptr);
          v21 = v20;
          if ( *(_BYTE *)(((unsigned __int64)v20 >> 3) + 0x7FFF8000) )
            __asan_report_load8(v20);
          v22 = (unsigned __int64)(v21->_vptr_NetworkMgrBase + 8);
          if ( *(_BYTE *)((v22 >> 3) + 0x7FFF8000) )
            v22 = __asan_report_load8(v21->_vptr_NetworkMgrBase + 8);
          v26 = *(__int64 (__fastcall **)(std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::shared_ptr<proto::ServerBlockPlayerChatNotify> *))v22;
          std::shared_ptr<common::minet::Packet>::shared_ptr(
            (std::shared_ptr<common::minet::Packet> *const)&__r,
            (const std::shared_ptr<common::minet::Packet> *)(v5 + 48));
          ret = v26(v21, &__r);
          std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)&__r);
          if ( ret )
          {
            v4 = ret;
            v23 = 0;
          }
          else
          {
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)&key,
              &common::milog::MiLogDefault::default_log_obj_,
              1u,
              "./src/handler/request_handler.api.hpp",
              "batchBlockPlayerChat",
              4253);
            v24 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                    (common::milog::MiLogStream *const)&key,
                    (const char (*)[25])"[MP_BLOCK] send to uid: ");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v24, uid_0);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
            v23 = 1;
          }
          std::shared_ptr<proto::ServerBlockPlayerChatNotify>::~shared_ptr((std::shared_ptr<proto::ServerBlockPlayerChatNotify> *const)(v5 + 80));
          v13 = v23 == 1;
        }
        std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v5 + 48));
        if ( !v13 )
          goto LABEL_38;
        std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator++(&__for_begin);
      }
      v4 = 0;
    }
LABEL_38:
    std::map<unsigned int,unsigned int>::~map((std::map<unsigned int,unsigned int> *const)(v5 + 176));
  }
  std::string::~string((void *)(v5 + 112));
  result = v4;
  if ( v43 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4261: range 000000000CBC06A4-000000000CBC0FFB
int32_t __cdecl RequestHandler::batchUnblockPlayerChat(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  int32_t v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // rax
  std::_Rb_tree_const_iterator<unsigned int>::reference v9; // rax
  _DWORD *v10; // rdx
  _BOOL4 v11; // r15d
  std::__shared_ptr_access<proto::ServerBlockPlayerChatNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  common::minet::Packet *v13; // rax
  common::minet::Packet *v14; // rax
  common::minet::Packet *v15; // r15
  common::minet::ConstMessagePtr v16; // rdx
  std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // r15
  unsigned __int64 v19; // rax
  int v20; // r15d
  common::milog::MiLogStream *v21; // rax
  int32_t result; // eax
  __int64 (__fastcall *v23)(std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::shared_ptr<proto::ServerBlockPlayerChatNotify> *); // [rsp+8h] [rbp-208h]
  std::allocator<char> __a; // [rsp+3Fh] [rbp-1D1h] BYREF
  int32_t retcode; // [rsp+40h] [rbp-1D0h]
  int32_t ret; // [rsp+44h] [rbp-1CCh]
  std::vector<unsigned int>::iterator __for_begin; // [rsp+48h] [rbp-1C8h] BYREF
  std::vector<unsigned int>::iterator __for_end; // [rsp+50h] [rbp-1C0h] BYREF
  std::vector<unsigned int> *__for_range; // [rsp+58h] [rbp-1B8h]
  std::set<unsigned int> *__for_range_0; // [rsp+60h] [rbp-1B0h]
  unsigned int *uid; // [rsp+68h] [rbp-1A8h]
  std::shared_ptr<proto::ServerBlockPlayerChatNotify> __r; // [rsp+70h] [rbp-1A0h] BYREF
  std::string key; // [rsp+80h] [rbp-190h] BYREF
  char v34[368]; // [rsp+A0h] [rbp-170h] BYREF

  v5 = (unsigned __int64)v34;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_3(320LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "6 32 4 8 uid:4295 48 16 15 packet_ptr:4297 80 16 21 block_notify_ptr:4304 112 24 12 uid_vec:4273"
                        " 176 32 21 unblock_uid_list:4262 240 48 12 uid_set:4281";
  *(_QWORD *)(v5 + 16) = RequestHandler::batchUnblockPlayerChat;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = 61956;
  v7[536862722] = 62194;
  v7[536862723] = 62194;
  v7[536862724] = -218959360;
  v7[536862725] = 62194;
  v7[536862726] = -219021312;
  v7[536862727] = 62194;
  v7[536862729] = -202116109;
  std::string::basic_string(v5 + 176);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&key, "unblock_uid_list", &__a);
  retcode = getRequestParam<std::string>(request, &key, (std::string *)(v5 + 176));
  std::string::~string(&key);
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v4 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v5 + 176) )
  {
    v4 = 1;
  }
  else
  {
    std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v5 + 112));
    std::allocator<char>::allocator(&__a);
    std::string::basic_string<std::allocator<char>>(&key, ",", &__a);
    ret = common::tools::StringUtils::splitToList<unsigned int>(
            (const std::string *)(v5 + 176),
            &key,
            (std::vector<unsigned int> *)(v5 + 112),
            1);
    std::string::~string(&key);
    std::allocator<char>::~allocator(&__a);
    if ( ret )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "batchUnblockPlayerChat",
        4277);
      v8 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
             (common::milog::MiLogStream *const)&key,
             (const char (*)[36])"splitToList fail, unblock_uid_list:");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, (const std::string *)(v5 + 176));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      v4 = 1002;
    }
    else
    {
      std::set<unsigned int>::set((std::set<unsigned int> *const)(v5 + 240));
      __for_range = (std::vector<unsigned int> *)(v5 + 112);
      __for_begin._M_current = std::vector<unsigned int>::begin((std::vector<unsigned int> *const)(v5 + 112))._M_current;
      __for_end._M_current = std::vector<unsigned int>::end(__for_range)._M_current;
      while ( __gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(&__for_begin, &__for_end) )
      {
        uid = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*(&__for_begin);
        std::set<unsigned int>::insert((std::set<unsigned int> *const)(v5 + 240), uid);
        __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++(&__for_begin);
      }
      ret = MysqlOpMisc::deletePlayerFeatureBlockConfig((const std::set<unsigned int> *)(v5 + 240), 1u);
      if ( ret )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&key,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/handler/request_handler.api.hpp",
          "batchUnblockPlayerChat",
          4290);
        common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
          (common::milog::MiLogStream *const)&key,
          (const char (*)[38])"deletePlayerFeatureBlockConfig failed");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
        v4 = -1;
      }
      else
      {
        __for_range_0 = (std::set<unsigned int> *)(v5 + 240);
        __for_begin._M_current = (unsigned int *)std::set<unsigned int>::begin((const std::set<unsigned int> *const)(v5 + 240))._M_node;
        __for_end._M_current = (unsigned int *)std::set<unsigned int>::end(__for_range_0)._M_node;
        while ( std::operator!=(
                  (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)&__for_begin,
                  (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)&__for_end) )
        {
          v9 = std::_Rb_tree_const_iterator<unsigned int>::operator*((const std::_Rb_tree_const_iterator<unsigned int> *const)&__for_begin);
          v10 = v9;
          if ( *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v9 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v9);
          }
          *(_DWORD *)(v5 + 32) = *v10;
          common::minet::PacketUtils::createPacket();
          if ( std::operator==<common::minet::Packet>(0LL, (const std::shared_ptr<common::minet::Packet> *)(v5 + 48)) )
          {
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)&key,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/handler/request_handler.api.hpp",
              "batchUnblockPlayerChat",
              4300);
            common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
              (common::milog::MiLogStream *const)&key,
              (const char (*)[19])"createPacket fails");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
            v4 = -1;
            v11 = 0;
          }
          else
          {
            common::tools::perf::make_shared<proto::ServerBlockPlayerChatNotify>();
            v12 = std::__shared_ptr_access<proto::ServerBlockPlayerChatNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::ServerBlockPlayerChatNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 80));
            proto::ServerBlockPlayerChatNotify::set_is_unlock(v12, 1);
            v13 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 48));
            common::minet::Packet::setUserId(v13, *(_DWORD *)(v5 + 32));
            v14 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 48));
            common::minet::Packet::setTargetService(v14, 3u);
            v15 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 48));
            std::dynamic_pointer_cast<google::protobuf::Message const,proto::ServerBlockPlayerChatNotify>(&__r);
            v16._M_ptr = (std::__shared_ptr<const google::protobuf::Message,(__gnu_cxx::_Lock_policy)2>::element_type *)&__r;
            common::minet::Packet::setMessagePtr(v15, 0x2715u, v16);
            std::shared_ptr<google::protobuf::Message const>::~shared_ptr((std::shared_ptr<const google::protobuf::Message> *const)&__r);
            v17 = std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false> *const)&ResourceBox::network_mgr_ptr);
            v18 = v17;
            if ( *(_BYTE *)(((unsigned __int64)v17 >> 3) + 0x7FFF8000) )
              __asan_report_load8(v17);
            v19 = (unsigned __int64)(v18->_vptr_NetworkMgrBase + 8);
            if ( *(_BYTE *)((v19 >> 3) + 0x7FFF8000) )
              v19 = __asan_report_load8(v18->_vptr_NetworkMgrBase + 8);
            v23 = *(__int64 (__fastcall **)(std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::shared_ptr<proto::ServerBlockPlayerChatNotify> *))v19;
            std::shared_ptr<common::minet::Packet>::shared_ptr(
              (std::shared_ptr<common::minet::Packet> *const)&__r,
              (const std::shared_ptr<common::minet::Packet> *)(v5 + 48));
            ret = v23(v18, &__r);
            std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)&__r);
            if ( ret )
            {
              v4 = ret;
              v20 = 0;
            }
            else
            {
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)&key,
                &common::milog::MiLogDefault::default_log_obj_,
                1u,
                "./src/handler/request_handler.api.hpp",
                "batchUnblockPlayerChat",
                4314);
              v21 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                      (common::milog::MiLogStream *const)&key,
                      (const char (*)[25])"[MP_BLOCK] send to uid: ");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v21,
                (const unsigned int *)(v5 + 32));
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
              v20 = 1;
            }
            std::shared_ptr<proto::ServerBlockPlayerChatNotify>::~shared_ptr((std::shared_ptr<proto::ServerBlockPlayerChatNotify> *const)(v5 + 80));
            v11 = v20 == 1;
          }
          std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v5 + 48));
          if ( !v11 )
            goto LABEL_32;
          std::_Rb_tree_const_iterator<unsigned int>::operator++((std::_Rb_tree_const_iterator<unsigned int> *const)&__for_begin);
        }
        v4 = 0;
      }
LABEL_32:
      std::set<unsigned int>::~set((std::set<unsigned int> *const)(v5 + 240));
    }
    std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v5 + 112));
  }
  std::string::~string((void *)(v5 + 176));
  result = v4;
  if ( v34 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8024) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4321: range 000000000CBC0FFC-000000000CBC15B3
int32_t __cdecl RequestHandler::queryPlayerChatBlockStatus(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  Json::Value_0 *v7; // rax
  int v8; // r14d
  common::milog::MiLogStream *v9; // rax
  Json::Value_0 *v10; // rax
  Json::Value_0 *v11; // rax
  int32_t result; // eax
  int32_t v13; // [rsp+Ch] [rbp-1C4h]
  std::less<unsigned int> __comp; // [rsp+3Ah] [rbp-196h] BYREF
  std::allocator<char> __a; // [rsp+3Bh] [rbp-195h] BYREF
  _DWORD __l[5]; // [rsp+3Ch] [rbp-194h] BYREF
  std::string key; // [rsp+50h] [rbp-180h] BYREF
  Json::Value_0 other; // [rsp+70h] [rbp-160h] BYREF
  char v20[304]; // [rsp+A0h] [rbp-130h] BYREF

  v4 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(256LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 32 1 13 is_exist:4336 48 4 8 uid:4322 64 48 12 uid_set:4357 144 80 17 block_config:4337";
  *(_QWORD *)(v4 + 16) = RequestHandler::queryPlayerChatBlockStatus;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556927;
  v6[536862723] = -219021312;
  v6[536862724] = 62194;
  v6[536862727] = -202116109;
  *(_DWORD *)(v4 + 48) = 0;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&key, off_1A660020, &__a);
  __l[1] = getRequestParam<unsigned int>(request, &key, (unsigned int *)(v4 + 48));
  std::string::~string(&key);
  std::allocator<char>::~allocator(&__a);
  if ( __l[1] )
  {
    v13 = __l[1];
  }
  else if ( *(_DWORD *)(v4 + 48) )
  {
    Json::Value::Value((Json::Value *)&other, *(_DWORD *)(v4 + 48));
    v7 = Json::Value::operator[]((Json::Value_0 *const)jval, off_1A660020);
    Json::Value::operator=(v7, &other);
    Json::Value::~Value(&other);
    *(_BYTE *)(v4 + 32) = 0;
    FeatureBlockConfig::FeatureBlockConfig((FeatureBlockConfig *const)(v4 + 144));
    if ( MysqlOpMisc::selectPlayerFreatureBlockConfig(
           *(_DWORD *)(v4 + 48),
           1u,
           (FeatureBlockConfig *)(v4 + 144),
           (bool *)(v4 + 32)) )
    {
      v13 = 1;
      v8 = 0;
    }
    else if ( *(_BYTE *)(v4 + 32) != 1 )
    {
      v13 = 2027;
      v8 = 0;
    }
    else
    {
      __l[2] = common::tools::TimeUtils::getTimeByStr((const std::string *)(v4 + 152));
      if ( __l[2] )
      {
        *(_QWORD *)&__l[3] = common::tools::TimeUtils::getNow();
        if ( *(__int64 *)&__l[3] <= __l[2] )
        {
          Json::Value::Value(&other, v4 + 184);
          v10 = Json::Value::operator[]((Json::Value_0 *const)jval, "begin_time");
          Json::Value::operator=(v10, &other);
          Json::Value::~Value(&other);
          Json::Value::Value(&other, v4 + 152);
          v11 = Json::Value::operator[]((Json::Value_0 *const)jval, "end_time");
          Json::Value::operator=(v11, &other);
          Json::Value::~Value(&other);
          v8 = 2;
        }
        else
        {
          __l[0] = *(_DWORD *)(v4 + 48);
          std::allocator<unsigned int>::allocator((std::allocator<unsigned int> *const)&__a);
          std::set<unsigned int>::set(
            (std::set<unsigned int> *const)(v4 + 64),
            (std::initializer_list<unsigned int>)__PAIR128__(1LL, __l),
            &__comp,
            (const std::set<unsigned int>::allocator_type *)&__a);
          std::allocator<unsigned int>::~allocator((std::allocator<unsigned int> *const)&__a);
          MysqlOpMisc::deletePlayerFeatureBlockConfig((const std::set<unsigned int> *)(v4 + 64), 1u);
          std::set<unsigned int>::~set((std::set<unsigned int> *const)(v4 + 64));
          v8 = 1;
        }
      }
      else
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&key,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/handler/request_handler.api.hpp",
          "queryPlayerChatBlockStatus",
          4349);
        v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
               (common::milog::MiLogStream *const)&key,
               (const char (*)[16])" invalid_time: ");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v9, (const std::string *)(v4 + 152));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
        v8 = 1;
      }
    }
    FeatureBlockConfig::~FeatureBlockConfig((FeatureBlockConfig *const)(v4 + 144));
    if ( v8 )
      v13 = 0;
  }
  else
  {
    v13 = 1;
  }
  result = v13;
  if ( v20 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF800C) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4372: range 000000000CBC15B4-000000000CBC1F3B
int32_t __cdecl RequestHandler::queryPlayerExtraBinData(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  int32_t v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // rax
  Json::Value_0 *v9; // rax
  Json::Value_0 *v10; // rax
  _BOOL4 v11; // r15d
  common::milog::MiLogStream *v12; // rax
  _BOOL4 v13; // r15d
  common::milog::MiLogStream *v14; // rax
  int v15; // r15d
  Json::Value *v16; // rax
  int32_t result; // eax
  int v18; // [rsp+0h] [rbp-450h]
  char *v19; // [rsp+8h] [rbp-448h]
  int p_yielda; // [rsp+10h] [rbp-440h]
  Json::Value *jvalb; // [rsp+18h] [rbp-438h]
  std::allocator<char> __a; // [rsp+37h] [rbp-419h] BYREF
  int32_t retcode; // [rsp+38h] [rbp-418h]
  int32_t ret; // [rsp+3Ch] [rbp-414h]
  std::string key; // [rsp+40h] [rbp-410h] BYREF
  char v27[1008]; // [rsp+60h] [rbp-3F0h] BYREF

  p_yielda = (int)p_yield;
  v5 = (unsigned __int64)v27;
  v19 = v27;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_4(960LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "10 48 1 13 is_exist:4384 64 4 8 uid:4373 80 4 12 options:4404 96 32 19 extra_bin_data:4395 160 3"
                        "2 16 json_string:4403 224 40 15 status_ret:4408 304 40 15 json_value:4415 384 80 8 row:4383 496 "
                        "96 26 player_extra_data_bin:4397 624 272 16 json_reader:4414";
  *(_QWORD *)(v5 + 16) = RequestHandler::queryPlayerExtraBinData;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234753551;
  v7[536862722] = -234556924;
  v7[536862724] = -218959118;
  v7[536862726] = -218959118;
  v7[536862728] = -218959360;
  v7[536862729] = 62194;
  v7[536862730] = -234881024;
  v7[536862731] = -218959118;
  v7[536862734] = -219021312;
  v7[536862735] = 62194;
  v7[536862738] = -219021312;
  v7[536862739] = 62194;
  v7[536862748] = -202116109;
  v7[536862749] = -202116109;
  *(_DWORD *)(v5 + 64) = 0;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&key, off_1A660020, &__a);
  retcode = getRequestParam<unsigned int>(request, &key, (unsigned int *)(v5 + 64));
  std::string::~string(&key);
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v4 = retcode;
  }
  else if ( *(_DWORD *)(v5 + 64) )
  {
    TablePlayerJsonAndExtraBinData::TablePlayerJsonAndExtraBinData((TablePlayerJsonAndExtraBinData *const)(v5 + 384));
    *(_BYTE *)(v5 + 48) = 0;
    ret = MysqlOpPlayerData::selectPlayerJsonAndExtraBinDataByUid(
            *(_DWORD *)(v5 + 64),
            (TablePlayerJsonAndExtraBinData *)(v5 + 384),
            (bool *)(v5 + 48));
    if ( ret )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "queryPlayerExtraBinData",
        4388);
      v8 = common::milog::MiLogStream::operator<<<char [51],(char *[51])0>(
             (common::milog::MiLogStream *const)&key,
             (const char (*)[51])"selectPlayerJsonAndExtraBinDataByUid failed , uid:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v5 + 64));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      v4 = ret;
    }
    else
    {
      Json::Value::Value((Json::Value *)(v5 + 304), *(_DWORD *)(v5 + 64));
      v9 = Json::Value::operator[]((Json::Value_0 *const)jval, off_1A660020);
      Json::Value::operator=(v9, (Json::Value_0 *)(v5 + 304));
      Json::Value::~Value((Json::Value_0 *const)(v5 + 304));
      Json::Value::Value((Json::Value *)(v5 + 304), *(_BYTE *)(v5 + 48));
      v10 = Json::Value::operator[]((Json::Value_0 *const)jval, "is_exist");
      Json::Value::operator=(v10, (Json::Value_0 *)(v5 + 304));
      Json::Value::~Value((Json::Value_0 *const)(v5 + 304));
      if ( !*(_BYTE *)(v5 + 48) )
        goto LABEL_21;
      std::string::basic_string(v5 + 96);
      mysqlpp::String::to_string((const mysqlpp::String *const)(v5 + 424), (std::string *)(v5 + 96));
      proto::PlayerExtraBinData::PlayerExtraBinData((proto::PlayerExtraBinData *const)(v5 + 496));
      if ( (unsigned __int8)google::protobuf::MessageLite::ParseFromString(v5 + 496, v5 + 96) != 1 )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&key,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/handler/request_handler.api.hpp",
          "queryPlayerExtraBinData",
          4400);
        common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
          (common::milog::MiLogStream *const)&key,
          (const char (*)[44])"player_extra_data_bin ParseFromString fails");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
        v4 = -1;
        v11 = 0;
      }
      else
      {
        std::allocator<char>::allocator(&__a);
        std::string::basic_string<std::allocator<char>>((std::string *const)(v5 + 160), byte_1A5D1560, &__a);
        std::allocator<char>::~allocator(&__a);
        google::protobuf::util::JsonPrintOptions::JsonPrintOptions((google::protobuf::util::JsonPrintOptions *const)(v5 + 80));
        *(_BYTE *)(v5 + 80) = 1;
        *(_BYTE *)(v5 + 81) = 1;
        *(_BYTE *)(v5 + 83) = 1;
        google::protobuf::util::MessageToJsonString(
          (google::protobuf::util::Status *)(v5 + 224),
          (google::protobuf::Message *)(v5 + 496),
          v18,
          v27,
          p_yielda,
          (char)jval,
          (int)request,
          this);
        if ( !google::protobuf::util::Status::ok((const google::protobuf::util::Status *const)(v5 + 224)) )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&key,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/handler/request_handler.api.hpp",
            "queryPlayerExtraBinData",
            4411);
          v12 = common::milog::MiLogStream::operator<<<char [57],(char *[57])0>(
                  (common::milog::MiLogStream *const)&key,
                  (const char (*)[57])"player_extra_bin_data to json_string failed player_uid: ");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v5 + 64));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
          v4 = -1;
          v13 = 0;
        }
        else
        {
          Json::Reader::Reader((Json::Reader *)(v5 + 624));
          Json::Value::Value(v5 + 304, 0LL);
          if ( !Json::Reader::parse(
                  (Json::Reader *const)(v5 + 624),
                  (const std::string *)(v5 + 160),
                  (Json::Value *)(v5 + 304),
                  1) )
          {
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)&key,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/handler/request_handler.api.hpp",
              "queryPlayerExtraBinData",
              4418);
            v14 = common::milog::MiLogStream::operator<<<char [62],(char *[62])0>(
                    (common::milog::MiLogStream *const)&key,
                    (const char (*)[62])"player_bin_data json_string to json_value failed player_uid: ");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, (const unsigned int *)(v5 + 64));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
            v4 = -1;
            v15 = 0;
          }
          else
          {
            v16 = (Json::Value *)Json::Value::operator[]((Json::Value_0 *const)jvalb, "extra_bin_data");
            Json::Value::operator=(v16);
            v15 = 1;
          }
          Json::Value::~Value((Json::Value_0 *const)(v5 + 304));
          Json::Reader::~Reader((Json::Reader *const)(v5 + 624));
          v13 = v15 == 1;
        }
        google::protobuf::util::Status::~Status((google::protobuf::util::Status *const)(v5 + 224));
        std::string::~string((void *)(v5 + 160));
        v11 = v13;
      }
      proto::PlayerExtraBinData::~PlayerExtraBinData((proto::PlayerExtraBinData *const)(v5 + 496));
      std::string::~string((void *)(v5 + 96));
      if ( v11 )
LABEL_21:
        v4 = 0;
    }
    TablePlayerJsonAndExtraBinData::~TablePlayerJsonAndExtraBinData((TablePlayerJsonAndExtraBinData *const)(v5 + 384));
  }
  else
  {
    v4 = 1;
  }
  result = v4;
  if ( v19 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8018) = 0;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8038) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8048) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8070) = 0LL;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8060) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8068) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8070) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4428: range 000000000CBC1F3C-000000000CBC273D
int32_t __cdecl RequestHandler::updatePlayerSecurityLevel(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  int32_t v7; // r14d
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  proto::SecurityAntiOfflineDataBin *v13; // rax
  proto::SecurityAntiOfflineDataBin *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  int32_t result; // eax
  int32_t retcode; // [rsp+20h] [rbp-240h]
  int32_t ret; // [rsp+24h] [rbp-23Ch]
  google::protobuf::Map<unsigned int,proto::SecurityAntiOfflineDataBin> *anti_offline_data_map; // [rsp+28h] [rbp-238h]
  std::string key; // [rsp+30h] [rbp-230h] BYREF
  char v22[528]; // [rsp+50h] [rbp-210h] BYREF

  v4 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(480LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "8 48 1 13 is_exist:4447 64 4 8 uid:4429 80 4 15 check_type:4430 96 4 19 security_level:4431 112 "
                        "32 19 extra_bin_data:4460 176 32 8 row:4480 240 80 12 old_row:4446 352 96 26 player_extra_data_bin:4462";
  *(_QWORD *)(v4 + 16) = RequestHandler::updatePlayerSecurityLevel;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234753551;
  v6[536862722] = -234556924;
  v6[536862723] = 61956;
  v6[536862724] = -219021312;
  v6[536862725] = 62194;
  v6[536862726] = -219021312;
  v6[536862727] = 62194;
  v6[536862730] = -218959118;
  v6[536862734] = -202116109;
  *(_DWORD *)(v4 + 64) = 0;
  *(_DWORD *)(v4 + 80) = 0;
  *(_DWORD *)(v4 + 96) = 0;
  std::allocator<char>::allocator(v4 + 48);
  std::string::basic_string<std::allocator<char>>(&key, off_1A660020, (const std::allocator<char> *)(v4 + 48));
  retcode = getRequestParam<unsigned int,char const(&)[11],unsigned int &,char const(&)[15],unsigned int &>(
              request,
              &key,
              (unsigned int *)(v4 + 64),
              (std::remove_reference<char const (&)[11]>::type *)"check_type",
              (unsigned int *)(v4 + 80),
              (std::remove_reference<char const (&)[15]>::type *)"security_level",
              (unsigned int *)(v4 + 96));
  std::string::~string(&key);
  std::allocator<char>::~allocator(v4 + 48);
  if ( retcode )
  {
    v7 = retcode;
  }
  else if ( *(_DWORD *)(v4 + 64) )
  {
    if ( !*(_DWORD *)(v4 + 80) || !proto::SecurityCheckType_IsValid(*(_DWORD *)(v4 + 80)) )
    {
      v7 = 1;
    }
    else
    {
      TablePlayerJsonAndExtraBinData::TablePlayerJsonAndExtraBinData((TablePlayerJsonAndExtraBinData *const)(v4 + 240));
      *(_BYTE *)(v4 + 48) = 0;
      ret = MysqlOpPlayerData::selectPlayerJsonAndExtraBinDataByUid(
              *(_DWORD *)(v4 + 64),
              (TablePlayerJsonAndExtraBinData *)(v4 + 240),
              (bool *)(v4 + 48));
      if ( ret )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&key,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/handler/request_handler.api.hpp",
          "updatePlayerSecurityLevel",
          4451);
        v9 = common::milog::MiLogStream::operator<<<char [51],(char *[51])0>(
               (common::milog::MiLogStream *const)&key,
               (const char (*)[51])"selectPlayerJsonAndExtraBinDataByUid failed , uid:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v4 + 64));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
        v7 = ret;
      }
      else if ( *(_BYTE *)(v4 + 48) != 1 )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&key,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/handler/request_handler.api.hpp",
          "updatePlayerSecurityLevel",
          4456);
        v10 = common::milog::MiLogStream::operator<<<char [5],(char *[5])0>(
                (common::milog::MiLogStream *const)&key,
                (const char (*)[5])"uid:");
        v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v10,
                (const unsigned int *)(v4 + 64));
        common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v11, (const char (*)[12])" not exists");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
        v7 = 1;
      }
      else
      {
        std::string::basic_string(v4 + 112);
        mysqlpp::String::to_string((const mysqlpp::String *const)(v4 + 280), (std::string *)(v4 + 112));
        proto::PlayerExtraBinData::PlayerExtraBinData((proto::PlayerExtraBinData *const)(v4 + 352));
        if ( (unsigned __int8)google::protobuf::MessageLite::ParseFromString(v4 + 352, v4 + 112) != 1 )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&key,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/handler/request_handler.api.hpp",
            "updatePlayerSecurityLevel",
            4465);
          v12 = common::milog::MiLogStream::operator<<<char [50],(char *[50])0>(
                  (common::milog::MiLogStream *const)&key,
                  (const char (*)[50])"player_extra_data_bin ParseFromString fails, uid:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v4 + 64));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
          v7 = -1;
        }
        else
        {
          anti_offline_data_map = proto::PlayerExtraBinData::mutable_anti_offline_data_map((proto::PlayerExtraBinData *const)(v4 + 352));
          v13 = google::protobuf::Map<unsigned int,proto::SecurityAntiOfflineDataBin>::operator[](
                  anti_offline_data_map,
                  (const google::protobuf::Map<unsigned int,proto::SecurityAntiOfflineDataBin>::key_type *)(v4 + 80));
          proto::SecurityAntiOfflineDataBin::set_security_check_type(v13, *(_DWORD *)(v4 + 80));
          v14 = google::protobuf::Map<unsigned int,proto::SecurityAntiOfflineDataBin>::operator[](
                  anti_offline_data_map,
                  (const google::protobuf::Map<unsigned int,proto::SecurityAntiOfflineDataBin>::key_type *)(v4 + 80));
          proto::SecurityAntiOfflineDataBin::set_security_level(v14, *(_DWORD *)(v4 + 96));
          std::string::clear(v4 + 112);
          if ( !google::protobuf::MessageLite::SerializeToString(
                  (const google::protobuf::MessageLite *const)(v4 + 352),
                  (std::string *)(v4 + 112)) )
          {
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)&key,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/handler/request_handler.api.hpp",
              "updatePlayerSecurityLevel",
              4476);
            v15 = common::milog::MiLogStream::operator<<<char [50],(char *[50])0>(
                    (common::milog::MiLogStream *const)&key,
                    (const char (*)[50])"player_extra_data_bin ParseFromString fails, uid:");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, (const unsigned int *)(v4 + 64));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
            v7 = -1;
          }
          else
          {
            TablePlayerExtraBinData::TablePlayerExtraBinData((TablePlayerExtraBinData *const)(v4 + 176));
            *(_DWORD *)(v4 + 176) = *(_DWORD *)(v4 + 64);
            mysqlpp::String::operator=((mysqlpp::String *const)(v4 + 184), (const std::string *)(v4 + 112));
            if ( MysqlOpPlayerData::updatePlayerExtraBinData((const TablePlayerExtraBinData *)(v4 + 176)) )
            {
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)&key,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/handler/request_handler.api.hpp",
                "updatePlayerSecurityLevel",
                4485);
              v16 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                      (common::milog::MiLogStream *const)&key,
                      (const char (*)[36])"updatePlayerExtraBinData fail, uid:");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v16,
                (const unsigned int *)(v4 + 64));
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
              v7 = -1;
            }
            else
            {
              v7 = 0;
            }
            TablePlayerExtraBinData::~TablePlayerExtraBinData((TablePlayerExtraBinData *const)(v4 + 176));
          }
        }
        proto::PlayerExtraBinData::~PlayerExtraBinData((proto::PlayerExtraBinData *const)(v4 + 352));
        std::string::~string((void *)(v4 + 112));
      }
      TablePlayerJsonAndExtraBinData::~TablePlayerJsonAndExtraBinData((TablePlayerJsonAndExtraBinData *const)(v4 + 240));
    }
  }
  else
  {
    v7 = 1;
  }
  result = v7;
  if ( v22 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8028) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8038) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8038) = -168430091;
  }
  return result;
};

// Line 4493: range 000000000CBC273E-000000000CBC3024
int32_t __cdecl RequestHandler::QueryPlayerRegPlatform(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  int32_t v7; // r14d
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  Json::Value_0 *v14; // rax
  Json::Value_0 *v15; // rax
  unsigned int v16; // eax
  Json::Value_0 *v17; // rax
  common::milog::MiLogStream *v18; // rax
  Json::Value_0 *v19; // rax
  Json::Value_0 *v20; // rax
  Json::Value_0 *v21; // rax
  int32_t result; // eax
  int p_yielda; // [rsp+0h] [rbp-230h]
  int jvala; // [rsp+8h] [rbp-228h]
  Json::Value *jvalb; // [rsp+8h] [rbp-228h]
  int v26; // [rsp+20h] [rbp-210h]
  int32_t retcode; // [rsp+24h] [rbp-20Ch]
  void *ret; // [rsp+28h] [rbp-208h]
  unsigned int create_time; // [rsp+2Ch] [rbp-204h]
  std::string key; // [rsp+30h] [rbp-200h] BYREF
  google::protobuf::util::Status other; // [rsp+50h] [rbp-1E0h] BYREF
  char v32[432]; // [rsp+80h] [rbp-1B0h] BYREF

  jvala = (int)jval;
  p_yielda = (int)p_yield;
  v4 = (unsigned __int64)v32;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(384LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "6 32 1 13 is_exist:4506 48 1 11 option:4520 64 4 8 uid:4494 80 24 24 player_uid_ext_info:4521 14"
                        "4 40 11 status:4519 224 120 8 row:4505";
  *(_QWORD *)(v4 + 16) = RequestHandler::QueryPlayerRegPlatform;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234753535;
  v6[536862722] = 61956;
  v6[536862723] = -218959360;
  v6[536862724] = 62194;
  v6[536862725] = -234881024;
  v6[536862726] = -218959118;
  v6[536862730] = -218103808;
  v6[536862731] = -202116109;
  *(_DWORD *)(v4 + 64) = 0;
  std::allocator<char>::allocator(v4 + 48);
  std::string::basic_string<std::allocator<char>>(&key, off_1A660020, (const std::allocator<char> *)(v4 + 48));
  retcode = getRequestParam<unsigned int>(request, &key, (unsigned int *)(v4 + 64));
  std::string::~string(&key);
  std::allocator<char>::~allocator(v4 + 48);
  if ( retcode )
  {
    v7 = retcode;
  }
  else if ( *(_DWORD *)(v4 + 64) )
  {
    TablePlayerUid::TablePlayerUid((TablePlayerUid *const)(v4 + 224));
    *(_BYTE *)(v4 + 32) = 0;
    LODWORD(ret) = MysqlOpPlayerData::selectPlayerUidByUid(
                     *(_DWORD *)(v4 + 64),
                     (TablePlayerUid *)(v4 + 224),
                     (bool *)(v4 + 32));
    if ( (_DWORD)ret )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "QueryPlayerRegPlatform",
        4510);
      v8 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
             (common::milog::MiLogStream *const)&key,
             (const char (*)[35])"selectPlayerUidByUid failed , uid:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v4 + 64));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      v7 = (int)ret;
    }
    else if ( *(_BYTE *)(v4 + 32) != 1 )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "QueryPlayerRegPlatform",
        4515);
      v9 = common::milog::MiLogStream::operator<<<char [5],(char *[5])0>(
             (common::milog::MiLogStream *const)&key,
             (const char (*)[5])"uid:");
      v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v4 + 64));
      common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v10, (const char (*)[12])" not exists");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      v7 = 1;
    }
    else
    {
      google::protobuf::util::Status::Status((google::protobuf::util::Status *const)(v4 + 144));
      google::protobuf::util::JsonParseOptions::JsonParseOptions((google::protobuf::util::JsonParseOptions *const)(v4 + 48));
      proto::PlayerUidExtInfo::PlayerUidExtInfo((proto::PlayerUidExtInfo *const)(v4 + 80));
      google::protobuf::util::JsonStringToMessage(
        &other,
        p_yielda,
        jvala,
        (int)request,
        (int)this,
        v26,
        ret,
        (int)key._M_dataplus._M_p,
        key._M_string_length);
      google::protobuf::util::Status::operator=((google::protobuf::util::Status *const)(v4 + 144), &other);
      google::protobuf::util::Status::~Status(&other);
      if ( !google::protobuf::util::Status::ok((const google::protobuf::util::Status *const)(v4 + 144)) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&key,
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/handler/request_handler.api.hpp",
          "QueryPlayerRegPlatform",
          4525);
        v11 = common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(
                (common::milog::MiLogStream *const)&key,
                (const char (*)[49])"JsonStringToMessage player_uid_ext_info failed: ");
        v12 = common::milog::MiLogStream::operator<<<google::protobuf::util::Status,(google::protobuf::util::Status*)0>(
                v11,
                (const google::protobuf::util::Status *)(v4 + 144));
        v13 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v12, (const char (*)[7])" uid: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v4 + 64));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
        v7 = -1;
      }
      else
      {
        Json::Value::Value((Json::Value *)&other, *(_DWORD *)(v4 + 64));
        v14 = Json::Value::operator[]((Json::Value_0 *const)jvalb, off_1A660020);
        Json::Value::operator=(v14, (Json::Value_0 *)&other);
        Json::Value::~Value((Json::Value_0 *const)&other);
        Json::Value::Value(&other, v4 + 264);
        v15 = Json::Value::operator[]((Json::Value_0 *const)jvalb, "create_time");
        Json::Value::operator=(v15, (Json::Value_0 *)&other);
        Json::Value::~Value((Json::Value_0 *const)&other);
        v16 = proto::PlayerUidExtInfo::reg_platform((const proto::PlayerUidExtInfo *const)(v4 + 80));
        Json::Value::Value((Json::Value *)&other, v16);
        v17 = Json::Value::operator[]((Json::Value_0 *const)jvalb, "reg_platform");
        Json::Value::operator=(v17, (Json::Value_0 *)&other);
        Json::Value::~Value((Json::Value_0 *const)&other);
        create_time = common::tools::TimeUtils::getTimeByStr((const std::string *)(v4 + 264));
        if ( !create_time )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&key,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/handler/request_handler.api.hpp",
            "QueryPlayerRegPlatform",
            4535);
          v18 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)&key,
                  (const char (*)[16])" invalid_time: ");
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v18, (const std::string *)(v4 + 264));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
        }
        Json::Value::Value((Json::Value *)&other, create_time);
        v19 = Json::Value::operator[]((Json::Value_0 *const)jvalb, "create_timestamp");
        Json::Value::operator=(v19, (Json::Value_0 *)&other);
        Json::Value::~Value((Json::Value_0 *const)&other);
        Json::Value::Value((Json::Value *)&other, *(_DWORD *)(v4 + 228));
        v20 = Json::Value::operator[]((Json::Value_0 *const)jvalb, "account_type");
        Json::Value::operator=(v20, (Json::Value_0 *)&other);
        Json::Value::~Value((Json::Value_0 *const)&other);
        Json::Value::Value(&other, v4 + 232);
        v21 = Json::Value::operator[]((Json::Value_0 *const)jvalb, aAccountUid[0]);
        Json::Value::operator=(v21, (Json::Value_0 *)&other);
        Json::Value::~Value((Json::Value_0 *const)&other);
        v7 = 0;
      }
      proto::PlayerUidExtInfo::~PlayerUidExtInfo((proto::PlayerUidExtInfo *const)(v4 + 80));
      google::protobuf::util::Status::~Status((google::protobuf::util::Status *const)(v4 + 144));
    }
    TablePlayerUid::~TablePlayerUid((TablePlayerUid *const)(v4 + 224));
  }
  else
  {
    v7 = 1;
  }
  result = v7;
  if ( v32 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4545: range 000000000CBC3026-000000000CBC337E
int32_t __cdecl RequestHandler::addFeatureSwitch(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r12
  __int64 v5; // rax
  _DWORD *v6; // r13
  int32_t v7; // r14d
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-D5h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-D4h]
  std::string key; // [rsp+30h] [rbp-D0h] BYREF
  char v14[176]; // [rsp+50h] [rbp-B0h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(128LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 32 4 7 id:4546 48 4 9 type:4547 64 32 8 msg:4548";
  *(_QWORD *)(v4 + 16) = RequestHandler::addFeatureSwitch;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862723] = -202116109;
  *(_DWORD *)(v4 + 32) = 0;
  *(_DWORD *)(v4 + 48) = 0;
  std::string::basic_string(v4 + 64);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&key, "id", &__a);
  retcode = getRequestParam<unsigned int,char const(&)[5],unsigned int &,char const(&)[4],std::string &>(
              request,
              &key,
              (unsigned int *)(v4 + 32),
              (std::remove_reference<char const (&)[5]>::type *)"type",
              (unsigned int *)(v4 + 48),
              (std::remove_reference<char const (&)[4]>::type *)off_1A662A20,
              (std::string *)(v4 + 64));
  std::string::~string(&key);
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v7 = retcode;
  }
  else if ( !proto::FeatureSwitchType_IsValid(*(_DWORD *)(v4 + 48)) )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&key,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/handler/request_handler.api.hpp",
      "addFeatureSwitch",
      4557);
    v8 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
           (common::milog::MiLogStream *const)&key,
           (const char (*)[36])"feature switch type is invalid, id:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v4 + 32));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
    v7 = 2020;
  }
  else
  {
    retcode = MysqlOpMisc::insertFeatureSwitchOffData(
                *(_DWORD *)(v4 + 32),
                *(_DWORD *)(v4 + 48),
                (const std::string *)(v4 + 64));
    if ( retcode )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "addFeatureSwitch",
        4564);
      v9 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
             (common::milog::MiLogStream *const)&key,
             (const char (*)[40])"insertFeatureSwitchOffData failed , id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v4 + 32));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      v7 = retcode;
    }
    else
    {
      v7 = 0;
    }
  }
  std::string::~string((void *)(v4 + 64));
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF800C) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4572: range 000000000CBC3380-000000000CBC35A3
int32_t __cdecl RequestHandler::deleteFeatureSwitch(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t result; // eax
  common::milog::MiLogStream *v8; // rax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-85h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-84h]
  std::string key; // [rsp+30h] [rbp-80h] BYREF
  char v12[96]; // [rsp+50h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 4 7 id:4573";
  *(_QWORD *)(v4 + 16) = RequestHandler::deleteFeatureSwitch;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116348;
  *(_DWORD *)(v4 + 32) = 0;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&key, "id", &__a);
  retcode = getRequestParam<unsigned int>(request, &key, (unsigned int *)(v4 + 32));
  std::string::~string(&key);
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    result = retcode;
  }
  else
  {
    retcode = MysqlOpMisc::deleteFeatureSwitchData(*(_DWORD *)(v4 + 32));
    if ( retcode )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "deleteFeatureSwitch",
        4583);
      v8 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
             (common::milog::MiLogStream *const)&key,
             (const char (*)[37])"deleteFeatureSwitchData failed , id:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v4 + 32));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      result = retcode;
    }
    else
    {
      result = 0;
    }
  }
  if ( v12 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4591: range 000000000CBC396A-000000000CBC3B42
int32_t __cdecl RequestHandler::setSignature(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:4592";
  *(_QWORD *)(v4 + 16) = RequestHandler::setSignature;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::setSignature(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::setSignature::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4592: range 000000000CBC35A4-000000000CBC3968
int32_t __cdecl RequestHandler::setSignature(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::setSignature::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-145h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-144h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-140h]
  proto::SetSignatureOp *op; // [rsp+38h] [rbp-138h]
  char v14[304]; // [rsp+40h] [rbp-130h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(256LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 48 4 8 uid:4596 64 32 14 signature:4594 128 32 11 ticket:4595 192 32 8 req:4611";
  *(_QWORD *)(v3 + 16) = RequestHandler::setSignature(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862723] = -218959118;
  v5[536862725] = -218959118;
  v5[536862727] = -202116109;
  std::string::basic_string(v3 + 64);
  std::string::basic_string(v3 + 128);
  *(_DWORD *)(v3 + 48) = 0;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 192), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[10],std::string &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 192),
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[10]>::type *)"signature",
              (std::string *)(v3 + 64),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 128));
  std::string::~string((void *)(v3 + 192));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 48) )
      goto LABEL_10;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 48)) )
      v7 = 0;
    else
LABEL_10:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else if ( (unsigned __int8)std::string::empty(v3 + 128) )
    {
      v6 = 2012;
    }
    else
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 192));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 192));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 128));
      op = proto::OfflineMsgBin::mutable_set_signature_op(msg);
      proto::SetSignatureOp::set_signature(op, (const std::string *)(v3 + 64));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 48));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 192));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 192));
    }
  }
  std::string::~string((void *)(v3 + 128));
  std::string::~string((void *)(v3 + 64));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4627: range 000000000CBC3F3A-000000000CBC4112
int32_t __cdecl RequestHandler::addOrSubResin(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:4628";
  *(_QWORD *)(v4 + 16) = RequestHandler::addOrSubResin;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::addOrSubResin(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::addOrSubResin::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4628: range 000000000CBC3B44-000000000CBC3F38
int32_t __cdecl RequestHandler::addOrSubResin(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::addOrSubResin::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-125h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-124h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-120h]
  proto::AddOrSubResinOp *op; // [rsp+38h] [rbp-118h]
  char v14[272]; // [rsp+40h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 48 1 11 is_sub:4631 64 4 16 delta_count:4630 80 4 8 uid:4633 96 32 11 ticket:4632 160 32 8 req:4652";
  *(_QWORD *)(v3 + 16) = RequestHandler::addOrSubResin(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753551;
  v5[536862722] = -234556924;
  v5[536862724] = -218959118;
  v5[536862726] = -202116109;
  *(_DWORD *)(v3 + 64) = 0;
  *(_BYTE *)(v3 + 48) = 0;
  std::string::basic_string(v3 + 96);
  *(_DWORD *)(v3 + 80) = 0;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 160), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[12],unsigned int &,char const(&)[7],bool &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 160),
              (unsigned int *)(v3 + 80),
              (std::remove_reference<char const (&)[12]>::type *)"delta_count",
              (unsigned int *)(v3 + 64),
              (std::remove_reference<char const (&)[7]>::type *)"is_sub",
              (bool *)(v3 + 48),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 96));
  std::string::~string((void *)(v3 + 160));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 80) )
      goto LABEL_10;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 80)) )
      v7 = 0;
    else
LABEL_10:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else if ( (unsigned __int8)std::string::empty(v3 + 96) )
    {
      v6 = 2012;
    }
    else if ( *(_DWORD *)(v3 + 64) )
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 160));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 96));
      op = proto::OfflineMsgBin::mutable_add_or_sub_resin_op(msg);
      proto::AddOrSubResinOp::set_delta_count(op, *(_DWORD *)(v3 + 64));
      proto::AddOrSubResinOp::set_is_sub(op, *(_BYTE *)(v3 + 48));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 80));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 160));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
    }
    else
    {
      v6 = -1;
    }
  }
  std::string::~string((void *)(v3 + 96));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 4669: range 000000000CBC4508-000000000CBC46E0
int32_t __cdecl RequestHandler::setQuestGlobalVarValue(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:4670";
  *(_QWORD *)(v4 + 16) = RequestHandler::setQuestGlobalVarValue;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::setQuestGlobalVarValue(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::setQuestGlobalVarValue::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4670: range 000000000CBC4114-000000000CBC4507
int32_t __cdecl RequestHandler::setQuestGlobalVarValue(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::setQuestGlobalVarValue::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-125h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-124h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-120h]
  proto::SetQuestGlobalVarValueOp *op; // [rsp+38h] [rbp-118h]
  char v14[272]; // [rsp+40h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 48 4 18 global_var_id:4672 64 4 10 value:4673 80 4 8 uid:4675 96 32 11 ticket:4674 160 32 8 req:4694";
  *(_QWORD *)(v3 + 16) = RequestHandler::setQuestGlobalVarValue(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862724] = -218959118;
  v5[536862726] = -202116109;
  *(_DWORD *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 64) = 0;
  std::string::basic_string(v3 + 96);
  *(_DWORD *)(v3 + 80) = 0;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 160), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[14],unsigned int &,char const(&)[6],int &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 160),
              (unsigned int *)(v3 + 80),
              (std::remove_reference<char const (&)[14]>::type *)"global_var_id",
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[6]>::type *)"value",
              (int *)(v3 + 64),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 96));
  std::string::~string((void *)(v3 + 160));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 80) )
      goto LABEL_10;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 80)) )
      v7 = 0;
    else
LABEL_10:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else if ( (unsigned __int8)std::string::empty(v3 + 96) )
    {
      v6 = 2012;
    }
    else if ( *(_DWORD *)(v3 + 48) )
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 160));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 96));
      op = proto::OfflineMsgBin::mutable_set_quest_global_var_value_op(msg);
      proto::SetQuestGlobalVarValueOp::set_id(op, *(_DWORD *)(v3 + 48));
      proto::SetQuestGlobalVarValueOp::set_value(op, *(_DWORD *)(v3 + 64));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 80));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 160));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
    }
    else
    {
      v6 = -1;
    }
  }
  std::string::~string((void *)(v3 + 96));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 4711: range 000000000CBC46E2-000000000CBC5061
int32_t __cdecl RequestHandler::changeBindAccount(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  const char (*v7)[16]; // r9
  int32_t v8; // r14d
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  Json::Value_0 *v20; // rax
  Json::Value_0 *v21; // rax
  Json::Value_0 *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  common::milog::MiLogStream *v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  int32_t result; // eax
  int32_t retcode; // [rsp+28h] [rbp-288h]
  int32_t ret; // [rsp+2Ch] [rbp-284h]
  std::string key; // [rsp+30h] [rbp-280h] BYREF
  Json::Value_0 other; // [rsp+50h] [rbp-260h] BYREF
  char v34[560]; // [rsp+80h] [rbp-230h] BYREF

  v4 = (unsigned __int64)v34;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(512LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "5 48 1 13 is_exist:4721 64 32 20 old_account_uid:4712 128 32 20 new_account_uid:4712 192 120 8 r"
                        "ow:4720 352 120 14 final_row:4747";
  *(_QWORD *)(v4 + 16) = RequestHandler::changeBindAccount;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234753551;
  v6[536862723] = -218959118;
  v6[536862725] = -218959118;
  v6[536862729] = -234881024;
  v6[536862730] = -218959118;
  v6[536862734] = -218103808;
  v6[536862735] = -202116109;
  std::string::basic_string(v4 + 64);
  std::string::basic_string(v4 + 128);
  std::allocator<char>::allocator(v4 + 48);
  std::string::basic_string<std::allocator<char>>(&key, "old_account_uid", (const std::allocator<char> *)(v4 + 48));
  retcode = getRequestParam<std::string,char const(&)[16],std::string&>(
              request,
              &key,
              (std::string *)(v4 + 64),
              (std::remove_reference<char const (&)[16]>::type *)"new_account_uid",
              (std::string *)(v4 + 128),
              v7);
  std::string::~string(&key);
  std::allocator<char>::~allocator(v4 + 48);
  if ( retcode )
  {
    v8 = retcode;
  }
  else
  {
    TablePlayerUid::TablePlayerUid((TablePlayerUid *const)(v4 + 192));
    *(_BYTE *)(v4 + 48) = 0;
    if ( MysqlOpPlayerData::selectPlayerUidByAccount(
           1u,
           (const std::string *)(v4 + 128),
           (TablePlayerUid *)(v4 + 192),
           (bool *)(v4 + 48)) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "changeBindAccount",
        4724);
      v9 = common::milog::MiLogStream::operator<<<char [50],(char *[50])0>(
             (common::milog::MiLogStream *const)&key,
             (const char (*)[50])"selectPlayerUidByAccount fails, new_account_uid: ");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v9, (const std::string *)(v4 + 128));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      v8 = 1;
    }
    else if ( *(_BYTE *)(v4 + 48) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "changeBindAccount",
        4729);
      v10 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
              (common::milog::MiLogStream *const)&key,
              (const char (*)[25])"Mihoyo new_account_uid: ");
      v11 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v10, (const std::string *)(v4 + 128));
      common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v11, (const char (*)[16])" has been bound");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      v8 = 2011;
    }
    else
    {
      ret = MysqlOpPlayerData::changeBindAccount(
              1u,
              (const std::string *)(v4 + 64),
              1u,
              (const std::string *)(v4 + 128));
      if ( ret == 24 )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&key,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/handler/request_handler.api.hpp",
          "changeBindAccount",
          4737);
        v12 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                (common::milog::MiLogStream *const)&key,
                (const char (*)[25])"Mihoyo new_account_uid: ");
        v13 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v12, (const std::string *)(v4 + 128));
        common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v13, (const char (*)[16])" has been bound");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
        v8 = 2011;
      }
      else if ( ret )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&key,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/handler/request_handler.api.hpp",
          "changeBindAccount",
          4742);
        v14 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
                (common::milog::MiLogStream *const)&key,
                (const char (*)[43])"changeBindAccount fails, old_account_uid: ");
        v15 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v14, (const std::string *)(v4 + 64));
        v16 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                v15,
                (const char (*)[26])" mihoyo new_account_uid: ");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v16, (const std::string *)(v4 + 128));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
        v8 = 2003;
      }
      else
      {
        TablePlayerUid::TablePlayerUid((TablePlayerUid *const)(v4 + 352));
        if ( MysqlOpPlayerData::selectPlayerUidByAccount(
               1u,
               (const std::string *)(v4 + 128),
               (TablePlayerUid *)(v4 + 352),
               (bool *)(v4 + 48)) )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&key,
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/handler/request_handler.api.hpp",
            "changeBindAccount",
            4750);
          v17 = common::milog::MiLogStream::operator<<<char [50],(char *[50])0>(
                  (common::milog::MiLogStream *const)&key,
                  (const char (*)[50])"selectPlayerUidByAccount fails, new_account_uid: ");
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v17, (const std::string *)(v4 + 128));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
          v8 = 1;
        }
        else if ( *(_BYTE *)(v4 + 48) != 1 )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&key,
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/handler/request_handler.api.hpp",
            "changeBindAccount",
            4755);
          v18 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                  (common::milog::MiLogStream *const)&key,
                  (const char (*)[25])"Mihoyo new_account_uid: ");
          v19 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                  v18,
                  (const std::string *)(v4 + 128));
          common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
            v19,
            (const char (*)[20])" has not been bound");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
          v8 = 1;
        }
        else
        {
          Json::Value::Value((Json::Value *)&other, *(_DWORD *)(v4 + 352));
          v20 = Json::Value::operator[]((Json::Value_0 *const)jval, off_1A660020);
          Json::Value::operator=(v20, &other);
          Json::Value::~Value(&other);
          Json::Value::Value((Json::Value *)&other, *(_DWORD *)(v4 + 356));
          v21 = Json::Value::operator[]((Json::Value_0 *const)jval, "account_type");
          Json::Value::operator=(v21, &other);
          Json::Value::~Value(&other);
          Json::Value::Value(&other, v4 + 360);
          v22 = Json::Value::operator[]((Json::Value_0 *const)jval, aAccountUid[0]);
          Json::Value::operator=(v22, &other);
          Json::Value::~Value(&other);
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&key,
            &common::milog::MiLogDefault::default_log_obj_,
            2u,
            "./src/handler/request_handler.api.hpp",
            "changeBindAccount",
            4762);
          v23 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                  (common::milog::MiLogStream *const)&key,
                  (const char (*)[25])"mihoyo old_account_uid: ");
          v24 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v23, (const std::string *)(v4 + 64));
          v25 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
                  v24,
                  (const char (*)[30])" bind to mihoyo account_uid: ");
          v26 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                  v25,
                  (const std::string *)(v4 + 360));
          v27 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(v26, (const char (*)[6])" uid:");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v27, (const unsigned int *)(v4 + 352));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
          v8 = 0;
        }
        TablePlayerUid::~TablePlayerUid((TablePlayerUid *const)(v4 + 352));
      }
    }
    TablePlayerUid::~TablePlayerUid((TablePlayerUid *const)(v4 + 192));
  }
  std::string::~string((void *)(v4 + 128));
  std::string::~string((void *)(v4 + 64));
  result = v8;
  if ( v34 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8014) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8038) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4768: range 000000000CBC5062-000000000CBC55EE
int32_t __cdecl RequestHandler::SetUserTag(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  const char (*v7)[5]; // r9
  int32_t v8; // r14d
  bool v9; // r14
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v13; // rax
  Json::Value_0 *v14; // rax
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Fh] [rbp-161h] BYREF
  std::string key; // [rsp+30h] [rbp-160h] BYREF
  Json::Value_0 other; // [rsp+50h] [rbp-140h] BYREF
  char v20[272]; // [rsp+80h] [rbp-110h] BYREF

  v4 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(224LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "5 48 4 8 tag:4769 64 4 12 retcode:4771 80 4 18 affected_rows:4790 96 24 12 uid_vec:4777 160 32 9 uids:4770";
  *(_QWORD *)(v4 + 16) = RequestHandler::SetUserTag;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -234556924;
  v6[536862723] = -234881024;
  v6[536862724] = -218959118;
  v6[536862726] = -202116109;
  *(_DWORD *)(v4 + 48) = 0;
  std::string::basic_string(v4 + 160);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&key, off_1A661FC0, &__a);
  *(_DWORD *)(v4 + 64) = getRequestParam<unsigned int,char const(&)[5],std::string &>(
                           request,
                           &key,
                           (unsigned int *)(v4 + 48),
                           (std::remove_reference<char const (&)[5]>::type *)"uids",
                           (std::string *)(v4 + 160),
                           v7);
  std::string::~string(&key);
  std::allocator<char>::~allocator(&__a);
  if ( *(_DWORD *)(v4 + 64) )
  {
    v8 = *(_DWORD *)(v4 + 64);
  }
  else
  {
    std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v4 + 96));
    std::allocator<char>::allocator(&__a);
    std::string::basic_string<std::allocator<char>>(&key, ",", &__a);
    v9 = common::tools::StringUtils::splitToList<unsigned int>(
           (const std::string *)(v4 + 160),
           &key,
           (std::vector<unsigned int> *)(v4 + 96),
           1) != 0;
    std::string::~string(&key);
    std::allocator<char>::~allocator(&__a);
    if ( v9 )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/handler/request_handler.api.hpp",
        "SetUserTag",
        4780);
      v10 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(
              (common::milog::MiLogStream *const)&key,
              (const char (*)[7])"uids: ");
      v11 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v10, (const std::string *)(v4 + 160));
      common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v11, (const char (*)[14])" wrong format");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      v8 = 1;
    }
    else if ( !std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v4 + 96))
           || std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v4 + 96)) > 0x3E8 )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/handler/request_handler.api.hpp",
        "SetUserTag",
        4786);
      common::milog::MiLogStream::operator<<<char [20],(char *[20])0>(
        (common::milog::MiLogStream *const)&key,
        (const char (*)[20])"uid count not valid");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      v8 = 1;
    }
    else
    {
      *(_DWORD *)(v4 + 80) = 0;
      *(_DWORD *)(v4 + 64) = MysqlOpPlayerData::updatePlayerTag(
                               (const std::vector<unsigned int> *)(v4 + 96),
                               *(_DWORD *)(v4 + 48),
                               (uint32_t *)(v4 + 80));
      if ( *(_DWORD *)(v4 + 64) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&key,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/handler/request_handler.api.hpp",
          "SetUserTag",
          4794);
        v13 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                (common::milog::MiLogStream *const)&key,
                (const char (*)[33])"updatePlayerTag failed. retcode:");
        common::milog::MiLogStream::operator<<<int,(int *)0>(v13, (const int *)(v4 + 64));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
        v8 = 1;
      }
      else
      {
        Json::Value::Value((Json::Value *)&other, *(_DWORD *)(v4 + 80));
        v14 = Json::Value::operator[]((Json::Value_0 *const)jval, "affected_rows");
        Json::Value::operator=(v14, &other);
        Json::Value::~Value(&other);
        v8 = 0;
      }
    }
    std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v4 + 96));
  }
  std::string::~string((void *)(v4 + 160));
  result = v8;
  if ( v20 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 4805: range 000000000CBC55F0-000000000CBC60AD
int32_t __cdecl RequestHandler::batchBlockPlayerMp(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  int32_t v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // rax
  std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *v9; // rax
  uint32_t v10; // ecx
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  _BOOL4 v14; // r15d
  std::__shared_ptr_access<proto::ServerBlockPlayerMpNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  std::__shared_ptr_access<proto::ServerBlockPlayerMpNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rcx
  common::minet::Packet *v17; // rcx
  common::minet::Packet *v18; // rax
  common::minet::Packet *v19; // r15
  common::minet::ConstMessagePtr v20; // rdx
  std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v22; // r15
  unsigned __int64 v23; // rax
  int v24; // r15d
  common::milog::MiLogStream *v25; // rax
  int32_t result; // eax
  __int64 (__fastcall *v27)(std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::shared_ptr<proto::ServerBlockPlayerMpNotify> *); // [rsp+8h] [rbp-1E8h]
  std::allocator<char> __a; // [rsp+33h] [rbp-1BDh] BYREF
  int32_t retcode; // [rsp+34h] [rbp-1BCh]
  int ret; // [rsp+38h] [rbp-1B8h]
  uint32_t now; // [rsp+3Ch] [rbp-1B4h]
  std::map<unsigned int,unsigned int>::iterator __for_begin; // [rsp+40h] [rbp-1B0h] BYREF
  std::map<unsigned int,unsigned int>::iterator __for_end; // [rsp+48h] [rbp-1A8h] BYREF
  std::map<unsigned int,unsigned int> *__for_range; // [rsp+50h] [rbp-1A0h]
  std::map<unsigned int,unsigned int> *__for_range_0; // [rsp+58h] [rbp-198h]
  const std::pair<unsigned int const,unsigned int> *v36; // [rsp+60h] [rbp-190h]
  std::tuple_element<0,const std::pair<unsigned int const,unsigned int> >::type *uid_0; // [rsp+68h] [rbp-188h]
  std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *end_time_0; // [rsp+70h] [rbp-180h]
  const std::pair<unsigned int const,unsigned int> *v39; // [rsp+78h] [rbp-178h]
  std::tuple_element<0,const std::pair<unsigned int const,unsigned int> >::type *uid; // [rsp+80h] [rbp-170h]
  std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *end_time; // [rsp+88h] [rbp-168h]
  std::shared_ptr<proto::ServerBlockPlayerMpNotify> __r; // [rsp+90h] [rbp-160h] BYREF
  std::string key; // [rsp+A0h] [rbp-150h] BYREF
  char v44[304]; // [rsp+C0h] [rbp-130h] BYREF

  v5 = (unsigned __int64)v44;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_2(256LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "4 48 16 15 packet_ptr:4839 80 16 21 block_notify_ptr:4846 112 32 15 block_list:4806 176 48 24 pl"
                        "ayer_mp_block_map:4821";
  *(_QWORD *)(v5 + 16) = RequestHandler::batchBlockPlayerMp;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = 61937;
  v7[536862722] = 62194;
  v7[536862723] = 62194;
  v7[536862724] = -219021312;
  v7[536862725] = 62194;
  v7[536862727] = -202116109;
  std::string::basic_string(v5 + 112);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&key, "block_uid_list", &__a);
  retcode = getRequestParam<std::string>(request, &key, (std::string *)(v5 + 112));
  std::string::~string(&key);
  std::allocator<char>::~allocator(&__a);
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)&key,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/handler/request_handler.api.hpp",
    "batchBlockPlayerMp",
    4808);
  v8 = common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
         (common::milog::MiLogStream *const)&key,
         (const char (*)[31])"[MP_BLOCK] batchBlockPlayerMp ");
  common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, (const std::string *)(v5 + 112));
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
  if ( retcode )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&key,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/handler/request_handler.api.hpp",
      "batchBlockPlayerMp",
      4811);
    common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
      (common::milog::MiLogStream *const)&key,
      (const char (*)[34])"[MP_BLOCK] getRequestParam failed");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
    v4 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v5 + 112) )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&key,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/handler/request_handler.api.hpp",
      "batchBlockPlayerMp",
      4816);
    common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
      (common::milog::MiLogStream *const)&key,
      (const char (*)[28])"[MP_BLOCK] block_list.empty");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
    v4 = 1;
  }
  else
  {
    std::map<unsigned int,unsigned int>::map((std::map<unsigned int,unsigned int> *const)(v5 + 176));
    ret = genPlayerBlockMap((const std::string *)(v5 + 112), (std::map<unsigned int,unsigned int> *)(v5 + 176));
    if ( ret )
    {
      v4 = ret;
    }
    else
    {
      now = common::tools::TimeUtils::getNow();
      __for_range = (std::map<unsigned int,unsigned int> *)(v5 + 176);
      __for_begin._M_node = std::map<unsigned int,unsigned int>::begin((std::map<unsigned int,unsigned int> *const)(v5 + 176))._M_node;
      __for_end._M_node = std::map<unsigned int,unsigned int>::end(__for_range)._M_node;
      while ( std::operator!=(&__for_begin, &__for_end) )
      {
        v39 = std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator*(&__for_begin);
        uid = std::get<0ul,unsigned int const,unsigned int>(v39);
        v9 = (std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *)std::get<1ul,unsigned int const,unsigned int>(v39);
        end_time = v9;
        if ( *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v9 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v9);
        }
        v10 = *end_time;
        if ( *(_BYTE *)(((unsigned __int64)uid >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)uid & 7) + 3) >= *(_BYTE *)(((unsigned __int64)uid >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(uid);
        }
        if ( MysqlOpMisc::insertOrUpdatePlayerFeatureBlockConfig(*uid, 2u, now, v10) )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&key,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/handler/request_handler.api.hpp",
            "batchBlockPlayerMp",
            4831);
          v11 = common::milog::MiLogStream::operator<<<char [53],(char *[53])0>(
                  (common::milog::MiLogStream *const)&key,
                  (const char (*)[53])"insertOrUpdatePlayerFeatureBlockConfig failed, uid: ");
          v12 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, uid);
          v13 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v12, (const char (*)[13])", end_time: ");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, end_time);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
          v4 = -1;
          goto LABEL_38;
        }
        std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator++(&__for_begin);
      }
      __for_range_0 = (std::map<unsigned int,unsigned int> *)(v5 + 176);
      __for_begin._M_node = std::map<unsigned int,unsigned int>::begin((std::map<unsigned int,unsigned int> *const)(v5 + 176))._M_node;
      __for_end._M_node = std::map<unsigned int,unsigned int>::end(__for_range_0)._M_node;
      while ( std::operator!=(&__for_begin, &__for_end) )
      {
        v36 = std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator*(&__for_begin);
        uid_0 = std::get<0ul,unsigned int const,unsigned int>(v36);
        end_time_0 = (std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *)std::get<1ul,unsigned int const,unsigned int>(v36);
        common::minet::PacketUtils::createPacket();
        if ( std::operator==<common::minet::Packet>(0LL, (const std::shared_ptr<common::minet::Packet> *)(v5 + 48)) )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&key,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/handler/request_handler.api.hpp",
            "batchBlockPlayerMp",
            4842);
          common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
            (common::milog::MiLogStream *const)&key,
            (const char (*)[19])"createPacket fails");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
          v4 = -1;
          v14 = 0;
        }
        else
        {
          common::tools::perf::make_shared<proto::ServerBlockPlayerMpNotify>();
          v15 = std::__shared_ptr_access<proto::ServerBlockPlayerMpNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::ServerBlockPlayerMpNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 80));
          proto::ServerBlockPlayerMpNotify::set_is_unlock(v15, 0);
          v16 = std::__shared_ptr_access<proto::ServerBlockPlayerMpNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::ServerBlockPlayerMpNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 80));
          if ( *(_BYTE *)(((unsigned __int64)end_time_0 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)end_time_0 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)end_time_0 >> 3)
                                                                         + 0x7FFF8000) )
          {
            __asan_report_load4(end_time_0);
          }
          proto::ServerBlockPlayerMpNotify::set_end_time(v16, *end_time_0);
          v17 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 48));
          if ( *(_BYTE *)(((unsigned __int64)uid_0 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)uid_0 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)uid_0 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(uid_0);
          }
          common::minet::Packet::setUserId(v17, *uid_0);
          v18 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 48));
          common::minet::Packet::setTargetService(v18, 3u);
          v19 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 48));
          std::dynamic_pointer_cast<google::protobuf::Message const,proto::ServerBlockPlayerMpNotify>(&__r);
          v20._M_ptr = (std::__shared_ptr<const google::protobuf::Message,(__gnu_cxx::_Lock_policy)2>::element_type *)&__r;
          common::minet::Packet::setMessagePtr(v19, 0x2761u, v20);
          std::shared_ptr<google::protobuf::Message const>::~shared_ptr((std::shared_ptr<const google::protobuf::Message> *const)&__r);
          v21 = std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false> *const)&ResourceBox::network_mgr_ptr);
          v22 = v21;
          if ( *(_BYTE *)(((unsigned __int64)v21 >> 3) + 0x7FFF8000) )
            __asan_report_load8(v21);
          v23 = (unsigned __int64)(v22->_vptr_NetworkMgrBase + 8);
          if ( *(_BYTE *)((v23 >> 3) + 0x7FFF8000) )
            v23 = __asan_report_load8(v22->_vptr_NetworkMgrBase + 8);
          v27 = *(__int64 (__fastcall **)(std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::shared_ptr<proto::ServerBlockPlayerMpNotify> *))v23;
          std::shared_ptr<common::minet::Packet>::shared_ptr(
            (std::shared_ptr<common::minet::Packet> *const)&__r,
            (const std::shared_ptr<common::minet::Packet> *)(v5 + 48));
          ret = v27(v22, &__r);
          std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)&__r);
          if ( ret )
          {
            v4 = ret;
            v24 = 0;
          }
          else
          {
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)&key,
              &common::milog::MiLogDefault::default_log_obj_,
              1u,
              "./src/handler/request_handler.api.hpp",
              "batchBlockPlayerMp",
              4857);
            v25 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                    (common::milog::MiLogStream *const)&key,
                    (const char (*)[25])"[MP_BLOCK] send to uid: ");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v25, uid_0);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
            v24 = 1;
          }
          std::shared_ptr<proto::ServerBlockPlayerMpNotify>::~shared_ptr((std::shared_ptr<proto::ServerBlockPlayerMpNotify> *const)(v5 + 80));
          v14 = v24 == 1;
        }
        std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v5 + 48));
        if ( !v14 )
          goto LABEL_38;
        std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator++(&__for_begin);
      }
      v4 = 0;
    }
LABEL_38:
    std::map<unsigned int,unsigned int>::~map((std::map<unsigned int,unsigned int> *const)(v5 + 176));
  }
  std::string::~string((void *)(v5 + 112));
  result = v4;
  if ( v44 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4864: range 000000000CBC60AE-000000000CBC6A20
int32_t __cdecl RequestHandler::batchUnblockPlayerMp(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  int32_t v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // rax
  std::_Rb_tree_const_iterator<unsigned int>::reference v9; // rax
  _DWORD *v10; // rdx
  _BOOL4 v11; // r15d
  std::__shared_ptr_access<proto::ServerBlockPlayerMpNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v12; // rax
  common::minet::Packet *v13; // rax
  common::minet::Packet *v14; // rax
  common::minet::Packet *v15; // r15
  common::minet::ConstMessagePtr v16; // rdx
  std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // r15
  unsigned __int64 v19; // rax
  int v20; // r15d
  common::milog::MiLogStream *v21; // rax
  int32_t result; // eax
  __int64 (__fastcall *v23)(std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::shared_ptr<proto::ServerBlockPlayerMpNotify> *); // [rsp+8h] [rbp-208h]
  std::allocator<char> __a; // [rsp+3Fh] [rbp-1D1h] BYREF
  int32_t retcode; // [rsp+40h] [rbp-1D0h]
  int32_t ret; // [rsp+44h] [rbp-1CCh]
  std::vector<unsigned int>::iterator __for_begin; // [rsp+48h] [rbp-1C8h] BYREF
  std::vector<unsigned int>::iterator __for_end; // [rsp+50h] [rbp-1C0h] BYREF
  std::vector<unsigned int> *__for_range; // [rsp+58h] [rbp-1B8h]
  std::set<unsigned int> *__for_range_0; // [rsp+60h] [rbp-1B0h]
  unsigned int *uid; // [rsp+68h] [rbp-1A8h]
  std::shared_ptr<proto::ServerBlockPlayerMpNotify> __r; // [rsp+70h] [rbp-1A0h] BYREF
  std::string key; // [rsp+80h] [rbp-190h] BYREF
  char v34[368]; // [rsp+A0h] [rbp-170h] BYREF

  v5 = (unsigned __int64)v34;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_3(320LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "6 32 4 8 uid:4900 48 16 15 packet_ptr:4902 80 16 21 block_notify_ptr:4909 112 24 12 uid_vec:4876"
                        " 176 32 21 unblock_uid_list:4865 240 48 12 uid_set:4884";
  *(_QWORD *)(v5 + 16) = RequestHandler::batchUnblockPlayerMp;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = 61956;
  v7[536862722] = 62194;
  v7[536862723] = 62194;
  v7[536862724] = -218959360;
  v7[536862725] = 62194;
  v7[536862726] = -219021312;
  v7[536862727] = 62194;
  v7[536862729] = -202116109;
  std::string::basic_string(v5 + 176);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&key, "unblock_uid_list", &__a);
  retcode = getRequestParam<std::string>(request, &key, (std::string *)(v5 + 176));
  std::string::~string(&key);
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v4 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v5 + 176) )
  {
    v4 = 1;
  }
  else
  {
    std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v5 + 112));
    std::allocator<char>::allocator(&__a);
    std::string::basic_string<std::allocator<char>>(&key, ",", &__a);
    ret = common::tools::StringUtils::splitToList<unsigned int>(
            (const std::string *)(v5 + 176),
            &key,
            (std::vector<unsigned int> *)(v5 + 112),
            1);
    std::string::~string(&key);
    std::allocator<char>::~allocator(&__a);
    if ( ret )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "batchUnblockPlayerMp",
        4880);
      v8 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
             (common::milog::MiLogStream *const)&key,
             (const char (*)[36])"splitToList fail, unblock_uid_list:");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, (const std::string *)(v5 + 176));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      v4 = 1002;
    }
    else
    {
      std::set<unsigned int>::set((std::set<unsigned int> *const)(v5 + 240));
      __for_range = (std::vector<unsigned int> *)(v5 + 112);
      __for_begin._M_current = std::vector<unsigned int>::begin((std::vector<unsigned int> *const)(v5 + 112))._M_current;
      __for_end._M_current = std::vector<unsigned int>::end(__for_range)._M_current;
      while ( __gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(&__for_begin, &__for_end) )
      {
        uid = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*(&__for_begin);
        std::set<unsigned int>::insert((std::set<unsigned int> *const)(v5 + 240), uid);
        __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++(&__for_begin);
      }
      if ( std::set<unsigned int>::empty((const std::set<unsigned int> *const)(v5 + 240)) )
      {
        v4 = 0;
      }
      else
      {
        ret = MysqlOpMisc::deletePlayerFeatureBlockConfig((const std::set<unsigned int> *)(v5 + 240), 2u);
        if ( ret )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&key,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/handler/request_handler.api.hpp",
            "batchUnblockPlayerMp",
            4895);
          common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
            (common::milog::MiLogStream *const)&key,
            (const char (*)[38])"deletePlayerFeatureBlockConfig failed");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
          v4 = -1;
        }
        else
        {
          __for_range_0 = (std::set<unsigned int> *)(v5 + 240);
          __for_begin._M_current = (unsigned int *)std::set<unsigned int>::begin((const std::set<unsigned int> *const)(v5 + 240))._M_node;
          __for_end._M_current = (unsigned int *)std::set<unsigned int>::end(__for_range_0)._M_node;
          while ( std::operator!=(
                    (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)&__for_begin,
                    (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)&__for_end) )
          {
            v9 = std::_Rb_tree_const_iterator<unsigned int>::operator*((const std::_Rb_tree_const_iterator<unsigned int> *const)&__for_begin);
            v10 = v9;
            if ( *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) != 0
              && (char)(((unsigned __int8)v9 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) )
            {
              __asan_report_load4(v9);
            }
            *(_DWORD *)(v5 + 32) = *v10;
            common::minet::PacketUtils::createPacket();
            if ( std::operator==<common::minet::Packet>(0LL, (const std::shared_ptr<common::minet::Packet> *)(v5 + 48)) )
            {
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)&key,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/handler/request_handler.api.hpp",
                "batchUnblockPlayerMp",
                4905);
              common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                (common::milog::MiLogStream *const)&key,
                (const char (*)[19])"createPacket fails");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
              v4 = -1;
              v11 = 0;
            }
            else
            {
              common::tools::perf::make_shared<proto::ServerBlockPlayerMpNotify>();
              v12 = std::__shared_ptr_access<proto::ServerBlockPlayerMpNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::ServerBlockPlayerMpNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 80));
              proto::ServerBlockPlayerMpNotify::set_is_unlock(v12, 1);
              v13 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 48));
              common::minet::Packet::setUserId(v13, *(_DWORD *)(v5 + 32));
              v14 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 48));
              common::minet::Packet::setTargetService(v14, 3u);
              v15 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 48));
              std::dynamic_pointer_cast<google::protobuf::Message const,proto::ServerBlockPlayerMpNotify>(&__r);
              v16._M_ptr = (std::__shared_ptr<const google::protobuf::Message,(__gnu_cxx::_Lock_policy)2>::element_type *)&__r;
              common::minet::Packet::setMessagePtr(v15, 0x2761u, v16);
              std::shared_ptr<google::protobuf::Message const>::~shared_ptr((std::shared_ptr<const google::protobuf::Message> *const)&__r);
              v17 = std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false> *const)&ResourceBox::network_mgr_ptr);
              v18 = v17;
              if ( *(_BYTE *)(((unsigned __int64)v17 >> 3) + 0x7FFF8000) )
                __asan_report_load8(v17);
              v19 = (unsigned __int64)(v18->_vptr_NetworkMgrBase + 8);
              if ( *(_BYTE *)((v19 >> 3) + 0x7FFF8000) )
                v19 = __asan_report_load8(v18->_vptr_NetworkMgrBase + 8);
              v23 = *(__int64 (__fastcall **)(std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::shared_ptr<proto::ServerBlockPlayerMpNotify> *))v19;
              std::shared_ptr<common::minet::Packet>::shared_ptr(
                (std::shared_ptr<common::minet::Packet> *const)&__r,
                (const std::shared_ptr<common::minet::Packet> *)(v5 + 48));
              ret = v23(v18, &__r);
              std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)&__r);
              if ( ret )
              {
                v4 = ret;
                v20 = 0;
              }
              else
              {
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)&key,
                  &common::milog::MiLogDefault::default_log_obj_,
                  1u,
                  "./src/handler/request_handler.api.hpp",
                  "batchUnblockPlayerMp",
                  4919);
                v21 = common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                        (common::milog::MiLogStream *const)&key,
                        (const char (*)[25])"[MP_BLOCK] send to uid: ");
                common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v21,
                  (const unsigned int *)(v5 + 32));
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
                v20 = 1;
              }
              std::shared_ptr<proto::ServerBlockPlayerMpNotify>::~shared_ptr((std::shared_ptr<proto::ServerBlockPlayerMpNotify> *const)(v5 + 80));
              v11 = v20 == 1;
            }
            std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v5 + 48));
            if ( !v11 )
              goto LABEL_34;
            std::_Rb_tree_const_iterator<unsigned int>::operator++((std::_Rb_tree_const_iterator<unsigned int> *const)&__for_begin);
          }
          v4 = 0;
        }
      }
LABEL_34:
      std::set<unsigned int>::~set((std::set<unsigned int> *const)(v5 + 240));
    }
    std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v5 + 112));
  }
  std::string::~string((void *)(v5 + 176));
  result = v4;
  if ( v34 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8024) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4926: range 000000000CBC6A22-000000000CBC6F5E
int32_t __cdecl RequestHandler::queryPlayerMpBlockStatus(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  Json::Value_0 *v7; // rax
  int v8; // r14d
  Json::Value_0 *v9; // rax
  Json::Value_0 *v10; // rax
  int32_t result; // eax
  int32_t M_array_high; // [rsp+Ch] [rbp-1C4h]
  std::less<unsigned int> __comp; // [rsp+36h] [rbp-19Ah] BYREF
  std::allocator<char> __a; // [rsp+37h] [rbp-199h] BYREF
  std::initializer_list<unsigned int> __l; // [rsp+38h] [rbp-198h] BYREF
  __int64 now; // [rsp+48h] [rbp-188h]
  std::string key; // [rsp+50h] [rbp-180h] BYREF
  Json::Value_0 other; // [rsp+70h] [rbp-160h] BYREF
  char v20[304]; // [rsp+A0h] [rbp-130h] BYREF

  v4 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(256LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 32 1 13 is_exist:4941 48 4 8 uid:4927 64 48 12 uid_set:4958 144 80 17 block_config:4942";
  *(_QWORD *)(v4 + 16) = RequestHandler::queryPlayerMpBlockStatus;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556927;
  v6[536862723] = -219021312;
  v6[536862724] = 62194;
  v6[536862727] = -202116109;
  *(_DWORD *)(v4 + 48) = 0;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&key, off_1A660020, &__a);
  HIDWORD(__l._M_array) = getRequestParam<unsigned int>(request, &key, (unsigned int *)(v4 + 48));
  std::string::~string(&key);
  std::allocator<char>::~allocator(&__a);
  if ( HIDWORD(__l._M_array) )
  {
    M_array_high = HIDWORD(__l._M_array);
  }
  else if ( *(_DWORD *)(v4 + 48) )
  {
    Json::Value::Value((Json::Value *)&other, *(_DWORD *)(v4 + 48));
    v7 = Json::Value::operator[]((Json::Value_0 *const)jval, off_1A660020);
    Json::Value::operator=(v7, &other);
    Json::Value::~Value(&other);
    *(_BYTE *)(v4 + 32) = 0;
    FeatureBlockConfig::FeatureBlockConfig((FeatureBlockConfig *const)(v4 + 144));
    if ( MysqlOpMisc::selectPlayerFreatureBlockConfig(
           *(_DWORD *)(v4 + 48),
           2u,
           (FeatureBlockConfig *)(v4 + 144),
           (bool *)(v4 + 32)) )
    {
      M_array_high = 1;
      v8 = 0;
    }
    else if ( *(_BYTE *)(v4 + 32) != 1 )
    {
      M_array_high = 2027;
      v8 = 0;
    }
    else
    {
      __l._M_len = common::tools::TimeUtils::getTimeByStr((const std::string *)(v4 + 152));
      if ( __l._M_len )
      {
        now = common::tools::TimeUtils::getNow();
        if ( (__int64)__l._M_len >= now )
        {
          Json::Value::Value(&other, v4 + 184);
          v9 = Json::Value::operator[]((Json::Value_0 *const)jval, "begin_time");
          Json::Value::operator=(v9, &other);
          Json::Value::~Value(&other);
          Json::Value::Value(&other, v4 + 152);
          v10 = Json::Value::operator[]((Json::Value_0 *const)jval, "end_time");
          Json::Value::operator=(v10, &other);
          Json::Value::~Value(&other);
          v8 = 2;
        }
        else
        {
          LODWORD(__l._M_array) = *(_DWORD *)(v4 + 48);
          std::allocator<unsigned int>::allocator((std::allocator<unsigned int> *const)&__a);
          std::set<unsigned int>::set(
            (std::set<unsigned int> *const)(v4 + 64),
            (std::initializer_list<unsigned int>)__PAIR128__(1LL, &__l),
            &__comp,
            (const std::set<unsigned int>::allocator_type *)&__a);
          std::allocator<unsigned int>::~allocator((std::allocator<unsigned int> *const)&__a);
          MysqlOpMisc::deletePlayerFeatureBlockConfig((const std::set<unsigned int> *)(v4 + 64), 2u);
          std::set<unsigned int>::~set((std::set<unsigned int> *const)(v4 + 64));
          v8 = 1;
        }
      }
      else
      {
        v8 = 1;
      }
    }
    FeatureBlockConfig::~FeatureBlockConfig((FeatureBlockConfig *const)(v4 + 144));
    if ( v8 )
      M_array_high = 0;
  }
  else
  {
    M_array_high = 1;
  }
  result = M_array_high;
  if ( v20 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF800C) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4973: range 000000000CBC6F60-000000000CBC731C
int32_t __cdecl RequestHandler::queryCrcSuspiciousList(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r12
  __int64 v5; // rax
  _DWORD *v6; // r13
  common::milog::MiLogStream *v7; // rax
  int32_t v8; // r14d
  Json::Value_0 *v9; // rax
  char v10; // al
  Json::Value_0 *v11; // rax
  Json::Value_0 *v12; // rax
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-E5h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-E4h]
  Json::Value_0 other; // [rsp+30h] [rbp-E0h] BYREF
  char v18[176]; // [rsp+60h] [rbp-B0h] BYREF

  v4 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(128LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "2 48 4 8 uid:4974 64 32 17 end_time_str:4981";
  *(_QWORD *)(v4 + 16) = RequestHandler::queryCrcSuspiciousList;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862723] = -202116109;
  *(_DWORD *)(v4 + 48) = 0;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v4 + 64), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int>(request, (const std::string *)(v4 + 64), (unsigned int *)(v4 + 48));
  std::string::~string((void *)(v4 + 64));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v4 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/handler/request_handler.api.hpp",
      "queryCrcSuspiciousList",
      4978);
    v7 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
           (common::milog::MiLogStream *const)(v4 + 64),
           (const char (*)[21])"parse uid fail, uid:");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v4 + 48));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 64));
    v8 = retcode;
  }
  else
  {
    MysqlOpMisc::selectPlayerFeatureBlockEndTime[abi:cxx11]((std::string *)(v4 + 64), *(_DWORD *)(v4 + 48), 3u);
    Json::Value::Value((Json::Value *)&other, *(_DWORD *)(v4 + 48));
    v9 = Json::Value::operator[]((Json::Value_0 *const)jval, off_1A660020);
    Json::Value::operator=(v9, &other);
    Json::Value::~Value(&other);
    v10 = std::string::empty(v4 + 64);
    Json::Value::Value((Json::Value *)&other, v10 != 1);
    v11 = Json::Value::operator[]((Json::Value_0 *const)jval, "is_in_suspicious_list");
    Json::Value::operator=(v11, &other);
    Json::Value::~Value(&other);
    Json::Value::Value(&other, v4 + 64);
    v12 = Json::Value::operator[]((Json::Value_0 *const)jval, "end_time");
    Json::Value::operator=(v12, &other);
    Json::Value::~Value(&other);
    v8 = 0;
    std::string::~string((void *)(v4 + 64));
  }
  result = v8;
  if ( v18 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF800C) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4990: range 000000000CBC731E-000000000CBC7E7F
int32_t __cdecl RequestHandler::addToCrcSuspiciousList(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  int32_t v4; // r15d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  const char (*v8)[10]; // r9
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v13; // rax
  _DWORD *v14; // rdx
  unsigned int v15; // r14d
  char *v16; // rsi
  std::map<unsigned int,unsigned int>::mapped_type *v17; // rax
  unsigned int *v18; // rdx
  char v19; // cl
  Json::Value_0 *v20; // r14
  Json::Value_0 *v21; // rax
  common::milog::MiLogStream *v22; // rax
  common::milog::MiLogStream *v23; // rax
  common::milog::MiLogStream *v24; // rax
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v25; // rax
  uint32_t *v26; // rdx
  int v27; // r14d
  common::minet::Packet *v28; // rax
  common::minet::Packet *v29; // rax
  common::minet::Packet *v30; // rax
  std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v31; // rax
  std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v32; // r14
  unsigned __int64 v33; // rax
  Json::Value_0 *v34; // r14
  int32_t result; // eax
  char *v36; // [rsp+0h] [rbp-270h]
  char v37; // [rsp+8h] [rbp-268h]
  void (__fastcall *v38)(std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::shared_ptr<common::minet::Packet> *); // [rsp+8h] [rbp-268h]
  std::allocator<char> __a; // [rsp+3Bh] [rbp-235h] BYREF
  uint32_t uid; // [rsp+3Ch] [rbp-234h]
  std::vector<unsigned int>::iterator __for_begin; // [rsp+40h] [rbp-230h] BYREF
  std::vector<unsigned int>::iterator __for_end; // [rsp+48h] [rbp-228h] BYREF
  std::vector<unsigned int> *__for_range; // [rsp+50h] [rbp-220h]
  std::vector<unsigned int> *__for_range_0; // [rsp+58h] [rbp-218h]
  std::shared_ptr<common::minet::Packet> v46; // [rsp+60h] [rbp-210h] BYREF
  std::string key; // [rsp+70h] [rbp-200h] BYREF
  Json::Value_0 other; // [rsp+90h] [rbp-1E0h] BYREF
  char v49[432]; // [rsp+C0h] [rbp-1B0h] BYREF

  v5 = (unsigned __int64)v49;
  v36 = v49;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_3(384LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "8 32 1 14 is_notify:4992 48 4 12 retcode:4993 64 4 8 uid:5014 80 16 15 packet_ptr:5032 112 24 12"
                        " uid_vec:4999 176 24 11 notify:5031 240 32 17 uid_list_str:4991 304 48 21 player_block_map:5013";
  *(_QWORD *)(v5 + 16) = RequestHandler::addToCrcSuspiciousList;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234556927;
  v7[536862722] = 61956;
  v7[536862723] = 62194;
  v7[536862724] = -218959360;
  v7[536862725] = 62194;
  v7[536862726] = -218959360;
  v7[536862727] = 62194;
  v7[536862728] = -219021312;
  v7[536862729] = 62194;
  v7[536862731] = -202116109;
  std::string::basic_string(v5 + 240);
  *(_BYTE *)(v5 + 32) = 0;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&key, "uid_list", &__a);
  *(_DWORD *)(v5 + 48) = getRequestParam<std::string,char const(&)[10],bool &>(
                           request,
                           &key,
                           (std::string *)(v5 + 240),
                           (std::remove_reference<char const (&)[10]>::type *)"is_notify",
                           (bool *)(v5 + 32),
                           v8);
  std::string::~string(&key);
  std::allocator<char>::~allocator(&__a);
  if ( *(_DWORD *)(v5 + 48) || (unsigned __int8)std::string::empty(v5 + 240) )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&key,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/handler/request_handler.api.hpp",
      "addToCrcSuspiciousList",
      4996);
    v10 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
            (common::milog::MiLogStream *const)&key,
            (const char (*)[30])"parse uid fail, uid_list_str:");
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v10, (const std::string *)(v5 + 240));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
    v4 = 1002;
  }
  else
  {
    std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v5 + 112));
    std::allocator<char>::allocator(&__a);
    std::string::basic_string<std::allocator<char>>(&key, ",", &__a);
    *(_DWORD *)(v5 + 48) = common::tools::StringUtils::splitToList<unsigned int>(
                             (const std::string *)(v5 + 240),
                             &key,
                             (std::vector<unsigned int> *)(v5 + 112),
                             1);
    std::string::~string(&key);
    std::allocator<char>::~allocator(&__a);
    if ( *(_DWORD *)(v5 + 48) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "addToCrcSuspiciousList",
        5003);
      v11 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
              (common::milog::MiLogStream *const)&key,
              (const char (*)[32])"splitToList fail, uid_list_str:");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v11, (const std::string *)(v5 + 240));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      v4 = 1002;
    }
    else if ( std::vector<unsigned int>::size((const std::vector<unsigned int> *const)(v5 + 112)) <= 0x64 )
    {
      std::map<unsigned int,unsigned int>::map((std::map<unsigned int,unsigned int> *const)(v5 + 304));
      __for_range = (std::vector<unsigned int> *)(v5 + 112);
      __for_begin._M_current = std::vector<unsigned int>::begin((std::vector<unsigned int> *const)(v5 + 112))._M_current;
      __for_end._M_current = std::vector<unsigned int>::end(__for_range)._M_current;
      while ( __gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(&__for_begin, &__for_end) )
      {
        v13 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*(&__for_begin);
        v14 = v13;
        if ( *(_BYTE *)(((unsigned __int64)v13 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v13 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v13 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v13);
        }
        *(_DWORD *)(v5 + 64) = *v14;
        v15 = std::numeric_limits<unsigned int>::max();
        v16 = (char *)(v5 + 64);
        v17 = std::map<unsigned int,unsigned int>::operator[](
                (std::map<unsigned int,unsigned int> *const)(v5 + 304),
                (const std::map<unsigned int,unsigned int>::key_type *)(v5 + 64));
        v18 = v17;
        v19 = *(_BYTE *)(((unsigned __int64)v17 >> 3) + 0x7FFF8000);
        if ( v19 != 0 && (char)(((unsigned __int8)v17 & 7) + 3) >= v19 )
        {
          LOBYTE(v16) = v19 != 0;
          __asan_report_store4(v17, v16);
        }
        *v18 = v15;
        v20 = Json::Value::operator[]((Json::Value_0 *const)jval, "uid_list");
        Json::Value::Value((Json::Value *)&other, *(_DWORD *)(v5 + 64));
        Json::Value::append(v20, &other, (int)v36, v37);
        Json::Value::~Value(&other);
        __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++(&__for_begin);
      }
      *(_DWORD *)(v5 + 48) = MysqlOpMisc::insertPlayerFeatureBlockConfig(
                               (const std::map<unsigned int,unsigned int> *)(v5 + 304),
                               3u);
      Json::Value::Value((Json::Value *)&other, *(_DWORD *)(v5 + 48));
      v21 = Json::Value::operator[]((Json::Value_0 *const)jval, "retcode");
      Json::Value::operator=(v21, &other);
      Json::Value::~Value(&other);
      if ( *(_DWORD *)(v5 + 48) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&key,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/handler/request_handler.api.hpp",
          "addToCrcSuspiciousList",
          5024);
        v22 = common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(
                (common::milog::MiLogStream *const)&key,
                (const char (*)[46])"insertPlayerFeatureBlockConfig fail, retcode:");
        v23 = common::milog::MiLogStream::operator<<<int,(int *)0>(v22, (const int *)(v5 + 48));
        v24 = common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
                v23,
                (const char (*)[19])" player_block_map:");
        common::milog::MiLogStream::operator<<<unsigned int,unsigned int>(
          v24,
          (const std::map<unsigned int,unsigned int> *)(v5 + 304));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      }
      if ( *(_BYTE *)(v5 + 32) )
      {
        __for_range_0 = (std::vector<unsigned int> *)(v5 + 112);
        __for_begin._M_current = std::vector<unsigned int>::begin((std::vector<unsigned int> *const)(v5 + 112))._M_current;
        __for_end._M_current = std::vector<unsigned int>::end(__for_range_0)._M_current;
        while ( __gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(&__for_begin, &__for_end) )
        {
          v25 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*(&__for_begin);
          v26 = v25;
          if ( *(_BYTE *)(((unsigned __int64)v25 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v25 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v25 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v25);
          }
          uid = *v26;
          proto::ServerCheckSegmentCrcNotify::ServerCheckSegmentCrcNotify((proto::ServerCheckSegmentCrcNotify *const)(v5 + 176));
          common::minet::PacketUtils::createPacket<proto::ServerCheckSegmentCrcNotify>((const proto::ServerCheckSegmentCrcNotify *)(v5 + 80));
          if ( std::operator==<common::minet::Packet>((const std::shared_ptr<common::minet::Packet> *)(v5 + 80), 0LL) )
          {
            v4 = 2;
            v27 = 0;
          }
          else
          {
            v28 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 80));
            common::minet::Packet::setUserId(v28, uid);
            v29 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 80));
            common::minet::Packet::setTargetService(v29, 3u);
            v30 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 80));
            common::minet::Packet::setProto<proto::ServerCheckSegmentCrcNotify>(
              v30,
              (const proto::ServerCheckSegmentCrcNotify *)(v5 + 176));
            v31 = std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false> *const)&ResourceBox::network_mgr_ptr);
            v32 = v31;
            if ( *(_BYTE *)(((unsigned __int64)v31 >> 3) + 0x7FFF8000) )
              __asan_report_load8(v31);
            v33 = (unsigned __int64)(v32->_vptr_NetworkMgrBase + 8);
            if ( *(_BYTE *)((v33 >> 3) + 0x7FFF8000) )
              v33 = __asan_report_load8(v32->_vptr_NetworkMgrBase + 8);
            v38 = *(void (__fastcall **)(std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::shared_ptr<common::minet::Packet> *))v33;
            std::shared_ptr<common::minet::Packet>::shared_ptr(
              &v46,
              (const std::shared_ptr<common::minet::Packet> *)(v5 + 80));
            v38(v32, &v46);
            std::shared_ptr<common::minet::Packet>::~shared_ptr(&v46);
            v34 = Json::Value::operator[]((Json::Value_0 *const)jval, "notified_uid_list");
            Json::Value::Value((Json::Value *)&other, uid);
            Json::Value::append(v34, &other, (int)v36, (char)v38);
            Json::Value::~Value(&other);
            v27 = 1;
          }
          std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v5 + 80));
          proto::ServerCheckSegmentCrcNotify::~ServerCheckSegmentCrcNotify((proto::ServerCheckSegmentCrcNotify *const)(v5 + 176));
          if ( v27 != 1 )
            goto LABEL_38;
          __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++(&__for_begin);
        }
      }
      v4 = *(_DWORD *)(v5 + 48);
LABEL_38:
      std::map<unsigned int,unsigned int>::~map((std::map<unsigned int,unsigned int> *const)(v5 + 304));
    }
    else
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "addToCrcSuspiciousList",
        5009);
      v12 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
              (common::milog::MiLogStream *const)&key,
              (const char (*)[35])"uid_vec is too long, uid_list_str:");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v12, (const std::string *)(v5 + 240));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      v4 = 1002;
    }
    std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v5 + 112));
  }
  std::string::~string((void *)(v5 + 240));
  result = v4;
  if ( v36 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF802C) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5050: range 000000000CBC7E80-000000000CBC858E
int32_t __cdecl RequestHandler::removeFromCrcSuspiciousList(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v8; // rax
  int32_t v9; // r14d
  common::milog::MiLogStream *v10; // rax
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v11; // rax
  uint32_t *v12; // rdx
  Json::Value_0 *v13; // r14
  unsigned int *M_current; // r14
  std::vector<unsigned int>::iterator v15; // rax
  Json::Value_0 *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  int32_t result; // eax
  int p_yielda; // [rsp+0h] [rbp-1C0h]
  Json::Value *jvala; // [rsp+8h] [rbp-1B8h]
  std::allocator<char> __a; // [rsp+23h] [rbp-19Dh] BYREF
  uint32_t uid; // [rsp+24h] [rbp-19Ch]
  std::vector<unsigned int>::iterator __for_begin; // [rsp+28h] [rbp-198h] BYREF
  std::vector<unsigned int>::iterator __for_end; // [rsp+30h] [rbp-190h] BYREF
  std::vector<unsigned int> *__for_range; // [rsp+38h] [rbp-188h]
  std::string key; // [rsp+40h] [rbp-180h] BYREF
  Json::Value_0 other; // [rsp+60h] [rbp-160h] BYREF
  char v30[304]; // [rsp+90h] [rbp-130h] BYREF

  jvala = jval;
  p_yielda = (int)p_yield;
  v4 = (unsigned __int64)v30;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(256LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 32 4 12 retcode:5052 48 24 12 uid_vec:5058 112 32 17 uid_list_str:5051 176 48 12 uid_set:5071";
  *(_QWORD *)(v4 + 16) = RequestHandler::removeFromCrcSuspiciousList;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = 61956;
  v6[536862722] = -218959360;
  v6[536862723] = 62194;
  v6[536862724] = -219021312;
  v6[536862725] = 62194;
  v6[536862727] = -202116109;
  std::string::basic_string(v4 + 112);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&key, "uid_list", &__a);
  *(_DWORD *)(v4 + 32) = getRequestParam<std::string>(request, &key, (std::string *)(v4 + 112));
  std::string::~string(&key);
  std::allocator<char>::~allocator(&__a);
  if ( *(_DWORD *)(v4 + 32) || (unsigned __int8)std::string::empty(v4 + 112) )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&key,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/handler/request_handler.api.hpp",
      "removeFromCrcSuspiciousList",
      5055);
    v8 = common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
           (common::milog::MiLogStream *const)&key,
           (const char (*)[30])"parse uid fail, uid_list_str:");
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, (const std::string *)(v4 + 112));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
    v9 = 1002;
  }
  else
  {
    std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v4 + 48));
    std::allocator<char>::allocator(&__a);
    std::string::basic_string<std::allocator<char>>(&key, ",", &__a);
    *(_DWORD *)(v4 + 32) = common::tools::StringUtils::splitToList<unsigned int>(
                             (const std::string *)(v4 + 112),
                             &key,
                             (std::vector<unsigned int> *)(v4 + 48),
                             1);
    std::string::~string(&key);
    std::allocator<char>::~allocator(&__a);
    if ( *(_DWORD *)(v4 + 32) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "removeFromCrcSuspiciousList",
        5062);
      v10 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
              (common::milog::MiLogStream *const)&key,
              (const char (*)[32])"splitToList fail, uid_list_str:");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v10, (const std::string *)(v4 + 112));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      v9 = 1002;
    }
    else
    {
      __for_range = (std::vector<unsigned int> *)(v4 + 48);
      __for_begin._M_current = std::vector<unsigned int>::begin((std::vector<unsigned int> *const)(v4 + 48))._M_current;
      __for_end._M_current = std::vector<unsigned int>::end(__for_range)._M_current;
      while ( __gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(&__for_begin, &__for_end) )
      {
        v11 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*(&__for_begin);
        v12 = v11;
        if ( *(_BYTE *)(((unsigned __int64)v11 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v11 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v11 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v11);
        }
        uid = *v12;
        v13 = Json::Value::operator[]((Json::Value_0 *const)jvala, "uid_list");
        Json::Value::Value((Json::Value *)&other, uid);
        Json::Value::append(v13, &other, p_yielda, (char)jvala);
        Json::Value::~Value(&other);
        __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++(&__for_begin);
      }
      M_current = std::vector<unsigned int>::end((std::vector<unsigned int> *const)(v4 + 48))._M_current;
      v15._M_current = std::vector<unsigned int>::begin((std::vector<unsigned int> *const)(v4 + 48))._M_current;
      std::set<unsigned int>::set<__gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>>(
        (std::set<unsigned int> *const)(v4 + 176),
        v15,
        (__gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >)M_current);
      *(_DWORD *)(v4 + 32) = MysqlOpMisc::deletePlayerFeatureBlockConfig((const std::set<unsigned int> *)(v4 + 176), 3u);
      Json::Value::Value((Json::Value *)&other, *(_DWORD *)(v4 + 32));
      v16 = Json::Value::operator[]((Json::Value_0 *const)jvala, "retcode");
      Json::Value::operator=(v16, &other);
      Json::Value::~Value(&other);
      if ( *(_DWORD *)(v4 + 32) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&key,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/handler/request_handler.api.hpp",
          "removeFromCrcSuspiciousList",
          5076);
        v17 = common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(
                (common::milog::MiLogStream *const)&key,
                (const char (*)[46])"deletePlayerFeatureBlockConfig fail, retcode:");
        v18 = common::milog::MiLogStream::operator<<<int,(int *)0>(v17, (const int *)(v4 + 32));
        v19 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v18, (const char (*)[10])" uid_vec:");
        common::milog::MiLogStream::operator<<<unsigned int>(v19, (const std::vector<unsigned int> *)(v4 + 48));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
        v9 = *(_DWORD *)(v4 + 32);
      }
      else
      {
        v9 = 0;
      }
      std::set<unsigned int>::~set((std::set<unsigned int> *const)(v4 + 176));
    }
    std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v4 + 48));
  }
  std::string::~string((void *)(v4 + 112));
  result = v9;
  if ( v30 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5085: range 000000000CBC8D80-000000000CBC9141
int32_t __cdecl RequestHandler::checkCrcVersions(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  const char (*v7)[15]; // r9
  int32_t v8; // r14d
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+3Bh] [rbp-1A5h] BYREF
  int32_t retcode; // [rsp+3Ch] [rbp-1A4h]
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+40h] [rbp-1A0h] BYREF
  std::string key; // [rsp+60h] [rbp-180h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v16; // [rsp+80h] [rbp-160h] BYREF
  char v17[304]; // [rsp+B0h] [rbp-130h] BYREF

  v4 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(256LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 48 4 18 platform_type:5086 64 32 23 client_version_str:5087 128 32 13 make_req:5094 192 32 13 make_rsp:5104";
  *(_QWORD *)(v4 + 16) = RequestHandler::checkCrcVersions;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862723] = -218959118;
  v6[536862725] = -218959118;
  v6[536862727] = -202116109;
  *(_DWORD *)(v4 + 48) = 0;
  std::string::basic_string(v4 + 64);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&key, "platform_type", &__a);
  retcode = getRequestParam<unsigned int,char const(&)[15],std::string &>(
              request,
              &key,
              (unsigned int *)(v4 + 48),
              (std::remove_reference<char const (&)[15]>::type *)"client_version",
              (std::string *)(v4 + 64),
              v7);
  std::string::~string(&key);
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v8 = retcode;
  }
  else
  {
    std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::checkCrcVersions(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
      (std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> *const)(v4 + 128),
      (RequestHandler::checkCrcVersions::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)>)__PAIR128__(v4 + 64, v4 + 48));
    std::function<int ()(common::minet::Packet &,Json::Value &)>::function<RequestHandler::checkCrcVersions(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::Packet &,Json::Value &)#2},void,void>(
      (std::function<int(common::minet::Packet&,Json::Value&)> *const)(v4 + 192),
      (RequestHandler::checkCrcVersions::<lambda(common::minet::Packet&, Json::Value&)>)(v4 + 48));
    boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
      &v16,
      p_yield);
    std::function<int ()(common::minet::Packet &,Json::Value &)>::function(
      (std::function<int(common::minet::Packet&,Json::Value&)> *const)&key,
      (const std::function<int(common::minet::Packet&,Json::Value&)> *)(v4 + 192));
    std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function(
      &p_make_req,
      (const std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> *)(v4 + 128));
    v8 = RequestHandler::processRequestOnOtherServer(
           this,
           &p_make_req,
           (RequestHandler::MakeRspFunc *)&key,
           request,
           jval,
           &v16);
    std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
    std::function<int ()(common::minet::Packet &,Json::Value &)>::~function((std::function<int(common::minet::Packet&,Json::Value&)> *const)&key);
    boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v16);
    std::function<int ()(common::minet::Packet &,Json::Value &)>::~function((std::function<int(common::minet::Packet&,Json::Value&)> *const)(v4 + 192));
    std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function((std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> *const)(v4 + 128));
  }
  std::string::~string((void *)(v4 + 64));
  result = v8;
  if ( v17 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8014) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5094: range 000000000CBC8590-000000000CBC8799
int32_t __cdecl RequestHandler::checkCrcVersions(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::checkCrcVersions::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  proto::CheckGameCrcVersionReq *v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  uint32_t *platform_type; // rdx
  int32_t result; // eax
  char v9[144]; // [rsp+20h] [rbp-90h] BYREF

  v3 = (proto::CheckGameCrcVersionReq *)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = (proto::CheckGameCrcVersionReq *)v4;
  }
  v3->_vptr_MessageLite = (int (**)(...))1102416563;
  v3->_internal_metadata_.ptr_ = "1 32 32 8 req:5096";
  v3->client_version_str_.ptr_ = (std::string *)RequestHandler::checkCrcVersions(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (unsigned __int64)v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450888) = -202116109;
  proto::CheckGameCrcVersionReq::CheckGameCrcVersionReq(v3 + 1);
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8(__closure);
  platform_type = __closure->__platform_type;
  if ( *(_BYTE *)(((unsigned __int64)__closure->__platform_type >> 3) + 0x7FFF8000) != 0
    && (char)(((__int64)__closure->__platform_type & 7) + 3) >= *(_BYTE *)(((unsigned __int64)__closure->__platform_type >> 3)
                                                                         + 0x7FFF8000) )
  {
    __asan_report_load4(__closure->__platform_type);
  }
  proto::CheckGameCrcVersionReq::set_platform(v3 + 1, *platform_type);
  if ( *(_BYTE *)(((unsigned __int64)&__closure->__client_version_str >> 3) + 0x7FFF8000) )
    __asan_report_load8(&__closure->__client_version_str);
  proto::CheckGameCrcVersionReq::set_client_version_str(v3 + 1, __closure->__client_version_str);
  common::minet::Packet::setTargetService(packet, 4u);
  common::minet::Packet::setProto<proto::CheckGameCrcVersionReq>(packet, v3 + 1);
  proto::CheckGameCrcVersionReq::~CheckGameCrcVersionReq(v3 + 1);
  result = 0;
  if ( v9 == (char *)v3 )
  {
    *(_DWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    v3->_vptr_MessageLite = (int (**)(...))1172321806;
    *(_QWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 5104: range 000000000CBC879A-000000000CBC8D7F
int32_t __cdecl RequestHandler::checkCrcVersions(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::Packet &,Json::Value &)#2}::operator()(
        const RequestHandler::checkCrcVersions::<lambda(common::minet::Packet&, Json::Value&)> *const __closure,
        common::minet::Packet *rsp_packet,
        Json::Value *jval)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t v6; // r14d
  std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v7; // rax
  const std::string *v8; // rax
  Json::Value_0 *v9; // rax
  unsigned int v10; // eax
  Json::Value_0 *v11; // rax
  unsigned int v12; // eax
  Json::Value_0 *v13; // rax
  signed int v14; // eax
  const std::string *v15; // rax
  Json::Value_0 *v16; // rax
  const std::string *v17; // rax
  Json::Value_0 *v18; // rax
  unsigned int v19; // eax
  Json::Value_0 *v20; // rax
  Json::Value_0 *v21; // r14
  int32_t result; // eax
  int v23; // [rsp+0h] [rbp-170h]
  Json::Value *jvala; // [rsp+8h] [rbp-168h]
  int32_t ret; // [rsp+20h] [rbp-150h]
  unsigned int app_id; // [rsp+24h] [rbp-14Ch]
  unsigned int *__for_begin; // [rsp+28h] [rbp-148h]
  const google::protobuf::RepeatedField<unsigned int> *__for_range; // [rsp+30h] [rbp-140h]
  google::protobuf::RepeatedField<unsigned int>::const_iterator __for_end; // [rsp+38h] [rbp-138h]
  std::shared_ptr<Config> v30; // [rsp+40h] [rbp-130h] BYREF
  std::string v31; // [rsp+50h] [rbp-120h] BYREF
  Json::Value_0 other; // [rsp+70h] [rbp-100h] BYREF
  char v33[208]; // [rsp+A0h] [rbp-D0h] BYREF

  jvala = jval;
  v3 = (unsigned __int64)v33;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(160LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 48 72 8 rsp:5106";
  *(_QWORD *)(v3 + 16) = RequestHandler::checkCrcVersions(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::Packet &,Json::Value &)#2}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61937;
  v5[536862723] = -218103808;
  v5[536862724] = -202116109;
  proto::CheckGameCrcVersionRsp::CheckGameCrcVersionRsp((proto::CheckGameCrcVersionRsp *const)(v3 + 48));
  ret = common::minet::Packet::getProto<proto::CheckGameCrcVersionRsp>(
          rsp_packet,
          (proto::CheckGameCrcVersionRsp *)(v3 + 48));
  if ( ret )
  {
    v6 = ret;
  }
  else if ( proto::CheckGameCrcVersionRsp::retcode((const proto::CheckGameCrcVersionRsp *const)(v3 + 48)) )
  {
    v6 = proto::CheckGameCrcVersionRsp::retcode((const proto::CheckGameCrcVersionRsp *const)(v3 + 48));
  }
  else
  {
    ServiceBox::findService<MuipserverService>();
    MuipserverService::getConfig((MuipserverService *const)&v30);
    v7 = std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<Config,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v30);
    v8 = ConfigBase::getRegionName[abi:cxx11](v7);
    Json::Value::Value(&other, v8);
    v9 = Json::Value::operator[]((Json::Value_0 *const)jvala, "region");
    Json::Value::operator=(v9, &other);
    Json::Value::~Value(&other);
    std::shared_ptr<Config>::~shared_ptr(&v30);
    v10 = proto::CheckGameCrcVersionRsp::total_game((const proto::CheckGameCrcVersionRsp *const)(v3 + 48));
    Json::Value::Value((Json::Value *)&other, v10);
    v11 = Json::Value::operator[]((Json::Value_0 *const)jvala, "total_gameserver");
    Json::Value::operator=(v11, &other);
    Json::Value::~Value(&other);
    v12 = proto::CheckGameCrcVersionRsp::platform((const proto::CheckGameCrcVersionRsp *const)(v3 + 48));
    Json::Value::Value((Json::Value *)&other, v12);
    v13 = Json::Value::operator[]((Json::Value_0 *const)jvala, "platform");
    Json::Value::operator=(v13, &other);
    Json::Value::~Value(&other);
    v14 = proto::CheckGameCrcVersionRsp::platform((const proto::CheckGameCrcVersionRsp *const)(v3 + 48));
    v15 = proto::PlatformType_Name[abi:cxx11]((proto::PlatformType)v14);
    Json::Value::Value(&other, v15);
    v16 = Json::Value::operator[]((Json::Value_0 *const)jvala, "platform_str");
    Json::Value::operator=(v16, &other);
    Json::Value::~Value(&other);
    v17 = proto::CheckGameCrcVersionRsp::client_version_str[abi:cxx11]((const proto::CheckGameCrcVersionRsp *const)(v3 + 48));
    Json::Value::Value(&other, v17);
    v18 = Json::Value::operator[]((Json::Value_0 *const)jvala, "client_version_str");
    Json::Value::operator=(v18, &other);
    Json::Value::~Value(&other);
    v19 = proto::CheckGameCrcVersionRsp::wrong_num((const proto::CheckGameCrcVersionRsp *const)(v3 + 48));
    Json::Value::Value((Json::Value *)&other, v19);
    v20 = Json::Value::operator[]((Json::Value_0 *const)jvala, "wrong");
    Json::Value::operator=(v20, &other);
    Json::Value::~Value(&other);
    __for_range = proto::CheckGameCrcVersionRsp::wrong_name_list((const proto::CheckGameCrcVersionRsp *const)(v3 + 48));
    __for_begin = (unsigned int *)google::protobuf::RepeatedField<unsigned int>::begin(__for_range);
    __for_end = google::protobuf::RepeatedField<unsigned int>::end(__for_range);
    while ( __for_begin != __for_end )
    {
      if ( *(_BYTE *)(((unsigned __int64)__for_begin >> 3) + 0x7FFF8000) != 0
        && (char)(((unsigned __int8)__for_begin & 7) + 3) >= *(_BYTE *)(((unsigned __int64)__for_begin >> 3) + 0x7FFF8000) )
      {
        __asan_report_load4(__for_begin);
      }
      app_id = *__for_begin;
      v21 = Json::Value::operator[]((Json::Value_0 *const)jvala, "wrong_name");
      common::tools::AppIdUtils::getAppIdStr[abi:cxx11](&v31, app_id);
      Json::Value::Value(&other, &v31);
      Json::Value::append(v21, &other, v23, (char)jvala);
      Json::Value::~Value(&other);
      std::string::~string(&v31);
      ++__for_begin;
    }
    v6 = 0;
  }
  proto::CheckGameCrcVersionRsp::~CheckGameCrcVersionRsp((proto::CheckGameCrcVersionRsp *const)(v3 + 48));
  result = v6;
  if ( v33 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF800C) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 5134: range 000000000CBC9538-000000000CBC9710
int32_t __cdecl RequestHandler::refreshBlossomCircleCamp(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:5135";
  *(_QWORD *)(v4 + 16) = RequestHandler::refreshBlossomCircleCamp;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::refreshBlossomCircleCamp(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::refreshBlossomCircleCamp::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5135: range 000000000CBC9142-000000000CBC9537
int32_t __cdecl RequestHandler::refreshBlossomCircleCamp(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::refreshBlossomCircleCamp::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-125h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-124h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-120h]
  proto::RefreshBlossomCircleCampOp *op; // [rsp+38h] [rbp-118h]
  char v14[272]; // [rsp+40h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 48 4 19 circle_camp_id:5137 64 4 15 refresh_id:5138 80 4 8 uid:5140 96 32 11 ticket:5139 160 32 8 req:5159";
  *(_QWORD *)(v3 + 16) = RequestHandler::refreshBlossomCircleCamp(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862724] = -218959118;
  v5[536862726] = -202116109;
  *(_DWORD *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 64) = 0;
  std::string::basic_string(v3 + 96);
  *(_DWORD *)(v3 + 80) = 0;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 160), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[11],int &,char const(&)[15],unsigned int &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 160),
              (unsigned int *)(v3 + 80),
              (std::remove_reference<char const (&)[11]>::type *)"refresh_id",
              (int *)(v3 + 64),
              (std::remove_reference<char const (&)[15]>::type *)"circle_camp_id",
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 96));
  std::string::~string((void *)(v3 + 160));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 80) )
      goto LABEL_10;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 80)) )
      v7 = 0;
    else
LABEL_10:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else if ( (unsigned __int8)std::string::empty(v3 + 96) )
    {
      v6 = 2012;
    }
    else if ( *(_DWORD *)(v3 + 64) )
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 160));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 96));
      op = proto::OfflineMsgBin::mutable_refresh_blossom_circle_camp_op(msg);
      proto::RefreshBlossomCircleCampOp::set_refresh_id(op, *(_DWORD *)(v3 + 64));
      proto::RefreshBlossomCircleCampOp::set_circle_camp_id(op, *(_DWORD *)(v3 + 48));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 80));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 160));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
    }
    else
    {
      v6 = -1;
    }
  }
  std::string::~string((void *)(v3 + 96));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 5176: range 000000000CBC9712-000000000CBC9D55
// local variable allocation has failed, the output may be wrong!
int32_t __cdecl RequestHandler::queryPlayerShowAvatarInfo(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  const char (*v7)[10]; // r9
  int32_t v8; // r14d
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  Json::Value *v11; // rax
  int32_t result; // eax
  int p_yielda; // [rsp+0h] [rbp-360h]
  Json::Value *jvalb; // [rsp+8h] [rbp-358h]
  int v16; // [rsp+20h] [rbp-340h]
  void *v17; // [rsp+28h] [rbp-338h] OVERLAPPED BYREF
  std::string key; // [rsp+30h] [rbp-330h] BYREF
  char v19[784]; // [rsp+50h] [rbp-310h] BYREF

  p_yielda = (int)p_yield;
  v4 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_4(736LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "9 48 1 13 is_exist:5186 64 4 8 uid:5177 80 4 14 avatar_id:5178 96 4 12 options:5193 112 32 15 re"
                        "dis_data:5185 176 32 16 json_string:5192 240 40 15 status_ret:5197 320 40 15 json_value:5205 400"
                        " 272 16 json_reader:5204";
  *(_QWORD *)(v4 + 16) = RequestHandler::queryPlayerShowAvatarInfo;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234753551;
  v6[536862722] = -234556924;
  v6[536862723] = 61956;
  v6[536862724] = -219021312;
  v6[536862725] = 62194;
  v6[536862726] = -219021312;
  v6[536862727] = 62194;
  v6[536862728] = -234881024;
  v6[536862729] = -218959118;
  v6[536862731] = -218959360;
  v6[536862732] = 62194;
  v6[536862741] = -202116109;
  v6[536862742] = -202116109;
  *(_DWORD *)(v4 + 64) = 0;
  *(_DWORD *)(v4 + 80) = 0;
  std::allocator<char>::allocator((char *)&v17 + 3);
  std::string::basic_string<std::allocator<char>>(&key, off_1A660020, (const std::allocator<char> *)&v17 + 3);
  HIDWORD(v17) = getRequestParam<unsigned int,char const(&)[10],unsigned int &>(
                   request,
                   &key,
                   (unsigned int *)(v4 + 64),
                   (std::remove_reference<char const (&)[10]>::type *)"avatar_id",
                   (unsigned int *)(v4 + 80),
                   v7);
  std::string::~string(&key);
  std::allocator<char>::~allocator((char *)&v17 + 3);
  if ( HIDWORD(v17) )
  {
    v8 = HIDWORD(v17);
  }
  else
  {
    proto::PlayerShowAvatarRedisData::PlayerShowAvatarRedisData((proto::PlayerShowAvatarRedisData *const)(v4 + 112));
    if ( RedisOpSocialData::getPlayerShowAvatarInfo(
           *(_DWORD *)(v4 + 64),
           *(_DWORD *)(v4 + 80),
           (proto::PlayerShowAvatarRedisData *)(v4 + 112),
           (bool *)(v4 + 48)) )
    {
      v8 = -1;
    }
    else
    {
      std::allocator<char>::allocator((char *)&v17 + 3);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v4 + 176),
        byte_1A5D1560,
        (const std::allocator<char> *)&v17 + 3);
      std::allocator<char>::~allocator((char *)&v17 + 3);
      google::protobuf::util::JsonPrintOptions::JsonPrintOptions((google::protobuf::util::JsonPrintOptions *const)(v4 + 96));
      *(_BYTE *)(v4 + 96) = 1;
      *(_BYTE *)(v4 + 97) = 1;
      *(_BYTE *)(v4 + 99) = 1;
      google::protobuf::util::MessageToJsonString(
        (google::protobuf::util::Status *)(v4 + 240),
        (google::protobuf::Message *)(v4 + 112),
        p_yielda,
        jval,
        (int)request,
        (char)this,
        v16,
        v17);
      if ( !google::protobuf::util::Status::ok((const google::protobuf::util::Status *const)(v4 + 240)) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&key,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/handler/request_handler.api.hpp",
          "queryPlayerShowAvatarInfo",
          5200);
        v9 = common::milog::MiLogStream::operator<<<char [61],(char *[61])0>(
               (common::milog::MiLogStream *const)&key,
               (const char (*)[61])"PlayerShowAvatarRedisData to json_string failed player_uid: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v4 + 64));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
        v8 = -1;
      }
      else
      {
        Json::Reader::Reader((Json::Reader *)(v4 + 400));
        Json::Value::Value(v4 + 320, 0LL);
        if ( !Json::Reader::parse(
                (Json::Reader *const)(v4 + 400),
                (const std::string *)(v4 + 176),
                (Json::Value *)(v4 + 320),
                1) )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&key,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/handler/request_handler.api.hpp",
            "queryPlayerShowAvatarInfo",
            5208);
          v10 = common::milog::MiLogStream::operator<<<char [72],(char *[72])0>(
                  (common::milog::MiLogStream *const)&key,
                  (const char (*)[72])"PlayerShowAvatarRedisData json_string to json_value failed player_uid: ");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v4 + 64));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
          v8 = -1;
        }
        else
        {
          v11 = (Json::Value *)Json::Value::operator[]((Json::Value_0 *const)jvalb, "data");
          Json::Value::operator=(v11);
          v8 = 0;
        }
        Json::Value::~Value((Json::Value_0 *const)(v4 + 320));
        Json::Reader::~Reader((Json::Reader *const)(v4 + 400));
      }
      google::protobuf::util::Status::~Status((google::protobuf::util::Status *const)(v4 + 240));
      std::string::~string((void *)(v4 + 176));
    }
    proto::PlayerShowAvatarRedisData::~PlayerShowAvatarRedisData((proto::PlayerShowAvatarRedisData *const)(v4 + 112));
  }
  result = v8;
  if ( v19 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF802C) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8054) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8058) = -168430091;
  }
  return result;
};

// Line 5216: range 000000000CBC9D56-000000000CBCA5F6
int32_t __cdecl RequestHandler::kickOutPlayerByAccountUid(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  const char (*v7)[12]; // r9
  int32_t v8; // r14d
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::minet::Packet *v20; // rax
  common::minet::Packet *v21; // rax
  common::minet::Packet *v22; // rax
  MuipserverService *v23; // r14
  unsigned __int64 v24; // rdx
  std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v25; // rax
  std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v26; // r14
  unsigned __int64 v27; // rax
  __int64 (__fastcall *v28)(std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::shared_ptr<common::minet::Packet> *); // r15
  Json::Value_0 *v29; // rax
  int32_t result; // eax
  int32_t retcode; // [rsp+38h] [rbp-218h]
  int ret; // [rsp+3Ch] [rbp-214h]
  std::shared_ptr<common::minet::Packet> packet_ptr; // [rsp+40h] [rbp-210h] BYREF
  std::string key; // [rsp+50h] [rbp-200h] BYREF
  Json::Value_0 other; // [rsp+70h] [rbp-1E0h] BYREF
  char v37[432]; // [rsp+A0h] [rbp-1B0h] BYREF

  v4 = (unsigned __int64)v37;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(384LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "6 32 1 21 is_account_exist:5232 48 4 17 account_type:5217 64 16 15 packet_ptr:5254 96 24 11 noti"
                        "fy:5250 160 32 16 account_uid:5218 224 120 8 row:5233";
  *(_QWORD *)(v4 + 16) = RequestHandler::kickOutPlayerByAccountUid;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556927;
  v6[536862722] = -219021312;
  v6[536862723] = -234881024;
  v6[536862724] = -218959118;
  v6[536862726] = -218959118;
  v6[536862730] = -218103808;
  v6[536862731] = -202116109;
  std::string::basic_string(v4 + 160);
  std::allocator<char>::allocator(v4 + 32);
  std::string::basic_string<std::allocator<char>>(&key, "account_type", (const std::allocator<char> *)(v4 + 32));
  retcode = getRequestParam<unsigned int,char const(&)[12],std::string &>(
              request,
              &key,
              (unsigned int *)(v4 + 48),
              "account_uid",
              (std::string *)(v4 + 160),
              v7);
  std::string::~string(&key);
  std::allocator<char>::~allocator(v4 + 32);
  if ( retcode )
  {
    v8 = retcode;
  }
  else if ( *(_DWORD *)(v4 + 48) == 1 )
  {
    *(_BYTE *)(v4 + 32) = 0;
    TablePlayerUid::TablePlayerUid((TablePlayerUid *const)(v4 + 224));
    if ( MysqlOpPlayerData::selectPlayerUidByAccount(
           *(_DWORD *)(v4 + 48),
           (const std::string *)(v4 + 160),
           (TablePlayerUid *)(v4 + 224),
           (bool *)(v4 + 32)) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/handler/request_handler.api.hpp",
        "kickOutPlayerByAccountUid",
        5237);
      v9 = common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
             (common::milog::MiLogStream *const)&key,
             (const char (*)[47])"selectPlayerUidByAccount failed, account_type:");
      v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v4 + 48));
      v11 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v10, (const char (*)[14])" account_uid:");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v11, (const std::string *)(v4 + 160));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      v8 = -1;
    }
    else if ( *(_BYTE *)(v4 + 32) != 1 )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/handler/request_handler.api.hpp",
        "kickOutPlayerByAccountUid",
        5242);
      v12 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
              (common::milog::MiLogStream *const)&key,
              (const char (*)[35])"account is not exit, account_type:");
      v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v4 + 48));
      v14 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v13, (const char (*)[14])" account_uid:");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v14, (const std::string *)(v4 + 160));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      v8 = -1;
    }
    else
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/handler/request_handler.api.hpp",
        "kickOutPlayerByAccountUid",
        5246);
      v15 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
              (common::milog::MiLogStream *const)&key,
              (const char (*)[14])"account_uid: ");
      v16 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v15, (const std::string *)(v4 + 160));
      v17 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v16, (const char (*)[16])" account_type: ");
      v18 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(v4 + 48));
      v19 = common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v18, (const char (*)[7])" uid: ");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, (const unsigned int *)(v4 + 224));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      proto::KickoutPlayerNotify::KickoutPlayerNotify((proto::KickoutPlayerNotify *const)(v4 + 96));
      proto::KickoutPlayerNotify::set_reason((proto::KickoutPlayerNotify *const)(v4 + 96), 0xEu);
      common::minet::PacketUtils::createPacket();
      if ( std::operator==<common::minet::Packet>(0LL, (const std::shared_ptr<common::minet::Packet> *)(v4 + 64)) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&key,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/handler/request_handler.api.hpp",
          "kickOutPlayerByAccountUid",
          5257);
        common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
          (common::milog::MiLogStream *const)&key,
          (const char (*)[19])"createPacket fails");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
        v8 = -1;
      }
      else
      {
        v20 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
        common::minet::Packet::setUserId(v20, *(_DWORD *)(v4 + 224));
        v21 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
        common::minet::Packet::setTargetService(v21, 3u);
        v22 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
        common::minet::Packet::setProto<proto::KickoutPlayerNotify>(v22, (const proto::KickoutPlayerNotify *)(v4 + 96));
        v23 = ServiceBox::findService<MuipserverService>();
        std::shared_ptr<common::minet::Packet>::shared_ptr(
          &packet_ptr,
          (const std::shared_ptr<common::minet::Packet> *)(v4 + 64));
        ServiceBase::setPacketSource(v23, (common::minet::PacketPtr)__PAIR128__(v24, &packet_ptr));
        std::shared_ptr<common::minet::Packet>::~shared_ptr(&packet_ptr);
        v25 = std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false> *const)&ResourceBox::network_mgr_ptr);
        v26 = v25;
        if ( *(_BYTE *)(((unsigned __int64)v25 >> 3) + 0x7FFF8000) )
          __asan_report_load8(v25);
        v27 = (unsigned __int64)(v26->_vptr_NetworkMgrBase + 8);
        if ( *(_BYTE *)((v27 >> 3) + 0x7FFF8000) )
          v27 = __asan_report_load8(v26->_vptr_NetworkMgrBase + 8);
        v28 = *(__int64 (__fastcall **)(std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::shared_ptr<common::minet::Packet> *))v27;
        std::shared_ptr<common::minet::Packet>::shared_ptr(
          &packet_ptr,
          (const std::shared_ptr<common::minet::Packet> *)(v4 + 64));
        ret = v28(v26, &packet_ptr);
        std::shared_ptr<common::minet::Packet>::~shared_ptr(&packet_ptr);
        if ( ret )
        {
          v8 = ret;
        }
        else
        {
          Json::Value::Value((Json::Value *)&other, 0);
          v29 = Json::Value::operator[]((Json::Value_0 *const)jval, "retcode");
          Json::Value::operator=(v29, &other);
          Json::Value::~Value(&other);
          v8 = 0;
        }
      }
      std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v4 + 64));
      proto::KickoutPlayerNotify::~KickoutPlayerNotify((proto::KickoutPlayerNotify *const)(v4 + 96));
    }
    TablePlayerUid::~TablePlayerUid((TablePlayerUid *const)(v4 + 224));
  }
  else
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&key,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/handler/request_handler.api.hpp",
      "kickOutPlayerByAccountUid",
      5229);
    common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
      (common::milog::MiLogStream *const)&key,
      (const char (*)[35])"account type is not ACCOUNT_MIHOYO");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
    v8 = -1;
  }
  std::string::~string((void *)(v4 + 160));
  result = v8;
  if ( v37 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5280: range 000000000CBCA94E-000000000CBCAB26
int32_t __cdecl RequestHandler::recoverWorldLevel(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:5281";
  *(_QWORD *)(v4 + 16) = RequestHandler::recoverWorldLevel;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::recoverWorldLevel(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::recoverWorldLevel::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5281: range 000000000CBCA5F8-000000000CBCA94C
int32_t __cdecl RequestHandler::recoverWorldLevel(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::recoverWorldLevel::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  const char (*v6)[7]; // r9
  int32_t v7; // r14d
  char v8; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-105h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-104h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-100h]
  proto::RecoverWorldLevelOp *recover_world_level_op; // [rsp+38h] [rbp-F8h]
  char v15[240]; // [rsp+40h] [rbp-F0h] BYREF

  v3 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 48 4 8 uid:5283 64 32 11 ticket:5284 128 32 8 req:5302";
  *(_QWORD *)(v3 + 16) = RequestHandler::recoverWorldLevel(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862723] = -218959118;
  v5[536862725] = -202116109;
  *(_DWORD *)(v3 + 48) = 0;
  std::string::basic_string(v3 + 64);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 128), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 128),
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 64),
              v6);
  std::string::~string((void *)(v3 + 128));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v7 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 64) )
  {
    v7 = 2012;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 48) )
      goto LABEL_12;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 48)) )
      v8 = 0;
    else
LABEL_12:
      v8 = 1;
    if ( v8 )
    {
      v7 = 2001;
    }
    else
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 128));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 128));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 64));
      recover_world_level_op = proto::OfflineMsgBin::mutable_recover_world_level_op(msg);
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 48));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 128));
      v7 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 128));
    }
  }
  std::string::~string((void *)(v3 + 64));
  result = v7;
  if ( v15 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5316: range 000000000CBCAF38-000000000CBCB110
int32_t __cdecl RequestHandler::addRegionSearchProgress(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:5317";
  *(_QWORD *)(v4 + 16) = RequestHandler::addRegionSearchProgress;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::addRegionSearchProgress(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::addRegionSearchProgress::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5317: range 000000000CBCAB28-000000000CBCAF37
int32_t __cdecl RequestHandler::addRegionSearchProgress(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::addRegionSearchProgress::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-125h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-124h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-120h]
  proto::AddRegionSearchProgressOp *region_search_op; // [rsp+38h] [rbp-118h]
  char v14[272]; // [rsp+40h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 32 4 8 uid:5319 48 4 14 region_id:5320 64 4 16 add_recycle:5321 80 4 17 add_progress:5322 96 3"
                        "2 11 ticket:5323 160 32 8 req:5338";
  *(_QWORD *)(v3 + 16) = RequestHandler::addRegionSearchProgress(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -234556924;
  v5[536862724] = -218959118;
  v5[536862726] = -202116109;
  *(_DWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 64) = 0;
  *(_DWORD *)(v3 + 80) = 0;
  std::string::basic_string(v3 + 96);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 160), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[7],std::string &,char const(&)[10],unsigned int &,char const(&)[12],unsigned int &,char const(&)[13],unsigned int &>(
              http_request,
              (const std::string *)(v3 + 160),
              (unsigned int *)(v3 + 32),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 96),
              (std::remove_reference<char const (&)[10]>::type *)"region_id",
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[12]>::type *)"add_recycle",
              (unsigned int *)(v3 + 64),
              (std::remove_reference<char const (&)[13]>::type *)"add_progress",
              (unsigned int *)(v3 + 80));
  std::string::~string((void *)(v3 + 160));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 96) )
  {
    v6 = 2012;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 32) )
      goto LABEL_12;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 32)) )
      v7 = 0;
    else
LABEL_12:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 160));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 96));
      region_search_op = proto::OfflineMsgBin::mutable_add_region_search_progress_op(msg);
      proto::AddRegionSearchProgressOp::set_region_id(region_search_op, *(_DWORD *)(v3 + 48));
      proto::AddRegionSearchProgressOp::set_add_recycle(region_search_op, *(_DWORD *)(v3 + 64));
      proto::AddRegionSearchProgressOp::set_add_progress(region_search_op, *(_DWORD *)(v3 + 80));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 32));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 160));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
    }
  }
  std::string::~string((void *)(v3 + 96));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 5355: range 000000000CBCB4F2-000000000CBCB6CA
int32_t __cdecl RequestHandler::setMatchPunishTimes(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:5356";
  *(_QWORD *)(v4 + 16) = RequestHandler::setMatchPunishTimes;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::setMatchPunishTimes(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::setMatchPunishTimes::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5356: range 000000000CBCB112-000000000CBCB4F0
int32_t __cdecl RequestHandler::setMatchPunishTimes(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::setMatchPunishTimes::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-125h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-124h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-120h]
  proto::SetMatchPunishTimesOp *match_punish_op; // [rsp+38h] [rbp-118h]
  char v14[272]; // [rsp+40h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 48 4 8 uid:5358 64 4 13 match_id:5359 80 4 17 punish_times:5360 96 32 11 ticket:5361 160 32 8 req:5376";
  *(_QWORD *)(v3 + 16) = RequestHandler::setMatchPunishTimes(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862724] = -218959118;
  v5[536862726] = -202116109;
  *(_DWORD *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 64) = 0;
  *(_DWORD *)(v3 + 80) = 0;
  std::string::basic_string(v3 + 96);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 160), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[7],std::string &,char const(&)[9],unsigned int &,char const(&)[13],unsigned int &>(
              http_request,
              (const std::string *)(v3 + 160),
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 96),
              (std::remove_reference<char const (&)[9]>::type *)"match_id",
              (unsigned int *)(v3 + 64),
              (std::remove_reference<char const (&)[13]>::type *)"punish_times",
              (unsigned int *)(v3 + 80));
  std::string::~string((void *)(v3 + 160));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 96) )
  {
    v6 = 2012;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 48) )
      goto LABEL_12;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 48)) )
      v7 = 0;
    else
LABEL_12:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 160));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 96));
      match_punish_op = proto::OfflineMsgBin::mutable_set_match_punish_times_op(msg);
      proto::SetMatchPunishTimesOp::set_match_id(match_punish_op, *(_DWORD *)(v3 + 64));
      proto::SetMatchPunishTimesOp::set_punish_times(match_punish_op, *(_DWORD *)(v3 + 80));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 48));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 160));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
    }
  }
  std::string::~string((void *)(v3 + 96));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 5392: range 000000000CBCBA56-000000000CBCBC2E
int32_t __cdecl RequestHandler::forceAcceptQuest(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:5393";
  *(_QWORD *)(v4 + 16) = RequestHandler::forceAcceptQuest;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::forceAcceptQuest(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::forceAcceptQuest::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5393: range 000000000CBCB6CC-000000000CBCBA55
int32_t __cdecl RequestHandler::forceAcceptQuest(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::forceAcceptQuest::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-105h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-104h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-100h]
  proto::ForceAcceptQuestOp *quest_op; // [rsp+38h] [rbp-F8h]
  char v14[240]; // [rsp+40h] [rbp-F0h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 4 8 uid:5395 48 4 13 quest_id:5396 64 32 11 ticket:5397 128 32 8 req:5411";
  *(_QWORD *)(v3 + 16) = RequestHandler::forceAcceptQuest(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862723] = -218959118;
  v5[536862725] = -202116109;
  *(_DWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  std::string::basic_string(v3 + 64);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 128), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 128),
              (unsigned int *)(v3 + 32),
              (std::remove_reference<char const (&)[9]>::type *)"quest_id",
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 64));
  std::string::~string((void *)(v3 + 128));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 64) )
  {
    v6 = 2012;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 32) )
      goto LABEL_12;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 32)) )
      v7 = 0;
    else
LABEL_12:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 128));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 128));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 64));
      quest_op = proto::OfflineMsgBin::mutable_force_accept_quest_op(msg);
      proto::ForceAcceptQuestOp::set_quest_id(quest_op, *(_DWORD *)(v3 + 48));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 32));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 128));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 128));
    }
  }
  std::string::~string((void *)(v3 + 64));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5425: range 000000000CBCBC30-000000000CBCC68A
int32_t __cdecl RequestHandler::queryPlayerCoopBinInfo(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  int32_t v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  int v8; // r15d
  int v9; // r15d
  common::milog::MiLogStream *v10; // rax
  _BOOL4 v11; // r15d
  proto::PlayerCoopCompBin *v12; // rax
  common::milog::MiLogStream *v13; // rax
  _BOOL4 v14; // r15d
  common::milog::MiLogStream *v15; // rax
  int v16; // r15d
  Json::Value *v17; // rax
  int v19; // [rsp+0h] [rbp-950h]
  char *v20; // [rsp+8h] [rbp-948h]
  int p_yielda; // [rsp+10h] [rbp-940h]
  char jvala; // [rsp+18h] [rbp-938h]
  Json::Value *jvalb; // [rsp+18h] [rbp-938h]
  std::allocator<char> __a; // [rsp+3Bh] [rbp-915h] BYREF
  int32_t retcode; // [rsp+3Ch] [rbp-914h]
  std::string key; // [rsp+40h] [rbp-910h] BYREF
  char v27[2288]; // [rsp+60h] [rbp-8F0h] BYREF

  jvala = (char)jval;
  p_yielda = (int)p_yield;
  v5 = (unsigned __int64)v27;
  v20 = v27;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_6(2240LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "12 48 1 13 is_exist:5435 64 4 8 uid:5426 80 4 12 options:5471 96 32 13 bin_data:5458 160 32 16 j"
                        "son_string:5470 224 40 15 status_ret:5475 304 40 15 json_value:5482 384 120 19 player_uid_row:54"
                        "46 544 192 20 player_data_row:5436 800 272 16 json_reader:5481 1136 376 7 os:5457 1584 520 20 pl"
                        "ayer_data_bin:5464";
  *(_QWORD *)(v5 + 16) = RequestHandler::queryPlayerCoopBinInfo;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234753551;
  v7[536862722] = -234556924;
  v7[536862724] = -218959118;
  v7[536862726] = -218959118;
  v7[536862728] = -218959360;
  v7[536862729] = 62194;
  v7[536862730] = -234881024;
  v7[536862731] = -218959118;
  v7[536862735] = -234881024;
  v7[536862736] = -218959118;
  v7[536862743] = -218959118;
  v7[536862744] = -218959118;
  v7[536862753] = -219021312;
  v7[536862754] = -218959118;
  v7[536862755] = 62194;
  v7[536862767] = -218959360;
  v7[536862768] = -218959118;
  v7[536862769] = 62194;
  v7[536862785] = -218103808;
  v7[536862786] = -202116109;
  v7[536862787] = -202116109;
  v7[536862788] = -202116109;
  v7[536862789] = -202116109;
  *(_DWORD *)(v5 + 64) = 0;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&key, off_1A660020, &__a);
  retcode = getRequestParam<unsigned int>(request, &key, (unsigned int *)(v5 + 64));
  std::string::~string(&key);
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v4 = retcode;
  }
  else
  {
    retcode = 1;
    *(_BYTE *)(v5 + 48) = 0;
    TablePlayerData::TablePlayerData((TablePlayerData *const)(v5 + 544));
    if ( MysqlOpPlayerData::selectPlayerDataByUid(
           *(_DWORD *)(v5 + 64),
           (TablePlayerData *)(v5 + 544),
           (bool *)(v5 + 48)) )
    {
      v8 = 0;
    }
    else if ( *(_BYTE *)(v5 + 48) != 1 )
    {
      retcode = 2001;
      v8 = 0;
    }
    else
    {
      TablePlayerUid::TablePlayerUid((TablePlayerUid *const)(v5 + 384));
      if ( MysqlOpPlayerData::selectPlayerUidByUid(
             *(_DWORD *)(v5 + 64),
             (TablePlayerUid *)(v5 + 384),
             (bool *)(v5 + 48)) )
      {
        v9 = 0;
      }
      else if ( *(_BYTE *)(v5 + 48) != 1 )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&key,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/handler/request_handler.api.hpp",
          "queryPlayerCoopBinInfo",
          5453);
        v10 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
                (common::milog::MiLogStream *const)&key,
                (const char (*)[44])"player_uid table select by uid failed uid: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v5 + 64));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
        retcode = 2001;
        v9 = 0;
      }
      else
      {
        std::ostringstream::basic_ostringstream(v5 + 1136);
        std::string::basic_string(v5 + 96);
        mysqlpp::String::to_string((const mysqlpp::String *const)(v5 + 632), (std::string *)(v5 + 96));
        if ( common::tools::ZlibUtil::isCompressWithPad((const std::string *)(v5 + 96)) )
        {
          common::tools::ZlibUtil::uncompressWithPad(&key, (const std::string *)(v5 + 96));
          std::string::operator=(v5 + 96, &key);
          std::string::~string(&key);
        }
        proto::PlayerDataBin::PlayerDataBin((proto::PlayerDataBin *const)(v5 + 1584));
        if ( (unsigned __int8)google::protobuf::MessageLite::ParseFromString(v5 + 1584, v5 + 96) != 1 )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&key,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/handler/request_handler.api.hpp",
            "queryPlayerCoopBinInfo",
            5467);
          common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
            (common::milog::MiLogStream *const)&key,
            (const char (*)[38])"player_data_bin ParseFromString fails");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
          v4 = -1;
          v11 = 0;
        }
        else
        {
          std::allocator<char>::allocator(&__a);
          std::string::basic_string<std::allocator<char>>((std::string *const)(v5 + 160), byte_1A5D1560, &__a);
          std::allocator<char>::~allocator(&__a);
          google::protobuf::util::JsonPrintOptions::JsonPrintOptions((google::protobuf::util::JsonPrintOptions *const)(v5 + 80));
          *(_BYTE *)(v5 + 80) = 1;
          *(_BYTE *)(v5 + 81) = 1;
          *(_BYTE *)(v5 + 83) = 1;
          v12 = (proto::PlayerCoopCompBin *)proto::PlayerDataBin::coop_bin((const proto::PlayerDataBin *const)(v5 + 1584));
          google::protobuf::util::MessageToJsonString(
            (google::protobuf::util::Status *)(v5 + 224),
            v12,
            v19,
            v27,
            p_yielda,
            jvala,
            (int)request,
            this);
          if ( !google::protobuf::util::Status::ok((const google::protobuf::util::Status *const)(v5 + 224)) )
          {
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)&key,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/handler/request_handler.api.hpp",
              "queryPlayerCoopBinInfo",
              5478);
            v13 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
                    (common::milog::MiLogStream *const)&key,
                    (const char (*)[44])"coop_bin to json_string failed player_uid: ");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v5 + 64));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
            v4 = -1;
            v14 = 0;
          }
          else
          {
            Json::Reader::Reader((Json::Reader *)(v5 + 800));
            Json::Value::Value(v5 + 304, 0LL);
            if ( !Json::Reader::parse(
                    (Json::Reader *const)(v5 + 800),
                    (const std::string *)(v5 + 160),
                    (Json::Value *)(v5 + 304),
                    1) )
            {
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)&key,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/handler/request_handler.api.hpp",
                "queryPlayerCoopBinInfo",
                5485);
              v15 = common::milog::MiLogStream::operator<<<char [55],(char *[55])0>(
                      (common::milog::MiLogStream *const)&key,
                      (const char (*)[55])"coop_bin json_string to json_value failed player_uid: ");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v15,
                (const unsigned int *)(v5 + 64));
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
              v4 = -1;
              v16 = 0;
            }
            else
            {
              v17 = (Json::Value *)Json::Value::operator[]((Json::Value_0 *const)jvalb, "coop_bin_data");
              Json::Value::operator=(v17);
              retcode = 0;
              v16 = 1;
            }
            Json::Value::~Value((Json::Value_0 *const)(v5 + 304));
            Json::Reader::~Reader((Json::Reader *const)(v5 + 800));
            v14 = v16 == 1;
          }
          google::protobuf::util::Status::~Status((google::protobuf::util::Status *const)(v5 + 224));
          std::string::~string((void *)(v5 + 160));
          v11 = v14;
        }
        proto::PlayerDataBin::~PlayerDataBin((proto::PlayerDataBin *const)(v5 + 1584));
        std::string::~string((void *)(v5 + 96));
        std::ostringstream::~ostringstream(v5 + 1136);
        if ( v11 )
          v9 = 2;
        else
          v9 = 1;
      }
      TablePlayerUid::~TablePlayerUid((TablePlayerUid *const)(v5 + 384));
      if ( v9 )
      {
        if ( v9 == 2 )
          v8 = 2;
        else
          v8 = 1;
      }
      else
      {
        v8 = 0;
      }
    }
    TablePlayerData::~TablePlayerData((TablePlayerData *const)(v5 + 544));
    if ( !v8 || v8 == 2 )
      v4 = retcode;
  }
  if ( v20 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8018) = 0;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF803C) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF805C) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8084) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF808C) = 0;
    *(_QWORD *)((v5 >> 3) + 0x7FFF80BC) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF80C4) = 0;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8104) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF810C) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8114) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    __asan_stack_free_6(v5, 2240LL, v20);
  }
  return v4;
};

// Line 5497: range 000000000CBCCC9A-000000000CBCCE72
int32_t __cdecl RequestHandler::addCoopPointSavePointList(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:5498";
  *(_QWORD *)(v4 + 16) = RequestHandler::addCoopPointSavePointList;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::addCoopPointSavePointList(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::addCoopPointSavePointList::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5498: range 000000000CBCC68C-000000000CBCCC99
int32_t __cdecl RequestHandler::addCoopPointSavePointList(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::addCoopPointSavePointList::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  char v9; // al
  google::protobuf::RepeatedField<unsigned int> *v10; // rax
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-185h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-184h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-180h]
  proto::AddCoopPointSavePointListOp *coop_op; // [rsp+38h] [rbp-178h]
  char v17[368]; // [rsp+40h] [rbp-170h] BYREF

  v3 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(320LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 32 4 8 uid:5500 48 4 18 coop_point_id:5501 64 24 19 save_point_vec:5516 128 32 24 save_point_l"
                        "ist_str:5502 192 32 11 ticket:5503 256 32 8 req:5533";
  *(_QWORD *)(v3 + 16) = RequestHandler::addCoopPointSavePointList(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -234881024;
  v5[536862723] = -218959118;
  v5[536862725] = -218959118;
  v5[536862727] = -218959118;
  v5[536862729] = -202116109;
  *(_DWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  std::string::basic_string(v3 + 128);
  std::string::basic_string(v3 + 192);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 256), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[14],unsigned int &,char const(&)[16],std::string &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 256),
              (unsigned int *)(v3 + 32),
              (std::remove_reference<char const (&)[14]>::type *)"coop_point_id",
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[16]>::type *)"save_point_list",
              (std::string *)(v3 + 128),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 192));
  std::string::~string((void *)(v3 + 256));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 128) )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v3 + 256),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/handler/request_handler.api.hpp",
      "operator()",
      5513);
    v7 = common::milog::MiLogStream::operator<<<char [55],(char *[55])0>(
           (common::milog::MiLogStream *const)(v3 + 256),
           (const char (*)[55])"parse save_point_list_str failed, save_point_list_str:");
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v7, (const std::string *)(v3 + 128));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 256));
    v6 = 1002;
  }
  else
  {
    std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v3 + 64));
    std::allocator<char>::allocator(&__a);
    std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 256), ",", &__a);
    retcode = common::tools::StringUtils::splitToList<unsigned int>(
                (const std::string *)(v3 + 128),
                (const std::string *)(v3 + 256),
                (std::vector<unsigned int> *)(v3 + 64),
                1);
    std::string::~string((void *)(v3 + 256));
    std::allocator<char>::~allocator(&__a);
    if ( retcode )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 256),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "operator()",
        5520);
      v8 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
             (common::milog::MiLogStream *const)(v3 + 256),
             (const char (*)[39])"splitToList fail, save_point_list_str:");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, (const std::string *)(v3 + 128));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 256));
      v6 = 1002;
    }
    else if ( (unsigned __int8)std::string::empty(v3 + 192) )
    {
      v6 = 2012;
    }
    else
    {
      if ( !*(_DWORD *)(v3 + 32) )
        goto LABEL_16;
      if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
        __asan_report_load8(__closure);
      if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 32)) )
        v9 = 0;
      else
LABEL_16:
        v9 = 1;
      if ( v9 )
      {
        v6 = 2001;
      }
      else
      {
        proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 256));
        msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 256));
        proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 192));
        coop_op = proto::OfflineMsgBin::mutable_add_coop_point_save_point_list_op(msg);
        proto::AddCoopPointSavePointListOp::set_coop_point_id(coop_op, *(_DWORD *)(v3 + 48));
        v10 = proto::AddCoopPointSavePointListOp::mutable_save_point_list(coop_op);
        common::tools::MiscUtils::vectorToRepeated<unsigned int,unsigned int>(
          (const std::vector<unsigned int> *)(v3 + 64),
          v10);
        common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 32));
        common::minet::Packet::setTargetService(packet, 9u);
        common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 256));
        v6 = 0;
        proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 256));
      }
    }
    std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v3 + 64));
  }
  std::string::~string((void *)(v3 + 192));
  std::string::~string((void *)(v3 + 128));
  result = v6;
  if ( v17 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF801C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8024) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5549: range 000000000CBCD214-000000000CBCD3EC
int32_t __cdecl RequestHandler::setMainCoopConfidence(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:5550";
  *(_QWORD *)(v4 + 16) = RequestHandler::setMainCoopConfidence;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::setMainCoopConfidence(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::setMainCoopConfidence::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5550: range 000000000CBCCE74-000000000CBCD213
int32_t __cdecl RequestHandler::setMainCoopConfidence(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::setMainCoopConfidence::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-105h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-104h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-100h]
  proto::SetMainCoopConfidenceOp *coop_op; // [rsp+38h] [rbp-F8h]
  char v14[240]; // [rsp+40h] [rbp-F0h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 4 8 uid:5552 48 4 15 confidence:5553 64 32 11 ticket:5554 128 32 8 req:5575";
  *(_QWORD *)(v3 + 16) = RequestHandler::setMainCoopConfidence(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862723] = -218959118;
  v5[536862725] = -202116109;
  *(_DWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  std::string::basic_string(v3 + 64);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 128), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[11],unsigned int &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 128),
              (unsigned int *)(v3 + 32),
              (std::remove_reference<char const (&)[11]>::type *)"confidence",
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 64));
  std::string::~string((void *)(v3 + 128));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 64) )
  {
    v6 = 2012;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 32) )
      goto LABEL_12;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 32)) )
      v7 = 0;
    else
LABEL_12:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else if ( *(_DWORD *)(v3 + 48) <= 5u )
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 128));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 128));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 64));
      coop_op = proto::OfflineMsgBin::mutable_set_main_coop_confidence_op(msg);
      proto::SetMainCoopConfidenceOp::set_confidence(coop_op, *(_DWORD *)(v3 + 48));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 32));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 128));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 128));
    }
    else
    {
      v6 = 1;
    }
  }
  std::string::~string((void *)(v3 + 64));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5591: range 000000000CBCD3ED-000000000CBCD8BE
int32_t __cdecl genHomeBlockMap(const std::string *block_list, std::map<unsigned int,unsigned int> *home_block_map)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  common::milog::MiLogStream *v5; // rdx
  int v6; // r14d
  std::vector<std::string>::size_type v7; // r14
  __int64 v8; // r14
  __int64 *v9; // r8
  int32_t result; // eax
  std::allocator<char> v11; // [rsp+1Eh] [rbp-112h] BYREF
  std::allocator<char> __a; // [rsp+1Fh] [rbp-111h] BYREF
  uint32_t i; // [rsp+20h] [rbp-110h]
  int ret; // [rsp+24h] [rbp-10Ch]
  __int64 v15; // [rsp+28h] [rbp-108h] BYREF
  std::string *key_str; // [rsp+30h] [rbp-100h]
  std::string *val_str; // [rsp+38h] [rbp-F8h]
  std::string sep_1; // [rsp+40h] [rbp-F0h] BYREF
  std::string sep_2; // [rsp+60h] [rbp-D0h] BYREF
  char v20[176]; // [rsp+80h] [rbp-B0h] BYREF

  v2 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 32 4 8 key:5604 48 4 8 val:5608 64 24 19 tmp_split_list:5592";
  *(_QWORD *)(v2 + 16) = genHomeBlockMap;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = -218103808;
  v4[536862723] = -202116109;
  std::vector<std::string>::vector((std::vector<std::string> *const)(v2 + 64));
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&sep_2, "|", &__a);
  std::allocator<char>::allocator(&v11);
  std::string::basic_string<std::allocator<char>>(&sep_1, ",", &v11);
  ret = common::tools::StringUtils::split(block_list, &sep_1, &sep_2, 2u, (std::vector<std::string> *)(v2 + 64), 1);
  std::string::~string(&sep_1);
  std::allocator<char>::~allocator(&v11);
  std::string::~string(&sep_2);
  std::allocator<char>::~allocator(&__a);
  if ( ret )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&sep_2,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/handler/request_handler.api.hpp",
      "genHomeBlockMap",
      5596);
    v5 = common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
           (common::milog::MiLogStream *const)&sep_2,
           (const char (*)[26])"[MP_BLOCK] split failed: ");
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v5, block_list);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&sep_2);
    v6 = ret;
  }
  else
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&sep_2,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/handler/request_handler.api.hpp",
      "genHomeBlockMap",
      5599);
    common::milog::MiLogStream::operator<<<std::string>(
      (common::milog::MiLogStream *const)&sep_2,
      (const std::vector<std::string> *)(v2 + 64));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&sep_2);
    for ( i = 0; ; i += 2 )
    {
      v7 = i;
      if ( v7 >= std::vector<std::string>::size((const std::vector<std::string> *const)(v2 + 64)) )
        break;
      key_str = std::vector<std::string>::operator[]((std::vector<std::string> *const)(v2 + 64), i);
      val_str = std::vector<std::string>::operator[]((std::vector<std::string> *const)(v2 + 64), i + 1);
      *(_DWORD *)(v2 + 32) = 0;
      ret = common::tools::StringUtils::strToNum<unsigned int>(key_str, (unsigned int *)(v2 + 32), 1);
      if ( !ret )
      {
        *(_DWORD *)(v2 + 48) = 0;
        ret = common::tools::StringUtils::strToNum<unsigned int>(val_str, (unsigned int *)(v2 + 48), 1);
        if ( !ret )
        {
          if ( *(_DWORD *)(v2 + 48) )
          {
            v8 = *(unsigned int *)(v2 + 48);
            v15 = v8 + common::tools::TimeUtils::getNow();
            std::map<unsigned int,unsigned int>::emplace<unsigned int &,long>(
              home_block_map,
              (unsigned int *)(v2 + 32),
              &v15,
              (unsigned int *)(v2 + 32),
              v9);
          }
        }
      }
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&sep_2,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/handler/request_handler.api.hpp",
      "genHomeBlockMap",
      5615);
    common::milog::MiLogStream::operator<<<unsigned int,unsigned int>(
      (common::milog::MiLogStream *const)&sep_2,
      home_block_map);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&sep_2);
    v6 = 0;
  }
  std::vector<std::string>::~vector((std::vector<std::string> *const)(v2 + 64));
  result = v6;
  if ( v20 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5621: range 000000000CBCD8C0-000000000CBCDE83
int32_t __cdecl RequestHandler::queryHomeBinInfo(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  int32_t v7; // r14d
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  Json::Value *v10; // rax
  Json::Value_0 *v11; // rax
  Json::Value_0 *v12; // rax
  int32_t result; // eax
  int32_t retcode; // [rsp+2Ch] [rbp-1C4h]
  int32_t retcodea; // [rsp+2Ch] [rbp-1C4h]
  std::string key; // [rsp+30h] [rbp-1C0h] BYREF
  Json::Value_0 other; // [rsp+50h] [rbp-1A0h] BYREF
  char v19[368]; // [rsp+80h] [rbp-170h] BYREF

  v4 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(320LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "5 32 1 13 is_exist:5628 48 4 8 uid:5622 64 32 13 bin_data:5641 128 40 15 json_value:5647 208 80 8 row:5629";
  *(_QWORD *)(v4 + 16) = RequestHandler::queryHomeBinInfo;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556927;
  v6[536862723] = -218959118;
  v6[536862725] = -218959360;
  v6[536862726] = 62194;
  v6[536862729] = -202116109;
  *(_DWORD *)(v4 + 48) = 0;
  std::allocator<char>::allocator(v4 + 32);
  std::string::basic_string<std::allocator<char>>(&key, off_1A660020, (const std::allocator<char> *)(v4 + 32));
  retcode = getRequestParam<unsigned int>(request, &key, (unsigned int *)(v4 + 48));
  std::string::~string(&key);
  std::allocator<char>::~allocator(v4 + 32);
  if ( retcode )
  {
    v7 = retcode;
  }
  else
  {
    *(_BYTE *)(v4 + 32) = 0;
    TableHomeData::TableHomeData((TableHomeData *const)(v4 + 208));
    retcodea = MysqlOpHomeData::selectHomeDataByUid(
                 *(_DWORD *)(v4 + 48),
                 (TableHomeData *)(v4 + 208),
                 (bool *)(v4 + 32));
    if ( retcodea )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "queryHomeBinInfo",
        5633);
      v8 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
             (common::milog::MiLogStream *const)&key,
             (const char (*)[40])"[HOME] selectHomeDataByUid failed, uid:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v4 + 48));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      v7 = retcodea;
    }
    else if ( *(_BYTE *)(v4 + 32) != 1 )
    {
      v7 = 2001;
    }
    else
    {
      std::string::basic_string(v4 + 64);
      mysqlpp::String::to_string((const mysqlpp::String *const)(v4 + 216), (std::string *)(v4 + 64));
      if ( common::tools::ZlibUtil::isCompressWithPad((const std::string *)(v4 + 64)) )
      {
        common::tools::ZlibUtil::uncompressWithPad(&key, (const std::string *)(v4 + 64));
        std::string::operator=(v4 + 64, &key);
        std::string::~string(&key);
      }
      Json::Value::Value(v4 + 128, 0LL);
      if ( RequestHandler::parseProtoStrToJson<proto::HomeDataBin>(
             this,
             (const std::string *)(v4 + 64),
             (Json::Value *)(v4 + 128)) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&key,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/handler/request_handler.api.hpp",
          "queryHomeBinInfo",
          5650);
        v9 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
               (common::milog::MiLogStream *const)&key,
               (const char (*)[32])"parseProtoStrToJson fails, uid:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v4 + 48));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
        v7 = 1;
      }
      else
      {
        v10 = (Json::Value *)Json::Value::operator[]((Json::Value_0 *const)jval, "bin_data");
        Json::Value::operator=(v10);
        Json::Value::Value((Json::Value *)&other, *(_DWORD *)(v4 + 232));
        v11 = Json::Value::operator[]((Json::Value_0 *const)jval, "data_version");
        Json::Value::operator=(v11, &other);
        Json::Value::~Value(&other);
        Json::Value::Value(&other, v4 + 240);
        v12 = Json::Value::operator[]((Json::Value_0 *const)jval, "block_end_time");
        Json::Value::operator=(v12, &other);
        Json::Value::~Value(&other);
        v7 = 0;
      }
      Json::Value::~Value((Json::Value_0 *const)(v4 + 128));
      std::string::~string((void *)(v4 + 64));
    }
    TableHomeData::~TableHomeData((TableHomeData *const)(v4 + 208));
  }
  result = v7;
  if ( v19 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF800C) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8014) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8024) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5661: range 000000000CBCDEE4-000000000CBCEDC3
int32_t __cdecl RequestHandler::queryHomeArrangementInfo(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  int32_t v7; // r14d
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  const proto::HomeSceneCompBin *v10; // rax
  google::protobuf::uint32 v11; // r14d
  google::protobuf::uint32 v12; // r14d
  google::protobuf::uint32 v14; // eax
  google::protobuf::uint32 v15; // eax
  google::protobuf::uint32 v16; // eax
  proto::Vector *v17; // r14
  const proto::VectorBin *v18; // rax
  proto::Vector *v19; // r14
  const proto::VectorBin *v20; // rax
  google::protobuf::uint32 v21; // eax
  proto::Vector *v22; // r14
  const proto::VectorBin *v23; // rax
  proto::Vector *v24; // r14
  const proto::VectorBin *v25; // rax
  common::milog::MiLogStream *v26; // rax
  common::milog::MiLogStream *v27; // rax
  common::milog::MiLogStream *v28; // rax
  common::milog::MiLogStream *v29; // rax
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rax
  Json::Value *v33; // rax
  int p_yielda; // [rsp+0h] [rbp-590h]
  Json::Value *jvalb; // [rsp+8h] [rbp-588h]
  int v38; // [rsp+20h] [rbp-570h]
  void *v39; // [rsp+28h] [rbp-568h]
  int32_t retcode; // [rsp+2Ch] [rbp-564h]
  google::protobuf::RepeatedPtrField<proto::HomeModuleBin>::const_iterator __for_begin; // [rsp+30h] [rbp-560h] BYREF
  google::protobuf::RepeatedPtrField<proto::HomeModuleBin>::const_iterator __for_end; // [rsp+38h] [rbp-558h] BYREF
  google::protobuf::RepeatedPtrField<proto::HomeSceneBin>::const_iterator __for_begin_0; // [rsp+40h] [rbp-550h] BYREF
  google::protobuf::RepeatedPtrField<proto::HomeSceneBin>::const_iterator __for_end_0; // [rsp+48h] [rbp-548h] BYREF
  google::protobuf::RepeatedPtrField<proto::HomeBlockBin>::const_iterator __for_begin_1; // [rsp+50h] [rbp-540h] BYREF
  google::protobuf::RepeatedPtrField<proto::HomeBlockBin>::const_iterator __for_end_1; // [rsp+58h] [rbp-538h] BYREF
  google::protobuf::RepeatedPtrField<proto::HomeFurnitureBin>::const_iterator __for_begin_2; // [rsp+60h] [rbp-530h] BYREF
  google::protobuf::RepeatedPtrField<proto::HomeFurnitureBin>::const_iterator __for_end_2; // [rsp+68h] [rbp-528h] BYREF
  const google::protobuf::RepeatedPtrField<proto::HomeModuleBin> *module_bin_list; // [rsp+70h] [rbp-520h]
  const google::protobuf::RepeatedPtrField<proto::HomeModuleBin> *__for_range; // [rsp+78h] [rbp-518h]
  const proto::HomeModuleBin *module_bin; // [rsp+80h] [rbp-510h]
  const google::protobuf::RepeatedPtrField<proto::HomeSceneBin> *__for_range_0; // [rsp+88h] [rbp-508h]
  const proto::HomeSceneBin *scene_bin; // [rsp+90h] [rbp-500h]
  const google::protobuf::RepeatedPtrField<proto::HomeBlockBin> *__for_range_1; // [rsp+98h] [rbp-4F8h]
  const proto::HomeBlockBin *block_bin; // [rsp+A0h] [rbp-4F0h]
  proto::HomeBlockArrangementMuipData *home_block_arrangement_muip_data; // [rsp+A8h] [rbp-4E8h]
  const google::protobuf::RepeatedPtrField<proto::HomeFurnitureBin> *__for_range_2; // [rsp+B0h] [rbp-4E0h]
  const google::protobuf::RepeatedPtrField<proto::HomeFurnitureBin> *__for_range_3; // [rsp+B8h] [rbp-4D8h]
  const proto::HomeFurnitureBin *furniture_bin_0; // [rsp+C0h] [rbp-4D0h]
  proto::HomeFurnitureArrangementMuipData *home_furniture_muip_data_0; // [rsp+C8h] [rbp-4C8h]
  const proto::HomeFurnitureBin *furniture_bin; // [rsp+D0h] [rbp-4C0h]
  proto::HomeFurnitureArrangementMuipData *home_furniture_muip_data; // [rsp+D8h] [rbp-4B8h]
  std::string key; // [rsp+E0h] [rbp-4B0h] BYREF
  char v64[1168]; // [rsp+100h] [rbp-490h] BYREF

  p_yielda = (int)p_yield;
  v4 = (unsigned __int64)v64;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_5(1120LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "14 32 1 12 is_room:5664 48 1 13 is_exist:5670 64 4 8 uid:5662 80 4 14 module_id:5663 96 4 12 opt"
                        "ions:5754 112 8 29 convertVectorBinToClient:5696 144 32 13 bin_data:5683 208 32 16 json_string:5"
                        "757 272 40 15 status_ret:5758 352 40 15 json_value:5764 432 56 37 home_scene_arrangement_muip_da"
                        "ta:5703 528 80 8 row:5671 640 112 18 home_data_bin:5689 784 272 16 json_reader:5765";
  *(_QWORD *)(v4 + 16) = RequestHandler::queryHomeArrangementInfo;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234753535;
  v6[536862722] = -234556924;
  v6[536862723] = 61956;
  v6[536862723] = -234881024;
  v6[536862724] = 62194;
  v6[536862725] = -219021312;
  v6[536862726] = 62194;
  v6[536862727] = -219021312;
  v6[536862728] = 62194;
  v6[536862729] = -234881024;
  v6[536862730] = -218959118;
  v6[536862732] = -218959360;
  v6[536862733] = 62194;
  v6[536862735] = -218959360;
  v6[536862736] = 62194;
  v6[536862739] = -218959118;
  v6[536862743] = -219021312;
  v6[536862744] = 62194;
  v6[536862753] = -202116109;
  v6[536862754] = -202116109;
  *(_DWORD *)(v4 + 64) = 0;
  *(_DWORD *)(v4 + 80) = 0;
  *(_BYTE *)(v4 + 32) = 0;
  std::allocator<char>::allocator(v4 + 48);
  std::string::basic_string<std::allocator<char>>(&key, off_1A660020, (const std::allocator<char> *)(v4 + 48));
  retcode = getRequestParam<unsigned int,char const(&)[10],unsigned int &,char const(&)[8],bool &>(
              request,
              &key,
              (unsigned int *)(v4 + 64),
              (std::remove_reference<char const (&)[10]>::type *)"module_id",
              (unsigned int *)(v4 + 80),
              (std::remove_reference<char const (&)[8]>::type *)"is_room",
              (bool *)(v4 + 32));
  std::string::~string(&key);
  std::allocator<char>::~allocator(v4 + 48);
  if ( retcode )
  {
    v7 = retcode;
  }
  else
  {
    *(_BYTE *)(v4 + 48) = 0;
    TableHomeData::TableHomeData((TableHomeData *const)(v4 + 528));
    HIDWORD(v39) = MysqlOpHomeData::selectHomeDataByUid(
                     *(_DWORD *)(v4 + 64),
                     (TableHomeData *)(v4 + 528),
                     (bool *)(v4 + 48));
    if ( HIDWORD(v39) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "queryHomeArrangementInfo",
        5675);
      v8 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
             (common::milog::MiLogStream *const)&key,
             (const char (*)[40])"[HOME] selectHomeDataByUid failed, uid:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v4 + 64));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      v7 = HIDWORD(v39);
    }
    else if ( *(_BYTE *)(v4 + 48) != 1 )
    {
      v7 = 2001;
    }
    else
    {
      std::string::basic_string(v4 + 144);
      mysqlpp::String::to_string((const mysqlpp::String *const)(v4 + 536), (std::string *)(v4 + 144));
      if ( common::tools::ZlibUtil::isCompressWithPad((const std::string *)(v4 + 144)) )
      {
        common::tools::ZlibUtil::uncompressWithPad(&key, (const std::string *)(v4 + 144));
        std::string::operator=(v4 + 144, &key);
        std::string::~string(&key);
      }
      proto::HomeDataBin::HomeDataBin((proto::HomeDataBin *const)(v4 + 640));
      if ( (unsigned __int8)google::protobuf::MessageLite::ParseFromString(v4 + 640, v4 + 144) != 1 )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&key,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/handler/request_handler.api.hpp",
          "queryHomeArrangementInfo",
          5692);
        v9 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
               (common::milog::MiLogStream *const)&key,
               (const char (*)[42])"home_data_bin ParseFromString fails, uid:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v4 + 64));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
        v7 = -1;
      }
      else
      {
        *(_QWORD *)(v4 + 112) = this;
        proto::HomeSceneArrangementMuipData::HomeSceneArrangementMuipData((proto::HomeSceneArrangementMuipData *const)(v4 + 432));
        proto::HomeSceneArrangementMuipData::set_module_id(
          (proto::HomeSceneArrangementMuipData *const)(v4 + 432),
          *(_DWORD *)(v4 + 80));
        proto::HomeSceneArrangementMuipData::set_is_room(
          (proto::HomeSceneArrangementMuipData *const)(v4 + 432),
          *(_BYTE *)(v4 + 32));
        BYTE3(v39) = 0;
        v10 = proto::HomeDataBin::scene_bin((const proto::HomeDataBin *const)(v4 + 640));
        module_bin_list = proto::HomeSceneCompBin::module_bin_list(v10);
        __for_range = module_bin_list;
        __for_begin.it_ = google::protobuf::RepeatedPtrField<proto::HomeModuleBin>::begin(module_bin_list).it_;
        __for_end.it_ = google::protobuf::RepeatedPtrField<proto::HomeModuleBin>::end(module_bin_list).it_;
        while ( google::protobuf::internal::RepeatedPtrIterator<proto::HomeModuleBin const>::operator!=(
                  &__for_begin,
                  &__for_end) )
        {
          module_bin = google::protobuf::internal::RepeatedPtrIterator<proto::HomeModuleBin const>::operator*(&__for_begin);
          if ( proto::HomeModuleBin::module_id(module_bin) == *(_DWORD *)(v4 + 80) )
          {
            __for_range_0 = proto::HomeModuleBin::scene_bin_list(module_bin);
            __for_begin_0.it_ = google::protobuf::RepeatedPtrField<proto::HomeSceneBin>::begin(__for_range_0).it_;
            __for_end_0.it_ = google::protobuf::RepeatedPtrField<proto::HomeSceneBin>::end(__for_range_0).it_;
            while ( google::protobuf::internal::RepeatedPtrIterator<proto::HomeSceneBin const>::operator!=(
                      &__for_begin_0,
                      &__for_end_0) )
            {
              scene_bin = google::protobuf::internal::RepeatedPtrIterator<proto::HomeSceneBin const>::operator*(&__for_begin_0);
              if ( !*(_BYTE *)(v4 + 32)
                || (v11 = proto::HomeModuleBin::cur_room_scene_id(module_bin),
                    v11 == proto::HomeSceneBin::scene_id(scene_bin)) )
              {
                if ( *(_BYTE *)(v4 + 32) == 1
                  || (v12 = proto::HomeModuleBin::cur_room_scene_id(module_bin),
                      v12 != proto::HomeSceneBin::scene_id(scene_bin)) )
                {
                  v14 = proto::HomeSceneBin::scene_id(scene_bin);
                  proto::HomeSceneArrangementMuipData::set_scene_id(
                    (proto::HomeSceneArrangementMuipData *const)(v4 + 432),
                    v14);
                  __for_range_1 = proto::HomeSceneBin::block_bin_list(scene_bin);
                  __for_begin_1.it_ = google::protobuf::RepeatedPtrField<proto::HomeBlockBin>::begin(__for_range_1).it_;
                  __for_end_1.it_ = google::protobuf::RepeatedPtrField<proto::HomeBlockBin>::end(__for_range_1).it_;
                  while ( google::protobuf::internal::RepeatedPtrIterator<proto::HomeBlockBin const>::operator!=(
                            &__for_begin_1,
                            &__for_end_1) )
                  {
                    block_bin = google::protobuf::internal::RepeatedPtrIterator<proto::HomeBlockBin const>::operator*(&__for_begin_1);
                    home_block_arrangement_muip_data = proto::HomeSceneArrangementMuipData::add_block_data_list((proto::HomeSceneArrangementMuipData *const)(v4 + 432));
                    v15 = proto::HomeBlockBin::block_id(block_bin);
                    proto::HomeBlockArrangementMuipData::set_block_id(home_block_arrangement_muip_data, v15);
                    __for_range_2 = proto::HomeBlockBin::persistent_furniture_list(block_bin);
                    __for_begin_2.it_ = google::protobuf::RepeatedPtrField<proto::HomeFurnitureBin>::begin(__for_range_2).it_;
                    __for_end_2.it_ = google::protobuf::RepeatedPtrField<proto::HomeFurnitureBin>::end(__for_range_2).it_;
                    while ( google::protobuf::internal::RepeatedPtrIterator<proto::HomeFurnitureBin const>::operator!=(
                              &__for_begin_2,
                              &__for_end_2) )
                    {
                      furniture_bin = google::protobuf::internal::RepeatedPtrIterator<proto::HomeFurnitureBin const>::operator*(&__for_begin_2);
                      home_furniture_muip_data = proto::HomeBlockArrangementMuipData::add_furniture_data_list(home_block_arrangement_muip_data);
                      v16 = proto::HomeFurnitureBin::furniture_id(furniture_bin);
                      proto::HomeFurnitureArrangementMuipData::set_furniture_id(home_furniture_muip_data, v16);
                      v17 = proto::HomeFurnitureArrangementMuipData::mutable_spawn_pos(home_furniture_muip_data);
                      v18 = proto::HomeFurnitureBin::spawn_pos(furniture_bin);
                      RequestHandler::queryHomeArrangementInfo(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(proto::VectorBin const&,proto::Vector &)#1}::operator()(
                        (const RequestHandler::queryHomeArrangementInfo::<lambda(const proto::VectorBin&, proto::Vector&)> *const)(v4 + 112),
                        v18,
                        v17);
                      v19 = proto::HomeFurnitureArrangementMuipData::mutable_spawn_rot(home_furniture_muip_data);
                      v20 = proto::HomeFurnitureBin::spawn_rot(furniture_bin);
                      RequestHandler::queryHomeArrangementInfo(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(proto::VectorBin const&,proto::Vector &)#1}::operator()(
                        (const RequestHandler::queryHomeArrangementInfo::<lambda(const proto::VectorBin&, proto::Vector&)> *const)(v4 + 112),
                        v20,
                        v19);
                      google::protobuf::internal::RepeatedPtrIterator<proto::HomeFurnitureBin const>::operator++(&__for_begin_2);
                    }
                    __for_range_3 = proto::HomeBlockBin::deploy_furniure_list(block_bin);
                    __for_begin_2.it_ = google::protobuf::RepeatedPtrField<proto::HomeFurnitureBin>::begin(__for_range_3).it_;
                    __for_end_2.it_ = google::protobuf::RepeatedPtrField<proto::HomeFurnitureBin>::end(__for_range_3).it_;
                    while ( google::protobuf::internal::RepeatedPtrIterator<proto::HomeFurnitureBin const>::operator!=(
                              &__for_begin_2,
                              &__for_end_2) )
                    {
                      furniture_bin_0 = google::protobuf::internal::RepeatedPtrIterator<proto::HomeFurnitureBin const>::operator*(&__for_begin_2);
                      home_furniture_muip_data_0 = proto::HomeBlockArrangementMuipData::add_furniture_data_list(home_block_arrangement_muip_data);
                      v21 = proto::HomeFurnitureBin::furniture_id(furniture_bin_0);
                      proto::HomeFurnitureArrangementMuipData::set_furniture_id(home_furniture_muip_data_0, v21);
                      v22 = proto::HomeFurnitureArrangementMuipData::mutable_spawn_pos(home_furniture_muip_data_0);
                      v23 = proto::HomeFurnitureBin::spawn_pos(furniture_bin_0);
                      RequestHandler::queryHomeArrangementInfo(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(proto::VectorBin const&,proto::Vector &)#1}::operator()(
                        (const RequestHandler::queryHomeArrangementInfo::<lambda(const proto::VectorBin&, proto::Vector&)> *const)(v4 + 112),
                        v23,
                        v22);
                      v24 = proto::HomeFurnitureArrangementMuipData::mutable_spawn_rot(home_furniture_muip_data_0);
                      v25 = proto::HomeFurnitureBin::spawn_rot(furniture_bin_0);
                      RequestHandler::queryHomeArrangementInfo(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(proto::VectorBin const&,proto::Vector &)#1}::operator()(
                        (const RequestHandler::queryHomeArrangementInfo::<lambda(const proto::VectorBin&, proto::Vector&)> *const)(v4 + 112),
                        v25,
                        v24);
                      google::protobuf::internal::RepeatedPtrIterator<proto::HomeFurnitureBin const>::operator++(&__for_begin_2);
                    }
                    google::protobuf::internal::RepeatedPtrIterator<proto::HomeBlockBin const>::operator++(&__for_begin_1);
                  }
                  BYTE3(v39) = 1;
                  goto LABEL_38;
                }
              }
              google::protobuf::internal::RepeatedPtrIterator<proto::HomeSceneBin const>::operator++(&__for_begin_0);
            }
            break;
          }
          google::protobuf::internal::RepeatedPtrIterator<proto::HomeModuleBin const>::operator++(&__for_begin);
        }
LABEL_38:
        if ( BYTE3(v39) != 1 )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&key,
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/handler/request_handler.api.hpp",
            "queryHomeArrangementInfo",
            5750);
          v26 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
                  (common::milog::MiLogStream *const)&key,
                  (const char (*)[38])"not find home arrangement info, uid: ");
          v27 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v26,
                  (const unsigned int *)(v4 + 64));
          v28 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v27, (const char (*)[12])" module_id:");
          v29 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                  v28,
                  (const unsigned int *)(v4 + 80));
          v30 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v29, (const char (*)[10])" is_room:");
          common::milog::MiLogStream::operator<<(v30, *(_BYTE *)(v4 + 32));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
          v7 = 2034;
        }
        else
        {
          google::protobuf::util::JsonPrintOptions::JsonPrintOptions((google::protobuf::util::JsonPrintOptions *const)(v4 + 96));
          *(_BYTE *)(v4 + 96) = 1;
          *(_BYTE *)(v4 + 99) = 1;
          std::string::basic_string(v4 + 208);
          google::protobuf::util::MessageToJsonString(
            (google::protobuf::util::Status *)(v4 + 272),
            (google::protobuf::Message *)(v4 + 432),
            p_yielda,
            jval,
            (int)request,
            (char)this,
            v38,
            v39);
          if ( !google::protobuf::util::Status::ok((const google::protobuf::util::Status *const)(v4 + 272)) )
          {
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)&key,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/handler/request_handler.api.hpp",
              "queryHomeArrangementInfo",
              5761);
            v31 = common::milog::MiLogStream::operator<<<char [58],(char *[58])0>(
                    (common::milog::MiLogStream *const)&key,
                    (const char (*)[58])"HomeSceneArrangementMuipData to json_string failed, uid: ");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v31, (const unsigned int *)(v4 + 64));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
            v7 = -1;
          }
          else
          {
            Json::Value::Value(v4 + 352, 0LL);
            Json::Reader::Reader((Json::Reader *)(v4 + 784));
            if ( !Json::Reader::parse(
                    (Json::Reader *const)(v4 + 784),
                    (const std::string *)(v4 + 208),
                    (Json::Value *)(v4 + 352),
                    1) )
            {
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)&key,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/handler/request_handler.api.hpp",
                "queryHomeArrangementInfo",
                5768);
              v32 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
                      (common::milog::MiLogStream *const)&key,
                      (const char (*)[40])"json_string to json_value failed, uid: ");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v32,
                (const unsigned int *)(v4 + 64));
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
              v7 = -1;
            }
            else
            {
              v33 = (Json::Value *)Json::Value::operator[]((Json::Value_0 *const)jvalb, "arrangement_data");
              Json::Value::operator=(v33);
              v7 = 0;
            }
            Json::Reader::~Reader((Json::Reader *const)(v4 + 784));
            Json::Value::~Value((Json::Value_0 *const)(v4 + 352));
          }
          google::protobuf::util::Status::~Status((google::protobuf::util::Status *const)(v4 + 272));
          std::string::~string((void *)(v4 + 208));
        }
        proto::HomeSceneArrangementMuipData::~HomeSceneArrangementMuipData((proto::HomeSceneArrangementMuipData *const)(v4 + 432));
      }
      proto::HomeDataBin::~HomeDataBin((proto::HomeDataBin *const)(v4 + 640));
      std::string::~string((void *)(v4 + 144));
    }
    TableHomeData::~TableHomeData((TableHomeData *const)(v4 + 528));
  }
  if ( v64 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8028) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF803C) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF804C) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF805C) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8084) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    __asan_stack_free_5(v4, 1120LL, v64);
  }
  return v7;
};

// Line 5696: range 000000000CBCDE84-000000000CBCDEE2
void __cdecl RequestHandler::queryHomeArrangementInfo(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(proto::VectorBin const&,proto::Vector &)#1}::operator()(
        const RequestHandler::queryHomeArrangementInfo::<lambda(const proto::VectorBin&, proto::Vector&)> *const __closure,
        const proto::VectorBin *bin,
        proto::Vector *client)
{
  float v3; // xmm0_4
  float v4; // xmm0_4
  float v5; // xmm0_4

  v3 = proto::VectorBin::x(bin);
  proto::Vector::set_x(client, v3);
  v4 = proto::VectorBin::y(bin);
  proto::Vector::set_y(client, v4);
  v5 = proto::VectorBin::z(bin);
  proto::Vector::set_z(client, v5);
};

// Line 5777: range 000000000CBCEDC4-000000000CBCF9D0
int32_t __cdecl RequestHandler::batchBlockHome(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  int32_t v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  uint32_t v11; // ecx
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  _BOOL4 v15; // r15d
  std::__shared_ptr_access<proto::ServerBlockHomeNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v16; // rax
  std::__shared_ptr_access<proto::ServerBlockHomeNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rcx
  common::minet::Packet *v18; // rcx
  common::minet::Packet *v19; // rcx
  common::minet::Packet *v20; // rax
  common::minet::Packet *v21; // r15
  common::minet::ConstMessagePtr v22; // rdx
  std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v23; // rax
  std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v24; // r15
  unsigned __int64 v25; // rax
  int v26; // r15d
  common::milog::MiLogStream *v27; // rax
  int32_t result; // eax
  __int64 (__fastcall *v29)(std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::shared_ptr<proto::ServerBlockHomeNotify> *); // [rsp+8h] [rbp-1E8h]
  std::allocator<char> __a; // [rsp+33h] [rbp-1BDh] BYREF
  int32_t retcode; // [rsp+34h] [rbp-1BCh]
  int ret; // [rsp+38h] [rbp-1B8h]
  uint32_t now; // [rsp+3Ch] [rbp-1B4h]
  std::map<unsigned int,unsigned int>::iterator __for_begin; // [rsp+40h] [rbp-1B0h] BYREF
  std::map<unsigned int,unsigned int>::iterator __for_end; // [rsp+48h] [rbp-1A8h] BYREF
  std::map<unsigned int,unsigned int> *__for_range; // [rsp+50h] [rbp-1A0h]
  std::map<unsigned int,unsigned int> *__for_range_0; // [rsp+58h] [rbp-198h]
  const std::pair<unsigned int const,unsigned int> *v38; // [rsp+60h] [rbp-190h]
  std::tuple_element<0,const std::pair<unsigned int const,unsigned int> >::type *uid_0; // [rsp+68h] [rbp-188h]
  std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *end_time_0; // [rsp+70h] [rbp-180h]
  const std::pair<unsigned int const,unsigned int> *v41; // [rsp+78h] [rbp-178h]
  std::tuple_element<0,const std::pair<unsigned int const,unsigned int> >::type *uid; // [rsp+80h] [rbp-170h]
  std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *end_time; // [rsp+88h] [rbp-168h]
  std::shared_ptr<proto::ServerBlockHomeNotify> __r; // [rsp+90h] [rbp-160h] BYREF
  std::string key; // [rsp+A0h] [rbp-150h] BYREF
  char v46[304]; // [rsp+C0h] [rbp-130h] BYREF

  v5 = (unsigned __int64)v46;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_2(256LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "4 48 16 15 packet_ptr:5816 80 16 21 block_notify_ptr:5823 112 32 15 block_list:5778 176 48 19 ho"
                        "me_block_map:5793";
  *(_QWORD *)(v5 + 16) = RequestHandler::batchBlockHome;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = 61937;
  v7[536862722] = 62194;
  v7[536862723] = 62194;
  v7[536862724] = -219021312;
  v7[536862725] = 62194;
  v7[536862727] = -202116109;
  std::string::basic_string(v5 + 112);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&key, "block_list", &__a);
  retcode = getRequestParam<std::string>(request, &key, (std::string *)(v5 + 112));
  std::string::~string(&key);
  std::allocator<char>::~allocator(&__a);
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)&key,
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/handler/request_handler.api.hpp",
    "batchBlockHome",
    5780);
  v8 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
         (common::milog::MiLogStream *const)&key,
         (const char (*)[33])"[HOME_BLOCK] batchBlockPlayerMp ");
  common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, (const std::string *)(v5 + 112));
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
  if ( retcode )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&key,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/handler/request_handler.api.hpp",
      "batchBlockHome",
      5783);
    common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
      (common::milog::MiLogStream *const)&key,
      (const char (*)[36])"[HOME_BLOCK] getRequestParam failed");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
    v4 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v5 + 112) )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&key,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/handler/request_handler.api.hpp",
      "batchBlockHome",
      5788);
    common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
      (common::milog::MiLogStream *const)&key,
      (const char (*)[30])"[HOME_BLOCK] block_list.empty");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
    v4 = 1;
  }
  else
  {
    std::map<unsigned int,unsigned int>::map((std::map<unsigned int,unsigned int> *const)(v5 + 176));
    ret = genHomeBlockMap((const std::string *)(v5 + 112), (std::map<unsigned int,unsigned int> *)(v5 + 176));
    if ( ret )
    {
      v4 = ret;
    }
    else
    {
      now = common::tools::TimeUtils::getNow();
      __for_range = (std::map<unsigned int,unsigned int> *)(v5 + 176);
      __for_begin._M_node = std::map<unsigned int,unsigned int>::begin((std::map<unsigned int,unsigned int> *const)(v5 + 176))._M_node;
      __for_end._M_node = std::map<unsigned int,unsigned int>::end(__for_range)._M_node;
      while ( std::operator!=(&__for_begin, &__for_end) )
      {
        v41 = std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator*(&__for_begin);
        uid = std::get<0ul,unsigned int const,unsigned int>(v41);
        end_time = (std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *)std::get<1ul,unsigned int const,unsigned int>(v41);
        if ( *(_BYTE *)(((unsigned __int64)uid >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)uid & 7) + 3) >= *(_BYTE *)(((unsigned __int64)uid >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(uid);
        }
        if ( !MysqlOpHomeData::isHomeUidExist(*uid) )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&key,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/handler/request_handler.api.hpp",
            "batchBlockHome",
            5803);
          v9 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(
                 (common::milog::MiLogStream *const)&key,
                 (const char (*)[10])"home_uid:");
          v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, uid);
          common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v10, (const char (*)[12])" not exist!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
          v4 = 2024;
          goto LABEL_44;
        }
        if ( *(_BYTE *)(((unsigned __int64)end_time >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)end_time & 7) + 3) >= *(_BYTE *)(((unsigned __int64)end_time >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(end_time);
        }
        v11 = *end_time;
        if ( *(_BYTE *)(((unsigned __int64)uid >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)uid & 7) + 3) >= *(_BYTE *)(((unsigned __int64)uid >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(uid);
        }
        if ( MysqlOpMisc::insertOrUpdatePlayerFeatureBlockConfig(*uid, 4u, now, v11) )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&key,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/handler/request_handler.api.hpp",
            "batchBlockHome",
            5808);
          v12 = common::milog::MiLogStream::operator<<<char [53],(char *[53])0>(
                  (common::milog::MiLogStream *const)&key,
                  (const char (*)[53])"insertOrUpdatePlayerFeatureBlockConfig failed, uid: ");
          v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, uid);
          v14 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v13, (const char (*)[13])", end_time: ");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, end_time);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
          v4 = -1;
          goto LABEL_44;
        }
        std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator++(&__for_begin);
      }
      __for_range_0 = (std::map<unsigned int,unsigned int> *)(v5 + 176);
      __for_begin._M_node = std::map<unsigned int,unsigned int>::begin((std::map<unsigned int,unsigned int> *const)(v5 + 176))._M_node;
      __for_end._M_node = std::map<unsigned int,unsigned int>::end(__for_range_0)._M_node;
      while ( std::operator!=(&__for_begin, &__for_end) )
      {
        v38 = std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator*(&__for_begin);
        uid_0 = std::get<0ul,unsigned int const,unsigned int>(v38);
        end_time_0 = (std::tuple_element<1,const std::pair<unsigned int const,unsigned int> >::type *)std::get<1ul,unsigned int const,unsigned int>(v38);
        common::minet::PacketUtils::createPacket();
        if ( std::operator==<common::minet::Packet>(0LL, (const std::shared_ptr<common::minet::Packet> *)(v5 + 48)) )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&key,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/handler/request_handler.api.hpp",
            "batchBlockHome",
            5819);
          common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
            (common::milog::MiLogStream *const)&key,
            (const char (*)[19])"createPacket fails");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
          v4 = -1;
          v15 = 0;
        }
        else
        {
          common::tools::perf::make_shared<proto::ServerBlockHomeNotify>();
          v16 = std::__shared_ptr_access<proto::ServerBlockHomeNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::ServerBlockHomeNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 80));
          proto::ServerBlockHomeNotify::set_is_unlock(v16, 0);
          v17 = std::__shared_ptr_access<proto::ServerBlockHomeNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::ServerBlockHomeNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 80));
          if ( *(_BYTE *)(((unsigned __int64)end_time_0 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)end_time_0 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)end_time_0 >> 3)
                                                                         + 0x7FFF8000) )
          {
            __asan_report_load4(end_time_0);
          }
          proto::ServerBlockHomeNotify::set_end_time(v17, *end_time_0);
          v18 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 48));
          if ( *(_BYTE *)(((unsigned __int64)uid_0 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)uid_0 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)uid_0 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(uid_0);
          }
          common::minet::Packet::setUserId(v18, *uid_0);
          v19 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 48));
          if ( *(_BYTE *)(((unsigned __int64)uid_0 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)uid_0 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)uid_0 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(uid_0);
          }
          common::minet::Packet::setHomeUserId(v19, *uid_0);
          v20 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 48));
          common::minet::Packet::setTargetService(v20, 3u);
          v21 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 48));
          std::dynamic_pointer_cast<google::protobuf::Message const,proto::ServerBlockHomeNotify>(&__r);
          v22._M_ptr = (std::__shared_ptr<const google::protobuf::Message,(__gnu_cxx::_Lock_policy)2>::element_type *)&__r;
          common::minet::Packet::setMessagePtr(v21, 0x2EE3u, v22);
          std::shared_ptr<google::protobuf::Message const>::~shared_ptr((std::shared_ptr<const google::protobuf::Message> *const)&__r);
          v23 = std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false> *const)&ResourceBox::network_mgr_ptr);
          v24 = v23;
          if ( *(_BYTE *)(((unsigned __int64)v23 >> 3) + 0x7FFF8000) )
            __asan_report_load8(v23);
          v25 = (unsigned __int64)(v24->_vptr_NetworkMgrBase + 8);
          if ( *(_BYTE *)((v25 >> 3) + 0x7FFF8000) )
            v25 = __asan_report_load8(v24->_vptr_NetworkMgrBase + 8);
          v29 = *(__int64 (__fastcall **)(std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::shared_ptr<proto::ServerBlockHomeNotify> *))v25;
          std::shared_ptr<common::minet::Packet>::shared_ptr(
            (std::shared_ptr<common::minet::Packet> *const)&__r,
            (const std::shared_ptr<common::minet::Packet> *)(v5 + 48));
          ret = v29(v24, &__r);
          std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)&__r);
          if ( ret )
          {
            v4 = ret;
            v26 = 0;
          }
          else
          {
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)&key,
              &common::milog::MiLogDefault::default_log_obj_,
              1u,
              "./src/handler/request_handler.api.hpp",
              "batchBlockHome",
              5835);
            v27 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                    (common::milog::MiLogStream *const)&key,
                    (const char (*)[27])"[HOME_BLOCK] send to uid: ");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v27, uid_0);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
            v26 = 1;
          }
          std::shared_ptr<proto::ServerBlockHomeNotify>::~shared_ptr((std::shared_ptr<proto::ServerBlockHomeNotify> *const)(v5 + 80));
          v15 = v26 == 1;
        }
        std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v5 + 48));
        if ( !v15 )
          goto LABEL_44;
        std::_Rb_tree_iterator<std::pair<unsigned int const,unsigned int>>::operator++(&__for_begin);
      }
      v4 = 0;
    }
LABEL_44:
    std::map<unsigned int,unsigned int>::~map((std::map<unsigned int,unsigned int> *const)(v5 + 176));
  }
  std::string::~string((void *)(v5 + 112));
  result = v4;
  if ( v46 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5842: range 000000000CBCF9D2-000000000CBD045C
int32_t __cdecl RequestHandler::batchUnblockHome(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  int32_t v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // rax
  unsigned int *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  std::_Rb_tree_const_iterator<unsigned int>::reference v12; // rax
  _DWORD *v13; // rdx
  _BOOL4 v14; // r15d
  std::__shared_ptr_access<proto::ServerBlockHomeNotify,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v15; // rax
  common::minet::Packet *v16; // rax
  common::minet::Packet *v17; // rax
  common::minet::Packet *v18; // rax
  common::minet::Packet *v19; // r15
  common::minet::ConstMessagePtr v20; // rdx
  std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v21; // rax
  std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v22; // r15
  unsigned __int64 v23; // rax
  int v24; // r15d
  common::milog::MiLogStream *v25; // rax
  int32_t result; // eax
  __int64 (__fastcall *v27)(std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::shared_ptr<proto::ServerBlockHomeNotify> *); // [rsp+8h] [rbp-208h]
  std::allocator<char> __a; // [rsp+3Fh] [rbp-1D1h] BYREF
  int32_t retcode; // [rsp+40h] [rbp-1D0h]
  std::vector<unsigned int>::iterator __for_begin; // [rsp+48h] [rbp-1C8h] BYREF
  std::vector<unsigned int>::iterator __for_end; // [rsp+50h] [rbp-1C0h] BYREF
  std::vector<unsigned int> *__for_range; // [rsp+58h] [rbp-1B8h]
  std::set<unsigned int> *__for_range_0; // [rsp+60h] [rbp-1B0h]
  unsigned int *uid; // [rsp+68h] [rbp-1A8h]
  std::shared_ptr<proto::ServerBlockHomeNotify> __r; // [rsp+70h] [rbp-1A0h] BYREF
  std::string key; // [rsp+80h] [rbp-190h] BYREF
  char v38[368]; // [rsp+A0h] [rbp-170h] BYREF

  v5 = (unsigned __int64)v38;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_3(320LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "6 32 4 8 uid:5883 48 16 15 packet_ptr:5885 80 16 21 block_notify_ptr:5892 112 24 12 uid_vec:5854"
                        " 176 32 21 unblock_uid_list:5843 240 48 12 uid_set:5862";
  *(_QWORD *)(v5 + 16) = RequestHandler::batchUnblockHome;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = 61956;
  v7[536862722] = 62194;
  v7[536862723] = 62194;
  v7[536862724] = -218959360;
  v7[536862725] = 62194;
  v7[536862726] = -219021312;
  v7[536862727] = 62194;
  v7[536862729] = -202116109;
  std::string::basic_string(v5 + 176);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&key, "unblock_uid_list", &__a);
  retcode = getRequestParam<std::string>(request, &key, (std::string *)(v5 + 176));
  std::string::~string(&key);
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v4 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v5 + 176) )
  {
    v4 = 1;
  }
  else
  {
    std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v5 + 112));
    std::allocator<char>::allocator(&__a);
    std::string::basic_string<std::allocator<char>>(&key, ",", &__a);
    retcode = common::tools::StringUtils::splitToList<unsigned int>(
                (const std::string *)(v5 + 176),
                &key,
                (std::vector<unsigned int> *)(v5 + 112),
                1);
    std::string::~string(&key);
    std::allocator<char>::~allocator(&__a);
    if ( retcode )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "batchUnblockHome",
        5858);
      v8 = common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
             (common::milog::MiLogStream *const)&key,
             (const char (*)[36])"splitToList fail, unblock_uid_list:");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, (const std::string *)(v5 + 176));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      v4 = 1002;
    }
    else
    {
      std::set<unsigned int>::set((std::set<unsigned int> *const)(v5 + 240));
      __for_range = (std::vector<unsigned int> *)(v5 + 112);
      __for_begin._M_current = std::vector<unsigned int>::begin((std::vector<unsigned int> *const)(v5 + 112))._M_current;
      __for_end._M_current = std::vector<unsigned int>::end(__for_range)._M_current;
      while ( __gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(&__for_begin, &__for_end) )
      {
        v9 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*(&__for_begin);
        uid = v9;
        if ( *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v9 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v9 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v9);
        }
        if ( !MysqlOpHomeData::isHomeUidExist(*uid) )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&key,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/handler/request_handler.api.hpp",
            "batchUnblockHome",
            5867);
          v10 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(
                  (common::milog::MiLogStream *const)&key,
                  (const char (*)[10])"home_uid:");
          v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, uid);
          common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v11, (const char (*)[12])" not exist!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
          v4 = 2024;
          goto LABEL_38;
        }
        std::set<unsigned int>::insert((std::set<unsigned int> *const)(v5 + 240), uid);
        __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++(&__for_begin);
      }
      if ( std::set<unsigned int>::empty((const std::set<unsigned int> *const)(v5 + 240)) )
      {
        v4 = 0;
      }
      else if ( MysqlOpMisc::deletePlayerFeatureBlockConfig((const std::set<unsigned int> *)(v5 + 240), 4u) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&key,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/handler/request_handler.api.hpp",
          "batchUnblockHome",
          5878);
        common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
          (common::milog::MiLogStream *const)&key,
          (const char (*)[38])"deletePlayerFeatureBlockConfig failed");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
        v4 = -1;
      }
      else
      {
        __for_range_0 = (std::set<unsigned int> *)(v5 + 240);
        __for_begin._M_current = (unsigned int *)std::set<unsigned int>::begin((const std::set<unsigned int> *const)(v5 + 240))._M_node;
        __for_end._M_current = (unsigned int *)std::set<unsigned int>::end(__for_range_0)._M_node;
        while ( std::operator!=(
                  (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)&__for_begin,
                  (const std::_Rb_tree_const_iterator<unsigned int>::_Self *)&__for_end) )
        {
          v12 = std::_Rb_tree_const_iterator<unsigned int>::operator*((const std::_Rb_tree_const_iterator<unsigned int> *const)&__for_begin);
          v13 = v12;
          if ( *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) != 0
            && (char)(((unsigned __int8)v12 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v12 >> 3) + 0x7FFF8000) )
          {
            __asan_report_load4(v12);
          }
          *(_DWORD *)(v5 + 32) = *v13;
          common::minet::PacketUtils::createPacket();
          if ( std::operator==<common::minet::Packet>(0LL, (const std::shared_ptr<common::minet::Packet> *)(v5 + 48)) )
          {
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)&key,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/handler/request_handler.api.hpp",
              "batchUnblockHome",
              5888);
            common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
              (common::milog::MiLogStream *const)&key,
              (const char (*)[19])"createPacket fails");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
            v4 = -1;
            v14 = 0;
          }
          else
          {
            common::tools::perf::make_shared<proto::ServerBlockHomeNotify>();
            v15 = std::__shared_ptr_access<proto::ServerBlockHomeNotify,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<proto::ServerBlockHomeNotify,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 80));
            proto::ServerBlockHomeNotify::set_is_unlock(v15, 1);
            v16 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 48));
            common::minet::Packet::setUserId(v16, *(_DWORD *)(v5 + 32));
            v17 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 48));
            common::minet::Packet::setHomeUserId(v17, *(_DWORD *)(v5 + 32));
            v18 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 48));
            common::minet::Packet::setTargetService(v18, 3u);
            v19 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v5 + 48));
            std::dynamic_pointer_cast<google::protobuf::Message const,proto::ServerBlockHomeNotify>(&__r);
            v20._M_ptr = (std::__shared_ptr<const google::protobuf::Message,(__gnu_cxx::_Lock_policy)2>::element_type *)&__r;
            common::minet::Packet::setMessagePtr(v19, 0x2EE3u, v20);
            std::shared_ptr<google::protobuf::Message const>::~shared_ptr((std::shared_ptr<const google::protobuf::Message> *const)&__r);
            v21 = std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false> *const)&ResourceBox::network_mgr_ptr);
            v22 = v21;
            if ( *(_BYTE *)(((unsigned __int64)v21 >> 3) + 0x7FFF8000) )
              __asan_report_load8(v21);
            v23 = (unsigned __int64)(v22->_vptr_NetworkMgrBase + 8);
            if ( *(_BYTE *)((v23 >> 3) + 0x7FFF8000) )
              v23 = __asan_report_load8(v22->_vptr_NetworkMgrBase + 8);
            v27 = *(__int64 (__fastcall **)(std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::shared_ptr<proto::ServerBlockHomeNotify> *))v23;
            std::shared_ptr<common::minet::Packet>::shared_ptr(
              (std::shared_ptr<common::minet::Packet> *const)&__r,
              (const std::shared_ptr<common::minet::Packet> *)(v5 + 48));
            retcode = v27(v22, &__r);
            std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)&__r);
            if ( retcode )
            {
              v4 = retcode;
              v24 = 0;
            }
            else
            {
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)&key,
                &common::milog::MiLogDefault::default_log_obj_,
                1u,
                "./src/handler/request_handler.api.hpp",
                "batchUnblockHome",
                5903);
              v25 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                      (common::milog::MiLogStream *const)&key,
                      (const char (*)[27])"[HOME_BLOCK] send to uid: ");
              common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                v25,
                (const unsigned int *)(v5 + 32));
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
              v24 = 1;
            }
            std::shared_ptr<proto::ServerBlockHomeNotify>::~shared_ptr((std::shared_ptr<proto::ServerBlockHomeNotify> *const)(v5 + 80));
            v14 = v24 == 1;
          }
          std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v5 + 48));
          if ( !v14 )
            goto LABEL_38;
          std::_Rb_tree_const_iterator<unsigned int>::operator++((std::_Rb_tree_const_iterator<unsigned int> *const)&__for_begin);
        }
        v4 = 0;
      }
LABEL_38:
      std::set<unsigned int>::~set((std::set<unsigned int> *const)(v5 + 240));
    }
    std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v5 + 112));
  }
  std::string::~string((void *)(v5 + 176));
  result = v4;
  if ( v38 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8024) = 0;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5909: range 000000000CBD07AA-000000000CBD0982
int32_t __cdecl RequestHandler::homeTest(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:5910";
  *(_QWORD *)(v4 + 16) = RequestHandler::homeTest;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendHomeOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::homeTest(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::homeTest::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5910: range 000000000CBD045E-000000000CBD07A9
int32_t __cdecl RequestHandler::homeTest(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::homeTest::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-105h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-104h]
  proto::HomeOfflineMsgBin *msg; // [rsp+30h] [rbp-100h]
  proto::HomeTestOp *test_op; // [rsp+38h] [rbp-F8h]
  char v13[240]; // [rsp+40h] [rbp-F0h] BYREF

  v3 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 4 13 home_uid:5912 48 4 8 val:5913 64 32 11 ticket:5914 128 32 8 req:5929";
  *(_QWORD *)(v3 + 16) = RequestHandler::homeTest(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862723] = -218959118;
  v5[536862725] = -202116109;
  *(_DWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  std::string::basic_string(v3 + 64);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 128), "home_uid", &__a);
  retcode = getRequestParam<unsigned int,char const(&)[4],unsigned int &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 128),
              (unsigned int *)(v3 + 32),
              (std::remove_reference<char const (&)[4]>::type *)off_1A66CBA0,
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 64));
  std::string::~string((void *)(v3 + 128));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 64) )
  {
    v6 = 2012;
  }
  else if ( *(_DWORD *)(v3 + 32) )
  {
    proto::SendHomeOfflineMsgReq::SendHomeOfflineMsgReq((proto::SendHomeOfflineMsgReq *const)(v3 + 128));
    msg = proto::SendHomeOfflineMsgReq::mutable_msg((proto::SendHomeOfflineMsgReq *const)(v3 + 128));
    proto::HomeOfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 64));
    test_op = proto::HomeOfflineMsgBin::mutable_test_op(msg);
    proto::HomeTestOp::set_val(test_op, *(_DWORD *)(v3 + 48));
    common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 32));
    common::minet::Packet::setHomeUserId(packet, *(_DWORD *)(v3 + 32));
    common::minet::Packet::setTargetService(packet, 9u);
    common::minet::Packet::setProto<proto::SendHomeOfflineMsgReq>(
      packet,
      (const proto::SendHomeOfflineMsgReq *)(v3 + 128));
    v6 = 0;
    proto::SendHomeOfflineMsgReq::~SendHomeOfflineMsgReq((proto::SendHomeOfflineMsgReq *const)(v3 + 128));
  }
  else
  {
    v6 = 2024;
  }
  std::string::~string((void *)(v3 + 64));
  result = v6;
  if ( v13 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5945: range 000000000CBD1086-000000000CBD125E
int32_t __cdecl RequestHandler::homeRestoreDefaultsArrangement(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:5946";
  *(_QWORD *)(v4 + 16) = RequestHandler::homeRestoreDefaultsArrangement;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendHomeOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::homeRestoreDefaultsArrangement(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::homeRestoreDefaultsArrangement::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5946: range 000000000CBD0984-000000000CBD1084
int32_t __cdecl RequestHandler::homeRestoreDefaultsArrangement(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::homeRestoreDefaultsArrangement::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  int32_t v13; // r14d
  common::milog::MiLogStream *v14; // rax
  __gnu_cxx::__normal_iterator<unsigned int*,std::vector<unsigned int> >::reference v15; // rax
  unsigned int *v16; // rdx
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Fh] [rbp-1A1h] BYREF
  int32_t retcode; // [rsp+30h] [rbp-1A0h]
  unsigned int module_id; // [rsp+34h] [rbp-19Ch]
  std::vector<unsigned int>::iterator __for_begin; // [rsp+38h] [rbp-198h] BYREF
  std::vector<unsigned int>::iterator __for_end; // [rsp+40h] [rbp-190h] BYREF
  proto::HomeOfflineMsgBin *msg; // [rsp+48h] [rbp-188h]
  proto::HomeRestoreDefaultsArrangementOp *restore_defaults_arrangement_op; // [rsp+50h] [rbp-180h]
  std::vector<unsigned int> *__for_range; // [rsp+58h] [rbp-178h]
  char v27[368]; // [rsp+60h] [rbp-170h] BYREF

  v3 = (unsigned __int64)v27;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(320LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 32 4 13 home_uid:5948 48 4 12 version:5950 64 24 18 module_id_vec:5966 128 32 19 module_id_lis"
                        "t:5949 192 32 11 ticket:5951 256 32 8 req:5974";
  *(_QWORD *)(v3 + 16) = RequestHandler::homeRestoreDefaultsArrangement(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -234881024;
  v5[536862723] = -218959118;
  v5[536862725] = -218959118;
  v5[536862727] = -218959118;
  v5[536862729] = -202116109;
  *(_DWORD *)(v3 + 32) = 0;
  std::string::basic_string(v3 + 128);
  *(_DWORD *)(v3 + 48) = 0;
  std::string::basic_string(v3 + 192);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 256), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[15],std::string &,char const(&)[8],unsigned int &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 256),
              (unsigned int *)(v3 + 32),
              (std::remove_reference<char const (&)[15]>::type *)"module_id_list",
              (std::string *)(v3 + 128),
              (std::remove_reference<char const (&)[8]>::type *)"version",
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 192));
  std::string::~string((void *)(v3 + 256));
  std::allocator<char>::~allocator(&__a);
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v3 + 256),
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/handler/request_handler.api.hpp",
    "operator()",
    5953);
  v6 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(
         (common::milog::MiLogStream *const)(v3 + 256),
         (const char (*)[10])"home_uid:");
  v7 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, (const unsigned int *)(v3 + 32));
  v8 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v7, (const char (*)[17])" module_id_list:");
  v9 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, (const std::string *)(v3 + 128));
  v10 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v9, (const char (*)[10])" version:");
  v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v3 + 48));
  v12 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v11, (const char (*)[9])" ticket:");
  common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v12, (const std::string *)(v3 + 192));
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 256));
  if ( retcode )
  {
    v13 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 192) )
  {
    v13 = 2012;
  }
  else if ( *(_DWORD *)(v3 + 32) )
  {
    std::vector<unsigned int>::vector((std::vector<unsigned int> *const)(v3 + 64));
    std::allocator<char>::allocator(&__a);
    std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 256), ",", &__a);
    retcode = common::tools::StringUtils::splitToList<unsigned int>(
                (const std::string *)(v3 + 128),
                (const std::string *)(v3 + 256),
                (std::vector<unsigned int> *)(v3 + 64),
                1);
    std::string::~string((void *)(v3 + 256));
    std::allocator<char>::~allocator(&__a);
    if ( retcode )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 256),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "operator()",
        5970);
      v14 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
              (common::milog::MiLogStream *const)(v3 + 256),
              (const char (*)[34])"splitToList fail, module_id_list:");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v14, (const std::string *)(v3 + 128));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 256));
      v13 = 1002;
    }
    else
    {
      proto::SendHomeOfflineMsgReq::SendHomeOfflineMsgReq((proto::SendHomeOfflineMsgReq *const)(v3 + 256));
      msg = proto::SendHomeOfflineMsgReq::mutable_msg((proto::SendHomeOfflineMsgReq *const)(v3 + 256));
      proto::HomeOfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 192));
      restore_defaults_arrangement_op = proto::HomeOfflineMsgBin::mutable_restore_defaults_arrangement_op(msg);
      proto::HomeRestoreDefaultsArrangementOp::set_is_all_module(restore_defaults_arrangement_op, 0);
      __for_range = (std::vector<unsigned int> *)(v3 + 64);
      __for_begin._M_current = std::vector<unsigned int>::begin((std::vector<unsigned int> *const)(v3 + 64))._M_current;
      __for_end._M_current = std::vector<unsigned int>::end(__for_range)._M_current;
      while ( __gnu_cxx::operator!=<unsigned int *,std::vector<unsigned int>>(&__for_begin, &__for_end) )
      {
        v15 = __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator*(&__for_begin);
        v16 = v15;
        if ( *(_BYTE *)(((unsigned __int64)v15 >> 3) + 0x7FFF8000) != 0
          && (char)(((unsigned __int8)v15 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v15 >> 3) + 0x7FFF8000) )
        {
          __asan_report_load4(v15);
        }
        module_id = *v16;
        if ( !module_id )
        {
          proto::HomeRestoreDefaultsArrangementOp::set_is_all_module(restore_defaults_arrangement_op, 1);
          break;
        }
        proto::HomeRestoreDefaultsArrangementOp::add_module_id_list(restore_defaults_arrangement_op, module_id);
        __gnu_cxx::__normal_iterator<unsigned int *,std::vector<unsigned int>>::operator++(&__for_begin);
      }
      proto::HomeRestoreDefaultsArrangementOp::set_version(restore_defaults_arrangement_op, *(_DWORD *)(v3 + 48));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 32));
      common::minet::Packet::setHomeUserId(packet, *(_DWORD *)(v3 + 32));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendHomeOfflineMsgReq>(
        packet,
        (const proto::SendHomeOfflineMsgReq *)(v3 + 256));
      v13 = 0;
      proto::SendHomeOfflineMsgReq::~SendHomeOfflineMsgReq((proto::SendHomeOfflineMsgReq *const)(v3 + 256));
    }
    std::vector<unsigned int>::~vector((std::vector<unsigned int> *const)(v3 + 64));
  }
  else
  {
    v13 = 2024;
  }
  std::string::~string((void *)(v3 + 192));
  std::string::~string((void *)(v3 + 128));
  result = v13;
  if ( v27 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF801C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8024) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6000: range 000000000CBD17AC-000000000CBD1984
int32_t __cdecl RequestHandler::homeRestoreDefaultsSceneArrangement(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:6001";
  *(_QWORD *)(v4 + 16) = RequestHandler::homeRestoreDefaultsSceneArrangement;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendHomeOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::homeRestoreDefaultsSceneArrangement(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::homeRestoreDefaultsSceneArrangement::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6001: range 000000000CBD1260-000000000CBD17AA
int32_t __cdecl RequestHandler::homeRestoreDefaultsSceneArrangement(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::homeRestoreDefaultsSceneArrangement::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  int32_t v15; // r14d
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-125h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-124h]
  proto::HomeOfflineMsgBin *msg; // [rsp+30h] [rbp-120h]
  proto::HomeRestoreDefaultsSceneArrangementOp *restore_defaults_scene_arrangement_op; // [rsp+38h] [rbp-118h]
  char v22[272]; // [rsp+40h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 32 4 13 home_uid:6003 48 4 14 module_id:6004 64 4 13 scene_id:6005 80 4 12 version:6006 96 32 "
                        "11 ticket:6007 160 32 8 req:6027";
  *(_QWORD *)(v3 + 16) = RequestHandler::homeRestoreDefaultsSceneArrangement(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -234556924;
  v5[536862724] = -218959118;
  v5[536862726] = -202116109;
  *(_DWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 64) = 0;
  *(_DWORD *)(v3 + 80) = 0;
  std::string::basic_string(v3 + 96);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 160), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[10],unsigned int &,char const(&)[9],unsigned int &,char const(&)[8],unsigned int &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 160),
              (unsigned int *)(v3 + 32),
              (std::remove_reference<char const (&)[10]>::type *)"module_id",
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[9]>::type *)"scene_id",
              (unsigned int *)(v3 + 64),
              (std::remove_reference<char const (&)[8]>::type *)"version",
              (unsigned int *)(v3 + 80),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 96));
  std::string::~string((void *)(v3 + 160));
  std::allocator<char>::~allocator(&__a);
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v3 + 160),
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/handler/request_handler.api.hpp",
    "operator()",
    6009);
  v6 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(
         (common::milog::MiLogStream *const)(v3 + 160),
         (const char (*)[10])"home_uid:");
  v7 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, (const unsigned int *)(v3 + 32));
  v8 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v7, (const char (*)[12])" module_id:");
  v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v3 + 48));
  v10 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v9, (const char (*)[11])" scene_id:");
  v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v3 + 64));
  v12 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v11, (const char (*)[10])" version:");
  v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v3 + 80));
  v14 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v13, (const char (*)[9])" ticket:");
  common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v14, (const std::string *)(v3 + 96));
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 160));
  if ( retcode )
  {
    v15 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 96) )
  {
    v15 = 2012;
  }
  else if ( *(_DWORD *)(v3 + 32) )
  {
    if ( *(_DWORD *)(v3 + 48) && *(_DWORD *)(v3 + 64) )
    {
      proto::SendHomeOfflineMsgReq::SendHomeOfflineMsgReq((proto::SendHomeOfflineMsgReq *const)(v3 + 160));
      msg = proto::SendHomeOfflineMsgReq::mutable_msg((proto::SendHomeOfflineMsgReq *const)(v3 + 160));
      proto::HomeOfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 96));
      restore_defaults_scene_arrangement_op = proto::HomeOfflineMsgBin::mutable_restore_defaults_scene_arrangement_op(msg);
      proto::HomeRestoreDefaultsSceneArrangementOp::set_module_id(
        restore_defaults_scene_arrangement_op,
        *(_DWORD *)(v3 + 48));
      proto::HomeRestoreDefaultsSceneArrangementOp::set_scene_id(
        restore_defaults_scene_arrangement_op,
        *(_DWORD *)(v3 + 64));
      proto::HomeRestoreDefaultsSceneArrangementOp::set_version(
        restore_defaults_scene_arrangement_op,
        *(_DWORD *)(v3 + 80));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 32));
      common::minet::Packet::setHomeUserId(packet, *(_DWORD *)(v3 + 32));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendHomeOfflineMsgReq>(
        packet,
        (const proto::SendHomeOfflineMsgReq *)(v3 + 160));
      v15 = 0;
      proto::SendHomeOfflineMsgReq::~SendHomeOfflineMsgReq((proto::SendHomeOfflineMsgReq *const)(v3 + 160));
    }
    else
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 160),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "operator()",
        6024);
      common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
        (common::milog::MiLogStream *const)(v3 + 160),
        (const char (*)[27])"module_id or scene_id is 0");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 160));
      v15 = 1002;
    }
  }
  else
  {
    v15 = 2024;
  }
  std::string::~string((void *)(v3 + 96));
  result = v15;
  if ( v22 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 6046: range 000000000CBD1EBA-000000000CBD2092
int32_t __cdecl RequestHandler::passHomeSceneArrangementAudit(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:6047";
  *(_QWORD *)(v4 + 16) = RequestHandler::passHomeSceneArrangementAudit;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::passHomeSceneArrangementAudit(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::passHomeSceneArrangementAudit::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6047: range 000000000CBD1986-000000000CBD1EB9
int32_t __cdecl RequestHandler::passHomeSceneArrangementAudit(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::passHomeSceneArrangementAudit::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  common::milog::MiLogStream *v6; // rax
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  int32_t v15; // r14d
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-125h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-124h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-120h]
  proto::PassHomeSceneArrangementAuditOp *op_data; // [rsp+38h] [rbp-118h]
  char v22[272]; // [rsp+40h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 32 4 13 home_uid:6049 48 4 14 module_id:6050 64 4 13 scene_id:6051 80 4 12 version:6052 96 32 "
                        "11 ticket:6053 160 32 8 req:6074";
  *(_QWORD *)(v3 + 16) = RequestHandler::passHomeSceneArrangementAudit(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -234556924;
  v5[536862724] = -218959118;
  v5[536862726] = -202116109;
  *(_DWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 64) = 0;
  *(_DWORD *)(v3 + 80) = 0;
  std::string::basic_string(v3 + 96);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 160), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[10],unsigned int &,char const(&)[9],unsigned int &,char const(&)[8],unsigned int &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 160),
              (unsigned int *)(v3 + 32),
              (std::remove_reference<char const (&)[10]>::type *)"module_id",
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[9]>::type *)"scene_id",
              (unsigned int *)(v3 + 64),
              (std::remove_reference<char const (&)[8]>::type *)"version",
              (unsigned int *)(v3 + 80),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 96));
  std::string::~string((void *)(v3 + 160));
  std::allocator<char>::~allocator(&__a);
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v3 + 160),
    &common::milog::MiLogDefault::default_log_obj_,
    1u,
    "./src/handler/request_handler.api.hpp",
    "operator()",
    6055);
  v6 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(
         (common::milog::MiLogStream *const)(v3 + 160),
         (const char (*)[10])"home_uid:");
  v7 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v6, (const unsigned int *)(v3 + 32));
  v8 = common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v7, (const char (*)[12])" module_id:");
  v9 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v3 + 48));
  v10 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v9, (const char (*)[11])" scene_id:");
  v11 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v3 + 64));
  v12 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v11, (const char (*)[10])" version:");
  v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v3 + 80));
  v14 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v13, (const char (*)[9])" ticket:");
  common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v14, (const std::string *)(v3 + 96));
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 160));
  if ( retcode )
  {
    v15 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 96) )
  {
    v15 = 2012;
  }
  else if ( *(_DWORD *)(v3 + 32) )
  {
    if ( *(_DWORD *)(v3 + 48) && *(_DWORD *)(v3 + 64) )
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 160));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 96));
      op_data = proto::OfflineMsgBin::mutable_pass_home_scene_arrangement_audit_op(msg);
      proto::PassHomeSceneArrangementAuditOp::set_module_id(op_data, *(_DWORD *)(v3 + 48));
      proto::PassHomeSceneArrangementAuditOp::set_scene_id(op_data, *(_DWORD *)(v3 + 64));
      proto::PassHomeSceneArrangementAuditOp::set_version(op_data, *(_DWORD *)(v3 + 80));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 32));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 160));
      v15 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
    }
    else
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 160),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "operator()",
        6070);
      common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
        (common::milog::MiLogStream *const)(v3 + 160),
        (const char (*)[27])"module_id or scene_id is 0");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 160));
      v15 = 1002;
    }
  }
  else
  {
    v15 = 2024;
  }
  std::string::~string((void *)(v3 + 96));
  result = v15;
  if ( v22 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 6092: range 000000000CBD2474-000000000CBD264C
int32_t __cdecl RequestHandler::resetChannellerSlabCampGroup(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:6093";
  *(_QWORD *)(v4 + 16) = RequestHandler::resetChannellerSlabCampGroup;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::resetChannellerSlabCampGroup(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::resetChannellerSlabCampGroup::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6093: range 000000000CBD2094-000000000CBD2472
int32_t __cdecl RequestHandler::resetChannellerSlabCampGroup(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::resetChannellerSlabCampGroup::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-125h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-124h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-120h]
  proto::ResetChannellerSlabCampGroupOp *op_data; // [rsp+38h] [rbp-118h]
  char v14[272]; // [rsp+40h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 48 4 8 uid:6095 64 4 13 stage_id:6096 80 4 13 round_id:6097 96 32 11 ticket:6098 160 32 8 req:6113";
  *(_QWORD *)(v3 + 16) = RequestHandler::resetChannellerSlabCampGroup(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862724] = -218959118;
  v5[536862726] = -202116109;
  *(_DWORD *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 64) = 0;
  *(_DWORD *)(v3 + 80) = 0;
  std::string::basic_string(v3 + 96);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 160), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[9],unsigned int &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 160),
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[9]>::type *)"stage_id",
              (unsigned int *)(v3 + 64),
              (std::remove_reference<char const (&)[9]>::type *)"round_id",
              (unsigned int *)(v3 + 80),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 96));
  std::string::~string((void *)(v3 + 160));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 96) )
  {
    v6 = 2012;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 48) )
      goto LABEL_12;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 48)) )
      v7 = 0;
    else
LABEL_12:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 160));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 96));
      op_data = proto::OfflineMsgBin::mutable_reset_channeller_slab_camp_group_op(msg);
      proto::ResetChannellerSlabCampGroupOp::set_stage_id(op_data, *(_DWORD *)(v3 + 64));
      proto::ResetChannellerSlabCampGroupOp::set_round_id(op_data, *(_DWORD *)(v3 + 80));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 48));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 160));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
    }
  }
  std::string::~string((void *)(v3 + 96));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 6129: range 000000000CBD2A5E-000000000CBD2C36
int32_t __cdecl RequestHandler::setClimateAreaType(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:6130";
  *(_QWORD *)(v4 + 16) = RequestHandler::setClimateAreaType;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::setClimateAreaType(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::setClimateAreaType::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6130: range 000000000CBD264E-000000000CBD2A5D
int32_t __cdecl RequestHandler::setClimateAreaType(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::setClimateAreaType::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-125h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-124h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-120h]
  proto::SetClimateAreaTypeOp *op_data; // [rsp+38h] [rbp-118h]
  char v14[272]; // [rsp+40h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 32 4 8 uid:6132 48 4 13 scene_id:6133 64 4 20 climate_area_id:6134 80 4 17 climate_type:6135 9"
                        "6 32 11 ticket:6136 160 32 8 req:6151";
  *(_QWORD *)(v3 + 16) = RequestHandler::setClimateAreaType(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -234556924;
  v5[536862724] = -218959118;
  v5[536862726] = -202116109;
  *(_DWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 64) = 0;
  *(_DWORD *)(v3 + 80) = 0;
  std::string::basic_string(v3 + 96);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 160), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[16],unsigned int &,char const(&)[13],unsigned int &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 160),
              (unsigned int *)(v3 + 32),
              (std::remove_reference<char const (&)[9]>::type *)"scene_id",
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[16]>::type *)"climate_area_id",
              (unsigned int *)(v3 + 64),
              (std::remove_reference<char const (&)[13]>::type *)"climate_type",
              (unsigned int *)(v3 + 80),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 96));
  std::string::~string((void *)(v3 + 160));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 96) )
  {
    v6 = 2012;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 32) )
      goto LABEL_12;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 32)) )
      v7 = 0;
    else
LABEL_12:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 160));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 96));
      op_data = proto::OfflineMsgBin::mutable_set_climate_area_type_op(msg);
      proto::SetClimateAreaTypeOp::set_scene_id(op_data, *(_DWORD *)(v3 + 48));
      proto::SetClimateAreaTypeOp::set_climate_area_id(op_data, *(_DWORD *)(v3 + 64));
      proto::SetClimateAreaTypeOp::set_climate_type(op_data, *(_DWORD *)(v3 + 80));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 32));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 160));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
    }
  }
  std::string::~string((void *)(v3 + 96));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 6168: range 000000000CBD30DC-000000000CBD32B4
int32_t __cdecl RequestHandler::procSceneTag(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:6169";
  *(_QWORD *)(v4 + 16) = RequestHandler::procSceneTag;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::procSceneTag(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::procSceneTag::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6169: range 000000000CBD2C38-000000000CBD30DB
int32_t __cdecl RequestHandler::procSceneTag(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::procSceneTag::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  common::milog::MiLogStream *v8; // rax
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-125h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-124h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-120h]
  proto::ProcSceneTagOp *proc_scene_tag_op; // [rsp+38h] [rbp-118h]
  char v15[272]; // [rsp+40h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 32 4 8 uid:6171 48 4 13 scene_id:6172 64 4 17 scene_tag_id:6173 80 4 12 op_type:6174 96 32 11 "
                        "ticket:6175 160 32 8 req:6196";
  *(_QWORD *)(v3 + 16) = RequestHandler::procSceneTag(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -234556924;
  v5[536862724] = -218959118;
  v5[536862726] = -202116109;
  *(_DWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 64) = 0;
  *(_DWORD *)(v3 + 80) = 0;
  std::string::basic_string(v3 + 96);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 160), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[13],unsigned int &,char const(&)[8],unsigned int &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 160),
              (unsigned int *)(v3 + 32),
              (std::remove_reference<char const (&)[9]>::type *)"scene_id",
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[13]>::type *)"scene_tag_id",
              (unsigned int *)(v3 + 64),
              (std::remove_reference<char const (&)[8]>::type *)"op_type",
              (unsigned int *)(v3 + 80),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 96));
  std::string::~string((void *)(v3 + 160));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 96) )
  {
    v6 = 2012;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 32) )
      goto LABEL_12;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 32)) )
      v7 = 0;
    else
LABEL_12:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else if ( *(_DWORD *)(v3 + 80) == 1 || *(_DWORD *)(v3 + 80) == 2 )
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 160));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 96));
      proc_scene_tag_op = proto::OfflineMsgBin::mutable_proc_scene_tag_op(msg);
      proto::ProcSceneTagOp::set_scene_id(proc_scene_tag_op, *(_DWORD *)(v3 + 48));
      proto::ProcSceneTagOp::set_scene_tag_id(proc_scene_tag_op, *(_DWORD *)(v3 + 64));
      proto::ProcSceneTagOp::set_op_type(proc_scene_tag_op, *(proto::SceneTagOpType *)(v3 + 80));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 32));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 160));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
    }
    else
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 160),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "operator()",
        6192);
      v8 = common::milog::MiLogStream::operator<<<char [18],(char *[18])0>(
             (common::milog::MiLogStream *const)(v3 + 160),
             (const char (*)[18])"op_type invalid: ");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v3 + 80));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 160));
      v6 = 1002;
    }
  }
  std::string::~string((void *)(v3 + 96));
  result = v6;
  if ( v15 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 6214: range 000000000CBD32B6-000000000CBD38B0
int32_t __cdecl RequestHandler::queryHomeBlockStatus(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  common::milog::MiLogStream *v7; // rax
  common::milog::MiLogStream *v8; // rax
  Json::Value_0 *v9; // rax
  int v10; // r14d
  Json::Value_0 *v11; // rax
  Json::Value_0 *v12; // rax
  int32_t result; // eax
  int32_t M_array_high; // [rsp+Ch] [rbp-1C4h]
  std::less<unsigned int> __comp; // [rsp+36h] [rbp-19Ah] BYREF
  std::allocator<char> __a; // [rsp+37h] [rbp-199h] BYREF
  std::initializer_list<unsigned int> __l; // [rsp+38h] [rbp-198h] BYREF
  __int64 now; // [rsp+48h] [rbp-188h]
  std::string key; // [rsp+50h] [rbp-180h] BYREF
  Json::Value_0 other; // [rsp+70h] [rbp-160h] BYREF
  char v22[304]; // [rsp+A0h] [rbp-130h] BYREF

  v4 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(256LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 32 1 13 is_exist:6235 48 4 8 uid:6215 64 48 12 uid_set:6252 144 80 17 block_config:6236";
  *(_QWORD *)(v4 + 16) = RequestHandler::queryHomeBlockStatus;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556927;
  v6[536862723] = -219021312;
  v6[536862724] = 62194;
  v6[536862727] = -202116109;
  *(_DWORD *)(v4 + 48) = 0;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&key, off_1A660020, &__a);
  HIDWORD(__l._M_array) = getRequestParam<unsigned int>(request, &key, (unsigned int *)(v4 + 48));
  std::string::~string(&key);
  std::allocator<char>::~allocator(&__a);
  if ( HIDWORD(__l._M_array) )
  {
    M_array_high = HIDWORD(__l._M_array);
  }
  else if ( *(_DWORD *)(v4 + 48) )
  {
    if ( !MysqlOpHomeData::isHomeUidExist(*(_DWORD *)(v4 + 48)) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "queryHomeBlockStatus",
        6228);
      v7 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(
             (common::milog::MiLogStream *const)&key,
             (const char (*)[10])"home_uid:");
      v8 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v4 + 48));
      common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v8, (const char (*)[12])" not exist!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      M_array_high = 2024;
    }
    else
    {
      Json::Value::Value((Json::Value *)&other, *(_DWORD *)(v4 + 48));
      v9 = Json::Value::operator[]((Json::Value_0 *const)jval, off_1A660020);
      Json::Value::operator=(v9, &other);
      Json::Value::~Value(&other);
      *(_BYTE *)(v4 + 32) = 0;
      FeatureBlockConfig::FeatureBlockConfig((FeatureBlockConfig *const)(v4 + 144));
      if ( MysqlOpMisc::selectPlayerFreatureBlockConfig(
             *(_DWORD *)(v4 + 48),
             4u,
             (FeatureBlockConfig *)(v4 + 144),
             (bool *)(v4 + 32)) )
      {
        M_array_high = 1;
        v10 = 0;
      }
      else if ( *(_BYTE *)(v4 + 32) != 1 )
      {
        M_array_high = 2027;
        v10 = 0;
      }
      else
      {
        __l._M_len = common::tools::TimeUtils::getTimeByStr((const std::string *)(v4 + 152));
        if ( __l._M_len )
        {
          now = common::tools::TimeUtils::getNow();
          if ( (__int64)__l._M_len >= now )
          {
            Json::Value::Value(&other, v4 + 184);
            v11 = Json::Value::operator[]((Json::Value_0 *const)jval, "begin_time");
            Json::Value::operator=(v11, &other);
            Json::Value::~Value(&other);
            Json::Value::Value(&other, v4 + 152);
            v12 = Json::Value::operator[]((Json::Value_0 *const)jval, "end_time");
            Json::Value::operator=(v12, &other);
            Json::Value::~Value(&other);
            v10 = 2;
          }
          else
          {
            LODWORD(__l._M_array) = *(_DWORD *)(v4 + 48);
            std::allocator<unsigned int>::allocator((std::allocator<unsigned int> *const)&__a);
            std::set<unsigned int>::set(
              (std::set<unsigned int> *const)(v4 + 64),
              (std::initializer_list<unsigned int>)__PAIR128__(1LL, &__l),
              &__comp,
              (const std::set<unsigned int>::allocator_type *)&__a);
            std::allocator<unsigned int>::~allocator((std::allocator<unsigned int> *const)&__a);
            MysqlOpMisc::deletePlayerFeatureBlockConfig((const std::set<unsigned int> *)(v4 + 64), 4u);
            std::set<unsigned int>::~set((std::set<unsigned int> *const)(v4 + 64));
            v10 = 1;
          }
        }
        else
        {
          v10 = 1;
        }
      }
      FeatureBlockConfig::~FeatureBlockConfig((FeatureBlockConfig *const)(v4 + 144));
      if ( v10 )
        M_array_high = 0;
    }
  }
  else
  {
    M_array_high = 1;
  }
  result = M_array_high;
  if ( v22 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF800C) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6266: range 000000000CBD3DAE-000000000CBD401A
int32_t __cdecl RequestHandler::sendConcertProduct(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  _DWORD *v6; // r12
  int32_t v7; // r14d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+30h] [rbp-140h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+50h] [rbp-120h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+70h] [rbp-100h] BYREF
  char v14[208]; // [rsp+A0h] [rbp-D0h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(160LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "2 32 32 13 make_req:6268 96 32 13 make_rsp:6288";
  *(_QWORD *)(v4 + 16) = RequestHandler::sendConcertProduct;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862722] = -218959118;
  v6[536862724] = -202116109;
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::sendConcertProduct(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    (std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> *const)(v4 + 32),
    (RequestHandler::sendConcertProduct::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)>)request);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<RequestHandler::sendConcertProduct(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::Packet &,Json::Value &)#2},void,void>(
    (std::function<int(common::minet::Packet&,Json::Value&)> *const)(v4 + 96),
    (RequestHandler::sendConcertProduct::<lambda(common::minet::Packet&, Json::Value&)>)request);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function(
    &p_make_rsp,
    (const std::function<int(common::minet::Packet&,Json::Value&)> *)(v4 + 96));
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function(
    &p_make_req,
    (const std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function((std::function<int(common::minet::Packet&,Json::Value&)> *const)(v4 + 96));
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function((std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> *const)(v4 + 32));
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_DWORD *)((v4 >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 6268: range 000000000CBD38B2-000000000CBD3B87
int32_t __cdecl RequestHandler::sendConcertProduct(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::sendConcertProduct::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-F5h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-F4h]
  char v11[240]; // [rsp+30h] [rbp-F0h] BYREF

  v3 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 4 8 uid:6271 48 4 14 config_id:6272 64 32 11 ticket:6270 128 32 8 req:6278";
  *(_QWORD *)(v3 + 16) = RequestHandler::sendConcertProduct(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862723] = -218959118;
  v5[536862725] = -202116109;
  std::string::basic_string(v3 + 64);
  *(_DWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 128), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[7],std::string &,char const(&)[10],unsigned int &>(
              http_request,
              (const std::string *)(v3 + 128),
              (unsigned int *)(v3 + 32),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 64),
              (std::remove_reference<char const (&)[10]>::type *)"config_id",
              (unsigned int *)(v3 + 48));
  std::string::~string((void *)(v3 + 128));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else
  {
    proto::SendConcertProductReq::SendConcertProductReq((proto::SendConcertProductReq *const)(v3 + 128));
    proto::SendConcertProductReq::set_ticket(
      (proto::SendConcertProductReq *const)(v3 + 128),
      (const std::string *)(v3 + 64));
    proto::SendConcertProductReq::set_config_id((proto::SendConcertProductReq *const)(v3 + 128), *(_DWORD *)(v3 + 48));
    common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 32));
    common::minet::Packet::setTargetService(packet, 3u);
    common::minet::Packet::setProto<proto::SendConcertProductReq>(
      packet,
      (const proto::SendConcertProductReq *)(v3 + 128));
    v6 = 0;
    proto::SendConcertProductReq::~SendConcertProductReq((proto::SendConcertProductReq *const)(v3 + 128));
  }
  std::string::~string((void *)(v3 + 64));
  result = v6;
  if ( v11 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6288: range 000000000CBD3B88-000000000CBD3DAC
int32_t __cdecl RequestHandler::sendConcertProduct(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::Packet &,Json::Value &)#2}::operator()(
        const RequestHandler::sendConcertProduct::<lambda(common::minet::Packet&, Json::Value&)> *const __closure,
        common::minet::Packet *rsp_packet,
        Json::Value *jval)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t v6; // r14d
  int32_t result; // eax
  int32_t ret; // [rsp+2Ch] [rbp-B4h]
  char v9[176]; // [rsp+30h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 48 40 8 rsp:6290";
  *(_QWORD *)(v3 + 16) = RequestHandler::sendConcertProduct(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::Packet &,Json::Value &)#2}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61937;
  v5[536862722] = -218103808;
  v5[536862723] = -202116109;
  proto::SendConcertProductRsp::SendConcertProductRsp((proto::SendConcertProductRsp *const)(v3 + 48));
  ret = common::minet::Packet::getProto<proto::SendConcertProductRsp>(
          rsp_packet,
          (proto::SendConcertProductRsp *)(v3 + 48));
  if ( ret )
  {
    v6 = ret;
  }
  else if ( proto::SendConcertProductRsp::retcode((const proto::SendConcertProductRsp *const)(v3 + 48)) == 140 )
  {
    v6 = 2015;
  }
  else if ( proto::SendConcertProductRsp::retcode((const proto::SendConcertProductRsp *const)(v3 + 48)) == 5 )
  {
    v6 = 2007;
  }
  else if ( proto::SendConcertProductRsp::retcode((const proto::SendConcertProductRsp *const)(v3 + 48)) == 2014 )
  {
    v6 = 2029;
  }
  else if ( proto::SendConcertProductRsp::retcode((const proto::SendConcertProductRsp *const)(v3 + 48)) == 2015 )
  {
    v6 = 2013;
  }
  else if ( proto::SendConcertProductRsp::retcode((const proto::SendConcertProductRsp *const)(v3 + 48)) == 2016 )
  {
    v6 = 2012;
  }
  else
  {
    v6 = proto::SendConcertProductRsp::retcode((const proto::SendConcertProductRsp *const)(v3 + 48));
  }
  proto::SendConcertProductRsp::~SendConcertProductRsp((proto::SendConcertProductRsp *const)(v3 + 48));
  result = v6;
  if ( v9 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6325: range 000000000CBD45AA-000000000CBD4816
int32_t __cdecl RequestHandler::queryConcertProductInfo(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  _DWORD *v6; // r12
  int32_t v7; // r14d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+30h] [rbp-140h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+50h] [rbp-120h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+70h] [rbp-100h] BYREF
  char v14[208]; // [rsp+A0h] [rbp-D0h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(160LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "2 32 32 13 make_req:6327 96 32 13 make_rsp:6345";
  *(_QWORD *)(v4 + 16) = RequestHandler::queryConcertProductInfo;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862722] = -218959118;
  v6[536862724] = -202116109;
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::queryConcertProductInfo(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    (std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> *const)(v4 + 32),
    (RequestHandler::queryConcertProductInfo::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)>)request);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<RequestHandler::queryConcertProductInfo(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::Packet &,Json::Value &)#2},void,void>(
    (std::function<int(common::minet::Packet&,Json::Value&)> *const)(v4 + 96),
    (RequestHandler::queryConcertProductInfo::<lambda(common::minet::Packet&, Json::Value&)>)request);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function(
    &p_make_rsp,
    (const std::function<int(common::minet::Packet&,Json::Value&)> *)(v4 + 96));
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function(
    &p_make_req,
    (const std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function((std::function<int(common::minet::Packet&,Json::Value&)> *const)(v4 + 96));
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function((std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> *const)(v4 + 32));
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_DWORD *)((v4 >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 6327: range 000000000CBD401C-000000000CBD4283
int32_t __cdecl RequestHandler::queryConcertProductInfo(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::queryConcertProductInfo::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  const char (*v6)[10]; // r9
  int32_t v7; // r14d
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-D5h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-D4h]
  std::string key; // [rsp+30h] [rbp-D0h] BYREF
  char v13[176]; // [rsp+50h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "3 32 4 8 uid:6329 48 4 14 config_id:6330 64 24 8 req:6336";
  *(_QWORD *)(v3 + 16) = RequestHandler::queryConcertProductInfo(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -218103808;
  v5[536862723] = -202116109;
  *(_DWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&key, off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[10],unsigned int &>(
              http_request,
              &key,
              (unsigned int *)(v3 + 32),
              (std::remove_reference<char const (&)[10]>::type *)"config_id",
              (unsigned int *)(v3 + 48),
              v6);
  std::string::~string(&key);
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v7 = retcode;
  }
  else
  {
    proto::QueryConcertProductInfoReq::QueryConcertProductInfoReq((proto::QueryConcertProductInfoReq *const)(v3 + 64));
    proto::QueryConcertProductInfoReq::set_config_id(
      (proto::QueryConcertProductInfoReq *const)(v3 + 64),
      *(_DWORD *)(v3 + 48));
    common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 32));
    common::minet::Packet::setTargetService(packet, 3u);
    common::minet::Packet::setProto<proto::QueryConcertProductInfoReq>(
      packet,
      (const proto::QueryConcertProductInfoReq *)(v3 + 64));
    v7 = 0;
    proto::QueryConcertProductInfoReq::~QueryConcertProductInfoReq((proto::QueryConcertProductInfoReq *const)(v3 + 64));
  }
  result = v7;
  if ( v13 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6345: range 000000000CBD4284-000000000CBD45A9
int32_t __cdecl RequestHandler::queryConcertProductInfo(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::Packet &,Json::Value &)#2}::operator()(
        const RequestHandler::queryConcertProductInfo::<lambda(common::minet::Packet&, Json::Value&)> *const __closure,
        common::minet::Packet *rsp_packet,
        Json::Value *jval)
{
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t v6; // r14d
  unsigned int v7; // eax
  Json::Value_0 *v8; // rax
  unsigned int v9; // eax
  Json::Value_0 *v10; // rax
  unsigned int v11; // eax
  Json::Value_0 *v12; // rax
  int32_t result; // eax
  int32_t ret; // [rsp+2Ch] [rbp-E4h]
  Json::Value_0 other; // [rsp+30h] [rbp-E0h] BYREF
  char v17[176]; // [rsp+60h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "1 48 40 8 rsp:6347";
  *(_QWORD *)(v3 + 16) = RequestHandler::queryConcertProductInfo(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::Packet &,Json::Value &)#2}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61937;
  v5[536862722] = -218103808;
  v5[536862723] = -202116109;
  proto::QueryConcertProductInfoRsp::QueryConcertProductInfoRsp((proto::QueryConcertProductInfoRsp *const)(v3 + 48));
  ret = common::minet::Packet::getProto<proto::QueryConcertProductInfoRsp>(
          rsp_packet,
          (proto::QueryConcertProductInfoRsp *)(v3 + 48));
  if ( ret )
  {
    v6 = ret;
  }
  else
  {
    if ( !proto::QueryConcertProductInfoRsp::retcode((const proto::QueryConcertProductInfoRsp *const)(v3 + 48)) )
    {
      v7 = proto::QueryConcertProductInfoRsp::config_id((const proto::QueryConcertProductInfoRsp *const)(v3 + 48));
      Json::Value::Value((Json::Value *)&other, v7);
      v8 = Json::Value::operator[]((Json::Value_0 *const)jval, "config_id");
      Json::Value::operator=(v8, &other);
      Json::Value::~Value(&other);
      v9 = proto::QueryConcertProductInfoRsp::obtain_count((const proto::QueryConcertProductInfoRsp *const)(v3 + 48));
      Json::Value::Value((Json::Value *)&other, v9);
      v10 = Json::Value::operator[]((Json::Value_0 *const)jval, "obtain_count");
      Json::Value::operator=(v10, &other);
      Json::Value::~Value(&other);
      v11 = proto::QueryConcertProductInfoRsp::obtain_limit((const proto::QueryConcertProductInfoRsp *const)(v3 + 48));
      Json::Value::Value((Json::Value *)&other, v11);
      v12 = Json::Value::operator[]((Json::Value_0 *const)jval, "obtain_limit");
      Json::Value::operator=(v12, &other);
      Json::Value::~Value(&other);
    }
    if ( proto::QueryConcertProductInfoRsp::retcode((const proto::QueryConcertProductInfoRsp *const)(v3 + 48)) == 140 )
    {
      v6 = 2015;
    }
    else if ( proto::QueryConcertProductInfoRsp::retcode((const proto::QueryConcertProductInfoRsp *const)(v3 + 48)) == 5 )
    {
      v6 = 2007;
    }
    else
    {
      v6 = proto::QueryConcertProductInfoRsp::retcode((const proto::QueryConcertProductInfoRsp *const)(v3 + 48));
    }
  }
  proto::QueryConcertProductInfoRsp::~QueryConcertProductInfoRsp((proto::QueryConcertProductInfoRsp *const)(v3 + 48));
  result = v6;
  if ( v17 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6377: range 000000000CBD4818-000000000CBD4D56
int32_t __cdecl RequestHandler::kickOutPlayerByUid(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  const char (*v7)[7]; // r9
  int32_t v8; // r14d
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::minet::Packet *v12; // rax
  common::minet::Packet *v13; // rax
  common::minet::Packet *v14; // rax
  MuipserverService *v15; // r14
  unsigned __int64 v16; // rdx
  std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v17; // rax
  std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v18; // r14
  unsigned __int64 v19; // rax
  __int64 (__fastcall *v20)(std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::shared_ptr<common::minet::Packet> *); // r15
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+37h] [rbp-109h] BYREF
  int32_t retcode; // [rsp+38h] [rbp-108h]
  int ret; // [rsp+3Ch] [rbp-104h]
  std::shared_ptr<common::minet::Packet> packet_ptr; // [rsp+40h] [rbp-100h] BYREF
  std::string key; // [rsp+50h] [rbp-F0h] BYREF
  char v27[208]; // [rsp+70h] [rbp-D0h] BYREF

  v4 = (unsigned __int64)v27;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(160LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "4 32 4 8 uid:6378 48 4 11 reason:6379 64 16 15 packet_ptr:6398 96 24 11 notify:6394";
  *(_QWORD *)(v4 + 16) = RequestHandler::kickOutPlayerByUid;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862722] = -219021312;
  v6[536862723] = -218103808;
  v6[536862724] = -202116109;
  *(_DWORD *)(v4 + 32) = 0;
  *(_DWORD *)(v4 + 48) = 0;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&key, off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[7],unsigned int &>(
              request,
              &key,
              (unsigned int *)(v4 + 32),
              (std::remove_reference<char const (&)[7]>::type *)"reason",
              (unsigned int *)(v4 + 48),
              v7);
  std::string::~string(&key);
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v8 = retcode;
  }
  else if ( *(_DWORD *)(v4 + 48) > 0xEu && *(_DWORD *)(v4 + 48) <= 0x499602D1u )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&key,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/handler/request_handler.api.hpp",
      "kickOutPlayerByUid",
      6392);
    v9 = common::milog::MiLogStream::operator<<<char [6],(char *[6])0>(
           (common::milog::MiLogStream *const)&key,
           (const char (*)[6])"uid: ");
    v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v4 + 32));
    v11 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v10, (const char (*)[10])" reason: ");
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v4 + 48));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
    proto::KickoutPlayerNotify::KickoutPlayerNotify((proto::KickoutPlayerNotify *const)(v4 + 96));
    proto::KickoutPlayerNotify::set_reason((proto::KickoutPlayerNotify *const)(v4 + 96), *(_DWORD *)(v4 + 48));
    common::minet::PacketUtils::createPacket();
    if ( std::operator==<common::minet::Packet>(0LL, (const std::shared_ptr<common::minet::Packet> *)(v4 + 64)) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "kickOutPlayerByUid",
        6401);
      common::milog::MiLogStream::operator<<<char [19],(char *[19])0>(
        (common::milog::MiLogStream *const)&key,
        (const char (*)[19])"createPacket fails");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      v8 = -1;
    }
    else
    {
      v12 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
      common::minet::Packet::setUserId(v12, *(_DWORD *)(v4 + 32));
      v13 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
      common::minet::Packet::setTargetService(v13, 3u);
      v14 = std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<common::minet::Packet,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v4 + 64));
      common::minet::Packet::setProto<proto::KickoutPlayerNotify>(v14, (const proto::KickoutPlayerNotify *)(v4 + 96));
      v15 = ServiceBox::findService<MuipserverService>();
      std::shared_ptr<common::minet::Packet>::shared_ptr(
        &packet_ptr,
        (const std::shared_ptr<common::minet::Packet> *)(v4 + 64));
      ServiceBase::setPacketSource(v15, (common::minet::PacketPtr)__PAIR128__(v16, &packet_ptr));
      std::shared_ptr<common::minet::Packet>::~shared_ptr(&packet_ptr);
      v17 = std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false> *const)&ResourceBox::network_mgr_ptr);
      v18 = v17;
      if ( *(_BYTE *)(((unsigned __int64)v17 >> 3) + 0x7FFF8000) )
        __asan_report_load8(v17);
      v19 = (unsigned __int64)(v18->_vptr_NetworkMgrBase + 8);
      if ( *(_BYTE *)((v19 >> 3) + 0x7FFF8000) )
        v19 = __asan_report_load8(v18->_vptr_NetworkMgrBase + 8);
      v20 = *(__int64 (__fastcall **)(std::__shared_ptr_access<NetworkMgrBase,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *, std::shared_ptr<common::minet::Packet> *))v19;
      std::shared_ptr<common::minet::Packet>::shared_ptr(
        &packet_ptr,
        (const std::shared_ptr<common::minet::Packet> *)(v4 + 64));
      ret = v20(v18, &packet_ptr);
      std::shared_ptr<common::minet::Packet>::~shared_ptr(&packet_ptr);
      if ( ret )
        v8 = ret;
      else
        v8 = 0;
    }
    std::shared_ptr<common::minet::Packet>::~shared_ptr((std::shared_ptr<common::minet::Packet> *const)(v4 + 64));
    proto::KickoutPlayerNotify::~KickoutPlayerNotify((proto::KickoutPlayerNotify *const)(v4 + 96));
  }
  else
  {
    v8 = 2030;
  }
  result = v8;
  if ( v27 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 6421: range 000000000CBD51CA-000000000CBD53A2
int32_t __cdecl RequestHandler::setFinishParentQuestChildQuestState(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:6422";
  *(_QWORD *)(v4 + 16) = RequestHandler::setFinishParentQuestChildQuestState;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::setFinishParentQuestChildQuestState(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::setFinishParentQuestChildQuestState::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6422: range 000000000CBD4D58-000000000CBD51C8
int32_t __cdecl RequestHandler::setFinishParentQuestChildQuestState(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::setFinishParentQuestChildQuestState::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  common::milog::MiLogStream *v8; // rax
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-125h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-124h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-120h]
  proto::SetFinishedParentQuestChildStateOp *op; // [rsp+38h] [rbp-118h]
  char v15[272]; // [rsp+40h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 48 4 8 uid:6424 64 4 13 quest_id:6425 80 4 10 state:6426 96 32 11 ticket:6427 160 32 8 req:6446";
  *(_QWORD *)(v3 + 16) = RequestHandler::setFinishParentQuestChildQuestState(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862724] = -218959118;
  v5[536862726] = -202116109;
  *(_DWORD *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 64) = 0;
  *(_DWORD *)(v3 + 80) = 0;
  std::string::basic_string(v3 + 96);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 160), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[6],unsigned int &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 160),
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[9]>::type *)"quest_id",
              (unsigned int *)(v3 + 64),
              (std::remove_reference<char const (&)[6]>::type *)"state",
              (unsigned int *)(v3 + 80),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 96));
  std::string::~string((void *)(v3 + 160));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 96) )
  {
    v6 = 2012;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 48) )
      goto LABEL_12;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 48)) )
      v7 = 0;
    else
LABEL_12:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else if ( *(_DWORD *)(v3 + 80) == 3 || *(_DWORD *)(v3 + 80) == 4 )
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 160));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 96));
      op = proto::OfflineMsgBin::mutable_set_finished_parent_quest_child_state_op(msg);
      proto::SetFinishedParentQuestChildStateOp::set_quest_id(op, *(_DWORD *)(v3 + 64));
      proto::SetFinishedParentQuestChildStateOp::set_state(op, *(_DWORD *)(v3 + 80));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 48));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 160));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
    }
    else
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 160),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "operator()",
        6443);
      v8 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
             (common::milog::MiLogStream *const)(v3 + 160),
             (const char (*)[43])"can only set quest state to 3 or 4, state:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v3 + 80));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 160));
      v6 = 1002;
    }
  }
  std::string::~string((void *)(v3 + 96));
  result = v6;
  if ( v15 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 6461: range 000000000CBD57B4-000000000CBD598C
int32_t __cdecl RequestHandler::setLevel1AreaExplorePoint(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:6462";
  *(_QWORD *)(v4 + 16) = RequestHandler::setLevel1AreaExplorePoint;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::setLevel1AreaExplorePoint(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::setLevel1AreaExplorePoint::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6462: range 000000000CBD53A4-000000000CBD57B3
int32_t __cdecl RequestHandler::setLevel1AreaExplorePoint(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::setLevel1AreaExplorePoint::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-125h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-124h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-120h]
  proto::SetLevel1AreaExplorePointOp *op; // [rsp+38h] [rbp-118h]
  char v14[272]; // [rsp+40h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 32 4 8 uid:6464 48 4 13 scene_id:6465 64 4 19 level1_area_id:6466 80 4 18 explore_point:6467 9"
                        "6 32 11 ticket:6468 160 32 8 req:6482";
  *(_QWORD *)(v3 + 16) = RequestHandler::setLevel1AreaExplorePoint(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -234556924;
  v5[536862724] = -218959118;
  v5[536862726] = -202116109;
  *(_DWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 64) = 0;
  *(_DWORD *)(v3 + 80) = 0;
  std::string::basic_string(v3 + 96);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 160), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[15],unsigned int &,char const(&)[14],unsigned int &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 160),
              (unsigned int *)(v3 + 32),
              (std::remove_reference<char const (&)[9]>::type *)"scene_id",
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[15]>::type *)"level1_area_id",
              (unsigned int *)(v3 + 64),
              (std::remove_reference<char const (&)[14]>::type *)"explore_point",
              (unsigned int *)(v3 + 80),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 96));
  std::string::~string((void *)(v3 + 160));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 96) )
  {
    v6 = 2012;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 32) )
      goto LABEL_12;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 32)) )
      v7 = 0;
    else
LABEL_12:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 160));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 96));
      op = proto::OfflineMsgBin::mutable_set_level1_area_explore_point_op(msg);
      proto::SetLevel1AreaExplorePointOp::set_scene_id(op, *(_DWORD *)(v3 + 48));
      proto::SetLevel1AreaExplorePointOp::set_level1_area_id(op, *(_DWORD *)(v3 + 64));
      proto::SetLevel1AreaExplorePointOp::set_explore_point(op, *(_DWORD *)(v3 + 80));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 32));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 160));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
    }
  }
  std::string::~string((void *)(v3 + 96));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 6498: range 000000000CBD5DA0-000000000CBD5F78
int32_t __cdecl RequestHandler::setCodexOpenOrClose(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:6499";
  *(_QWORD *)(v4 + 16) = RequestHandler::setCodexOpenOrClose;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::setCodexOpenOrClose(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::setCodexOpenOrClose::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6499: range 000000000CBD598E-000000000CBD5D9E
int32_t __cdecl RequestHandler::setCodexOpenOrClose(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::setCodexOpenOrClose::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-125h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-124h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-120h]
  proto::SetCodexOpenOrCloseOp *op; // [rsp+38h] [rbp-118h]
  char v14[272]; // [rsp+40h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 32 1 12 is_open:6504 48 4 8 uid:6501 64 4 15 codex_type:6502 80 4 13 codex_id:6503 96 32 11 ti"
                        "cket:6505 160 32 8 req:6519";
  *(_QWORD *)(v3 + 16) = RequestHandler::setCodexOpenOrClose(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556927;
  v5[536862722] = -234556924;
  v5[536862724] = -218959118;
  v5[536862726] = -202116109;
  *(_DWORD *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 64) = 0;
  *(_DWORD *)(v3 + 80) = 0;
  *(_BYTE *)(v3 + 32) = 0;
  std::string::basic_string(v3 + 96);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 160), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[11],unsigned int &,char const(&)[9],unsigned int &,char const(&)[8],bool &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 160),
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[11]>::type *)"codex_type",
              (unsigned int *)(v3 + 64),
              (std::remove_reference<char const (&)[9]>::type *)"codex_id",
              (unsigned int *)(v3 + 80),
              (std::remove_reference<char const (&)[8]>::type *)"is_open",
              (bool *)(v3 + 32),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 96));
  std::string::~string((void *)(v3 + 160));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 96) )
  {
    v6 = 2012;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 48) )
      goto LABEL_12;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 48)) )
      v7 = 0;
    else
LABEL_12:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 160));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 96));
      op = proto::OfflineMsgBin::mutable_set_codex_open_or_close_op(msg);
      proto::SetCodexOpenOrCloseOp::set_codex_type(op, *(_DWORD *)(v3 + 64));
      proto::SetCodexOpenOrCloseOp::set_codex_id(op, *(_DWORD *)(v3 + 80));
      proto::SetCodexOpenOrCloseOp::set_is_open(op, *(_BYTE *)(v3 + 32));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 48));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 160));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
    }
  }
  std::string::~string((void *)(v3 + 96));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 6535: range 000000000CBD636E-000000000CBD6546
int32_t __cdecl RequestHandler::registerGroupLinkBundle(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:6536";
  *(_QWORD *)(v4 + 16) = RequestHandler::registerGroupLinkBundle;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::registerGroupLinkBundle(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::registerGroupLinkBundle::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6536: range 000000000CBD5F7A-000000000CBD636C
int32_t __cdecl RequestHandler::registerGroupLinkBundle(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::registerGroupLinkBundle::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-125h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-124h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-120h]
  proto::GroupLinkOp *group_link_op; // [rsp+38h] [rbp-118h]
  char v14[272]; // [rsp+40h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 48 4 8 uid:6538 64 4 20 group_bundle_id:6540 80 4 16 activity_id:6541 96 32 11 ticket:6539 160 32 8 req:6555";
  *(_QWORD *)(v3 + 16) = RequestHandler::registerGroupLinkBundle(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862724] = -218959118;
  v5[536862726] = -202116109;
  *(_DWORD *)(v3 + 48) = 0;
  std::string::basic_string(v3 + 96);
  *(_DWORD *)(v3 + 64) = 0;
  *(_DWORD *)(v3 + 80) = 0;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 160), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[16],unsigned int &,char const(&)[12],unsigned int &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 160),
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[16]>::type *)"group_bundle_id",
              (unsigned int *)(v3 + 64),
              (std::remove_reference<char const (&)[12]>::type *)"activity_id",
              (unsigned int *)(v3 + 80),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 96));
  std::string::~string((void *)(v3 + 160));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 96) )
  {
    v6 = 2012;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 48) )
      goto LABEL_12;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 48)) )
      v7 = 0;
    else
LABEL_12:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 160));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 96));
      group_link_op = proto::OfflineMsgBin::mutable_group_link_op(msg);
      proto::GroupLinkOp::set_op_type(group_link_op, GROUP_LINK_OP_BUNDLE_REGISTER);
      proto::GroupLinkOp::set_group_bundle_id(group_link_op, *(_DWORD *)(v3 + 64));
      proto::GroupLinkOp::set_activity_id(group_link_op, *(_DWORD *)(v3 + 80));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 48));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 160));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
    }
  }
  std::string::~string((void *)(v3 + 96));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 6571: range 000000000CBD68E6-000000000CBD6ABE
int32_t __cdecl RequestHandler::finishGroupLinkBundle(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:6572";
  *(_QWORD *)(v4 + 16) = RequestHandler::finishGroupLinkBundle;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::finishGroupLinkBundle(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::finishGroupLinkBundle::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6572: range 000000000CBD6548-000000000CBD68E5
int32_t __cdecl RequestHandler::finishGroupLinkBundle(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::finishGroupLinkBundle::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-105h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-104h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-100h]
  proto::GroupLinkOp *group_link_op; // [rsp+38h] [rbp-F8h]
  char v14[240]; // [rsp+40h] [rbp-F0h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 4 8 uid:6574 48 4 20 group_bundle_id:6576 64 32 11 ticket:6575 128 32 8 req:6590";
  *(_QWORD *)(v3 + 16) = RequestHandler::finishGroupLinkBundle(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862723] = -218959118;
  v5[536862725] = -202116109;
  *(_DWORD *)(v3 + 32) = 0;
  std::string::basic_string(v3 + 64);
  *(_DWORD *)(v3 + 48) = 0;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 128), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[16],unsigned int &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 128),
              (unsigned int *)(v3 + 32),
              (std::remove_reference<char const (&)[16]>::type *)"group_bundle_id",
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 64));
  std::string::~string((void *)(v3 + 128));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 64) )
  {
    v6 = 2012;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 32) )
      goto LABEL_12;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 32)) )
      v7 = 0;
    else
LABEL_12:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 128));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 128));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 64));
      group_link_op = proto::OfflineMsgBin::mutable_group_link_op(msg);
      proto::GroupLinkOp::set_op_type(group_link_op, GROUP_LINK_OP_BUNDLE_FINISH);
      proto::GroupLinkOp::set_group_bundle_id(group_link_op, *(_DWORD *)(v3 + 48));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 32));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 128));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 128));
    }
  }
  std::string::~string((void *)(v3 + 64));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6605: range 000000000CBD6E5E-000000000CBD7036
int32_t __cdecl RequestHandler::unregisterGroupLinkBundle(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:6606";
  *(_QWORD *)(v4 + 16) = RequestHandler::unregisterGroupLinkBundle;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::unregisterGroupLinkBundle(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::unregisterGroupLinkBundle::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6606: range 000000000CBD6AC0-000000000CBD6E5D
int32_t __cdecl RequestHandler::unregisterGroupLinkBundle(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::unregisterGroupLinkBundle::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-105h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-104h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-100h]
  proto::GroupLinkOp *group_link_op; // [rsp+38h] [rbp-F8h]
  char v14[240]; // [rsp+40h] [rbp-F0h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 4 8 uid:6608 48 4 20 group_bundle_id:6610 64 32 11 ticket:6609 128 32 8 req:6624";
  *(_QWORD *)(v3 + 16) = RequestHandler::unregisterGroupLinkBundle(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862723] = -218959118;
  v5[536862725] = -202116109;
  *(_DWORD *)(v3 + 32) = 0;
  std::string::basic_string(v3 + 64);
  *(_DWORD *)(v3 + 48) = 0;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 128), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[16],unsigned int &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 128),
              (unsigned int *)(v3 + 32),
              (std::remove_reference<char const (&)[16]>::type *)"group_bundle_id",
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 64));
  std::string::~string((void *)(v3 + 128));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 64) )
  {
    v6 = 2012;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 32) )
      goto LABEL_12;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 32)) )
      v7 = 0;
    else
LABEL_12:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 128));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 128));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 64));
      group_link_op = proto::OfflineMsgBin::mutable_group_link_op(msg);
      proto::GroupLinkOp::set_op_type(group_link_op, GROUP_LINK_OP_BUNDLE_UNREGISTER);
      proto::GroupLinkOp::set_group_bundle_id(group_link_op, *(_DWORD *)(v3 + 48));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 32));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 128));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 128));
    }
  }
  std::string::~string((void *)(v3 + 64));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6640: range 000000000CBD7038-000000000CBD77C8
int32_t __cdecl RequestHandler::queryServerRedPointConfigs(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  Json::Value_0 *v7; // rax
  Json::Value_0::ArrayIndex v8; // edx
  Json::Value_0 *v9; // rax
  Json::Value_0 *v10; // rax
  Json::Value_0 *v11; // rax
  Json::Value_0 *v12; // rax
  Json::Value_0 *v13; // rax
  Json::Value_0 *v14; // rax
  Json::Value_0 *v15; // rax
  Json::Value_0 *v16; // rax
  int32_t v17; // r14d
  int32_t result; // eax
  int p_yielda; // [rsp+0h] [rbp-140h]
  Json::Value *jvala; // [rsp+8h] [rbp-138h]
  uint32_t i; // [rsp+20h] [rbp-120h]
  int32_t retcode; // [rsp+24h] [rbp-11Ch]
  Json::Value *json_db_red_point_config_list; // [rsp+28h] [rbp-118h]
  std::vector<DbRedPointConfig>::reference db_red_point_config; // [rsp+30h] [rbp-110h]
  Json::Value *json_value; // [rsp+38h] [rbp-108h]
  Json::Value_0 other; // [rsp+40h] [rbp-100h] BYREF
  char v27[208]; // [rsp+70h] [rbp-D0h] BYREF

  jvala = jval;
  p_yielda = (int)p_yield;
  v4 = (unsigned __int64)v27;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(160LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "2 32 24 28 db_red_point_config_vec:6641 96 32 12 err_msg:6642";
  *(_QWORD *)(v4 + 16) = RequestHandler::queryServerRedPointConfigs;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234881024;
  v6[536862722] = -218959118;
  v6[536862724] = -202116109;
  std::vector<DbRedPointConfig>::vector((std::vector<DbRedPointConfig> *const)(v4 + 32));
  std::string::basic_string(v4 + 96);
  retcode = MysqlOpMisc::selectAllRedPointConfigData(
              (std::vector<DbRedPointConfig> *)(v4 + 32),
              (std::string *)(v4 + 96));
  if ( (unsigned __int8)std::string::empty(v4 + 96) != 1 )
  {
    Json::Value::Value(&other, v4 + 96);
    v7 = Json::Value::operator[]((Json::Value_0 *const)jvala, "err_msg");
    Json::Value::operator=(v7, &other);
    Json::Value::~Value(&other);
  }
  json_db_red_point_config_list = (Json::Value *)Json::Value::operator[](
                                                   (Json::Value_0 *const)jvala,
                                                   "red_point_config_list");
  v8 = std::vector<DbRedPointConfig>::size((const std::vector<DbRedPointConfig> *const)(v4 + 32));
  Json::Value::resize(json_db_red_point_config_list, v8);
  for ( i = 0; i < std::vector<DbRedPointConfig>::size((const std::vector<DbRedPointConfig> *const)(v4 + 32)); ++i )
  {
    db_red_point_config = std::vector<DbRedPointConfig>::operator[]((std::vector<DbRedPointConfig> *const)(v4 + 32), i);
    json_value = (Json::Value *)Json::Value::operator[](
                                  (Json::Value_0 *)json_db_red_point_config_list,
                                  i,
                                  p_yielda,
                                  (char)jvala);
    if ( *(_BYTE *)(((unsigned __int64)db_red_point_config >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)db_red_point_config >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(db_red_point_config);
    }
    Json::Value::Value((Json::Value *)&other, db_red_point_config->id);
    v9 = Json::Value::operator[]((Json::Value_0 *const)json_value, "id");
    Json::Value::operator=(v9, &other);
    Json::Value::~Value(&other);
    if ( *(_BYTE *)(((unsigned __int64)&db_red_point_config->content_id >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)db_red_point_config + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&db_red_point_config->content_id >> 3)
                                                                        + 0x7FFF8000) )
    {
      __asan_report_load4(&db_red_point_config->content_id);
    }
    Json::Value::Value((Json::Value *)&other, db_red_point_config->content_id);
    v10 = Json::Value::operator[]((Json::Value_0 *const)json_value, "content_id");
    Json::Value::operator=(v10, &other);
    Json::Value::~Value(&other);
    Json::Value::Value(&other, &db_red_point_config->trigger_time);
    v11 = Json::Value::operator[]((Json::Value_0 *const)json_value, "trigger_time");
    Json::Value::operator=(v11, &other);
    Json::Value::~Value(&other);
    Json::Value::Value(&other, &db_red_point_config->expire_time);
    v12 = Json::Value::operator[]((Json::Value_0 *const)json_value, "expire_time");
    Json::Value::operator=(v12, &other);
    Json::Value::~Value(&other);
    if ( *(_BYTE *)(((unsigned __int64)&db_red_point_config->is_daily_refresh >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&db_red_point_config->is_daily_refresh >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&db_red_point_config->is_daily_refresh);
    }
    Json::Value::Value((Json::Value *)&other, db_red_point_config->is_daily_refresh);
    v13 = Json::Value::operator[]((Json::Value_0 *const)json_value, "is_daily_refresh");
    Json::Value::operator=(v13, &other);
    Json::Value::~Value(&other);
    if ( *(_BYTE *)(((unsigned __int64)&db_red_point_config->daily_refresh_second >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)db_red_point_config + 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&db_red_point_config->daily_refresh_second >> 3)
                                                                         + 0x7FFF8000) )
    {
      __asan_report_load4(&db_red_point_config->daily_refresh_second);
    }
    Json::Value::Value((Json::Value *)&other, db_red_point_config->daily_refresh_second);
    v14 = Json::Value::operator[]((Json::Value_0 *const)json_value, "daily_refresh_second");
    Json::Value::operator=(v14, &other);
    Json::Value::~Value(&other);
    if ( *(_BYTE *)(((unsigned __int64)&db_red_point_config->red_point_type >> 3) + 0x7FFF8000) != 0
      && *(_BYTE *)(((unsigned __int64)&db_red_point_config->red_point_type >> 3) + 0x7FFF8000) <= 3 )
    {
      __asan_report_load4(&db_red_point_config->red_point_type);
    }
    Json::Value::Value((Json::Value *)&other, db_red_point_config->red_point_type);
    v15 = Json::Value::operator[]((Json::Value_0 *const)json_value, "red_point_type");
    Json::Value::operator=(v15, &other);
    Json::Value::~Value(&other);
    if ( *(_BYTE *)(((unsigned __int64)&db_red_point_config->player_level >> 3) + 0x7FFF8000) != 0
      && (char)((((_BYTE)db_red_point_config + 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&db_red_point_config->player_level >> 3)
                                                                         + 0x7FFF8000) )
    {
      __asan_report_load4(&db_red_point_config->player_level);
    }
    Json::Value::Value((Json::Value *)&other, db_red_point_config->player_level);
    v16 = Json::Value::operator[]((Json::Value_0 *const)json_value, "player_level");
    Json::Value::operator=(v16, &other);
    Json::Value::~Value(&other);
  }
  if ( retcode == -2 )
    v17 = 2033;
  else
    v17 = retcode;
  std::string::~string((void *)(v4 + 96));
  std::vector<DbRedPointConfig>::~vector((std::vector<DbRedPointConfig> *const)(v4 + 32));
  result = v17;
  if ( v27 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 6671: range 000000000CBD77CA-000000000CBD7C92
int32_t __cdecl RequestHandler::addServerRedPointConfig(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  int32_t v7; // r14d
  time_t v8; // r14
  Json::Value_0 *v9; // rax
  Json::Value_0 *v10; // rax
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+23h] [rbp-16Dh] BYREF
  int32_t retcode; // [rsp+24h] [rbp-16Ch]
  uint32_t trigger_time; // [rsp+28h] [rbp-168h]
  uint32_t expire_time; // [rsp+2Ch] [rbp-164h]
  Json::Value_0 other; // [rsp+30h] [rbp-160h] BYREF
  char v18[304]; // [rsp+60h] [rbp-130h] BYREF

  v4 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(256LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 48 4 27 red_point_config_count:6704 64 32 12 err_msg:6702 128 96 24 db_red_point_config:6672";
  *(_QWORD *)(v4 + 16) = RequestHandler::addServerRedPointConfig;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862723] = -218959118;
  v6[536862727] = -202116109;
  DbRedPointConfig::DbRedPointConfig((DbRedPointConfig *const)(v4 + 128));
  *(_DWORD *)(v4 + 128) = 0;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v4 + 64), "content_id", &__a);
  retcode = getRequestParam<unsigned int,char const(&)[13],std::string &,char const(&)[12],std::string &,char const(&)[17],unsigned int &,char const(&)[21],unsigned int &,char const(&)[15],unsigned int &,char const(&)[13],unsigned int &>(
              request,
              (const std::string *)(v4 + 64),
              (unsigned int *)(v4 + 132),
              (std::remove_reference<char const (&)[13]>::type *)"trigger_time",
              (std::string *)(v4 + 136),
              (std::remove_reference<char const (&)[12]>::type *)"expire_time",
              (std::string *)(v4 + 168),
              (std::remove_reference<char const (&)[17]>::type *)"is_daily_refresh",
              (unsigned int *)(v4 + 200),
              (std::remove_reference<char const (&)[21]>::type *)"daily_refresh_second",
              (unsigned int *)(v4 + 204),
              (std::remove_reference<char const (&)[15]>::type *)"red_point_type",
              (unsigned int *)(v4 + 208),
              (std::remove_reference<char const (&)[13]>::type *)"player_level",
              (unsigned int *)(v4 + 212));
  std::string::~string((void *)(v4 + 64));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v7 = retcode;
  }
  else
  {
    trigger_time = common::tools::TimeUtils::getTimeByStr((const std::string *)(v4 + 136));
    expire_time = common::tools::TimeUtils::getTimeByStr((const std::string *)(v4 + 168));
    if ( trigger_time
      && expire_time
      && trigger_time < expire_time
      && *(_DWORD *)(v4 + 204) <= 0x1517Fu
      && (*(_DWORD *)(v4 + 200) || !*(_DWORD *)(v4 + 204)) )
    {
      v8 = trigger_time;
      if ( v8 > common::tools::TimeUtils::getNow() + 600 )
      {
        std::string::basic_string(v4 + 64);
        *(_DWORD *)(v4 + 48) = 0;
        retcode = MysqlOpMisc::selectRedPointConfigCount((uint32_t *)(v4 + 48), (std::string *)(v4 + 64));
        if ( (unsigned __int8)std::string::empty(v4 + 64) != 1 )
        {
          Json::Value::Value(&other, v4 + 64);
          v9 = Json::Value::operator[]((Json::Value_0 *const)jval, "err_msg");
          Json::Value::operator=(v9, &other);
          Json::Value::~Value(&other);
        }
        if ( retcode )
        {
          v7 = retcode;
        }
        else if ( *(_DWORD *)(v4 + 48) <= 0x64u )
        {
          retcode = MysqlOpMisc::insertRedPointConfigData(
                      (const DbRedPointConfig *)(v4 + 128),
                      (std::string *)(v4 + 64));
          if ( (unsigned __int8)std::string::empty(v4 + 64) != 1 )
          {
            Json::Value::Value(&other, v4 + 64);
            v10 = Json::Value::operator[]((Json::Value_0 *const)jval, "err_msg");
            Json::Value::operator=(v10, &other);
            Json::Value::~Value(&other);
          }
          v7 = retcode;
        }
        else
        {
          v7 = 2033;
        }
        std::string::~string((void *)(v4 + 64));
      }
      else
      {
        v7 = 2031;
      }
    }
    else
    {
      v7 = 1002;
    }
  }
  DbRedPointConfig::~DbRedPointConfig((DbRedPointConfig *const)(v4 + 128));
  result = v7;
  if ( v18 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6728: range 000000000CBD7C94-000000000CBD7F1F
int32_t __cdecl RequestHandler::delServerRedPointConfig(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r12
  __int64 v5; // rax
  _DWORD *v6; // r13
  int32_t v7; // r14d
  Json::Value_0 *v8; // rax
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-E5h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-E4h]
  Json::Value_0 other; // [rsp+30h] [rbp-E0h] BYREF
  char v14[176]; // [rsp+60h] [rbp-B0h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(128LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "2 48 4 7 id:6729 64 32 12 err_msg:6735";
  *(_QWORD *)(v4 + 16) = RequestHandler::delServerRedPointConfig;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862723] = -202116109;
  *(_DWORD *)(v4 + 48) = 0;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v4 + 64), "id", &__a);
  retcode = getRequestParam<unsigned int>(request, (const std::string *)(v4 + 64), (unsigned int *)(v4 + 48));
  std::string::~string((void *)(v4 + 64));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v7 = retcode;
  }
  else
  {
    std::string::basic_string(v4 + 64);
    retcode = MysqlOpMisc::deleteRedPointConfigData(*(_DWORD *)(v4 + 48), (std::string *)(v4 + 64));
    if ( (unsigned __int8)std::string::empty(v4 + 64) != 1 )
    {
      Json::Value::Value(&other, v4 + 64);
      v8 = Json::Value::operator[]((Json::Value_0 *const)jval, "err_msg");
      Json::Value::operator=(v8, &other);
      Json::Value::~Value(&other);
    }
    v7 = retcode;
    std::string::~string((void *)(v4 + 64));
  }
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF800C) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6745: range 000000000CBD7F20-000000000CBD8358
int32_t __cdecl RequestHandler::modifyServerRedPointConfig(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  int32_t v7; // r14d
  Json::Value_0 *v8; // rax
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Fh] [rbp-151h] BYREF
  int32_t retcode; // [rsp+30h] [rbp-150h]
  uint32_t trigger_time; // [rsp+34h] [rbp-14Ch]
  uint32_t expire_time; // [rsp+38h] [rbp-148h]
  uint32_t now; // [rsp+3Ch] [rbp-144h]
  Json::Value_0 other; // [rsp+40h] [rbp-140h] BYREF
  char v17[272]; // [rsp+70h] [rbp-110h] BYREF

  v4 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(224LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "2 32 32 12 err_msg:6781 96 96 24 db_red_point_config:6746";
  *(_QWORD *)(v4 + 16) = RequestHandler::modifyServerRedPointConfig;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862722] = -218959118;
  v6[536862726] = -202116109;
  DbRedPointConfig::DbRedPointConfig((DbRedPointConfig *const)(v4 + 96));
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v4 + 32), "id", &__a);
  retcode = getRequestParam<unsigned int,char const(&)[11],unsigned int &,char const(&)[13],std::string &,char const(&)[12],std::string &,char const(&)[17],unsigned int &,char const(&)[21],unsigned int &,char const(&)[15],unsigned int &,char const(&)[13],unsigned int &>(
              request,
              (const std::string *)(v4 + 32),
              (unsigned int *)(v4 + 96),
              (std::remove_reference<char const (&)[11]>::type *)"content_id",
              (unsigned int *)(v4 + 100),
              (std::remove_reference<char const (&)[13]>::type *)"trigger_time",
              (std::string *)(v4 + 104),
              (std::remove_reference<char const (&)[12]>::type *)"expire_time",
              (std::string *)(v4 + 136),
              (std::remove_reference<char const (&)[17]>::type *)"is_daily_refresh",
              (unsigned int *)(v4 + 168),
              (std::remove_reference<char const (&)[21]>::type *)"daily_refresh_second",
              (unsigned int *)(v4 + 172),
              (std::remove_reference<char const (&)[15]>::type *)"red_point_type",
              (unsigned int *)(v4 + 176),
              (std::remove_reference<char const (&)[13]>::type *)"player_level",
              (unsigned int *)(v4 + 180));
  std::string::~string((void *)(v4 + 32));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v7 = retcode;
  }
  else
  {
    trigger_time = common::tools::TimeUtils::getTimeByStr((const std::string *)(v4 + 104));
    expire_time = common::tools::TimeUtils::getTimeByStr((const std::string *)(v4 + 136));
    if ( trigger_time
      && expire_time
      && trigger_time < expire_time
      && *(_DWORD *)(v4 + 172) <= 0x1517Fu
      && (*(_DWORD *)(v4 + 168) || !*(_DWORD *)(v4 + 172)) )
    {
      now = common::tools::TimeUtils::getNow();
      if ( now > trigger_time || trigger_time > now + 600 )
      {
        if ( now > expire_time || expire_time > now + 300 )
        {
          std::string::basic_string(v4 + 32);
          retcode = MysqlOpMisc::updateRedPointConfigData((const DbRedPointConfig *)(v4 + 96), (std::string *)(v4 + 32));
          if ( (unsigned __int8)std::string::empty(v4 + 32) != 1 )
          {
            Json::Value::Value(&other, v4 + 32);
            v8 = Json::Value::operator[]((Json::Value_0 *const)jval, "err_msg");
            Json::Value::operator=(v8, &other);
            Json::Value::~Value(&other);
          }
          v7 = retcode;
          std::string::~string((void *)(v4 + 32));
        }
        else
        {
          v7 = 2032;
        }
      }
      else
      {
        v7 = 2031;
      }
    }
    else
    {
      v7 = 1002;
    }
  }
  DbRedPointConfig::~DbRedPointConfig((DbRedPointConfig *const)(v4 + 96));
  result = v7;
  if ( v17 == (char *)v4 )
  {
    *(_DWORD *)((v4 >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 6792: range 000000000CBD835A-000000000CBD866C
int32_t __cdecl RequestHandler::queryPlayerClientLanguageType(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r12
  __int64 v5; // rax
  _DWORD *v6; // r13
  int32_t v7; // r14d
  Json::Value_0 *v8; // rax
  const proto::PlayerBasicBriefData *v9; // rax
  int v10; // eax
  Json::Value_0 *v11; // rax
  int32_t result; // eax
  int32_t retcode; // [rsp+2Ch] [rbp-124h]
  std::string key; // [rsp+30h] [rbp-120h] BYREF
  Json::Value_0 other; // [rsp+50h] [rbp-100h] BYREF
  char v17[208]; // [rsp+80h] [rbp-D0h] BYREF

  v4 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(160LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 32 1 13 is_exist:6801 48 4 8 uid:6793 64 56 15 brief_data:6800";
  *(_QWORD *)(v4 + 16) = RequestHandler::queryPlayerClientLanguageType;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556927;
  v6[536862723] = -218103808;
  v6[536862724] = -202116109;
  *(_DWORD *)(v4 + 48) = 0;
  std::allocator<char>::allocator(v4 + 32);
  std::string::basic_string<std::allocator<char>>(&key, off_1A660020, (const std::allocator<char> *)(v4 + 32));
  retcode = getRequestParam<unsigned int>(request, &key, (unsigned int *)(v4 + 48));
  std::string::~string(&key);
  std::allocator<char>::~allocator(v4 + 32);
  if ( retcode )
  {
    v7 = retcode;
  }
  else
  {
    proto::PlayerBriefDataRedisData::PlayerBriefDataRedisData((proto::PlayerBriefDataRedisData *const)(v4 + 64));
    if ( RedisOpSocialData::getPlayerBriefData(
           *(_DWORD *)(v4 + 48),
           (proto::PlayerBriefDataRedisData *)(v4 + 64),
           (bool *)(v4 + 32)) )
    {
      v7 = -1;
    }
    else
    {
      Json::Value::Value((Json::Value *)&other, *(_DWORD *)(v4 + 48));
      v8 = Json::Value::operator[]((Json::Value_0 *const)jval, off_1A660020);
      Json::Value::operator=(v8, &other);
      Json::Value::~Value(&other);
      v9 = proto::PlayerBriefDataRedisData::basic_brief((const proto::PlayerBriefDataRedisData *const)(v4 + 64));
      v10 = proto::PlayerBasicBriefData::client_language_type(v9);
      Json::Value::Value((Json::Value *)&other, v10);
      v11 = Json::Value::operator[]((Json::Value_0 *const)jval, "client_language_type");
      Json::Value::operator=(v11, &other);
      Json::Value::~Value(&other);
      v7 = 0;
    }
    proto::PlayerBriefDataRedisData::~PlayerBriefDataRedisData((proto::PlayerBriefDataRedisData *const)(v4 + 64));
  }
  result = v7;
  if ( v17 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF800C) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 6813: range 000000000CBD8C78-000000000CBD8E50
int32_t __cdecl RequestHandler::setPlayerWatcherCompRecordValue(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:6814";
  *(_QWORD *)(v4 + 16) = RequestHandler::setPlayerWatcherCompRecordValue;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::setPlayerWatcherCompRecordValue(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::setPlayerWatcherCompRecordValue::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6814: range 000000000CBD866E-000000000CBD8C77
int32_t __cdecl RequestHandler::setPlayerWatcherCompRecordValue(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::setPlayerWatcherCompRecordValue::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-125h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-124h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-120h]
  proto::SetWatcherCompRecordValueOp *op; // [rsp+38h] [rbp-118h]
  std::string key; // [rsp+40h] [rbp-110h] BYREF
  char v15[240]; // [rsp+60h] [rbp-F0h] BYREF

  v3 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 48 4 8 uid:6816 64 4 24 max_critical_damage:6817 80 4 25 max_fly_map_distance:6818 96 4 17 max"
                        "_fly_time:6819 112 4 18 max_dash_time:6820 128 32 8 req:6830";
  *(_QWORD *)(v3 + 16) = RequestHandler::setPlayerWatcherCompRecordValue(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862723] = -234556924;
  v5[536862725] = -202116109;
  *(_DWORD *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 64) = 0;
  *(_DWORD *)(v3 + 80) = 0;
  *(_DWORD *)(v3 + 96) = 0;
  *(_DWORD *)(v3 + 112) = 0;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&key, off_1A660020, &__a);
  retcode = getRequestParam<unsigned int>(http_request, &key, (unsigned int *)(v3 + 48));
  std::string::~string(&key);
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 48) )
      goto LABEL_10;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 48)) )
      v7 = 0;
    else
LABEL_10:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 128));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 128));
      op = proto::OfflineMsgBin::mutable_set_watcher_comp_record_value_op(msg);
      std::allocator<char>::allocator(&__a);
      std::string::basic_string<std::allocator<char>>(&key, "max_critical_damage", &__a);
      retcode = getRequestParam<float>(http_request, &key, (float *)(v3 + 64));
      std::string::~string(&key);
      std::allocator<char>::~allocator(&__a);
      if ( !retcode )
        proto::SetWatcherCompRecordValueOp::set_max_critical_damage(op, *(float *)(v3 + 64));
      std::allocator<char>::allocator(&__a);
      std::string::basic_string<std::allocator<char>>(&key, "max_fly_map_distance", &__a);
      retcode = getRequestParam<float>(http_request, &key, (float *)(v3 + 80));
      std::string::~string(&key);
      std::allocator<char>::~allocator(&__a);
      if ( !retcode )
        proto::SetWatcherCompRecordValueOp::set_max_fly_map_distance(op, *(float *)(v3 + 80));
      std::allocator<char>::allocator(&__a);
      std::string::basic_string<std::allocator<char>>(&key, "max_fly_time", &__a);
      retcode = getRequestParam<float>(http_request, &key, (float *)(v3 + 96));
      std::string::~string(&key);
      std::allocator<char>::~allocator(&__a);
      if ( !retcode )
        proto::SetWatcherCompRecordValueOp::set_max_fly_time(op, *(float *)(v3 + 96));
      std::allocator<char>::allocator(&__a);
      std::string::basic_string<std::allocator<char>>(&key, "max_dash_time", &__a);
      retcode = getRequestParam<float>(http_request, &key, (float *)(v3 + 112));
      std::string::~string(&key);
      std::allocator<char>::~allocator(&__a);
      if ( !retcode )
        proto::SetWatcherCompRecordValueOp::set_max_dash_time(op, *(float *)(v3 + 112));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 48));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 128));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 128));
    }
  }
  result = v6;
  if ( v15 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6862: range 000000000CBD939C-000000000CBD9574
int32_t __cdecl RequestHandler::removeInvalidMapMarks(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:6863";
  *(_QWORD *)(v4 + 16) = RequestHandler::removeInvalidMapMarks;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::removeInvalidMapMarks(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::removeInvalidMapMarks::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6863: range 000000000CBD8E96-000000000CBD939A
int32_t __cdecl RequestHandler::removeInvalidMapMarks(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::removeInvalidMapMarks::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  float v8; // r14d
  proto::FloatPairBin *v9; // rax
  float v10; // r14d
  proto::FloatPairBin *v11; // rax
  int32_t result; // eax
  float second; // [rsp+4h] [rbp-18Ch]
  float seconda; // [rsp+4h] [rbp-18Ch]
  int32_t retcode; // [rsp+2Ch] [rbp-164h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-160h]
  proto::RemoveInvalidMapMarksOp *op; // [rsp+38h] [rbp-158h]
  char v19[336]; // [rsp+40h] [rbp-150h] BYREF

  v3 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(288LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "9 48 1 23 set_float_pair_bin:6890 64 4 8 uid:6865 80 4 13 scene_id:6866 96 4 10 min_x:6867 112 4"
                        " 10 max_x:6868 128 4 10 min_z:6869 144 4 10 max_z:6870 160 32 11 ticket:6871 224 32 8 req:6895";
  *(_QWORD *)(v3 + 16) = RequestHandler::removeInvalidMapMarks(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234753551;
  v5[536862722] = -234556924;
  v5[536862723] = -234556924;
  v5[536862724] = -234556924;
  v5[536862726] = -218959118;
  v5[536862728] = -202116109;
  *(_DWORD *)(v3 + 64) = 0;
  *(_DWORD *)(v3 + 80) = 0;
  *(_DWORD *)(v3 + 96) = 0;
  *(_DWORD *)(v3 + 112) = 0;
  *(_DWORD *)(v3 + 128) = 0;
  *(_DWORD *)(v3 + 144) = 0;
  std::string::basic_string(v3 + 160);
  std::allocator<char>::allocator(v3 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v3 + 224),
    off_1A660020,
    (const std::allocator<char> *)(v3 + 48));
  retcode = getRequestParam<unsigned int,char const(&)[7],std::string &,char const(&)[9],unsigned int &,char const(&)[6],float &,char const(&)[6],float &,char const(&)[6],float &,char const(&)[6],float &>(
              http_request,
              (const std::string *)(v3 + 224),
              (unsigned int *)(v3 + 64),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 160),
              (std::remove_reference<char const (&)[9]>::type *)"scene_id",
              (unsigned int *)(v3 + 80),
              (std::remove_reference<char const (&)[6]>::type *)"min_x",
              (float *)(v3 + 96),
              (std::remove_reference<char const (&)[6]>::type *)"max_x",
              (float *)(v3 + 112),
              (std::remove_reference<char const (&)[6]>::type *)"min_z",
              (float *)(v3 + 128),
              (std::remove_reference<char const (&)[6]>::type *)"max_z",
              (float *)(v3 + 144));
  std::string::~string((void *)(v3 + 224));
  std::allocator<char>::~allocator(v3 + 48);
  if ( retcode )
  {
    v6 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 160) )
  {
    v6 = 2012;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 64) )
      goto LABEL_12;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 64)) )
      v7 = 0;
    else
LABEL_12:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else if ( *(float *)(v3 + 96) < *(float *)(v3 + 112) && *(float *)(v3 + 128) < *(float *)(v3 + 144) )
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 224));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 224));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 160));
      op = proto::OfflineMsgBin::mutable_remove_invalid_map_marks_op(msg);
      proto::RemoveInvalidMapMarksOp::set_scene_id(op, *(_DWORD *)(v3 + 80));
      second = *(float *)(v3 + 112);
      v8 = *(float *)(v3 + 96);
      v9 = proto::RemoveInvalidMapMarksOp::mutable_x_range(op);
      RequestHandler::removeInvalidMapMarks(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator() const(common::minet::http_client::HttpRequest const&,common::minet::Packet &)::{lambda(proto::FloatPairBin &,float,float)#1}::operator()(
        (const RequestHandler::removeInvalidMapMarks::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)>::operator()::<lambda(proto::FloatPairBin&, float, float)> *const)(v3 + 48),
        v9,
        v8,
        second);
      seconda = *(float *)(v3 + 144);
      v10 = *(float *)(v3 + 128);
      v11 = proto::RemoveInvalidMapMarksOp::mutable_z_range(op);
      RequestHandler::removeInvalidMapMarks(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator() const(common::minet::http_client::HttpRequest const&,common::minet::Packet &)::{lambda(proto::FloatPairBin &,float,float)#1}::operator()(
        (const RequestHandler::removeInvalidMapMarks::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)>::operator()::<lambda(proto::FloatPairBin&, float, float)> *const)(v3 + 48),
        v11,
        v10,
        seconda);
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 64));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 224));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 224));
    }
    else
    {
      v6 = 2035;
    }
  }
  std::string::~string((void *)(v3 + 160));
  result = v6;
  if ( v19 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 6890: range 000000000CBD8E52-000000000CBD8E94
void __cdecl RequestHandler::removeInvalidMapMarks(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator() const(common::minet::http_client::HttpRequest const&,common::minet::Packet &)::{lambda(proto::FloatPairBin &,float,float)#1}::operator()(
        const RequestHandler::removeInvalidMapMarks::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)>::operator()::<lambda(proto::FloatPairBin&, float, float)> *const __closure,
        proto::FloatPairBin *float_pair_bin,
        float first,
        float second)
{
  proto::FloatPairBin::set_first(float_pair_bin, first);
  proto::FloatPairBin::set_second(float_pair_bin, second);
};

// Line 6911: range 000000000CBD9900-000000000CBD9AD8
int32_t __cdecl RequestHandler::recalculateAreaExplorePoint(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:6912";
  *(_QWORD *)(v4 + 16) = RequestHandler::recalculateAreaExplorePoint;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::recalculateAreaExplorePoint(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::recalculateAreaExplorePoint::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6912: range 000000000CBD9576-000000000CBD98FF
int32_t __cdecl RequestHandler::recalculateAreaExplorePoint(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::recalculateAreaExplorePoint::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-105h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-104h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-100h]
  proto::RecalculateAreaExplorePointOp *op; // [rsp+38h] [rbp-F8h]
  char v14[240]; // [rsp+40h] [rbp-F0h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 4 8 uid:6914 48 4 12 area_id:6915 64 32 11 ticket:6916 128 32 8 req:6930";
  *(_QWORD *)(v3 + 16) = RequestHandler::recalculateAreaExplorePoint(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862723] = -218959118;
  v5[536862725] = -202116109;
  *(_DWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  std::string::basic_string(v3 + 64);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 128), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[7],std::string &,char const(&)[8],unsigned int &>(
              http_request,
              (const std::string *)(v3 + 128),
              (unsigned int *)(v3 + 32),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 64),
              (std::remove_reference<char const (&)[8]>::type *)"area_id",
              (unsigned int *)(v3 + 48));
  std::string::~string((void *)(v3 + 128));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 64) )
  {
    v6 = 2012;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 32) )
      goto LABEL_12;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 32)) )
      v7 = 0;
    else
LABEL_12:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 128));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 128));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 64));
      op = proto::OfflineMsgBin::mutable_recalculate_area_explore_point_op(msg);
      proto::RecalculateAreaExplorePointOp::set_area_id(op, *(_DWORD *)(v3 + 48));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 32));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 128));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 128));
    }
  }
  std::string::~string((void *)(v3 + 64));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6944: range 000000000CBD9ADA-000000000CBDA3A3
int32_t __cdecl RequestHandler::queryCustomDungeonBin(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  int32_t v7; // r14d
  common::milog::MiLogStream *v8; // rax
  google::protobuf::uint64 v9; // rax
  google::protobuf::uint32 v10; // eax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  google::protobuf::RepeatedPtrField<proto::CustomDungeonRoomRedisData> *v14; // r14
  google::protobuf::RepeatedPtrField<proto::CustomDungeonRoomRedisData> *v15; // rax
  proto::CustomDungeonSettingBin *v16; // r14
  proto::CustomDungeonSettingBin *v17; // rax
  Json::Value *v18; // rax
  google::protobuf::uint32 publish_time; // eax
  Json::Value_0 *v20; // rax
  int32_t result; // eax
  int p_yielda; // [rsp+0h] [rbp-410h]
  Json::Value *jvalb; // [rsp+8h] [rbp-408h]
  int v25; // [rsp+20h] [rbp-3F0h]
  int32_t retcode; // [rsp+24h] [rbp-3ECh]
  int32_t retcodea; // [rsp+24h] [rbp-3ECh]
  proto::CustomDungeonContent *content_ptr; // [rsp+28h] [rbp-3E8h]
  std::string key; // [rsp+30h] [rbp-3E0h] BYREF
  Json::Value_0 other; // [rsp+50h] [rbp-3C0h] BYREF
  char v31[912]; // [rsp+80h] [rbp-390h] BYREF

  p_yielda = (int)p_yield;
  v4 = (unsigned __int64)v31;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_4(864LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "9 32 1 13 is_exist:6951 48 4 12 options:6981 64 8 17 dungeon_guid:6945 96 32 16 json_string:6985"
                        " 160 40 15 json_value:6980 240 40 15 status_ret:6986 320 64 15 redis_data:6952 416 80 19 custom_"
                        "dungeon:6964 528 272 16 json_reader:6993";
  *(_QWORD *)(v4 + 16) = RequestHandler::queryCustomDungeonBin;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556927;
  v6[536862722] = -218959360;
  v6[536862724] = -218959118;
  v6[536862726] = -218959360;
  v6[536862727] = 62194;
  v6[536862728] = -234881024;
  v6[536862729] = -218959118;
  v6[536862732] = -218959118;
  v6[536862735] = -219021312;
  v6[536862736] = 62194;
  v6[536862745] = -202116109;
  v6[536862746] = -202116109;
  *(_QWORD *)(v4 + 64) = 0LL;
  std::allocator<char>::allocator(v4 + 32);
  std::string::basic_string<std::allocator<char>>(&key, "dungeon_guid", (const std::allocator<char> *)(v4 + 32));
  retcode = getRequestParam<unsigned long>(request, &key, (unsigned __int64 *)(v4 + 64));
  std::string::~string(&key);
  std::allocator<char>::~allocator(v4 + 32);
  if ( retcode )
  {
    v7 = retcode;
  }
  else
  {
    *(_BYTE *)(v4 + 32) = 0;
    proto::CustomDungeonRedisData::CustomDungeonRedisData((proto::CustomDungeonRedisData *const)(v4 + 320));
    retcodea = RedisOpActivity::getCustomDungeon(
                 *(_QWORD *)(v4 + 64),
                 (proto::CustomDungeonRedisData *)(v4 + 320),
                 (bool *)(v4 + 32));
    if ( retcodea )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "queryCustomDungeonBin",
        6956);
      v8 = common::milog::MiLogStream::operator<<<char [58],(char *[58])0>(
             (common::milog::MiLogStream *const)&key,
             (const char (*)[58])"[CustomDungeon] get data from redis failed, dungeon_guid:");
      common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v8, (const unsigned __int64 *)(v4 + 64));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      v7 = retcodea;
    }
    else if ( *(_BYTE *)(v4 + 32) != 1 )
    {
      v7 = 2001;
    }
    else
    {
      proto::ServerCustomDungeon::ServerCustomDungeon((proto::ServerCustomDungeon *const)(v4 + 416));
      v9 = proto::CustomDungeonRedisData::dungeon_guid((const proto::CustomDungeonRedisData *const)(v4 + 320));
      proto::ServerCustomDungeon::set_dungeon_guid((proto::ServerCustomDungeon *const)(v4 + 416), v9);
      v10 = proto::CustomDungeonRedisData::dungeon_id((const proto::CustomDungeonRedisData *const)(v4 + 320));
      proto::ServerCustomDungeon::set_dungeon_id((proto::ServerCustomDungeon *const)(v4 + 416), v10);
      content_ptr = proto::CustomDungeonRedisData::mutable_edit_content((proto::CustomDungeonRedisData *const)(v4 + 320));
      if ( proto::CustomDungeonRedisData::first_publish_time((const proto::CustomDungeonRedisData *const)(v4 + 320))
        || proto::CustomDungeonRedisData::is_no_change_after_publish((const proto::CustomDungeonRedisData *const)(v4 + 320)) )
      {
        content_ptr = proto::CustomDungeonRedisData::mutable_publish_content((proto::CustomDungeonRedisData *const)(v4 + 320));
      }
      if ( content_ptr )
      {
        v14 = proto::ServerCustomDungeon::mutable_room_list((proto::ServerCustomDungeon *const)(v4 + 416));
        v15 = proto::CustomDungeonContent::mutable_room_list(content_ptr);
        google::protobuf::RepeatedPtrField<proto::CustomDungeonRoomRedisData>::Swap(v14, v15);
        v16 = proto::ServerCustomDungeon::mutable_setting((proto::ServerCustomDungeon *const)(v4 + 416));
        v17 = proto::CustomDungeonContent::mutable_setting(content_ptr);
        proto::CustomDungeonSettingBin::Swap(v16, v17);
        Json::Value::Value(v4 + 160, 0LL);
        google::protobuf::util::JsonPrintOptions::JsonPrintOptions((google::protobuf::util::JsonPrintOptions *const)(v4 + 48));
        *(_BYTE *)(v4 + 48) = 1;
        *(_BYTE *)(v4 + 49) = 1;
        *(_BYTE *)(v4 + 51) = 1;
        std::string::basic_string(v4 + 96);
        google::protobuf::util::MessageToJsonString(
          (google::protobuf::util::Status *)(v4 + 240),
          (google::protobuf::Message *)(v4 + 416),
          p_yielda,
          jval,
          (int)request,
          (char)this,
          v25,
          content_ptr);
        if ( !google::protobuf::util::Status::ok((const google::protobuf::util::Status *const)(v4 + 240)) )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&key,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/handler/request_handler.api.hpp",
            "queryCustomDungeonBin",
            6989);
          common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
            (common::milog::MiLogStream *const)&key,
            (const char (*)[28])"proto to json_string failed");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
          v7 = -1;
        }
        else
        {
          Json::Reader::Reader((Json::Reader *)(v4 + 528));
          if ( !Json::Reader::parse(
                  (Json::Reader *const)(v4 + 528),
                  (const std::string *)(v4 + 96),
                  (Json::Value *)(v4 + 160),
                  1) )
          {
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)&key,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/handler/request_handler.api.hpp",
              "queryCustomDungeonBin",
              6996);
            common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
              (common::milog::MiLogStream *const)&key,
              (const char (*)[33])"json_string to json_value failed");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
            v7 = -1;
          }
          else
          {
            v18 = (Json::Value *)Json::Value::operator[]((Json::Value_0 *const)jvalb, "custom_dungeon");
            Json::Value::operator=(v18);
            publish_time = proto::CustomDungeonRedisData::first_publish_time((const proto::CustomDungeonRedisData *const)(v4 + 320));
            Json::Value::Value((Json::Value *)&other, publish_time != 0);
            v20 = Json::Value::operator[]((Json::Value_0 *const)jvalb, "is_published");
            Json::Value::operator=(v20, &other);
            Json::Value::~Value(&other);
            v7 = 0;
          }
          Json::Reader::~Reader((Json::Reader *const)(v4 + 528));
        }
        google::protobuf::util::Status::~Status((google::protobuf::util::Status *const)(v4 + 240));
        std::string::~string((void *)(v4 + 96));
        Json::Value::~Value((Json::Value_0 *const)(v4 + 160));
      }
      else
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&key,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/handler/request_handler.api.hpp",
          "queryCustomDungeonBin",
          6974);
        v12 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                (common::milog::MiLogStream *const)&key,
                (const char (*)[14])"dungeon_guid:");
        v13 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                v12,
                (const unsigned __int64 *)(v4 + 64));
        common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v13, (const char (*)[12])" no content");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
        v7 = -1;
      }
      proto::ServerCustomDungeon::~ServerCustomDungeon((proto::ServerCustomDungeon *const)(v4 + 416));
    }
    proto::CustomDungeonRedisData::~CustomDungeonRedisData((proto::CustomDungeonRedisData *const)(v4 + 320));
  }
  result = v7;
  if ( v31 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8030) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF803C) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8064) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8060) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8068) = -168430091;
  }
  return result;
};

// Line 7007: range 000000000CBDA3A4-000000000CBDAE9A
int32_t __cdecl RequestHandler::queryCustomDungeonAdventure(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  int32_t v7; // r14d
  common::milog::MiLogStream *v8; // rax
  google::protobuf::uint64 v9; // rax
  google::protobuf::uint32 v10; // eax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  google::protobuf::RepeatedPtrField<proto::CustomDungeonRoomRedisData> *v14; // rax
  proto::CustomDungeonSettingBin *v15; // rax
  bool v16; // r14
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  const proto::CustomDungeonBriefRedisData *v19; // r14
  proto::CustomDungeonBriefRedisData *v20; // rax
  Json::Value *v21; // rax
  int32_t result; // eax
  char *v23; // [rsp+0h] [rbp-450h]
  google::protobuf::RepeatedPtrField<proto::CustomDungeonRoomRedisData> *v24; // [rsp+8h] [rbp-448h]
  proto::CustomDungeonSettingBin *v25; // [rsp+8h] [rbp-448h]
  int p_yielda; // [rsp+10h] [rbp-440h]
  char jvala; // [rsp+18h] [rbp-438h]
  Json::Value *jvalb; // [rsp+18h] [rbp-438h]
  std::less<long unsigned int> __comp; // [rsp+32h] [rbp-41Eh] BYREF
  std::allocator<char> __a; // [rsp+33h] [rbp-41Dh] BYREF
  int32_t retcode; // [rsp+34h] [rbp-41Ch]
  std::initializer_list<long unsigned int> __l; // [rsp+38h] [rbp-418h] BYREF
  proto::ServerCustomDungeon *custom_dungeon; // [rsp+48h] [rbp-408h]
  std::string key; // [rsp+50h] [rbp-400h] BYREF
  std::set<long unsigned int> dungeon_guid_set; // [rsp+70h] [rbp-3E0h] BYREF
  char v36[944]; // [rsp+A0h] [rbp-3B0h] BYREF

  jvala = (char)jval;
  p_yielda = (int)p_yield;
  v4 = (unsigned __int64)v36;
  v23 = v36;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_4(896LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "10 32 1 13 is_exist:7014 48 4 12 options:7059 64 8 17 dungeon_guid:7008 96 24 14 brief_vec:7045 "
                        "160 32 16 json_string:7063 224 40 20 proto_adventure:7027 304 40 15 json_value:7058 384 40 15 st"
                        "atus_ret:7064 464 64 15 redis_data:7015 560 272 16 json_reader:7071";
  *(_QWORD *)(v4 + 16) = RequestHandler::queryCustomDungeonAdventure;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556927;
  v6[536862722] = -218959360;
  v6[536862723] = -234881024;
  v6[536862724] = -218959118;
  v6[536862726] = -218959118;
  v6[536862728] = -218959360;
  v6[536862729] = 62194;
  v6[536862730] = -234881024;
  v6[536862731] = -218959118;
  v6[536862733] = -218959360;
  v6[536862734] = 62194;
  v6[536862736] = -219021312;
  v6[536862737] = 62194;
  v6[536862746] = -202116109;
  v6[536862747] = -202116109;
  *(_QWORD *)(v4 + 64) = 0LL;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&key, "dungeon_guid", &__a);
  retcode = getRequestParam<unsigned long>(request, &key, (unsigned __int64 *)(v4 + 64));
  std::string::~string(&key);
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v7 = retcode;
  }
  else
  {
    *(_BYTE *)(v4 + 32) = 0;
    proto::CustomDungeonRedisData::CustomDungeonRedisData((proto::CustomDungeonRedisData *const)(v4 + 464));
    retcode = RedisOpActivity::getCustomDungeon(
                *(_QWORD *)(v4 + 64),
                (proto::CustomDungeonRedisData *)(v4 + 464),
                (bool *)(v4 + 32));
    if ( retcode )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "queryCustomDungeonAdventure",
        7019);
      v8 = common::milog::MiLogStream::operator<<<char [58],(char *[58])0>(
             (common::milog::MiLogStream *const)&key,
             (const char (*)[58])"[CustomDungeon] get data from redis failed, dungeon_guid:");
      common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v8, (const unsigned __int64 *)(v4 + 64));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      v7 = retcode;
    }
    else if ( *(_BYTE *)(v4 + 32) != 1 )
    {
      v7 = 2001;
    }
    else
    {
      proto::CustomDungeonAdventure::CustomDungeonAdventure((proto::CustomDungeonAdventure *const)(v4 + 224));
      custom_dungeon = proto::CustomDungeonAdventure::mutable_custom_dungeon((proto::CustomDungeonAdventure *const)(v4 + 224));
      v9 = proto::CustomDungeonRedisData::dungeon_guid((const proto::CustomDungeonRedisData *const)(v4 + 464));
      proto::ServerCustomDungeon::set_dungeon_guid(custom_dungeon, v9);
      v10 = proto::CustomDungeonRedisData::dungeon_id((const proto::CustomDungeonRedisData *const)(v4 + 464));
      proto::ServerCustomDungeon::set_dungeon_id(custom_dungeon, v10);
      __l._M_len = (std::initializer_list<long unsigned int>::size_type)proto::CustomDungeonRedisData::mutable_edit_content((proto::CustomDungeonRedisData *const)(v4 + 464));
      if ( proto::CustomDungeonRedisData::first_publish_time((const proto::CustomDungeonRedisData *const)(v4 + 464))
        || proto::CustomDungeonRedisData::is_no_change_after_publish((const proto::CustomDungeonRedisData *const)(v4 + 464)) )
      {
        __l._M_len = (std::initializer_list<long unsigned int>::size_type)proto::CustomDungeonRedisData::mutable_publish_content((proto::CustomDungeonRedisData *const)(v4 + 464));
      }
      if ( __l._M_len )
      {
        v24 = proto::ServerCustomDungeon::mutable_room_list(custom_dungeon);
        v14 = proto::CustomDungeonContent::mutable_room_list((proto::CustomDungeonContent *const)__l._M_len);
        google::protobuf::RepeatedPtrField<proto::CustomDungeonRoomRedisData>::Swap(v24, v14);
        v25 = proto::ServerCustomDungeon::mutable_setting(custom_dungeon);
        v15 = proto::CustomDungeonContent::mutable_setting((proto::CustomDungeonContent *const)__l._M_len);
        proto::CustomDungeonSettingBin::Swap(v25, v15);
        std::vector<proto::CustomDungeonBriefRedisData>::vector((std::vector<proto::CustomDungeonBriefRedisData> *const)(v4 + 96));
        __l._M_array = *(std::initializer_list<long unsigned int>::iterator *)(v4 + 64);
        std::allocator<unsigned long>::allocator((std::allocator<long unsigned int> *const)&__a);
        std::set<unsigned long>::set(
          &dungeon_guid_set,
          (std::initializer_list<long unsigned int>)__PAIR128__(1LL, &__l),
          &__comp,
          (const std::set<long unsigned int>::allocator_type *)&__a);
        v16 = RedisOpActivity::getCustomDungeonBrief(
                &dungeon_guid_set,
                (std::vector<proto::CustomDungeonBriefRedisData> *)(v4 + 96)) != 0;
        std::set<unsigned long>::~set(&dungeon_guid_set);
        std::allocator<unsigned long>::~allocator((std::allocator<long unsigned int> *const)&__a);
        if ( v16 )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&key,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/handler/request_handler.api.hpp",
            "queryCustomDungeonAdventure",
            7048);
          common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
            (common::milog::MiLogStream *const)&key,
            (const char (*)[25])"get dungeon brief failed");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
          v7 = -1;
        }
        else if ( std::vector<proto::CustomDungeonBriefRedisData>::empty((const std::vector<proto::CustomDungeonBriefRedisData> *const)(v4 + 96)) )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&key,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/handler/request_handler.api.hpp",
            "queryCustomDungeonAdventure",
            7053);
          v17 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                  (common::milog::MiLogStream *const)&key,
                  (const char (*)[14])"dungeon_guid:");
          v18 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                  v17,
                  (const unsigned __int64 *)(v4 + 64));
          common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v18, (const char (*)[15])" no brief data");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
          v7 = -1;
        }
        else
        {
          v19 = std::vector<proto::CustomDungeonBriefRedisData>::operator[](
                  (std::vector<proto::CustomDungeonBriefRedisData> *const)(v4 + 96),
                  0LL);
          v20 = proto::CustomDungeonAdventure::mutable_dungeon_brief((proto::CustomDungeonAdventure *const)(v4 + 224));
          proto::CustomDungeonBriefRedisData::operator=(v20, v19);
          Json::Value::Value(v4 + 304, 0LL);
          google::protobuf::util::JsonPrintOptions::JsonPrintOptions((google::protobuf::util::JsonPrintOptions *const)(v4 + 48));
          *(_BYTE *)(v4 + 48) = 1;
          *(_BYTE *)(v4 + 49) = 1;
          *(_BYTE *)(v4 + 51) = 1;
          std::string::basic_string(v4 + 160);
          google::protobuf::util::MessageToJsonString(
            (google::protobuf::util::Status *)(v4 + 384),
            (google::protobuf::Message *)(v4 + 224),
            (int)v36,
            v25,
            p_yielda,
            jvala,
            (int)request,
            this);
          if ( !google::protobuf::util::Status::ok((const google::protobuf::util::Status *const)(v4 + 384)) )
          {
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)&key,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/handler/request_handler.api.hpp",
              "queryCustomDungeonAdventure",
              7067);
            common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
              (common::milog::MiLogStream *const)&key,
              (const char (*)[28])"proto to json_string failed");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
            v7 = -1;
          }
          else
          {
            Json::Reader::Reader((Json::Reader *)(v4 + 560));
            if ( !Json::Reader::parse(
                    (Json::Reader *const)(v4 + 560),
                    (const std::string *)(v4 + 160),
                    (Json::Value *)(v4 + 304),
                    1) )
            {
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)&key,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/handler/request_handler.api.hpp",
                "queryCustomDungeonAdventure",
                7074);
              common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                (common::milog::MiLogStream *const)&key,
                (const char (*)[33])"json_string to json_value failed");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
              v7 = -1;
            }
            else
            {
              v21 = (Json::Value *)Json::Value::operator[]((Json::Value_0 *const)jvalb, "custom_dungeon_adventure");
              Json::Value::operator=(v21);
              v7 = 0;
            }
            Json::Reader::~Reader((Json::Reader *const)(v4 + 560));
          }
          google::protobuf::util::Status::~Status((google::protobuf::util::Status *const)(v4 + 384));
          std::string::~string((void *)(v4 + 160));
          Json::Value::~Value((Json::Value_0 *const)(v4 + 304));
        }
        std::vector<proto::CustomDungeonBriefRedisData>::~vector((std::vector<proto::CustomDungeonBriefRedisData> *const)(v4 + 96));
      }
      else
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&key,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/handler/request_handler.api.hpp",
          "queryCustomDungeonAdventure",
          7038);
        v12 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                (common::milog::MiLogStream *const)&key,
                (const char (*)[14])"dungeon_guid:");
        v13 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                v12,
                (const unsigned __int64 *)(v4 + 64));
        common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(v13, (const char (*)[12])" no content");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
        v7 = -1;
      }
      proto::CustomDungeonAdventure::~CustomDungeonAdventure((proto::CustomDungeonAdventure *const)(v4 + 224));
    }
    proto::CustomDungeonRedisData::~CustomDungeonRedisData((proto::CustomDungeonRedisData *const)(v4 + 464));
  }
  result = v7;
  if ( v23 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8034) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8040) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8068) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8060) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8068) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7084: range 000000000CBDB278-000000000CBDBFEE
int32_t __cdecl RequestHandler::banPlayerCustomDungeon(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  int32_t v7; // r14d
  common::milog::MiLogStream *v8; // rax
  const proto::CustomDungeonAbstractBin *v9; // rax
  unsigned __int64 v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  int32_t retcode; // [rsp+20h] [rbp-6A0h]
  uint32_t expire_time; // [rsp+24h] [rbp-69Ch]
  int32_t ret; // [rsp+28h] [rbp-698h]
  google::protobuf::uint32 group_id; // [rsp+2Ch] [rbp-694h]
  std::set<long unsigned int>::iterator __for_begin; // [rsp+30h] [rbp-690h] BYREF
  std::set<long unsigned int>::iterator __for_end; // [rsp+38h] [rbp-688h] BYREF
  const proto::PlayerCustomDungeonCompBin *custom_dungeon_bin; // [rsp+40h] [rbp-680h]
  const google::protobuf::RepeatedPtrField<proto::CustomDungeonBriefBin> *__for_range; // [rsp+48h] [rbp-678h]
  std::set<long unsigned int> *__for_range_0; // [rsp+50h] [rbp-670h]
  const proto::CustomDungeonBriefBin *custom_dungeon; // [rsp+58h] [rbp-668h]
  common::milog::MiLogStream v31; // [rsp+60h] [rbp-660h] BYREF
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+80h] [rbp-640h] BYREF
  std::string key; // [rsp+A0h] [rbp-620h] BYREF
  RequestHandler::banPlayerCustomDungeon::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> p___f; // [rsp+C0h] [rbp-600h] BYREF
  char v35[1488]; // [rsp+F0h] [rbp-5D0h] BYREF

  v4 = (unsigned __int64)v35;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_5(1440LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "12 48 1 13 is_exist:7122 64 1 13 is_exist:7168 80 4 8 uid:7085 96 4 13 ban_time:7086 112 8 17 du"
                        "ngeon_guid:7153 144 32 11 ticket:7087 208 32 13 bin_data:7128 272 48 18 make_req_func:7097 352 4"
                        "8 21 dungeon_guid_set:7142 432 64 15 redis_data:7167 528 192 20 player_data_row:7123 784 520 20 "
                        "player_data_bin:7134";
  *(_QWORD *)(v4 + 16) = RequestHandler::banPlayerCustomDungeon;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234753551;
  v6[536862722] = -234556927;
  v6[536862723] = 61956;
  v6[536862723] = -234881024;
  v6[536862724] = 62194;
  v6[536862725] = -219021312;
  v6[536862726] = 62194;
  v6[536862727] = -219021312;
  v6[536862728] = 62194;
  v6[536862730] = -218959118;
  v6[536862732] = -219021312;
  v6[536862733] = 62194;
  v6[536862735] = -219021312;
  v6[536862736] = 62194;
  v6[536862742] = -219021312;
  v6[536862743] = -218959118;
  v6[536862744] = 62194;
  v6[536862760] = -218103808;
  v6[536862761] = -202116109;
  v6[536862762] = -202116109;
  v6[536862763] = -202116109;
  v6[536862764] = -202116109;
  *(_DWORD *)(v4 + 80) = 0;
  *(_DWORD *)(v4 + 96) = 0;
  std::string::basic_string(v4 + 144);
  std::allocator<char>::allocator(v4 + 64);
  std::string::basic_string<std::allocator<char>>(&key, off_1A660020, (const std::allocator<char> *)(v4 + 64));
  retcode = getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[7],std::string &>(
              request,
              &key,
              (unsigned int *)(v4 + 80),
              (std::remove_reference<char const (&)[9]>::type *)"ban_time",
              (unsigned int *)(v4 + 96),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v4 + 144));
  std::string::~string(&key);
  std::allocator<char>::~allocator(v4 + 64);
  if ( retcode )
  {
    v7 = retcode;
  }
  else
  {
    expire_time = common::tools::TimeUtils::getNow() + *(_DWORD *)(v4 + 96);
    *(_QWORD *)(v4 + 272) = this;
    *(_DWORD *)(v4 + 280) = *(_DWORD *)(v4 + 80);
    *(_DWORD *)(v4 + 284) = expire_time;
    std::string::basic_string(v4 + 288, v4 + 144);
    boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
      (boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > *const)(v4 + 352),
      p_yield);
    std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
      (std::function<int(common::minet::Packet&,Json::Value&)> *const)&key,
      (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
    RequestHandler::banPlayerCustomDungeon(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::Packet(
      &p___f,
      (const RequestHandler::banPlayerCustomDungeon::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 272));
    std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::banPlayerCustomDungeon(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
      &p_make_req,
      &p___f);
    ret = RequestHandler::processRequestOnOtherServer(
            this,
            &p_make_req,
            (RequestHandler::MakeRspFunc *)&key,
            request,
            jval,
            (boost::asio::yield_context *)(v4 + 352));
    std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
    RequestHandler::banPlayerCustomDungeon(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::~Packet(&p___f);
    std::function<int ()(common::minet::Packet &,Json::Value &)>::~function((std::function<int(common::minet::Packet&,Json::Value&)> *const)&key);
    boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context((boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > *const)(v4 + 352));
    if ( ret )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "banPlayerCustomDungeon",
        7113);
      v8 = common::milog::MiLogStream::operator<<<char [53],(char *[53])0>(
             (common::milog::MiLogStream *const)&key,
             (const char (*)[53])"ban custom dugneon request other server failed, uid:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v4 + 80));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      v7 = ret;
    }
    else if ( *(_DWORD *)(v4 + 96) )
    {
      *(_BYTE *)(v4 + 48) = 0;
      TablePlayerData::TablePlayerData((TablePlayerData *const)(v4 + 528));
      if ( MysqlOpPlayerData::selectPlayerDataByUid(
             *(_DWORD *)(v4 + 80),
             (TablePlayerData *)(v4 + 528),
             (bool *)(v4 + 48)) )
      {
        v7 = 2;
      }
      else
      {
        std::string::basic_string(v4 + 208);
        mysqlpp::String::to_string((const mysqlpp::String *const)(v4 + 616), (std::string *)(v4 + 208));
        if ( common::tools::ZlibUtil::isCompressWithPad((const std::string *)(v4 + 208)) )
        {
          common::tools::ZlibUtil::uncompressWithPad(&key, (const std::string *)(v4 + 208));
          std::string::operator=(v4 + 208, &key);
          std::string::~string(&key);
        }
        proto::PlayerDataBin::PlayerDataBin((proto::PlayerDataBin *const)(v4 + 784));
        if ( (unsigned __int8)google::protobuf::MessageLite::ParseFromString(v4 + 784, v4 + 208) != 1 )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&key,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/handler/request_handler.api.hpp",
            "banPlayerCustomDungeon",
            7137);
          common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
            (common::milog::MiLogStream *const)&key,
            (const char (*)[39])"player_data_bin ParseFromString failed");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
          v7 = 2;
        }
        else
        {
          custom_dungeon_bin = proto::PlayerDataBin::custom_dungeon_bin((const proto::PlayerDataBin *const)(v4 + 784));
          std::set<unsigned long>::set((std::set<long unsigned int> *const)(v4 + 352));
          __for_range = proto::PlayerCustomDungeonCompBin::brief_list(custom_dungeon_bin);
          *(google::protobuf::RepeatedPtrField<proto::CustomDungeonBriefBin>::const_iterator *)(v4 + 112) = google::protobuf::RepeatedPtrField<proto::CustomDungeonBriefBin>::begin(__for_range);
          __for_begin._M_node = (std::_Rb_tree_const_iterator<long unsigned int>::_Base_ptr)google::protobuf::RepeatedPtrField<proto::CustomDungeonBriefBin>::end(__for_range).it_;
          while ( google::protobuf::internal::RepeatedPtrIterator<proto::CustomDungeonBriefBin const>::operator!=(
                    (const google::protobuf::internal::RepeatedPtrIterator<const proto::CustomDungeonBriefBin> *const)(v4 + 112),
                    (const google::protobuf::internal::RepeatedPtrIterator<const proto::CustomDungeonBriefBin>::iterator *)&__for_begin) )
          {
            custom_dungeon = google::protobuf::internal::RepeatedPtrIterator<proto::CustomDungeonBriefBin const>::operator*((const google::protobuf::internal::RepeatedPtrIterator<const proto::CustomDungeonBriefBin> *const)(v4 + 112));
            v9 = proto::CustomDungeonBriefBin::abstract(custom_dungeon);
            if ( proto::CustomDungeonAbstractBin::first_publish_time(v9) )
            {
              __for_end._M_node = (std::_Rb_tree_const_iterator<long unsigned int>::_Base_ptr)proto::CustomDungeonBriefBin::dungeon_guid(custom_dungeon);
              std::set<unsigned long>::insert(
                (std::set<long unsigned int> *const)(v4 + 352),
                (std::set<long unsigned int>::value_type *)&__for_end);
            }
            google::protobuf::internal::RepeatedPtrIterator<proto::CustomDungeonBriefBin const>::operator++((google::protobuf::internal::RepeatedPtrIterator<const proto::CustomDungeonBriefBin> *const)(v4 + 112));
          }
          group_id = proto::PlayerCustomDungeonCompBin::group_id(custom_dungeon_bin);
          __for_range_0 = (std::set<long unsigned int> *)(v4 + 352);
          __for_begin._M_node = std::set<unsigned long>::begin((const std::set<long unsigned int> *const)(v4 + 352))._M_node;
          __for_end._M_node = std::set<unsigned long>::end(__for_range_0)._M_node;
          while ( std::operator!=(&__for_begin, &__for_end) )
          {
            v10 = (unsigned __int64)std::_Rb_tree_const_iterator<unsigned long>::operator*(&__for_begin);
            if ( *(_BYTE *)((v10 >> 3) + 0x7FFF8000) )
              v10 = __asan_report_load8(v10);
            *(_QWORD *)(v4 + 112) = *(_QWORD *)v10;
            if ( RedisOpActivity::removeCustomDungeonRecommend<proto::CustomDungeonNewRecommendRedisData>(
                   group_id,
                   *(_QWORD *)(v4 + 112)) )
            {
              common::milog::MiLogStream::create(
                &v31,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/handler/request_handler.api.hpp",
                "banPlayerCustomDungeon",
                7157);
              v11 = common::milog::MiLogStream::operator<<<char [55],(char *[55])0>(
                      &v31,
                      (const char (*)[55])"del new recommend custom dungeon failed, dungeon_guid:");
              common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                v11,
                (const unsigned __int64 *)(v4 + 112));
              common::milog::MiLogStream::~MiLogStream(&v31);
            }
            if ( RedisOpActivity::removeCustomDungeonRecommend<proto::CustomDungeonOldRecommendRedisData>(
                   group_id,
                   *(_QWORD *)(v4 + 112)) )
            {
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)&p_make_req,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/handler/request_handler.api.hpp",
                "banPlayerCustomDungeon",
                7161);
              v12 = common::milog::MiLogStream::operator<<<char [55],(char *[55])0>(
                      (common::milog::MiLogStream *const)&p_make_req,
                      (const char (*)[55])"del old recommend custom dungeon failed, dungeon_guid:");
              common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                v12,
                (const unsigned __int64 *)(v4 + 112));
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&p_make_req);
            }
            if ( RedisOpActivity::removeCustomDungeonBrief(*(_QWORD *)(v4 + 112)) )
            {
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)&key,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/handler/request_handler.api.hpp",
                "banPlayerCustomDungeon",
                7165);
              v13 = common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
                      (common::milog::MiLogStream *const)&key,
                      (const char (*)[47])"del brief custom dungeon failed, dungeon_guid:");
              common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                v13,
                (const unsigned __int64 *)(v4 + 112));
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
            }
            proto::CustomDungeonRedisData::CustomDungeonRedisData((proto::CustomDungeonRedisData *const)(v4 + 432));
            *(_BYTE *)(v4 + 64) = 0;
            if ( !RedisOpActivity::getCustomDungeon(
                    *(_QWORD *)(v4 + 112),
                    (proto::CustomDungeonRedisData *)(v4 + 432),
                    (bool *)(v4 + 64))
              && *(_BYTE *)(v4 + 64) == 1 )
            {
              proto::CustomDungeonRedisData::set_first_publish_time((proto::CustomDungeonRedisData *const)(v4 + 432), 0);
              if ( RedisOpActivity::updateCustomDungeon((const proto::CustomDungeonRedisData *)(v4 + 432), 0x4F1A00u) )
              {
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)&key,
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/handler/request_handler.api.hpp",
                  "banPlayerCustomDungeon",
                  7180);
                v14 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
                        (common::milog::MiLogStream *const)&key,
                        (const char (*)[44])"update custom dungeon failed, dungeon_guid:");
                common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                  v14,
                  (const unsigned __int64 *)(v4 + 112));
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)&key,
                &common::milog::MiLogDefault::default_log_obj_,
                1u,
                "./src/handler/request_handler.api.hpp",
                "banPlayerCustomDungeon",
                7182);
              v15 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(
                      (common::milog::MiLogStream *const)&key,
                      (const char (*)[13])"offline uid:");
              v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                      v15,
                      (const unsigned int *)(v4 + 80));
              v17 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                      v16,
                      (const char (*)[15])" dungeon_guid:");
              common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                v17,
                (const unsigned __int64 *)(v4 + 112));
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
            }
            proto::CustomDungeonRedisData::~CustomDungeonRedisData((proto::CustomDungeonRedisData *const)(v4 + 432));
            std::_Rb_tree_const_iterator<unsigned long>::operator++(&__for_begin);
          }
          v7 = 0;
          std::set<unsigned long>::~set((std::set<long unsigned int> *const)(v4 + 352));
        }
        proto::PlayerDataBin::~PlayerDataBin((proto::PlayerDataBin *const)(v4 + 784));
        std::string::~string((void *)(v4 + 208));
      }
      TablePlayerData::~TablePlayerData((TablePlayerData *const)(v4 + 528));
    }
    else
    {
      v7 = 0;
    }
    RequestHandler::banPlayerCustomDungeon(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::~Packet((RequestHandler::banPlayerCustomDungeon::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const)(v4 + 272));
  }
  std::string::~string((void *)(v4 + 144));
  if ( v35 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8020) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8028) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF803C) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8058) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8060) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF80A0) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF80A8) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF80B0) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    __asan_stack_free_5(v4, 1440LL, v35);
  }
  return v7;
};

// Line 7097: range 000000000CBDAE9C-000000000CBDB0DE
int32_t __cdecl RequestHandler::banPlayerCustomDungeon(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::banPlayerCustomDungeon::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  proto::SendOfflineMsgReq *v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  int32_t result; // eax
  proto::OfflineMsgBin *msg; // [rsp+20h] [rbp-A0h]
  proto::BanCustomDungeonOp *ban_custom_dungeon; // [rsp+28h] [rbp-98h]
  char v10[144]; // [rsp+30h] [rbp-90h] BYREF

  v3 = (proto::SendOfflineMsgReq *)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = (proto::SendOfflineMsgReq *)v4;
  }
  v3->_vptr_MessageLite = (int (**)(...))1102416563;
  v3->_internal_metadata_.ptr_ = "1 32 32 8 req:7099";
  v3->msg_ = (proto::OfflineMsgBin *)RequestHandler::banPlayerCustomDungeon(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (unsigned __int64)v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450888) = -202116109;
  proto::SendOfflineMsgReq::SendOfflineMsgReq(v3 + 1);
  msg = proto::SendOfflineMsgReq::mutable_msg(v3 + 1);
  proto::OfflineMsgBin::set_ticket(msg, &__closure->__ticket);
  ban_custom_dungeon = proto::OfflineMsgBin::mutable_ban_custom_dungeon_op(msg);
  if ( *(_BYTE *)(((unsigned __int64)&__closure->__expire_time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)__closure + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&__closure->__expire_time >> 3)
                                                             + 0x7FFF8000) )
  {
    __asan_report_load4(&__closure->__expire_time);
  }
  proto::BanCustomDungeonOp::set_ban_expire_time(ban_custom_dungeon, __closure->__expire_time);
  if ( *(_BYTE *)(((unsigned __int64)&__closure->__uid >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&__closure->__uid >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&__closure->__uid);
  }
  common::minet::Packet::setUserId(packet, __closure->__uid);
  common::minet::Packet::setTargetService(packet, 9u);
  common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, v3 + 1);
  proto::SendOfflineMsgReq::~SendOfflineMsgReq(v3 + 1);
  result = 0;
  if ( v10 == (char *)v3 )
  {
    *(_DWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    v3->_vptr_MessageLite = (int (**)(...))1172321806;
    *(_QWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 7097: range 000000000CC18C9C-000000000CC18E13
void __cdecl RequestHandler::banPlayerCustomDungeon(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::Packet(
        RequestHandler::banPlayerCustomDungeon::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const this,
        RequestHandler::banPlayerCustomDungeon::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *a2)
{
  RequestHandler *v2; // rdx
  uint32_t uid; // ecx
  char v4; // al
  __int64 v5; // rsi
  uint32_t expire_time; // ecx
  char v7; // dl
  RequestHandler::banPlayerCustomDungeon::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *v8; // [rsp+0h] [rbp-10h]

  v8 = a2;
  if ( *(_BYTE *)(((unsigned __int64)a2 >> 3) + 0x7FFF8000) )
    __asan_report_load8(a2);
  v2 = a2->__this;
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->__this = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->__uid >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->__uid >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->__uid);
  }
  uid = a2->__uid;
  v4 = *(_BYTE *)(((unsigned __int64)&this->__uid >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->__uid, a2);
  }
  this->__uid = uid;
  v5 = (((_BYTE)v8 + 12) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&v8->__expire_time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v8 + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v8->__expire_time >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v8->__expire_time);
  }
  expire_time = v8->__expire_time;
  v7 = *(_BYTE *)(((unsigned __int64)&this->__expire_time >> 3) + 0x7FFF8000);
  if ( v7 != 0 && (char)((((_BYTE)this + 12) & 7) + 3) >= v7 )
  {
    LOBYTE(v5) = v7 != 0;
    __asan_report_store4(&this->__expire_time, v5);
  }
  this->__expire_time = expire_time;
  std::string::basic_string(&this->__ticket, &v8->__ticket);
};

// Line 7097: range 000000000CBDB100-000000000CBDB277
void __cdecl RequestHandler::banPlayerCustomDungeon(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::Packet(
        RequestHandler::banPlayerCustomDungeon::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const this,
        const RequestHandler::banPlayerCustomDungeon::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *a2)
{
  RequestHandler *v2; // rdx
  uint32_t uid; // ecx
  char v4; // al
  __int64 v5; // rsi
  uint32_t expire_time; // ecx
  char v7; // dl
  const RequestHandler::banPlayerCustomDungeon::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *v8; // [rsp+0h] [rbp-10h]

  v8 = a2;
  if ( *(_BYTE *)(((unsigned __int64)a2 >> 3) + 0x7FFF8000) )
    __asan_report_load8(a2);
  v2 = a2->__this;
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->__this = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->__uid >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->__uid >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->__uid);
  }
  uid = a2->__uid;
  v4 = *(_BYTE *)(((unsigned __int64)&this->__uid >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->__uid, a2);
  }
  this->__uid = uid;
  v5 = (((_BYTE)v8 + 12) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&v8->__expire_time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v8 + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v8->__expire_time >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v8->__expire_time);
  }
  expire_time = v8->__expire_time;
  v7 = *(_BYTE *)(((unsigned __int64)&this->__expire_time >> 3) + 0x7FFF8000);
  if ( v7 != 0 && (char)((((_BYTE)this + 12) & 7) + 3) >= v7 )
  {
    LOBYTE(v5) = v7 != 0;
    __asan_report_store4(&this->__expire_time, v5);
  }
  this->__expire_time = expire_time;
  std::string::basic_string(&this->__ticket, &v8->__ticket);
};

// Line 7097: range 000000000CBDB0E0-000000000CBDB0FE
void __cdecl RequestHandler::banPlayerCustomDungeon(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::~Packet(
        RequestHandler::banPlayerCustomDungeon::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const this)
{
  std::string::~string(&this->__ticket);
};

// Line 7189: range 000000000CBDBFF0-000000000CBDC521
int32_t __cdecl RequestHandler::removeCustomDungeon(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r12
  __int64 v5; // rax
  _DWORD *v6; // r13
  const char (*v7)[13]; // r9
  int32_t result; // eax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-A5h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-A4h]
  std::string key; // [rsp+30h] [rbp-A0h] BYREF
  char v23[128]; // [rsp+50h] [rbp-80h] BYREF

  v4 = (unsigned __int64)v23;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(96LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "2 48 4 13 group_id:7190 64 8 17 dungeon_guid:7191";
  *(_QWORD *)(v4 + 16) = RequestHandler::removeCustomDungeon;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -202116352;
  *(_DWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 64) = 0LL;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&key, "group_id", &__a);
  retcode = getRequestParam<unsigned int,char const(&)[13],unsigned long &>(
              request,
              &key,
              (unsigned int *)(v4 + 48),
              (std::remove_reference<char const (&)[13]>::type *)"dungeon_guid",
              (unsigned __int64 *)(v4 + 64),
              v7);
  std::string::~string(&key);
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    result = retcode;
  }
  else
  {
    if ( RedisOpActivity::removeCustomDungeonRecommend<proto::CustomDungeonNewRecommendRedisData>(
           *(_DWORD *)(v4 + 48),
           *(_QWORD *)(v4 + 64)) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "removeCustomDungeon",
        7201);
      v9 = common::milog::MiLogStream::operator<<<char [54],(char *[54])0>(
             (common::milog::MiLogStream *const)&key,
             (const char (*)[54])"remove new recommend custom dungeon failed, group_id:");
      v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v4 + 48));
      v11 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v10, (const char (*)[15])" dungeon_guid:");
      common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v11, (const unsigned __int64 *)(v4 + 64));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
    }
    if ( RedisOpActivity::removeCustomDungeonRecommend<proto::CustomDungeonOldRecommendRedisData>(
           *(_DWORD *)(v4 + 48),
           *(_QWORD *)(v4 + 64)) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "removeCustomDungeon",
        7205);
      v12 = common::milog::MiLogStream::operator<<<char [54],(char *[54])0>(
              (common::milog::MiLogStream *const)&key,
              (const char (*)[54])"remove old recommend custom dungeon failed, group_id:");
      v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v4 + 48));
      v14 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v13, (const char (*)[15])" dungeon_guid:");
      common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v14, (const unsigned __int64 *)(v4 + 64));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
    }
    if ( RedisOpActivity::removeCustomDungeonBrief(*(_QWORD *)(v4 + 64)) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "removeCustomDungeon",
        7209);
      v15 = common::milog::MiLogStream::operator<<<char [50],(char *[50])0>(
              (common::milog::MiLogStream *const)&key,
              (const char (*)[50])"remove brief custom dungeon failed, dungeon_guid:");
      common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v15, (const unsigned __int64 *)(v4 + 64));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
    }
    if ( RedisOpActivity::removeCustomDungeon(*(_QWORD *)(v4 + 64)) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "removeCustomDungeon",
        7213);
      v16 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
              (common::milog::MiLogStream *const)&key,
              (const char (*)[44])"remove custom dungeon failed, dungeon_guid:");
      common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v16, (const unsigned __int64 *)(v4 + 64));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&key,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/handler/request_handler.api.hpp",
      "removeCustomDungeon",
      7215);
    v17 = common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
            (common::milog::MiLogStream *const)&key,
            (const char (*)[33])"remove custom dungeon, group_id:");
    v18 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(v4 + 48));
    v19 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(v18, (const char (*)[15])" dungeon_guid:");
    common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v19, (const unsigned __int64 *)(v4 + 64));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
    result = 0;
  }
  if ( v23 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 7220: range 000000000CBDC522-000000000CBDCF24
int32_t __cdecl RequestHandler::queryPlayerCustomDungeonInfo(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  int32_t v7; // r14d
  common::milog::MiLogStream *v8; // rax
  const proto::CustomDungeonAbstractBin *v9; // rax
  google::protobuf::RepeatedField<long unsigned int> *v10; // r14
  google::protobuf::RepeatedField<long unsigned int> *v11; // r14
  const google::protobuf::RepeatedField<long unsigned int> *v12; // rax
  google::protobuf::uint64 v13; // rax
  google::protobuf::uint32 v14; // eax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  Json::Value *v17; // rax
  int p_yielda; // [rsp+0h] [rbp-7A0h]
  Json::Value *jvalb; // [rsp+8h] [rbp-798h]
  int v22; // [rsp+20h] [rbp-780h]
  int32_t retcode; // [rsp+24h] [rbp-77Ch]
  google::protobuf::RepeatedPtrField<proto::CustomDungeonBriefBin>::const_iterator __for_begin; // [rsp+28h] [rbp-778h] BYREF
  google::protobuf::RepeatedPtrField<proto::CustomDungeonBattleRecord>::const_iterator __for_begin_0; // [rsp+30h] [rbp-770h] BYREF
  google::protobuf::RepeatedPtrField<proto::CustomDungeonBattleRecord>::const_iterator __for_end; // [rsp+38h] [rbp-768h] BYREF
  const proto::PlayerCustomDungeonCompBin *custom_dungeon_bin; // [rsp+40h] [rbp-760h]
  const google::protobuf::RepeatedPtrField<proto::CustomDungeonBriefBin> *__for_range; // [rsp+48h] [rbp-758h]
  const google::protobuf::RepeatedPtrField<proto::CustomDungeonBattleRecord> *__for_range_0; // [rsp+50h] [rbp-750h]
  const proto::CustomDungeonBattleRecord *battle_record; // [rsp+58h] [rbp-748h]
  proto::CustomDungeonBattleRecordMuipData *battle_record_muip_data; // [rsp+60h] [rbp-740h]
  const proto::CustomDungeonBriefBin *custom_dungeon; // [rsp+68h] [rbp-738h]
  std::string key; // [rsp+70h] [rbp-730h] BYREF
  char v34[1808]; // [rsp+90h] [rbp-710h] BYREF

  p_yielda = (int)p_yield;
  v4 = (unsigned __int64)v34;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_5(1760LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "11 48 1 13 is_exist:7228 64 4 8 uid:7221 80 4 12 options:7269 96 32 13 bin_data:7238 160 32 16 j"
                        "son_string:7272 224 40 15 status_ret:7273 304 40 15 json_value:7279 384 96 18 ugc_muip_data:7251"
                        " 512 192 20 player_data_row:7229 768 272 16 json_reader:7280 1104 520 20 player_data_bin:7244";
  *(_QWORD *)(v4 + 16) = RequestHandler::queryPlayerCustomDungeonInfo;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234753551;
  v6[536862722] = -234556924;
  v6[536862724] = -218959118;
  v6[536862726] = -218959118;
  v6[536862728] = -218959360;
  v6[536862729] = 62194;
  v6[536862730] = -234881024;
  v6[536862731] = -218959118;
  v6[536862735] = -218959118;
  v6[536862742] = -218959118;
  v6[536862743] = -218959118;
  v6[536862752] = -219021312;
  v6[536862753] = -218959118;
  v6[536862754] = 62194;
  v6[536862770] = -218103808;
  v6[536862771] = -202116109;
  v6[536862772] = -202116109;
  v6[536862773] = -202116109;
  v6[536862774] = -202116109;
  *(_DWORD *)(v4 + 64) = 0;
  std::allocator<char>::allocator(v4 + 48);
  std::string::basic_string<std::allocator<char>>(&key, off_1A660020, (const std::allocator<char> *)(v4 + 48));
  retcode = getRequestParam<unsigned int>(request, &key, (unsigned int *)(v4 + 64));
  std::string::~string(&key);
  std::allocator<char>::~allocator(v4 + 48);
  if ( retcode )
  {
    v7 = retcode;
  }
  else
  {
    *(_BYTE *)(v4 + 48) = 0;
    TablePlayerData::TablePlayerData((TablePlayerData *const)(v4 + 512));
    if ( MysqlOpPlayerData::selectPlayerDataByUid(
           *(_DWORD *)(v4 + 64),
           (TablePlayerData *)(v4 + 512),
           (bool *)(v4 + 48)) )
    {
      v7 = 2;
    }
    else if ( *(_BYTE *)(v4 + 48) != 1 )
    {
      v7 = 2001;
    }
    else
    {
      std::string::basic_string(v4 + 96);
      mysqlpp::String::to_string((const mysqlpp::String *const)(v4 + 600), (std::string *)(v4 + 96));
      if ( common::tools::ZlibUtil::isCompressWithPad((const std::string *)(v4 + 96)) )
      {
        common::tools::ZlibUtil::uncompressWithPad(&key, (const std::string *)(v4 + 96));
        std::string::operator=(v4 + 96, &key);
        std::string::~string(&key);
      }
      proto::PlayerDataBin::PlayerDataBin((proto::PlayerDataBin *const)(v4 + 1104));
      if ( (unsigned __int8)google::protobuf::MessageLite::ParseFromString(v4 + 1104, v4 + 96) != 1 )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&key,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/handler/request_handler.api.hpp",
          "queryPlayerCustomDungeonInfo",
          7247);
        v8 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
               (common::milog::MiLogStream *const)&key,
               (const char (*)[45])"player_data_bin ParseFromString failed, uid:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v4 + 64));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
        v7 = 2;
      }
      else
      {
        proto::PlayerCustomDungeonMuipData::PlayerCustomDungeonMuipData((proto::PlayerCustomDungeonMuipData *const)(v4 + 384));
        proto::PlayerCustomDungeonMuipData::set_uid(
          (proto::PlayerCustomDungeonMuipData *const)(v4 + 384),
          *(_DWORD *)(v4 + 64));
        custom_dungeon_bin = proto::PlayerDataBin::custom_dungeon_bin((const proto::PlayerDataBin *const)(v4 + 1104));
        __for_range = proto::PlayerCustomDungeonCompBin::brief_list(custom_dungeon_bin);
        __for_begin.it_ = google::protobuf::RepeatedPtrField<proto::CustomDungeonBriefBin>::begin(__for_range).it_;
        __for_begin_0.it_ = google::protobuf::RepeatedPtrField<proto::CustomDungeonBriefBin>::end(__for_range).it_;
        while ( google::protobuf::internal::RepeatedPtrIterator<proto::CustomDungeonBriefBin const>::operator!=(
                  &__for_begin,
                  (const google::protobuf::internal::RepeatedPtrIterator<const proto::CustomDungeonBriefBin>::iterator *)&__for_begin_0) )
        {
          custom_dungeon = google::protobuf::internal::RepeatedPtrIterator<proto::CustomDungeonBriefBin const>::operator*(&__for_begin);
          v9 = proto::CustomDungeonBriefBin::abstract(custom_dungeon);
          if ( proto::CustomDungeonAbstractBin::first_publish_time(v9) )
          {
            v10 = proto::PlayerCustomDungeonMuipData::mutable_publish_dungeon_list((proto::PlayerCustomDungeonMuipData *const)(v4 + 384));
            __for_end.it_ = (void *const *)proto::CustomDungeonBriefBin::dungeon_guid(custom_dungeon);
            google::protobuf::RepeatedField<unsigned long>::Add(v10, (const unsigned __int64 *)&__for_end);
          }
          google::protobuf::internal::RepeatedPtrIterator<proto::CustomDungeonBriefBin const>::operator++(&__for_begin);
        }
        v11 = proto::PlayerCustomDungeonMuipData::mutable_store_dungeon_list((proto::PlayerCustomDungeonMuipData *const)(v4 + 384));
        v12 = proto::PlayerCustomDungeonCompBin::store_dungeon_list(custom_dungeon_bin);
        google::protobuf::RepeatedField<unsigned long>::CopyFrom(v11, v12);
        __for_range_0 = proto::PlayerCustomDungeonCompBin::battle_record_list(custom_dungeon_bin);
        __for_begin_0.it_ = google::protobuf::RepeatedPtrField<proto::CustomDungeonBattleRecord>::begin(__for_range_0).it_;
        __for_end.it_ = google::protobuf::RepeatedPtrField<proto::CustomDungeonBattleRecord>::end(__for_range_0).it_;
        while ( google::protobuf::internal::RepeatedPtrIterator<proto::CustomDungeonBattleRecord const>::operator!=(
                  &__for_begin_0,
                  &__for_end) )
        {
          battle_record = google::protobuf::internal::RepeatedPtrIterator<proto::CustomDungeonBattleRecord const>::operator*(&__for_begin_0);
          battle_record_muip_data = proto::PlayerCustomDungeonMuipData::add_battle_record_list((proto::PlayerCustomDungeonMuipData *const)(v4 + 384));
          v13 = proto::CustomDungeonBattleRecord::dungeon_guid(battle_record);
          proto::CustomDungeonBattleRecordMuipData::set_dungeon_guid(battle_record_muip_data, v13);
          v14 = proto::CustomDungeonBattleRecord::min_cost_time(battle_record);
          proto::CustomDungeonBattleRecordMuipData::set_min_cost_time(battle_record_muip_data, v14);
          google::protobuf::internal::RepeatedPtrIterator<proto::CustomDungeonBattleRecord const>::operator++(&__for_begin_0);
        }
        google::protobuf::util::JsonPrintOptions::JsonPrintOptions((google::protobuf::util::JsonPrintOptions *const)(v4 + 80));
        *(_BYTE *)(v4 + 80) = 1;
        *(_BYTE *)(v4 + 83) = 1;
        std::string::basic_string(v4 + 160);
        google::protobuf::util::MessageToJsonString(
          (google::protobuf::util::Status *)(v4 + 224),
          (google::protobuf::Message *)(v4 + 384),
          p_yielda,
          jval,
          (int)request,
          (char)this,
          v22,
          (void *)__for_begin.it_);
        if ( !google::protobuf::util::Status::ok((const google::protobuf::util::Status *const)(v4 + 224)) )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&key,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/handler/request_handler.api.hpp",
            "queryPlayerCustomDungeonInfo",
            7276);
          v15 = common::milog::MiLogStream::operator<<<char [57],(char *[57])0>(
                  (common::milog::MiLogStream *const)&key,
                  (const char (*)[57])"PlayerCustomDungeonMuipData to json_string failed, uid: ");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, (const unsigned int *)(v4 + 64));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
          v7 = -1;
        }
        else
        {
          Json::Value::Value(v4 + 304, 0LL);
          Json::Reader::Reader((Json::Reader *)(v4 + 768));
          if ( !Json::Reader::parse(
                  (Json::Reader *const)(v4 + 768),
                  (const std::string *)(v4 + 160),
                  (Json::Value *)(v4 + 304),
                  1) )
          {
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)&key,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/handler/request_handler.api.hpp",
              "queryPlayerCustomDungeonInfo",
              7283);
            v16 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
                    (common::milog::MiLogStream *const)&key,
                    (const char (*)[40])"json_string to json_value failed, uid: ");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, (const unsigned int *)(v4 + 64));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
            v7 = -1;
          }
          else
          {
            v17 = (Json::Value *)Json::Value::operator[]((Json::Value_0 *const)jvalb, "player_custom_dungeon_data");
            Json::Value::operator=(v17);
            v7 = 0;
          }
          Json::Reader::~Reader((Json::Reader *const)(v4 + 768));
          Json::Value::~Value((Json::Value_0 *const)(v4 + 304));
        }
        google::protobuf::util::Status::~Status((google::protobuf::util::Status *const)(v4 + 224));
        std::string::~string((void *)(v4 + 160));
        proto::PlayerCustomDungeonMuipData::~PlayerCustomDungeonMuipData((proto::PlayerCustomDungeonMuipData *const)(v4 + 384));
      }
      proto::PlayerDataBin::~PlayerDataBin((proto::PlayerDataBin *const)(v4 + 1104));
      std::string::~string((void *)(v4 + 96));
    }
    TablePlayerData::~TablePlayerData((TablePlayerData *const)(v4 + 512));
  }
  if ( v34 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF803C) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8058) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8080) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8088) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF80C8) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF80D0) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF80D8) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    __asan_stack_free_5(v4, 1760LL, v34);
  }
  return v7;
};

// Line 7291: range 000000000CBDCF26-000000000CBDDDF9
int32_t __cdecl RequestHandler::queryCustomDungeonBriefInfo(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  int32_t v7; // r14d
  common::milog::MiLogStream *v8; // rax
  unsigned __int64 v9; // rax
  common::milog::MiLogStream *v10; // r14
  common::milog::MiLogStream *v11; // rax
  google::protobuf::uint64 v12; // rax
  google::protobuf::uint32 v13; // eax
  const std::string *v14; // rax
  google::protobuf::RepeatedField<unsigned int> *v15; // r14
  const google::protobuf::RepeatedField<unsigned int> *v16; // rax
  bool is_arrive_finish; // al
  google::protobuf::uint32 v18; // eax
  google::protobuf::uint32 v19; // eax
  bool is_forbid_skill; // al
  google::protobuf::uint32 v21; // eax
  google::protobuf::uint32 publish_time; // eax
  google::protobuf::uint32 v23; // eax
  unsigned __int64 v24; // rax
  unsigned int v25; // r14d
  const unsigned int *v26; // rsi
  unsigned int *v27; // rax
  unsigned int *v28; // rdx
  char v29; // cl
  google::protobuf::uint32 v30; // eax
  google::protobuf::uint32 v31; // eax
  google::protobuf::uint32 v32; // eax
  google::protobuf::uint32 v33; // eax
  common::milog::MiLogStream *v34; // rax
  common::milog::MiLogStream *v35; // rax
  Json::Value *v36; // rax
  int32_t result; // eax
  int p_yielda; // [rsp+0h] [rbp-510h]
  Json::Value *jvalb; // [rsp+8h] [rbp-508h]
  int requesta; // [rsp+10h] [rbp-500h]
  int v42; // [rsp+20h] [rbp-4F0h] BYREF
  int32_t retcode; // [rsp+24h] [rbp-4ECh]
  std::vector<long unsigned int>::iterator __for_begin; // [rsp+28h] [rbp-4E8h] BYREF
  std::vector<long unsigned int>::iterator __for_end; // [rsp+30h] [rbp-4E0h] BYREF
  std::vector<long unsigned int> *__for_range; // [rsp+38h] [rbp-4D8h]
  std::vector<proto::CustomDungeonBriefRedisData> *__for_range_0; // [rsp+40h] [rbp-4D0h]
  const proto::CustomDungeonBriefRedisData *custom_dungeon_brief; // [rsp+48h] [rbp-4C8h]
  proto::CustomDungeonBriefMuipData *ugc_brief_muip_data; // [rsp+50h] [rbp-4C0h]
  const proto::CustomDungeonSettingBin *setting; // [rsp+58h] [rbp-4B8h]
  proto::CustomDungeonSettingMuipData *setting_muip_data; // [rsp+60h] [rbp-4B0h]
  const proto::CustomDungeonAbstractBin *abstract; // [rsp+68h] [rbp-4A8h]
  proto::CustomDungeonAbstractMuipData *abstract_muip_data; // [rsp+70h] [rbp-4A0h]
  google::protobuf::Map<unsigned int,unsigned int> *muip_brick_map; // [rsp+78h] [rbp-498h]
  const google::protobuf::Map<unsigned int,unsigned int> *__for_range_1; // [rsp+80h] [rbp-490h]
  const proto::CustomDungeonSocialRedisData *social; // [rsp+88h] [rbp-488h]
  proto::CustomDungeonSocialMuipData *social_muip_data; // [rsp+90h] [rbp-480h]
  const unsigned int *p_id; // [rsp+98h] [rbp-478h]
  google::protobuf::Map<unsigned int,unsigned int>::const_iterator __for_begin_0; // [rsp+A0h] [rbp-470h] BYREF
  google::protobuf::Map<unsigned int,unsigned int>::const_iterator __for_end_0; // [rsp+C0h] [rbp-450h] BYREF
  std::string key; // [rsp+E0h] [rbp-430h] BYREF
  char v62[1040]; // [rsp+100h] [rbp-410h] BYREF

  requesta = (int)request;
  p_yielda = (int)p_yield;
  v4 = (unsigned __int64)v62;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_4(992LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "11 32 4 12 options:7360 48 8 17 dungeon_guid:7307 80 24 21 dungeon_guid_vec:7299 144 24 14 brief"
                        "_vec:7318 208 32 26 dungeon_guid_list_str:7292 272 32 16 json_string:7363 336 40 15 status_ret:7"
                        "364 416 40 15 json_value:7370 496 48 21 dungeon_guid_set:7306 576 48 30 ugc_batch_brief_muip_dat"
                        "a:7325 656 272 16 json_reader:7371";
  *(_QWORD *)(v4 + 16) = RequestHandler::queryCustomDungeonBriefInfo;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = 61956;
  v6[536862721] = -234881024;
  v6[536862722] = 62194;
  v6[536862723] = -218959360;
  v6[536862724] = 62194;
  v6[536862725] = -218959360;
  v6[536862726] = 62194;
  v6[536862727] = -219021312;
  v6[536862728] = 62194;
  v6[536862729] = -219021312;
  v6[536862730] = 62194;
  v6[536862731] = -234881024;
  v6[536862732] = -218959118;
  v6[536862734] = -218959360;
  v6[536862735] = 62194;
  v6[536862737] = -218959118;
  v6[536862739] = -219021312;
  v6[536862740] = 62194;
  v6[536862749] = -202116109;
  v6[536862750] = -202116109;
  std::string::basic_string(v4 + 208);
  std::allocator<char>::allocator((char *)&v42 + 3);
  std::string::basic_string<std::allocator<char>>(&key, "dungeon_guid_list", (const std::allocator<char> *)&v42 + 3);
  retcode = getRequestParam<std::string>(request, &key, (std::string *)(v4 + 208));
  std::string::~string(&key);
  std::allocator<char>::~allocator((char *)&v42 + 3);
  if ( retcode )
  {
    v7 = retcode;
  }
  else
  {
    std::vector<unsigned long>::vector((std::vector<long unsigned int> *const)(v4 + 80));
    std::allocator<char>::allocator((char *)&v42 + 3);
    std::string::basic_string<std::allocator<char>>(&key, ",", (const std::allocator<char> *)&v42 + 3);
    retcode = common::tools::StringUtils::splitToList<unsigned long>(
                (const std::string *)(v4 + 208),
                &key,
                (std::vector<long unsigned int> *)(v4 + 80),
                1);
    std::string::~string(&key);
    std::allocator<char>::~allocator((char *)&v42 + 3);
    if ( retcode )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "queryCustomDungeonBriefInfo",
        7303);
      v8 = common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
             (common::milog::MiLogStream *const)&key,
             (const char (*)[41])"splitToList fail, dungeon_guid_list_str:");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, (const std::string *)(v4 + 208));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      v7 = 1002;
    }
    else
    {
      std::set<unsigned long>::set((std::set<long unsigned int> *const)(v4 + 496));
      __for_range = (std::vector<long unsigned int> *)(v4 + 80);
      __for_begin._M_current = std::vector<unsigned long>::begin((std::vector<long unsigned int> *const)(v4 + 80))._M_current;
      __for_end._M_current = std::vector<unsigned long>::end(__for_range)._M_current;
      while ( __gnu_cxx::operator!=<unsigned long *,std::vector<unsigned long>>(&__for_begin, &__for_end) )
      {
        v9 = (unsigned __int64)__gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator*(&__for_begin);
        if ( *(_BYTE *)((v9 >> 3) + 0x7FFF8000) )
          v9 = __asan_report_load8(v9);
        *(_QWORD *)(v4 + 48) = *(_QWORD *)v9;
        std::set<unsigned long>::insert(
          (std::set<long unsigned int> *const)(v4 + 496),
          (const std::set<long unsigned int>::value_type *)(v4 + 48));
        __gnu_cxx::__normal_iterator<unsigned long *,std::vector<unsigned long>>::operator++(&__for_begin);
      }
      if ( std::set<unsigned long>::size((const std::set<long unsigned int> *const)(v4 + 496)) <= 0x32 )
      {
        std::vector<proto::CustomDungeonBriefRedisData>::vector((std::vector<proto::CustomDungeonBriefRedisData> *const)(v4 + 144));
        if ( RedisOpActivity::getCustomDungeonBrief(
               (const std::set<long unsigned int> *)(v4 + 496),
               (std::vector<proto::CustomDungeonBriefRedisData> *)(v4 + 144)) )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&key,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/handler/request_handler.api.hpp",
            "queryCustomDungeonBriefInfo",
            7321);
          v11 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
                  (common::milog::MiLogStream *const)&key,
                  (const char (*)[44])"get dungeon brief failed, dungeon_guid_set:");
          common::milog::MiLogStream::operator<<<unsigned long>(v11, (const std::set<long unsigned int> *)(v4 + 496));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
          v7 = -1;
        }
        else
        {
          proto::CustomDungeonBatchBriefMuipData::CustomDungeonBatchBriefMuipData((proto::CustomDungeonBatchBriefMuipData *const)(v4 + 576));
          __for_range_0 = (std::vector<proto::CustomDungeonBriefRedisData> *)(v4 + 144);
          __for_begin._M_current = (unsigned __int64 *)std::vector<proto::CustomDungeonBriefRedisData>::begin((std::vector<proto::CustomDungeonBriefRedisData> *const)(v4 + 144))._M_current;
          __for_end._M_current = (unsigned __int64 *)std::vector<proto::CustomDungeonBriefRedisData>::end(__for_range_0)._M_current;
          while ( __gnu_cxx::operator!=<proto::CustomDungeonBriefRedisData *,std::vector<proto::CustomDungeonBriefRedisData>>(
                    (const __gnu_cxx::__normal_iterator<proto::CustomDungeonBriefRedisData*,std::vector<proto::CustomDungeonBriefRedisData> > *)&__for_begin,
                    (const __gnu_cxx::__normal_iterator<proto::CustomDungeonBriefRedisData*,std::vector<proto::CustomDungeonBriefRedisData> > *)&__for_end) )
          {
            custom_dungeon_brief = __gnu_cxx::__normal_iterator<proto::CustomDungeonBriefRedisData *,std::vector<proto::CustomDungeonBriefRedisData>>::operator*((const __gnu_cxx::__normal_iterator<proto::CustomDungeonBriefRedisData*,std::vector<proto::CustomDungeonBriefRedisData> > *const)&__for_begin);
            ugc_brief_muip_data = proto::CustomDungeonBatchBriefMuipData::add_brief_list((proto::CustomDungeonBatchBriefMuipData *const)(v4 + 576));
            v12 = proto::CustomDungeonBriefRedisData::dungeon_guid(custom_dungeon_brief);
            proto::CustomDungeonBriefMuipData::set_dungeon_guid(ugc_brief_muip_data, v12);
            v13 = proto::CustomDungeonBriefRedisData::dungeon_id(custom_dungeon_brief);
            proto::CustomDungeonBriefMuipData::set_dungeon_id(ugc_brief_muip_data, v13);
            v14 = proto::CustomDungeonBriefRedisData::creator_nickname[abi:cxx11](custom_dungeon_brief);
            proto::CustomDungeonBriefMuipData::set_creator_nickname(ugc_brief_muip_data, v14);
            v15 = proto::CustomDungeonBriefMuipData::mutable_tag_list(ugc_brief_muip_data);
            v16 = proto::CustomDungeonBriefRedisData::tag_list(custom_dungeon_brief);
            google::protobuf::RepeatedField<unsigned int>::CopyFrom(v15, v16);
            setting = proto::CustomDungeonBriefRedisData::setting(custom_dungeon_brief);
            setting_muip_data = proto::CustomDungeonBriefMuipData::mutable_setting(ugc_brief_muip_data);
            is_arrive_finish = proto::CustomDungeonSettingBin::is_arrive_finish(setting);
            proto::CustomDungeonSettingMuipData::set_is_arrive_finish(setting_muip_data, is_arrive_finish);
            v18 = proto::CustomDungeonSettingBin::coin_limit(setting);
            proto::CustomDungeonSettingMuipData::set_coin_limit(setting_muip_data, v18);
            v19 = proto::CustomDungeonSettingBin::time_limit(setting);
            proto::CustomDungeonSettingMuipData::set_time_limit(setting_muip_data, v19);
            is_forbid_skill = proto::CustomDungeonSettingBin::is_forbid_skill(setting);
            proto::CustomDungeonSettingMuipData::set_is_forbid_skill(setting_muip_data, is_forbid_skill);
            v21 = proto::CustomDungeonSettingBin::life_num(setting);
            proto::CustomDungeonSettingMuipData::set_life_num(setting_muip_data, v21);
            abstract = proto::CustomDungeonBriefRedisData::abstract(custom_dungeon_brief);
            abstract_muip_data = proto::CustomDungeonBriefMuipData::mutable_abstract(ugc_brief_muip_data);
            publish_time = proto::CustomDungeonAbstractBin::first_publish_time(abstract);
            proto::CustomDungeonAbstractMuipData::set_first_publish_time(abstract_muip_data, publish_time);
            v23 = proto::CustomDungeonAbstractBin::last_publish_time(abstract);
            proto::CustomDungeonAbstractMuipData::set_last_publish_time(abstract_muip_data, v23);
            muip_brick_map = proto::CustomDungeonAbstractMuipData::mutable_brick_statistics_map(abstract_muip_data);
            __for_range_1 = proto::CustomDungeonAbstractBin::brick_statistics_map(abstract);
            google::protobuf::Map<unsigned int,unsigned int>::begin(&__for_begin_0, __for_range_1);
            google::protobuf::Map<unsigned int,unsigned int>::end(&__for_end_0, __for_range_1);
            while ( google::protobuf::operator!=(&__for_begin_0, &__for_end_0) )
            {
              p_id = (const unsigned int *)google::protobuf::Map<unsigned int,unsigned int>::const_iterator::operator*(&__for_begin_0);
              v24 = (unsigned __int64)(p_id + 1);
              if ( *(_BYTE *)((v24 >> 3) + 0x7FFF8000) != 0
                && (char)((v24 & 7) + 3) >= *(_BYTE *)((v24 >> 3) + 0x7FFF8000) )
              {
                __asan_report_load4(v24);
              }
              v25 = p_id[1];
              v26 = p_id;
              v27 = google::protobuf::Map<unsigned int,unsigned int>::operator[](muip_brick_map, p_id);
              v28 = v27;
              v29 = *(_BYTE *)(((unsigned __int64)v27 >> 3) + 0x7FFF8000);
              if ( v29 != 0 && (char)(((unsigned __int8)v27 & 7) + 3) >= v29 )
              {
                LOBYTE(v26) = v29 != 0;
                __asan_report_store4(v27, v26);
              }
              *v28 = v25;
              google::protobuf::Map<unsigned int,unsigned int>::const_iterator::operator++(&__for_begin_0);
            }
            social = proto::CustomDungeonBriefRedisData::social(custom_dungeon_brief);
            social_muip_data = proto::CustomDungeonBriefMuipData::mutable_social(ugc_brief_muip_data);
            v30 = proto::CustomDungeonSocialRedisData::play_num(social);
            proto::CustomDungeonSocialMuipData::set_play_num(social_muip_data, v30);
            v31 = proto::CustomDungeonSocialRedisData::like_num(social);
            proto::CustomDungeonSocialMuipData::set_like_num(social_muip_data, v31);
            v32 = proto::CustomDungeonSocialRedisData::store_num(social);
            proto::CustomDungeonSocialMuipData::set_store_num(social_muip_data, v32);
            v33 = proto::CustomDungeonSocialRedisData::win_num(social);
            proto::CustomDungeonSocialMuipData::set_win_num(social_muip_data, v33);
            __gnu_cxx::__normal_iterator<proto::CustomDungeonBriefRedisData *,std::vector<proto::CustomDungeonBriefRedisData>>::operator++((__gnu_cxx::__normal_iterator<proto::CustomDungeonBriefRedisData*,std::vector<proto::CustomDungeonBriefRedisData> > *const)&__for_begin);
          }
          google::protobuf::util::JsonPrintOptions::JsonPrintOptions((google::protobuf::util::JsonPrintOptions *const)(v4 + 32));
          *(_BYTE *)(v4 + 32) = 1;
          *(_BYTE *)(v4 + 35) = 1;
          std::string::basic_string(v4 + 272);
          google::protobuf::util::MessageToJsonString(
            (google::protobuf::util::Status *)(v4 + 336),
            (google::protobuf::Message *)(v4 + 576),
            p_yielda,
            jval,
            requesta,
            (char)this,
            v42,
            __for_begin._M_current);
          if ( !google::protobuf::util::Status::ok((const google::protobuf::util::Status *const)(v4 + 336)) )
          {
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)&key,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/handler/request_handler.api.hpp",
              "queryCustomDungeonBriefInfo",
              7367);
            v34 = common::milog::MiLogStream::operator<<<char [74],(char *[74])0>(
                    (common::milog::MiLogStream *const)&key,
                    (const char (*)[74])"CustomDungeonBatchBriefMuipData to json_string failed, dungeon_guid_set: ");
            common::milog::MiLogStream::operator<<<unsigned long>(v34, (const std::set<long unsigned int> *)(v4 + 496));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
            v7 = -1;
          }
          else
          {
            Json::Value::Value(v4 + 416, 0LL);
            Json::Reader::Reader((Json::Reader *)(v4 + 656));
            if ( !Json::Reader::parse(
                    (Json::Reader *const)(v4 + 656),
                    (const std::string *)(v4 + 272),
                    (Json::Value *)(v4 + 416),
                    1) )
            {
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)&key,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/handler/request_handler.api.hpp",
                "queryCustomDungeonBriefInfo",
                7374);
              v35 = common::milog::MiLogStream::operator<<<char [53],(char *[53])0>(
                      (common::milog::MiLogStream *const)&key,
                      (const char (*)[53])"json_string to json_value failed, dungeon_guid_set: ");
              common::milog::MiLogStream::operator<<<unsigned long>(
                v35,
                (const std::set<long unsigned int> *)(v4 + 496));
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
              v7 = -1;
            }
            else
            {
              v36 = (Json::Value *)Json::Value::operator[](
                                     (Json::Value_0 *const)jvalb,
                                     "custom_dungeon_batch_brief_data");
              Json::Value::operator=(v36);
              v7 = 0;
            }
            Json::Reader::~Reader((Json::Reader *const)(v4 + 656));
            Json::Value::~Value((Json::Value_0 *const)(v4 + 416));
          }
          google::protobuf::util::Status::~Status((google::protobuf::util::Status *const)(v4 + 336));
          std::string::~string((void *)(v4 + 272));
          proto::CustomDungeonBatchBriefMuipData::~CustomDungeonBatchBriefMuipData((proto::CustomDungeonBatchBriefMuipData *const)(v4 + 576));
        }
        std::vector<proto::CustomDungeonBriefRedisData>::~vector((std::vector<proto::CustomDungeonBriefRedisData> *const)(v4 + 144));
      }
      else
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&key,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/handler/request_handler.api.hpp",
          "queryCustomDungeonBriefInfo",
          7313);
        v10 = common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(
                (common::milog::MiLogStream *const)&key,
                (const char (*)[23])"dungeon_guid_set size:");
        __for_end._M_current = (unsigned __int64 *)std::set<unsigned long>::size((const std::set<long unsigned int> *const)(v4 + 496));
        common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
          v10,
          (const unsigned __int64 *)&__for_end);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
        v7 = -1;
      }
      std::set<unsigned long>::~set((std::set<long unsigned int> *const)(v4 + 496));
    }
    std::vector<unsigned long>::~vector((std::vector<long unsigned int> *const)(v4 + 80));
  }
  std::string::~string((void *)(v4 + 208));
  result = v7;
  if ( v62 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8030) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8038) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8044) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF804C) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8074) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8060) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8068) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8070) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8078) = -168430091;
  }
  return result;
};

// Line 7382: range 000000000CBDE1F2-000000000CBDE3CA
int32_t __cdecl RequestHandler::addFriend(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:7383";
  *(_QWORD *)(v4 + 16) = RequestHandler::addFriend;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::addFriend(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::addFriend::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7383: range 000000000CBDDDFA-000000000CBDE1F1
int32_t __cdecl RequestHandler::addFriend(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::addFriend::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-105h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-104h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-100h]
  proto::AddFriendOp *op; // [rsp+38h] [rbp-F8h]
  char v14[240]; // [rsp+40h] [rbp-F0h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 4 12 src_uid:7385 48 4 12 tar_uid:7386 64 32 11 ticket:7387 128 32 8 req:7405";
  *(_QWORD *)(v3 + 16) = RequestHandler::addFriend(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862723] = -218959118;
  v5[536862725] = -202116109;
  *(_DWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  std::string::basic_string(v3 + 64);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 128), "src_uid", &__a);
  retcode = getRequestParam<unsigned int,char const(&)[8],unsigned int &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 128),
              (unsigned int *)(v3 + 32),
              (std::remove_reference<char const (&)[8]>::type *)"tar_uid",
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 64));
  std::string::~string((void *)(v3 + 128));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 64) )
  {
    v6 = 2012;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 32) )
      goto LABEL_16;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( !RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 32)) || !*(_DWORD *)(v3 + 48) )
      goto LABEL_16;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 48)) )
      v7 = 0;
    else
LABEL_16:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else if ( *(_DWORD *)(v3 + 32) == *(_DWORD *)(v3 + 48) )
    {
      v6 = 2039;
    }
    else
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 128));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 128));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 64));
      op = proto::OfflineMsgBin::mutable_add_friend_op(msg);
      proto::AddFriendOp::set_target_uid(op, *(_DWORD *)(v3 + 48));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 32));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 128));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 128));
    }
  }
  std::string::~string((void *)(v3 + 64));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7419: range 000000000CBDE7C4-000000000CBDE99C
int32_t __cdecl RequestHandler::delFriend(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:7420";
  *(_QWORD *)(v4 + 16) = RequestHandler::delFriend;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::delFriend(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::delFriend::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7420: range 000000000CBDE3CC-000000000CBDE7C3
int32_t __cdecl RequestHandler::delFriend(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::delFriend::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-105h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-104h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-100h]
  proto::DelFriendOp *op; // [rsp+38h] [rbp-F8h]
  char v14[240]; // [rsp+40h] [rbp-F0h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 4 12 src_uid:7422 48 4 12 tar_uid:7423 64 32 11 ticket:7424 128 32 8 req:7442";
  *(_QWORD *)(v3 + 16) = RequestHandler::delFriend(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862723] = -218959118;
  v5[536862725] = -202116109;
  *(_DWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  std::string::basic_string(v3 + 64);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 128), "src_uid", &__a);
  retcode = getRequestParam<unsigned int,char const(&)[8],unsigned int &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 128),
              (unsigned int *)(v3 + 32),
              (std::remove_reference<char const (&)[8]>::type *)"tar_uid",
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 64));
  std::string::~string((void *)(v3 + 128));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 64) )
  {
    v6 = 2012;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 32) )
      goto LABEL_16;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( !RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 32)) || !*(_DWORD *)(v3 + 48) )
      goto LABEL_16;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 48)) )
      v7 = 0;
    else
LABEL_16:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else if ( *(_DWORD *)(v3 + 32) == *(_DWORD *)(v3 + 48) )
    {
      v6 = 2039;
    }
    else
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 128));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 128));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 64));
      op = proto::OfflineMsgBin::mutable_del_friend_op(msg);
      proto::DelFriendOp::set_target_uid(op, *(_DWORD *)(v3 + 48));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 32));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 128));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 128));
    }
  }
  std::string::~string((void *)(v3 + 64));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7456: range 000000000CBDED96-000000000CBDEF6E
int32_t __cdecl RequestHandler::addFriendAsk(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:7457";
  *(_QWORD *)(v4 + 16) = RequestHandler::addFriendAsk;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::addFriendAsk(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::addFriendAsk::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7457: range 000000000CBDE99E-000000000CBDED95
int32_t __cdecl RequestHandler::addFriendAsk(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::addFriendAsk::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-105h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-104h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-100h]
  proto::AddFriendAskOp *op; // [rsp+38h] [rbp-F8h]
  char v14[240]; // [rsp+40h] [rbp-F0h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 4 12 src_uid:7459 48 4 12 tar_uid:7460 64 32 11 ticket:7461 128 32 8 req:7479";
  *(_QWORD *)(v3 + 16) = RequestHandler::addFriendAsk(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862723] = -218959118;
  v5[536862725] = -202116109;
  *(_DWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  std::string::basic_string(v3 + 64);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 128), "src_uid", &__a);
  retcode = getRequestParam<unsigned int,char const(&)[8],unsigned int &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 128),
              (unsigned int *)(v3 + 32),
              (std::remove_reference<char const (&)[8]>::type *)"tar_uid",
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 64));
  std::string::~string((void *)(v3 + 128));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 64) )
  {
    v6 = 2012;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 32) )
      goto LABEL_16;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( !RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 32)) || !*(_DWORD *)(v3 + 48) )
      goto LABEL_16;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 48)) )
      v7 = 0;
    else
LABEL_16:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else if ( *(_DWORD *)(v3 + 32) == *(_DWORD *)(v3 + 48) )
    {
      v6 = 2039;
    }
    else
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 128));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 128));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 64));
      op = proto::OfflineMsgBin::mutable_add_friend_ask_op(msg);
      proto::AddFriendAskOp::set_target_uid(op, *(_DWORD *)(v3 + 48));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 32));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 128));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 128));
    }
  }
  std::string::~string((void *)(v3 + 64));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7493: range 000000000CBDF368-000000000CBDF540
int32_t __cdecl RequestHandler::delFriendAsk(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:7494";
  *(_QWORD *)(v4 + 16) = RequestHandler::delFriendAsk;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::delFriendAsk(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::delFriendAsk::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7494: range 000000000CBDEF70-000000000CBDF367
int32_t __cdecl RequestHandler::delFriendAsk(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::delFriendAsk::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-105h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-104h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-100h]
  proto::DelFriendAskOp *op; // [rsp+38h] [rbp-F8h]
  char v14[240]; // [rsp+40h] [rbp-F0h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 4 12 src_uid:7496 48 4 12 tar_uid:7497 64 32 11 ticket:7498 128 32 8 req:7516";
  *(_QWORD *)(v3 + 16) = RequestHandler::delFriendAsk(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862723] = -218959118;
  v5[536862725] = -202116109;
  *(_DWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  std::string::basic_string(v3 + 64);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 128), "src_uid", &__a);
  retcode = getRequestParam<unsigned int,char const(&)[8],unsigned int &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 128),
              (unsigned int *)(v3 + 32),
              (std::remove_reference<char const (&)[8]>::type *)"tar_uid",
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 64));
  std::string::~string((void *)(v3 + 128));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 64) )
  {
    v6 = 2012;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 32) )
      goto LABEL_16;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( !RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 32)) || !*(_DWORD *)(v3 + 48) )
      goto LABEL_16;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 48)) )
      v7 = 0;
    else
LABEL_16:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else if ( *(_DWORD *)(v3 + 32) == *(_DWORD *)(v3 + 48) )
    {
      v6 = 2039;
    }
    else
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 128));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 128));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 64));
      op = proto::OfflineMsgBin::mutable_del_friend_ask_op(msg);
      proto::DelFriendAskOp::set_target_uid(op, *(_DWORD *)(v3 + 48));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 32));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 128));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 128));
    }
  }
  std::string::~string((void *)(v3 + 64));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7530: range 000000000CBDF93A-000000000CBDFB12
int32_t __cdecl RequestHandler::nicknameAuditResult(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:7531";
  *(_QWORD *)(v4 + 16) = RequestHandler::nicknameAuditResult;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::nicknameAuditResult(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::nicknameAuditResult::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7531: range 000000000CBDF542-000000000CBDF938
int32_t __cdecl RequestHandler::nicknameAuditResult(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::nicknameAuditResult::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-145h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-144h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-140h]
  proto::NicknameAuditResultOp *op; // [rsp+38h] [rbp-138h]
  char v14[304]; // [rsp+40h] [rbp-130h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(256LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 32 1 10 is_ok:7535 48 4 8 uid:7533 64 32 13 nickname:7534 128 32 11 ticket:7536 192 32 8 req:7551";
  *(_QWORD *)(v3 + 16) = RequestHandler::nicknameAuditResult(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556927;
  v5[536862723] = -218959118;
  v5[536862725] = -218959118;
  v5[536862727] = -202116109;
  *(_DWORD *)(v3 + 48) = 0;
  std::string::basic_string(v3 + 64);
  *(_BYTE *)(v3 + 32) = 0;
  std::string::basic_string(v3 + 128);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 192), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[9],std::string &,char const(&)[6],bool &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 192),
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[9]>::type *)"nickname",
              (std::string *)(v3 + 64),
              (std::remove_reference<char const (&)[6]>::type *)"is_ok",
              (bool *)(v3 + 32),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 128));
  std::string::~string((void *)(v3 + 192));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 48) )
      goto LABEL_10;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 48)) )
      v7 = 0;
    else
LABEL_10:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else if ( (unsigned __int8)std::string::empty(v3 + 128) )
    {
      v6 = 2012;
    }
    else
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 192));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 192));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 128));
      op = proto::OfflineMsgBin::mutable_nickname_audit_result_op(msg);
      proto::NicknameAuditResultOp::set_nickname(op, (const std::string *)(v3 + 64));
      proto::NicknameAuditResultOp::set_is_ok(op, *(_BYTE *)(v3 + 32));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 48));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 192));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 192));
    }
  }
  std::string::~string((void *)(v3 + 128));
  std::string::~string((void *)(v3 + 64));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7568: range 000000000CBDFF0C-000000000CBE00E4
int32_t __cdecl RequestHandler::signatureAuditResult(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:7569";
  *(_QWORD *)(v4 + 16) = RequestHandler::signatureAuditResult;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::signatureAuditResult(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::signatureAuditResult::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7569: range 000000000CBDFB14-000000000CBDFF0A
int32_t __cdecl RequestHandler::signatureAuditResult(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::signatureAuditResult::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-145h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-144h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-140h]
  proto::SignatureAuditResultOp *op; // [rsp+38h] [rbp-138h]
  char v14[304]; // [rsp+40h] [rbp-130h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(256LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 32 1 10 is_ok:7573 48 4 8 uid:7571 64 32 14 signature:7572 128 32 11 ticket:7574 192 32 8 req:7589";
  *(_QWORD *)(v3 + 16) = RequestHandler::signatureAuditResult(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556927;
  v5[536862723] = -218959118;
  v5[536862725] = -218959118;
  v5[536862727] = -202116109;
  *(_DWORD *)(v3 + 48) = 0;
  std::string::basic_string(v3 + 64);
  *(_BYTE *)(v3 + 32) = 0;
  std::string::basic_string(v3 + 128);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 192), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[10],std::string &,char const(&)[6],bool &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 192),
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[10]>::type *)"signature",
              (std::string *)(v3 + 64),
              (std::remove_reference<char const (&)[6]>::type *)"is_ok",
              (bool *)(v3 + 32),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 128));
  std::string::~string((void *)(v3 + 192));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 48) )
      goto LABEL_10;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 48)) )
      v7 = 0;
    else
LABEL_10:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else if ( (unsigned __int8)std::string::empty(v3 + 128) )
    {
      v6 = 2012;
    }
    else
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 192));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 192));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 128));
      op = proto::OfflineMsgBin::mutable_signature_audit_result_op(msg);
      proto::SignatureAuditResultOp::set_signature(op, (const std::string *)(v3 + 64));
      proto::SignatureAuditResultOp::set_is_ok(op, *(_BYTE *)(v3 + 32));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 48));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 192));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 192));
    }
  }
  std::string::~string((void *)(v3 + 128));
  std::string::~string((void *)(v3 + 64));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7606: range 000000000CBE00E6-000000000CBE05BA
int32_t __cdecl RequestHandler::queryMusicV3UgcInfo(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  int32_t v7; // r14d
  common::milog::MiLogStream *v8; // rax
  const proto::UgcMusicBriedRedisData *v9; // rax
  unsigned int v10; // eax
  Json::Value_0 *v11; // rax
  const proto::UgcMusicBriedRedisData *v12; // rax
  unsigned int v13; // eax
  Json::Value_0 *v14; // rax
  const proto::UgcMusicBriedRedisData *v15; // rax
  google::protobuf::uint64 v16; // rax
  Json::Value_0 *v17; // rax
  Json::Value_0 *v18; // rax
  int32_t result; // eax
  int32_t retcode; // [rsp+2Ch] [rbp-144h]
  int32_t retcodea; // [rsp+2Ch] [rbp-144h]
  std::string key; // [rsp+30h] [rbp-140h] BYREF
  Json::Value_0 other; // [rsp+50h] [rbp-120h] BYREF
  char v25[240]; // [rsp+80h] [rbp-F0h] BYREF

  v4 = (unsigned __int64)v25;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(192LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "3 48 1 13 is_exist:7613 64 8 13 ugc_guid:7607 96 64 25 redis_data_ugc_brief:7616";
  *(_QWORD *)(v4 + 16) = RequestHandler::queryMusicV3UgcInfo;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234753551;
  v6[536862722] = -218959360;
  v6[536862725] = -202116109;
  *(_QWORD *)(v4 + 64) = 0LL;
  std::allocator<char>::allocator(v4 + 48);
  std::string::basic_string<std::allocator<char>>(&key, "ugc_guid", (const std::allocator<char> *)(v4 + 48));
  retcode = getRequestParam<unsigned long>(request, &key, (unsigned __int64 *)(v4 + 64));
  std::string::~string(&key);
  std::allocator<char>::~allocator(v4 + 48);
  if ( retcode )
  {
    v7 = retcode;
  }
  else
  {
    *(_BYTE *)(v4 + 48) = 0;
    proto::UgcBriefRedisData::UgcBriefRedisData((proto::UgcBriefRedisData *const)(v4 + 96));
    retcodea = RedisOpActivity::getUgcBrief(
                 *(_QWORD *)(v4 + 64),
                 (proto::UgcBriefRedisData *)(v4 + 96),
                 (bool *)(v4 + 48));
    if ( retcodea )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "queryMusicV3UgcInfo",
        7620);
      v8 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
             (common::milog::MiLogStream *const)&key,
             (const char (*)[44])"[Ugc] get data from redis failed, ugc_guid:");
      common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v8, (const unsigned __int64 *)(v4 + 64));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      v7 = retcodea;
    }
    else if ( *(_BYTE *)(v4 + 48) != 1 )
    {
      v7 = 2001;
    }
    else
    {
      v9 = proto::UgcBriefRedisData::music_brief((const proto::UgcBriefRedisData *const)(v4 + 96));
      v10 = proto::UgcMusicBriedRedisData::music_id(v9);
      Json::Value::Value((Json::Value *)&other, v10);
      v11 = Json::Value::operator[]((Json::Value_0 *const)jval, "music_id");
      Json::Value::operator=(v11, &other);
      Json::Value::~Value(&other);
      v12 = proto::UgcBriefRedisData::music_brief((const proto::UgcBriefRedisData *const)(v4 + 96));
      v13 = proto::UgcMusicBriedRedisData::note_count(v12);
      Json::Value::Value((Json::Value *)&other, v13);
      v14 = Json::Value::operator[]((Json::Value_0 *const)jval, "note_count");
      Json::Value::operator=(v14, &other);
      Json::Value::~Value(&other);
      v15 = proto::UgcBriefRedisData::music_brief((const proto::UgcBriefRedisData *const)(v4 + 96));
      v16 = proto::UgcMusicBriedRedisData::import_from_ugc_guid(v15);
      Json::Value::Value((Json::Value *)&other, v16 == 0);
      v17 = Json::Value::operator[]((Json::Value_0 *const)jval, "is_original");
      Json::Value::operator=(v17, &other);
      Json::Value::~Value(&other);
      Json::Value::Value((Json::Value *)&other, *(_QWORD *)(v4 + 64));
      v18 = Json::Value::operator[]((Json::Value_0 *const)jval, "auth_uid");
      Json::Value::operator=(v18, &other);
      Json::Value::~Value(&other);
      v7 = 0;
    }
    proto::UgcBriefRedisData::~UgcBriefRedisData((proto::UgcBriefRedisData *const)(v4 + 96));
  }
  result = v7;
  if ( v25 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7637: range 000000000CBE0998-000000000CBE15D9
int32_t __cdecl RequestHandler::banPlayerUgcPublishAndRemoveAllMusicV3UgcPublished(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  int32_t v7; // r14d
  common::milog::MiLogStream *v8; // rax
  const google::protobuf::Map<unsigned int,proto::ActivityBin> *v9; // rax
  google::protobuf::Map<unsigned int,proto::ActivityBin>::const_pointer v10; // rax
  const proto::ActivityScheduleBin *v11; // rax
  unsigned __int64 v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  google::protobuf::Map<unsigned int,proto::ActivityBin>::key_type v21; // [rsp+28h] [rbp-688h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-684h]
  uint32_t expire_time; // [rsp+30h] [rbp-680h]
  int32_t ret; // [rsp+34h] [rbp-67Ch]
  std::set<long unsigned int>::iterator __for_begin; // [rsp+38h] [rbp-678h] BYREF
  std::set<long unsigned int>::iterator __for_end; // [rsp+40h] [rbp-670h] BYREF
  const proto::PlayerActivityCompBin *activity_bin; // [rsp+48h] [rbp-668h]
  const proto::MusicGameScheduleBin *music_game_schedule_bin; // [rsp+50h] [rbp-660h]
  const google::protobuf::RepeatedPtrField<proto::MusicGameUgcSaveBin> *__for_range; // [rsp+58h] [rbp-658h]
  const proto::MusicGameUgcSaveBin *music_save_bin; // [rsp+60h] [rbp-650h]
  std::set<long unsigned int> *__for_range_0; // [rsp+68h] [rbp-648h]
  google::protobuf::Map<unsigned int,proto::ActivityBin>::const_iterator b; // [rsp+70h] [rbp-640h] BYREF
  std::string key; // [rsp+90h] [rbp-620h] BYREF
  RequestHandler::banPlayerUgcPublishAndRemoveAllMusicV3UgcPublished::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> p___f; // [rsp+B0h] [rbp-600h] BYREF
  char v35[1488]; // [rsp+E0h] [rbp-5D0h] BYREF

  v4 = (unsigned __int64)v35;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_5(1440LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "12 32 1 13 is_exist:7676 48 4 8 uid:7638 64 4 13 ban_time:7639 80 8 13 ugc_guid:7714 112 24 21 a"
                        "ctivity_bin_map:7703 176 24 9 iter:7704 240 32 11 ticket:7640 304 32 13 bin_data:7688 368 48 18 "
                        "make_req_func:7650 448 48 17 ugc_guid_set:7701 528 192 20 player_data_row:7677 784 520 20 player_data_bin:7694";
  *(_QWORD *)(v4 + 16) = RequestHandler::banPlayerUgcPublishAndRemoveAllMusicV3UgcPublished;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556927;
  v6[536862722] = 61956;
  v6[536862722] = -234881024;
  v6[536862723] = 62194;
  v6[536862724] = -218959360;
  v6[536862725] = 62194;
  v6[536862726] = -218959360;
  v6[536862727] = 62194;
  v6[536862728] = -219021312;
  v6[536862729] = 62194;
  v6[536862730] = -219021312;
  v6[536862731] = 62194;
  v6[536862733] = -218959118;
  v6[536862735] = -219021312;
  v6[536862736] = 62194;
  v6[536862742] = -219021312;
  v6[536862743] = -218959118;
  v6[536862744] = 62194;
  v6[536862760] = -218103808;
  v6[536862761] = -202116109;
  v6[536862762] = -202116109;
  v6[536862763] = -202116109;
  v6[536862764] = -202116109;
  *(_DWORD *)(v4 + 48) = 0;
  *(_DWORD *)(v4 + 64) = 0;
  std::string::basic_string(v4 + 240);
  std::allocator<char>::allocator(v4 + 32);
  std::string::basic_string<std::allocator<char>>(&key, off_1A660020, (const std::allocator<char> *)(v4 + 32));
  retcode = getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[7],std::string &>(
              request,
              &key,
              (unsigned int *)(v4 + 48),
              (std::remove_reference<char const (&)[9]>::type *)"ban_time",
              (unsigned int *)(v4 + 64),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v4 + 240));
  std::string::~string(&key);
  std::allocator<char>::~allocator(v4 + 32);
  if ( retcode )
  {
    v7 = retcode;
  }
  else
  {
    expire_time = 0;
    expire_time = common::tools::TimeUtils::getNow() + *(_DWORD *)(v4 + 64);
    *(_QWORD *)(v4 + 368) = this;
    *(_DWORD *)(v4 + 376) = *(_DWORD *)(v4 + 48);
    *(_DWORD *)(v4 + 380) = expire_time;
    std::string::basic_string(v4 + 384, v4 + 240);
    boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
      (boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > *const)(v4 + 448),
      p_yield);
    std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
      (std::function<int(common::minet::Packet&,Json::Value&)> *const)&key,
      (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
    RequestHandler::banPlayerUgcPublishAndRemoveAllMusicV3UgcPublished(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::Packet(
      &p___f,
      (const RequestHandler::banPlayerUgcPublishAndRemoveAllMusicV3UgcPublished::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 368));
    std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::banPlayerUgcPublishAndRemoveAllMusicV3UgcPublished(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
      (std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> *const)(v4 + 304),
      &p___f);
    ret = RequestHandler::processRequestOnOtherServer(
            this,
            (RequestHandler::MakeReqFunc *)(v4 + 304),
            (RequestHandler::MakeRspFunc *)&key,
            request,
            jval,
            (boost::asio::yield_context *)(v4 + 448));
    std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function((std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> *const)(v4 + 304));
    RequestHandler::banPlayerUgcPublishAndRemoveAllMusicV3UgcPublished(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::~Packet(&p___f);
    std::function<int ()(common::minet::Packet &,Json::Value &)>::~function((std::function<int(common::minet::Packet&,Json::Value&)> *const)&key);
    boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context((boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > *const)(v4 + 448));
    if ( ret )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "banPlayerUgcPublishAndRemoveAllMusicV3UgcPublished",
        7666);
      v8 = common::milog::MiLogStream::operator<<<char [50],(char *[50])0>(
             (common::milog::MiLogStream *const)&key,
             (const char (*)[50])"ban ugc publish request other server failed, uid:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v4 + 48));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      v7 = ret;
    }
    else if ( *(_DWORD *)(v4 + 64) )
    {
      *(_BYTE *)(v4 + 32) = 0;
      TablePlayerData::TablePlayerData((TablePlayerData *const)(v4 + 528));
      if ( MysqlOpPlayerData::selectPlayerDataByUid(
             *(_DWORD *)(v4 + 48),
             (TablePlayerData *)(v4 + 528),
             (bool *)(v4 + 32)) )
      {
        v7 = 2;
      }
      else if ( *(_BYTE *)(v4 + 32) != 1 )
      {
        v7 = 2001;
      }
      else
      {
        std::string::basic_string(v4 + 304);
        mysqlpp::String::to_string((const mysqlpp::String *const)(v4 + 616), (std::string *)(v4 + 304));
        if ( common::tools::ZlibUtil::isCompressWithPad((const std::string *)(v4 + 304)) )
        {
          common::tools::ZlibUtil::uncompressWithPad(&key, (const std::string *)(v4 + 304));
          std::string::operator=(v4 + 304, &key);
          std::string::~string(&key);
        }
        proto::PlayerDataBin::PlayerDataBin((proto::PlayerDataBin *const)(v4 + 784));
        if ( (unsigned __int8)google::protobuf::MessageLite::ParseFromString(v4 + 784, v4 + 304) != 1 )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&key,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/handler/request_handler.api.hpp",
            "banPlayerUgcPublishAndRemoveAllMusicV3UgcPublished",
            7697);
          common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
            (common::milog::MiLogStream *const)&key,
            (const char (*)[39])"player_data_bin ParseFromString failed");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
          v7 = 2;
        }
        else
        {
          std::set<unsigned long>::set((std::set<long unsigned int> *const)(v4 + 448));
          activity_bin = proto::PlayerDataBin::activity_bin((const proto::PlayerDataBin *const)(v4 + 784));
          v9 = proto::PlayerActivityCompBin::activity_bin_map(activity_bin);
          google::protobuf::Map<unsigned int,proto::ActivityBin>::Map(
            (google::protobuf::Map<unsigned int,proto::ActivityBin> *const)(v4 + 112),
            v9);
          v21 = 5072;
          google::protobuf::Map<unsigned int,proto::ActivityBin>::find(
            (google::protobuf::Map<unsigned int,proto::ActivityBin>::const_iterator *)(v4 + 176),
            (const google::protobuf::Map<unsigned int,proto::ActivityBin> *const)(v4 + 112),
            &v21);
          google::protobuf::Map<unsigned int,proto::ActivityBin>::end(
            &b,
            (const google::protobuf::Map<unsigned int,proto::ActivityBin> *const)(v4 + 112));
          if ( google::protobuf::operator!=(
                 (const google::protobuf::Map<unsigned int,proto::ActivityBin>::const_iterator *)(v4 + 176),
                 &b) )
          {
            v10 = google::protobuf::Map<unsigned int,proto::ActivityBin>::const_iterator::operator->((const google::protobuf::Map<unsigned int,proto::ActivityBin>::const_iterator *const)(v4 + 176));
            v11 = proto::ActivityBin::schedule_bin(&v10->second);
            music_game_schedule_bin = proto::ActivityScheduleBin::music_game_bin(v11);
            __for_range = proto::MusicGameScheduleBin::music_game_ugc_save_bin(music_game_schedule_bin);
            *(google::protobuf::RepeatedPtrField<proto::MusicGameUgcSaveBin>::const_iterator *)(v4 + 80) = google::protobuf::RepeatedPtrField<proto::MusicGameUgcSaveBin>::begin(__for_range);
            __for_begin._M_node = (std::_Rb_tree_const_iterator<long unsigned int>::_Base_ptr)google::protobuf::RepeatedPtrField<proto::MusicGameUgcSaveBin>::end(__for_range).it_;
            while ( google::protobuf::internal::RepeatedPtrIterator<proto::MusicGameUgcSaveBin const>::operator!=(
                      (const google::protobuf::internal::RepeatedPtrIterator<const proto::MusicGameUgcSaveBin> *const)(v4 + 80),
                      (const google::protobuf::internal::RepeatedPtrIterator<const proto::MusicGameUgcSaveBin>::iterator *)&__for_begin) )
            {
              music_save_bin = google::protobuf::internal::RepeatedPtrIterator<proto::MusicGameUgcSaveBin const>::operator*((const google::protobuf::internal::RepeatedPtrIterator<const proto::MusicGameUgcSaveBin> *const)(v4 + 80));
              __for_end._M_node = (std::_Rb_tree_const_iterator<long unsigned int>::_Base_ptr)proto::MusicGameUgcSaveBin::ugc_guid(music_save_bin);
              std::set<unsigned long>::insert(
                (std::set<long unsigned int> *const)(v4 + 448),
                (std::set<long unsigned int>::value_type *)&__for_end);
              google::protobuf::internal::RepeatedPtrIterator<proto::MusicGameUgcSaveBin const>::operator++((google::protobuf::internal::RepeatedPtrIterator<const proto::MusicGameUgcSaveBin> *const)(v4 + 80));
            }
          }
          __for_range_0 = (std::set<long unsigned int> *)(v4 + 448);
          __for_begin._M_node = std::set<unsigned long>::begin((const std::set<long unsigned int> *const)(v4 + 448))._M_node;
          __for_end._M_node = std::set<unsigned long>::end(__for_range_0)._M_node;
          while ( std::operator!=(&__for_begin, &__for_end) )
          {
            v12 = (unsigned __int64)std::_Rb_tree_const_iterator<unsigned long>::operator*(&__for_begin);
            if ( *(_BYTE *)((v12 >> 3) + 0x7FFF8000) )
              v12 = __asan_report_load8(v12);
            *(_QWORD *)(v4 + 80) = *(_QWORD *)v12;
            if ( RedisOpActivity::removeUgcPublish(*(_QWORD *)(v4 + 80)) )
            {
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)&key,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/handler/request_handler.api.hpp",
                "banPlayerUgcPublishAndRemoveAllMusicV3UgcPublished",
                7718);
              v13 = common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
                      (common::milog::MiLogStream *const)&key,
                      (const char (*)[34])"del ugc publish failed, ugc_guid:");
              common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                v13,
                (const unsigned __int64 *)(v4 + 80));
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
            }
            if ( RedisOpActivity::removeUgcBrief(*(_QWORD *)(v4 + 80)) )
            {
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)&key,
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/handler/request_handler.api.hpp",
                "banPlayerUgcPublishAndRemoveAllMusicV3UgcPublished",
                7722);
              v14 = common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                      (common::milog::MiLogStream *const)&key,
                      (const char (*)[32])"del ugc brief failed, ugc_guid:");
              common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
                v14,
                (const unsigned __int64 *)(v4 + 80));
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)&key,
              &common::milog::MiLogDefault::default_log_obj_,
              1u,
              "./src/handler/request_handler.api.hpp",
              "banPlayerUgcPublishAndRemoveAllMusicV3UgcPublished",
              7724);
            v15 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(
                    (common::milog::MiLogStream *const)&key,
                    (const char (*)[13])"offline uid:");
            v16 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(
                    v15,
                    (const unsigned int *)(v4 + 48));
            v17 = common::milog::MiLogStream::operator<<<char [15],(char *[15])0>(
                    v16,
                    (const char (*)[15])" del ugc_guid:");
            common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
              v17,
              (const unsigned __int64 *)(v4 + 80));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
            std::_Rb_tree_const_iterator<unsigned long>::operator++(&__for_begin);
          }
          v7 = 0;
          google::protobuf::Map<unsigned int,proto::ActivityBin>::~Map((google::protobuf::Map<unsigned int,proto::ActivityBin> *const)(v4 + 112));
          std::set<unsigned long>::~set((std::set<long unsigned int> *const)(v4 + 448));
        }
        proto::PlayerDataBin::~PlayerDataBin((proto::PlayerDataBin *const)(v4 + 784));
        std::string::~string((void *)(v4 + 304));
      }
      TablePlayerData::~TablePlayerData((TablePlayerData *const)(v4 + 528));
    }
    else
    {
      v7 = 0;
    }
    RequestHandler::banPlayerUgcPublishAndRemoveAllMusicV3UgcPublished(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::~Packet((RequestHandler::banPlayerUgcPublishAndRemoveAllMusicV3UgcPublished::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const)(v4 + 368));
  }
  std::string::~string((void *)(v4 + 240));
  if ( v35 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8034) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF803C) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8058) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8060) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF80A0) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF80A8) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF80B0) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    __asan_stack_free_5(v4, 1440LL, v35);
  }
  return v7;
};

// Line 7650: range 000000000CBE05BC-000000000CBE07FE
int32_t __cdecl RequestHandler::banPlayerUgcPublishAndRemoveAllMusicV3UgcPublished(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::banPlayerUgcPublishAndRemoveAllMusicV3UgcPublished::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  proto::SendOfflineMsgReq *v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r12
  int32_t result; // eax
  proto::OfflineMsgBin *msg; // [rsp+20h] [rbp-A0h]
  proto::BanUgcPublishOp *ban_ugc_publish_op; // [rsp+28h] [rbp-98h]
  char v10[144]; // [rsp+30h] [rbp-90h] BYREF

  v3 = (proto::SendOfflineMsgReq *)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = (proto::SendOfflineMsgReq *)v4;
  }
  v3->_vptr_MessageLite = (int (**)(...))1102416563;
  v3->_internal_metadata_.ptr_ = "1 32 32 8 req:7652";
  v3->msg_ = (proto::OfflineMsgBin *)RequestHandler::banPlayerUgcPublishAndRemoveAllMusicV3UgcPublished(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (unsigned __int64)v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450888) = -202116109;
  proto::SendOfflineMsgReq::SendOfflineMsgReq(v3 + 1);
  msg = proto::SendOfflineMsgReq::mutable_msg(v3 + 1);
  proto::OfflineMsgBin::set_ticket(msg, &__closure->__ticket);
  ban_ugc_publish_op = proto::OfflineMsgBin::mutable_ban_ugc_publish_op(msg);
  if ( *(_BYTE *)(((unsigned __int64)&__closure->__expire_time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)__closure + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&__closure->__expire_time >> 3)
                                                             + 0x7FFF8000) )
  {
    __asan_report_load4(&__closure->__expire_time);
  }
  proto::BanUgcPublishOp::set_ban_publish_expire_time(ban_ugc_publish_op, __closure->__expire_time);
  if ( *(_BYTE *)(((unsigned __int64)&__closure->__uid >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&__closure->__uid >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&__closure->__uid);
  }
  common::minet::Packet::setUserId(packet, __closure->__uid);
  common::minet::Packet::setTargetService(packet, 9u);
  common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, v3 + 1);
  proto::SendOfflineMsgReq::~SendOfflineMsgReq(v3 + 1);
  result = 0;
  if ( v10 == (char *)v3 )
  {
    *(_DWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    v3->_vptr_MessageLite = (int (**)(...))1172321806;
    *(_QWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 7650: range 000000000CC19884-000000000CC199FB
void __cdecl RequestHandler::banPlayerUgcPublishAndRemoveAllMusicV3UgcPublished(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::Packet(
        RequestHandler::banPlayerUgcPublishAndRemoveAllMusicV3UgcPublished::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const this,
        RequestHandler::banPlayerUgcPublishAndRemoveAllMusicV3UgcPublished::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *a2)
{
  RequestHandler *v2; // rdx
  uint32_t uid; // ecx
  char v4; // al
  __int64 v5; // rsi
  uint32_t expire_time; // ecx
  char v7; // dl
  RequestHandler::banPlayerUgcPublishAndRemoveAllMusicV3UgcPublished::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *v8; // [rsp+0h] [rbp-10h]

  v8 = a2;
  if ( *(_BYTE *)(((unsigned __int64)a2 >> 3) + 0x7FFF8000) )
    __asan_report_load8(a2);
  v2 = a2->__this;
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->__this = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->__uid >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->__uid >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->__uid);
  }
  uid = a2->__uid;
  v4 = *(_BYTE *)(((unsigned __int64)&this->__uid >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->__uid, a2);
  }
  this->__uid = uid;
  v5 = (((_BYTE)v8 + 12) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&v8->__expire_time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v8 + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v8->__expire_time >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v8->__expire_time);
  }
  expire_time = v8->__expire_time;
  v7 = *(_BYTE *)(((unsigned __int64)&this->__expire_time >> 3) + 0x7FFF8000);
  if ( v7 != 0 && (char)((((_BYTE)this + 12) & 7) + 3) >= v7 )
  {
    LOBYTE(v5) = v7 != 0;
    __asan_report_store4(&this->__expire_time, v5);
  }
  this->__expire_time = expire_time;
  std::string::basic_string(&this->__ticket, &v8->__ticket);
};

// Line 7650: range 000000000CBE0820-000000000CBE0997
void __cdecl RequestHandler::banPlayerUgcPublishAndRemoveAllMusicV3UgcPublished(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::Packet(
        RequestHandler::banPlayerUgcPublishAndRemoveAllMusicV3UgcPublished::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const this,
        const RequestHandler::banPlayerUgcPublishAndRemoveAllMusicV3UgcPublished::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *a2)
{
  RequestHandler *v2; // rdx
  uint32_t uid; // ecx
  char v4; // al
  __int64 v5; // rsi
  uint32_t expire_time; // ecx
  char v7; // dl
  const RequestHandler::banPlayerUgcPublishAndRemoveAllMusicV3UgcPublished::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *v8; // [rsp+0h] [rbp-10h]

  v8 = a2;
  if ( *(_BYTE *)(((unsigned __int64)a2 >> 3) + 0x7FFF8000) )
    __asan_report_load8(a2);
  v2 = a2->__this;
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->__this = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->__uid >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->__uid >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->__uid);
  }
  uid = a2->__uid;
  v4 = *(_BYTE *)(((unsigned __int64)&this->__uid >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->__uid, a2);
  }
  this->__uid = uid;
  v5 = (((_BYTE)v8 + 12) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&v8->__expire_time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v8 + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v8->__expire_time >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v8->__expire_time);
  }
  expire_time = v8->__expire_time;
  v7 = *(_BYTE *)(((unsigned __int64)&this->__expire_time >> 3) + 0x7FFF8000);
  if ( v7 != 0 && (char)((((_BYTE)this + 12) & 7) + 3) >= v7 )
  {
    LOBYTE(v5) = v7 != 0;
    __asan_report_store4(&this->__expire_time, v5);
  }
  this->__expire_time = expire_time;
  std::string::basic_string(&this->__ticket, &v8->__ticket);
};

// Line 7650: range 000000000CBE0800-000000000CBE081E
void __cdecl RequestHandler::banPlayerUgcPublishAndRemoveAllMusicV3UgcPublished(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::~Packet(
        RequestHandler::banPlayerUgcPublishAndRemoveAllMusicV3UgcPublished::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const this)
{
  std::string::~string(&this->__ticket);
};

// Line 7732: range 000000000CBE15DA-000000000CBE1C65
int32_t __cdecl RequestHandler::deletePlayerPsnOnlineIdData(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  int32_t v7; // r14d
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  int32_t result; // eax
  int32_t retcode; // [rsp+2Ch] [rbp-1B4h]
  int32_t retcodea; // [rsp+2Ch] [rbp-1B4h]
  int32_t retcodeb; // [rsp+2Ch] [rbp-1B4h]
  std::string key; // [rsp+30h] [rbp-1B0h] BYREF
  char v28[400]; // [rsp+50h] [rbp-190h] BYREF

  v4 = (unsigned __int64)v28;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_3(352LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "5 32 1 21 is_account_exist:7748 48 4 17 account_type:7733 64 32 16 account_uid:7734 128 32 11 ps"
                        "n_id:7735 192 120 8 row:7749";
  *(_QWORD *)(v4 + 16) = RequestHandler::deletePlayerPsnOnlineIdData;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556927;
  v6[536862723] = -218959118;
  v6[536862725] = -218959118;
  v6[536862729] = -218103808;
  v6[536862730] = -202116109;
  *(_DWORD *)(v4 + 48) = 0;
  std::string::basic_string(v4 + 64);
  std::string::basic_string(v4 + 128);
  std::allocator<char>::allocator(v4 + 32);
  std::string::basic_string<std::allocator<char>>(&key, "account_type", (const std::allocator<char> *)(v4 + 32));
  retcode = getRequestParam<unsigned int,char const(&)[12],std::string &,char const(&)[7],std::string &>(
              request,
              &key,
              (unsigned int *)(v4 + 48),
              "account_uid",
              (std::string *)(v4 + 64),
              (std::remove_reference<char const (&)[7]>::type *)"psn_id",
              (std::string *)(v4 + 128));
  std::string::~string(&key);
  std::allocator<char>::~allocator(v4 + 32);
  if ( retcode )
  {
    v7 = retcode;
  }
  else if ( *(_DWORD *)(v4 + 48) != 1
         || (unsigned __int8)std::string::empty(v4 + 64)
         || (unsigned __int8)std::string::empty(v4 + 128) )
  {
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&key,
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/handler/request_handler.api.hpp",
      "deletePlayerPsnOnlineIdData",
      7744);
    v9 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
           (common::milog::MiLogStream *const)&key,
           (const char (*)[28])"param error, account_type: ");
    v10 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v9, (const unsigned int *)(v4 + 48));
    v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(v10, (const char (*)[16])" ,account_uid: ");
    v12 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v11, (const std::string *)(v4 + 64));
    v13 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(v12, (const char (*)[11])" ,psn_id: ");
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v13, (const std::string *)(v4 + 128));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
    v7 = 1002;
  }
  else
  {
    *(_BYTE *)(v4 + 32) = 0;
    TablePlayerUid::TablePlayerUid((TablePlayerUid *const)(v4 + 192));
    retcodea = MysqlOpPlayerData::selectPlayerUidByAccount(
                 *(_DWORD *)(v4 + 48),
                 (const std::string *)(v4 + 64),
                 (TablePlayerUid *)(v4 + 192),
                 (bool *)(v4 + 32));
    if ( retcodea )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "deletePlayerPsnOnlineIdData",
        7753);
      v14 = common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
              (common::milog::MiLogStream *const)&key,
              (const char (*)[47])"selectPlayerUidByAccount failed, account_type:");
      v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, (const unsigned int *)(v4 + 48));
      v16 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v15, (const char (*)[14])" account_uid:");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v16, (const std::string *)(v4 + 64));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      v7 = retcodea;
    }
    else if ( *(_BYTE *)(v4 + 32) != 1 )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/handler/request_handler.api.hpp",
        "deletePlayerPsnOnlineIdData",
        7758);
      v17 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
              (common::milog::MiLogStream *const)&key,
              (const char (*)[35])"account is not exit, account_type:");
      v18 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(v4 + 48));
      v19 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v18, (const char (*)[14])" account_uid:");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v19, (const std::string *)(v4 + 64));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      v7 = 0;
    }
    else
    {
      retcodeb = MysqlOpPlayerPsnOnlineIdData::deletePlayerPsnOnlineIdData(
                   (const std::string *)(v4 + 128),
                   *(_DWORD *)(v4 + 192));
      if ( retcodeb )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&key,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/handler/request_handler.api.hpp",
          "deletePlayerPsnOnlineIdData",
          7765);
        v20 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
                (common::milog::MiLogStream *const)&key,
                (const char (*)[45])"deletePlayerPsnOnlineIdData failed, psn_id: ");
        v21 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v20, (const std::string *)(v4 + 128));
        v22 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(v21, (const char (*)[8])" ,uid: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v22, (const unsigned int *)(v4 + 192));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
        v7 = retcodeb;
      }
      else
      {
        v7 = 0;
      }
    }
    TablePlayerUid::~TablePlayerUid((TablePlayerUid *const)(v4 + 192));
  }
  std::string::~string((void *)(v4 + 128));
  std::string::~string((void *)(v4 + 64));
  result = v7;
  if ( v28 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8014) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8024) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 7774: range 000000000CBE1C66-000000000CBE267E
int32_t __cdecl RequestHandler::queryPlayerBeforeLoginBinData(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  int32_t v4; // r14d
  unsigned __int64 v5; // r13
  __int64 v6; // rax
  _DWORD *v7; // r12
  common::milog::MiLogStream *v8; // rax
  Json::Value_0 *v9; // rax
  Json::Value_0 *v10; // rax
  Json::Value_0 *v11; // rax
  _BOOL4 v12; // r15d
  common::milog::MiLogStream *v13; // rax
  _BOOL4 v14; // r15d
  common::milog::MiLogStream *v15; // rax
  int v16; // r15d
  Json::Value *v17; // rax
  int32_t result; // eax
  int v19; // [rsp+0h] [rbp-410h]
  char *v20; // [rsp+8h] [rbp-408h]
  int p_yielda; // [rsp+10h] [rbp-400h]
  Json::Value *jvalb; // [rsp+18h] [rbp-3F8h]
  std::allocator<char> __a; // [rsp+37h] [rbp-3D9h] BYREF
  int32_t retcode; // [rsp+38h] [rbp-3D8h]
  int32_t ret; // [rsp+3Ch] [rbp-3D4h]
  std::string key; // [rsp+40h] [rbp-3D0h] BYREF
  char v28[944]; // [rsp+60h] [rbp-3B0h] BYREF

  p_yielda = (int)p_yield;
  v5 = (unsigned __int64)v28;
  v20 = v28;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v6 = __asan_stack_malloc_4(896LL);
    if ( v6 )
      v5 = v6;
  }
  *(_QWORD *)v5 = 1102416563LL;
  *(_QWORD *)(v5 + 8) = "10 32 1 13 is_exist:7786 48 4 8 uid:7775 64 4 12 options:7813 80 32 26 before_login_bin_data:779"
                        "7 144 32 16 json_string:7812 208 40 33 player_before_login_data_bin:7799 288 40 15 status_ret:78"
                        "17 368 40 15 json_value:7824 448 80 8 row:7785 560 272 16 json_reader:7823";
  *(_QWORD *)(v5 + 16) = RequestHandler::queryPlayerBeforeLoginBinData;
  v7 = (_DWORD *)(v5 >> 3);
  v7[536862720] = -235802127;
  v7[536862721] = -234556927;
  v7[536862722] = 61956;
  v7[536862723] = -219021312;
  v7[536862724] = 62194;
  v7[536862725] = -219021312;
  v7[536862726] = 62194;
  v7[536862727] = -234881024;
  v7[536862728] = -218959118;
  v7[536862730] = -218959360;
  v7[536862731] = 62194;
  v7[536862732] = -234881024;
  v7[536862733] = -218959118;
  v7[536862736] = -219021312;
  v7[536862737] = 62194;
  v7[536862746] = -202116109;
  v7[536862747] = -202116109;
  *(_DWORD *)(v5 + 48) = 0;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&key, off_1A660020, &__a);
  retcode = getRequestParam<unsigned int>(request, &key, (unsigned int *)(v5 + 48));
  std::string::~string(&key);
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v4 = retcode;
  }
  else if ( *(_DWORD *)(v5 + 48) )
  {
    TablePlayerJsonAndExtraBinData::TablePlayerJsonAndExtraBinData((TablePlayerJsonAndExtraBinData *const)(v5 + 448));
    *(_BYTE *)(v5 + 32) = 0;
    ret = MysqlOpPlayerData::selectPlayerJsonAndExtraBinDataByUid(
            *(_DWORD *)(v5 + 48),
            (TablePlayerJsonAndExtraBinData *)(v5 + 448),
            (bool *)(v5 + 32));
    if ( ret )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "queryPlayerBeforeLoginBinData",
        7790);
      v8 = common::milog::MiLogStream::operator<<<char [51],(char *[51])0>(
             (common::milog::MiLogStream *const)&key,
             (const char (*)[51])"selectPlayerJsonAndExtraBinDataByUid failed , uid:");
      common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v5 + 48));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
      v4 = ret;
    }
    else
    {
      Json::Value::Value((Json::Value *)(v5 + 368), *(_DWORD *)(v5 + 48));
      v9 = Json::Value::operator[]((Json::Value_0 *const)jval, off_1A660020);
      Json::Value::operator=(v9, (Json::Value_0 *)(v5 + 368));
      Json::Value::~Value((Json::Value_0 *const)(v5 + 368));
      Json::Value::Value((Json::Value *)(v5 + 368), *(_BYTE *)(v5 + 32));
      v10 = Json::Value::operator[]((Json::Value_0 *const)jval, "is_exist");
      Json::Value::operator=(v10, (Json::Value_0 *)(v5 + 368));
      Json::Value::~Value((Json::Value_0 *const)(v5 + 368));
      if ( !*(_BYTE *)(v5 + 32) )
        goto LABEL_23;
      std::string::basic_string(v5 + 80);
      mysqlpp::String::to_string((const mysqlpp::String *const)(v5 + 504), (std::string *)(v5 + 80));
      proto::PlayerBeforeLoginBinData::PlayerBeforeLoginBinData((proto::PlayerBeforeLoginBinData *const)(v5 + 208));
      if ( (unsigned __int8)std::string::empty(v5 + 80) )
      {
        Json::Value::Value((Json::Value *)(v5 + 368), byte_1A5D1560);
        v11 = Json::Value::operator[]((Json::Value_0 *const)jval, "before_login_bin_data");
        Json::Value::operator=(v11, (Json::Value_0 *)(v5 + 368));
        Json::Value::~Value((Json::Value_0 *const)(v5 + 368));
        v4 = 0;
        v12 = 0;
      }
      else if ( (unsigned __int8)google::protobuf::MessageLite::ParseFromString(v5 + 208, v5 + 80) != 1 )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&key,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/handler/request_handler.api.hpp",
          "queryPlayerBeforeLoginBinData",
          7809);
        common::milog::MiLogStream::operator<<<char [51],(char *[51])0>(
          (common::milog::MiLogStream *const)&key,
          (const char (*)[51])"player_before_login_data_bin ParseFromString fails");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
        v4 = -1;
        v12 = 0;
      }
      else
      {
        std::allocator<char>::allocator(&__a);
        std::string::basic_string<std::allocator<char>>((std::string *const)(v5 + 144), byte_1A5D1560, &__a);
        std::allocator<char>::~allocator(&__a);
        google::protobuf::util::JsonPrintOptions::JsonPrintOptions((google::protobuf::util::JsonPrintOptions *const)(v5 + 64));
        *(_BYTE *)(v5 + 64) = 1;
        *(_BYTE *)(v5 + 65) = 1;
        *(_BYTE *)(v5 + 67) = 1;
        google::protobuf::util::MessageToJsonString(
          (google::protobuf::util::Status *)(v5 + 288),
          (google::protobuf::Message *)(v5 + 208),
          v19,
          v28,
          p_yielda,
          (char)jval,
          (int)request,
          this);
        if ( !google::protobuf::util::Status::ok((const google::protobuf::util::Status *const)(v5 + 288)) )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&key,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/handler/request_handler.api.hpp",
            "queryPlayerBeforeLoginBinData",
            7820);
          v13 = common::milog::MiLogStream::operator<<<char [64],(char *[64])0>(
                  (common::milog::MiLogStream *const)&key,
                  (const char (*)[64])"player_before_login_data_bin to json_string failed player_uid: ");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v13, (const unsigned int *)(v5 + 48));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
          v4 = -1;
          v14 = 0;
        }
        else
        {
          Json::Reader::Reader((Json::Reader *)(v5 + 560));
          Json::Value::Value(v5 + 368, 0LL);
          if ( !Json::Reader::parse(
                  (Json::Reader *const)(v5 + 560),
                  (const std::string *)(v5 + 144),
                  (Json::Value *)(v5 + 368),
                  1) )
          {
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)&key,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/handler/request_handler.api.hpp",
              "queryPlayerBeforeLoginBinData",
              7827);
            v15 = common::milog::MiLogStream::operator<<<char [75],(char *[75])0>(
                    (common::milog::MiLogStream *const)&key,
                    (const char (*)[75])"player_before_login_data_bin json_string to json_value failed player_uid: ");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v15, (const unsigned int *)(v5 + 48));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
            v4 = -1;
            v16 = 0;
          }
          else
          {
            v17 = (Json::Value *)Json::Value::operator[]((Json::Value_0 *const)jvalb, "before_login_bin_data");
            Json::Value::operator=(v17);
            v16 = 1;
          }
          Json::Value::~Value((Json::Value_0 *const)(v5 + 368));
          Json::Reader::~Reader((Json::Reader *const)(v5 + 560));
          v14 = v16 == 1;
        }
        google::protobuf::util::Status::~Status((google::protobuf::util::Status *const)(v5 + 288));
        std::string::~string((void *)(v5 + 144));
        v12 = v14;
      }
      proto::PlayerBeforeLoginBinData::~PlayerBeforeLoginBinData((proto::PlayerBeforeLoginBinData *const)(v5 + 208));
      std::string::~string((void *)(v5 + 80));
      if ( v12 )
LABEL_23:
        v4 = 0;
    }
    TablePlayerJsonAndExtraBinData::~TablePlayerJsonAndExtraBinData((TablePlayerJsonAndExtraBinData *const)(v5 + 448));
  }
  else
  {
    v4 = 1;
  }
  result = v4;
  if ( v20 == (char *)v5 )
  {
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v5 >> 3) + 0x7FFF8020) = 0;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8030) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8040) = 0LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8068) = 0LL;
  }
  else
  {
    *(_QWORD *)v5 = 1172321806LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8060) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v5 >> 3) + 0x7FFF8068) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7836: range 000000000CBE2A0A-000000000CBE2BE2
int32_t __cdecl RequestHandler::resetPlayerPersistentDungeon(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:7837";
  *(_QWORD *)(v4 + 16) = RequestHandler::resetPlayerPersistentDungeon;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::resetPlayerPersistentDungeon(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::resetPlayerPersistentDungeon::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7837: range 000000000CBE2680-000000000CBE2A09
int32_t __cdecl RequestHandler::resetPlayerPersistentDungeon(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::resetPlayerPersistentDungeon::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-105h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-104h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-100h]
  proto::ResetPlayerPersistentDungeonOp *op_data; // [rsp+38h] [rbp-F8h]
  char v14[240]; // [rsp+40h] [rbp-F0h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 4 8 uid:7839 48 4 13 scene_id:7840 64 32 11 ticket:7841 128 32 8 req:7856";
  *(_QWORD *)(v3 + 16) = RequestHandler::resetPlayerPersistentDungeon(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862723] = -218959118;
  v5[536862725] = -202116109;
  *(_DWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  std::string::basic_string(v3 + 64);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 128), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 128),
              (unsigned int *)(v3 + 32),
              (std::remove_reference<char const (&)[9]>::type *)"scene_id",
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 64));
  std::string::~string((void *)(v3 + 128));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 64) )
  {
    v6 = 2012;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 32) )
      goto LABEL_12;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 32)) )
      v7 = 0;
    else
LABEL_12:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 128));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 128));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 64));
      op_data = proto::OfflineMsgBin::mutable_reset_player_persistent_dungeon_op(msg);
      proto::ResetPlayerPersistentDungeonOp::set_scene_id(op_data, *(_DWORD *)(v3 + 48));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 32));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 128));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 128));
    }
  }
  std::string::~string((void *)(v3 + 64));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7871: range 000000000CBE2F6E-000000000CBE3146
int32_t __cdecl RequestHandler::resetPlayerPosInPersistentDungeon(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:7872";
  *(_QWORD *)(v4 + 16) = RequestHandler::resetPlayerPosInPersistentDungeon;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::resetPlayerPosInPersistentDungeon(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::resetPlayerPosInPersistentDungeon::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7872: range 000000000CBE2BE4-000000000CBE2F6D
int32_t __cdecl RequestHandler::resetPlayerPosInPersistentDungeon(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::resetPlayerPosInPersistentDungeon::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-105h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-104h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-100h]
  proto::ResetPlayerPosInPersistentDungeonOp *op_data; // [rsp+38h] [rbp-F8h]
  char v14[240]; // [rsp+40h] [rbp-F0h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 4 8 uid:7874 48 4 13 scene_id:7875 64 32 11 ticket:7876 128 32 8 req:7891";
  *(_QWORD *)(v3 + 16) = RequestHandler::resetPlayerPosInPersistentDungeon(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862723] = -218959118;
  v5[536862725] = -202116109;
  *(_DWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  std::string::basic_string(v3 + 64);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 128), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 128),
              (unsigned int *)(v3 + 32),
              (std::remove_reference<char const (&)[9]>::type *)"scene_id",
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 64));
  std::string::~string((void *)(v3 + 128));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 64) )
  {
    v6 = 2012;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 32) )
      goto LABEL_12;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 32)) )
      v7 = 0;
    else
LABEL_12:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 128));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 128));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 64));
      op_data = proto::OfflineMsgBin::mutable_reset_player_pos_in_persistent_dungeon_op(msg);
      proto::ResetPlayerPosInPersistentDungeonOp::set_scene_id(op_data, *(_DWORD *)(v3 + 48));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 32));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 128));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 128));
    }
  }
  std::string::~string((void *)(v3 + 64));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7907: range 000000000CBE34D2-000000000CBE36AA
int32_t __cdecl RequestHandler::changeToTargetLevelTag(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:7908";
  *(_QWORD *)(v4 + 16) = RequestHandler::changeToTargetLevelTag;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::changeToTargetLevelTag(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::changeToTargetLevelTag::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7908: range 000000000CBE3148-000000000CBE34D1
int32_t __cdecl RequestHandler::changeToTargetLevelTag(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::changeToTargetLevelTag::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-105h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-104h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-100h]
  proto::LevelTagChangeOp *level_tag_change_op; // [rsp+38h] [rbp-F8h]
  char v14[240]; // [rsp+40h] [rbp-F0h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 4 8 uid:7910 48 4 17 level_tag_id:7911 64 32 11 ticket:7912 128 32 8 req:7927";
  *(_QWORD *)(v3 + 16) = RequestHandler::changeToTargetLevelTag(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862723] = -218959118;
  v5[536862725] = -202116109;
  *(_DWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  std::string::basic_string(v3 + 64);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 128), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[13],unsigned int &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 128),
              (unsigned int *)(v3 + 32),
              (std::remove_reference<char const (&)[13]>::type *)"level_tag_id",
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 64));
  std::string::~string((void *)(v3 + 128));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 64) )
  {
    v6 = 2012;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 32) )
      goto LABEL_12;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 32)) )
      v7 = 0;
    else
LABEL_12:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 128));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 128));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 64));
      level_tag_change_op = proto::OfflineMsgBin::mutable_level_tag_change_op(msg);
      proto::LevelTagChangeOp::set_level_tag_id(level_tag_change_op, *(_DWORD *)(v3 + 48));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 32));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 128));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 128));
    }
  }
  std::string::~string((void *)(v3 + 64));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7942: range 000000000CBE3A8C-000000000CBE3C64
int32_t __cdecl RequestHandler::resetPlayerWayPointInPersistentDungeon(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:7943";
  *(_QWORD *)(v4 + 16) = RequestHandler::resetPlayerWayPointInPersistentDungeon;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::resetPlayerWayPointInPersistentDungeon(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::resetPlayerWayPointInPersistentDungeon::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7943: range 000000000CBE36AC-000000000CBE3A8A
int32_t __cdecl RequestHandler::resetPlayerWayPointInPersistentDungeon(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::resetPlayerWayPointInPersistentDungeon::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-125h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-124h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-120h]
  proto::ResetPlayerWayPointInPersistentDungeonOp *op_data; // [rsp+38h] [rbp-118h]
  char v14[272]; // [rsp+40h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 48 4 8 uid:7945 64 4 13 scene_id:7946 80 4 17 way_point_id:7947 96 32 11 ticket:7948 160 32 8 req:7963";
  *(_QWORD *)(v3 + 16) = RequestHandler::resetPlayerWayPointInPersistentDungeon(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862724] = -218959118;
  v5[536862726] = -202116109;
  *(_DWORD *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 64) = 0;
  *(_DWORD *)(v3 + 80) = 0;
  std::string::basic_string(v3 + 96);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 160), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[9],unsigned int &,char const(&)[13],unsigned int &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 160),
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[9]>::type *)"scene_id",
              (unsigned int *)(v3 + 64),
              (std::remove_reference<char const (&)[13]>::type *)"way_point_id",
              (unsigned int *)(v3 + 80),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 96));
  std::string::~string((void *)(v3 + 160));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 96) )
  {
    v6 = 2012;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 48) )
      goto LABEL_12;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 48)) )
      v7 = 0;
    else
LABEL_12:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 160));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 96));
      op_data = proto::OfflineMsgBin::mutable_reset_player_way_point_in_persistent_dungeon_op(msg);
      proto::ResetPlayerWayPointInPersistentDungeonOp::set_scene_id(op_data, *(_DWORD *)(v3 + 64));
      proto::ResetPlayerWayPointInPersistentDungeonOp::set_way_point_id(op_data, *(_DWORD *)(v3 + 80));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 48));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 160));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
    }
  }
  std::string::~string((void *)(v3 + 96));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 7979: range 000000000CBE3C66-000000000CBE46BF
int32_t __cdecl RequestHandler::insertGameplayRecommendationConfig(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  int32_t v7; // r14d
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  Json::Value_0 *v11; // rax
  Json::Value_0 *v12; // rax
  Json::Value_0 *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  int32_t result; // eax
  int v24; // [rsp+0h] [rbp-360h]
  char *v25; // [rsp+8h] [rbp-358h]
  int p_yielda; // [rsp+10h] [rbp-350h]
  int jvala; // [rsp+18h] [rbp-348h]
  Json::Value *jvalb; // [rsp+18h] [rbp-348h]
  int v29; // [rsp+30h] [rbp-330h]
  char e; // [rsp+38h] [rbp-328h]
  std::string v31; // [rsp+40h] [rbp-320h] BYREF
  std::string v32; // [rsp+60h] [rbp-300h] BYREF
  google::protobuf::util::Status other; // [rsp+80h] [rbp-2E0h] BYREF
  char v34[688]; // [rsp+B0h] [rbp-2B0h] BYREF

  jvala = (int)jval;
  p_yielda = (int)p_yield;
  v4 = (unsigned __int64)v34;
  v25 = v34;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_4(640LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "10 48 1 18 parse_options:8006 64 4 15 begin_time:7980 80 4 12 retcode:7983 96 4 7 id:8018 112 32"
                        " 31 base64_compressed_json_str:7981 176 32 12 err_msg:8008 240 32 24 compressed_json_str:7996 30"
                        "4 40 17 parse_status:8005 384 88 11 config:7982 512 96 17 proto_config:8007";
  *(_QWORD *)(v4 + 16) = RequestHandler::insertGameplayRecommendationConfig;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234753551;
  v6[536862722] = -234556924;
  v6[536862723] = 61956;
  v6[536862724] = -219021312;
  v6[536862725] = 62194;
  v6[536862726] = -219021312;
  v6[536862727] = 62194;
  v6[536862728] = -219021312;
  v6[536862729] = 62194;
  v6[536862730] = -234881024;
  v6[536862731] = -218959118;
  v6[536862734] = -234881024;
  v6[536862735] = -218959118;
  v6[536862739] = -202116109;
  *(_DWORD *)(v4 + 64) = 0;
  std::string::basic_string(v4 + 112);
  GameplayRecommendationConfig::GameplayRecommendationConfig((GameplayRecommendationConfig *const)(v4 + 384));
  std::allocator<char>::allocator(v4 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v4 + 240),
    "begin_time",
    (const std::allocator<char> *)(v4 + 48));
  *(_DWORD *)(v4 + 80) = getRequestParam<unsigned int,char const(&)[9],std::string &,char const(&)[8],unsigned int &>(
                           request,
                           (const std::string *)(v4 + 240),
                           (unsigned int *)(v4 + 64),
                           (std::remove_reference<char const (&)[9]>::type *)"json_str",
                           (std::string *)(v4 + 112),
                           (std::remove_reference<char const (&)[8]>::type *)"enabled",
                           (unsigned int *)(v4 + 456));
  std::string::~string((void *)(v4 + 240));
  std::allocator<char>::~allocator(v4 + 48);
  if ( *(_DWORD *)(v4 + 80) )
  {
    v7 = *(_DWORD *)(v4 + 80);
  }
  else
  {
    common::tools::TimeUtils::getStrByTime[abi:cxx11](&v31, *(unsigned int *)(v4 + 64));
    std::string::operator=(v4 + 392, &v31);
    std::string::~string(&v31);
    common::tools::StringUtils::base64Decode((std::string *)(v4 + 240), (const std::string *)(v4 + 112));
    common::tools::ZlibUtil::uncompress(&v32, (const std::string *)(v4 + 240));
    std::string::operator=(v4 + 424, &v32);
    std::string::~string(&v32);
    std::string::~string((void *)(v4 + 240));
    google::protobuf::util::Status::Status((google::protobuf::util::Status *const)(v4 + 304));
    google::protobuf::util::JsonParseOptions::JsonParseOptions((google::protobuf::util::JsonParseOptions *const)(v4 + 48));
    proto::GameplayRecommendationConfig::GameplayRecommendationConfig((proto::GameplayRecommendationConfig *const)(v4 + 512));
    std::string::basic_string(v4 + 176);
    google::protobuf::util::JsonStringToMessage(&other, v24, (int)v34, p_yielda, jvala, (int)request, this, v29, e);
    google::protobuf::util::Status::operator=((google::protobuf::util::Status *const)(v4 + 304), &other);
    google::protobuf::util::Status::~Status(&other);
    if ( !google::protobuf::util::Status::ok((const google::protobuf::util::Status *const)(v4 + 304)) )
    {
      google::protobuf::util::Status::ToString[abi:cxx11](v4 + 240, v4 + 304);
      std::string::operator=(v4 + 176, v4 + 240);
      std::string::~string((void *)(v4 + 240));
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 240),
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/handler/request_handler.api.hpp",
        "insertGameplayRecommendationConfig",
        8013);
      v8 = common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
             (common::milog::MiLogStream *const)(v4 + 240),
             (const char (*)[35])"parse json_str fail! parse_status:");
      v9 = common::milog::MiLogStream::operator<<<google::protobuf::util::Status,(google::protobuf::util::Status*)0>(
             v8,
             (const google::protobuf::util::Status *)(v4 + 304));
      v10 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v9, (const char (*)[10])" err_msg:");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v10, (const std::string *)(v4 + 176));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 240));
      Json::Value::Value(&other, v4 + 176);
      v11 = Json::Value::operator[]((Json::Value_0 *const)jvalb, "err_msg");
      Json::Value::operator=(v11, (Json::Value_0 *)&other);
      Json::Value::~Value((Json::Value_0 *const)&other);
      v7 = 2037;
    }
    else
    {
      *(_DWORD *)(v4 + 96) = 0;
      *(_DWORD *)(v4 + 80) = MysqlOpMisc::insertGameplayRecommendationConfig(
                               (const GameplayRecommendationConfig *)(v4 + 384),
                               (uint32_t *)(v4 + 96),
                               (std::string *)(v4 + 176));
      if ( *(_DWORD *)(v4 + 96) )
      {
        Json::Value::Value((Json::Value *)&other, *(_DWORD *)(v4 + 96));
        v12 = Json::Value::operator[]((Json::Value_0 *const)jvalb, "id");
        Json::Value::operator=(v12, (Json::Value_0 *)&other);
        Json::Value::~Value((Json::Value_0 *const)&other);
      }
      if ( (unsigned __int8)std::string::empty(v4 + 176) != 1 )
      {
        Json::Value::Value(&other, v4 + 176);
        v13 = Json::Value::operator[]((Json::Value_0 *const)jvalb, "err_msg");
        Json::Value::operator=(v13, (Json::Value_0 *)&other);
        Json::Value::~Value((Json::Value_0 *const)&other);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 240),
        &common::milog::MiLogDefault::default_log_obj_,
        1u,
        "./src/handler/request_handler.api.hpp",
        "insertGameplayRecommendationConfig",
        8028);
      v14 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
              (common::milog::MiLogStream *const)(v4 + 240),
              (const char (*)[11])"insert id:");
      v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, (const unsigned int *)(v4 + 96));
      v16 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v15, (const char (*)[13])" begin_time:");
      v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, (const unsigned int *)(v4 + 64));
      v18 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v17, (const char (*)[17])" begin_time_str:");
      v19 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v18, (const std::string *)(v4 + 392));
      v20 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v19, (const char (*)[10])" retcode:");
      v21 = common::milog::MiLogStream::operator<<<int,(int *)0>(v20, (const int *)(v4 + 80));
      v22 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v21, (const char (*)[10])" err_msg:");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v22, (const std::string *)(v4 + 176));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 240));
      v7 = *(_DWORD *)(v4 + 80);
    }
    std::string::~string((void *)(v4 + 176));
    proto::GameplayRecommendationConfig::~GameplayRecommendationConfig((proto::GameplayRecommendationConfig *const)(v4 + 512));
    google::protobuf::util::Status::~Status((google::protobuf::util::Status *const)(v4 + 304));
  }
  GameplayRecommendationConfig::~GameplayRecommendationConfig((GameplayRecommendationConfig *const)(v4 + 384));
  std::string::~string((void *)(v4 + 112));
  result = v7;
  if ( v25 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8038) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF804C) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8034: range 000000000CBE46C0-000000000CBE4DE8
int32_t __cdecl RequestHandler::selectGameplayRecommendationConfig(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  int32_t v7; // r14d
  Json::Value_0 *v8; // rax
  Json::Value_0 *v9; // rax
  Json::Value_0 *v10; // rax
  Json::Value_0 *v11; // rax
  Json::Value_0 *v12; // rax
  Json::Value_0 *v13; // rax
  common::milog::MiLogStream *v14; // r14
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Fh] [rbp-191h] BYREF
  unsigned __int64 val; // [rsp+30h] [rbp-190h] BYREF
  const GameplayRecommendationConfig *config; // [rsp+38h] [rbp-188h]
  std::string key; // [rsp+40h] [rbp-180h] BYREF
  Json::Value_0 other; // [rsp+60h] [rbp-160h] BYREF
  char v30[304]; // [rsp+90h] [rbp-130h] BYREF

  v4 = (unsigned __int64)v30;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(256LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "5 32 4 15 begin_time:8035 48 4 12 retcode:8036 64 24 15 config_vec:8043 128 32 19 begin_time_str"
                        ":8041 192 32 12 err_msg:8042";
  *(_QWORD *)(v4 + 16) = RequestHandler::selectGameplayRecommendationConfig;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556924;
  v6[536862722] = -234881024;
  v6[536862723] = -218959118;
  v6[536862725] = -218959118;
  v6[536862727] = -202116109;
  *(_DWORD *)(v4 + 32) = 0;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&key, "begin_time", &__a);
  *(_DWORD *)(v4 + 48) = getRequestParam<unsigned int>(request, &key, (unsigned int *)(v4 + 32));
  std::string::~string(&key);
  std::allocator<char>::~allocator(&__a);
  if ( *(_DWORD *)(v4 + 48) )
  {
    v7 = *(_DWORD *)(v4 + 48);
  }
  else
  {
    common::tools::TimeUtils::getStrByTime[abi:cxx11]((std::string *)(v4 + 128), *(unsigned int *)(v4 + 32));
    std::string::basic_string(v4 + 192);
    std::vector<GameplayRecommendationConfig>::vector((std::vector<GameplayRecommendationConfig> *const)(v4 + 64));
    *(_DWORD *)(v4 + 48) = MysqlOpMisc::selectGameplayRecommendationConfig(
                             (const std::string *)(v4 + 128),
                             (std::vector<GameplayRecommendationConfig> *)(v4 + 64),
                             (std::string *)(v4 + 192));
    if ( (unsigned __int8)std::string::empty(v4 + 192) != 1 )
    {
      Json::Value::Value(&other, v4 + 192);
      v8 = Json::Value::operator[]((Json::Value_0 *const)jval, "err_msg");
      Json::Value::operator=(v8, &other);
      Json::Value::~Value(&other);
    }
    Json::Value::Value((Json::Value *)&other, *(_DWORD *)(v4 + 32));
    v9 = Json::Value::operator[]((Json::Value_0 *const)jval, "begin_time");
    Json::Value::operator=(v9, &other);
    Json::Value::~Value(&other);
    Json::Value::Value(&other, v4 + 128);
    v10 = Json::Value::operator[]((Json::Value_0 *const)jval, "begin_time_str");
    Json::Value::operator=(v10, &other);
    Json::Value::~Value(&other);
    if ( !std::vector<GameplayRecommendationConfig>::empty((const std::vector<GameplayRecommendationConfig> *const)(v4 + 64)) )
    {
      config = std::vector<GameplayRecommendationConfig>::operator[](
                 (std::vector<GameplayRecommendationConfig> *const)(v4 + 64),
                 0LL);
      if ( *(_BYTE *)(((unsigned __int64)config >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)config >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(config);
      }
      Json::Value::Value((Json::Value *)&other, config->id);
      v11 = Json::Value::operator[]((Json::Value_0 *const)jval, "id");
      Json::Value::operator=(v11, &other);
      Json::Value::~Value(&other);
      Json::Value::Value(&other, &config->json_str);
      v12 = Json::Value::operator[]((Json::Value_0 *const)jval, "json_str");
      Json::Value::operator=(v12, &other);
      Json::Value::~Value(&other);
      if ( *(_BYTE *)(((unsigned __int64)&config->enabled >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&config->enabled >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&config->enabled);
      }
      Json::Value::Value((Json::Value *)&other, config->enabled);
      v13 = Json::Value::operator[]((Json::Value_0 *const)jval, "enabled");
      Json::Value::operator=(v13, &other);
      Json::Value::~Value(&other);
    }
    else if ( !*(_DWORD *)(v4 + 48) )
    {
      *(_DWORD *)(v4 + 48) = 2038;
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&key,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/handler/request_handler.api.hpp",
      "selectGameplayRecommendationConfig",
      8062);
    v14 = common::milog::MiLogStream::operator<<<char [8],(char *[8])0>(
            (common::milog::MiLogStream *const)&key,
            (const char (*)[8])"select ");
    val = std::vector<GameplayRecommendationConfig>::size((const std::vector<GameplayRecommendationConfig> *const)(v4 + 64));
    v15 = common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(v14, &val);
    v16 = common::milog::MiLogStream::operator<<<char [22],(char *[22])0>(
            v15,
            (const char (*)[22])" results. begin_time:");
    v17 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v16, (const unsigned int *)(v4 + 32));
    v18 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v17, (const char (*)[17])" begin_time_str:");
    v19 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v18, (const std::string *)(v4 + 128));
    v20 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v19, (const char (*)[10])" retcode:");
    v21 = common::milog::MiLogStream::operator<<<int,(int *)0>(v20, (const int *)(v4 + 48));
    v22 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v21, (const char (*)[10])" err_msg:");
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v22, (const std::string *)(v4 + 192));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
    v7 = *(_DWORD *)(v4 + 48);
    std::vector<GameplayRecommendationConfig>::~vector((std::vector<GameplayRecommendationConfig> *const)(v4 + 64));
    std::string::~string((void *)(v4 + 192));
    std::string::~string((void *)(v4 + 128));
  }
  result = v7;
  if ( v30 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8014) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8068: range 000000000CBE4DEA-000000000CBE5367
int32_t __cdecl RequestHandler::deleteGameplayRecommendationConfig(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  int32_t v7; // r14d
  Json::Value_0 *v8; // rax
  Json::Value_0 *v9; // rax
  Json::Value_0 *v10; // rax
  Json::Value_0 *v11; // rax
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  common::milog::MiLogStream *v20; // rax
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Fh] [rbp-161h] BYREF
  std::string key; // [rsp+30h] [rbp-160h] BYREF
  Json::Value_0 other; // [rsp+50h] [rbp-140h] BYREF
  char v26[272]; // [rsp+80h] [rbp-110h] BYREF

  v4 = (unsigned __int64)v26;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(224LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "5 48 4 15 begin_time:8069 64 4 12 retcode:8070 80 4 17 delete_count:8076 96 32 19 begin_time_str"
                        ":8075 160 32 12 err_msg:8077";
  *(_QWORD *)(v4 + 16) = RequestHandler::deleteGameplayRecommendationConfig;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234556943;
  v6[536862722] = -234556924;
  v6[536862724] = -218959118;
  v6[536862726] = -202116109;
  *(_DWORD *)(v4 + 48) = 0;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&key, "begin_time", &__a);
  *(_DWORD *)(v4 + 64) = getRequestParam<unsigned int>(request, &key, (unsigned int *)(v4 + 48));
  std::string::~string(&key);
  std::allocator<char>::~allocator(&__a);
  if ( *(_DWORD *)(v4 + 64) )
  {
    v7 = *(_DWORD *)(v4 + 64);
  }
  else
  {
    common::tools::TimeUtils::getStrByTime[abi:cxx11]((std::string *)(v4 + 96), *(unsigned int *)(v4 + 48));
    *(_DWORD *)(v4 + 80) = 0;
    std::string::basic_string(v4 + 160);
    *(_DWORD *)(v4 + 64) = MysqlOpMisc::deleteGameplayRecommendationConfig(
                             (const std::string *)(v4 + 96),
                             (uint32_t *)(v4 + 80),
                             (std::string *)(v4 + 160));
    if ( (unsigned __int8)std::string::empty(v4 + 160) != 1 )
    {
      Json::Value::Value(&other, v4 + 160);
      v8 = Json::Value::operator[]((Json::Value_0 *const)jval, "err_msg");
      Json::Value::operator=(v8, &other);
      Json::Value::~Value(&other);
    }
    else if ( !*(_DWORD *)(v4 + 80) )
    {
      *(_DWORD *)(v4 + 64) = 2038;
    }
    Json::Value::Value((Json::Value *)&other, *(_DWORD *)(v4 + 48));
    v9 = Json::Value::operator[]((Json::Value_0 *const)jval, "begin_time");
    Json::Value::operator=(v9, &other);
    Json::Value::~Value(&other);
    Json::Value::Value(&other, v4 + 96);
    v10 = Json::Value::operator[]((Json::Value_0 *const)jval, "begin_time_str");
    Json::Value::operator=(v10, &other);
    Json::Value::~Value(&other);
    Json::Value::Value((Json::Value *)&other, *(_DWORD *)(v4 + 80));
    v11 = Json::Value::operator[]((Json::Value_0 *const)jval, "delete_count");
    Json::Value::operator=(v11, &other);
    Json::Value::~Value(&other);
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&key,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/handler/request_handler.api.hpp",
      "deleteGameplayRecommendationConfig",
      8090);
    v12 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
            (common::milog::MiLogStream *const)&key,
            (const char (*)[14])"delete_count:");
    v13 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v12, (const unsigned int *)(v4 + 80));
    v14 = common::milog::MiLogStream::operator<<<char [13],(char *[13])0>(v13, (const char (*)[13])" begin_time:");
    v15 = common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v14, (const unsigned int *)(v4 + 48));
    v16 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v15, (const char (*)[17])" begin_time_str:");
    v17 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v16, (const std::string *)(v4 + 96));
    v18 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v17, (const char (*)[10])" retcode:");
    v19 = common::milog::MiLogStream::operator<<<int,(int *)0>(v18, (const int *)(v4 + 64));
    v20 = common::milog::MiLogStream::operator<<<char [10],(char *[10])0>(v19, (const char (*)[10])" err_msg:");
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v20, (const std::string *)(v4 + 160));
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
    v7 = *(_DWORD *)(v4 + 64);
    std::string::~string((void *)(v4 + 160));
    std::string::~string((void *)(v4 + 96));
  }
  result = v7;
  if ( v26 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 8097: range 000000000CBE58A4-000000000CBE5A7C
int32_t __cdecl RequestHandler::setExhibitionData(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:8098";
  *(_QWORD *)(v4 + 16) = RequestHandler::setExhibitionData;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::setExhibitionData(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::setExhibitionData::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8098: range 000000000CBE5368-000000000CBE58A2
int32_t __cdecl RequestHandler::setExhibitionData(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::setExhibitionData::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+23h] [rbp-12Dh] BYREF
  int32_t retcode; // [rsp+24h] [rbp-12Ch]
  int32_t accumulable_ret; // [rsp+28h] [rbp-128h]
  int32_t replaceable_ret; // [rsp+2Ch] [rbp-124h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-120h]
  proto::ExhibitionSetOp *exhibition_set_op; // [rsp+38h] [rbp-118h]
  char v16[272]; // [rsp+40h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 32 4 8 uid:8100 48 4 18 exhibition_id:8101 64 4 20 accumulable_val:8118 80 4 20 replaceable_va"
                        "l:8119 96 32 11 ticket:8102 160 32 8 req:8128";
  *(_QWORD *)(v3 + 16) = RequestHandler::setExhibitionData(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -234556924;
  v5[536862724] = -218959118;
  v5[536862726] = -202116109;
  *(_DWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  std::string::basic_string(v3 + 96);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 160), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[14],unsigned int &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 160),
              (unsigned int *)(v3 + 32),
              (std::remove_reference<char const (&)[14]>::type *)"exhibition_id",
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 96));
  std::string::~string((void *)(v3 + 160));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 96) )
  {
    v6 = 2012;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 32) )
      goto LABEL_12;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 32)) )
      v7 = 0;
    else
LABEL_12:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else
    {
      *(_DWORD *)(v3 + 64) = 0;
      *(_DWORD *)(v3 + 80) = 0;
      std::allocator<char>::allocator(&__a);
      std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 160), "accumulable_val", &__a);
      accumulable_ret = getRequestParam<unsigned int>(
                          http_request,
                          (const std::string *)(v3 + 160),
                          (unsigned int *)(v3 + 64));
      std::string::~string((void *)(v3 + 160));
      std::allocator<char>::~allocator(&__a);
      std::allocator<char>::allocator(&__a);
      std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 160), "replaceable_val", &__a);
      replaceable_ret = getRequestParam<unsigned int>(
                          http_request,
                          (const std::string *)(v3 + 160),
                          (unsigned int *)(v3 + 80));
      std::string::~string((void *)(v3 + 160));
      std::allocator<char>::~allocator(&__a);
      if ( accumulable_ret && replaceable_ret )
      {
        v6 = accumulable_ret;
      }
      else
      {
        proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
        msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 160));
        proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 96));
        exhibition_set_op = proto::OfflineMsgBin::mutable_exhibition_set_op(msg);
        proto::ExhibitionSetOp::set_exhibition_id(exhibition_set_op, *(_DWORD *)(v3 + 48));
        if ( !accumulable_ret )
          proto::ExhibitionSetOp::set_accumulable_val(exhibition_set_op, *(_DWORD *)(v3 + 64));
        if ( !replaceable_ret )
          proto::ExhibitionSetOp::set_replaceable_val(exhibition_set_op, *(_DWORD *)(v3 + 80));
        common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 32));
        common::minet::Packet::setTargetService(packet, 9u);
        common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 160));
        v6 = 0;
        proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
      }
    }
  }
  std::string::~string((void *)(v3 + 96));
  result = v6;
  if ( v16 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 8146: range 000000000CBE5EB4-000000000CBE608C
int32_t __cdecl RequestHandler::setAvatarExtraProp(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:8147";
  *(_QWORD *)(v4 + 16) = RequestHandler::setAvatarExtraProp;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::setAvatarExtraProp(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::setAvatarExtraProp::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8147: range 000000000CBE5A7E-000000000CBE5EB2
int32_t __cdecl RequestHandler::setAvatarExtraProp(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::setAvatarExtraProp::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-125h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-124h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-120h]
  proto::SetAvatarExtraPropOp *set_avatar_extra_prop_op; // [rsp+38h] [rbp-118h]
  char v14[272]; // [rsp+40h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 32 4 8 uid:8149 48 4 14 avatar_id:8150 64 4 18 extra_prop_id:8151 80 4 21 extra_prop_count:815"
                        "2 96 32 11 ticket:8153 160 32 8 req:8174";
  *(_QWORD *)(v3 + 16) = RequestHandler::setAvatarExtraProp(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -234556924;
  v5[536862724] = -218959118;
  v5[536862726] = -202116109;
  *(_DWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 64) = 0;
  *(_DWORD *)(v3 + 80) = 0;
  std::string::basic_string(v3 + 96);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 160), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[10],unsigned int &,char const(&)[14],unsigned int &,char const(&)[17],unsigned int &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 160),
              (unsigned int *)(v3 + 32),
              (std::remove_reference<char const (&)[10]>::type *)"avatar_id",
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[14]>::type *)"extra_prop_id",
              (unsigned int *)(v3 + 64),
              (std::remove_reference<char const (&)[17]>::type *)"extra_prop_count",
              (unsigned int *)(v3 + 80),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 96));
  std::string::~string((void *)(v3 + 160));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 96) )
  {
    v6 = 2012;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 32) )
      goto LABEL_12;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 32)) )
      v7 = 0;
    else
LABEL_12:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else if ( *(_DWORD *)(v3 + 48) == 10000005 || *(_DWORD *)(v3 + 48) == 10000007 )
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 160));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 96));
      set_avatar_extra_prop_op = proto::OfflineMsgBin::mutable_set_avatar_extra_prop_op(msg);
      proto::SetAvatarExtraPropOp::set_avatar_id(set_avatar_extra_prop_op, *(_DWORD *)(v3 + 48));
      proto::SetAvatarExtraPropOp::set_extra_prop_id(set_avatar_extra_prop_op, *(_DWORD *)(v3 + 64));
      proto::SetAvatarExtraPropOp::set_extra_prop_count(set_avatar_extra_prop_op, *(_DWORD *)(v3 + 80));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 32));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 160));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
    }
    else
    {
      v6 = 1002;
    }
  }
  std::string::~string((void *)(v3 + 96));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 8192: range 000000000CBE6968-000000000CBE6B40
int32_t __cdecl RequestHandler::addItemWithLimit(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:8193";
  *(_QWORD *)(v4 + 16) = RequestHandler::addItemWithLimit;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::addItemWithLimit(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::addItemWithLimit::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8193: range 000000000CBE608E-000000000CBE6967
int32_t __cdecl RequestHandler::addItemWithLimit(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::addItemWithLimit::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  int32_t v3; // r14d
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  char v7; // al
  proto::ReliquaryBin *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  int v12; // r15d
  proto::WeaponBin *v13; // rax
  int v14; // r15d
  int32_t result; // eax
  char *v16; // [rsp+0h] [rbp-340h]
  common::minet::Packet *packeta; // [rsp+8h] [rbp-338h]
  int http_requesta; // [rsp+10h] [rbp-330h]
  int p_this; // [rsp+18h] [rbp-328h]
  int v20; // [rsp+20h] [rbp-320h]
  int v21; // [rsp+20h] [rbp-320h]
  int32_t retcode; // [rsp+24h] [rbp-31Ch]
  proto::OfflineMsgBin *msg; // [rsp+28h] [rbp-318h]
  proto::OfflineMsgBin *msga; // [rsp+28h] [rbp-318h]
  proto::AddItemWithLimitOp *op; // [rsp+30h] [rbp-310h]
  int opa; // [rsp+30h] [rbp-310h]
  proto::AddItemOp *add_item_op; // [rsp+38h] [rbp-308h]
  proto::AddItemOp *add_item_opa; // [rsp+38h] [rbp-308h]
  proto::AddItemOp *add_item_opb; // [rsp+38h] [rbp-308h]
  std::string key; // [rsp+40h] [rbp-300h] BYREF
  google::protobuf::util::Status other; // [rsp+60h] [rbp-2E0h] BYREF
  char v32[688]; // [rsp+90h] [rbp-2B0h] BYREF

  packeta = packet;
  v4 = (unsigned __int64)v32;
  v16 = v32;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_4(640LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "11 48 1 11 option:8232 64 4 8 uid:8196 80 4 12 item_id:8197 96 4 15 item_count:8198 112 4 19 max"
                        "_item_count:8199 128 32 11 ticket:8195 192 32 21 extra_params_str:8205 256 32 8 req:8220 320 40 "
                        "11 status:8231 400 56 18 reliquary_bin:8233 496 104 15 weapon_bin:8241";
  *(_QWORD *)(v4 + 16) = RequestHandler::addItemWithLimit(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234753551;
  v6[536862722] = -234556924;
  v6[536862723] = -234556924;
  v6[536862725] = -218959118;
  v6[536862727] = -218959118;
  v6[536862729] = -218959118;
  v6[536862731] = -218959360;
  v6[536862732] = 62194;
  v6[536862734] = -218959360;
  v6[536862735] = 62194;
  v6[536862738] = -218103808;
  v6[536862739] = -202116109;
  std::string::basic_string(v4 + 128);
  *(_DWORD *)(v4 + 64) = 0;
  *(_DWORD *)(v4 + 80) = 0;
  *(_DWORD *)(v4 + 96) = 0;
  *(_DWORD *)(v4 + 112) = 0;
  std::allocator<char>::allocator(v4 + 48);
  std::string::basic_string<std::allocator<char>>(&key, off_1A660020, (const std::allocator<char> *)(v4 + 48));
  retcode = getRequestParam<unsigned int,char const(&)[7],std::string &,char const(&)[8],unsigned int &,char const(&)[11],unsigned int &,char const(&)[15],unsigned int &>(
              http_request,
              &key,
              (unsigned int *)(v4 + 64),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v4 + 128),
              (std::remove_reference<char const (&)[8]>::type *)"item_id",
              (unsigned int *)(v4 + 80),
              (std::remove_reference<char const (&)[11]>::type *)"item_count",
              (unsigned int *)(v4 + 96),
              (std::remove_reference<char const (&)[15]>::type *)"max_item_count",
              (unsigned int *)(v4 + 112));
  std::string::~string(&key);
  std::allocator<char>::~allocator(v4 + 48);
  if ( retcode )
  {
    v3 = retcode;
    goto LABEL_33;
  }
  std::string::basic_string(v4 + 192);
  std::allocator<char>::allocator(v4 + 48);
  std::string::basic_string<std::allocator<char>>(&key, "extra_params", (const std::allocator<char> *)(v4 + 48));
  getRequestParam<std::string>(http_request, &key, (std::string *)(v4 + 192));
  std::string::~string(&key);
  std::allocator<char>::~allocator(v4 + 48);
  if ( !*(_DWORD *)(v4 + 64) )
    goto LABEL_10;
  if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
    __asan_report_load8(__closure);
  if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v4 + 64)) )
    v7 = 0;
  else
LABEL_10:
    v7 = 1;
  if ( !v7 )
  {
    if ( (unsigned __int8)std::string::empty(v4 + 128) )
    {
      v3 = 2012;
      goto LABEL_32;
    }
    if ( !*(_DWORD *)(v4 + 80) || !*(_DWORD *)(v4 + 96) || !*(_DWORD *)(v4 + 112) )
    {
      v3 = 1002;
      goto LABEL_32;
    }
    proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v4 + 256));
    msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v4 + 256));
    proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v4 + 128));
    op = proto::OfflineMsgBin::mutable_add_item_with_limit_op(msg);
    add_item_op = proto::AddItemWithLimitOp::mutable_add_item_op(op);
    proto::AddItemOp::set_item_id(add_item_op, *(_DWORD *)(v4 + 80));
    proto::AddItemOp::set_item_count(add_item_op, *(_DWORD *)(v4 + 96));
    proto::AddItemWithLimitOp::set_max_item_count(op, *(_DWORD *)(v4 + 112));
    if ( (unsigned __int8)std::string::empty(v4 + 192) == 1 )
      goto LABEL_30;
    google::protobuf::util::Status::Status((google::protobuf::util::Status *const)(v4 + 320));
    google::protobuf::util::JsonParseOptions::JsonParseOptions((google::protobuf::util::JsonParseOptions *const)(v4 + 48));
    proto::ReliquaryBin::ReliquaryBin((proto::ReliquaryBin *const)(v4 + 400));
    google::protobuf::util::JsonStringToMessage(
      &other,
      (int)v32,
      (int)packeta,
      (int)http_request,
      (int)__closure,
      v20,
      msg,
      (int)op,
      (char)add_item_op);
    google::protobuf::util::Status::operator=((google::protobuf::util::Status *const)(v4 + 320), &other);
    google::protobuf::util::Status::~Status(&other);
    if ( google::protobuf::util::Status::ok((const google::protobuf::util::Status *const)(v4 + 320)) )
    {
      v8 = proto::AddItemOp::mutable_reliquary(add_item_opa);
      proto::ReliquaryBin::Swap(v8, (proto::ReliquaryBin *)(v4 + 400));
    }
    else
    {
      proto::WeaponBin::WeaponBin((proto::WeaponBin *const)(v4 + 496));
      google::protobuf::util::JsonStringToMessage(
        &other,
        (int)v16,
        (int)packeta,
        http_requesta,
        p_this,
        v21,
        msga,
        opa,
        (char)add_item_opa);
      google::protobuf::util::Status::operator=((google::protobuf::util::Status *const)(v4 + 320), &other);
      google::protobuf::util::Status::~Status(&other);
      if ( !google::protobuf::util::Status::ok((const google::protobuf::util::Status *const)(v4 + 320)) )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&key,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/handler/request_handler.api.hpp",
          "operator()",
          8245);
        v9 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
               (common::milog::MiLogStream *const)&key,
               (const char (*)[44])"JsonStringToMessage fail, extra_params_str:");
        v10 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v9, (const std::string *)(v4 + 192));
        v11 = common::milog::MiLogStream::operator<<<char [9],(char *[9])0>(v10, (const char (*)[9])" status:");
        common::milog::MiLogStream::operator<<<google::protobuf::util::Status,(google::protobuf::util::Status*)0>(
          v11,
          (const google::protobuf::util::Status *)(v4 + 320));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
        v3 = 1002;
        v12 = 0;
      }
      else
      {
        v13 = proto::AddItemOp::mutable_weapon(add_item_opb);
        proto::WeaponBin::Swap(v13, (proto::WeaponBin *)(v4 + 496));
        v12 = 1;
      }
      proto::WeaponBin::~WeaponBin((proto::WeaponBin *const)(v4 + 496));
      if ( v12 != 1 )
      {
        v14 = 0;
        goto LABEL_29;
      }
    }
    v14 = 1;
LABEL_29:
    proto::ReliquaryBin::~ReliquaryBin((proto::ReliquaryBin *const)(v4 + 400));
    google::protobuf::util::Status::~Status((google::protobuf::util::Status *const)(v4 + 320));
    if ( v14 != 1 )
    {
LABEL_31:
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v4 + 256));
      goto LABEL_32;
    }
LABEL_30:
    common::minet::Packet::setUserId(packeta, *(_DWORD *)(v4 + 64));
    common::minet::Packet::setTargetService(packeta, 9u);
    common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packeta, (const proto::SendOfflineMsgReq *)(v4 + 256));
    v3 = 0;
    goto LABEL_31;
  }
  v3 = 2001;
LABEL_32:
  std::string::~string((void *)(v4 + 192));
LABEL_33:
  std::string::~string((void *)(v4 + 128));
  result = v3;
  if ( v16 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8014) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF801C) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8024) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF802C) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8038) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8048) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8263: range 000000000CBE6F22-000000000CBE70FA
int32_t __cdecl RequestHandler::setChainLevel(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:8264";
  *(_QWORD *)(v4 + 16) = RequestHandler::setChainLevel;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::setChainLevel(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::setChainLevel::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8264: range 000000000CBE6B42-000000000CBE6F20
int32_t __cdecl RequestHandler::setChainLevel(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::setChainLevel::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-125h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-124h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-120h]
  proto::SetGadgetChainLevelOp *op; // [rsp+38h] [rbp-118h]
  char v14[272]; // [rsp+40h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 48 4 8 uid:8267 64 4 19 gadgetchain_id:8268 80 4 22 gadgetchain_level:8269 96 32 11 ticket:826"
                        "6 160 32 8 req:8284";
  *(_QWORD *)(v3 + 16) = RequestHandler::setChainLevel(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862724] = -218959118;
  v5[536862726] = -202116109;
  std::string::basic_string(v3 + 96);
  *(_DWORD *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 64) = 0;
  *(_DWORD *)(v3 + 80) = 0;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 160), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[7],std::string &,char const(&)[15],unsigned int &,char const(&)[18],unsigned int &>(
              http_request,
              (const std::string *)(v3 + 160),
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 96),
              (std::remove_reference<char const (&)[15]>::type *)"gadgetchain_id",
              (unsigned int *)(v3 + 64),
              (std::remove_reference<char const (&)[18]>::type *)"gadgetchain_level",
              (unsigned int *)(v3 + 80));
  std::string::~string((void *)(v3 + 160));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 48) )
      goto LABEL_10;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 48)) )
      v7 = 0;
    else
LABEL_10:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else if ( (unsigned __int8)std::string::empty(v3 + 96) )
    {
      v6 = 2012;
    }
    else
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 160));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 96));
      op = proto::OfflineMsgBin::mutable_set_gadget_chain_level_op(msg);
      proto::SetGadgetChainLevelOp::set_gadgetchain_id(op, *(_DWORD *)(v3 + 64));
      proto::SetGadgetChainLevelOp::set_gadgetchain_level(op, *(_DWORD *)(v3 + 80));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 48));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 160));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
    }
  }
  std::string::~string((void *)(v3 + 96));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 8301: range 000000000CBE70FC-000000000CBE7911
int32_t __cdecl RequestHandler::queryPlayerHomeBlueprintInfo(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  int32_t v7; // r14d
  common::milog::MiLogStream *v8; // rax
  const proto::PlayerHomeCompBin *v9; // rax
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  Json::Value_0 *v12; // rax
  Json::Value *v13; // rax
  int p_yielda; // [rsp+0h] [rbp-710h]
  Json::Value *jvalb; // [rsp+8h] [rbp-708h]
  int v18; // [rsp+20h] [rbp-6F0h]
  int32_t retcode; // [rsp+24h] [rbp-6ECh]
  proto::PlayerHomeBlueprintBin *blueprint_bin; // [rsp+28h] [rbp-6E8h]
  std::string key; // [rsp+30h] [rbp-6E0h] BYREF
  Json::Value_0 other; // [rsp+50h] [rbp-6C0h] BYREF
  char v23[1680]; // [rsp+80h] [rbp-690h] BYREF

  p_yielda = (int)p_yield;
  v4 = (unsigned __int64)v23;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_5(1632LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "10 48 1 13 is_exist:8309 64 4 8 uid:8302 80 4 12 options:8333 96 32 13 bin_data:8319 160 32 16 j"
                        "son_string:8336 224 40 15 status_ret:8337 304 40 15 json_value:8343 384 192 20 player_data_row:8"
                        "310 640 272 16 json_reader:8344 976 520 20 player_data_bin:8325";
  *(_QWORD *)(v4 + 16) = RequestHandler::queryPlayerHomeBlueprintInfo;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = -234753551;
  v6[536862722] = -234556924;
  v6[536862724] = -218959118;
  v6[536862726] = -218959118;
  v6[536862728] = -218959360;
  v6[536862729] = 62194;
  v6[536862730] = -234881024;
  v6[536862731] = -218959118;
  v6[536862738] = -218959118;
  v6[536862739] = -218959118;
  v6[536862748] = -219021312;
  v6[536862749] = -218959118;
  v6[536862750] = 62194;
  v6[536862766] = -218103808;
  v6[536862767] = -202116109;
  v6[536862768] = -202116109;
  v6[536862769] = -202116109;
  v6[536862770] = -202116109;
  *(_DWORD *)(v4 + 64) = 0;
  std::allocator<char>::allocator(v4 + 48);
  std::string::basic_string<std::allocator<char>>(&key, off_1A660020, (const std::allocator<char> *)(v4 + 48));
  retcode = getRequestParam<unsigned int>(request, &key, (unsigned int *)(v4 + 64));
  std::string::~string(&key);
  std::allocator<char>::~allocator(v4 + 48);
  if ( retcode )
  {
    v7 = retcode;
  }
  else
  {
    *(_BYTE *)(v4 + 48) = 0;
    TablePlayerData::TablePlayerData((TablePlayerData *const)(v4 + 384));
    if ( MysqlOpPlayerData::selectPlayerDataByUid(
           *(_DWORD *)(v4 + 64),
           (TablePlayerData *)(v4 + 384),
           (bool *)(v4 + 48)) )
    {
      v7 = 2;
    }
    else if ( *(_BYTE *)(v4 + 48) != 1 )
    {
      v7 = 2001;
    }
    else
    {
      std::string::basic_string(v4 + 96);
      mysqlpp::String::to_string((const mysqlpp::String *const)(v4 + 472), (std::string *)(v4 + 96));
      if ( common::tools::ZlibUtil::isCompressWithPad((const std::string *)(v4 + 96)) )
      {
        common::tools::ZlibUtil::uncompressWithPad(&key, (const std::string *)(v4 + 96));
        std::string::operator=(v4 + 96, &key);
        std::string::~string(&key);
      }
      proto::PlayerDataBin::PlayerDataBin((proto::PlayerDataBin *const)(v4 + 976));
      if ( (unsigned __int8)google::protobuf::MessageLite::ParseFromString(v4 + 976, v4 + 96) != 1 )
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)&key,
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/handler/request_handler.api.hpp",
          "queryPlayerHomeBlueprintInfo",
          8328);
        v8 = common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
               (common::milog::MiLogStream *const)&key,
               (const char (*)[45])"player_data_bin ParseFromString failed, uid:");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v8, (const unsigned int *)(v4 + 64));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
        v7 = 2;
      }
      else
      {
        v9 = proto::PlayerDataBin::home_bin((const proto::PlayerDataBin *const)(v4 + 976));
        blueprint_bin = (proto::PlayerHomeBlueprintBin *)proto::PlayerHomeCompBin::blueprint_bin(v9);
        google::protobuf::util::JsonPrintOptions::JsonPrintOptions((google::protobuf::util::JsonPrintOptions *const)(v4 + 80));
        *(_BYTE *)(v4 + 80) = 1;
        *(_BYTE *)(v4 + 83) = 1;
        std::string::basic_string(v4 + 160);
        google::protobuf::util::MessageToJsonString(
          (google::protobuf::util::Status *)(v4 + 224),
          blueprint_bin,
          p_yielda,
          jval,
          (int)request,
          (char)this,
          v18,
          blueprint_bin);
        if ( !google::protobuf::util::Status::ok((const google::protobuf::util::Status *const)(v4 + 224)) )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)&key,
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/handler/request_handler.api.hpp",
            "queryPlayerHomeBlueprintInfo",
            8340);
          v10 = common::milog::MiLogStream::operator<<<char [52],(char *[52])0>(
                  (common::milog::MiLogStream *const)&key,
                  (const char (*)[52])"PlayerHomeBlueprintBin to json_string failed, uid: ");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v10, (const unsigned int *)(v4 + 64));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
          v7 = -1;
        }
        else
        {
          Json::Value::Value(v4 + 304, 0LL);
          Json::Reader::Reader((Json::Reader *)(v4 + 640));
          if ( !Json::Reader::parse(
                  (Json::Reader *const)(v4 + 640),
                  (const std::string *)(v4 + 160),
                  (Json::Value *)(v4 + 304),
                  1) )
          {
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)&key,
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/handler/request_handler.api.hpp",
              "queryPlayerHomeBlueprintInfo",
              8347);
            v11 = common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
                    (common::milog::MiLogStream *const)&key,
                    (const char (*)[40])"json_string to json_value failed, uid: ");
            common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v11, (const unsigned int *)(v4 + 64));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
            v7 = -1;
          }
          else
          {
            Json::Value::Value((Json::Value *)&other, *(_DWORD *)(v4 + 64));
            v12 = Json::Value::operator[]((Json::Value_0 *const)jvalb, off_1A660020);
            Json::Value::operator=(v12, &other);
            Json::Value::~Value(&other);
            v13 = (Json::Value *)Json::Value::operator[]((Json::Value_0 *const)jvalb, "player_home_blueprint_data");
            Json::Value::operator=(v13);
            v7 = 0;
          }
          Json::Reader::~Reader((Json::Reader *const)(v4 + 640));
          Json::Value::~Value((Json::Value_0 *const)(v4 + 304));
        }
        google::protobuf::util::Status::~Status((google::protobuf::util::Status *const)(v4 + 224));
        std::string::~string((void *)(v4 + 160));
      }
      proto::PlayerDataBin::~PlayerDataBin((proto::PlayerDataBin *const)(v4 + 976));
      std::string::~string((void *)(v4 + 96));
    }
    TablePlayerData::~TablePlayerData((TablePlayerData *const)(v4 + 384));
  }
  if ( v23 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8018) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8048) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8070) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8078) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF80B8) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF80C0) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF80C8) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    __asan_stack_free_5(v4, 1632LL, v23);
  }
  return v7;
};

// Line 8356: range 000000000CBE7912-000000000CBE8538
// local variable allocation has failed, the output may be wrong!
int32_t __cdecl RequestHandler::queryHomeBlueprintBriefInfo(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // r13
  __int64 v5; // rax
  _DWORD *v6; // r12
  int32_t v7; // r14d
  common::milog::MiLogStream *v8; // rax
  __gnu_cxx::__normal_iterator<std::string*,std::vector<std::string> >::reference v9; // rax
  common::milog::MiLogStream *v10; // r14
  common::milog::MiLogStream *v11; // rax
  const std::string *v12; // rax
  google::protobuf::uint32 v13; // eax
  google::protobuf::uint32 v14; // eax
  google::protobuf::uint32 v15; // eax
  google::protobuf::uint32 v16; // eax
  bool is_allow_copy; // al
  google::protobuf::uint32 time; // eax
  const std::string *v19; // rax
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  Json::Value *v22; // rax
  int p_yielda; // [rsp+0h] [rbp-4C0h]
  Json::Value *jvalb; // [rsp+8h] [rbp-4B8h]
  int v27; // [rsp+20h] [rbp-4A0h]
  void *v28; // [rsp+28h] [rbp-498h] OVERLAPPED BYREF
  std::vector<std::string>::iterator __for_begin; // [rsp+30h] [rbp-490h] BYREF
  std::vector<std::string>::iterator __for_end; // [rsp+38h] [rbp-488h] BYREF
  std::vector<std::string> *__for_range; // [rsp+40h] [rbp-480h]
  std::vector<proto::HomeBlueprintBriefRedisData> *__for_range_0; // [rsp+48h] [rbp-478h]
  std::set<std::string> *__for_range_1; // [rsp+50h] [rbp-470h]
  const std::string *share_code; // [rsp+58h] [rbp-468h]
  const proto::HomeBlueprintBriefRedisData *brief_data; // [rsp+60h] [rbp-460h]
  proto::HomeBlueprintBriefMuipData *brief_muip_data; // [rsp+68h] [rbp-458h]
  char v37[1104]; // [rsp+70h] [rbp-450h] BYREF

  p_yielda = (int)p_yield;
  v4 = (unsigned __int64)v37;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_5(1056LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "11 32 4 12 options:8407 48 24 19 share_code_vec:8364 112 24 19 brief_data_vec:8383 176 32 24 sha"
                        "re_code_list_str:8357 240 32 16 json_string:8410 304 32 15 share_code:8372 368 40 15 status_ret:"
                        "8411 448 40 15 json_value:8417 528 48 19 share_code_set:8371 608 72 26 batch_brief_muip_data:838"
                        "9 720 272 16 json_reader:8418";
  *(_QWORD *)(v4 + 16) = RequestHandler::queryHomeBlueprintBriefInfo;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862721] = 61956;
  v6[536862722] = -218959360;
  v6[536862723] = 62194;
  v6[536862724] = -218959360;
  v6[536862725] = 62194;
  v6[536862726] = -219021312;
  v6[536862727] = 62194;
  v6[536862728] = -219021312;
  v6[536862729] = 62194;
  v6[536862730] = -219021312;
  v6[536862731] = 62194;
  v6[536862732] = -234881024;
  v6[536862733] = -218959118;
  v6[536862735] = -218959360;
  v6[536862736] = 62194;
  v6[536862738] = -218959118;
  v6[536862741] = -218959360;
  v6[536862742] = 62194;
  v6[536862751] = -202116109;
  v6[536862752] = -202116109;
  std::string::basic_string(v4 + 176);
  std::allocator<char>::allocator((char *)&v28 + 3);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v4 + 304),
    "share_code_list",
    (const std::allocator<char> *)&v28 + 3);
  HIDWORD(v28) = getRequestParam<std::string>(request, (const std::string *)(v4 + 304), (std::string *)(v4 + 176));
  std::string::~string((void *)(v4 + 304));
  std::allocator<char>::~allocator((char *)&v28 + 3);
  if ( HIDWORD(v28) )
  {
    v7 = HIDWORD(v28);
  }
  else
  {
    std::vector<std::string>::vector((std::vector<std::string> *const)(v4 + 48));
    std::allocator<char>::allocator((char *)&v28 + 3);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v4 + 304),
      ",",
      (const std::allocator<char> *)&v28 + 3);
    HIDWORD(v28) = common::tools::StringUtils::splitToList(
                     (const std::string *)(v4 + 176),
                     (const std::string *)(v4 + 304),
                     (std::vector<std::string> *)(v4 + 48),
                     1);
    std::string::~string((void *)(v4 + 304));
    std::allocator<char>::~allocator((char *)&v28 + 3);
    if ( HIDWORD(v28) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v4 + 304),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "queryHomeBlueprintBriefInfo",
        8368);
      v8 = common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
             (common::milog::MiLogStream *const)(v4 + 304),
             (const char (*)[39])"splitToList fail, share_code_list_str:");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, (const std::string *)(v4 + 176));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 304));
      v7 = 1002;
    }
    else
    {
      std::set<std::string>::set((std::set<std::string> *const)(v4 + 528));
      __for_range = (std::vector<std::string> *)(v4 + 48);
      __for_begin._M_current = std::vector<std::string>::begin((std::vector<std::string> *const)(v4 + 48))._M_current;
      __for_end._M_current = std::vector<std::string>::end(__for_range)._M_current;
      while ( __gnu_cxx::operator!=<std::string *,std::vector<std::string>>(&__for_begin, &__for_end) )
      {
        v9 = __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator*(&__for_begin);
        std::string::basic_string(v4 + 304, v9);
        std::set<std::string>::insert(
          (std::set<std::string> *const)(v4 + 528),
          (const std::set<std::string>::value_type *)(v4 + 304));
        std::string::~string((void *)(v4 + 304));
        __gnu_cxx::__normal_iterator<std::string *,std::vector<std::string>>::operator++(&__for_begin);
      }
      if ( std::set<std::string>::size((const std::set<std::string> *const)(v4 + 528)) <= 0x32 )
      {
        std::vector<proto::HomeBlueprintBriefRedisData>::vector((std::vector<proto::HomeBlueprintBriefRedisData> *const)(v4 + 112));
        if ( RedisOpHome::getHomeBlueprintBriefDataBatch(
               (const std::set<std::string> *)(v4 + 528),
               (std::vector<proto::HomeBlueprintBriefRedisData> *)(v4 + 112)) )
        {
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v4 + 304),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/handler/request_handler.api.hpp",
            "queryHomeBlueprintBriefInfo",
            8386);
          v11 = common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(
                  (common::milog::MiLogStream *const)(v4 + 304),
                  (const char (*)[49])"get home blueprint brief failed, share_code_set:");
          common::milog::MiLogStream::operator<<<std::string>(v11, (const std::set<std::string> *)(v4 + 528));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 304));
          v7 = -1;
        }
        else
        {
          proto::HomeBlueprintBatchBriefMuipData::HomeBlueprintBatchBriefMuipData((proto::HomeBlueprintBatchBriefMuipData *const)(v4 + 608));
          __for_range_0 = (std::vector<proto::HomeBlueprintBriefRedisData> *)(v4 + 112);
          __for_begin._M_current = (std::string *)std::vector<proto::HomeBlueprintBriefRedisData>::begin((std::vector<proto::HomeBlueprintBriefRedisData> *const)(v4 + 112))._M_current;
          __for_end._M_current = (std::string *)std::vector<proto::HomeBlueprintBriefRedisData>::end(__for_range_0)._M_current;
          while ( __gnu_cxx::operator!=<proto::HomeBlueprintBriefRedisData *,std::vector<proto::HomeBlueprintBriefRedisData>>(
                    (const __gnu_cxx::__normal_iterator<proto::HomeBlueprintBriefRedisData*,std::vector<proto::HomeBlueprintBriefRedisData> > *)&__for_begin,
                    (const __gnu_cxx::__normal_iterator<proto::HomeBlueprintBriefRedisData*,std::vector<proto::HomeBlueprintBriefRedisData> > *)&__for_end) )
          {
            brief_data = __gnu_cxx::__normal_iterator<proto::HomeBlueprintBriefRedisData *,std::vector<proto::HomeBlueprintBriefRedisData>>::operator*((const __gnu_cxx::__normal_iterator<proto::HomeBlueprintBriefRedisData*,std::vector<proto::HomeBlueprintBriefRedisData> > *const)&__for_begin);
            brief_muip_data = proto::HomeBlueprintBatchBriefMuipData::add_brief_list((proto::HomeBlueprintBatchBriefMuipData *const)(v4 + 608));
            v12 = proto::HomeBlueprintBriefRedisData::share_code[abi:cxx11](brief_data);
            proto::HomeBlueprintBriefMuipData::set_share_code(brief_muip_data, v12);
            v13 = proto::HomeBlueprintBriefRedisData::owner_uid(brief_data);
            proto::HomeBlueprintBriefMuipData::set_owner_uid(brief_muip_data, v13);
            v14 = proto::HomeBlueprintBriefRedisData::module_id(brief_data);
            proto::HomeBlueprintBriefMuipData::set_module_id(brief_muip_data, v14);
            v15 = proto::HomeBlueprintBriefRedisData::scene_id(brief_data);
            proto::HomeBlueprintBriefMuipData::set_scene_id(brief_muip_data, v15);
            v16 = proto::HomeBlueprintBriefRedisData::block_id(brief_data);
            proto::HomeBlueprintBriefMuipData::set_block_id(brief_muip_data, v16);
            is_allow_copy = proto::HomeBlueprintBriefRedisData::is_allow_copy(brief_data);
            proto::HomeBlueprintBriefMuipData::set_is_allow_copy(brief_muip_data, is_allow_copy);
            time = proto::HomeBlueprintBriefRedisData::create_time(brief_data);
            proto::HomeBlueprintBriefMuipData::set_create_time(brief_muip_data, time);
            v19 = proto::HomeBlueprintBriefRedisData::share_code[abi:cxx11](brief_data);
            std::set<std::string>::erase((std::set<std::string> *const)(v4 + 528), v19);
            __gnu_cxx::__normal_iterator<proto::HomeBlueprintBriefRedisData *,std::vector<proto::HomeBlueprintBriefRedisData>>::operator++((__gnu_cxx::__normal_iterator<proto::HomeBlueprintBriefRedisData*,std::vector<proto::HomeBlueprintBriefRedisData> > *const)&__for_begin);
          }
          __for_range_1 = (std::set<std::string> *)(v4 + 528);
          __for_begin._M_current = (std::string *)std::set<std::string>::begin((const std::set<std::string> *const)(v4 + 528))._M_node;
          __for_end._M_current = (std::string *)std::set<std::string>::end(__for_range_1)._M_node;
          while ( std::operator!=(
                    (const std::_Rb_tree_const_iterator<std::string >::_Self *)&__for_begin,
                    (const std::_Rb_tree_const_iterator<std::string >::_Self *)&__for_end) )
          {
            share_code = std::_Rb_tree_const_iterator<std::string>::operator*((const std::_Rb_tree_const_iterator<std::string > *const)&__for_begin);
            proto::HomeBlueprintBatchBriefMuipData::add_not_exist_share_code_list(
              (proto::HomeBlueprintBatchBriefMuipData *const)(v4 + 608),
              share_code);
            std::_Rb_tree_const_iterator<std::string>::operator++((std::_Rb_tree_const_iterator<std::string > *const)&__for_begin);
          }
          google::protobuf::util::JsonPrintOptions::JsonPrintOptions((google::protobuf::util::JsonPrintOptions *const)(v4 + 32));
          *(_BYTE *)(v4 + 32) = 1;
          *(_BYTE *)(v4 + 35) = 1;
          std::string::basic_string(v4 + 240);
          google::protobuf::util::MessageToJsonString(
            (google::protobuf::util::Status *)(v4 + 368),
            (google::protobuf::Message *)(v4 + 608),
            p_yielda,
            jval,
            (int)request,
            (char)this,
            v27,
            v28);
          if ( !google::protobuf::util::Status::ok((const google::protobuf::util::Status *const)(v4 + 368)) )
          {
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v4 + 304),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/handler/request_handler.api.hpp",
              "queryHomeBlueprintBriefInfo",
              8414);
            v20 = common::milog::MiLogStream::operator<<<char [72],(char *[72])0>(
                    (common::milog::MiLogStream *const)(v4 + 304),
                    (const char (*)[72])"HomeBlueprintBatchBriefMuipData to json_string failed, share_code_set: ");
            common::milog::MiLogStream::operator<<<std::string>(v20, (const std::set<std::string> *)(v4 + 528));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 304));
            v7 = -1;
          }
          else
          {
            Json::Value::Value(v4 + 448, 0LL);
            Json::Reader::Reader((Json::Reader *)(v4 + 720));
            if ( !Json::Reader::parse(
                    (Json::Reader *const)(v4 + 720),
                    (const std::string *)(v4 + 240),
                    (Json::Value *)(v4 + 448),
                    1) )
            {
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v4 + 304),
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/handler/request_handler.api.hpp",
                "queryHomeBlueprintBriefInfo",
                8421);
              v21 = common::milog::MiLogStream::operator<<<char [51],(char *[51])0>(
                      (common::milog::MiLogStream *const)(v4 + 304),
                      (const char (*)[51])"json_string to json_value failed, share_code_set: ");
              common::milog::MiLogStream::operator<<<std::string>(v21, (const std::set<std::string> *)(v4 + 528));
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 304));
              v7 = -1;
            }
            else
            {
              v22 = (Json::Value *)Json::Value::operator[](
                                     (Json::Value_0 *const)jvalb,
                                     "home_blueprint_batch_brief_data");
              Json::Value::operator=(v22);
              v7 = 0;
            }
            Json::Reader::~Reader((Json::Reader *const)(v4 + 720));
            Json::Value::~Value((Json::Value_0 *const)(v4 + 448));
          }
          google::protobuf::util::Status::~Status((google::protobuf::util::Status *const)(v4 + 368));
          std::string::~string((void *)(v4 + 240));
          proto::HomeBlueprintBatchBriefMuipData::~HomeBlueprintBatchBriefMuipData((proto::HomeBlueprintBatchBriefMuipData *const)(v4 + 608));
        }
        std::vector<proto::HomeBlueprintBriefRedisData>::~vector((std::vector<proto::HomeBlueprintBriefRedisData> *const)(v4 + 112));
      }
      else
      {
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v4 + 304),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/handler/request_handler.api.hpp",
          "queryHomeBlueprintBriefInfo",
          8378);
        v10 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
                (common::milog::MiLogStream *const)(v4 + 304),
                (const char (*)[21])"share_code_set size:");
        __for_end._M_current = (std::string *)std::set<std::string>::size((const std::set<std::string> *const)(v4 + 528));
        common::milog::MiLogStream::operator<<<unsigned long,(unsigned long *)0>(
          v10,
          (const unsigned __int64 *)&__for_end);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v4 + 304));
        v7 = -1;
      }
      std::set<std::string>::~set((std::set<std::string> *const)(v4 + 528));
    }
    std::vector<std::string>::~vector((std::vector<std::string> *const)(v4 + 48));
  }
  std::string::~string((void *)(v4 + 176));
  if ( v37 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8030) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF803C) = 0LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8048) = 0;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8054) = 0LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF807C) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    __asan_stack_free_5(v4, 1056LL, v37);
  }
  return v7;
};

// Line 8429: range 000000000CBE853A-000000000CBE88B5
int32_t __cdecl RequestHandler::removeHomeBlueprintInfo(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  std::string *v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r13
  int32_t v7; // r14d
  common::milog::MiLogStream *v8; // rax
  common::milog::MiLogStream *v9; // rax
  common::milog::MiLogStream *v10; // rax
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-B5h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-B4h]
  std::string key; // [rsp+30h] [rbp-B0h] BYREF
  char v15[144]; // [rsp+50h] [rbp-90h] BYREF

  v4 = (std::string *)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_1(96LL);
    if ( v5 )
      v4 = (std::string *)v5;
  }
  v4->_M_dataplus._M_p = (std::string::pointer)1102416563;
  v4->_M_string_length = (std::string::size_type)"1 32 32 15 share_code:8430";
  v4->_anon_0._M_allocated_capacity = (std::string::size_type)RequestHandler::removeHomeBlueprintInfo;
  v6 = (unsigned __int64)v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450888) = -202116109;
  std::string::basic_string(&v4[1]);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&key, "share_code", &__a);
  retcode = getRequestParam<std::string>(request, &key, v4 + 1);
  std::string::~string(&key);
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v7 = retcode;
  }
  else
  {
    if ( RedisOpHome::removeHomeBlueprintDetailData(v4 + 1) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "removeHomeBlueprintInfo",
        8439);
      v8 = common::milog::MiLogStream::operator<<<char [50],(char *[50])0>(
             (common::milog::MiLogStream *const)&key,
             (const char (*)[50])"removeHomeBlueprintDetailData failed, share_code:");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, v4 + 1);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
    }
    if ( RedisOpHome::removeHomeBlueprintBriefData(v4 + 1) )
    {
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)&key,
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/handler/request_handler.api.hpp",
        "removeHomeBlueprintInfo",
        8443);
      v9 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
             (common::milog::MiLogStream *const)&key,
             (const char (*)[42])"remove custom dungeon failed, share_code:");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v9, v4 + 1);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)&key,
      &common::milog::MiLogDefault::default_log_obj_,
      1u,
      "./src/handler/request_handler.api.hpp",
      "removeHomeBlueprintInfo",
      8445);
    v10 = common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
            (common::milog::MiLogStream *const)&key,
            (const char (*)[37])"removeHomeBlueprintInfo share_code: ");
    common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v10, v4 + 1);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)&key);
    v7 = 0;
  }
  std::string::~string(&v4[1]);
  result = v7;
  if ( v15 == (char *)v4 )
  {
    *(_DWORD *)(((unsigned __int64)v4 >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((unsigned __int64)v4 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    v4->_M_dataplus._M_p = (std::string::pointer)1172321806;
    *(_QWORD *)(((unsigned __int64)v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)(((unsigned __int64)v4 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 8450: range 000000000CBE8CC6-000000000CBE8E9E
int32_t __cdecl RequestHandler::setDailyTaskVar(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:8451";
  *(_QWORD *)(v4 + 16) = RequestHandler::setDailyTaskVar;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::setDailyTaskVar(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::setDailyTaskVar::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8451: range 000000000CBE88B6-000000000CBE8CC5
int32_t __cdecl RequestHandler::setDailyTaskVar(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::setDailyTaskVar::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-125h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-124h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-120h]
  proto::SetDailyTaskVarOp *set_daily_task_var_op; // [rsp+38h] [rbp-118h]
  char v14[272]; // [rsp+40h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "6 32 4 8 uid:8453 48 4 12 task_id:8454 64 4 10 index:8455 80 4 10 value:8456 96 32 11 ticket:845"
                        "7 160 32 8 req:8472";
  *(_QWORD *)(v3 + 16) = RequestHandler::setDailyTaskVar(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862722] = -234556924;
  v5[536862724] = -218959118;
  v5[536862726] = -202116109;
  *(_DWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 64) = 0;
  *(_DWORD *)(v3 + 80) = 0;
  std::string::basic_string(v3 + 96);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 160), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[8],unsigned int &,char const(&)[6],unsigned int &,char const(&)[6],int &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 160),
              (unsigned int *)(v3 + 32),
              (std::remove_reference<char const (&)[8]>::type *)"task_id",
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[6]>::type *)"index",
              (unsigned int *)(v3 + 64),
              (std::remove_reference<char const (&)[6]>::type *)"value",
              (int *)(v3 + 80),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 96));
  std::string::~string((void *)(v3 + 160));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 96) )
  {
    v6 = 2012;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 32) )
      goto LABEL_12;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 32)) )
      v7 = 0;
    else
LABEL_12:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 160));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 96));
      set_daily_task_var_op = proto::OfflineMsgBin::mutable_set_daily_task_var_op(msg);
      proto::SetDailyTaskVarOp::set_task_id(set_daily_task_var_op, *(_DWORD *)(v3 + 48));
      proto::SetDailyTaskVarOp::set_index(set_daily_task_var_op, *(_DWORD *)(v3 + 64));
      proto::SetDailyTaskVarOp::set_value(set_daily_task_var_op, *(_DWORD *)(v3 + 80));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 32));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 160));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
    }
  }
  std::string::~string((void *)(v3 + 96));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 8490: range 000000000CBE9360-000000000CBE9538
int32_t __cdecl RequestHandler::avatarRenameAuditResult(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:8491";
  *(_QWORD *)(v4 + 16) = RequestHandler::avatarRenameAuditResult;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::avatarRenameAuditResult(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::avatarRenameAuditResult::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8491: range 000000000CBE8EA0-000000000CBE935E
int32_t __cdecl RequestHandler::avatarRenameAuditResult(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::avatarRenameAuditResult::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-165h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-164h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-160h]
  proto::AvatarRenameAuditResultOp *op; // [rsp+38h] [rbp-158h]
  char v15[336]; // [rsp+40h] [rbp-150h] BYREF

  v3 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_3(288LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "7 32 1 12 is_succ:8497 48 4 8 uid:8493 64 4 14 rename_id:8495 80 4 16 source_type:8498 96 32 11 "
                        "ticket:8494 160 32 16 target_name:8496 224 32 8 req:8517";
  *(_QWORD *)(v3 + 16) = RequestHandler::avatarRenameAuditResult(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556927;
  v5[536862722] = -234556924;
  v5[536862724] = -218959118;
  v5[536862726] = -218959118;
  v5[536862728] = -202116109;
  *(_DWORD *)(v3 + 48) = 0;
  std::string::basic_string(v3 + 96);
  *(_DWORD *)(v3 + 64) = 0;
  std::string::basic_string(v3 + 160);
  *(_BYTE *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 80) = 0;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 224), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[7],std::string &,char const(&)[10],unsigned int &,char const(&)[12],std::string &,char const(&)[8],bool &,char const(&)[12],unsigned int &>(
              http_request,
              (const std::string *)(v3 + 224),
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 96),
              (std::remove_reference<char const (&)[10]>::type *)"rename_id",
              (unsigned int *)(v3 + 64),
              (std::remove_reference<char const (&)[12]>::type *)"target_name",
              (std::string *)(v3 + 160),
              (std::remove_reference<char const (&)[8]>::type *)"is_succ",
              (bool *)(v3 + 32),
              (std::remove_reference<char const (&)[12]>::type *)"source_type",
              (unsigned int *)(v3 + 80));
  std::string::~string((void *)(v3 + 224));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 48) )
      goto LABEL_10;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 48)) )
      v7 = 0;
    else
LABEL_10:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else if ( (unsigned __int8)std::string::empty(v3 + 96) )
    {
      v6 = 2012;
    }
    else if ( !*(_DWORD *)(v3 + 64) || !*(_DWORD *)(v3 + 80) || (unsigned __int8)std::string::empty(v3 + 160) )
    {
      v6 = 1002;
    }
    else
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 224));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 224));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 96));
      op = proto::OfflineMsgBin::mutable_avatar_rename_audit_result_op(msg);
      proto::AvatarRenameAuditResultOp::set_rename_id(op, *(_DWORD *)(v3 + 64));
      proto::AvatarRenameAuditResultOp::set_target_name(op, (const std::string *)(v3 + 160));
      proto::AvatarRenameAuditResultOp::set_is_succ(op, *(_BYTE *)(v3 + 32));
      proto::AvatarRenameAuditResultOp::set_source_type(op, *(_DWORD *)(v3 + 80));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 48));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 224));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 224));
    }
  }
  std::string::~string((void *)(v3 + 160));
  std::string::~string((void *)(v3 + 96));
  result = v6;
  if ( v15 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 8537: range 000000000CBE992E-000000000CBE9B06
int32_t __cdecl RequestHandler::resetAvatarRename(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:8538";
  *(_QWORD *)(v4 + 16) = RequestHandler::resetAvatarRename;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::resetAvatarRename(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::resetAvatarRename::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8538: range 000000000CBE953A-000000000CBE992D
int32_t __cdecl RequestHandler::resetAvatarRename(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::resetAvatarRename::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-125h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-124h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-120h]
  proto::ResetAvatarRenameOp *op; // [rsp+38h] [rbp-118h]
  char v14[272]; // [rsp+40h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 48 4 8 uid:8540 64 4 14 avatar_id:8542 80 4 11 reason:8543 96 32 11 ticket:8541 160 32 8 req:8562";
  *(_QWORD *)(v3 + 16) = RequestHandler::resetAvatarRename(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862724] = -218959118;
  v5[536862726] = -202116109;
  *(_DWORD *)(v3 + 48) = 0;
  std::string::basic_string(v3 + 96);
  *(_DWORD *)(v3 + 64) = 0;
  *(_DWORD *)(v3 + 80) = 0;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 160), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[7],std::string &,char const(&)[10],unsigned int &,char const(&)[7],unsigned int &>(
              http_request,
              (const std::string *)(v3 + 160),
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 96),
              (std::remove_reference<char const (&)[10]>::type *)"avatar_id",
              (unsigned int *)(v3 + 64),
              (std::remove_reference<char const (&)[7]>::type *)"reason",
              (unsigned int *)(v3 + 80));
  std::string::~string((void *)(v3 + 160));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 48) )
      goto LABEL_10;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 48)) )
      v7 = 0;
    else
LABEL_10:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else if ( (unsigned __int8)std::string::empty(v3 + 96) )
    {
      v6 = 2012;
    }
    else if ( *(_DWORD *)(v3 + 64) )
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 160));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 96));
      op = proto::OfflineMsgBin::mutable_reset_avatar_rename_op(msg);
      proto::ResetAvatarRenameOp::set_avatar_id(op, *(_DWORD *)(v3 + 64));
      proto::ResetAvatarRenameOp::set_reason(op, *(_DWORD *)(v3 + 80));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 48));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 160));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
    }
    else
    {
      v6 = 1002;
    }
  }
  std::string::~string((void *)(v3 + 96));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 8580: range 000000000CBE9B08-000000000CBE9B22
int32_t __cdecl RequestHandler::addBothAITask(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  return 1001;
};

// Line 8653: range 000000000CBE9EAE-000000000CBEA086
int32_t __cdecl RequestHandler::addFinishedTalk(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:8654";
  *(_QWORD *)(v4 + 16) = RequestHandler::addFinishedTalk;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::addFinishedTalk(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::addFinishedTalk::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8654: range 000000000CBE9B24-000000000CBE9EAD
int32_t __cdecl RequestHandler::addFinishedTalk(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::addFinishedTalk::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-105h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-104h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-100h]
  proto::AddFinishedTalkOp *add_finished_talk_op; // [rsp+38h] [rbp-F8h]
  char v14[240]; // [rsp+40h] [rbp-F0h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 4 8 uid:8656 48 4 12 talk_id:8657 64 32 11 ticket:8658 128 32 8 req:8673";
  *(_QWORD *)(v3 + 16) = RequestHandler::addFinishedTalk(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862723] = -218959118;
  v5[536862725] = -202116109;
  *(_DWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  std::string::basic_string(v3 + 64);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 128), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[8],unsigned int &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 128),
              (unsigned int *)(v3 + 32),
              (std::remove_reference<char const (&)[8]>::type *)"talk_id",
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 64));
  std::string::~string((void *)(v3 + 128));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 64) )
  {
    v6 = 2012;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 32) )
      goto LABEL_12;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 32)) )
      v7 = 0;
    else
LABEL_12:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 128));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 128));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 64));
      add_finished_talk_op = proto::OfflineMsgBin::mutable_add_finished_talk_op(msg);
      proto::AddFinishedTalkOp::set_talk_id(add_finished_talk_op, *(_DWORD *)(v3 + 48));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 32));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 128));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 128));
    }
  }
  std::string::~string((void *)(v3 + 64));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8687: range 000000000CBEA412-000000000CBEA5EA
int32_t __cdecl RequestHandler::delFinishedTalk(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:8688";
  *(_QWORD *)(v4 + 16) = RequestHandler::delFinishedTalk;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::delFinishedTalk(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::delFinishedTalk::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8688: range 000000000CBEA088-000000000CBEA411
int32_t __cdecl RequestHandler::delFinishedTalk(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::delFinishedTalk::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-105h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-104h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-100h]
  proto::DelFinishedTalkOp *del_finished_talk_op; // [rsp+38h] [rbp-F8h]
  char v14[240]; // [rsp+40h] [rbp-F0h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 4 8 uid:8690 48 4 12 talk_id:8691 64 32 11 ticket:8692 128 32 8 req:8707";
  *(_QWORD *)(v3 + 16) = RequestHandler::delFinishedTalk(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862723] = -218959118;
  v5[536862725] = -202116109;
  *(_DWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  std::string::basic_string(v3 + 64);
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 128), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[8],unsigned int &,char const(&)[7],std::string &>(
              http_request,
              (const std::string *)(v3 + 128),
              (unsigned int *)(v3 + 32),
              (std::remove_reference<char const (&)[8]>::type *)"talk_id",
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 64));
  std::string::~string((void *)(v3 + 128));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else if ( (unsigned __int8)std::string::empty(v3 + 64) )
  {
    v6 = 2012;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 32) )
      goto LABEL_12;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 32)) )
      v7 = 0;
    else
LABEL_12:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 128));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 128));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 64));
      del_finished_talk_op = proto::OfflineMsgBin::mutable_del_finished_talk_op(msg);
      proto::DelFinishedTalkOp::set_talk_id(del_finished_talk_op, *(_DWORD *)(v3 + 48));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 32));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 128));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 128));
    }
  }
  std::string::~string((void *)(v3 + 64));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8722: range 000000000CBEA9CC-000000000CBEABA4
int32_t __cdecl RequestHandler::setPlayerGCGMatchScore(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:8723";
  *(_QWORD *)(v4 + 16) = RequestHandler::setPlayerGCGMatchScore;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::setPlayerGCGMatchScore(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::setPlayerGCGMatchScore::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8723: range 000000000CBEA5EC-000000000CBEA9CA
int32_t __cdecl RequestHandler::setPlayerGCGMatchScore(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::setPlayerGCGMatchScore::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-125h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-124h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-120h]
  proto::SetPlayerGCGMatchScoreOp *op; // [rsp+38h] [rbp-118h]
  char v14[272]; // [rsp+40h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 48 4 8 uid:8726 64 4 13 match_id:8727 80 4 10 score:8728 96 32 11 ticket:8725 160 32 8 req:8743";
  *(_QWORD *)(v3 + 16) = RequestHandler::setPlayerGCGMatchScore(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862724] = -218959118;
  v5[536862726] = -202116109;
  std::string::basic_string(v3 + 96);
  *(_DWORD *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 64) = 0;
  *(_DWORD *)(v3 + 80) = 0;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 160), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[7],std::string &,char const(&)[9],unsigned int &,char const(&)[6],unsigned int &>(
              http_request,
              (const std::string *)(v3 + 160),
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 96),
              (std::remove_reference<char const (&)[9]>::type *)"match_id",
              (unsigned int *)(v3 + 64),
              (std::remove_reference<char const (&)[6]>::type *)"score",
              (unsigned int *)(v3 + 80));
  std::string::~string((void *)(v3 + 160));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 48) )
      goto LABEL_10;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 48)) )
      v7 = 0;
    else
LABEL_10:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else if ( (unsigned __int8)std::string::empty(v3 + 96) )
    {
      v6 = 2012;
    }
    else
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 160));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 96));
      op = proto::OfflineMsgBin::mutable_set_player_gcg_match_score_op(msg);
      proto::SetPlayerGCGMatchScoreOp::set_match_id(op, *(_DWORD *)(v3 + 64));
      proto::SetPlayerGCGMatchScoreOp::set_score(op, *(_DWORD *)(v3 + 80));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 48));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 160));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
    }
  }
  std::string::~string((void *)(v3 + 96));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 8760: range 000000000CBEAFA4-000000000CBEB17C
int32_t __cdecl RequestHandler::setPushTipsState(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:8761";
  *(_QWORD *)(v4 + 16) = RequestHandler::setPushTipsState;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::setPushTipsState(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::setPushTipsState::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8761: range 000000000CBEABA6-000000000CBEAFA3
int32_t __cdecl RequestHandler::setPushTipsState(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::setPushTipsState::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-125h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-124h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-120h]
  proto::SetPushTipsStateOp *op; // [rsp+38h] [rbp-118h]
  char v14[272]; // [rsp+40h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 48 4 8 uid:8764 64 4 17 push_tips_id:8765 80 4 20 push_tips_state:8766 96 32 11 ticket:8763 160 32 8 req:8784";
  *(_QWORD *)(v3 + 16) = RequestHandler::setPushTipsState(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862724] = -218959118;
  v5[536862726] = -202116109;
  std::string::basic_string(v3 + 96);
  *(_DWORD *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 64) = 0;
  *(_DWORD *)(v3 + 80) = 0;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 160), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[7],std::string &,char const(&)[13],unsigned int &,char const(&)[16],unsigned int &>(
              http_request,
              (const std::string *)(v3 + 160),
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 96),
              (std::remove_reference<char const (&)[13]>::type *)"push_tips_id",
              (unsigned int *)(v3 + 64),
              (std::remove_reference<char const (&)[16]>::type *)"push_tips_state",
              (unsigned int *)(v3 + 80));
  std::string::~string((void *)(v3 + 160));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 48) )
      goto LABEL_10;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 48)) )
      v7 = 0;
    else
LABEL_10:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else if ( (unsigned __int8)std::string::empty(v3 + 96) )
    {
      v6 = 2012;
    }
    else if ( *(_DWORD *)(v3 + 64) && *(_DWORD *)(v3 + 80) )
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 160));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 96));
      op = proto::OfflineMsgBin::mutable_set_push_tips_state_op(msg);
      proto::SetPushTipsStateOp::set_push_tips_id(op, *(_DWORD *)(v3 + 64));
      proto::SetPushTipsStateOp::set_push_tips_state(op, *(_DWORD *)(v3 + 80));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 48));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 160));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
    }
    else
    {
      v6 = 1002;
    }
  }
  std::string::~string((void *)(v3 + 96));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 8800: range 000000000CBEB55E-000000000CBEB736
int32_t __cdecl RequestHandler::deletePlayerGCGCard(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:8801";
  *(_QWORD *)(v4 + 16) = RequestHandler::deletePlayerGCGCard;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::deletePlayerGCGCard(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::deletePlayerGCGCard::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8801: range 000000000CBEB17E-000000000CBEB55C
int32_t __cdecl RequestHandler::deletePlayerGCGCard(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::deletePlayerGCGCard::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-125h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-124h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-120h]
  proto::DeletePlayerGCGCardOp *op; // [rsp+38h] [rbp-118h]
  char v14[272]; // [rsp+40h] [rbp-110h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(224LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "5 48 4 8 uid:8804 64 4 12 card_id:8805 80 4 12 del_num:8806 96 32 11 ticket:8803 160 32 8 req:8821";
  *(_QWORD *)(v3 + 16) = RequestHandler::deletePlayerGCGCard(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -234556924;
  v5[536862724] = -218959118;
  v5[536862726] = -202116109;
  std::string::basic_string(v3 + 96);
  *(_DWORD *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 64) = 0;
  *(_DWORD *)(v3 + 80) = 0;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 160), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[7],std::string &,char const(&)[8],unsigned int &,char const(&)[8],unsigned int &>(
              http_request,
              (const std::string *)(v3 + 160),
              (unsigned int *)(v3 + 48),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 96),
              (std::remove_reference<char const (&)[8]>::type *)"card_id",
              (unsigned int *)(v3 + 64),
              (std::remove_reference<char const (&)[8]>::type *)"del_num",
              (unsigned int *)(v3 + 80));
  std::string::~string((void *)(v3 + 160));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 48) )
      goto LABEL_10;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 48)) )
      v7 = 0;
    else
LABEL_10:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else if ( (unsigned __int8)std::string::empty(v3 + 96) )
    {
      v6 = 2012;
    }
    else
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 160));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 96));
      op = proto::OfflineMsgBin::mutable_delete_player_gcg_card_op(msg);
      proto::DeletePlayerGCGCardOp::set_card_id(op, *(_DWORD *)(v3 + 64));
      proto::DeletePlayerGCGCardOp::set_del_num(op, *(_DWORD *)(v3 + 80));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 48));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 160));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 160));
    }
  }
  std::string::~string((void *)(v3 + 96));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8010) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 8839: range 000000000CBEBAC2-000000000CBEBC9A
int32_t __cdecl RequestHandler::deletePlayerGCGCardFace(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:8840";
  *(_QWORD *)(v4 + 16) = RequestHandler::deletePlayerGCGCardFace;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::deletePlayerGCGCardFace(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::deletePlayerGCGCardFace::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8840: range 000000000CBEB738-000000000CBEBAC1
int32_t __cdecl RequestHandler::deletePlayerGCGCardFace(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::deletePlayerGCGCardFace::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-105h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-104h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-100h]
  proto::DeletePlayerGCGCardFaceOp *op; // [rsp+38h] [rbp-F8h]
  char v14[240]; // [rsp+40h] [rbp-F0h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 4 8 uid:8843 48 4 17 card_face_id:8844 64 32 11 ticket:8842 128 32 8 req:8859";
  *(_QWORD *)(v3 + 16) = RequestHandler::deletePlayerGCGCardFace(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862723] = -218959118;
  v5[536862725] = -202116109;
  std::string::basic_string(v3 + 64);
  *(_DWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 128), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[7],std::string &,char const(&)[13],unsigned int &>(
              http_request,
              (const std::string *)(v3 + 128),
              (unsigned int *)(v3 + 32),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 64),
              (std::remove_reference<char const (&)[13]>::type *)"card_face_id",
              (unsigned int *)(v3 + 48));
  std::string::~string((void *)(v3 + 128));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 32) )
      goto LABEL_10;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 32)) )
      v7 = 0;
    else
LABEL_10:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else if ( (unsigned __int8)std::string::empty(v3 + 64) )
    {
      v6 = 2012;
    }
    else
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 128));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 128));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 64));
      op = proto::OfflineMsgBin::mutable_delete_player_gcg_card_face_op(msg);
      proto::DeletePlayerGCGCardFaceOp::set_card_face_id(op, *(_DWORD *)(v3 + 48));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 32));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 128));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 128));
    }
  }
  std::string::~string((void *)(v3 + 64));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8876: range 000000000CBEC026-000000000CBEC1FE
int32_t __cdecl RequestHandler::deletePlayerGCGDeckBack(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:8877";
  *(_QWORD *)(v4 + 16) = RequestHandler::deletePlayerGCGDeckBack;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::deletePlayerGCGDeckBack(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::deletePlayerGCGDeckBack::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8877: range 000000000CBEBC9C-000000000CBEC025
int32_t __cdecl RequestHandler::deletePlayerGCGDeckBack(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::deletePlayerGCGDeckBack::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-105h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-104h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-100h]
  proto::DeletePlayerGCGCardBackOp *op; // [rsp+38h] [rbp-F8h]
  char v14[240]; // [rsp+40h] [rbp-F0h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 4 8 uid:8880 48 4 17 card_back_id:8881 64 32 11 ticket:8879 128 32 8 req:8896";
  *(_QWORD *)(v3 + 16) = RequestHandler::deletePlayerGCGDeckBack(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862723] = -218959118;
  v5[536862725] = -202116109;
  std::string::basic_string(v3 + 64);
  *(_DWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 128), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[7],std::string &,char const(&)[13],unsigned int &>(
              http_request,
              (const std::string *)(v3 + 128),
              (unsigned int *)(v3 + 32),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 64),
              (std::remove_reference<char const (&)[13]>::type *)"card_back_id",
              (unsigned int *)(v3 + 48));
  std::string::~string((void *)(v3 + 128));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 32) )
      goto LABEL_10;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 32)) )
      v7 = 0;
    else
LABEL_10:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else if ( (unsigned __int8)std::string::empty(v3 + 64) )
    {
      v6 = 2012;
    }
    else
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 128));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 128));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 64));
      op = proto::OfflineMsgBin::mutable_delete_player_gcg_card_back_op(msg);
      proto::DeletePlayerGCGCardBackOp::set_card_back_id(op, *(_DWORD *)(v3 + 48));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 32));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 128));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 128));
    }
  }
  std::string::~string((void *)(v3 + 64));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8913: range 000000000CBEC58A-000000000CBEC762
int32_t __cdecl RequestHandler::deletePlayerGCGDeckField(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:8914";
  *(_QWORD *)(v4 + 16) = RequestHandler::deletePlayerGCGDeckField;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::deletePlayerGCGDeckField(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::deletePlayerGCGDeckField::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8914: range 000000000CBEC200-000000000CBEC589
int32_t __cdecl RequestHandler::deletePlayerGCGDeckField(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::deletePlayerGCGDeckField::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-105h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-104h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-100h]
  proto::DeletePlayerGCGDeckFieldOp *op; // [rsp+38h] [rbp-F8h]
  char v14[240]; // [rsp+40h] [rbp-F0h] BYREF

  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 4 8 uid:8917 48 4 18 deck_field_id:8918 64 32 11 ticket:8916 128 32 8 req:8933";
  *(_QWORD *)(v3 + 16) = RequestHandler::deletePlayerGCGDeckField(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862723] = -218959118;
  v5[536862725] = -202116109;
  std::string::basic_string(v3 + 64);
  *(_DWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 128), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[7],std::string &,char const(&)[14],unsigned int &>(
              http_request,
              (const std::string *)(v3 + 128),
              (unsigned int *)(v3 + 32),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 64),
              (std::remove_reference<char const (&)[14]>::type *)"deck_field_id",
              (unsigned int *)(v3 + 48));
  std::string::~string((void *)(v3 + 128));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 32) )
      goto LABEL_10;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 32)) )
      v7 = 0;
    else
LABEL_10:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else if ( (unsigned __int8)std::string::empty(v3 + 64) )
    {
      v6 = 2012;
    }
    else
    {
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 128));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 128));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 64));
      op = proto::OfflineMsgBin::mutable_delete_player_gcg_deck_field_op(msg);
      proto::DeletePlayerGCGDeckFieldOp::set_deck_field_id(op, *(_DWORD *)(v3 + 48));
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 32));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 128));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 128));
    }
  }
  std::string::~string((void *)(v3 + 64));
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8950: range 000000000CBECB0E-000000000CBECCE6
int32_t __cdecl RequestHandler::banPlayerGCGMatch(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:8951";
  *(_QWORD *)(v4 + 16) = RequestHandler::banPlayerGCGMatch;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::banPlayerGCGMatch(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::banPlayerGCGMatch::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8951: range 000000000CBEC764-000000000CBECB0C
int32_t __cdecl RequestHandler::banPlayerGCGMatch(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::banPlayerGCGMatch::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+27h] [rbp-109h] BYREF
  int32_t retcode; // [rsp+28h] [rbp-108h]
  uint32_t expire_time; // [rsp+2Ch] [rbp-104h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-100h]
  proto::BanPlayerGCGMatchOp *op; // [rsp+38h] [rbp-F8h]
  char v15[240]; // [rsp+40h] [rbp-F0h] BYREF

  v3 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 4 8 uid:8954 48 4 13 ban_time:8955 64 32 11 ticket:8953 128 32 8 req:8972";
  *(_QWORD *)(v3 + 16) = RequestHandler::banPlayerGCGMatch(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862723] = -218959118;
  v5[536862725] = -202116109;
  std::string::basic_string(v3 + 64);
  *(_DWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 128), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[7],std::string &,char const(&)[9],unsigned int &>(
              http_request,
              (const std::string *)(v3 + 128),
              (unsigned int *)(v3 + 32),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 64),
              (std::remove_reference<char const (&)[9]>::type *)"ban_time",
              (unsigned int *)(v3 + 48));
  std::string::~string((void *)(v3 + 128));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 32) )
      goto LABEL_10;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 32)) )
      v7 = 0;
    else
LABEL_10:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else if ( (unsigned __int8)std::string::empty(v3 + 64) )
    {
      v6 = 2012;
    }
    else
    {
      expire_time = 0;
      expire_time = common::tools::TimeUtils::getNow() + *(_DWORD *)(v3 + 48);
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 128));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 128));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 64));
      op = proto::OfflineMsgBin::mutable_ban_player_gcg_match_op(msg);
      proto::BanPlayerGCGMatchOp::set_expire_time(op, expire_time);
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 32));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 128));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 128));
    }
  }
  std::string::~string((void *)(v3 + 64));
  result = v6;
  if ( v15 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8989: range 000000000CBED092-000000000CBED26A
int32_t __cdecl RequestHandler::banPlayerGCGPVP(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  unsigned __int64 v6; // r12
  int32_t v7; // r13d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+20h] [rbp-D0h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+40h] [rbp-B0h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+60h] [rbp-90h] BYREF
  char v14[96]; // [rsp+90h] [rbp-60h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_0(64LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "1 32 8 18 make_req_func:8990";
  *(_QWORD *)(v4 + 16) = RequestHandler::banPlayerGCGPVP;
  v6 = v4 >> 3;
  *(_DWORD *)(v6 + 2147450880) = -235802127;
  *(_DWORD *)(v6 + 2147450884) = -202116352;
  *(_QWORD *)(v4 + 32) = this;
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<int (*)(common::minet::Packet &,Json::Value &),void,void>(
    &p_make_rsp,
    (int (*)(common::minet::Packet *, Json::Value *))RequestHandler::onSendOfflineMsgRsp);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::banPlayerGCGPVP(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    &p_make_req,
    *(RequestHandler::banPlayerGCGPVP::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8990: range 000000000CBECCE8-000000000CBED090
int32_t __cdecl RequestHandler::banPlayerGCGPVP(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::banPlayerGCGPVP::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  int32_t v6; // r14d
  char v7; // al
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+27h] [rbp-109h] BYREF
  int32_t retcode; // [rsp+28h] [rbp-108h]
  uint32_t expire_time; // [rsp+2Ch] [rbp-104h]
  proto::OfflineMsgBin *msg; // [rsp+30h] [rbp-100h]
  proto::BanPlayerGCGPVPOp *op; // [rsp+38h] [rbp-F8h]
  char v15[240]; // [rsp+40h] [rbp-F0h] BYREF

  v3 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_2(192LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "4 32 4 8 uid:8993 48 4 13 ban_time:8994 64 32 11 ticket:8992 128 32 8 req:9011";
  *(_QWORD *)(v3 + 16) = RequestHandler::banPlayerGCGPVP(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556924;
  v5[536862723] = -218959118;
  v5[536862725] = -202116109;
  std::string::basic_string(v3 + 64);
  *(_DWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>((std::string *const)(v3 + 128), off_1A660020, &__a);
  retcode = getRequestParam<unsigned int,char const(&)[7],std::string &,char const(&)[9],unsigned int &>(
              http_request,
              (const std::string *)(v3 + 128),
              (unsigned int *)(v3 + 32),
              (std::remove_reference<char const (&)[7]>::type *)"ticket",
              (std::string *)(v3 + 64),
              (std::remove_reference<char const (&)[9]>::type *)"ban_time",
              (unsigned int *)(v3 + 48));
  std::string::~string((void *)(v3 + 128));
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = retcode;
  }
  else
  {
    if ( !*(_DWORD *)(v3 + 32) )
      goto LABEL_10;
    if ( *(_BYTE *)(((unsigned __int64)__closure >> 3) + 0x7FFF8000) )
      __asan_report_load8(__closure);
    if ( RequestHandler::isUidExist(__closure->__this, *(_DWORD *)(v3 + 32)) )
      v7 = 0;
    else
LABEL_10:
      v7 = 1;
    if ( v7 )
    {
      v6 = 2001;
    }
    else if ( (unsigned __int8)std::string::empty(v3 + 64) )
    {
      v6 = 2012;
    }
    else
    {
      expire_time = 0;
      expire_time = common::tools::TimeUtils::getNow() + *(_DWORD *)(v3 + 48);
      proto::SendOfflineMsgReq::SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 128));
      msg = proto::SendOfflineMsgReq::mutable_msg((proto::SendOfflineMsgReq *const)(v3 + 128));
      proto::OfflineMsgBin::set_ticket(msg, (const std::string *)(v3 + 64));
      op = proto::OfflineMsgBin::mutable_ban_player_gcg_pvp_op(msg);
      proto::BanPlayerGCGPVPOp::set_expire_time(op, expire_time);
      common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 32));
      common::minet::Packet::setTargetService(packet, 9u);
      common::minet::Packet::setProto<proto::SendOfflineMsgReq>(packet, (const proto::SendOfflineMsgReq *)(v3 + 128));
      v6 = 0;
      proto::SendOfflineMsgReq::~SendOfflineMsgReq((proto::SendOfflineMsgReq *const)(v3 + 128));
    }
  }
  std::string::~string((void *)(v3 + 64));
  result = v6;
  if ( v15 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF800C) = 0;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9027: range 000000000CBED6CA-000000000CBED936
int32_t __cdecl RequestHandler::queryPlayerIsInMpMode(
        RequestHandler *const this,
        const common::minet::http_client::HttpRequest *request,
        Json::Value *jval,
        boost::asio::yield_context *p_yield)
{
  unsigned __int64 v4; // rbx
  __int64 v5; // rax
  _DWORD *v6; // r12
  int32_t v7; // r14d
  int32_t result; // eax
  std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> p_make_req; // [rsp+30h] [rbp-140h] BYREF
  std::function<int(common::minet::Packet&,Json::Value&)> p_make_rsp; // [rsp+50h] [rbp-120h] BYREF
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(),boost::asio::executor> > v13; // [rsp+70h] [rbp-100h] BYREF
  char v14[208]; // [rsp+A0h] [rbp-D0h] BYREF

  v4 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v5 = __asan_stack_malloc_2(160LL);
    if ( v5 )
      v4 = v5;
  }
  *(_QWORD *)v4 = 1102416563LL;
  *(_QWORD *)(v4 + 8) = "2 32 32 13 make_req:9029 96 32 13 make_rsp:9045";
  *(_QWORD *)(v4 + 16) = RequestHandler::queryPlayerIsInMpMode;
  v6 = (_DWORD *)(v4 >> 3);
  v6[536862720] = -235802127;
  v6[536862722] = -218959118;
  v6[536862724] = -202116109;
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function<RequestHandler::queryPlayerIsInMpMode(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1},void,void>(
    (std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> *const)(v4 + 32),
    (RequestHandler::queryPlayerIsInMpMode::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)>)request);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function<RequestHandler::queryPlayerIsInMpMode(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::Packet &,Json::Value &)#2},void,void>(
    (std::function<int(common::minet::Packet&,Json::Value&)> *const)(v4 + 96),
    (RequestHandler::queryPlayerIsInMpMode::<lambda(common::minet::Packet&, Json::Value&)>)request);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::basic_yield_context(
    &v13,
    p_yield);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::function(
    &p_make_rsp,
    (const std::function<int(common::minet::Packet&,Json::Value&)> *)(v4 + 96));
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::function(
    &p_make_req,
    (const std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> *)(v4 + 32));
  v7 = RequestHandler::processRequestOnOtherServer(this, &p_make_req, &p_make_rsp, request, jval, &v13);
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function(&p_make_req);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function(&p_make_rsp);
  boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>::~basic_yield_context(&v13);
  std::function<int ()(common::minet::Packet &,Json::Value &)>::~function((std::function<int(common::minet::Packet&,Json::Value&)> *const)(v4 + 96));
  std::function<int ()(common::minet::http_client::HttpRequest const&,common::minet::Packet &)>::~function((std::function<int(const common::minet::http_client::HttpRequest&,common::minet::Packet&)> *const)(v4 + 32));
  result = v7;
  if ( v14 == (char *)v4 )
  {
    *(_DWORD *)((v4 >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8008) = 0;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v4 = 1172321806LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v4 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v4 >> 3) + 0x7FFF8010) = -168430091;
  }
  return result;
};

// Line 9029: range 000000000CBED26C-000000000CBED4A1
int32_t __cdecl RequestHandler::queryPlayerIsInMpMode(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator()(
        const RequestHandler::queryPlayerIsInMpMode::<lambda(const common::minet::http_client::HttpRequest&, common::minet::Packet&)> *const __closure,
        const common::minet::http_client::HttpRequest *http_request,
        common::minet::Packet *packet)
{
  unsigned __int64 v3; // rbx
  __int64 v4; // rax
  _DWORD *v5; // r13
  int32_t v6; // r14d
  int32_t result; // eax
  std::allocator<char> __a; // [rsp+2Bh] [rbp-D5h] BYREF
  int32_t retcode; // [rsp+2Ch] [rbp-D4h]
  std::string key; // [rsp+30h] [rbp-D0h] BYREF
  char v12[176]; // [rsp+50h] [rbp-B0h] BYREF

  v3 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 8 uid:9032 64 24 8 req:9031";
  *(_QWORD *)(v3 + 16) = RequestHandler::queryPlayerIsInMpMode(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::http_client::HttpRequest const&,common::minet::Packet &)#1}::operator();
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862722] = -218103808;
  v5[536862723] = -202116109;
  proto::PlayerMpModeReq::PlayerMpModeReq((proto::PlayerMpModeReq *const)(v3 + 64));
  *(_DWORD *)(v3 + 48) = 0;
  std::allocator<char>::allocator(&__a);
  std::string::basic_string<std::allocator<char>>(&key, off_1A660020, &__a);
  retcode = getRequestParam<unsigned int>(http_request, &key, (unsigned int *)(v3 + 48));
  std::string::~string(&key);
  std::allocator<char>::~allocator(&__a);
  if ( retcode )
  {
    v6 = -233;
  }
  else
  {
    common::minet::Packet::setUserId(packet, *(_DWORD *)(v3 + 48));
    common::minet::Packet::setTargetService(packet, 3u);
    common::minet::Packet::setProto<proto::PlayerMpModeReq>(packet, (const proto::PlayerMpModeReq *)(v3 + 64));
    v6 = 0;
  }
  proto::PlayerMpModeReq::~PlayerMpModeReq((proto::PlayerMpModeReq *const)(v3 + 64));
  result = v6;
  if ( v12 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9045: range 000000000CBED4A2-000000000CBED6C8
int32_t __cdecl RequestHandler::queryPlayerIsInMpMode(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::Packet &,Json::Value &)#2}::operator()(
        const RequestHandler::queryPlayerIsInMpMode::<lambda(common::minet::Packet&, Json::Value&)> *const __closure,
        common::minet::Packet *rsp_packet,
        Json::Value *jval)
{
  proto::PlayerMpModeRsp *v3; // rbx
  __int64 v4; // rax
  unsigned __int64 v5; // r13
  int32_t v6; // r14d
  bool is_mp_mode; // al
  Json::Value_0 *v8; // rax
  int32_t result; // eax
  int32_t ret; // [rsp+2Ch] [rbp-E4h]
  std::string v12; // [rsp+30h] [rbp-E0h] BYREF
  Json::Value_0 other; // [rsp+50h] [rbp-C0h] BYREF
  char v14[144]; // [rsp+80h] [rbp-90h] BYREF

  v3 = (proto::PlayerMpModeRsp *)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(96LL);
    if ( v4 )
      v3 = (proto::PlayerMpModeRsp *)v4;
  }
  v3->_vptr_MessageLite = (int (**)(...))1102416563;
  v3->_internal_metadata_.ptr_ = "1 32 32 8 rsp:9047";
  *(_QWORD *)&v3->retcode_ = RequestHandler::queryPlayerIsInMpMode(common::minet::http_client::HttpRequest const&,Json::Value &,boost::asio::basic_yield_context<boost::asio::executor_binder<void (*)(void),boost::asio::executor>>)::{lambda(common::minet::Packet &,Json::Value &)#2}::operator();
  v5 = (unsigned __int64)v3 >> 3;
  *(_DWORD *)(v5 + 2147450880) = -235802127;
  *(_DWORD *)(v5 + 2147450888) = -202116109;
  proto::PlayerMpModeRsp::PlayerMpModeRsp(v3 + 1);
  ret = common::minet::Packet::getProto<proto::PlayerMpModeRsp>(rsp_packet, v3 + 1);
  if ( ret )
  {
    v6 = ret;
  }
  else
  {
    if ( !proto::PlayerMpModeRsp::retcode(v3 + 1) )
    {
      is_mp_mode = proto::PlayerMpModeRsp::is_mp_mode(v3 + 1);
      std::to_string(&v12, is_mp_mode);
      Json::Value::Value(&other, &v12);
      v8 = Json::Value::operator[]((Json::Value_0 *const)jval, "is_mp_mode");
      Json::Value::operator=(v8, &other);
      Json::Value::~Value(&other);
      std::string::~string(&v12);
    }
    v6 = proto::PlayerMpModeRsp::retcode(v3 + 1);
  }
  proto::PlayerMpModeRsp::~PlayerMpModeRsp(v3 + 1);
  result = v6;
  if ( v14 == (char *)v3 )
  {
    *(_DWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    v3->_vptr_MessageLite = (int (**)(...))1172321806;
    *(_QWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)(((unsigned __int64)v3 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};
