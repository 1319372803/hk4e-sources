// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cmd/cmd_reputation.proto

#ifndef PROTOBUF_cmd_2fcmd_5freputation_2eproto__INCLUDED
#define PROTOBUF_cmd_2fcmd_5freputation_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "define.pb.h"
// @@protoc_insertion_point(includes)
namespace proto {
class AcceptCityReputationRequestReq;
class AcceptCityReputationRequestReqDefaultTypeInternal;
extern AcceptCityReputationRequestReqDefaultTypeInternal _AcceptCityReputationRequestReq_default_instance_;
class AcceptCityReputationRequestRsp;
class AcceptCityReputationRequestRspDefaultTypeInternal;
extern AcceptCityReputationRequestRspDefaultTypeInternal _AcceptCityReputationRequestRsp_default_instance_;
class CancelCityReputationRequestReq;
class CancelCityReputationRequestReqDefaultTypeInternal;
extern CancelCityReputationRequestReqDefaultTypeInternal _CancelCityReputationRequestReq_default_instance_;
class CancelCityReputationRequestRsp;
class CancelCityReputationRequestRspDefaultTypeInternal;
extern CancelCityReputationRequestRspDefaultTypeInternal _CancelCityReputationRequestRsp_default_instance_;
class CityReputationDataNotify;
class CityReputationDataNotifyDefaultTypeInternal;
extern CityReputationDataNotifyDefaultTypeInternal _CityReputationDataNotify_default_instance_;
class CityReputationExploreInfo;
class CityReputationExploreInfoDefaultTypeInternal;
extern CityReputationExploreInfoDefaultTypeInternal _CityReputationExploreInfo_default_instance_;
class CityReputationHuntInfo;
class CityReputationHuntInfoDefaultTypeInternal;
extern CityReputationHuntInfoDefaultTypeInternal _CityReputationHuntInfo_default_instance_;
class CityReputationInfo;
class CityReputationInfoDefaultTypeInternal;
extern CityReputationInfoDefaultTypeInternal _CityReputationInfo_default_instance_;
class CityReputationLevelupNotify;
class CityReputationLevelupNotifyDefaultTypeInternal;
extern CityReputationLevelupNotifyDefaultTypeInternal _CityReputationLevelupNotify_default_instance_;
class CityReputationQuestInfo;
class CityReputationQuestInfoDefaultTypeInternal;
extern CityReputationQuestInfoDefaultTypeInternal _CityReputationQuestInfo_default_instance_;
class CityReputationRequestInfo;
class CityReputationRequestInfoDefaultTypeInternal;
extern CityReputationRequestInfoDefaultTypeInternal _CityReputationRequestInfo_default_instance_;
class CityReputationRequestInfo_RequestInfo;
class CityReputationRequestInfo_RequestInfoDefaultTypeInternal;
extern CityReputationRequestInfo_RequestInfoDefaultTypeInternal _CityReputationRequestInfo_RequestInfo_default_instance_;
class CityReputationSimpleInfo;
class CityReputationSimpleInfoDefaultTypeInternal;
extern CityReputationSimpleInfoDefaultTypeInternal _CityReputationSimpleInfo_default_instance_;
class GetCityReputationInfoReq;
class GetCityReputationInfoReqDefaultTypeInternal;
extern GetCityReputationInfoReqDefaultTypeInternal _GetCityReputationInfoReq_default_instance_;
class GetCityReputationInfoRsp;
class GetCityReputationInfoRspDefaultTypeInternal;
extern GetCityReputationInfoRspDefaultTypeInternal _GetCityReputationInfoRsp_default_instance_;
class GetCityReputationMapInfoReq;
class GetCityReputationMapInfoReqDefaultTypeInternal;
extern GetCityReputationMapInfoReqDefaultTypeInternal _GetCityReputationMapInfoReq_default_instance_;
class GetCityReputationMapInfoRsp;
class GetCityReputationMapInfoRspDefaultTypeInternal;
extern GetCityReputationMapInfoRspDefaultTypeInternal _GetCityReputationMapInfoRsp_default_instance_;
class TakeCityReputationExploreRewardReq;
class TakeCityReputationExploreRewardReqDefaultTypeInternal;
extern TakeCityReputationExploreRewardReqDefaultTypeInternal _TakeCityReputationExploreRewardReq_default_instance_;
class TakeCityReputationExploreRewardRsp;
class TakeCityReputationExploreRewardRspDefaultTypeInternal;
extern TakeCityReputationExploreRewardRspDefaultTypeInternal _TakeCityReputationExploreRewardRsp_default_instance_;
class TakeCityReputationLevelRewardReq;
class TakeCityReputationLevelRewardReqDefaultTypeInternal;
extern TakeCityReputationLevelRewardReqDefaultTypeInternal _TakeCityReputationLevelRewardReq_default_instance_;
class TakeCityReputationLevelRewardRsp;
class TakeCityReputationLevelRewardRspDefaultTypeInternal;
extern TakeCityReputationLevelRewardRspDefaultTypeInternal _TakeCityReputationLevelRewardRsp_default_instance_;
class TakeCityReputationParentQuestReq;
class TakeCityReputationParentQuestReqDefaultTypeInternal;
extern TakeCityReputationParentQuestReqDefaultTypeInternal _TakeCityReputationParentQuestReq_default_instance_;
class TakeCityReputationParentQuestRsp;
class TakeCityReputationParentQuestRspDefaultTypeInternal;
extern TakeCityReputationParentQuestRspDefaultTypeInternal _TakeCityReputationParentQuestRsp_default_instance_;
}  // namespace proto

namespace proto {

namespace protobuf_cmd_2fcmd_5freputation_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_cmd_2fcmd_5freputation_2eproto

// ===================================================================

class CityReputationQuestInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.CityReputationQuestInfo) */ {
 public:
  CityReputationQuestInfo();
  virtual ~CityReputationQuestInfo();

  CityReputationQuestInfo(const CityReputationQuestInfo& from);

  inline CityReputationQuestInfo& operator=(const CityReputationQuestInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CityReputationQuestInfo(CityReputationQuestInfo&& from) noexcept
    : CityReputationQuestInfo() {
    *this = ::std::move(from);
  }

  inline CityReputationQuestInfo& operator=(CityReputationQuestInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CityReputationQuestInfo& default_instance();

  static inline const CityReputationQuestInfo* internal_default_instance() {
    return reinterpret_cast<const CityReputationQuestInfo*>(
               &_CityReputationQuestInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CityReputationQuestInfo* other);
  friend void swap(CityReputationQuestInfo& a, CityReputationQuestInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CityReputationQuestInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  CityReputationQuestInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CityReputationQuestInfo& from);
  void MergeFrom(const CityReputationQuestInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CityReputationQuestInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 finished_parent_quest_list = 7;
  int finished_parent_quest_list_size() const;
  void clear_finished_parent_quest_list();
  static const int kFinishedParentQuestListFieldNumber = 7;
  ::google::protobuf::uint32 finished_parent_quest_list(int index) const;
  void set_finished_parent_quest_list(int index, ::google::protobuf::uint32 value);
  void add_finished_parent_quest_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      finished_parent_quest_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_finished_parent_quest_list();

  // repeated uint32 taken_parent_quest_reward_list = 12;
  int taken_parent_quest_reward_list_size() const;
  void clear_taken_parent_quest_reward_list();
  static const int kTakenParentQuestRewardListFieldNumber = 12;
  ::google::protobuf::uint32 taken_parent_quest_reward_list(int index) const;
  void set_taken_parent_quest_reward_list(int index, ::google::protobuf::uint32 value);
  void add_taken_parent_quest_reward_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      taken_parent_quest_reward_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_taken_parent_quest_reward_list();

  // bool is_open = 2;
  void clear_is_open();
  static const int kIsOpenFieldNumber = 2;
  bool is_open() const;
  void set_is_open(bool value);

  // @@protoc_insertion_point(class_scope:proto.CityReputationQuestInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > finished_parent_quest_list_;
  mutable int _finished_parent_quest_list_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > taken_parent_quest_reward_list_;
  mutable int _taken_parent_quest_reward_list_cached_byte_size_;
  bool is_open_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5freputation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CityReputationRequestInfo_RequestInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.CityReputationRequestInfo.RequestInfo) */ {
 public:
  CityReputationRequestInfo_RequestInfo();
  virtual ~CityReputationRequestInfo_RequestInfo();

  CityReputationRequestInfo_RequestInfo(const CityReputationRequestInfo_RequestInfo& from);

  inline CityReputationRequestInfo_RequestInfo& operator=(const CityReputationRequestInfo_RequestInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CityReputationRequestInfo_RequestInfo(CityReputationRequestInfo_RequestInfo&& from) noexcept
    : CityReputationRequestInfo_RequestInfo() {
    *this = ::std::move(from);
  }

  inline CityReputationRequestInfo_RequestInfo& operator=(CityReputationRequestInfo_RequestInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CityReputationRequestInfo_RequestInfo& default_instance();

  static inline const CityReputationRequestInfo_RequestInfo* internal_default_instance() {
    return reinterpret_cast<const CityReputationRequestInfo_RequestInfo*>(
               &_CityReputationRequestInfo_RequestInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(CityReputationRequestInfo_RequestInfo* other);
  friend void swap(CityReputationRequestInfo_RequestInfo& a, CityReputationRequestInfo_RequestInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CityReputationRequestInfo_RequestInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  CityReputationRequestInfo_RequestInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CityReputationRequestInfo_RequestInfo& from);
  void MergeFrom(const CityReputationRequestInfo_RequestInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CityReputationRequestInfo_RequestInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 quest_id = 9;
  void clear_quest_id();
  static const int kQuestIdFieldNumber = 9;
  ::google::protobuf::uint32 quest_id() const;
  void set_quest_id(::google::protobuf::uint32 value);

  // uint32 request_id = 3;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 3;
  ::google::protobuf::uint32 request_id() const;
  void set_request_id(::google::protobuf::uint32 value);

  // bool is_taken_reward = 6;
  void clear_is_taken_reward();
  static const int kIsTakenRewardFieldNumber = 6;
  bool is_taken_reward() const;
  void set_is_taken_reward(bool value);

  // @@protoc_insertion_point(class_scope:proto.CityReputationRequestInfo.RequestInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 quest_id_;
  ::google::protobuf::uint32 request_id_;
  bool is_taken_reward_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5freputation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CityReputationRequestInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.CityReputationRequestInfo) */ {
 public:
  CityReputationRequestInfo();
  virtual ~CityReputationRequestInfo();

  CityReputationRequestInfo(const CityReputationRequestInfo& from);

  inline CityReputationRequestInfo& operator=(const CityReputationRequestInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CityReputationRequestInfo(CityReputationRequestInfo&& from) noexcept
    : CityReputationRequestInfo() {
    *this = ::std::move(from);
  }

  inline CityReputationRequestInfo& operator=(CityReputationRequestInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CityReputationRequestInfo& default_instance();

  static inline const CityReputationRequestInfo* internal_default_instance() {
    return reinterpret_cast<const CityReputationRequestInfo*>(
               &_CityReputationRequestInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(CityReputationRequestInfo* other);
  friend void swap(CityReputationRequestInfo& a, CityReputationRequestInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CityReputationRequestInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  CityReputationRequestInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CityReputationRequestInfo& from);
  void MergeFrom(const CityReputationRequestInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CityReputationRequestInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CityReputationRequestInfo_RequestInfo RequestInfo;

  // accessors -------------------------------------------------------

  // repeated .proto.CityReputationRequestInfo.RequestInfo request_info_list = 1;
  int request_info_list_size() const;
  void clear_request_info_list();
  static const int kRequestInfoListFieldNumber = 1;
  const ::proto::CityReputationRequestInfo_RequestInfo& request_info_list(int index) const;
  ::proto::CityReputationRequestInfo_RequestInfo* mutable_request_info_list(int index);
  ::proto::CityReputationRequestInfo_RequestInfo* add_request_info_list();
  ::google::protobuf::RepeatedPtrField< ::proto::CityReputationRequestInfo_RequestInfo >*
      mutable_request_info_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::CityReputationRequestInfo_RequestInfo >&
      request_info_list() const;

  // bool is_open = 2;
  void clear_is_open();
  static const int kIsOpenFieldNumber = 2;
  bool is_open() const;
  void set_is_open(bool value);

  // @@protoc_insertion_point(class_scope:proto.CityReputationRequestInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::CityReputationRequestInfo_RequestInfo > request_info_list_;
  bool is_open_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5freputation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CityReputationExploreInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.CityReputationExploreInfo) */ {
 public:
  CityReputationExploreInfo();
  virtual ~CityReputationExploreInfo();

  CityReputationExploreInfo(const CityReputationExploreInfo& from);

  inline CityReputationExploreInfo& operator=(const CityReputationExploreInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CityReputationExploreInfo(CityReputationExploreInfo&& from) noexcept
    : CityReputationExploreInfo() {
    *this = ::std::move(from);
  }

  inline CityReputationExploreInfo& operator=(CityReputationExploreInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CityReputationExploreInfo& default_instance();

  static inline const CityReputationExploreInfo* internal_default_instance() {
    return reinterpret_cast<const CityReputationExploreInfo*>(
               &_CityReputationExploreInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(CityReputationExploreInfo* other);
  friend void swap(CityReputationExploreInfo& a, CityReputationExploreInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CityReputationExploreInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  CityReputationExploreInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CityReputationExploreInfo& from);
  void MergeFrom(const CityReputationExploreInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CityReputationExploreInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 taken_explore_reward_list = 2;
  int taken_explore_reward_list_size() const;
  void clear_taken_explore_reward_list();
  static const int kTakenExploreRewardListFieldNumber = 2;
  ::google::protobuf::uint32 taken_explore_reward_list(int index) const;
  void set_taken_explore_reward_list(int index, ::google::protobuf::uint32 value);
  void add_taken_explore_reward_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      taken_explore_reward_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_taken_explore_reward_list();

  // uint32 explore_percent = 14;
  void clear_explore_percent();
  static const int kExplorePercentFieldNumber = 14;
  ::google::protobuf::uint32 explore_percent() const;
  void set_explore_percent(::google::protobuf::uint32 value);

  // bool is_open = 15;
  void clear_is_open();
  static const int kIsOpenFieldNumber = 15;
  bool is_open() const;
  void set_is_open(bool value);

  // @@protoc_insertion_point(class_scope:proto.CityReputationExploreInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > taken_explore_reward_list_;
  mutable int _taken_explore_reward_list_cached_byte_size_;
  ::google::protobuf::uint32 explore_percent_;
  bool is_open_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5freputation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CityReputationHuntInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.CityReputationHuntInfo) */ {
 public:
  CityReputationHuntInfo();
  virtual ~CityReputationHuntInfo();

  CityReputationHuntInfo(const CityReputationHuntInfo& from);

  inline CityReputationHuntInfo& operator=(const CityReputationHuntInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CityReputationHuntInfo(CityReputationHuntInfo&& from) noexcept
    : CityReputationHuntInfo() {
    *this = ::std::move(from);
  }

  inline CityReputationHuntInfo& operator=(CityReputationHuntInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CityReputationHuntInfo& default_instance();

  static inline const CityReputationHuntInfo* internal_default_instance() {
    return reinterpret_cast<const CityReputationHuntInfo*>(
               &_CityReputationHuntInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(CityReputationHuntInfo* other);
  friend void swap(CityReputationHuntInfo& a, CityReputationHuntInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CityReputationHuntInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  CityReputationHuntInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CityReputationHuntInfo& from);
  void MergeFrom(const CityReputationHuntInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CityReputationHuntInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool is_open = 6;
  void clear_is_open();
  static const int kIsOpenFieldNumber = 6;
  bool is_open() const;
  void set_is_open(bool value);

  // bool has_reward = 5;
  void clear_has_reward();
  static const int kHasRewardFieldNumber = 5;
  bool has_reward() const;
  void set_has_reward(bool value);

  // uint32 cur_week_finish_num = 15;
  void clear_cur_week_finish_num();
  static const int kCurWeekFinishNumFieldNumber = 15;
  ::google::protobuf::uint32 cur_week_finish_num() const;
  void set_cur_week_finish_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.CityReputationHuntInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool is_open_;
  bool has_reward_;
  ::google::protobuf::uint32 cur_week_finish_num_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5freputation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CityReputationInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.CityReputationInfo) */ {
 public:
  CityReputationInfo();
  virtual ~CityReputationInfo();

  CityReputationInfo(const CityReputationInfo& from);

  inline CityReputationInfo& operator=(const CityReputationInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CityReputationInfo(CityReputationInfo&& from) noexcept
    : CityReputationInfo() {
    *this = ::std::move(from);
  }

  inline CityReputationInfo& operator=(CityReputationInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CityReputationInfo& default_instance();

  static inline const CityReputationInfo* internal_default_instance() {
    return reinterpret_cast<const CityReputationInfo*>(
               &_CityReputationInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(CityReputationInfo* other);
  friend void swap(CityReputationInfo& a, CityReputationInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CityReputationInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  CityReputationInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CityReputationInfo& from);
  void MergeFrom(const CityReputationInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CityReputationInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 taken_level_reward_list = 2;
  int taken_level_reward_list_size() const;
  void clear_taken_level_reward_list();
  static const int kTakenLevelRewardListFieldNumber = 2;
  ::google::protobuf::uint32 taken_level_reward_list(int index) const;
  void set_taken_level_reward_list(int index, ::google::protobuf::uint32 value);
  void add_taken_level_reward_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      taken_level_reward_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_taken_level_reward_list();

  // .proto.CityReputationRequestInfo request_info = 5;
  bool has_request_info() const;
  void clear_request_info();
  static const int kRequestInfoFieldNumber = 5;
  const ::proto::CityReputationRequestInfo& request_info() const;
  ::proto::CityReputationRequestInfo* mutable_request_info();
  ::proto::CityReputationRequestInfo* release_request_info();
  void set_allocated_request_info(::proto::CityReputationRequestInfo* request_info);

  // .proto.CityReputationQuestInfo quest_info = 9;
  bool has_quest_info() const;
  void clear_quest_info();
  static const int kQuestInfoFieldNumber = 9;
  const ::proto::CityReputationQuestInfo& quest_info() const;
  ::proto::CityReputationQuestInfo* mutable_quest_info();
  ::proto::CityReputationQuestInfo* release_quest_info();
  void set_allocated_quest_info(::proto::CityReputationQuestInfo* quest_info);

  // .proto.CityReputationExploreInfo explore_info = 10;
  bool has_explore_info() const;
  void clear_explore_info();
  static const int kExploreInfoFieldNumber = 10;
  const ::proto::CityReputationExploreInfo& explore_info() const;
  ::proto::CityReputationExploreInfo* mutable_explore_info();
  ::proto::CityReputationExploreInfo* release_explore_info();
  void set_allocated_explore_info(::proto::CityReputationExploreInfo* explore_info);

  // .proto.CityReputationHuntInfo hunt_info = 11;
  bool has_hunt_info() const;
  void clear_hunt_info();
  static const int kHuntInfoFieldNumber = 11;
  const ::proto::CityReputationHuntInfo& hunt_info() const;
  ::proto::CityReputationHuntInfo* mutable_hunt_info();
  ::proto::CityReputationHuntInfo* release_hunt_info();
  void set_allocated_hunt_info(::proto::CityReputationHuntInfo* hunt_info);

  // uint32 next_refresh_time = 3;
  void clear_next_refresh_time();
  static const int kNextRefreshTimeFieldNumber = 3;
  ::google::protobuf::uint32 next_refresh_time() const;
  void set_next_refresh_time(::google::protobuf::uint32 value);

  // uint32 level = 4;
  void clear_level();
  static const int kLevelFieldNumber = 4;
  ::google::protobuf::uint32 level() const;
  void set_level(::google::protobuf::uint32 value);

  // uint32 total_accept_request_num = 6;
  void clear_total_accept_request_num();
  static const int kTotalAcceptRequestNumFieldNumber = 6;
  ::google::protobuf::uint32 total_accept_request_num() const;
  void set_total_accept_request_num(::google::protobuf::uint32 value);

  // uint32 exp = 13;
  void clear_exp();
  static const int kExpFieldNumber = 13;
  ::google::protobuf::uint32 exp() const;
  void set_exp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.CityReputationInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > taken_level_reward_list_;
  mutable int _taken_level_reward_list_cached_byte_size_;
  ::proto::CityReputationRequestInfo* request_info_;
  ::proto::CityReputationQuestInfo* quest_info_;
  ::proto::CityReputationExploreInfo* explore_info_;
  ::proto::CityReputationHuntInfo* hunt_info_;
  ::google::protobuf::uint32 next_refresh_time_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 total_accept_request_num_;
  ::google::protobuf::uint32 exp_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5freputation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetCityReputationInfoReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GetCityReputationInfoReq) */ {
 public:
  GetCityReputationInfoReq();
  virtual ~GetCityReputationInfoReq();

  GetCityReputationInfoReq(const GetCityReputationInfoReq& from);

  inline GetCityReputationInfoReq& operator=(const GetCityReputationInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetCityReputationInfoReq(GetCityReputationInfoReq&& from) noexcept
    : GetCityReputationInfoReq() {
    *this = ::std::move(from);
  }

  inline GetCityReputationInfoReq& operator=(GetCityReputationInfoReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetCityReputationInfoReq& default_instance();

  static inline const GetCityReputationInfoReq* internal_default_instance() {
    return reinterpret_cast<const GetCityReputationInfoReq*>(
               &_GetCityReputationInfoReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(GetCityReputationInfoReq* other);
  friend void swap(GetCityReputationInfoReq& a, GetCityReputationInfoReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetCityReputationInfoReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GetCityReputationInfoReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetCityReputationInfoReq& from);
  void MergeFrom(const GetCityReputationInfoReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetCityReputationInfoReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 city_id = 7;
  void clear_city_id();
  static const int kCityIdFieldNumber = 7;
  ::google::protobuf::uint32 city_id() const;
  void set_city_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GetCityReputationInfoReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 city_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5freputation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetCityReputationInfoRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GetCityReputationInfoRsp) */ {
 public:
  GetCityReputationInfoRsp();
  virtual ~GetCityReputationInfoRsp();

  GetCityReputationInfoRsp(const GetCityReputationInfoRsp& from);

  inline GetCityReputationInfoRsp& operator=(const GetCityReputationInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetCityReputationInfoRsp(GetCityReputationInfoRsp&& from) noexcept
    : GetCityReputationInfoRsp() {
    *this = ::std::move(from);
  }

  inline GetCityReputationInfoRsp& operator=(GetCityReputationInfoRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetCityReputationInfoRsp& default_instance();

  static inline const GetCityReputationInfoRsp* internal_default_instance() {
    return reinterpret_cast<const GetCityReputationInfoRsp*>(
               &_GetCityReputationInfoRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(GetCityReputationInfoRsp* other);
  friend void swap(GetCityReputationInfoRsp& a, GetCityReputationInfoRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetCityReputationInfoRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GetCityReputationInfoRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetCityReputationInfoRsp& from);
  void MergeFrom(const GetCityReputationInfoRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetCityReputationInfoRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.CityReputationInfo city_reputation_info = 9;
  bool has_city_reputation_info() const;
  void clear_city_reputation_info();
  static const int kCityReputationInfoFieldNumber = 9;
  const ::proto::CityReputationInfo& city_reputation_info() const;
  ::proto::CityReputationInfo* mutable_city_reputation_info();
  ::proto::CityReputationInfo* release_city_reputation_info();
  void set_allocated_city_reputation_info(::proto::CityReputationInfo* city_reputation_info);

  // uint32 city_id = 1;
  void clear_city_id();
  static const int kCityIdFieldNumber = 1;
  ::google::protobuf::uint32 city_id() const;
  void set_city_id(::google::protobuf::uint32 value);

  // int32 retcode = 4;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 4;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.GetCityReputationInfoRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::CityReputationInfo* city_reputation_info_;
  ::google::protobuf::uint32 city_id_;
  ::google::protobuf::int32 retcode_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5freputation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TakeCityReputationLevelRewardReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.TakeCityReputationLevelRewardReq) */ {
 public:
  TakeCityReputationLevelRewardReq();
  virtual ~TakeCityReputationLevelRewardReq();

  TakeCityReputationLevelRewardReq(const TakeCityReputationLevelRewardReq& from);

  inline TakeCityReputationLevelRewardReq& operator=(const TakeCityReputationLevelRewardReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TakeCityReputationLevelRewardReq(TakeCityReputationLevelRewardReq&& from) noexcept
    : TakeCityReputationLevelRewardReq() {
    *this = ::std::move(from);
  }

  inline TakeCityReputationLevelRewardReq& operator=(TakeCityReputationLevelRewardReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TakeCityReputationLevelRewardReq& default_instance();

  static inline const TakeCityReputationLevelRewardReq* internal_default_instance() {
    return reinterpret_cast<const TakeCityReputationLevelRewardReq*>(
               &_TakeCityReputationLevelRewardReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(TakeCityReputationLevelRewardReq* other);
  friend void swap(TakeCityReputationLevelRewardReq& a, TakeCityReputationLevelRewardReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TakeCityReputationLevelRewardReq* New() const PROTOBUF_FINAL { return New(NULL); }

  TakeCityReputationLevelRewardReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TakeCityReputationLevelRewardReq& from);
  void MergeFrom(const TakeCityReputationLevelRewardReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TakeCityReputationLevelRewardReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 city_id = 1;
  void clear_city_id();
  static const int kCityIdFieldNumber = 1;
  ::google::protobuf::uint32 city_id() const;
  void set_city_id(::google::protobuf::uint32 value);

  // uint32 level = 11;
  void clear_level();
  static const int kLevelFieldNumber = 11;
  ::google::protobuf::uint32 level() const;
  void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.TakeCityReputationLevelRewardReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 city_id_;
  ::google::protobuf::uint32 level_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5freputation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TakeCityReputationLevelRewardRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.TakeCityReputationLevelRewardRsp) */ {
 public:
  TakeCityReputationLevelRewardRsp();
  virtual ~TakeCityReputationLevelRewardRsp();

  TakeCityReputationLevelRewardRsp(const TakeCityReputationLevelRewardRsp& from);

  inline TakeCityReputationLevelRewardRsp& operator=(const TakeCityReputationLevelRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TakeCityReputationLevelRewardRsp(TakeCityReputationLevelRewardRsp&& from) noexcept
    : TakeCityReputationLevelRewardRsp() {
    *this = ::std::move(from);
  }

  inline TakeCityReputationLevelRewardRsp& operator=(TakeCityReputationLevelRewardRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TakeCityReputationLevelRewardRsp& default_instance();

  static inline const TakeCityReputationLevelRewardRsp* internal_default_instance() {
    return reinterpret_cast<const TakeCityReputationLevelRewardRsp*>(
               &_TakeCityReputationLevelRewardRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(TakeCityReputationLevelRewardRsp* other);
  friend void swap(TakeCityReputationLevelRewardRsp& a, TakeCityReputationLevelRewardRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TakeCityReputationLevelRewardRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  TakeCityReputationLevelRewardRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TakeCityReputationLevelRewardRsp& from);
  void MergeFrom(const TakeCityReputationLevelRewardRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TakeCityReputationLevelRewardRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.ItemParam item_list = 13;
  int item_list_size() const;
  void clear_item_list();
  static const int kItemListFieldNumber = 13;
  const ::proto::ItemParam& item_list(int index) const;
  ::proto::ItemParam* mutable_item_list(int index);
  ::proto::ItemParam* add_item_list();
  ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >*
      mutable_item_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >&
      item_list() const;

  // uint32 city_id = 15;
  void clear_city_id();
  static const int kCityIdFieldNumber = 15;
  ::google::protobuf::uint32 city_id() const;
  void set_city_id(::google::protobuf::uint32 value);

  // uint32 level = 9;
  void clear_level();
  static const int kLevelFieldNumber = 9;
  ::google::protobuf::uint32 level() const;
  void set_level(::google::protobuf::uint32 value);

  // int32 retcode = 11;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 11;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.TakeCityReputationLevelRewardRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::ItemParam > item_list_;
  ::google::protobuf::uint32 city_id_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::int32 retcode_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5freputation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CityReputationLevelupNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.CityReputationLevelupNotify) */ {
 public:
  CityReputationLevelupNotify();
  virtual ~CityReputationLevelupNotify();

  CityReputationLevelupNotify(const CityReputationLevelupNotify& from);

  inline CityReputationLevelupNotify& operator=(const CityReputationLevelupNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CityReputationLevelupNotify(CityReputationLevelupNotify&& from) noexcept
    : CityReputationLevelupNotify() {
    *this = ::std::move(from);
  }

  inline CityReputationLevelupNotify& operator=(CityReputationLevelupNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CityReputationLevelupNotify& default_instance();

  static inline const CityReputationLevelupNotify* internal_default_instance() {
    return reinterpret_cast<const CityReputationLevelupNotify*>(
               &_CityReputationLevelupNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(CityReputationLevelupNotify* other);
  friend void swap(CityReputationLevelupNotify& a, CityReputationLevelupNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CityReputationLevelupNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  CityReputationLevelupNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CityReputationLevelupNotify& from);
  void MergeFrom(const CityReputationLevelupNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CityReputationLevelupNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 city_id = 12;
  void clear_city_id();
  static const int kCityIdFieldNumber = 12;
  ::google::protobuf::uint32 city_id() const;
  void set_city_id(::google::protobuf::uint32 value);

  // uint32 level = 15;
  void clear_level();
  static const int kLevelFieldNumber = 15;
  ::google::protobuf::uint32 level() const;
  void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.CityReputationLevelupNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 city_id_;
  ::google::protobuf::uint32 level_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5freputation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TakeCityReputationParentQuestReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.TakeCityReputationParentQuestReq) */ {
 public:
  TakeCityReputationParentQuestReq();
  virtual ~TakeCityReputationParentQuestReq();

  TakeCityReputationParentQuestReq(const TakeCityReputationParentQuestReq& from);

  inline TakeCityReputationParentQuestReq& operator=(const TakeCityReputationParentQuestReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TakeCityReputationParentQuestReq(TakeCityReputationParentQuestReq&& from) noexcept
    : TakeCityReputationParentQuestReq() {
    *this = ::std::move(from);
  }

  inline TakeCityReputationParentQuestReq& operator=(TakeCityReputationParentQuestReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TakeCityReputationParentQuestReq& default_instance();

  static inline const TakeCityReputationParentQuestReq* internal_default_instance() {
    return reinterpret_cast<const TakeCityReputationParentQuestReq*>(
               &_TakeCityReputationParentQuestReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(TakeCityReputationParentQuestReq* other);
  friend void swap(TakeCityReputationParentQuestReq& a, TakeCityReputationParentQuestReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TakeCityReputationParentQuestReq* New() const PROTOBUF_FINAL { return New(NULL); }

  TakeCityReputationParentQuestReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TakeCityReputationParentQuestReq& from);
  void MergeFrom(const TakeCityReputationParentQuestReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TakeCityReputationParentQuestReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 parent_quest_list = 6;
  int parent_quest_list_size() const;
  void clear_parent_quest_list();
  static const int kParentQuestListFieldNumber = 6;
  ::google::protobuf::uint32 parent_quest_list(int index) const;
  void set_parent_quest_list(int index, ::google::protobuf::uint32 value);
  void add_parent_quest_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      parent_quest_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_parent_quest_list();

  // uint32 city_id = 1;
  void clear_city_id();
  static const int kCityIdFieldNumber = 1;
  ::google::protobuf::uint32 city_id() const;
  void set_city_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.TakeCityReputationParentQuestReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > parent_quest_list_;
  mutable int _parent_quest_list_cached_byte_size_;
  ::google::protobuf::uint32 city_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5freputation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TakeCityReputationParentQuestRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.TakeCityReputationParentQuestRsp) */ {
 public:
  TakeCityReputationParentQuestRsp();
  virtual ~TakeCityReputationParentQuestRsp();

  TakeCityReputationParentQuestRsp(const TakeCityReputationParentQuestRsp& from);

  inline TakeCityReputationParentQuestRsp& operator=(const TakeCityReputationParentQuestRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TakeCityReputationParentQuestRsp(TakeCityReputationParentQuestRsp&& from) noexcept
    : TakeCityReputationParentQuestRsp() {
    *this = ::std::move(from);
  }

  inline TakeCityReputationParentQuestRsp& operator=(TakeCityReputationParentQuestRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TakeCityReputationParentQuestRsp& default_instance();

  static inline const TakeCityReputationParentQuestRsp* internal_default_instance() {
    return reinterpret_cast<const TakeCityReputationParentQuestRsp*>(
               &_TakeCityReputationParentQuestRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(TakeCityReputationParentQuestRsp* other);
  friend void swap(TakeCityReputationParentQuestRsp& a, TakeCityReputationParentQuestRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TakeCityReputationParentQuestRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  TakeCityReputationParentQuestRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TakeCityReputationParentQuestRsp& from);
  void MergeFrom(const TakeCityReputationParentQuestRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TakeCityReputationParentQuestRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 parent_quest_list = 9;
  int parent_quest_list_size() const;
  void clear_parent_quest_list();
  static const int kParentQuestListFieldNumber = 9;
  ::google::protobuf::uint32 parent_quest_list(int index) const;
  void set_parent_quest_list(int index, ::google::protobuf::uint32 value);
  void add_parent_quest_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      parent_quest_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_parent_quest_list();

  // repeated .proto.ItemParam item_list = 13;
  int item_list_size() const;
  void clear_item_list();
  static const int kItemListFieldNumber = 13;
  const ::proto::ItemParam& item_list(int index) const;
  ::proto::ItemParam* mutable_item_list(int index);
  ::proto::ItemParam* add_item_list();
  ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >*
      mutable_item_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >&
      item_list() const;

  // int32 retcode = 7;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 7;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // uint32 city_id = 14;
  void clear_city_id();
  static const int kCityIdFieldNumber = 14;
  ::google::protobuf::uint32 city_id() const;
  void set_city_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.TakeCityReputationParentQuestRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > parent_quest_list_;
  mutable int _parent_quest_list_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::ItemParam > item_list_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::uint32 city_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5freputation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AcceptCityReputationRequestReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.AcceptCityReputationRequestReq) */ {
 public:
  AcceptCityReputationRequestReq();
  virtual ~AcceptCityReputationRequestReq();

  AcceptCityReputationRequestReq(const AcceptCityReputationRequestReq& from);

  inline AcceptCityReputationRequestReq& operator=(const AcceptCityReputationRequestReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AcceptCityReputationRequestReq(AcceptCityReputationRequestReq&& from) noexcept
    : AcceptCityReputationRequestReq() {
    *this = ::std::move(from);
  }

  inline AcceptCityReputationRequestReq& operator=(AcceptCityReputationRequestReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AcceptCityReputationRequestReq& default_instance();

  static inline const AcceptCityReputationRequestReq* internal_default_instance() {
    return reinterpret_cast<const AcceptCityReputationRequestReq*>(
               &_AcceptCityReputationRequestReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(AcceptCityReputationRequestReq* other);
  friend void swap(AcceptCityReputationRequestReq& a, AcceptCityReputationRequestReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AcceptCityReputationRequestReq* New() const PROTOBUF_FINAL { return New(NULL); }

  AcceptCityReputationRequestReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AcceptCityReputationRequestReq& from);
  void MergeFrom(const AcceptCityReputationRequestReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AcceptCityReputationRequestReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 request_id = 5;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 5;
  ::google::protobuf::uint32 request_id() const;
  void set_request_id(::google::protobuf::uint32 value);

  // uint32 city_id = 14;
  void clear_city_id();
  static const int kCityIdFieldNumber = 14;
  ::google::protobuf::uint32 city_id() const;
  void set_city_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.AcceptCityReputationRequestReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 request_id_;
  ::google::protobuf::uint32 city_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5freputation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AcceptCityReputationRequestRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.AcceptCityReputationRequestRsp) */ {
 public:
  AcceptCityReputationRequestRsp();
  virtual ~AcceptCityReputationRequestRsp();

  AcceptCityReputationRequestRsp(const AcceptCityReputationRequestRsp& from);

  inline AcceptCityReputationRequestRsp& operator=(const AcceptCityReputationRequestRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AcceptCityReputationRequestRsp(AcceptCityReputationRequestRsp&& from) noexcept
    : AcceptCityReputationRequestRsp() {
    *this = ::std::move(from);
  }

  inline AcceptCityReputationRequestRsp& operator=(AcceptCityReputationRequestRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AcceptCityReputationRequestRsp& default_instance();

  static inline const AcceptCityReputationRequestRsp* internal_default_instance() {
    return reinterpret_cast<const AcceptCityReputationRequestRsp*>(
               &_AcceptCityReputationRequestRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(AcceptCityReputationRequestRsp* other);
  friend void swap(AcceptCityReputationRequestRsp& a, AcceptCityReputationRequestRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AcceptCityReputationRequestRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  AcceptCityReputationRequestRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AcceptCityReputationRequestRsp& from);
  void MergeFrom(const AcceptCityReputationRequestRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AcceptCityReputationRequestRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 retcode = 2;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 2;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // uint32 request_id = 5;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 5;
  ::google::protobuf::uint32 request_id() const;
  void set_request_id(::google::protobuf::uint32 value);

  // uint32 city_id = 13;
  void clear_city_id();
  static const int kCityIdFieldNumber = 13;
  ::google::protobuf::uint32 city_id() const;
  void set_city_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.AcceptCityReputationRequestRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::uint32 request_id_;
  ::google::protobuf::uint32 city_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5freputation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CancelCityReputationRequestReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.CancelCityReputationRequestReq) */ {
 public:
  CancelCityReputationRequestReq();
  virtual ~CancelCityReputationRequestReq();

  CancelCityReputationRequestReq(const CancelCityReputationRequestReq& from);

  inline CancelCityReputationRequestReq& operator=(const CancelCityReputationRequestReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CancelCityReputationRequestReq(CancelCityReputationRequestReq&& from) noexcept
    : CancelCityReputationRequestReq() {
    *this = ::std::move(from);
  }

  inline CancelCityReputationRequestReq& operator=(CancelCityReputationRequestReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CancelCityReputationRequestReq& default_instance();

  static inline const CancelCityReputationRequestReq* internal_default_instance() {
    return reinterpret_cast<const CancelCityReputationRequestReq*>(
               &_CancelCityReputationRequestReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(CancelCityReputationRequestReq* other);
  friend void swap(CancelCityReputationRequestReq& a, CancelCityReputationRequestReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CancelCityReputationRequestReq* New() const PROTOBUF_FINAL { return New(NULL); }

  CancelCityReputationRequestReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CancelCityReputationRequestReq& from);
  void MergeFrom(const CancelCityReputationRequestReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CancelCityReputationRequestReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 city_id = 6;
  void clear_city_id();
  static const int kCityIdFieldNumber = 6;
  ::google::protobuf::uint32 city_id() const;
  void set_city_id(::google::protobuf::uint32 value);

  // uint32 request_id = 10;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 10;
  ::google::protobuf::uint32 request_id() const;
  void set_request_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.CancelCityReputationRequestReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 city_id_;
  ::google::protobuf::uint32 request_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5freputation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CancelCityReputationRequestRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.CancelCityReputationRequestRsp) */ {
 public:
  CancelCityReputationRequestRsp();
  virtual ~CancelCityReputationRequestRsp();

  CancelCityReputationRequestRsp(const CancelCityReputationRequestRsp& from);

  inline CancelCityReputationRequestRsp& operator=(const CancelCityReputationRequestRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CancelCityReputationRequestRsp(CancelCityReputationRequestRsp&& from) noexcept
    : CancelCityReputationRequestRsp() {
    *this = ::std::move(from);
  }

  inline CancelCityReputationRequestRsp& operator=(CancelCityReputationRequestRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CancelCityReputationRequestRsp& default_instance();

  static inline const CancelCityReputationRequestRsp* internal_default_instance() {
    return reinterpret_cast<const CancelCityReputationRequestRsp*>(
               &_CancelCityReputationRequestRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(CancelCityReputationRequestRsp* other);
  friend void swap(CancelCityReputationRequestRsp& a, CancelCityReputationRequestRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CancelCityReputationRequestRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  CancelCityReputationRequestRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CancelCityReputationRequestRsp& from);
  void MergeFrom(const CancelCityReputationRequestRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CancelCityReputationRequestRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 retcode = 2;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 2;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // uint32 city_id = 3;
  void clear_city_id();
  static const int kCityIdFieldNumber = 3;
  ::google::protobuf::uint32 city_id() const;
  void set_city_id(::google::protobuf::uint32 value);

  // uint32 request_id = 12;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 12;
  ::google::protobuf::uint32 request_id() const;
  void set_request_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.CancelCityReputationRequestRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::uint32 city_id_;
  ::google::protobuf::uint32 request_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5freputation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetCityReputationMapInfoReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GetCityReputationMapInfoReq) */ {
 public:
  GetCityReputationMapInfoReq();
  virtual ~GetCityReputationMapInfoReq();

  GetCityReputationMapInfoReq(const GetCityReputationMapInfoReq& from);

  inline GetCityReputationMapInfoReq& operator=(const GetCityReputationMapInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetCityReputationMapInfoReq(GetCityReputationMapInfoReq&& from) noexcept
    : GetCityReputationMapInfoReq() {
    *this = ::std::move(from);
  }

  inline GetCityReputationMapInfoReq& operator=(GetCityReputationMapInfoReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetCityReputationMapInfoReq& default_instance();

  static inline const GetCityReputationMapInfoReq* internal_default_instance() {
    return reinterpret_cast<const GetCityReputationMapInfoReq*>(
               &_GetCityReputationMapInfoReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(GetCityReputationMapInfoReq* other);
  friend void swap(GetCityReputationMapInfoReq& a, GetCityReputationMapInfoReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetCityReputationMapInfoReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GetCityReputationMapInfoReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetCityReputationMapInfoReq& from);
  void MergeFrom(const GetCityReputationMapInfoReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetCityReputationMapInfoReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.GetCityReputationMapInfoReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5freputation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetCityReputationMapInfoRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GetCityReputationMapInfoRsp) */ {
 public:
  GetCityReputationMapInfoRsp();
  virtual ~GetCityReputationMapInfoRsp();

  GetCityReputationMapInfoRsp(const GetCityReputationMapInfoRsp& from);

  inline GetCityReputationMapInfoRsp& operator=(const GetCityReputationMapInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetCityReputationMapInfoRsp(GetCityReputationMapInfoRsp&& from) noexcept
    : GetCityReputationMapInfoRsp() {
    *this = ::std::move(from);
  }

  inline GetCityReputationMapInfoRsp& operator=(GetCityReputationMapInfoRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetCityReputationMapInfoRsp& default_instance();

  static inline const GetCityReputationMapInfoRsp* internal_default_instance() {
    return reinterpret_cast<const GetCityReputationMapInfoRsp*>(
               &_GetCityReputationMapInfoRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(GetCityReputationMapInfoRsp* other);
  friend void swap(GetCityReputationMapInfoRsp& a, GetCityReputationMapInfoRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetCityReputationMapInfoRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GetCityReputationMapInfoRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetCityReputationMapInfoRsp& from);
  void MergeFrom(const GetCityReputationMapInfoRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetCityReputationMapInfoRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 reward_city_list = 3;
  int reward_city_list_size() const;
  void clear_reward_city_list();
  static const int kRewardCityListFieldNumber = 3;
  ::google::protobuf::uint32 reward_city_list(int index) const;
  void set_reward_city_list(int index, ::google::protobuf::uint32 value);
  void add_reward_city_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      reward_city_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_reward_city_list();

  // repeated uint32 unlock_hunting_city_list = 9;
  int unlock_hunting_city_list_size() const;
  void clear_unlock_hunting_city_list();
  static const int kUnlockHuntingCityListFieldNumber = 9;
  ::google::protobuf::uint32 unlock_hunting_city_list(int index) const;
  void set_unlock_hunting_city_list(int index, ::google::protobuf::uint32 value);
  void add_unlock_hunting_city_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      unlock_hunting_city_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_unlock_hunting_city_list();

  // bool is_new_hunting = 10;
  void clear_is_new_hunting();
  static const int kIsNewHuntingFieldNumber = 10;
  bool is_new_hunting() const;
  void set_is_new_hunting(bool value);

  // bool is_new_request = 2;
  void clear_is_new_request();
  static const int kIsNewRequestFieldNumber = 2;
  bool is_new_request() const;
  void set_is_new_request(bool value);

  // int32 retcode = 11;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 11;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.GetCityReputationMapInfoRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > reward_city_list_;
  mutable int _reward_city_list_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > unlock_hunting_city_list_;
  mutable int _unlock_hunting_city_list_cached_byte_size_;
  bool is_new_hunting_;
  bool is_new_request_;
  ::google::protobuf::int32 retcode_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5freputation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TakeCityReputationExploreRewardReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.TakeCityReputationExploreRewardReq) */ {
 public:
  TakeCityReputationExploreRewardReq();
  virtual ~TakeCityReputationExploreRewardReq();

  TakeCityReputationExploreRewardReq(const TakeCityReputationExploreRewardReq& from);

  inline TakeCityReputationExploreRewardReq& operator=(const TakeCityReputationExploreRewardReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TakeCityReputationExploreRewardReq(TakeCityReputationExploreRewardReq&& from) noexcept
    : TakeCityReputationExploreRewardReq() {
    *this = ::std::move(from);
  }

  inline TakeCityReputationExploreRewardReq& operator=(TakeCityReputationExploreRewardReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TakeCityReputationExploreRewardReq& default_instance();

  static inline const TakeCityReputationExploreRewardReq* internal_default_instance() {
    return reinterpret_cast<const TakeCityReputationExploreRewardReq*>(
               &_TakeCityReputationExploreRewardReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(TakeCityReputationExploreRewardReq* other);
  friend void swap(TakeCityReputationExploreRewardReq& a, TakeCityReputationExploreRewardReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TakeCityReputationExploreRewardReq* New() const PROTOBUF_FINAL { return New(NULL); }

  TakeCityReputationExploreRewardReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TakeCityReputationExploreRewardReq& from);
  void MergeFrom(const TakeCityReputationExploreRewardReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TakeCityReputationExploreRewardReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 explore_id_list = 12;
  int explore_id_list_size() const;
  void clear_explore_id_list();
  static const int kExploreIdListFieldNumber = 12;
  ::google::protobuf::uint32 explore_id_list(int index) const;
  void set_explore_id_list(int index, ::google::protobuf::uint32 value);
  void add_explore_id_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      explore_id_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_explore_id_list();

  // uint32 city_id = 15;
  void clear_city_id();
  static const int kCityIdFieldNumber = 15;
  ::google::protobuf::uint32 city_id() const;
  void set_city_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.TakeCityReputationExploreRewardReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > explore_id_list_;
  mutable int _explore_id_list_cached_byte_size_;
  ::google::protobuf::uint32 city_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5freputation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TakeCityReputationExploreRewardRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.TakeCityReputationExploreRewardRsp) */ {
 public:
  TakeCityReputationExploreRewardRsp();
  virtual ~TakeCityReputationExploreRewardRsp();

  TakeCityReputationExploreRewardRsp(const TakeCityReputationExploreRewardRsp& from);

  inline TakeCityReputationExploreRewardRsp& operator=(const TakeCityReputationExploreRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TakeCityReputationExploreRewardRsp(TakeCityReputationExploreRewardRsp&& from) noexcept
    : TakeCityReputationExploreRewardRsp() {
    *this = ::std::move(from);
  }

  inline TakeCityReputationExploreRewardRsp& operator=(TakeCityReputationExploreRewardRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TakeCityReputationExploreRewardRsp& default_instance();

  static inline const TakeCityReputationExploreRewardRsp* internal_default_instance() {
    return reinterpret_cast<const TakeCityReputationExploreRewardRsp*>(
               &_TakeCityReputationExploreRewardRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(TakeCityReputationExploreRewardRsp* other);
  friend void swap(TakeCityReputationExploreRewardRsp& a, TakeCityReputationExploreRewardRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TakeCityReputationExploreRewardRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  TakeCityReputationExploreRewardRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TakeCityReputationExploreRewardRsp& from);
  void MergeFrom(const TakeCityReputationExploreRewardRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TakeCityReputationExploreRewardRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 explore_id_list = 8;
  int explore_id_list_size() const;
  void clear_explore_id_list();
  static const int kExploreIdListFieldNumber = 8;
  ::google::protobuf::uint32 explore_id_list(int index) const;
  void set_explore_id_list(int index, ::google::protobuf::uint32 value);
  void add_explore_id_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      explore_id_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_explore_id_list();

  // repeated .proto.ItemParam item_list = 12;
  int item_list_size() const;
  void clear_item_list();
  static const int kItemListFieldNumber = 12;
  const ::proto::ItemParam& item_list(int index) const;
  ::proto::ItemParam* mutable_item_list(int index);
  ::proto::ItemParam* add_item_list();
  ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >*
      mutable_item_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >&
      item_list() const;

  // int32 retcode = 6;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 6;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // uint32 city_id = 13;
  void clear_city_id();
  static const int kCityIdFieldNumber = 13;
  ::google::protobuf::uint32 city_id() const;
  void set_city_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.TakeCityReputationExploreRewardRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > explore_id_list_;
  mutable int _explore_id_list_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::ItemParam > item_list_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::uint32 city_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5freputation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CityReputationSimpleInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.CityReputationSimpleInfo) */ {
 public:
  CityReputationSimpleInfo();
  virtual ~CityReputationSimpleInfo();

  CityReputationSimpleInfo(const CityReputationSimpleInfo& from);

  inline CityReputationSimpleInfo& operator=(const CityReputationSimpleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CityReputationSimpleInfo(CityReputationSimpleInfo&& from) noexcept
    : CityReputationSimpleInfo() {
    *this = ::std::move(from);
  }

  inline CityReputationSimpleInfo& operator=(CityReputationSimpleInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CityReputationSimpleInfo& default_instance();

  static inline const CityReputationSimpleInfo* internal_default_instance() {
    return reinterpret_cast<const CityReputationSimpleInfo*>(
               &_CityReputationSimpleInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(CityReputationSimpleInfo* other);
  friend void swap(CityReputationSimpleInfo& a, CityReputationSimpleInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CityReputationSimpleInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  CityReputationSimpleInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CityReputationSimpleInfo& from);
  void MergeFrom(const CityReputationSimpleInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CityReputationSimpleInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 city_id = 9;
  void clear_city_id();
  static const int kCityIdFieldNumber = 9;
  ::google::protobuf::uint32 city_id() const;
  void set_city_id(::google::protobuf::uint32 value);

  // uint32 level = 15;
  void clear_level();
  static const int kLevelFieldNumber = 15;
  ::google::protobuf::uint32 level() const;
  void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.CityReputationSimpleInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 city_id_;
  ::google::protobuf::uint32 level_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5freputation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CityReputationDataNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.CityReputationDataNotify) */ {
 public:
  CityReputationDataNotify();
  virtual ~CityReputationDataNotify();

  CityReputationDataNotify(const CityReputationDataNotify& from);

  inline CityReputationDataNotify& operator=(const CityReputationDataNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CityReputationDataNotify(CityReputationDataNotify&& from) noexcept
    : CityReputationDataNotify() {
    *this = ::std::move(from);
  }

  inline CityReputationDataNotify& operator=(CityReputationDataNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CityReputationDataNotify& default_instance();

  static inline const CityReputationDataNotify* internal_default_instance() {
    return reinterpret_cast<const CityReputationDataNotify*>(
               &_CityReputationDataNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(CityReputationDataNotify* other);
  friend void swap(CityReputationDataNotify& a, CityReputationDataNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CityReputationDataNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  CityReputationDataNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CityReputationDataNotify& from);
  void MergeFrom(const CityReputationDataNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CityReputationDataNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.CityReputationSimpleInfo simple_info_list = 7;
  int simple_info_list_size() const;
  void clear_simple_info_list();
  static const int kSimpleInfoListFieldNumber = 7;
  const ::proto::CityReputationSimpleInfo& simple_info_list(int index) const;
  ::proto::CityReputationSimpleInfo* mutable_simple_info_list(int index);
  ::proto::CityReputationSimpleInfo* add_simple_info_list();
  ::google::protobuf::RepeatedPtrField< ::proto::CityReputationSimpleInfo >*
      mutable_simple_info_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::CityReputationSimpleInfo >&
      simple_info_list() const;

  // @@protoc_insertion_point(class_scope:proto.CityReputationDataNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::CityReputationSimpleInfo > simple_info_list_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5freputation_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CityReputationQuestInfo

// bool is_open = 2;
inline void CityReputationQuestInfo::clear_is_open() {
  is_open_ = false;
}
inline bool CityReputationQuestInfo::is_open() const {
  // @@protoc_insertion_point(field_get:proto.CityReputationQuestInfo.is_open)
  return is_open_;
}
inline void CityReputationQuestInfo::set_is_open(bool value) {
  
  is_open_ = value;
  // @@protoc_insertion_point(field_set:proto.CityReputationQuestInfo.is_open)
}

// repeated uint32 taken_parent_quest_reward_list = 12;
inline int CityReputationQuestInfo::taken_parent_quest_reward_list_size() const {
  return taken_parent_quest_reward_list_.size();
}
inline void CityReputationQuestInfo::clear_taken_parent_quest_reward_list() {
  taken_parent_quest_reward_list_.Clear();
}
inline ::google::protobuf::uint32 CityReputationQuestInfo::taken_parent_quest_reward_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.CityReputationQuestInfo.taken_parent_quest_reward_list)
  return taken_parent_quest_reward_list_.Get(index);
}
inline void CityReputationQuestInfo::set_taken_parent_quest_reward_list(int index, ::google::protobuf::uint32 value) {
  taken_parent_quest_reward_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.CityReputationQuestInfo.taken_parent_quest_reward_list)
}
inline void CityReputationQuestInfo::add_taken_parent_quest_reward_list(::google::protobuf::uint32 value) {
  taken_parent_quest_reward_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.CityReputationQuestInfo.taken_parent_quest_reward_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CityReputationQuestInfo::taken_parent_quest_reward_list() const {
  // @@protoc_insertion_point(field_list:proto.CityReputationQuestInfo.taken_parent_quest_reward_list)
  return taken_parent_quest_reward_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CityReputationQuestInfo::mutable_taken_parent_quest_reward_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.CityReputationQuestInfo.taken_parent_quest_reward_list)
  return &taken_parent_quest_reward_list_;
}

// repeated uint32 finished_parent_quest_list = 7;
inline int CityReputationQuestInfo::finished_parent_quest_list_size() const {
  return finished_parent_quest_list_.size();
}
inline void CityReputationQuestInfo::clear_finished_parent_quest_list() {
  finished_parent_quest_list_.Clear();
}
inline ::google::protobuf::uint32 CityReputationQuestInfo::finished_parent_quest_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.CityReputationQuestInfo.finished_parent_quest_list)
  return finished_parent_quest_list_.Get(index);
}
inline void CityReputationQuestInfo::set_finished_parent_quest_list(int index, ::google::protobuf::uint32 value) {
  finished_parent_quest_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.CityReputationQuestInfo.finished_parent_quest_list)
}
inline void CityReputationQuestInfo::add_finished_parent_quest_list(::google::protobuf::uint32 value) {
  finished_parent_quest_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.CityReputationQuestInfo.finished_parent_quest_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CityReputationQuestInfo::finished_parent_quest_list() const {
  // @@protoc_insertion_point(field_list:proto.CityReputationQuestInfo.finished_parent_quest_list)
  return finished_parent_quest_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CityReputationQuestInfo::mutable_finished_parent_quest_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.CityReputationQuestInfo.finished_parent_quest_list)
  return &finished_parent_quest_list_;
}

// -------------------------------------------------------------------

// CityReputationRequestInfo_RequestInfo

// uint32 request_id = 3;
inline void CityReputationRequestInfo_RequestInfo::clear_request_id() {
  request_id_ = 0u;
}
inline ::google::protobuf::uint32 CityReputationRequestInfo_RequestInfo::request_id() const {
  // @@protoc_insertion_point(field_get:proto.CityReputationRequestInfo.RequestInfo.request_id)
  return request_id_;
}
inline void CityReputationRequestInfo_RequestInfo::set_request_id(::google::protobuf::uint32 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:proto.CityReputationRequestInfo.RequestInfo.request_id)
}

// uint32 quest_id = 9;
inline void CityReputationRequestInfo_RequestInfo::clear_quest_id() {
  quest_id_ = 0u;
}
inline ::google::protobuf::uint32 CityReputationRequestInfo_RequestInfo::quest_id() const {
  // @@protoc_insertion_point(field_get:proto.CityReputationRequestInfo.RequestInfo.quest_id)
  return quest_id_;
}
inline void CityReputationRequestInfo_RequestInfo::set_quest_id(::google::protobuf::uint32 value) {
  
  quest_id_ = value;
  // @@protoc_insertion_point(field_set:proto.CityReputationRequestInfo.RequestInfo.quest_id)
}

// bool is_taken_reward = 6;
inline void CityReputationRequestInfo_RequestInfo::clear_is_taken_reward() {
  is_taken_reward_ = false;
}
inline bool CityReputationRequestInfo_RequestInfo::is_taken_reward() const {
  // @@protoc_insertion_point(field_get:proto.CityReputationRequestInfo.RequestInfo.is_taken_reward)
  return is_taken_reward_;
}
inline void CityReputationRequestInfo_RequestInfo::set_is_taken_reward(bool value) {
  
  is_taken_reward_ = value;
  // @@protoc_insertion_point(field_set:proto.CityReputationRequestInfo.RequestInfo.is_taken_reward)
}

// -------------------------------------------------------------------

// CityReputationRequestInfo

// bool is_open = 2;
inline void CityReputationRequestInfo::clear_is_open() {
  is_open_ = false;
}
inline bool CityReputationRequestInfo::is_open() const {
  // @@protoc_insertion_point(field_get:proto.CityReputationRequestInfo.is_open)
  return is_open_;
}
inline void CityReputationRequestInfo::set_is_open(bool value) {
  
  is_open_ = value;
  // @@protoc_insertion_point(field_set:proto.CityReputationRequestInfo.is_open)
}

// repeated .proto.CityReputationRequestInfo.RequestInfo request_info_list = 1;
inline int CityReputationRequestInfo::request_info_list_size() const {
  return request_info_list_.size();
}
inline void CityReputationRequestInfo::clear_request_info_list() {
  request_info_list_.Clear();
}
inline const ::proto::CityReputationRequestInfo_RequestInfo& CityReputationRequestInfo::request_info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.CityReputationRequestInfo.request_info_list)
  return request_info_list_.Get(index);
}
inline ::proto::CityReputationRequestInfo_RequestInfo* CityReputationRequestInfo::mutable_request_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.CityReputationRequestInfo.request_info_list)
  return request_info_list_.Mutable(index);
}
inline ::proto::CityReputationRequestInfo_RequestInfo* CityReputationRequestInfo::add_request_info_list() {
  // @@protoc_insertion_point(field_add:proto.CityReputationRequestInfo.request_info_list)
  return request_info_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::CityReputationRequestInfo_RequestInfo >*
CityReputationRequestInfo::mutable_request_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.CityReputationRequestInfo.request_info_list)
  return &request_info_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::CityReputationRequestInfo_RequestInfo >&
CityReputationRequestInfo::request_info_list() const {
  // @@protoc_insertion_point(field_list:proto.CityReputationRequestInfo.request_info_list)
  return request_info_list_;
}

// -------------------------------------------------------------------

// CityReputationExploreInfo

// repeated uint32 taken_explore_reward_list = 2;
inline int CityReputationExploreInfo::taken_explore_reward_list_size() const {
  return taken_explore_reward_list_.size();
}
inline void CityReputationExploreInfo::clear_taken_explore_reward_list() {
  taken_explore_reward_list_.Clear();
}
inline ::google::protobuf::uint32 CityReputationExploreInfo::taken_explore_reward_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.CityReputationExploreInfo.taken_explore_reward_list)
  return taken_explore_reward_list_.Get(index);
}
inline void CityReputationExploreInfo::set_taken_explore_reward_list(int index, ::google::protobuf::uint32 value) {
  taken_explore_reward_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.CityReputationExploreInfo.taken_explore_reward_list)
}
inline void CityReputationExploreInfo::add_taken_explore_reward_list(::google::protobuf::uint32 value) {
  taken_explore_reward_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.CityReputationExploreInfo.taken_explore_reward_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CityReputationExploreInfo::taken_explore_reward_list() const {
  // @@protoc_insertion_point(field_list:proto.CityReputationExploreInfo.taken_explore_reward_list)
  return taken_explore_reward_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CityReputationExploreInfo::mutable_taken_explore_reward_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.CityReputationExploreInfo.taken_explore_reward_list)
  return &taken_explore_reward_list_;
}

// uint32 explore_percent = 14;
inline void CityReputationExploreInfo::clear_explore_percent() {
  explore_percent_ = 0u;
}
inline ::google::protobuf::uint32 CityReputationExploreInfo::explore_percent() const {
  // @@protoc_insertion_point(field_get:proto.CityReputationExploreInfo.explore_percent)
  return explore_percent_;
}
inline void CityReputationExploreInfo::set_explore_percent(::google::protobuf::uint32 value) {
  
  explore_percent_ = value;
  // @@protoc_insertion_point(field_set:proto.CityReputationExploreInfo.explore_percent)
}

// bool is_open = 15;
inline void CityReputationExploreInfo::clear_is_open() {
  is_open_ = false;
}
inline bool CityReputationExploreInfo::is_open() const {
  // @@protoc_insertion_point(field_get:proto.CityReputationExploreInfo.is_open)
  return is_open_;
}
inline void CityReputationExploreInfo::set_is_open(bool value) {
  
  is_open_ = value;
  // @@protoc_insertion_point(field_set:proto.CityReputationExploreInfo.is_open)
}

// -------------------------------------------------------------------

// CityReputationHuntInfo

// bool is_open = 6;
inline void CityReputationHuntInfo::clear_is_open() {
  is_open_ = false;
}
inline bool CityReputationHuntInfo::is_open() const {
  // @@protoc_insertion_point(field_get:proto.CityReputationHuntInfo.is_open)
  return is_open_;
}
inline void CityReputationHuntInfo::set_is_open(bool value) {
  
  is_open_ = value;
  // @@protoc_insertion_point(field_set:proto.CityReputationHuntInfo.is_open)
}

// uint32 cur_week_finish_num = 15;
inline void CityReputationHuntInfo::clear_cur_week_finish_num() {
  cur_week_finish_num_ = 0u;
}
inline ::google::protobuf::uint32 CityReputationHuntInfo::cur_week_finish_num() const {
  // @@protoc_insertion_point(field_get:proto.CityReputationHuntInfo.cur_week_finish_num)
  return cur_week_finish_num_;
}
inline void CityReputationHuntInfo::set_cur_week_finish_num(::google::protobuf::uint32 value) {
  
  cur_week_finish_num_ = value;
  // @@protoc_insertion_point(field_set:proto.CityReputationHuntInfo.cur_week_finish_num)
}

// bool has_reward = 5;
inline void CityReputationHuntInfo::clear_has_reward() {
  has_reward_ = false;
}
inline bool CityReputationHuntInfo::has_reward() const {
  // @@protoc_insertion_point(field_get:proto.CityReputationHuntInfo.has_reward)
  return has_reward_;
}
inline void CityReputationHuntInfo::set_has_reward(bool value) {
  
  has_reward_ = value;
  // @@protoc_insertion_point(field_set:proto.CityReputationHuntInfo.has_reward)
}

// -------------------------------------------------------------------

// CityReputationInfo

// uint32 level = 4;
inline void CityReputationInfo::clear_level() {
  level_ = 0u;
}
inline ::google::protobuf::uint32 CityReputationInfo::level() const {
  // @@protoc_insertion_point(field_get:proto.CityReputationInfo.level)
  return level_;
}
inline void CityReputationInfo::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.CityReputationInfo.level)
}

// uint32 next_refresh_time = 3;
inline void CityReputationInfo::clear_next_refresh_time() {
  next_refresh_time_ = 0u;
}
inline ::google::protobuf::uint32 CityReputationInfo::next_refresh_time() const {
  // @@protoc_insertion_point(field_get:proto.CityReputationInfo.next_refresh_time)
  return next_refresh_time_;
}
inline void CityReputationInfo::set_next_refresh_time(::google::protobuf::uint32 value) {
  
  next_refresh_time_ = value;
  // @@protoc_insertion_point(field_set:proto.CityReputationInfo.next_refresh_time)
}

// .proto.CityReputationHuntInfo hunt_info = 11;
inline bool CityReputationInfo::has_hunt_info() const {
  return this != internal_default_instance() && hunt_info_ != NULL;
}
inline void CityReputationInfo::clear_hunt_info() {
  if (GetArenaNoVirtual() == NULL && hunt_info_ != NULL) delete hunt_info_;
  hunt_info_ = NULL;
}
inline const ::proto::CityReputationHuntInfo& CityReputationInfo::hunt_info() const {
  const ::proto::CityReputationHuntInfo* p = hunt_info_;
  // @@protoc_insertion_point(field_get:proto.CityReputationInfo.hunt_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::CityReputationHuntInfo*>(
      &::proto::_CityReputationHuntInfo_default_instance_);
}
inline ::proto::CityReputationHuntInfo* CityReputationInfo::mutable_hunt_info() {
  
  if (hunt_info_ == NULL) {
    hunt_info_ = new ::proto::CityReputationHuntInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.CityReputationInfo.hunt_info)
  return hunt_info_;
}
inline ::proto::CityReputationHuntInfo* CityReputationInfo::release_hunt_info() {
  // @@protoc_insertion_point(field_release:proto.CityReputationInfo.hunt_info)
  
  ::proto::CityReputationHuntInfo* temp = hunt_info_;
  hunt_info_ = NULL;
  return temp;
}
inline void CityReputationInfo::set_allocated_hunt_info(::proto::CityReputationHuntInfo* hunt_info) {
  delete hunt_info_;
  hunt_info_ = hunt_info;
  if (hunt_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.CityReputationInfo.hunt_info)
}

// repeated uint32 taken_level_reward_list = 2;
inline int CityReputationInfo::taken_level_reward_list_size() const {
  return taken_level_reward_list_.size();
}
inline void CityReputationInfo::clear_taken_level_reward_list() {
  taken_level_reward_list_.Clear();
}
inline ::google::protobuf::uint32 CityReputationInfo::taken_level_reward_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.CityReputationInfo.taken_level_reward_list)
  return taken_level_reward_list_.Get(index);
}
inline void CityReputationInfo::set_taken_level_reward_list(int index, ::google::protobuf::uint32 value) {
  taken_level_reward_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.CityReputationInfo.taken_level_reward_list)
}
inline void CityReputationInfo::add_taken_level_reward_list(::google::protobuf::uint32 value) {
  taken_level_reward_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.CityReputationInfo.taken_level_reward_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CityReputationInfo::taken_level_reward_list() const {
  // @@protoc_insertion_point(field_list:proto.CityReputationInfo.taken_level_reward_list)
  return taken_level_reward_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CityReputationInfo::mutable_taken_level_reward_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.CityReputationInfo.taken_level_reward_list)
  return &taken_level_reward_list_;
}

// uint32 total_accept_request_num = 6;
inline void CityReputationInfo::clear_total_accept_request_num() {
  total_accept_request_num_ = 0u;
}
inline ::google::protobuf::uint32 CityReputationInfo::total_accept_request_num() const {
  // @@protoc_insertion_point(field_get:proto.CityReputationInfo.total_accept_request_num)
  return total_accept_request_num_;
}
inline void CityReputationInfo::set_total_accept_request_num(::google::protobuf::uint32 value) {
  
  total_accept_request_num_ = value;
  // @@protoc_insertion_point(field_set:proto.CityReputationInfo.total_accept_request_num)
}

// .proto.CityReputationRequestInfo request_info = 5;
inline bool CityReputationInfo::has_request_info() const {
  return this != internal_default_instance() && request_info_ != NULL;
}
inline void CityReputationInfo::clear_request_info() {
  if (GetArenaNoVirtual() == NULL && request_info_ != NULL) delete request_info_;
  request_info_ = NULL;
}
inline const ::proto::CityReputationRequestInfo& CityReputationInfo::request_info() const {
  const ::proto::CityReputationRequestInfo* p = request_info_;
  // @@protoc_insertion_point(field_get:proto.CityReputationInfo.request_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::CityReputationRequestInfo*>(
      &::proto::_CityReputationRequestInfo_default_instance_);
}
inline ::proto::CityReputationRequestInfo* CityReputationInfo::mutable_request_info() {
  
  if (request_info_ == NULL) {
    request_info_ = new ::proto::CityReputationRequestInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.CityReputationInfo.request_info)
  return request_info_;
}
inline ::proto::CityReputationRequestInfo* CityReputationInfo::release_request_info() {
  // @@protoc_insertion_point(field_release:proto.CityReputationInfo.request_info)
  
  ::proto::CityReputationRequestInfo* temp = request_info_;
  request_info_ = NULL;
  return temp;
}
inline void CityReputationInfo::set_allocated_request_info(::proto::CityReputationRequestInfo* request_info) {
  delete request_info_;
  request_info_ = request_info;
  if (request_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.CityReputationInfo.request_info)
}

// .proto.CityReputationQuestInfo quest_info = 9;
inline bool CityReputationInfo::has_quest_info() const {
  return this != internal_default_instance() && quest_info_ != NULL;
}
inline void CityReputationInfo::clear_quest_info() {
  if (GetArenaNoVirtual() == NULL && quest_info_ != NULL) delete quest_info_;
  quest_info_ = NULL;
}
inline const ::proto::CityReputationQuestInfo& CityReputationInfo::quest_info() const {
  const ::proto::CityReputationQuestInfo* p = quest_info_;
  // @@protoc_insertion_point(field_get:proto.CityReputationInfo.quest_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::CityReputationQuestInfo*>(
      &::proto::_CityReputationQuestInfo_default_instance_);
}
inline ::proto::CityReputationQuestInfo* CityReputationInfo::mutable_quest_info() {
  
  if (quest_info_ == NULL) {
    quest_info_ = new ::proto::CityReputationQuestInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.CityReputationInfo.quest_info)
  return quest_info_;
}
inline ::proto::CityReputationQuestInfo* CityReputationInfo::release_quest_info() {
  // @@protoc_insertion_point(field_release:proto.CityReputationInfo.quest_info)
  
  ::proto::CityReputationQuestInfo* temp = quest_info_;
  quest_info_ = NULL;
  return temp;
}
inline void CityReputationInfo::set_allocated_quest_info(::proto::CityReputationQuestInfo* quest_info) {
  delete quest_info_;
  quest_info_ = quest_info;
  if (quest_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.CityReputationInfo.quest_info)
}

// uint32 exp = 13;
inline void CityReputationInfo::clear_exp() {
  exp_ = 0u;
}
inline ::google::protobuf::uint32 CityReputationInfo::exp() const {
  // @@protoc_insertion_point(field_get:proto.CityReputationInfo.exp)
  return exp_;
}
inline void CityReputationInfo::set_exp(::google::protobuf::uint32 value) {
  
  exp_ = value;
  // @@protoc_insertion_point(field_set:proto.CityReputationInfo.exp)
}

// .proto.CityReputationExploreInfo explore_info = 10;
inline bool CityReputationInfo::has_explore_info() const {
  return this != internal_default_instance() && explore_info_ != NULL;
}
inline void CityReputationInfo::clear_explore_info() {
  if (GetArenaNoVirtual() == NULL && explore_info_ != NULL) delete explore_info_;
  explore_info_ = NULL;
}
inline const ::proto::CityReputationExploreInfo& CityReputationInfo::explore_info() const {
  const ::proto::CityReputationExploreInfo* p = explore_info_;
  // @@protoc_insertion_point(field_get:proto.CityReputationInfo.explore_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::CityReputationExploreInfo*>(
      &::proto::_CityReputationExploreInfo_default_instance_);
}
inline ::proto::CityReputationExploreInfo* CityReputationInfo::mutable_explore_info() {
  
  if (explore_info_ == NULL) {
    explore_info_ = new ::proto::CityReputationExploreInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.CityReputationInfo.explore_info)
  return explore_info_;
}
inline ::proto::CityReputationExploreInfo* CityReputationInfo::release_explore_info() {
  // @@protoc_insertion_point(field_release:proto.CityReputationInfo.explore_info)
  
  ::proto::CityReputationExploreInfo* temp = explore_info_;
  explore_info_ = NULL;
  return temp;
}
inline void CityReputationInfo::set_allocated_explore_info(::proto::CityReputationExploreInfo* explore_info) {
  delete explore_info_;
  explore_info_ = explore_info;
  if (explore_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.CityReputationInfo.explore_info)
}

// -------------------------------------------------------------------

// GetCityReputationInfoReq

// uint32 city_id = 7;
inline void GetCityReputationInfoReq::clear_city_id() {
  city_id_ = 0u;
}
inline ::google::protobuf::uint32 GetCityReputationInfoReq::city_id() const {
  // @@protoc_insertion_point(field_get:proto.GetCityReputationInfoReq.city_id)
  return city_id_;
}
inline void GetCityReputationInfoReq::set_city_id(::google::protobuf::uint32 value) {
  
  city_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GetCityReputationInfoReq.city_id)
}

// -------------------------------------------------------------------

// GetCityReputationInfoRsp

// uint32 city_id = 1;
inline void GetCityReputationInfoRsp::clear_city_id() {
  city_id_ = 0u;
}
inline ::google::protobuf::uint32 GetCityReputationInfoRsp::city_id() const {
  // @@protoc_insertion_point(field_get:proto.GetCityReputationInfoRsp.city_id)
  return city_id_;
}
inline void GetCityReputationInfoRsp::set_city_id(::google::protobuf::uint32 value) {
  
  city_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GetCityReputationInfoRsp.city_id)
}

// int32 retcode = 4;
inline void GetCityReputationInfoRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 GetCityReputationInfoRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GetCityReputationInfoRsp.retcode)
  return retcode_;
}
inline void GetCityReputationInfoRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GetCityReputationInfoRsp.retcode)
}

// .proto.CityReputationInfo city_reputation_info = 9;
inline bool GetCityReputationInfoRsp::has_city_reputation_info() const {
  return this != internal_default_instance() && city_reputation_info_ != NULL;
}
inline void GetCityReputationInfoRsp::clear_city_reputation_info() {
  if (GetArenaNoVirtual() == NULL && city_reputation_info_ != NULL) delete city_reputation_info_;
  city_reputation_info_ = NULL;
}
inline const ::proto::CityReputationInfo& GetCityReputationInfoRsp::city_reputation_info() const {
  const ::proto::CityReputationInfo* p = city_reputation_info_;
  // @@protoc_insertion_point(field_get:proto.GetCityReputationInfoRsp.city_reputation_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::CityReputationInfo*>(
      &::proto::_CityReputationInfo_default_instance_);
}
inline ::proto::CityReputationInfo* GetCityReputationInfoRsp::mutable_city_reputation_info() {
  
  if (city_reputation_info_ == NULL) {
    city_reputation_info_ = new ::proto::CityReputationInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.GetCityReputationInfoRsp.city_reputation_info)
  return city_reputation_info_;
}
inline ::proto::CityReputationInfo* GetCityReputationInfoRsp::release_city_reputation_info() {
  // @@protoc_insertion_point(field_release:proto.GetCityReputationInfoRsp.city_reputation_info)
  
  ::proto::CityReputationInfo* temp = city_reputation_info_;
  city_reputation_info_ = NULL;
  return temp;
}
inline void GetCityReputationInfoRsp::set_allocated_city_reputation_info(::proto::CityReputationInfo* city_reputation_info) {
  delete city_reputation_info_;
  city_reputation_info_ = city_reputation_info;
  if (city_reputation_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GetCityReputationInfoRsp.city_reputation_info)
}

// -------------------------------------------------------------------

// TakeCityReputationLevelRewardReq

// uint32 level = 11;
inline void TakeCityReputationLevelRewardReq::clear_level() {
  level_ = 0u;
}
inline ::google::protobuf::uint32 TakeCityReputationLevelRewardReq::level() const {
  // @@protoc_insertion_point(field_get:proto.TakeCityReputationLevelRewardReq.level)
  return level_;
}
inline void TakeCityReputationLevelRewardReq::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.TakeCityReputationLevelRewardReq.level)
}

// uint32 city_id = 1;
inline void TakeCityReputationLevelRewardReq::clear_city_id() {
  city_id_ = 0u;
}
inline ::google::protobuf::uint32 TakeCityReputationLevelRewardReq::city_id() const {
  // @@protoc_insertion_point(field_get:proto.TakeCityReputationLevelRewardReq.city_id)
  return city_id_;
}
inline void TakeCityReputationLevelRewardReq::set_city_id(::google::protobuf::uint32 value) {
  
  city_id_ = value;
  // @@protoc_insertion_point(field_set:proto.TakeCityReputationLevelRewardReq.city_id)
}

// -------------------------------------------------------------------

// TakeCityReputationLevelRewardRsp

// uint32 city_id = 15;
inline void TakeCityReputationLevelRewardRsp::clear_city_id() {
  city_id_ = 0u;
}
inline ::google::protobuf::uint32 TakeCityReputationLevelRewardRsp::city_id() const {
  // @@protoc_insertion_point(field_get:proto.TakeCityReputationLevelRewardRsp.city_id)
  return city_id_;
}
inline void TakeCityReputationLevelRewardRsp::set_city_id(::google::protobuf::uint32 value) {
  
  city_id_ = value;
  // @@protoc_insertion_point(field_set:proto.TakeCityReputationLevelRewardRsp.city_id)
}

// int32 retcode = 11;
inline void TakeCityReputationLevelRewardRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 TakeCityReputationLevelRewardRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.TakeCityReputationLevelRewardRsp.retcode)
  return retcode_;
}
inline void TakeCityReputationLevelRewardRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.TakeCityReputationLevelRewardRsp.retcode)
}

// repeated .proto.ItemParam item_list = 13;
inline int TakeCityReputationLevelRewardRsp::item_list_size() const {
  return item_list_.size();
}
inline void TakeCityReputationLevelRewardRsp::clear_item_list() {
  item_list_.Clear();
}
inline const ::proto::ItemParam& TakeCityReputationLevelRewardRsp::item_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.TakeCityReputationLevelRewardRsp.item_list)
  return item_list_.Get(index);
}
inline ::proto::ItemParam* TakeCityReputationLevelRewardRsp::mutable_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.TakeCityReputationLevelRewardRsp.item_list)
  return item_list_.Mutable(index);
}
inline ::proto::ItemParam* TakeCityReputationLevelRewardRsp::add_item_list() {
  // @@protoc_insertion_point(field_add:proto.TakeCityReputationLevelRewardRsp.item_list)
  return item_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >*
TakeCityReputationLevelRewardRsp::mutable_item_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.TakeCityReputationLevelRewardRsp.item_list)
  return &item_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >&
TakeCityReputationLevelRewardRsp::item_list() const {
  // @@protoc_insertion_point(field_list:proto.TakeCityReputationLevelRewardRsp.item_list)
  return item_list_;
}

// uint32 level = 9;
inline void TakeCityReputationLevelRewardRsp::clear_level() {
  level_ = 0u;
}
inline ::google::protobuf::uint32 TakeCityReputationLevelRewardRsp::level() const {
  // @@protoc_insertion_point(field_get:proto.TakeCityReputationLevelRewardRsp.level)
  return level_;
}
inline void TakeCityReputationLevelRewardRsp::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.TakeCityReputationLevelRewardRsp.level)
}

// -------------------------------------------------------------------

// CityReputationLevelupNotify

// uint32 city_id = 12;
inline void CityReputationLevelupNotify::clear_city_id() {
  city_id_ = 0u;
}
inline ::google::protobuf::uint32 CityReputationLevelupNotify::city_id() const {
  // @@protoc_insertion_point(field_get:proto.CityReputationLevelupNotify.city_id)
  return city_id_;
}
inline void CityReputationLevelupNotify::set_city_id(::google::protobuf::uint32 value) {
  
  city_id_ = value;
  // @@protoc_insertion_point(field_set:proto.CityReputationLevelupNotify.city_id)
}

// uint32 level = 15;
inline void CityReputationLevelupNotify::clear_level() {
  level_ = 0u;
}
inline ::google::protobuf::uint32 CityReputationLevelupNotify::level() const {
  // @@protoc_insertion_point(field_get:proto.CityReputationLevelupNotify.level)
  return level_;
}
inline void CityReputationLevelupNotify::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.CityReputationLevelupNotify.level)
}

// -------------------------------------------------------------------

// TakeCityReputationParentQuestReq

// uint32 city_id = 1;
inline void TakeCityReputationParentQuestReq::clear_city_id() {
  city_id_ = 0u;
}
inline ::google::protobuf::uint32 TakeCityReputationParentQuestReq::city_id() const {
  // @@protoc_insertion_point(field_get:proto.TakeCityReputationParentQuestReq.city_id)
  return city_id_;
}
inline void TakeCityReputationParentQuestReq::set_city_id(::google::protobuf::uint32 value) {
  
  city_id_ = value;
  // @@protoc_insertion_point(field_set:proto.TakeCityReputationParentQuestReq.city_id)
}

// repeated uint32 parent_quest_list = 6;
inline int TakeCityReputationParentQuestReq::parent_quest_list_size() const {
  return parent_quest_list_.size();
}
inline void TakeCityReputationParentQuestReq::clear_parent_quest_list() {
  parent_quest_list_.Clear();
}
inline ::google::protobuf::uint32 TakeCityReputationParentQuestReq::parent_quest_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.TakeCityReputationParentQuestReq.parent_quest_list)
  return parent_quest_list_.Get(index);
}
inline void TakeCityReputationParentQuestReq::set_parent_quest_list(int index, ::google::protobuf::uint32 value) {
  parent_quest_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.TakeCityReputationParentQuestReq.parent_quest_list)
}
inline void TakeCityReputationParentQuestReq::add_parent_quest_list(::google::protobuf::uint32 value) {
  parent_quest_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.TakeCityReputationParentQuestReq.parent_quest_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TakeCityReputationParentQuestReq::parent_quest_list() const {
  // @@protoc_insertion_point(field_list:proto.TakeCityReputationParentQuestReq.parent_quest_list)
  return parent_quest_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TakeCityReputationParentQuestReq::mutable_parent_quest_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.TakeCityReputationParentQuestReq.parent_quest_list)
  return &parent_quest_list_;
}

// -------------------------------------------------------------------

// TakeCityReputationParentQuestRsp

// int32 retcode = 7;
inline void TakeCityReputationParentQuestRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 TakeCityReputationParentQuestRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.TakeCityReputationParentQuestRsp.retcode)
  return retcode_;
}
inline void TakeCityReputationParentQuestRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.TakeCityReputationParentQuestRsp.retcode)
}

// uint32 city_id = 14;
inline void TakeCityReputationParentQuestRsp::clear_city_id() {
  city_id_ = 0u;
}
inline ::google::protobuf::uint32 TakeCityReputationParentQuestRsp::city_id() const {
  // @@protoc_insertion_point(field_get:proto.TakeCityReputationParentQuestRsp.city_id)
  return city_id_;
}
inline void TakeCityReputationParentQuestRsp::set_city_id(::google::protobuf::uint32 value) {
  
  city_id_ = value;
  // @@protoc_insertion_point(field_set:proto.TakeCityReputationParentQuestRsp.city_id)
}

// repeated uint32 parent_quest_list = 9;
inline int TakeCityReputationParentQuestRsp::parent_quest_list_size() const {
  return parent_quest_list_.size();
}
inline void TakeCityReputationParentQuestRsp::clear_parent_quest_list() {
  parent_quest_list_.Clear();
}
inline ::google::protobuf::uint32 TakeCityReputationParentQuestRsp::parent_quest_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.TakeCityReputationParentQuestRsp.parent_quest_list)
  return parent_quest_list_.Get(index);
}
inline void TakeCityReputationParentQuestRsp::set_parent_quest_list(int index, ::google::protobuf::uint32 value) {
  parent_quest_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.TakeCityReputationParentQuestRsp.parent_quest_list)
}
inline void TakeCityReputationParentQuestRsp::add_parent_quest_list(::google::protobuf::uint32 value) {
  parent_quest_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.TakeCityReputationParentQuestRsp.parent_quest_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TakeCityReputationParentQuestRsp::parent_quest_list() const {
  // @@protoc_insertion_point(field_list:proto.TakeCityReputationParentQuestRsp.parent_quest_list)
  return parent_quest_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TakeCityReputationParentQuestRsp::mutable_parent_quest_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.TakeCityReputationParentQuestRsp.parent_quest_list)
  return &parent_quest_list_;
}

// repeated .proto.ItemParam item_list = 13;
inline int TakeCityReputationParentQuestRsp::item_list_size() const {
  return item_list_.size();
}
inline void TakeCityReputationParentQuestRsp::clear_item_list() {
  item_list_.Clear();
}
inline const ::proto::ItemParam& TakeCityReputationParentQuestRsp::item_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.TakeCityReputationParentQuestRsp.item_list)
  return item_list_.Get(index);
}
inline ::proto::ItemParam* TakeCityReputationParentQuestRsp::mutable_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.TakeCityReputationParentQuestRsp.item_list)
  return item_list_.Mutable(index);
}
inline ::proto::ItemParam* TakeCityReputationParentQuestRsp::add_item_list() {
  // @@protoc_insertion_point(field_add:proto.TakeCityReputationParentQuestRsp.item_list)
  return item_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >*
TakeCityReputationParentQuestRsp::mutable_item_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.TakeCityReputationParentQuestRsp.item_list)
  return &item_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >&
TakeCityReputationParentQuestRsp::item_list() const {
  // @@protoc_insertion_point(field_list:proto.TakeCityReputationParentQuestRsp.item_list)
  return item_list_;
}

// -------------------------------------------------------------------

// AcceptCityReputationRequestReq

// uint32 city_id = 14;
inline void AcceptCityReputationRequestReq::clear_city_id() {
  city_id_ = 0u;
}
inline ::google::protobuf::uint32 AcceptCityReputationRequestReq::city_id() const {
  // @@protoc_insertion_point(field_get:proto.AcceptCityReputationRequestReq.city_id)
  return city_id_;
}
inline void AcceptCityReputationRequestReq::set_city_id(::google::protobuf::uint32 value) {
  
  city_id_ = value;
  // @@protoc_insertion_point(field_set:proto.AcceptCityReputationRequestReq.city_id)
}

// uint32 request_id = 5;
inline void AcceptCityReputationRequestReq::clear_request_id() {
  request_id_ = 0u;
}
inline ::google::protobuf::uint32 AcceptCityReputationRequestReq::request_id() const {
  // @@protoc_insertion_point(field_get:proto.AcceptCityReputationRequestReq.request_id)
  return request_id_;
}
inline void AcceptCityReputationRequestReq::set_request_id(::google::protobuf::uint32 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:proto.AcceptCityReputationRequestReq.request_id)
}

// -------------------------------------------------------------------

// AcceptCityReputationRequestRsp

// uint32 request_id = 5;
inline void AcceptCityReputationRequestRsp::clear_request_id() {
  request_id_ = 0u;
}
inline ::google::protobuf::uint32 AcceptCityReputationRequestRsp::request_id() const {
  // @@protoc_insertion_point(field_get:proto.AcceptCityReputationRequestRsp.request_id)
  return request_id_;
}
inline void AcceptCityReputationRequestRsp::set_request_id(::google::protobuf::uint32 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:proto.AcceptCityReputationRequestRsp.request_id)
}

// uint32 city_id = 13;
inline void AcceptCityReputationRequestRsp::clear_city_id() {
  city_id_ = 0u;
}
inline ::google::protobuf::uint32 AcceptCityReputationRequestRsp::city_id() const {
  // @@protoc_insertion_point(field_get:proto.AcceptCityReputationRequestRsp.city_id)
  return city_id_;
}
inline void AcceptCityReputationRequestRsp::set_city_id(::google::protobuf::uint32 value) {
  
  city_id_ = value;
  // @@protoc_insertion_point(field_set:proto.AcceptCityReputationRequestRsp.city_id)
}

// int32 retcode = 2;
inline void AcceptCityReputationRequestRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 AcceptCityReputationRequestRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.AcceptCityReputationRequestRsp.retcode)
  return retcode_;
}
inline void AcceptCityReputationRequestRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.AcceptCityReputationRequestRsp.retcode)
}

// -------------------------------------------------------------------

// CancelCityReputationRequestReq

// uint32 request_id = 10;
inline void CancelCityReputationRequestReq::clear_request_id() {
  request_id_ = 0u;
}
inline ::google::protobuf::uint32 CancelCityReputationRequestReq::request_id() const {
  // @@protoc_insertion_point(field_get:proto.CancelCityReputationRequestReq.request_id)
  return request_id_;
}
inline void CancelCityReputationRequestReq::set_request_id(::google::protobuf::uint32 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:proto.CancelCityReputationRequestReq.request_id)
}

// uint32 city_id = 6;
inline void CancelCityReputationRequestReq::clear_city_id() {
  city_id_ = 0u;
}
inline ::google::protobuf::uint32 CancelCityReputationRequestReq::city_id() const {
  // @@protoc_insertion_point(field_get:proto.CancelCityReputationRequestReq.city_id)
  return city_id_;
}
inline void CancelCityReputationRequestReq::set_city_id(::google::protobuf::uint32 value) {
  
  city_id_ = value;
  // @@protoc_insertion_point(field_set:proto.CancelCityReputationRequestReq.city_id)
}

// -------------------------------------------------------------------

// CancelCityReputationRequestRsp

// uint32 city_id = 3;
inline void CancelCityReputationRequestRsp::clear_city_id() {
  city_id_ = 0u;
}
inline ::google::protobuf::uint32 CancelCityReputationRequestRsp::city_id() const {
  // @@protoc_insertion_point(field_get:proto.CancelCityReputationRequestRsp.city_id)
  return city_id_;
}
inline void CancelCityReputationRequestRsp::set_city_id(::google::protobuf::uint32 value) {
  
  city_id_ = value;
  // @@protoc_insertion_point(field_set:proto.CancelCityReputationRequestRsp.city_id)
}

// int32 retcode = 2;
inline void CancelCityReputationRequestRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 CancelCityReputationRequestRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.CancelCityReputationRequestRsp.retcode)
  return retcode_;
}
inline void CancelCityReputationRequestRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.CancelCityReputationRequestRsp.retcode)
}

// uint32 request_id = 12;
inline void CancelCityReputationRequestRsp::clear_request_id() {
  request_id_ = 0u;
}
inline ::google::protobuf::uint32 CancelCityReputationRequestRsp::request_id() const {
  // @@protoc_insertion_point(field_get:proto.CancelCityReputationRequestRsp.request_id)
  return request_id_;
}
inline void CancelCityReputationRequestRsp::set_request_id(::google::protobuf::uint32 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:proto.CancelCityReputationRequestRsp.request_id)
}

// -------------------------------------------------------------------

// GetCityReputationMapInfoReq

// -------------------------------------------------------------------

// GetCityReputationMapInfoRsp

// int32 retcode = 11;
inline void GetCityReputationMapInfoRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 GetCityReputationMapInfoRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GetCityReputationMapInfoRsp.retcode)
  return retcode_;
}
inline void GetCityReputationMapInfoRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GetCityReputationMapInfoRsp.retcode)
}

// bool is_new_hunting = 10;
inline void GetCityReputationMapInfoRsp::clear_is_new_hunting() {
  is_new_hunting_ = false;
}
inline bool GetCityReputationMapInfoRsp::is_new_hunting() const {
  // @@protoc_insertion_point(field_get:proto.GetCityReputationMapInfoRsp.is_new_hunting)
  return is_new_hunting_;
}
inline void GetCityReputationMapInfoRsp::set_is_new_hunting(bool value) {
  
  is_new_hunting_ = value;
  // @@protoc_insertion_point(field_set:proto.GetCityReputationMapInfoRsp.is_new_hunting)
}

// bool is_new_request = 2;
inline void GetCityReputationMapInfoRsp::clear_is_new_request() {
  is_new_request_ = false;
}
inline bool GetCityReputationMapInfoRsp::is_new_request() const {
  // @@protoc_insertion_point(field_get:proto.GetCityReputationMapInfoRsp.is_new_request)
  return is_new_request_;
}
inline void GetCityReputationMapInfoRsp::set_is_new_request(bool value) {
  
  is_new_request_ = value;
  // @@protoc_insertion_point(field_set:proto.GetCityReputationMapInfoRsp.is_new_request)
}

// repeated uint32 unlock_hunting_city_list = 9;
inline int GetCityReputationMapInfoRsp::unlock_hunting_city_list_size() const {
  return unlock_hunting_city_list_.size();
}
inline void GetCityReputationMapInfoRsp::clear_unlock_hunting_city_list() {
  unlock_hunting_city_list_.Clear();
}
inline ::google::protobuf::uint32 GetCityReputationMapInfoRsp::unlock_hunting_city_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GetCityReputationMapInfoRsp.unlock_hunting_city_list)
  return unlock_hunting_city_list_.Get(index);
}
inline void GetCityReputationMapInfoRsp::set_unlock_hunting_city_list(int index, ::google::protobuf::uint32 value) {
  unlock_hunting_city_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GetCityReputationMapInfoRsp.unlock_hunting_city_list)
}
inline void GetCityReputationMapInfoRsp::add_unlock_hunting_city_list(::google::protobuf::uint32 value) {
  unlock_hunting_city_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GetCityReputationMapInfoRsp.unlock_hunting_city_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GetCityReputationMapInfoRsp::unlock_hunting_city_list() const {
  // @@protoc_insertion_point(field_list:proto.GetCityReputationMapInfoRsp.unlock_hunting_city_list)
  return unlock_hunting_city_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GetCityReputationMapInfoRsp::mutable_unlock_hunting_city_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GetCityReputationMapInfoRsp.unlock_hunting_city_list)
  return &unlock_hunting_city_list_;
}

// repeated uint32 reward_city_list = 3;
inline int GetCityReputationMapInfoRsp::reward_city_list_size() const {
  return reward_city_list_.size();
}
inline void GetCityReputationMapInfoRsp::clear_reward_city_list() {
  reward_city_list_.Clear();
}
inline ::google::protobuf::uint32 GetCityReputationMapInfoRsp::reward_city_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GetCityReputationMapInfoRsp.reward_city_list)
  return reward_city_list_.Get(index);
}
inline void GetCityReputationMapInfoRsp::set_reward_city_list(int index, ::google::protobuf::uint32 value) {
  reward_city_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GetCityReputationMapInfoRsp.reward_city_list)
}
inline void GetCityReputationMapInfoRsp::add_reward_city_list(::google::protobuf::uint32 value) {
  reward_city_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GetCityReputationMapInfoRsp.reward_city_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GetCityReputationMapInfoRsp::reward_city_list() const {
  // @@protoc_insertion_point(field_list:proto.GetCityReputationMapInfoRsp.reward_city_list)
  return reward_city_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GetCityReputationMapInfoRsp::mutable_reward_city_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GetCityReputationMapInfoRsp.reward_city_list)
  return &reward_city_list_;
}

// -------------------------------------------------------------------

// TakeCityReputationExploreRewardReq

// uint32 city_id = 15;
inline void TakeCityReputationExploreRewardReq::clear_city_id() {
  city_id_ = 0u;
}
inline ::google::protobuf::uint32 TakeCityReputationExploreRewardReq::city_id() const {
  // @@protoc_insertion_point(field_get:proto.TakeCityReputationExploreRewardReq.city_id)
  return city_id_;
}
inline void TakeCityReputationExploreRewardReq::set_city_id(::google::protobuf::uint32 value) {
  
  city_id_ = value;
  // @@protoc_insertion_point(field_set:proto.TakeCityReputationExploreRewardReq.city_id)
}

// repeated uint32 explore_id_list = 12;
inline int TakeCityReputationExploreRewardReq::explore_id_list_size() const {
  return explore_id_list_.size();
}
inline void TakeCityReputationExploreRewardReq::clear_explore_id_list() {
  explore_id_list_.Clear();
}
inline ::google::protobuf::uint32 TakeCityReputationExploreRewardReq::explore_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.TakeCityReputationExploreRewardReq.explore_id_list)
  return explore_id_list_.Get(index);
}
inline void TakeCityReputationExploreRewardReq::set_explore_id_list(int index, ::google::protobuf::uint32 value) {
  explore_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.TakeCityReputationExploreRewardReq.explore_id_list)
}
inline void TakeCityReputationExploreRewardReq::add_explore_id_list(::google::protobuf::uint32 value) {
  explore_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.TakeCityReputationExploreRewardReq.explore_id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TakeCityReputationExploreRewardReq::explore_id_list() const {
  // @@protoc_insertion_point(field_list:proto.TakeCityReputationExploreRewardReq.explore_id_list)
  return explore_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TakeCityReputationExploreRewardReq::mutable_explore_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.TakeCityReputationExploreRewardReq.explore_id_list)
  return &explore_id_list_;
}

// -------------------------------------------------------------------

// TakeCityReputationExploreRewardRsp

// repeated uint32 explore_id_list = 8;
inline int TakeCityReputationExploreRewardRsp::explore_id_list_size() const {
  return explore_id_list_.size();
}
inline void TakeCityReputationExploreRewardRsp::clear_explore_id_list() {
  explore_id_list_.Clear();
}
inline ::google::protobuf::uint32 TakeCityReputationExploreRewardRsp::explore_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.TakeCityReputationExploreRewardRsp.explore_id_list)
  return explore_id_list_.Get(index);
}
inline void TakeCityReputationExploreRewardRsp::set_explore_id_list(int index, ::google::protobuf::uint32 value) {
  explore_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.TakeCityReputationExploreRewardRsp.explore_id_list)
}
inline void TakeCityReputationExploreRewardRsp::add_explore_id_list(::google::protobuf::uint32 value) {
  explore_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.TakeCityReputationExploreRewardRsp.explore_id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TakeCityReputationExploreRewardRsp::explore_id_list() const {
  // @@protoc_insertion_point(field_list:proto.TakeCityReputationExploreRewardRsp.explore_id_list)
  return explore_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TakeCityReputationExploreRewardRsp::mutable_explore_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.TakeCityReputationExploreRewardRsp.explore_id_list)
  return &explore_id_list_;
}

// repeated .proto.ItemParam item_list = 12;
inline int TakeCityReputationExploreRewardRsp::item_list_size() const {
  return item_list_.size();
}
inline void TakeCityReputationExploreRewardRsp::clear_item_list() {
  item_list_.Clear();
}
inline const ::proto::ItemParam& TakeCityReputationExploreRewardRsp::item_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.TakeCityReputationExploreRewardRsp.item_list)
  return item_list_.Get(index);
}
inline ::proto::ItemParam* TakeCityReputationExploreRewardRsp::mutable_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.TakeCityReputationExploreRewardRsp.item_list)
  return item_list_.Mutable(index);
}
inline ::proto::ItemParam* TakeCityReputationExploreRewardRsp::add_item_list() {
  // @@protoc_insertion_point(field_add:proto.TakeCityReputationExploreRewardRsp.item_list)
  return item_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >*
TakeCityReputationExploreRewardRsp::mutable_item_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.TakeCityReputationExploreRewardRsp.item_list)
  return &item_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >&
TakeCityReputationExploreRewardRsp::item_list() const {
  // @@protoc_insertion_point(field_list:proto.TakeCityReputationExploreRewardRsp.item_list)
  return item_list_;
}

// int32 retcode = 6;
inline void TakeCityReputationExploreRewardRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 TakeCityReputationExploreRewardRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.TakeCityReputationExploreRewardRsp.retcode)
  return retcode_;
}
inline void TakeCityReputationExploreRewardRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.TakeCityReputationExploreRewardRsp.retcode)
}

// uint32 city_id = 13;
inline void TakeCityReputationExploreRewardRsp::clear_city_id() {
  city_id_ = 0u;
}
inline ::google::protobuf::uint32 TakeCityReputationExploreRewardRsp::city_id() const {
  // @@protoc_insertion_point(field_get:proto.TakeCityReputationExploreRewardRsp.city_id)
  return city_id_;
}
inline void TakeCityReputationExploreRewardRsp::set_city_id(::google::protobuf::uint32 value) {
  
  city_id_ = value;
  // @@protoc_insertion_point(field_set:proto.TakeCityReputationExploreRewardRsp.city_id)
}

// -------------------------------------------------------------------

// CityReputationSimpleInfo

// uint32 level = 15;
inline void CityReputationSimpleInfo::clear_level() {
  level_ = 0u;
}
inline ::google::protobuf::uint32 CityReputationSimpleInfo::level() const {
  // @@protoc_insertion_point(field_get:proto.CityReputationSimpleInfo.level)
  return level_;
}
inline void CityReputationSimpleInfo::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.CityReputationSimpleInfo.level)
}

// uint32 city_id = 9;
inline void CityReputationSimpleInfo::clear_city_id() {
  city_id_ = 0u;
}
inline ::google::protobuf::uint32 CityReputationSimpleInfo::city_id() const {
  // @@protoc_insertion_point(field_get:proto.CityReputationSimpleInfo.city_id)
  return city_id_;
}
inline void CityReputationSimpleInfo::set_city_id(::google::protobuf::uint32 value) {
  
  city_id_ = value;
  // @@protoc_insertion_point(field_set:proto.CityReputationSimpleInfo.city_id)
}

// -------------------------------------------------------------------

// CityReputationDataNotify

// repeated .proto.CityReputationSimpleInfo simple_info_list = 7;
inline int CityReputationDataNotify::simple_info_list_size() const {
  return simple_info_list_.size();
}
inline void CityReputationDataNotify::clear_simple_info_list() {
  simple_info_list_.Clear();
}
inline const ::proto::CityReputationSimpleInfo& CityReputationDataNotify::simple_info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.CityReputationDataNotify.simple_info_list)
  return simple_info_list_.Get(index);
}
inline ::proto::CityReputationSimpleInfo* CityReputationDataNotify::mutable_simple_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.CityReputationDataNotify.simple_info_list)
  return simple_info_list_.Mutable(index);
}
inline ::proto::CityReputationSimpleInfo* CityReputationDataNotify::add_simple_info_list() {
  // @@protoc_insertion_point(field_add:proto.CityReputationDataNotify.simple_info_list)
  return simple_info_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::CityReputationSimpleInfo >*
CityReputationDataNotify::mutable_simple_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.CityReputationDataNotify.simple_info_list)
  return &simple_info_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::CityReputationSimpleInfo >&
CityReputationDataNotify::simple_info_list() const {
  // @@protoc_insertion_point(field_list:proto.CityReputationDataNotify.simple_info_list)
  return simple_info_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace proto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cmd_2fcmd_5freputation_2eproto__INCLUDED
