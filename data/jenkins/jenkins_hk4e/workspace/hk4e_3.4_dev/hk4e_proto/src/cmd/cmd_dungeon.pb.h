// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cmd/cmd_dungeon.proto

#ifndef PROTOBUF_cmd_2fcmd_5fdungeon_2eproto__INCLUDED
#define PROTOBUF_cmd_2fcmd_5fdungeon_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "define.pb.h"
#include "cmd/cmd_tower.pb.h"
#include "cmd/cmd_activity.pb.h"
// @@protoc_insertion_point(includes)
namespace proto {
class ChallengeBrief;
class ChallengeBriefDefaultTypeInternal;
extern ChallengeBriefDefaultTypeInternal _ChallengeBrief_default_instance_;
class ChallengeDataNotify;
class ChallengeDataNotifyDefaultTypeInternal;
extern ChallengeDataNotifyDefaultTypeInternal _ChallengeDataNotify_default_instance_;
class ChallengeRecord;
class ChallengeRecordDefaultTypeInternal;
extern ChallengeRecordDefaultTypeInternal _ChallengeRecord_default_instance_;
class ChallengeRecordNotify;
class ChallengeRecordNotifyDefaultTypeInternal;
extern ChallengeRecordNotifyDefaultTypeInternal _ChallengeRecordNotify_default_instance_;
class CrystalLinkDungeonSettleInfo;
class CrystalLinkDungeonSettleInfoDefaultTypeInternal;
extern CrystalLinkDungeonSettleInfoDefaultTypeInternal _CrystalLinkDungeonSettleInfo_default_instance_;
class CustomDungeonResultInfo;
class CustomDungeonResultInfoDefaultTypeInternal;
extern CustomDungeonResultInfoDefaultTypeInternal _CustomDungeonResultInfo_default_instance_;
class DailyDungeonEntryInfo;
class DailyDungeonEntryInfoDefaultTypeInternal;
extern DailyDungeonEntryInfoDefaultTypeInternal _DailyDungeonEntryInfo_default_instance_;
class DungeonCandidateTeamAvatar;
class DungeonCandidateTeamAvatarDefaultTypeInternal;
extern DungeonCandidateTeamAvatarDefaultTypeInternal _DungeonCandidateTeamAvatar_default_instance_;
class DungeonCandidateTeamChangeAvatarReq;
class DungeonCandidateTeamChangeAvatarReqDefaultTypeInternal;
extern DungeonCandidateTeamChangeAvatarReqDefaultTypeInternal _DungeonCandidateTeamChangeAvatarReq_default_instance_;
class DungeonCandidateTeamChangeAvatarRsp;
class DungeonCandidateTeamChangeAvatarRspDefaultTypeInternal;
extern DungeonCandidateTeamChangeAvatarRspDefaultTypeInternal _DungeonCandidateTeamChangeAvatarRsp_default_instance_;
class DungeonCandidateTeamCreateReq;
class DungeonCandidateTeamCreateReqDefaultTypeInternal;
extern DungeonCandidateTeamCreateReqDefaultTypeInternal _DungeonCandidateTeamCreateReq_default_instance_;
class DungeonCandidateTeamCreateRsp;
class DungeonCandidateTeamCreateRspDefaultTypeInternal;
extern DungeonCandidateTeamCreateRspDefaultTypeInternal _DungeonCandidateTeamCreateRsp_default_instance_;
class DungeonCandidateTeamDismissNotify;
class DungeonCandidateTeamDismissNotifyDefaultTypeInternal;
extern DungeonCandidateTeamDismissNotifyDefaultTypeInternal _DungeonCandidateTeamDismissNotify_default_instance_;
class DungeonCandidateTeamInfoNotify;
class DungeonCandidateTeamInfoNotifyDefaultTypeInternal;
extern DungeonCandidateTeamInfoNotifyDefaultTypeInternal _DungeonCandidateTeamInfoNotify_default_instance_;
class DungeonCandidateTeamInfoNotify_PlayerStateMapEntry;
class DungeonCandidateTeamInfoNotify_PlayerStateMapEntryDefaultTypeInternal;
extern DungeonCandidateTeamInfoNotify_PlayerStateMapEntryDefaultTypeInternal _DungeonCandidateTeamInfoNotify_PlayerStateMapEntry_default_instance_;
class DungeonCandidateTeamInviteNotify;
class DungeonCandidateTeamInviteNotifyDefaultTypeInternal;
extern DungeonCandidateTeamInviteNotifyDefaultTypeInternal _DungeonCandidateTeamInviteNotify_default_instance_;
class DungeonCandidateTeamInviteReq;
class DungeonCandidateTeamInviteReqDefaultTypeInternal;
extern DungeonCandidateTeamInviteReqDefaultTypeInternal _DungeonCandidateTeamInviteReq_default_instance_;
class DungeonCandidateTeamInviteRsp;
class DungeonCandidateTeamInviteRspDefaultTypeInternal;
extern DungeonCandidateTeamInviteRspDefaultTypeInternal _DungeonCandidateTeamInviteRsp_default_instance_;
class DungeonCandidateTeamKickReq;
class DungeonCandidateTeamKickReqDefaultTypeInternal;
extern DungeonCandidateTeamKickReqDefaultTypeInternal _DungeonCandidateTeamKickReq_default_instance_;
class DungeonCandidateTeamKickRsp;
class DungeonCandidateTeamKickRspDefaultTypeInternal;
extern DungeonCandidateTeamKickRspDefaultTypeInternal _DungeonCandidateTeamKickRsp_default_instance_;
class DungeonCandidateTeamLeaveReq;
class DungeonCandidateTeamLeaveReqDefaultTypeInternal;
extern DungeonCandidateTeamLeaveReqDefaultTypeInternal _DungeonCandidateTeamLeaveReq_default_instance_;
class DungeonCandidateTeamLeaveRsp;
class DungeonCandidateTeamLeaveRspDefaultTypeInternal;
extern DungeonCandidateTeamLeaveRspDefaultTypeInternal _DungeonCandidateTeamLeaveRsp_default_instance_;
class DungeonCandidateTeamPlayerLeaveNotify;
class DungeonCandidateTeamPlayerLeaveNotifyDefaultTypeInternal;
extern DungeonCandidateTeamPlayerLeaveNotifyDefaultTypeInternal _DungeonCandidateTeamPlayerLeaveNotify_default_instance_;
class DungeonCandidateTeamRefuseNotify;
class DungeonCandidateTeamRefuseNotifyDefaultTypeInternal;
extern DungeonCandidateTeamRefuseNotifyDefaultTypeInternal _DungeonCandidateTeamRefuseNotify_default_instance_;
class DungeonCandidateTeamReplyInviteReq;
class DungeonCandidateTeamReplyInviteReqDefaultTypeInternal;
extern DungeonCandidateTeamReplyInviteReqDefaultTypeInternal _DungeonCandidateTeamReplyInviteReq_default_instance_;
class DungeonCandidateTeamReplyInviteRsp;
class DungeonCandidateTeamReplyInviteRspDefaultTypeInternal;
extern DungeonCandidateTeamReplyInviteRspDefaultTypeInternal _DungeonCandidateTeamReplyInviteRsp_default_instance_;
class DungeonCandidateTeamSetChangingAvatarReq;
class DungeonCandidateTeamSetChangingAvatarReqDefaultTypeInternal;
extern DungeonCandidateTeamSetChangingAvatarReqDefaultTypeInternal _DungeonCandidateTeamSetChangingAvatarReq_default_instance_;
class DungeonCandidateTeamSetChangingAvatarRsp;
class DungeonCandidateTeamSetChangingAvatarRspDefaultTypeInternal;
extern DungeonCandidateTeamSetChangingAvatarRspDefaultTypeInternal _DungeonCandidateTeamSetChangingAvatarRsp_default_instance_;
class DungeonCandidateTeamSetReadyReq;
class DungeonCandidateTeamSetReadyReqDefaultTypeInternal;
extern DungeonCandidateTeamSetReadyReqDefaultTypeInternal _DungeonCandidateTeamSetReadyReq_default_instance_;
class DungeonCandidateTeamSetReadyRsp;
class DungeonCandidateTeamSetReadyRspDefaultTypeInternal;
extern DungeonCandidateTeamSetReadyRspDefaultTypeInternal _DungeonCandidateTeamSetReadyRsp_default_instance_;
class DungeonChallengeBeginNotify;
class DungeonChallengeBeginNotifyDefaultTypeInternal;
extern DungeonChallengeBeginNotifyDefaultTypeInternal _DungeonChallengeBeginNotify_default_instance_;
class DungeonChallengeFinishNotify;
class DungeonChallengeFinishNotifyDefaultTypeInternal;
extern DungeonChallengeFinishNotifyDefaultTypeInternal _DungeonChallengeFinishNotify_default_instance_;
class DungeonChallengeFinishNotify_StrengthenPointDataMapEntry;
class DungeonChallengeFinishNotify_StrengthenPointDataMapEntryDefaultTypeInternal;
extern DungeonChallengeFinishNotify_StrengthenPointDataMapEntryDefaultTypeInternal _DungeonChallengeFinishNotify_StrengthenPointDataMapEntry_default_instance_;
class DungeonDataNotify;
class DungeonDataNotifyDefaultTypeInternal;
extern DungeonDataNotifyDefaultTypeInternal _DungeonDataNotify_default_instance_;
class DungeonDataNotify_DungeonDataMapEntry;
class DungeonDataNotify_DungeonDataMapEntryDefaultTypeInternal;
extern DungeonDataNotify_DungeonDataMapEntryDefaultTypeInternal _DungeonDataNotify_DungeonDataMapEntry_default_instance_;
class DungeonDieOptionReq;
class DungeonDieOptionReqDefaultTypeInternal;
extern DungeonDieOptionReqDefaultTypeInternal _DungeonDieOptionReq_default_instance_;
class DungeonDieOptionRsp;
class DungeonDieOptionRspDefaultTypeInternal;
extern DungeonDieOptionRspDefaultTypeInternal _DungeonDieOptionRsp_default_instance_;
class DungeonEnterPosInfo;
class DungeonEnterPosInfoDefaultTypeInternal;
extern DungeonEnterPosInfoDefaultTypeInternal _DungeonEnterPosInfo_default_instance_;
class DungeonEntryInfo;
class DungeonEntryInfoDefaultTypeInternal;
extern DungeonEntryInfoDefaultTypeInternal _DungeonEntryInfo_default_instance_;
class DungeonEntryInfoReq;
class DungeonEntryInfoReqDefaultTypeInternal;
extern DungeonEntryInfoReqDefaultTypeInternal _DungeonEntryInfoReq_default_instance_;
class DungeonEntryInfoRsp;
class DungeonEntryInfoRspDefaultTypeInternal;
extern DungeonEntryInfoRspDefaultTypeInternal _DungeonEntryInfoRsp_default_instance_;
class DungeonEntryPointInfo;
class DungeonEntryPointInfoDefaultTypeInternal;
extern DungeonEntryPointInfoDefaultTypeInternal _DungeonEntryPointInfo_default_instance_;
class DungeonFollowNotify;
class DungeonFollowNotifyDefaultTypeInternal;
extern DungeonFollowNotifyDefaultTypeInternal _DungeonFollowNotify_default_instance_;
class DungeonGetStatueDropReq;
class DungeonGetStatueDropReqDefaultTypeInternal;
extern DungeonGetStatueDropReqDefaultTypeInternal _DungeonGetStatueDropReq_default_instance_;
class DungeonGetStatueDropRsp;
class DungeonGetStatueDropRspDefaultTypeInternal;
extern DungeonGetStatueDropRspDefaultTypeInternal _DungeonGetStatueDropRsp_default_instance_;
class DungeonInterruptChallengeReq;
class DungeonInterruptChallengeReqDefaultTypeInternal;
extern DungeonInterruptChallengeReqDefaultTypeInternal _DungeonInterruptChallengeReq_default_instance_;
class DungeonInterruptChallengeRsp;
class DungeonInterruptChallengeRspDefaultTypeInternal;
extern DungeonInterruptChallengeRspDefaultTypeInternal _DungeonInterruptChallengeRsp_default_instance_;
class DungeonPlayerDieNotify;
class DungeonPlayerDieNotifyDefaultTypeInternal;
extern DungeonPlayerDieNotifyDefaultTypeInternal _DungeonPlayerDieNotify_default_instance_;
class DungeonPlayerDieNotify_StrengthenPointDataMapEntry;
class DungeonPlayerDieNotify_StrengthenPointDataMapEntryDefaultTypeInternal;
extern DungeonPlayerDieNotify_StrengthenPointDataMapEntryDefaultTypeInternal _DungeonPlayerDieNotify_StrengthenPointDataMapEntry_default_instance_;
class DungeonPlayerDieReq;
class DungeonPlayerDieReqDefaultTypeInternal;
extern DungeonPlayerDieReqDefaultTypeInternal _DungeonPlayerDieReq_default_instance_;
class DungeonPlayerDieRsp;
class DungeonPlayerDieRspDefaultTypeInternal;
extern DungeonPlayerDieRspDefaultTypeInternal _DungeonPlayerDieRsp_default_instance_;
class DungeonRestartInviteNotify;
class DungeonRestartInviteNotifyDefaultTypeInternal;
extern DungeonRestartInviteNotifyDefaultTypeInternal _DungeonRestartInviteNotify_default_instance_;
class DungeonRestartInviteReplyNotify;
class DungeonRestartInviteReplyNotifyDefaultTypeInternal;
extern DungeonRestartInviteReplyNotifyDefaultTypeInternal _DungeonRestartInviteReplyNotify_default_instance_;
class DungeonRestartInviteReplyReq;
class DungeonRestartInviteReplyReqDefaultTypeInternal;
extern DungeonRestartInviteReplyReqDefaultTypeInternal _DungeonRestartInviteReplyReq_default_instance_;
class DungeonRestartInviteReplyRsp;
class DungeonRestartInviteReplyRspDefaultTypeInternal;
extern DungeonRestartInviteReplyRspDefaultTypeInternal _DungeonRestartInviteReplyRsp_default_instance_;
class DungeonRestartReq;
class DungeonRestartReqDefaultTypeInternal;
extern DungeonRestartReqDefaultTypeInternal _DungeonRestartReq_default_instance_;
class DungeonRestartResultNotify;
class DungeonRestartResultNotifyDefaultTypeInternal;
extern DungeonRestartResultNotifyDefaultTypeInternal _DungeonRestartResultNotify_default_instance_;
class DungeonRestartRsp;
class DungeonRestartRspDefaultTypeInternal;
extern DungeonRestartRspDefaultTypeInternal _DungeonRestartRsp_default_instance_;
class DungeonReviseLevelNotify;
class DungeonReviseLevelNotifyDefaultTypeInternal;
extern DungeonReviseLevelNotifyDefaultTypeInternal _DungeonReviseLevelNotify_default_instance_;
class DungeonSettleExhibitionInfo;
class DungeonSettleExhibitionInfoDefaultTypeInternal;
extern DungeonSettleExhibitionInfoDefaultTypeInternal _DungeonSettleExhibitionInfo_default_instance_;
class DungeonSettleNotify;
class DungeonSettleNotifyDefaultTypeInternal;
extern DungeonSettleNotifyDefaultTypeInternal _DungeonSettleNotify_default_instance_;
class DungeonSettleNotify_SettleShowEntry;
class DungeonSettleNotify_SettleShowEntryDefaultTypeInternal;
extern DungeonSettleNotify_SettleShowEntryDefaultTypeInternal _DungeonSettleNotify_SettleShowEntry_default_instance_;
class DungeonSettleNotify_StrengthenPointDataMapEntry;
class DungeonSettleNotify_StrengthenPointDataMapEntryDefaultTypeInternal;
extern DungeonSettleNotify_StrengthenPointDataMapEntryDefaultTypeInternal _DungeonSettleNotify_StrengthenPointDataMapEntry_default_instance_;
class DungeonShowReminderNotify;
class DungeonShowReminderNotifyDefaultTypeInternal;
extern DungeonShowReminderNotifyDefaultTypeInternal _DungeonShowReminderNotify_default_instance_;
class DungeonSlipRevivePointActivateReq;
class DungeonSlipRevivePointActivateReqDefaultTypeInternal;
extern DungeonSlipRevivePointActivateReqDefaultTypeInternal _DungeonSlipRevivePointActivateReq_default_instance_;
class DungeonSlipRevivePointActivateRsp;
class DungeonSlipRevivePointActivateRspDefaultTypeInternal;
extern DungeonSlipRevivePointActivateRspDefaultTypeInternal _DungeonSlipRevivePointActivateRsp_default_instance_;
class DungeonWayPointActivateReq;
class DungeonWayPointActivateReqDefaultTypeInternal;
extern DungeonWayPointActivateReqDefaultTypeInternal _DungeonWayPointActivateReq_default_instance_;
class DungeonWayPointActivateRsp;
class DungeonWayPointActivateRspDefaultTypeInternal;
extern DungeonWayPointActivateRspDefaultTypeInternal _DungeonWayPointActivateRsp_default_instance_;
class DungeonWayPointNotify;
class DungeonWayPointNotifyDefaultTypeInternal;
extern DungeonWayPointNotifyDefaultTypeInternal _DungeonWayPointNotify_default_instance_;
class EffigyChallengeV2SettleInfo;
class EffigyChallengeV2SettleInfoDefaultTypeInternal;
extern EffigyChallengeV2SettleInfoDefaultTypeInternal _EffigyChallengeV2SettleInfo_default_instance_;
class GetDailyDungeonEntryInfoReq;
class GetDailyDungeonEntryInfoReqDefaultTypeInternal;
extern GetDailyDungeonEntryInfoReqDefaultTypeInternal _GetDailyDungeonEntryInfoReq_default_instance_;
class GetDailyDungeonEntryInfoRsp;
class GetDailyDungeonEntryInfoRspDefaultTypeInternal;
extern GetDailyDungeonEntryInfoRspDefaultTypeInternal _GetDailyDungeonEntryInfoRsp_default_instance_;
class InstableSprayDungeonSettleInfo;
class InstableSprayDungeonSettleInfoDefaultTypeInternal;
extern InstableSprayDungeonSettleInfoDefaultTypeInternal _InstableSprayDungeonSettleInfo_default_instance_;
class InteractDailyDungeonInfoNotify;
class InteractDailyDungeonInfoNotifyDefaultTypeInternal;
extern InteractDailyDungeonInfoNotifyDefaultTypeInternal _InteractDailyDungeonInfoNotify_default_instance_;
class MistTrialFloorLevelNotify;
class MistTrialFloorLevelNotifyDefaultTypeInternal;
extern MistTrialFloorLevelNotifyDefaultTypeInternal _MistTrialFloorLevelNotify_default_instance_;
class PlayerEnterDungeonReq;
class PlayerEnterDungeonReqDefaultTypeInternal;
extern PlayerEnterDungeonReqDefaultTypeInternal _PlayerEnterDungeonReq_default_instance_;
class PlayerEnterDungeonRsp;
class PlayerEnterDungeonRspDefaultTypeInternal;
extern PlayerEnterDungeonRspDefaultTypeInternal _PlayerEnterDungeonRsp_default_instance_;
class PlayerQuitDungeonReq;
class PlayerQuitDungeonReqDefaultTypeInternal;
extern PlayerQuitDungeonReqDefaultTypeInternal _PlayerQuitDungeonReq_default_instance_;
class PlayerQuitDungeonRsp;
class PlayerQuitDungeonRspDefaultTypeInternal;
extern PlayerQuitDungeonRspDefaultTypeInternal _PlayerQuitDungeonRsp_default_instance_;
class StrengthenPointData;
class StrengthenPointDataDefaultTypeInternal;
extern StrengthenPointDataDefaultTypeInternal _StrengthenPointData_default_instance_;
class SummerTimeV2DungeonSettleInfo;
class SummerTimeV2DungeonSettleInfoDefaultTypeInternal;
extern SummerTimeV2DungeonSettleInfoDefaultTypeInternal _SummerTimeV2DungeonSettleInfo_default_instance_;
class TeamChainSettleInfo;
class TeamChainSettleInfoDefaultTypeInternal;
extern TeamChainSettleInfoDefaultTypeInternal _TeamChainSettleInfo_default_instance_;
class WindFieldDungeonSettleInfo;
class WindFieldDungeonSettleInfoDefaultTypeInternal;
extern WindFieldDungeonSettleInfoDefaultTypeInternal _WindFieldDungeonSettleInfo_default_instance_;
}  // namespace proto

namespace proto {

namespace protobuf_cmd_2fcmd_5fdungeon_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_cmd_2fcmd_5fdungeon_2eproto

enum WindFieldDungeonFailReason {
  WIND_FIELD_DUNGEON_FAIL_NONE = 0,
  WIND_FIELD_DUNGEON_FAIL_CANCEL = 1,
  WIND_FIELD_DUNGEON_FAIL_TIMEOUT = 2,
  WIND_FIELD_DUNGEON_FAIL_ALL_AVATAR_DIE = 3,
  WIND_FIELD_DUNGEON_FAIL_LUA_INTERRUPT = 4,
  WindFieldDungeonFailReason_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  WindFieldDungeonFailReason_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool WindFieldDungeonFailReason_IsValid(int value);
const WindFieldDungeonFailReason WindFieldDungeonFailReason_MIN = WIND_FIELD_DUNGEON_FAIL_NONE;
const WindFieldDungeonFailReason WindFieldDungeonFailReason_MAX = WIND_FIELD_DUNGEON_FAIL_LUA_INTERRUPT;
const int WindFieldDungeonFailReason_ARRAYSIZE = WindFieldDungeonFailReason_MAX + 1;

const ::google::protobuf::EnumDescriptor* WindFieldDungeonFailReason_descriptor();
inline const ::std::string& WindFieldDungeonFailReason_Name(WindFieldDungeonFailReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    WindFieldDungeonFailReason_descriptor(), value);
}
inline bool WindFieldDungeonFailReason_Parse(
    const ::std::string& name, WindFieldDungeonFailReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WindFieldDungeonFailReason>(
    WindFieldDungeonFailReason_descriptor(), name, value);
}
enum DungeonDataType {
  DUNGEON_DATA_NONE = 0,
  DUNGEON_DATA_END_TIME = 1,
  DUNGEON_DATA_MONSTER_DIE_COUNT = 2,
  DUNGEON_DATA_LEVEL_CONFIG_ID = 3,
  DUNGEON_DATA_TOWER_MONTHLY_LEVEL_CONFIG_ID = 4,
  DUNGEON_DATA_TOWER_FLOOR_LEVEL_CONFIG_ID = 5,
  DungeonDataType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DungeonDataType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DungeonDataType_IsValid(int value);
const DungeonDataType DungeonDataType_MIN = DUNGEON_DATA_NONE;
const DungeonDataType DungeonDataType_MAX = DUNGEON_DATA_TOWER_FLOOR_LEVEL_CONFIG_ID;
const int DungeonDataType_ARRAYSIZE = DungeonDataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DungeonDataType_descriptor();
inline const ::std::string& DungeonDataType_Name(DungeonDataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DungeonDataType_descriptor(), value);
}
inline bool DungeonDataType_Parse(
    const ::std::string& name, DungeonDataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DungeonDataType>(
    DungeonDataType_descriptor(), name, value);
}
enum ChallengeFinishType {
  CHALLENGE_FINISH_TYPE_NONE = 0,
  CHALLENGE_FINISH_TYPE_FAIL = 1,
  CHALLENGE_FINISH_TYPE_SUCC = 2,
  CHALLENGE_FINISH_TYPE_PAUSE = 3,
  ChallengeFinishType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ChallengeFinishType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ChallengeFinishType_IsValid(int value);
const ChallengeFinishType ChallengeFinishType_MIN = CHALLENGE_FINISH_TYPE_NONE;
const ChallengeFinishType ChallengeFinishType_MAX = CHALLENGE_FINISH_TYPE_PAUSE;
const int ChallengeFinishType_ARRAYSIZE = ChallengeFinishType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChallengeFinishType_descriptor();
inline const ::std::string& ChallengeFinishType_Name(ChallengeFinishType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChallengeFinishType_descriptor(), value);
}
inline bool ChallengeFinishType_Parse(
    const ::std::string& name, ChallengeFinishType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChallengeFinishType>(
    ChallengeFinishType_descriptor(), name, value);
}
enum CustomDungeonFinishType {
  CUSTOM_DUNGEON_FINISH_PLAY_NORMAL = 0,
  CUSTOM_DUNGEON_FINISH_PLAY_TRY = 1,
  CUSTOM_DUNGEON_FINISH_EDIT_TRY = 2,
  CUSTOM_DUNGEON_FINISH_SELF_PLAY_NORMAL = 3,
  CustomDungeonFinishType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CustomDungeonFinishType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CustomDungeonFinishType_IsValid(int value);
const CustomDungeonFinishType CustomDungeonFinishType_MIN = CUSTOM_DUNGEON_FINISH_PLAY_NORMAL;
const CustomDungeonFinishType CustomDungeonFinishType_MAX = CUSTOM_DUNGEON_FINISH_SELF_PLAY_NORMAL;
const int CustomDungeonFinishType_ARRAYSIZE = CustomDungeonFinishType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CustomDungeonFinishType_descriptor();
inline const ::std::string& CustomDungeonFinishType_Name(CustomDungeonFinishType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CustomDungeonFinishType_descriptor(), value);
}
inline bool CustomDungeonFinishType_Parse(
    const ::std::string& name, CustomDungeonFinishType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CustomDungeonFinishType>(
    CustomDungeonFinishType_descriptor(), name, value);
}
enum DungeonCandidateTeamPlayerLeaveReason {
  DUNGEON_CANDIDATE_TPLR_NORMAL = 0,
  DUNGEON_CANDIDATE_TPLR_DIE = 1,
  DUNGEON_CANDIDATE_TPLR_BE_KICK = 2,
  DUNGEON_CANDIDATE_DISCONNECT = 3,
  DungeonCandidateTeamPlayerLeaveReason_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DungeonCandidateTeamPlayerLeaveReason_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DungeonCandidateTeamPlayerLeaveReason_IsValid(int value);
const DungeonCandidateTeamPlayerLeaveReason DungeonCandidateTeamPlayerLeaveReason_MIN = DUNGEON_CANDIDATE_TPLR_NORMAL;
const DungeonCandidateTeamPlayerLeaveReason DungeonCandidateTeamPlayerLeaveReason_MAX = DUNGEON_CANDIDATE_DISCONNECT;
const int DungeonCandidateTeamPlayerLeaveReason_ARRAYSIZE = DungeonCandidateTeamPlayerLeaveReason_MAX + 1;

const ::google::protobuf::EnumDescriptor* DungeonCandidateTeamPlayerLeaveReason_descriptor();
inline const ::std::string& DungeonCandidateTeamPlayerLeaveReason_Name(DungeonCandidateTeamPlayerLeaveReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    DungeonCandidateTeamPlayerLeaveReason_descriptor(), value);
}
inline bool DungeonCandidateTeamPlayerLeaveReason_Parse(
    const ::std::string& name, DungeonCandidateTeamPlayerLeaveReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DungeonCandidateTeamPlayerLeaveReason>(
    DungeonCandidateTeamPlayerLeaveReason_descriptor(), name, value);
}
enum DungeonCandidateTeamDismissReason {
  DUNGEON_CANDIDATE_TPDR_NORMAL = 0,
  DUNGEON_CANDIDATE_TPDR_DIE = 1,
  DUNGEON_CANDIDATE_TPDR_DISCONNECT = 2,
  DungeonCandidateTeamDismissReason_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DungeonCandidateTeamDismissReason_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DungeonCandidateTeamDismissReason_IsValid(int value);
const DungeonCandidateTeamDismissReason DungeonCandidateTeamDismissReason_MIN = DUNGEON_CANDIDATE_TPDR_NORMAL;
const DungeonCandidateTeamDismissReason DungeonCandidateTeamDismissReason_MAX = DUNGEON_CANDIDATE_TPDR_DISCONNECT;
const int DungeonCandidateTeamDismissReason_ARRAYSIZE = DungeonCandidateTeamDismissReason_MAX + 1;

const ::google::protobuf::EnumDescriptor* DungeonCandidateTeamDismissReason_descriptor();
inline const ::std::string& DungeonCandidateTeamDismissReason_Name(DungeonCandidateTeamDismissReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    DungeonCandidateTeamDismissReason_descriptor(), value);
}
inline bool DungeonCandidateTeamDismissReason_Parse(
    const ::std::string& name, DungeonCandidateTeamDismissReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DungeonCandidateTeamDismissReason>(
    DungeonCandidateTeamDismissReason_descriptor(), name, value);
}
enum DungeonRestartReason {
  DUNGEON_RESTART_REASON_NONE = 0,
  DUNGEON_RESTART_REASON_DAILY_RESTART = 1,
  DUNGEON_RESTART_REASON_DIE_RETRY = 2,
  DungeonRestartReason_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DungeonRestartReason_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DungeonRestartReason_IsValid(int value);
const DungeonRestartReason DungeonRestartReason_MIN = DUNGEON_RESTART_REASON_NONE;
const DungeonRestartReason DungeonRestartReason_MAX = DUNGEON_RESTART_REASON_DIE_RETRY;
const int DungeonRestartReason_ARRAYSIZE = DungeonRestartReason_MAX + 1;

const ::google::protobuf::EnumDescriptor* DungeonRestartReason_descriptor();
inline const ::std::string& DungeonRestartReason_Name(DungeonRestartReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    DungeonRestartReason_descriptor(), value);
}
inline bool DungeonRestartReason_Parse(
    const ::std::string& name, DungeonRestartReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DungeonRestartReason>(
    DungeonRestartReason_descriptor(), name, value);
}
// ===================================================================

class DungeonEntryInfoReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DungeonEntryInfoReq) */ {
 public:
  DungeonEntryInfoReq();
  virtual ~DungeonEntryInfoReq();

  DungeonEntryInfoReq(const DungeonEntryInfoReq& from);

  inline DungeonEntryInfoReq& operator=(const DungeonEntryInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DungeonEntryInfoReq(DungeonEntryInfoReq&& from) noexcept
    : DungeonEntryInfoReq() {
    *this = ::std::move(from);
  }

  inline DungeonEntryInfoReq& operator=(DungeonEntryInfoReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonEntryInfoReq& default_instance();

  static inline const DungeonEntryInfoReq* internal_default_instance() {
    return reinterpret_cast<const DungeonEntryInfoReq*>(
               &_DungeonEntryInfoReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(DungeonEntryInfoReq* other);
  friend void swap(DungeonEntryInfoReq& a, DungeonEntryInfoReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DungeonEntryInfoReq* New() const PROTOBUF_FINAL { return New(NULL); }

  DungeonEntryInfoReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DungeonEntryInfoReq& from);
  void MergeFrom(const DungeonEntryInfoReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DungeonEntryInfoReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.Uint32Pair scene_point_id_list = 4;
  int scene_point_id_list_size() const;
  void clear_scene_point_id_list();
  static const int kScenePointIdListFieldNumber = 4;
  const ::proto::Uint32Pair& scene_point_id_list(int index) const;
  ::proto::Uint32Pair* mutable_scene_point_id_list(int index);
  ::proto::Uint32Pair* add_scene_point_id_list();
  ::google::protobuf::RepeatedPtrField< ::proto::Uint32Pair >*
      mutable_scene_point_id_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::Uint32Pair >&
      scene_point_id_list() const;

  // uint32 point_id = 2;
  void clear_point_id();
  static const int kPointIdFieldNumber = 2;
  ::google::protobuf::uint32 point_id() const;
  void set_point_id(::google::protobuf::uint32 value);

  // uint32 scene_id = 9;
  void clear_scene_id();
  static const int kSceneIdFieldNumber = 9;
  ::google::protobuf::uint32 scene_id() const;
  void set_scene_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.DungeonEntryInfoReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::Uint32Pair > scene_point_id_list_;
  ::google::protobuf::uint32 point_id_;
  ::google::protobuf::uint32 scene_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DungeonEntryInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DungeonEntryInfo) */ {
 public:
  DungeonEntryInfo();
  virtual ~DungeonEntryInfo();

  DungeonEntryInfo(const DungeonEntryInfo& from);

  inline DungeonEntryInfo& operator=(const DungeonEntryInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DungeonEntryInfo(DungeonEntryInfo&& from) noexcept
    : DungeonEntryInfo() {
    *this = ::std::move(from);
  }

  inline DungeonEntryInfo& operator=(DungeonEntryInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonEntryInfo& default_instance();

  static inline const DungeonEntryInfo* internal_default_instance() {
    return reinterpret_cast<const DungeonEntryInfo*>(
               &_DungeonEntryInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(DungeonEntryInfo* other);
  friend void swap(DungeonEntryInfo& a, DungeonEntryInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DungeonEntryInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  DungeonEntryInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DungeonEntryInfo& from);
  void MergeFrom(const DungeonEntryInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DungeonEntryInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.WeeklyBossResinDiscountInfo weekly_boss_resin_discount_info = 9;
  bool has_weekly_boss_resin_discount_info() const;
  void clear_weekly_boss_resin_discount_info();
  static const int kWeeklyBossResinDiscountInfoFieldNumber = 9;
  const ::proto::WeeklyBossResinDiscountInfo& weekly_boss_resin_discount_info() const;
  ::proto::WeeklyBossResinDiscountInfo* mutable_weekly_boss_resin_discount_info();
  ::proto::WeeklyBossResinDiscountInfo* release_weekly_boss_resin_discount_info();
  void set_allocated_weekly_boss_resin_discount_info(::proto::WeeklyBossResinDiscountInfo* weekly_boss_resin_discount_info);

  // bool is_passed = 4;
  void clear_is_passed();
  static const int kIsPassedFieldNumber = 4;
  bool is_passed() const;
  void set_is_passed(bool value);

  // uint32 dungeon_id = 5;
  void clear_dungeon_id();
  static const int kDungeonIdFieldNumber = 5;
  ::google::protobuf::uint32 dungeon_id() const;
  void set_dungeon_id(::google::protobuf::uint32 value);

  // uint32 end_time = 6;
  void clear_end_time();
  static const int kEndTimeFieldNumber = 6;
  ::google::protobuf::uint32 end_time() const;
  void set_end_time(::google::protobuf::uint32 value);

  // uint32 left_times = 7;
  void clear_left_times();
  static const int kLeftTimesFieldNumber = 7;
  ::google::protobuf::uint32 left_times() const;
  void set_left_times(::google::protobuf::uint32 value);

  // uint32 next_refresh_time = 11;
  void clear_next_refresh_time();
  static const int kNextRefreshTimeFieldNumber = 11;
  ::google::protobuf::uint32 next_refresh_time() const;
  void set_next_refresh_time(::google::protobuf::uint32 value);

  // uint32 boss_chest_num = 12;
  void clear_boss_chest_num();
  static const int kBossChestNumFieldNumber = 12;
  ::google::protobuf::uint32 boss_chest_num() const;
  void set_boss_chest_num(::google::protobuf::uint32 value);

  // uint32 max_boss_chest_num = 13;
  void clear_max_boss_chest_num();
  static const int kMaxBossChestNumFieldNumber = 13;
  ::google::protobuf::uint32 max_boss_chest_num() const;
  void set_max_boss_chest_num(::google::protobuf::uint32 value);

  // uint32 start_time = 15;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 15;
  ::google::protobuf::uint32 start_time() const;
  void set_start_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.DungeonEntryInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::WeeklyBossResinDiscountInfo* weekly_boss_resin_discount_info_;
  bool is_passed_;
  ::google::protobuf::uint32 dungeon_id_;
  ::google::protobuf::uint32 end_time_;
  ::google::protobuf::uint32 left_times_;
  ::google::protobuf::uint32 next_refresh_time_;
  ::google::protobuf::uint32 boss_chest_num_;
  ::google::protobuf::uint32 max_boss_chest_num_;
  ::google::protobuf::uint32 start_time_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DungeonEntryPointInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DungeonEntryPointInfo) */ {
 public:
  DungeonEntryPointInfo();
  virtual ~DungeonEntryPointInfo();

  DungeonEntryPointInfo(const DungeonEntryPointInfo& from);

  inline DungeonEntryPointInfo& operator=(const DungeonEntryPointInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DungeonEntryPointInfo(DungeonEntryPointInfo&& from) noexcept
    : DungeonEntryPointInfo() {
    *this = ::std::move(from);
  }

  inline DungeonEntryPointInfo& operator=(DungeonEntryPointInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonEntryPointInfo& default_instance();

  static inline const DungeonEntryPointInfo* internal_default_instance() {
    return reinterpret_cast<const DungeonEntryPointInfo*>(
               &_DungeonEntryPointInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(DungeonEntryPointInfo* other);
  friend void swap(DungeonEntryPointInfo& a, DungeonEntryPointInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DungeonEntryPointInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  DungeonEntryPointInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DungeonEntryPointInfo& from);
  void MergeFrom(const DungeonEntryPointInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DungeonEntryPointInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.DungeonEntryInfo dungeon_entry_list = 1;
  int dungeon_entry_list_size() const;
  void clear_dungeon_entry_list();
  static const int kDungeonEntryListFieldNumber = 1;
  const ::proto::DungeonEntryInfo& dungeon_entry_list(int index) const;
  ::proto::DungeonEntryInfo* mutable_dungeon_entry_list(int index);
  ::proto::DungeonEntryInfo* add_dungeon_entry_list();
  ::google::protobuf::RepeatedPtrField< ::proto::DungeonEntryInfo >*
      mutable_dungeon_entry_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::DungeonEntryInfo >&
      dungeon_entry_list() const;

  // uint32 scene_id = 12;
  void clear_scene_id();
  static const int kSceneIdFieldNumber = 12;
  ::google::protobuf::uint32 scene_id() const;
  void set_scene_id(::google::protobuf::uint32 value);

  // uint32 point_id = 6;
  void clear_point_id();
  static const int kPointIdFieldNumber = 6;
  ::google::protobuf::uint32 point_id() const;
  void set_point_id(::google::protobuf::uint32 value);

  // uint32 recommend_dungeon_id = 8;
  void clear_recommend_dungeon_id();
  static const int kRecommendDungeonIdFieldNumber = 8;
  ::google::protobuf::uint32 recommend_dungeon_id() const;
  void set_recommend_dungeon_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.DungeonEntryPointInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::DungeonEntryInfo > dungeon_entry_list_;
  ::google::protobuf::uint32 scene_id_;
  ::google::protobuf::uint32 point_id_;
  ::google::protobuf::uint32 recommend_dungeon_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DungeonEntryInfoRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DungeonEntryInfoRsp) */ {
 public:
  DungeonEntryInfoRsp();
  virtual ~DungeonEntryInfoRsp();

  DungeonEntryInfoRsp(const DungeonEntryInfoRsp& from);

  inline DungeonEntryInfoRsp& operator=(const DungeonEntryInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DungeonEntryInfoRsp(DungeonEntryInfoRsp&& from) noexcept
    : DungeonEntryInfoRsp() {
    *this = ::std::move(from);
  }

  inline DungeonEntryInfoRsp& operator=(DungeonEntryInfoRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonEntryInfoRsp& default_instance();

  static inline const DungeonEntryInfoRsp* internal_default_instance() {
    return reinterpret_cast<const DungeonEntryInfoRsp*>(
               &_DungeonEntryInfoRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(DungeonEntryInfoRsp* other);
  friend void swap(DungeonEntryInfoRsp& a, DungeonEntryInfoRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DungeonEntryInfoRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  DungeonEntryInfoRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DungeonEntryInfoRsp& from);
  void MergeFrom(const DungeonEntryInfoRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DungeonEntryInfoRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.DungeonEntryPointInfo dungeon_entry_point_list = 4;
  int dungeon_entry_point_list_size() const;
  void clear_dungeon_entry_point_list();
  static const int kDungeonEntryPointListFieldNumber = 4;
  const ::proto::DungeonEntryPointInfo& dungeon_entry_point_list(int index) const;
  ::proto::DungeonEntryPointInfo* mutable_dungeon_entry_point_list(int index);
  ::proto::DungeonEntryPointInfo* add_dungeon_entry_point_list();
  ::google::protobuf::RepeatedPtrField< ::proto::DungeonEntryPointInfo >*
      mutable_dungeon_entry_point_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::DungeonEntryPointInfo >&
      dungeon_entry_point_list() const;

  // repeated .proto.DungeonEntryInfo dungeon_entry_list = 12;
  int dungeon_entry_list_size() const;
  void clear_dungeon_entry_list();
  static const int kDungeonEntryListFieldNumber = 12;
  const ::proto::DungeonEntryInfo& dungeon_entry_list(int index) const;
  ::proto::DungeonEntryInfo* mutable_dungeon_entry_list(int index);
  ::proto::DungeonEntryInfo* add_dungeon_entry_list();
  ::google::protobuf::RepeatedPtrField< ::proto::DungeonEntryInfo >*
      mutable_dungeon_entry_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::DungeonEntryInfo >&
      dungeon_entry_list() const;

  // uint32 point_id = 15;
  void clear_point_id();
  static const int kPointIdFieldNumber = 15;
  ::google::protobuf::uint32 point_id() const;
  void set_point_id(::google::protobuf::uint32 value);

  // int32 retcode = 11;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 11;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // uint32 recommend_dungeon_id = 14;
  void clear_recommend_dungeon_id();
  static const int kRecommendDungeonIdFieldNumber = 14;
  ::google::protobuf::uint32 recommend_dungeon_id() const;
  void set_recommend_dungeon_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.DungeonEntryInfoRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::DungeonEntryPointInfo > dungeon_entry_point_list_;
  ::google::protobuf::RepeatedPtrField< ::proto::DungeonEntryInfo > dungeon_entry_list_;
  ::google::protobuf::uint32 point_id_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::uint32 recommend_dungeon_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DungeonEnterPosInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DungeonEnterPosInfo) */ {
 public:
  DungeonEnterPosInfo();
  virtual ~DungeonEnterPosInfo();

  DungeonEnterPosInfo(const DungeonEnterPosInfo& from);

  inline DungeonEnterPosInfo& operator=(const DungeonEnterPosInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DungeonEnterPosInfo(DungeonEnterPosInfo&& from) noexcept
    : DungeonEnterPosInfo() {
    *this = ::std::move(from);
  }

  inline DungeonEnterPosInfo& operator=(DungeonEnterPosInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonEnterPosInfo& default_instance();

  static inline const DungeonEnterPosInfo* internal_default_instance() {
    return reinterpret_cast<const DungeonEnterPosInfo*>(
               &_DungeonEnterPosInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(DungeonEnterPosInfo* other);
  friend void swap(DungeonEnterPosInfo& a, DungeonEnterPosInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DungeonEnterPosInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  DungeonEnterPosInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DungeonEnterPosInfo& from);
  void MergeFrom(const DungeonEnterPosInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DungeonEnterPosInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 point_id = 6;
  void clear_point_id();
  static const int kPointIdFieldNumber = 6;
  ::google::protobuf::uint32 point_id() const;
  void set_point_id(::google::protobuf::uint32 value);

  // uint32 quest_id = 13;
  void clear_quest_id();
  static const int kQuestIdFieldNumber = 13;
  ::google::protobuf::uint32 quest_id() const;
  void set_quest_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.DungeonEnterPosInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 point_id_;
  ::google::protobuf::uint32 quest_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerEnterDungeonReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.PlayerEnterDungeonReq) */ {
 public:
  PlayerEnterDungeonReq();
  virtual ~PlayerEnterDungeonReq();

  PlayerEnterDungeonReq(const PlayerEnterDungeonReq& from);

  inline PlayerEnterDungeonReq& operator=(const PlayerEnterDungeonReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerEnterDungeonReq(PlayerEnterDungeonReq&& from) noexcept
    : PlayerEnterDungeonReq() {
    *this = ::std::move(from);
  }

  inline PlayerEnterDungeonReq& operator=(PlayerEnterDungeonReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerEnterDungeonReq& default_instance();

  static inline const PlayerEnterDungeonReq* internal_default_instance() {
    return reinterpret_cast<const PlayerEnterDungeonReq*>(
               &_PlayerEnterDungeonReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(PlayerEnterDungeonReq* other);
  friend void swap(PlayerEnterDungeonReq& a, PlayerEnterDungeonReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerEnterDungeonReq* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerEnterDungeonReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerEnterDungeonReq& from);
  void MergeFrom(const PlayerEnterDungeonReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerEnterDungeonReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.DungeonEnterPosInfo enter_pos_info = 2;
  bool has_enter_pos_info() const;
  void clear_enter_pos_info();
  static const int kEnterPosInfoFieldNumber = 2;
  const ::proto::DungeonEnterPosInfo& enter_pos_info() const;
  ::proto::DungeonEnterPosInfo* mutable_enter_pos_info();
  ::proto::DungeonEnterPosInfo* release_enter_pos_info();
  void set_allocated_enter_pos_info(::proto::DungeonEnterPosInfo* enter_pos_info);

  // uint32 dungeon_id = 7;
  void clear_dungeon_id();
  static const int kDungeonIdFieldNumber = 7;
  ::google::protobuf::uint32 dungeon_id() const;
  void set_dungeon_id(::google::protobuf::uint32 value);

  // uint32 point_id = 13;
  void clear_point_id();
  static const int kPointIdFieldNumber = 13;
  ::google::protobuf::uint32 point_id() const;
  void set_point_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.PlayerEnterDungeonReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::DungeonEnterPosInfo* enter_pos_info_;
  ::google::protobuf::uint32 dungeon_id_;
  ::google::protobuf::uint32 point_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerEnterDungeonRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.PlayerEnterDungeonRsp) */ {
 public:
  PlayerEnterDungeonRsp();
  virtual ~PlayerEnterDungeonRsp();

  PlayerEnterDungeonRsp(const PlayerEnterDungeonRsp& from);

  inline PlayerEnterDungeonRsp& operator=(const PlayerEnterDungeonRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerEnterDungeonRsp(PlayerEnterDungeonRsp&& from) noexcept
    : PlayerEnterDungeonRsp() {
    *this = ::std::move(from);
  }

  inline PlayerEnterDungeonRsp& operator=(PlayerEnterDungeonRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerEnterDungeonRsp& default_instance();

  static inline const PlayerEnterDungeonRsp* internal_default_instance() {
    return reinterpret_cast<const PlayerEnterDungeonRsp*>(
               &_PlayerEnterDungeonRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(PlayerEnterDungeonRsp* other);
  friend void swap(PlayerEnterDungeonRsp& a, PlayerEnterDungeonRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerEnterDungeonRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerEnterDungeonRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerEnterDungeonRsp& from);
  void MergeFrom(const PlayerEnterDungeonRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerEnterDungeonRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 dungeon_id = 2;
  void clear_dungeon_id();
  static const int kDungeonIdFieldNumber = 2;
  ::google::protobuf::uint32 dungeon_id() const;
  void set_dungeon_id(::google::protobuf::uint32 value);

  // int32 retcode = 5;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 5;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // uint32 point_id = 6;
  void clear_point_id();
  static const int kPointIdFieldNumber = 6;
  ::google::protobuf::uint32 point_id() const;
  void set_point_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.PlayerEnterDungeonRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 dungeon_id_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::uint32 point_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerQuitDungeonReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.PlayerQuitDungeonReq) */ {
 public:
  PlayerQuitDungeonReq();
  virtual ~PlayerQuitDungeonReq();

  PlayerQuitDungeonReq(const PlayerQuitDungeonReq& from);

  inline PlayerQuitDungeonReq& operator=(const PlayerQuitDungeonReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerQuitDungeonReq(PlayerQuitDungeonReq&& from) noexcept
    : PlayerQuitDungeonReq() {
    *this = ::std::move(from);
  }

  inline PlayerQuitDungeonReq& operator=(PlayerQuitDungeonReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerQuitDungeonReq& default_instance();

  static inline const PlayerQuitDungeonReq* internal_default_instance() {
    return reinterpret_cast<const PlayerQuitDungeonReq*>(
               &_PlayerQuitDungeonReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(PlayerQuitDungeonReq* other);
  friend void swap(PlayerQuitDungeonReq& a, PlayerQuitDungeonReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerQuitDungeonReq* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerQuitDungeonReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerQuitDungeonReq& from);
  void MergeFrom(const PlayerQuitDungeonReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerQuitDungeonReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 point_id = 7;
  void clear_point_id();
  static const int kPointIdFieldNumber = 7;
  ::google::protobuf::uint32 point_id() const;
  void set_point_id(::google::protobuf::uint32 value);

  // bool is_quit_immediately = 10;
  void clear_is_quit_immediately();
  static const int kIsQuitImmediatelyFieldNumber = 10;
  bool is_quit_immediately() const;
  void set_is_quit_immediately(bool value);

  // @@protoc_insertion_point(class_scope:proto.PlayerQuitDungeonReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 point_id_;
  bool is_quit_immediately_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerQuitDungeonRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.PlayerQuitDungeonRsp) */ {
 public:
  PlayerQuitDungeonRsp();
  virtual ~PlayerQuitDungeonRsp();

  PlayerQuitDungeonRsp(const PlayerQuitDungeonRsp& from);

  inline PlayerQuitDungeonRsp& operator=(const PlayerQuitDungeonRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerQuitDungeonRsp(PlayerQuitDungeonRsp&& from) noexcept
    : PlayerQuitDungeonRsp() {
    *this = ::std::move(from);
  }

  inline PlayerQuitDungeonRsp& operator=(PlayerQuitDungeonRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerQuitDungeonRsp& default_instance();

  static inline const PlayerQuitDungeonRsp* internal_default_instance() {
    return reinterpret_cast<const PlayerQuitDungeonRsp*>(
               &_PlayerQuitDungeonRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(PlayerQuitDungeonRsp* other);
  friend void swap(PlayerQuitDungeonRsp& a, PlayerQuitDungeonRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerQuitDungeonRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerQuitDungeonRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerQuitDungeonRsp& from);
  void MergeFrom(const PlayerQuitDungeonRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerQuitDungeonRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 retcode = 7;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 7;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // uint32 point_id = 11;
  void clear_point_id();
  static const int kPointIdFieldNumber = 11;
  ::google::protobuf::uint32 point_id() const;
  void set_point_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.PlayerQuitDungeonRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::uint32 point_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DungeonWayPointNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DungeonWayPointNotify) */ {
 public:
  DungeonWayPointNotify();
  virtual ~DungeonWayPointNotify();

  DungeonWayPointNotify(const DungeonWayPointNotify& from);

  inline DungeonWayPointNotify& operator=(const DungeonWayPointNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DungeonWayPointNotify(DungeonWayPointNotify&& from) noexcept
    : DungeonWayPointNotify() {
    *this = ::std::move(from);
  }

  inline DungeonWayPointNotify& operator=(DungeonWayPointNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonWayPointNotify& default_instance();

  static inline const DungeonWayPointNotify* internal_default_instance() {
    return reinterpret_cast<const DungeonWayPointNotify*>(
               &_DungeonWayPointNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(DungeonWayPointNotify* other);
  friend void swap(DungeonWayPointNotify& a, DungeonWayPointNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DungeonWayPointNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  DungeonWayPointNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DungeonWayPointNotify& from);
  void MergeFrom(const DungeonWayPointNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DungeonWayPointNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 active_way_point_list = 4;
  int active_way_point_list_size() const;
  void clear_active_way_point_list();
  static const int kActiveWayPointListFieldNumber = 4;
  ::google::protobuf::uint32 active_way_point_list(int index) const;
  void set_active_way_point_list(int index, ::google::protobuf::uint32 value);
  void add_active_way_point_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      active_way_point_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_active_way_point_list();

  // bool is_add = 9;
  void clear_is_add();
  static const int kIsAddFieldNumber = 9;
  bool is_add() const;
  void set_is_add(bool value);

  // @@protoc_insertion_point(class_scope:proto.DungeonWayPointNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > active_way_point_list_;
  mutable int _active_way_point_list_cached_byte_size_;
  bool is_add_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DungeonWayPointActivateReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DungeonWayPointActivateReq) */ {
 public:
  DungeonWayPointActivateReq();
  virtual ~DungeonWayPointActivateReq();

  DungeonWayPointActivateReq(const DungeonWayPointActivateReq& from);

  inline DungeonWayPointActivateReq& operator=(const DungeonWayPointActivateReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DungeonWayPointActivateReq(DungeonWayPointActivateReq&& from) noexcept
    : DungeonWayPointActivateReq() {
    *this = ::std::move(from);
  }

  inline DungeonWayPointActivateReq& operator=(DungeonWayPointActivateReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonWayPointActivateReq& default_instance();

  static inline const DungeonWayPointActivateReq* internal_default_instance() {
    return reinterpret_cast<const DungeonWayPointActivateReq*>(
               &_DungeonWayPointActivateReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(DungeonWayPointActivateReq* other);
  friend void swap(DungeonWayPointActivateReq& a, DungeonWayPointActivateReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DungeonWayPointActivateReq* New() const PROTOBUF_FINAL { return New(NULL); }

  DungeonWayPointActivateReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DungeonWayPointActivateReq& from);
  void MergeFrom(const DungeonWayPointActivateReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DungeonWayPointActivateReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 way_point_id = 3;
  void clear_way_point_id();
  static const int kWayPointIdFieldNumber = 3;
  ::google::protobuf::uint32 way_point_id() const;
  void set_way_point_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.DungeonWayPointActivateReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 way_point_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DungeonWayPointActivateRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DungeonWayPointActivateRsp) */ {
 public:
  DungeonWayPointActivateRsp();
  virtual ~DungeonWayPointActivateRsp();

  DungeonWayPointActivateRsp(const DungeonWayPointActivateRsp& from);

  inline DungeonWayPointActivateRsp& operator=(const DungeonWayPointActivateRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DungeonWayPointActivateRsp(DungeonWayPointActivateRsp&& from) noexcept
    : DungeonWayPointActivateRsp() {
    *this = ::std::move(from);
  }

  inline DungeonWayPointActivateRsp& operator=(DungeonWayPointActivateRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonWayPointActivateRsp& default_instance();

  static inline const DungeonWayPointActivateRsp* internal_default_instance() {
    return reinterpret_cast<const DungeonWayPointActivateRsp*>(
               &_DungeonWayPointActivateRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(DungeonWayPointActivateRsp* other);
  friend void swap(DungeonWayPointActivateRsp& a, DungeonWayPointActivateRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DungeonWayPointActivateRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  DungeonWayPointActivateRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DungeonWayPointActivateRsp& from);
  void MergeFrom(const DungeonWayPointActivateRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DungeonWayPointActivateRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 retcode = 6;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 6;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // uint32 way_point_id = 7;
  void clear_way_point_id();
  static const int kWayPointIdFieldNumber = 7;
  ::google::protobuf::uint32 way_point_id() const;
  void set_way_point_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.DungeonWayPointActivateRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::uint32 way_point_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StrengthenPointData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.StrengthenPointData) */ {
 public:
  StrengthenPointData();
  virtual ~StrengthenPointData();

  StrengthenPointData(const StrengthenPointData& from);

  inline StrengthenPointData& operator=(const StrengthenPointData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StrengthenPointData(StrengthenPointData&& from) noexcept
    : StrengthenPointData() {
    *this = ::std::move(from);
  }

  inline StrengthenPointData& operator=(StrengthenPointData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StrengthenPointData& default_instance();

  static inline const StrengthenPointData* internal_default_instance() {
    return reinterpret_cast<const StrengthenPointData*>(
               &_StrengthenPointData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(StrengthenPointData* other);
  friend void swap(StrengthenPointData& a, StrengthenPointData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StrengthenPointData* New() const PROTOBUF_FINAL { return New(NULL); }

  StrengthenPointData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StrengthenPointData& from);
  void MergeFrom(const StrengthenPointData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StrengthenPointData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 base_point = 10;
  void clear_base_point();
  static const int kBasePointFieldNumber = 10;
  ::google::protobuf::uint32 base_point() const;
  void set_base_point(::google::protobuf::uint32 value);

  // uint32 cur_point = 11;
  void clear_cur_point();
  static const int kCurPointFieldNumber = 11;
  ::google::protobuf::uint32 cur_point() const;
  void set_cur_point(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.StrengthenPointData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 base_point_;
  ::google::protobuf::uint32 cur_point_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DungeonSettleExhibitionInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DungeonSettleExhibitionInfo) */ {
 public:
  DungeonSettleExhibitionInfo();
  virtual ~DungeonSettleExhibitionInfo();

  DungeonSettleExhibitionInfo(const DungeonSettleExhibitionInfo& from);

  inline DungeonSettleExhibitionInfo& operator=(const DungeonSettleExhibitionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DungeonSettleExhibitionInfo(DungeonSettleExhibitionInfo&& from) noexcept
    : DungeonSettleExhibitionInfo() {
    *this = ::std::move(from);
  }

  inline DungeonSettleExhibitionInfo& operator=(DungeonSettleExhibitionInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonSettleExhibitionInfo& default_instance();

  static inline const DungeonSettleExhibitionInfo* internal_default_instance() {
    return reinterpret_cast<const DungeonSettleExhibitionInfo*>(
               &_DungeonSettleExhibitionInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(DungeonSettleExhibitionInfo* other);
  friend void swap(DungeonSettleExhibitionInfo& a, DungeonSettleExhibitionInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DungeonSettleExhibitionInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  DungeonSettleExhibitionInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DungeonSettleExhibitionInfo& from);
  void MergeFrom(const DungeonSettleExhibitionInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DungeonSettleExhibitionInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.ExhibitionDisplayInfo card_list = 13;
  int card_list_size() const;
  void clear_card_list();
  static const int kCardListFieldNumber = 13;
  const ::proto::ExhibitionDisplayInfo& card_list(int index) const;
  ::proto::ExhibitionDisplayInfo* mutable_card_list(int index);
  ::proto::ExhibitionDisplayInfo* add_card_list();
  ::google::protobuf::RepeatedPtrField< ::proto::ExhibitionDisplayInfo >*
      mutable_card_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::ExhibitionDisplayInfo >&
      card_list() const;

  // .proto.OnlinePlayerInfo player_info = 3;
  bool has_player_info() const;
  void clear_player_info();
  static const int kPlayerInfoFieldNumber = 3;
  const ::proto::OnlinePlayerInfo& player_info() const;
  ::proto::OnlinePlayerInfo* mutable_player_info();
  ::proto::OnlinePlayerInfo* release_player_info();
  void set_allocated_player_info(::proto::OnlinePlayerInfo* player_info);

  // @@protoc_insertion_point(class_scope:proto.DungeonSettleExhibitionInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::ExhibitionDisplayInfo > card_list_;
  ::proto::OnlinePlayerInfo* player_info_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CrystalLinkDungeonSettleInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.CrystalLinkDungeonSettleInfo) */ {
 public:
  CrystalLinkDungeonSettleInfo();
  virtual ~CrystalLinkDungeonSettleInfo();

  CrystalLinkDungeonSettleInfo(const CrystalLinkDungeonSettleInfo& from);

  inline CrystalLinkDungeonSettleInfo& operator=(const CrystalLinkDungeonSettleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CrystalLinkDungeonSettleInfo(CrystalLinkDungeonSettleInfo&& from) noexcept
    : CrystalLinkDungeonSettleInfo() {
    *this = ::std::move(from);
  }

  inline CrystalLinkDungeonSettleInfo& operator=(CrystalLinkDungeonSettleInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CrystalLinkDungeonSettleInfo& default_instance();

  static inline const CrystalLinkDungeonSettleInfo* internal_default_instance() {
    return reinterpret_cast<const CrystalLinkDungeonSettleInfo*>(
               &_CrystalLinkDungeonSettleInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(CrystalLinkDungeonSettleInfo* other);
  friend void swap(CrystalLinkDungeonSettleInfo& a, CrystalLinkDungeonSettleInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CrystalLinkDungeonSettleInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  CrystalLinkDungeonSettleInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CrystalLinkDungeonSettleInfo& from);
  void MergeFrom(const CrystalLinkDungeonSettleInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CrystalLinkDungeonSettleInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 kill_elite_monster_num = 2;
  void clear_kill_elite_monster_num();
  static const int kKillEliteMonsterNumFieldNumber = 2;
  ::google::protobuf::uint32 kill_elite_monster_num() const;
  void set_kill_elite_monster_num(::google::protobuf::uint32 value);

  // uint32 kill_normal_mosnter_num = 3;
  void clear_kill_normal_mosnter_num();
  static const int kKillNormalMosnterNumFieldNumber = 3;
  ::google::protobuf::uint32 kill_normal_mosnter_num() const;
  void set_kill_normal_mosnter_num(::google::protobuf::uint32 value);

  // uint32 final_score = 6;
  void clear_final_score();
  static const int kFinalScoreFieldNumber = 6;
  ::google::protobuf::uint32 final_score() const;
  void set_final_score(::google::protobuf::uint32 value);

  // uint32 difficulty_id = 9;
  void clear_difficulty_id();
  static const int kDifficultyIdFieldNumber = 9;
  ::google::protobuf::uint32 difficulty_id() const;
  void set_difficulty_id(::google::protobuf::uint32 value);

  // uint32 level_id = 12;
  void clear_level_id();
  static const int kLevelIdFieldNumber = 12;
  ::google::protobuf::uint32 level_id() const;
  void set_level_id(::google::protobuf::uint32 value);

  // bool is_new_record = 13;
  void clear_is_new_record();
  static const int kIsNewRecordFieldNumber = 13;
  bool is_new_record() const;
  void set_is_new_record(bool value);

  // @@protoc_insertion_point(class_scope:proto.CrystalLinkDungeonSettleInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 kill_elite_monster_num_;
  ::google::protobuf::uint32 kill_normal_mosnter_num_;
  ::google::protobuf::uint32 final_score_;
  ::google::protobuf::uint32 difficulty_id_;
  ::google::protobuf::uint32 level_id_;
  bool is_new_record_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SummerTimeV2DungeonSettleInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.SummerTimeV2DungeonSettleInfo) */ {
 public:
  SummerTimeV2DungeonSettleInfo();
  virtual ~SummerTimeV2DungeonSettleInfo();

  SummerTimeV2DungeonSettleInfo(const SummerTimeV2DungeonSettleInfo& from);

  inline SummerTimeV2DungeonSettleInfo& operator=(const SummerTimeV2DungeonSettleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SummerTimeV2DungeonSettleInfo(SummerTimeV2DungeonSettleInfo&& from) noexcept
    : SummerTimeV2DungeonSettleInfo() {
    *this = ::std::move(from);
  }

  inline SummerTimeV2DungeonSettleInfo& operator=(SummerTimeV2DungeonSettleInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SummerTimeV2DungeonSettleInfo& default_instance();

  static inline const SummerTimeV2DungeonSettleInfo* internal_default_instance() {
    return reinterpret_cast<const SummerTimeV2DungeonSettleInfo*>(
               &_SummerTimeV2DungeonSettleInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(SummerTimeV2DungeonSettleInfo* other);
  friend void swap(SummerTimeV2DungeonSettleInfo& a, SummerTimeV2DungeonSettleInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SummerTimeV2DungeonSettleInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  SummerTimeV2DungeonSettleInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SummerTimeV2DungeonSettleInfo& from);
  void MergeFrom(const SummerTimeV2DungeonSettleInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SummerTimeV2DungeonSettleInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 taken_reward_count = 2;
  void clear_taken_reward_count();
  static const int kTakenRewardCountFieldNumber = 2;
  ::google::protobuf::uint32 taken_reward_count() const;
  void set_taken_reward_count(::google::protobuf::uint32 value);

  // bool is_success = 5;
  void clear_is_success();
  static const int kIsSuccessFieldNumber = 5;
  bool is_success() const;
  void set_is_success(bool value);

  // uint32 cur_dungeon_reward_limit = 11;
  void clear_cur_dungeon_reward_limit();
  static const int kCurDungeonRewardLimitFieldNumber = 11;
  ::google::protobuf::uint32 cur_dungeon_reward_limit() const;
  void set_cur_dungeon_reward_limit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.SummerTimeV2DungeonSettleInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 taken_reward_count_;
  bool is_success_;
  ::google::protobuf::uint32 cur_dungeon_reward_limit_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InstableSprayDungeonSettleInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.InstableSprayDungeonSettleInfo) */ {
 public:
  InstableSprayDungeonSettleInfo();
  virtual ~InstableSprayDungeonSettleInfo();

  InstableSprayDungeonSettleInfo(const InstableSprayDungeonSettleInfo& from);

  inline InstableSprayDungeonSettleInfo& operator=(const InstableSprayDungeonSettleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InstableSprayDungeonSettleInfo(InstableSprayDungeonSettleInfo&& from) noexcept
    : InstableSprayDungeonSettleInfo() {
    *this = ::std::move(from);
  }

  inline InstableSprayDungeonSettleInfo& operator=(InstableSprayDungeonSettleInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InstableSprayDungeonSettleInfo& default_instance();

  static inline const InstableSprayDungeonSettleInfo* internal_default_instance() {
    return reinterpret_cast<const InstableSprayDungeonSettleInfo*>(
               &_InstableSprayDungeonSettleInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(InstableSprayDungeonSettleInfo* other);
  friend void swap(InstableSprayDungeonSettleInfo& a, InstableSprayDungeonSettleInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InstableSprayDungeonSettleInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  InstableSprayDungeonSettleInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InstableSprayDungeonSettleInfo& from);
  void MergeFrom(const InstableSprayDungeonSettleInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InstableSprayDungeonSettleInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 score_list = 4;
  int score_list_size() const;
  void clear_score_list();
  static const int kScoreListFieldNumber = 4;
  ::google::protobuf::uint32 score_list(int index) const;
  void set_score_list(int index, ::google::protobuf::uint32 value);
  void add_score_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      score_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_score_list();

  // uint32 stage_id = 1;
  void clear_stage_id();
  static const int kStageIdFieldNumber = 1;
  ::google::protobuf::uint32 stage_id() const;
  void set_stage_id(::google::protobuf::uint32 value);

  // uint32 difficulty = 5;
  void clear_difficulty();
  static const int kDifficultyFieldNumber = 5;
  ::google::protobuf::uint32 difficulty() const;
  void set_difficulty(::google::protobuf::uint32 value);

  // bool is_new_record = 13;
  void clear_is_new_record();
  static const int kIsNewRecordFieldNumber = 13;
  bool is_new_record() const;
  void set_is_new_record(bool value);

  // @@protoc_insertion_point(class_scope:proto.InstableSprayDungeonSettleInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > score_list_;
  mutable int _score_list_cached_byte_size_;
  ::google::protobuf::uint32 stage_id_;
  ::google::protobuf::uint32 difficulty_;
  bool is_new_record_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WindFieldDungeonSettleInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.WindFieldDungeonSettleInfo) */ {
 public:
  WindFieldDungeonSettleInfo();
  virtual ~WindFieldDungeonSettleInfo();

  WindFieldDungeonSettleInfo(const WindFieldDungeonSettleInfo& from);

  inline WindFieldDungeonSettleInfo& operator=(const WindFieldDungeonSettleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WindFieldDungeonSettleInfo(WindFieldDungeonSettleInfo&& from) noexcept
    : WindFieldDungeonSettleInfo() {
    *this = ::std::move(from);
  }

  inline WindFieldDungeonSettleInfo& operator=(WindFieldDungeonSettleInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WindFieldDungeonSettleInfo& default_instance();

  static inline const WindFieldDungeonSettleInfo* internal_default_instance() {
    return reinterpret_cast<const WindFieldDungeonSettleInfo*>(
               &_WindFieldDungeonSettleInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(WindFieldDungeonSettleInfo* other);
  friend void swap(WindFieldDungeonSettleInfo& a, WindFieldDungeonSettleInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WindFieldDungeonSettleInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  WindFieldDungeonSettleInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WindFieldDungeonSettleInfo& from);
  void MergeFrom(const WindFieldDungeonSettleInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WindFieldDungeonSettleInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 before_watcher_id_list = 7;
  int before_watcher_id_list_size() const;
  void clear_before_watcher_id_list();
  static const int kBeforeWatcherIdListFieldNumber = 7;
  ::google::protobuf::uint32 before_watcher_id_list(int index) const;
  void set_before_watcher_id_list(int index, ::google::protobuf::uint32 value);
  void add_before_watcher_id_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      before_watcher_id_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_before_watcher_id_list();

  // repeated uint32 after_watcher_id_list = 11;
  int after_watcher_id_list_size() const;
  void clear_after_watcher_id_list();
  static const int kAfterWatcherIdListFieldNumber = 11;
  ::google::protobuf::uint32 after_watcher_id_list(int index) const;
  void set_after_watcher_id_list(int index, ::google::protobuf::uint32 value);
  void add_after_watcher_id_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      after_watcher_id_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_after_watcher_id_list();

  // .proto.WindFieldDungeonFailReason fail_reason = 2;
  void clear_fail_reason();
  static const int kFailReasonFieldNumber = 2;
  ::proto::WindFieldDungeonFailReason fail_reason() const;
  void set_fail_reason(::proto::WindFieldDungeonFailReason value);

  // @@protoc_insertion_point(class_scope:proto.WindFieldDungeonSettleInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > before_watcher_id_list_;
  mutable int _before_watcher_id_list_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > after_watcher_id_list_;
  mutable int _after_watcher_id_list_cached_byte_size_;
  int fail_reason_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EffigyChallengeV2SettleInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.EffigyChallengeV2SettleInfo) */ {
 public:
  EffigyChallengeV2SettleInfo();
  virtual ~EffigyChallengeV2SettleInfo();

  EffigyChallengeV2SettleInfo(const EffigyChallengeV2SettleInfo& from);

  inline EffigyChallengeV2SettleInfo& operator=(const EffigyChallengeV2SettleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EffigyChallengeV2SettleInfo(EffigyChallengeV2SettleInfo&& from) noexcept
    : EffigyChallengeV2SettleInfo() {
    *this = ::std::move(from);
  }

  inline EffigyChallengeV2SettleInfo& operator=(EffigyChallengeV2SettleInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EffigyChallengeV2SettleInfo& default_instance();

  static inline const EffigyChallengeV2SettleInfo* internal_default_instance() {
    return reinterpret_cast<const EffigyChallengeV2SettleInfo*>(
               &_EffigyChallengeV2SettleInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(EffigyChallengeV2SettleInfo* other);
  friend void swap(EffigyChallengeV2SettleInfo& a, EffigyChallengeV2SettleInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EffigyChallengeV2SettleInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  EffigyChallengeV2SettleInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EffigyChallengeV2SettleInfo& from);
  void MergeFrom(const EffigyChallengeV2SettleInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EffigyChallengeV2SettleInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 create_dungeon_player_uid = 4;
  void clear_create_dungeon_player_uid();
  static const int kCreateDungeonPlayerUidFieldNumber = 4;
  ::google::protobuf::uint32 create_dungeon_player_uid() const;
  void set_create_dungeon_player_uid(::google::protobuf::uint32 value);

  // bool is_challenge_highest_difficulty = 7;
  void clear_is_challenge_highest_difficulty();
  static const int kIsChallengeHighestDifficultyFieldNumber = 7;
  bool is_challenge_highest_difficulty() const;
  void set_is_challenge_highest_difficulty(bool value);

  // bool is_new_record_time = 1;
  void clear_is_new_record_time();
  static const int kIsNewRecordTimeFieldNumber = 1;
  bool is_new_record_time() const;
  void set_is_new_record_time(bool value);

  // uint32 first_time_finish_difficulty = 5;
  void clear_first_time_finish_difficulty();
  static const int kFirstTimeFinishDifficultyFieldNumber = 5;
  ::google::protobuf::uint32 first_time_finish_difficulty() const;
  void set_first_time_finish_difficulty(::google::protobuf::uint32 value);

  // uint32 challenge_mode_difficulty = 6;
  void clear_challenge_mode_difficulty();
  static const int kChallengeModeDifficultyFieldNumber = 6;
  ::google::protobuf::uint32 challenge_mode_difficulty() const;
  void set_challenge_mode_difficulty(::google::protobuf::uint32 value);

  // uint32 record_time = 12;
  void clear_record_time();
  static const int kRecordTimeFieldNumber = 12;
  ::google::protobuf::uint32 record_time() const;
  void set_record_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.EffigyChallengeV2SettleInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 create_dungeon_player_uid_;
  bool is_challenge_highest_difficulty_;
  bool is_new_record_time_;
  ::google::protobuf::uint32 first_time_finish_difficulty_;
  ::google::protobuf::uint32 challenge_mode_difficulty_;
  ::google::protobuf::uint32 record_time_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TeamChainSettleInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.TeamChainSettleInfo) */ {
 public:
  TeamChainSettleInfo();
  virtual ~TeamChainSettleInfo();

  TeamChainSettleInfo(const TeamChainSettleInfo& from);

  inline TeamChainSettleInfo& operator=(const TeamChainSettleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamChainSettleInfo(TeamChainSettleInfo&& from) noexcept
    : TeamChainSettleInfo() {
    *this = ::std::move(from);
  }

  inline TeamChainSettleInfo& operator=(TeamChainSettleInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamChainSettleInfo& default_instance();

  static inline const TeamChainSettleInfo* internal_default_instance() {
    return reinterpret_cast<const TeamChainSettleInfo*>(
               &_TeamChainSettleInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(TeamChainSettleInfo* other);
  friend void swap(TeamChainSettleInfo& a, TeamChainSettleInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamChainSettleInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  TeamChainSettleInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TeamChainSettleInfo& from);
  void MergeFrom(const TeamChainSettleInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TeamChainSettleInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 score_list = 9;
  int score_list_size() const;
  void clear_score_list();
  static const int kScoreListFieldNumber = 9;
  ::google::protobuf::uint32 score_list(int index) const;
  void set_score_list(int index, ::google::protobuf::uint32 value);
  void add_score_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      score_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_score_list();

  // uint32 total_score = 1;
  void clear_total_score();
  static const int kTotalScoreFieldNumber = 1;
  ::google::protobuf::uint32 total_score() const;
  void set_total_score(::google::protobuf::uint32 value);

  // bool is_new_record = 4;
  void clear_is_new_record();
  static const int kIsNewRecordFieldNumber = 4;
  bool is_new_record() const;
  void set_is_new_record(bool value);

  // uint32 stage_id = 12;
  void clear_stage_id();
  static const int kStageIdFieldNumber = 12;
  ::google::protobuf::uint32 stage_id() const;
  void set_stage_id(::google::protobuf::uint32 value);

  // uint32 difficulty = 15;
  void clear_difficulty();
  static const int kDifficultyFieldNumber = 15;
  ::google::protobuf::uint32 difficulty() const;
  void set_difficulty(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.TeamChainSettleInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > score_list_;
  mutable int _score_list_cached_byte_size_;
  ::google::protobuf::uint32 total_score_;
  bool is_new_record_;
  ::google::protobuf::uint32 stage_id_;
  ::google::protobuf::uint32 difficulty_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------


// -------------------------------------------------------------------

class DungeonSettleNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DungeonSettleNotify) */ {
 public:
  DungeonSettleNotify();
  virtual ~DungeonSettleNotify();

  DungeonSettleNotify(const DungeonSettleNotify& from);

  inline DungeonSettleNotify& operator=(const DungeonSettleNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DungeonSettleNotify(DungeonSettleNotify&& from) noexcept
    : DungeonSettleNotify() {
    *this = ::std::move(from);
  }

  inline DungeonSettleNotify& operator=(DungeonSettleNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonSettleNotify& default_instance();

  enum DetailCase {
    kTowerLevelEndNotify = 351,
    kTrialAvatarFirstPassDungeonNotify = 635,
    kChannellerSlabLoopDungeonResultInfo = 686,
    kEffigyChallengeDungeonResultInfo = 328,
    kRoguelikeDungeonSettleInfo = 1482,
    kCrystalLinkSettleInfo = 112,
    kSummerTimeV2DungeonSettleInfo = 1882,
    kInstableSpraySettleInfo = 193,
    kWindFieldDungeonSettleInfo = 1825,
    kEffigyChallengeV2SettleInfo = 1802,
    kTeamChainSettleInfo = 324,
    DETAIL_NOT_SET = 0,
  };

  static inline const DungeonSettleNotify* internal_default_instance() {
    return reinterpret_cast<const DungeonSettleNotify*>(
               &_DungeonSettleNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(DungeonSettleNotify* other);
  friend void swap(DungeonSettleNotify& a, DungeonSettleNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DungeonSettleNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  DungeonSettleNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DungeonSettleNotify& from);
  void MergeFrom(const DungeonSettleNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DungeonSettleNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<uint32, .proto.ParamList> settle_show = 5;
  int settle_show_size() const;
  void clear_settle_show();
  static const int kSettleShowFieldNumber = 5;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ParamList >&
      settle_show() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ParamList >*
      mutable_settle_show();

  // repeated .proto.DungeonSettleExhibitionInfo exhibition_info_list = 8;
  int exhibition_info_list_size() const;
  void clear_exhibition_info_list();
  static const int kExhibitionInfoListFieldNumber = 8;
  const ::proto::DungeonSettleExhibitionInfo& exhibition_info_list(int index) const;
  ::proto::DungeonSettleExhibitionInfo* mutable_exhibition_info_list(int index);
  ::proto::DungeonSettleExhibitionInfo* add_exhibition_info_list();
  ::google::protobuf::RepeatedPtrField< ::proto::DungeonSettleExhibitionInfo >*
      mutable_exhibition_info_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::DungeonSettleExhibitionInfo >&
      exhibition_info_list() const;

  // repeated uint32 fail_cond_list = 11;
  int fail_cond_list_size() const;
  void clear_fail_cond_list();
  static const int kFailCondListFieldNumber = 11;
  ::google::protobuf::uint32 fail_cond_list(int index) const;
  void set_fail_cond_list(int index, ::google::protobuf::uint32 value);
  void add_fail_cond_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      fail_cond_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_fail_cond_list();

  // map<uint32, .proto.StrengthenPointData> strengthen_point_data_map = 14;
  int strengthen_point_data_map_size() const;
  void clear_strengthen_point_data_map();
  static const int kStrengthenPointDataMapFieldNumber = 14;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::StrengthenPointData >&
      strengthen_point_data_map() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::StrengthenPointData >*
      mutable_strengthen_point_data_map();

  // uint32 use_time = 1;
  void clear_use_time();
  static const int kUseTimeFieldNumber = 1;
  ::google::protobuf::uint32 use_time() const;
  void set_use_time(::google::protobuf::uint32 value);

  // uint32 close_time = 4;
  void clear_close_time();
  static const int kCloseTimeFieldNumber = 4;
  ::google::protobuf::uint32 close_time() const;
  void set_close_time(::google::protobuf::uint32 value);

  // bool is_success = 7;
  void clear_is_success();
  static const int kIsSuccessFieldNumber = 7;
  bool is_success() const;
  void set_is_success(bool value);

  // uint32 result = 10;
  void clear_result();
  static const int kResultFieldNumber = 10;
  ::google::protobuf::uint32 result() const;
  void set_result(::google::protobuf::uint32 value);

  // uint32 create_player_uid = 12;
  void clear_create_player_uid();
  static const int kCreatePlayerUidFieldNumber = 12;
  ::google::protobuf::uint32 create_player_uid() const;
  void set_create_player_uid(::google::protobuf::uint32 value);

  // uint32 dungeon_id = 13;
  void clear_dungeon_id();
  static const int kDungeonIdFieldNumber = 13;
  ::google::protobuf::uint32 dungeon_id() const;
  void set_dungeon_id(::google::protobuf::uint32 value);

  // .proto.TowerLevelEndNotify tower_level_end_notify = 351;
  bool has_tower_level_end_notify() const;
  void clear_tower_level_end_notify();
  static const int kTowerLevelEndNotifyFieldNumber = 351;
  const ::proto::TowerLevelEndNotify& tower_level_end_notify() const;
  ::proto::TowerLevelEndNotify* mutable_tower_level_end_notify();
  ::proto::TowerLevelEndNotify* release_tower_level_end_notify();
  void set_allocated_tower_level_end_notify(::proto::TowerLevelEndNotify* tower_level_end_notify);

  // .proto.TrialAvatarFirstPassDungeonNotify trial_avatar_first_pass_dungeon_notify = 635;
  bool has_trial_avatar_first_pass_dungeon_notify() const;
  void clear_trial_avatar_first_pass_dungeon_notify();
  static const int kTrialAvatarFirstPassDungeonNotifyFieldNumber = 635;
  const ::proto::TrialAvatarFirstPassDungeonNotify& trial_avatar_first_pass_dungeon_notify() const;
  ::proto::TrialAvatarFirstPassDungeonNotify* mutable_trial_avatar_first_pass_dungeon_notify();
  ::proto::TrialAvatarFirstPassDungeonNotify* release_trial_avatar_first_pass_dungeon_notify();
  void set_allocated_trial_avatar_first_pass_dungeon_notify(::proto::TrialAvatarFirstPassDungeonNotify* trial_avatar_first_pass_dungeon_notify);

  // .proto.ChannellerSlabLoopDungeonResultInfo channeller_slab_loop_dungeon_result_info = 686;
  bool has_channeller_slab_loop_dungeon_result_info() const;
  void clear_channeller_slab_loop_dungeon_result_info();
  static const int kChannellerSlabLoopDungeonResultInfoFieldNumber = 686;
  const ::proto::ChannellerSlabLoopDungeonResultInfo& channeller_slab_loop_dungeon_result_info() const;
  ::proto::ChannellerSlabLoopDungeonResultInfo* mutable_channeller_slab_loop_dungeon_result_info();
  ::proto::ChannellerSlabLoopDungeonResultInfo* release_channeller_slab_loop_dungeon_result_info();
  void set_allocated_channeller_slab_loop_dungeon_result_info(::proto::ChannellerSlabLoopDungeonResultInfo* channeller_slab_loop_dungeon_result_info);

  // .proto.EffigyChallengeDungeonResultInfo effigy_challenge_dungeon_result_info = 328;
  bool has_effigy_challenge_dungeon_result_info() const;
  void clear_effigy_challenge_dungeon_result_info();
  static const int kEffigyChallengeDungeonResultInfoFieldNumber = 328;
  const ::proto::EffigyChallengeDungeonResultInfo& effigy_challenge_dungeon_result_info() const;
  ::proto::EffigyChallengeDungeonResultInfo* mutable_effigy_challenge_dungeon_result_info();
  ::proto::EffigyChallengeDungeonResultInfo* release_effigy_challenge_dungeon_result_info();
  void set_allocated_effigy_challenge_dungeon_result_info(::proto::EffigyChallengeDungeonResultInfo* effigy_challenge_dungeon_result_info);

  // .proto.RoguelikeDungeonSettleInfo roguelike_dungeon_settle_info = 1482;
  bool has_roguelike_dungeon_settle_info() const;
  void clear_roguelike_dungeon_settle_info();
  static const int kRoguelikeDungeonSettleInfoFieldNumber = 1482;
  const ::proto::RoguelikeDungeonSettleInfo& roguelike_dungeon_settle_info() const;
  ::proto::RoguelikeDungeonSettleInfo* mutable_roguelike_dungeon_settle_info();
  ::proto::RoguelikeDungeonSettleInfo* release_roguelike_dungeon_settle_info();
  void set_allocated_roguelike_dungeon_settle_info(::proto::RoguelikeDungeonSettleInfo* roguelike_dungeon_settle_info);

  // .proto.CrystalLinkDungeonSettleInfo crystal_link_settle_info = 112;
  bool has_crystal_link_settle_info() const;
  void clear_crystal_link_settle_info();
  static const int kCrystalLinkSettleInfoFieldNumber = 112;
  const ::proto::CrystalLinkDungeonSettleInfo& crystal_link_settle_info() const;
  ::proto::CrystalLinkDungeonSettleInfo* mutable_crystal_link_settle_info();
  ::proto::CrystalLinkDungeonSettleInfo* release_crystal_link_settle_info();
  void set_allocated_crystal_link_settle_info(::proto::CrystalLinkDungeonSettleInfo* crystal_link_settle_info);

  // .proto.SummerTimeV2DungeonSettleInfo summer_time_v2_dungeon_settle_info = 1882;
  bool has_summer_time_v2_dungeon_settle_info() const;
  void clear_summer_time_v2_dungeon_settle_info();
  static const int kSummerTimeV2DungeonSettleInfoFieldNumber = 1882;
  const ::proto::SummerTimeV2DungeonSettleInfo& summer_time_v2_dungeon_settle_info() const;
  ::proto::SummerTimeV2DungeonSettleInfo* mutable_summer_time_v2_dungeon_settle_info();
  ::proto::SummerTimeV2DungeonSettleInfo* release_summer_time_v2_dungeon_settle_info();
  void set_allocated_summer_time_v2_dungeon_settle_info(::proto::SummerTimeV2DungeonSettleInfo* summer_time_v2_dungeon_settle_info);

  // .proto.InstableSprayDungeonSettleInfo instable_spray_settle_info = 193;
  bool has_instable_spray_settle_info() const;
  void clear_instable_spray_settle_info();
  static const int kInstableSpraySettleInfoFieldNumber = 193;
  const ::proto::InstableSprayDungeonSettleInfo& instable_spray_settle_info() const;
  ::proto::InstableSprayDungeonSettleInfo* mutable_instable_spray_settle_info();
  ::proto::InstableSprayDungeonSettleInfo* release_instable_spray_settle_info();
  void set_allocated_instable_spray_settle_info(::proto::InstableSprayDungeonSettleInfo* instable_spray_settle_info);

  // .proto.WindFieldDungeonSettleInfo wind_field_dungeon_settle_info = 1825;
  bool has_wind_field_dungeon_settle_info() const;
  void clear_wind_field_dungeon_settle_info();
  static const int kWindFieldDungeonSettleInfoFieldNumber = 1825;
  const ::proto::WindFieldDungeonSettleInfo& wind_field_dungeon_settle_info() const;
  ::proto::WindFieldDungeonSettleInfo* mutable_wind_field_dungeon_settle_info();
  ::proto::WindFieldDungeonSettleInfo* release_wind_field_dungeon_settle_info();
  void set_allocated_wind_field_dungeon_settle_info(::proto::WindFieldDungeonSettleInfo* wind_field_dungeon_settle_info);

  // .proto.EffigyChallengeV2SettleInfo effigy_challenge_v2_settle_info = 1802;
  bool has_effigy_challenge_v2_settle_info() const;
  void clear_effigy_challenge_v2_settle_info();
  static const int kEffigyChallengeV2SettleInfoFieldNumber = 1802;
  const ::proto::EffigyChallengeV2SettleInfo& effigy_challenge_v2_settle_info() const;
  ::proto::EffigyChallengeV2SettleInfo* mutable_effigy_challenge_v2_settle_info();
  ::proto::EffigyChallengeV2SettleInfo* release_effigy_challenge_v2_settle_info();
  void set_allocated_effigy_challenge_v2_settle_info(::proto::EffigyChallengeV2SettleInfo* effigy_challenge_v2_settle_info);

  // .proto.TeamChainSettleInfo team_chain_settle_info = 324;
  bool has_team_chain_settle_info() const;
  void clear_team_chain_settle_info();
  static const int kTeamChainSettleInfoFieldNumber = 324;
  const ::proto::TeamChainSettleInfo& team_chain_settle_info() const;
  ::proto::TeamChainSettleInfo* mutable_team_chain_settle_info();
  ::proto::TeamChainSettleInfo* release_team_chain_settle_info();
  void set_allocated_team_chain_settle_info(::proto::TeamChainSettleInfo* team_chain_settle_info);

  DetailCase detail_case() const;
  // @@protoc_insertion_point(class_scope:proto.DungeonSettleNotify)
 private:
  void set_has_tower_level_end_notify();
  void set_has_trial_avatar_first_pass_dungeon_notify();
  void set_has_channeller_slab_loop_dungeon_result_info();
  void set_has_effigy_challenge_dungeon_result_info();
  void set_has_roguelike_dungeon_settle_info();
  void set_has_crystal_link_settle_info();
  void set_has_summer_time_v2_dungeon_settle_info();
  void set_has_instable_spray_settle_info();
  void set_has_wind_field_dungeon_settle_info();
  void set_has_effigy_challenge_v2_settle_info();
  void set_has_team_chain_settle_info();

  inline bool has_detail() const;
  void clear_detail();
  inline void clear_has_detail();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  public:
  class DungeonSettleNotify_SettleShowEntry : public ::google::protobuf::internal::MapEntry<DungeonSettleNotify_SettleShowEntry, 
      ::google::protobuf::uint32, ::proto::ParamList,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<DungeonSettleNotify_SettleShowEntry, 
      ::google::protobuf::uint32, ::proto::ParamList,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > SuperType;
    DungeonSettleNotify_SettleShowEntry();
    DungeonSettleNotify_SettleShowEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const DungeonSettleNotify_SettleShowEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_DungeonSettleNotify_SettleShowEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  private:
  ::google::protobuf::internal::MapField<
      DungeonSettleNotify_SettleShowEntry,
      ::google::protobuf::uint32, ::proto::ParamList,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > settle_show_;
  private:
  ::google::protobuf::RepeatedPtrField< ::proto::DungeonSettleExhibitionInfo > exhibition_info_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > fail_cond_list_;
  mutable int _fail_cond_list_cached_byte_size_;
  public:
  class DungeonSettleNotify_StrengthenPointDataMapEntry : public ::google::protobuf::internal::MapEntry<DungeonSettleNotify_StrengthenPointDataMapEntry, 
      ::google::protobuf::uint32, ::proto::StrengthenPointData,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<DungeonSettleNotify_StrengthenPointDataMapEntry, 
      ::google::protobuf::uint32, ::proto::StrengthenPointData,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > SuperType;
    DungeonSettleNotify_StrengthenPointDataMapEntry();
    DungeonSettleNotify_StrengthenPointDataMapEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const DungeonSettleNotify_StrengthenPointDataMapEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_DungeonSettleNotify_StrengthenPointDataMapEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  private:
  ::google::protobuf::internal::MapField<
      DungeonSettleNotify_StrengthenPointDataMapEntry,
      ::google::protobuf::uint32, ::proto::StrengthenPointData,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > strengthen_point_data_map_;
  private:
  ::google::protobuf::uint32 use_time_;
  ::google::protobuf::uint32 close_time_;
  bool is_success_;
  ::google::protobuf::uint32 result_;
  ::google::protobuf::uint32 create_player_uid_;
  ::google::protobuf::uint32 dungeon_id_;
  union DetailUnion {
    DetailUnion() {}
    ::proto::TowerLevelEndNotify* tower_level_end_notify_;
    ::proto::TrialAvatarFirstPassDungeonNotify* trial_avatar_first_pass_dungeon_notify_;
    ::proto::ChannellerSlabLoopDungeonResultInfo* channeller_slab_loop_dungeon_result_info_;
    ::proto::EffigyChallengeDungeonResultInfo* effigy_challenge_dungeon_result_info_;
    ::proto::RoguelikeDungeonSettleInfo* roguelike_dungeon_settle_info_;
    ::proto::CrystalLinkDungeonSettleInfo* crystal_link_settle_info_;
    ::proto::SummerTimeV2DungeonSettleInfo* summer_time_v2_dungeon_settle_info_;
    ::proto::InstableSprayDungeonSettleInfo* instable_spray_settle_info_;
    ::proto::WindFieldDungeonSettleInfo* wind_field_dungeon_settle_info_;
    ::proto::EffigyChallengeV2SettleInfo* effigy_challenge_v2_settle_info_;
    ::proto::TeamChainSettleInfo* team_chain_settle_info_;
  } detail_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------

class DungeonPlayerDieNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DungeonPlayerDieNotify) */ {
 public:
  DungeonPlayerDieNotify();
  virtual ~DungeonPlayerDieNotify();

  DungeonPlayerDieNotify(const DungeonPlayerDieNotify& from);

  inline DungeonPlayerDieNotify& operator=(const DungeonPlayerDieNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DungeonPlayerDieNotify(DungeonPlayerDieNotify&& from) noexcept
    : DungeonPlayerDieNotify() {
    *this = ::std::move(from);
  }

  inline DungeonPlayerDieNotify& operator=(DungeonPlayerDieNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonPlayerDieNotify& default_instance();

  enum EntityCase {
    kMonsterId = 4,
    kGadgetId = 8,
    ENTITY_NOT_SET = 0,
  };

  static inline const DungeonPlayerDieNotify* internal_default_instance() {
    return reinterpret_cast<const DungeonPlayerDieNotify*>(
               &_DungeonPlayerDieNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(DungeonPlayerDieNotify* other);
  friend void swap(DungeonPlayerDieNotify& a, DungeonPlayerDieNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DungeonPlayerDieNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  DungeonPlayerDieNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DungeonPlayerDieNotify& from);
  void MergeFrom(const DungeonPlayerDieNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DungeonPlayerDieNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<uint32, .proto.StrengthenPointData> strengthen_point_data_map = 15;
  int strengthen_point_data_map_size() const;
  void clear_strengthen_point_data_map();
  static const int kStrengthenPointDataMapFieldNumber = 15;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::StrengthenPointData >&
      strengthen_point_data_map() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::StrengthenPointData >*
      mutable_strengthen_point_data_map();

  // uint32 wait_time = 1;
  void clear_wait_time();
  static const int kWaitTimeFieldNumber = 1;
  ::google::protobuf::uint32 wait_time() const;
  void set_wait_time(::google::protobuf::uint32 value);

  // .proto.PlayerDieType die_type = 3;
  void clear_die_type();
  static const int kDieTypeFieldNumber = 3;
  ::proto::PlayerDieType die_type() const;
  void set_die_type(::proto::PlayerDieType value);

  // uint32 murderer_entity_id = 13;
  void clear_murderer_entity_id();
  static const int kMurdererEntityIdFieldNumber = 13;
  ::google::protobuf::uint32 murderer_entity_id() const;
  void set_murderer_entity_id(::google::protobuf::uint32 value);

  // uint32 revive_count = 6;
  void clear_revive_count();
  static const int kReviveCountFieldNumber = 6;
  ::google::protobuf::uint32 revive_count() const;
  void set_revive_count(::google::protobuf::uint32 value);

  // uint32 dungeon_id = 9;
  void clear_dungeon_id();
  static const int kDungeonIdFieldNumber = 9;
  ::google::protobuf::uint32 dungeon_id() const;
  void set_dungeon_id(::google::protobuf::uint32 value);

  // uint32 monster_id = 4;
  private:
  bool has_monster_id() const;
  public:
  void clear_monster_id();
  static const int kMonsterIdFieldNumber = 4;
  ::google::protobuf::uint32 monster_id() const;
  void set_monster_id(::google::protobuf::uint32 value);

  // uint32 gadget_id = 8;
  private:
  bool has_gadget_id() const;
  public:
  void clear_gadget_id();
  static const int kGadgetIdFieldNumber = 8;
  ::google::protobuf::uint32 gadget_id() const;
  void set_gadget_id(::google::protobuf::uint32 value);

  EntityCase entity_case() const;
  // @@protoc_insertion_point(class_scope:proto.DungeonPlayerDieNotify)
 private:
  void set_has_monster_id();
  void set_has_gadget_id();

  inline bool has_entity() const;
  void clear_entity();
  inline void clear_has_entity();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  public:
  class DungeonPlayerDieNotify_StrengthenPointDataMapEntry : public ::google::protobuf::internal::MapEntry<DungeonPlayerDieNotify_StrengthenPointDataMapEntry, 
      ::google::protobuf::uint32, ::proto::StrengthenPointData,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<DungeonPlayerDieNotify_StrengthenPointDataMapEntry, 
      ::google::protobuf::uint32, ::proto::StrengthenPointData,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > SuperType;
    DungeonPlayerDieNotify_StrengthenPointDataMapEntry();
    DungeonPlayerDieNotify_StrengthenPointDataMapEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const DungeonPlayerDieNotify_StrengthenPointDataMapEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_DungeonPlayerDieNotify_StrengthenPointDataMapEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  private:
  ::google::protobuf::internal::MapField<
      DungeonPlayerDieNotify_StrengthenPointDataMapEntry,
      ::google::protobuf::uint32, ::proto::StrengthenPointData,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > strengthen_point_data_map_;
  private:
  ::google::protobuf::uint32 wait_time_;
  int die_type_;
  ::google::protobuf::uint32 murderer_entity_id_;
  ::google::protobuf::uint32 revive_count_;
  ::google::protobuf::uint32 dungeon_id_;
  union EntityUnion {
    EntityUnion() {}
    ::google::protobuf::uint32 monster_id_;
    ::google::protobuf::uint32 gadget_id_;
  } entity_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DungeonDieOptionReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DungeonDieOptionReq) */ {
 public:
  DungeonDieOptionReq();
  virtual ~DungeonDieOptionReq();

  DungeonDieOptionReq(const DungeonDieOptionReq& from);

  inline DungeonDieOptionReq& operator=(const DungeonDieOptionReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DungeonDieOptionReq(DungeonDieOptionReq&& from) noexcept
    : DungeonDieOptionReq() {
    *this = ::std::move(from);
  }

  inline DungeonDieOptionReq& operator=(DungeonDieOptionReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonDieOptionReq& default_instance();

  static inline const DungeonDieOptionReq* internal_default_instance() {
    return reinterpret_cast<const DungeonDieOptionReq*>(
               &_DungeonDieOptionReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(DungeonDieOptionReq* other);
  friend void swap(DungeonDieOptionReq& a, DungeonDieOptionReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DungeonDieOptionReq* New() const PROTOBUF_FINAL { return New(NULL); }

  DungeonDieOptionReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DungeonDieOptionReq& from);
  void MergeFrom(const DungeonDieOptionReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DungeonDieOptionReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.PlayerDieOption die_option = 11;
  void clear_die_option();
  static const int kDieOptionFieldNumber = 11;
  ::proto::PlayerDieOption die_option() const;
  void set_die_option(::proto::PlayerDieOption value);

  // bool is_quit_immediately = 14;
  void clear_is_quit_immediately();
  static const int kIsQuitImmediatelyFieldNumber = 14;
  bool is_quit_immediately() const;
  void set_is_quit_immediately(bool value);

  // @@protoc_insertion_point(class_scope:proto.DungeonDieOptionReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int die_option_;
  bool is_quit_immediately_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DungeonDieOptionRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DungeonDieOptionRsp) */ {
 public:
  DungeonDieOptionRsp();
  virtual ~DungeonDieOptionRsp();

  DungeonDieOptionRsp(const DungeonDieOptionRsp& from);

  inline DungeonDieOptionRsp& operator=(const DungeonDieOptionRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DungeonDieOptionRsp(DungeonDieOptionRsp&& from) noexcept
    : DungeonDieOptionRsp() {
    *this = ::std::move(from);
  }

  inline DungeonDieOptionRsp& operator=(DungeonDieOptionRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonDieOptionRsp& default_instance();

  static inline const DungeonDieOptionRsp* internal_default_instance() {
    return reinterpret_cast<const DungeonDieOptionRsp*>(
               &_DungeonDieOptionRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(DungeonDieOptionRsp* other);
  friend void swap(DungeonDieOptionRsp& a, DungeonDieOptionRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DungeonDieOptionRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  DungeonDieOptionRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DungeonDieOptionRsp& from);
  void MergeFrom(const DungeonDieOptionRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DungeonDieOptionRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 revive_count = 10;
  void clear_revive_count();
  static const int kReviveCountFieldNumber = 10;
  ::google::protobuf::uint32 revive_count() const;
  void set_revive_count(::google::protobuf::uint32 value);

  // int32 retcode = 5;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 5;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // .proto.PlayerDieOption die_option = 6;
  void clear_die_option();
  static const int kDieOptionFieldNumber = 6;
  ::proto::PlayerDieOption die_option() const;
  void set_die_option(::proto::PlayerDieOption value);

  // @@protoc_insertion_point(class_scope:proto.DungeonDieOptionRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 revive_count_;
  ::google::protobuf::int32 retcode_;
  int die_option_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DungeonShowReminderNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DungeonShowReminderNotify) */ {
 public:
  DungeonShowReminderNotify();
  virtual ~DungeonShowReminderNotify();

  DungeonShowReminderNotify(const DungeonShowReminderNotify& from);

  inline DungeonShowReminderNotify& operator=(const DungeonShowReminderNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DungeonShowReminderNotify(DungeonShowReminderNotify&& from) noexcept
    : DungeonShowReminderNotify() {
    *this = ::std::move(from);
  }

  inline DungeonShowReminderNotify& operator=(DungeonShowReminderNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonShowReminderNotify& default_instance();

  static inline const DungeonShowReminderNotify* internal_default_instance() {
    return reinterpret_cast<const DungeonShowReminderNotify*>(
               &_DungeonShowReminderNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(DungeonShowReminderNotify* other);
  friend void swap(DungeonShowReminderNotify& a, DungeonShowReminderNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DungeonShowReminderNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  DungeonShowReminderNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DungeonShowReminderNotify& from);
  void MergeFrom(const DungeonShowReminderNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DungeonShowReminderNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 reminder_id = 9;
  void clear_reminder_id();
  static const int kReminderIdFieldNumber = 9;
  ::google::protobuf::uint32 reminder_id() const;
  void set_reminder_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.DungeonShowReminderNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 reminder_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DungeonPlayerDieReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DungeonPlayerDieReq) */ {
 public:
  DungeonPlayerDieReq();
  virtual ~DungeonPlayerDieReq();

  DungeonPlayerDieReq(const DungeonPlayerDieReq& from);

  inline DungeonPlayerDieReq& operator=(const DungeonPlayerDieReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DungeonPlayerDieReq(DungeonPlayerDieReq&& from) noexcept
    : DungeonPlayerDieReq() {
    *this = ::std::move(from);
  }

  inline DungeonPlayerDieReq& operator=(DungeonPlayerDieReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonPlayerDieReq& default_instance();

  static inline const DungeonPlayerDieReq* internal_default_instance() {
    return reinterpret_cast<const DungeonPlayerDieReq*>(
               &_DungeonPlayerDieReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void Swap(DungeonPlayerDieReq* other);
  friend void swap(DungeonPlayerDieReq& a, DungeonPlayerDieReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DungeonPlayerDieReq* New() const PROTOBUF_FINAL { return New(NULL); }

  DungeonPlayerDieReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DungeonPlayerDieReq& from);
  void MergeFrom(const DungeonPlayerDieReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DungeonPlayerDieReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.PlayerDieType die_type = 6;
  void clear_die_type();
  static const int kDieTypeFieldNumber = 6;
  ::proto::PlayerDieType die_type() const;
  void set_die_type(::proto::PlayerDieType value);

  // uint32 dungeon_id = 8;
  void clear_dungeon_id();
  static const int kDungeonIdFieldNumber = 8;
  ::google::protobuf::uint32 dungeon_id() const;
  void set_dungeon_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.DungeonPlayerDieReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int die_type_;
  ::google::protobuf::uint32 dungeon_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DungeonPlayerDieRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DungeonPlayerDieRsp) */ {
 public:
  DungeonPlayerDieRsp();
  virtual ~DungeonPlayerDieRsp();

  DungeonPlayerDieRsp(const DungeonPlayerDieRsp& from);

  inline DungeonPlayerDieRsp& operator=(const DungeonPlayerDieRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DungeonPlayerDieRsp(DungeonPlayerDieRsp&& from) noexcept
    : DungeonPlayerDieRsp() {
    *this = ::std::move(from);
  }

  inline DungeonPlayerDieRsp& operator=(DungeonPlayerDieRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonPlayerDieRsp& default_instance();

  static inline const DungeonPlayerDieRsp* internal_default_instance() {
    return reinterpret_cast<const DungeonPlayerDieRsp*>(
               &_DungeonPlayerDieRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    29;

  void Swap(DungeonPlayerDieRsp* other);
  friend void swap(DungeonPlayerDieRsp& a, DungeonPlayerDieRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DungeonPlayerDieRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  DungeonPlayerDieRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DungeonPlayerDieRsp& from);
  void MergeFrom(const DungeonPlayerDieRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DungeonPlayerDieRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 retcode = 5;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 5;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.DungeonPlayerDieRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 retcode_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------

class DungeonDataNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DungeonDataNotify) */ {
 public:
  DungeonDataNotify();
  virtual ~DungeonDataNotify();

  DungeonDataNotify(const DungeonDataNotify& from);

  inline DungeonDataNotify& operator=(const DungeonDataNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DungeonDataNotify(DungeonDataNotify&& from) noexcept
    : DungeonDataNotify() {
    *this = ::std::move(from);
  }

  inline DungeonDataNotify& operator=(DungeonDataNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonDataNotify& default_instance();

  static inline const DungeonDataNotify* internal_default_instance() {
    return reinterpret_cast<const DungeonDataNotify*>(
               &_DungeonDataNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    31;

  void Swap(DungeonDataNotify* other);
  friend void swap(DungeonDataNotify& a, DungeonDataNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DungeonDataNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  DungeonDataNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DungeonDataNotify& from);
  void MergeFrom(const DungeonDataNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DungeonDataNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<uint32, uint32> dungeon_data_map = 1;
  int dungeon_data_map_size() const;
  void clear_dungeon_data_map();
  static const int kDungeonDataMapFieldNumber = 1;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
      dungeon_data_map() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
      mutable_dungeon_data_map();

  // @@protoc_insertion_point(class_scope:proto.DungeonDataNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  public:
  class DungeonDataNotify_DungeonDataMapEntry : public ::google::protobuf::internal::MapEntry<DungeonDataNotify_DungeonDataMapEntry, 
      ::google::protobuf::uint32, ::google::protobuf::uint32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<DungeonDataNotify_DungeonDataMapEntry, 
      ::google::protobuf::uint32, ::google::protobuf::uint32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      0 > SuperType;
    DungeonDataNotify_DungeonDataMapEntry();
    DungeonDataNotify_DungeonDataMapEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const DungeonDataNotify_DungeonDataMapEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_DungeonDataNotify_DungeonDataMapEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  private:
  ::google::protobuf::internal::MapField<
      DungeonDataNotify_DungeonDataMapEntry,
      ::google::protobuf::uint32, ::google::protobuf::uint32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      0 > dungeon_data_map_;
  private:
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DungeonChallengeBeginNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DungeonChallengeBeginNotify) */ {
 public:
  DungeonChallengeBeginNotify();
  virtual ~DungeonChallengeBeginNotify();

  DungeonChallengeBeginNotify(const DungeonChallengeBeginNotify& from);

  inline DungeonChallengeBeginNotify& operator=(const DungeonChallengeBeginNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DungeonChallengeBeginNotify(DungeonChallengeBeginNotify&& from) noexcept
    : DungeonChallengeBeginNotify() {
    *this = ::std::move(from);
  }

  inline DungeonChallengeBeginNotify& operator=(DungeonChallengeBeginNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonChallengeBeginNotify& default_instance();

  static inline const DungeonChallengeBeginNotify* internal_default_instance() {
    return reinterpret_cast<const DungeonChallengeBeginNotify*>(
               &_DungeonChallengeBeginNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    32;

  void Swap(DungeonChallengeBeginNotify* other);
  friend void swap(DungeonChallengeBeginNotify& a, DungeonChallengeBeginNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DungeonChallengeBeginNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  DungeonChallengeBeginNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DungeonChallengeBeginNotify& from);
  void MergeFrom(const DungeonChallengeBeginNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DungeonChallengeBeginNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 uid_list = 12;
  int uid_list_size() const;
  void clear_uid_list();
  static const int kUidListFieldNumber = 12;
  ::google::protobuf::uint32 uid_list(int index) const;
  void set_uid_list(int index, ::google::protobuf::uint32 value);
  void add_uid_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      uid_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_uid_list();

  // repeated uint32 param_list = 14;
  int param_list_size() const;
  void clear_param_list();
  static const int kParamListFieldNumber = 14;
  ::google::protobuf::uint32 param_list(int index) const;
  void set_param_list(int index, ::google::protobuf::uint32 value);
  void add_param_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      param_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_param_list();

  // uint32 challenge_id = 1;
  void clear_challenge_id();
  static const int kChallengeIdFieldNumber = 1;
  ::google::protobuf::uint32 challenge_id() const;
  void set_challenge_id(::google::protobuf::uint32 value);

  // uint32 group_id = 4;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 4;
  ::google::protobuf::uint32 group_id() const;
  void set_group_id(::google::protobuf::uint32 value);

  // uint32 father_index = 5;
  void clear_father_index();
  static const int kFatherIndexFieldNumber = 5;
  ::google::protobuf::uint32 father_index() const;
  void set_father_index(::google::protobuf::uint32 value);

  // uint32 challenge_index = 6;
  void clear_challenge_index();
  static const int kChallengeIndexFieldNumber = 6;
  ::google::protobuf::uint32 challenge_index() const;
  void set_challenge_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.DungeonChallengeBeginNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > uid_list_;
  mutable int _uid_list_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > param_list_;
  mutable int _param_list_cached_byte_size_;
  ::google::protobuf::uint32 challenge_id_;
  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::uint32 father_index_;
  ::google::protobuf::uint32 challenge_index_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChallengeBrief : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ChallengeBrief) */ {
 public:
  ChallengeBrief();
  virtual ~ChallengeBrief();

  ChallengeBrief(const ChallengeBrief& from);

  inline ChallengeBrief& operator=(const ChallengeBrief& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChallengeBrief(ChallengeBrief&& from) noexcept
    : ChallengeBrief() {
    *this = ::std::move(from);
  }

  inline ChallengeBrief& operator=(ChallengeBrief&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChallengeBrief& default_instance();

  static inline const ChallengeBrief* internal_default_instance() {
    return reinterpret_cast<const ChallengeBrief*>(
               &_ChallengeBrief_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    33;

  void Swap(ChallengeBrief* other);
  friend void swap(ChallengeBrief& a, ChallengeBrief& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChallengeBrief* New() const PROTOBUF_FINAL { return New(NULL); }

  ChallengeBrief* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChallengeBrief& from);
  void MergeFrom(const ChallengeBrief& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChallengeBrief* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool is_success = 4;
  void clear_is_success();
  static const int kIsSuccessFieldNumber = 4;
  bool is_success() const;
  void set_is_success(bool value);

  // uint32 challenge_id = 8;
  void clear_challenge_id();
  static const int kChallengeIdFieldNumber = 8;
  ::google::protobuf::uint32 challenge_id() const;
  void set_challenge_id(::google::protobuf::uint32 value);

  // uint32 cur_progress = 9;
  void clear_cur_progress();
  static const int kCurProgressFieldNumber = 9;
  ::google::protobuf::uint32 cur_progress() const;
  void set_cur_progress(::google::protobuf::uint32 value);

  // uint32 challenge_index = 10;
  void clear_challenge_index();
  static const int kChallengeIndexFieldNumber = 10;
  ::google::protobuf::uint32 challenge_index() const;
  void set_challenge_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.ChallengeBrief)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool is_success_;
  ::google::protobuf::uint32 challenge_id_;
  ::google::protobuf::uint32 cur_progress_;
  ::google::protobuf::uint32 challenge_index_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CustomDungeonResultInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.CustomDungeonResultInfo) */ {
 public:
  CustomDungeonResultInfo();
  virtual ~CustomDungeonResultInfo();

  CustomDungeonResultInfo(const CustomDungeonResultInfo& from);

  inline CustomDungeonResultInfo& operator=(const CustomDungeonResultInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CustomDungeonResultInfo(CustomDungeonResultInfo&& from) noexcept
    : CustomDungeonResultInfo() {
    *this = ::std::move(from);
  }

  inline CustomDungeonResultInfo& operator=(CustomDungeonResultInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CustomDungeonResultInfo& default_instance();

  static inline const CustomDungeonResultInfo* internal_default_instance() {
    return reinterpret_cast<const CustomDungeonResultInfo*>(
               &_CustomDungeonResultInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    34;

  void Swap(CustomDungeonResultInfo* other);
  friend void swap(CustomDungeonResultInfo& a, CustomDungeonResultInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CustomDungeonResultInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  CustomDungeonResultInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CustomDungeonResultInfo& from);
  void MergeFrom(const CustomDungeonResultInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CustomDungeonResultInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.ChallengeBrief child_challenge_list = 6;
  int child_challenge_list_size() const;
  void clear_child_challenge_list();
  static const int kChildChallengeListFieldNumber = 6;
  const ::proto::ChallengeBrief& child_challenge_list(int index) const;
  ::proto::ChallengeBrief* mutable_child_challenge_list(int index);
  ::proto::ChallengeBrief* add_child_challenge_list();
  ::google::protobuf::RepeatedPtrField< ::proto::ChallengeBrief >*
      mutable_child_challenge_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::ChallengeBrief >&
      child_challenge_list() const;

  // uint64 dungeon_guid = 3;
  void clear_dungeon_guid();
  static const int kDungeonGuidFieldNumber = 3;
  ::google::protobuf::uint64 dungeon_guid() const;
  void set_dungeon_guid(::google::protobuf::uint64 value);

  // .proto.CustomDungeonFinishType finish_type = 7;
  void clear_finish_type();
  static const int kFinishTypeFieldNumber = 7;
  ::proto::CustomDungeonFinishType finish_type() const;
  void set_finish_type(::proto::CustomDungeonFinishType value);

  // uint32 got_coin_num = 9;
  void clear_got_coin_num();
  static const int kGotCoinNumFieldNumber = 9;
  ::google::protobuf::uint32 got_coin_num() const;
  void set_got_coin_num(::google::protobuf::uint32 value);

  // bool is_liked = 12;
  void clear_is_liked();
  static const int kIsLikedFieldNumber = 12;
  bool is_liked() const;
  void set_is_liked(bool value);

  // bool is_arrive_finish = 2;
  void clear_is_arrive_finish();
  static const int kIsArriveFinishFieldNumber = 2;
  bool is_arrive_finish() const;
  void set_is_arrive_finish(bool value);

  // bool is_stored = 14;
  void clear_is_stored();
  static const int kIsStoredFieldNumber = 14;
  bool is_stored() const;
  void set_is_stored(bool value);

  // uint32 time_cost = 11;
  void clear_time_cost();
  static const int kTimeCostFieldNumber = 11;
  ::google::protobuf::uint32 time_cost() const;
  void set_time_cost(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.CustomDungeonResultInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::ChallengeBrief > child_challenge_list_;
  ::google::protobuf::uint64 dungeon_guid_;
  int finish_type_;
  ::google::protobuf::uint32 got_coin_num_;
  bool is_liked_;
  bool is_arrive_finish_;
  bool is_stored_;
  ::google::protobuf::uint32 time_cost_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------

class DungeonChallengeFinishNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DungeonChallengeFinishNotify) */ {
 public:
  DungeonChallengeFinishNotify();
  virtual ~DungeonChallengeFinishNotify();

  DungeonChallengeFinishNotify(const DungeonChallengeFinishNotify& from);

  inline DungeonChallengeFinishNotify& operator=(const DungeonChallengeFinishNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DungeonChallengeFinishNotify(DungeonChallengeFinishNotify&& from) noexcept
    : DungeonChallengeFinishNotify() {
    *this = ::std::move(from);
  }

  inline DungeonChallengeFinishNotify& operator=(DungeonChallengeFinishNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonChallengeFinishNotify& default_instance();

  enum DetailCase {
    kChannellerSlabLoopDungeonResultInfo = 1521,
    kEffigyChallengeDungeonResultInfo = 1627,
    kPotionDungeonResultInfo = 1824,
    kCustomDungeonResultInfo = 1664,
    DETAIL_NOT_SET = 0,
  };

  static inline const DungeonChallengeFinishNotify* internal_default_instance() {
    return reinterpret_cast<const DungeonChallengeFinishNotify*>(
               &_DungeonChallengeFinishNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    36;

  void Swap(DungeonChallengeFinishNotify* other);
  friend void swap(DungeonChallengeFinishNotify& a, DungeonChallengeFinishNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DungeonChallengeFinishNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  DungeonChallengeFinishNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DungeonChallengeFinishNotify& from);
  void MergeFrom(const DungeonChallengeFinishNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DungeonChallengeFinishNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<uint32, .proto.StrengthenPointData> strengthen_point_data_map = 13;
  int strengthen_point_data_map_size() const;
  void clear_strengthen_point_data_map();
  static const int kStrengthenPointDataMapFieldNumber = 13;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::StrengthenPointData >&
      strengthen_point_data_map() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::StrengthenPointData >*
      mutable_strengthen_point_data_map();

  // uint32 time_cost = 4;
  void clear_time_cost();
  static const int kTimeCostFieldNumber = 4;
  ::google::protobuf::uint32 time_cost() const;
  void set_time_cost(::google::protobuf::uint32 value);

  // uint32 challenge_index = 5;
  void clear_challenge_index();
  static const int kChallengeIndexFieldNumber = 5;
  ::google::protobuf::uint32 challenge_index() const;
  void set_challenge_index(::google::protobuf::uint32 value);

  // bool is_new_record = 10;
  void clear_is_new_record();
  static const int kIsNewRecordFieldNumber = 10;
  bool is_new_record() const;
  void set_is_new_record(bool value);

  // bool is_success = 3;
  void clear_is_success();
  static const int kIsSuccessFieldNumber = 3;
  bool is_success() const;
  void set_is_success(bool value);

  // uint32 challenge_record_type = 7;
  void clear_challenge_record_type();
  static const int kChallengeRecordTypeFieldNumber = 7;
  ::google::protobuf::uint32 challenge_record_type() const;
  void set_challenge_record_type(::google::protobuf::uint32 value);

  // .proto.ChallengeFinishType finish_type = 9;
  void clear_finish_type();
  static const int kFinishTypeFieldNumber = 9;
  ::proto::ChallengeFinishType finish_type() const;
  void set_finish_type(::proto::ChallengeFinishType value);

  // uint32 current_value = 15;
  void clear_current_value();
  static const int kCurrentValueFieldNumber = 15;
  ::google::protobuf::uint32 current_value() const;
  void set_current_value(::google::protobuf::uint32 value);

  // .proto.ChannellerSlabLoopDungeonResultInfo channeller_slab_loop_dungeon_result_info = 1521;
  bool has_channeller_slab_loop_dungeon_result_info() const;
  void clear_channeller_slab_loop_dungeon_result_info();
  static const int kChannellerSlabLoopDungeonResultInfoFieldNumber = 1521;
  const ::proto::ChannellerSlabLoopDungeonResultInfo& channeller_slab_loop_dungeon_result_info() const;
  ::proto::ChannellerSlabLoopDungeonResultInfo* mutable_channeller_slab_loop_dungeon_result_info();
  ::proto::ChannellerSlabLoopDungeonResultInfo* release_channeller_slab_loop_dungeon_result_info();
  void set_allocated_channeller_slab_loop_dungeon_result_info(::proto::ChannellerSlabLoopDungeonResultInfo* channeller_slab_loop_dungeon_result_info);

  // .proto.EffigyChallengeDungeonResultInfo effigy_challenge_dungeon_result_info = 1627;
  bool has_effigy_challenge_dungeon_result_info() const;
  void clear_effigy_challenge_dungeon_result_info();
  static const int kEffigyChallengeDungeonResultInfoFieldNumber = 1627;
  const ::proto::EffigyChallengeDungeonResultInfo& effigy_challenge_dungeon_result_info() const;
  ::proto::EffigyChallengeDungeonResultInfo* mutable_effigy_challenge_dungeon_result_info();
  ::proto::EffigyChallengeDungeonResultInfo* release_effigy_challenge_dungeon_result_info();
  void set_allocated_effigy_challenge_dungeon_result_info(::proto::EffigyChallengeDungeonResultInfo* effigy_challenge_dungeon_result_info);

  // .proto.PotionDungeonResultInfo potion_dungeon_result_info = 1824;
  bool has_potion_dungeon_result_info() const;
  void clear_potion_dungeon_result_info();
  static const int kPotionDungeonResultInfoFieldNumber = 1824;
  const ::proto::PotionDungeonResultInfo& potion_dungeon_result_info() const;
  ::proto::PotionDungeonResultInfo* mutable_potion_dungeon_result_info();
  ::proto::PotionDungeonResultInfo* release_potion_dungeon_result_info();
  void set_allocated_potion_dungeon_result_info(::proto::PotionDungeonResultInfo* potion_dungeon_result_info);

  // .proto.CustomDungeonResultInfo custom_dungeon_result_info = 1664;
  bool has_custom_dungeon_result_info() const;
  void clear_custom_dungeon_result_info();
  static const int kCustomDungeonResultInfoFieldNumber = 1664;
  const ::proto::CustomDungeonResultInfo& custom_dungeon_result_info() const;
  ::proto::CustomDungeonResultInfo* mutable_custom_dungeon_result_info();
  ::proto::CustomDungeonResultInfo* release_custom_dungeon_result_info();
  void set_allocated_custom_dungeon_result_info(::proto::CustomDungeonResultInfo* custom_dungeon_result_info);

  DetailCase detail_case() const;
  // @@protoc_insertion_point(class_scope:proto.DungeonChallengeFinishNotify)
 private:
  void set_has_channeller_slab_loop_dungeon_result_info();
  void set_has_effigy_challenge_dungeon_result_info();
  void set_has_potion_dungeon_result_info();
  void set_has_custom_dungeon_result_info();

  inline bool has_detail() const;
  void clear_detail();
  inline void clear_has_detail();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  public:
  class DungeonChallengeFinishNotify_StrengthenPointDataMapEntry : public ::google::protobuf::internal::MapEntry<DungeonChallengeFinishNotify_StrengthenPointDataMapEntry, 
      ::google::protobuf::uint32, ::proto::StrengthenPointData,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<DungeonChallengeFinishNotify_StrengthenPointDataMapEntry, 
      ::google::protobuf::uint32, ::proto::StrengthenPointData,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > SuperType;
    DungeonChallengeFinishNotify_StrengthenPointDataMapEntry();
    DungeonChallengeFinishNotify_StrengthenPointDataMapEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const DungeonChallengeFinishNotify_StrengthenPointDataMapEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_DungeonChallengeFinishNotify_StrengthenPointDataMapEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  private:
  ::google::protobuf::internal::MapField<
      DungeonChallengeFinishNotify_StrengthenPointDataMapEntry,
      ::google::protobuf::uint32, ::proto::StrengthenPointData,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > strengthen_point_data_map_;
  private:
  ::google::protobuf::uint32 time_cost_;
  ::google::protobuf::uint32 challenge_index_;
  bool is_new_record_;
  bool is_success_;
  ::google::protobuf::uint32 challenge_record_type_;
  int finish_type_;
  ::google::protobuf::uint32 current_value_;
  union DetailUnion {
    DetailUnion() {}
    ::proto::ChannellerSlabLoopDungeonResultInfo* channeller_slab_loop_dungeon_result_info_;
    ::proto::EffigyChallengeDungeonResultInfo* effigy_challenge_dungeon_result_info_;
    ::proto::PotionDungeonResultInfo* potion_dungeon_result_info_;
    ::proto::CustomDungeonResultInfo* custom_dungeon_result_info_;
  } detail_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChallengeDataNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ChallengeDataNotify) */ {
 public:
  ChallengeDataNotify();
  virtual ~ChallengeDataNotify();

  ChallengeDataNotify(const ChallengeDataNotify& from);

  inline ChallengeDataNotify& operator=(const ChallengeDataNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChallengeDataNotify(ChallengeDataNotify&& from) noexcept
    : ChallengeDataNotify() {
    *this = ::std::move(from);
  }

  inline ChallengeDataNotify& operator=(ChallengeDataNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChallengeDataNotify& default_instance();

  static inline const ChallengeDataNotify* internal_default_instance() {
    return reinterpret_cast<const ChallengeDataNotify*>(
               &_ChallengeDataNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    37;

  void Swap(ChallengeDataNotify* other);
  friend void swap(ChallengeDataNotify& a, ChallengeDataNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChallengeDataNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  ChallengeDataNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChallengeDataNotify& from);
  void MergeFrom(const ChallengeDataNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChallengeDataNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 param_index = 9;
  void clear_param_index();
  static const int kParamIndexFieldNumber = 9;
  ::google::protobuf::uint32 param_index() const;
  void set_param_index(::google::protobuf::uint32 value);

  // uint32 challenge_index = 2;
  void clear_challenge_index();
  static const int kChallengeIndexFieldNumber = 2;
  ::google::protobuf::uint32 challenge_index() const;
  void set_challenge_index(::google::protobuf::uint32 value);

  // uint32 value = 8;
  void clear_value();
  static const int kValueFieldNumber = 8;
  ::google::protobuf::uint32 value() const;
  void set_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.ChallengeDataNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 param_index_;
  ::google::protobuf::uint32 challenge_index_;
  ::google::protobuf::uint32 value_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DungeonFollowNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DungeonFollowNotify) */ {
 public:
  DungeonFollowNotify();
  virtual ~DungeonFollowNotify();

  DungeonFollowNotify(const DungeonFollowNotify& from);

  inline DungeonFollowNotify& operator=(const DungeonFollowNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DungeonFollowNotify(DungeonFollowNotify&& from) noexcept
    : DungeonFollowNotify() {
    *this = ::std::move(from);
  }

  inline DungeonFollowNotify& operator=(DungeonFollowNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonFollowNotify& default_instance();

  static inline const DungeonFollowNotify* internal_default_instance() {
    return reinterpret_cast<const DungeonFollowNotify*>(
               &_DungeonFollowNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    38;

  void Swap(DungeonFollowNotify* other);
  friend void swap(DungeonFollowNotify& a, DungeonFollowNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DungeonFollowNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  DungeonFollowNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DungeonFollowNotify& from);
  void MergeFrom(const DungeonFollowNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DungeonFollowNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 target_uid = 8;
  void clear_target_uid();
  static const int kTargetUidFieldNumber = 8;
  ::google::protobuf::uint32 target_uid() const;
  void set_target_uid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.DungeonFollowNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 target_uid_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DungeonGetStatueDropReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DungeonGetStatueDropReq) */ {
 public:
  DungeonGetStatueDropReq();
  virtual ~DungeonGetStatueDropReq();

  DungeonGetStatueDropReq(const DungeonGetStatueDropReq& from);

  inline DungeonGetStatueDropReq& operator=(const DungeonGetStatueDropReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DungeonGetStatueDropReq(DungeonGetStatueDropReq&& from) noexcept
    : DungeonGetStatueDropReq() {
    *this = ::std::move(from);
  }

  inline DungeonGetStatueDropReq& operator=(DungeonGetStatueDropReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonGetStatueDropReq& default_instance();

  static inline const DungeonGetStatueDropReq* internal_default_instance() {
    return reinterpret_cast<const DungeonGetStatueDropReq*>(
               &_DungeonGetStatueDropReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    39;

  void Swap(DungeonGetStatueDropReq* other);
  friend void swap(DungeonGetStatueDropReq& a, DungeonGetStatueDropReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DungeonGetStatueDropReq* New() const PROTOBUF_FINAL { return New(NULL); }

  DungeonGetStatueDropReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DungeonGetStatueDropReq& from);
  void MergeFrom(const DungeonGetStatueDropReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DungeonGetStatueDropReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.DungeonGetStatueDropReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DungeonGetStatueDropRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DungeonGetStatueDropRsp) */ {
 public:
  DungeonGetStatueDropRsp();
  virtual ~DungeonGetStatueDropRsp();

  DungeonGetStatueDropRsp(const DungeonGetStatueDropRsp& from);

  inline DungeonGetStatueDropRsp& operator=(const DungeonGetStatueDropRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DungeonGetStatueDropRsp(DungeonGetStatueDropRsp&& from) noexcept
    : DungeonGetStatueDropRsp() {
    *this = ::std::move(from);
  }

  inline DungeonGetStatueDropRsp& operator=(DungeonGetStatueDropRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonGetStatueDropRsp& default_instance();

  static inline const DungeonGetStatueDropRsp* internal_default_instance() {
    return reinterpret_cast<const DungeonGetStatueDropRsp*>(
               &_DungeonGetStatueDropRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    40;

  void Swap(DungeonGetStatueDropRsp* other);
  friend void swap(DungeonGetStatueDropRsp& a, DungeonGetStatueDropRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DungeonGetStatueDropRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  DungeonGetStatueDropRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DungeonGetStatueDropRsp& from);
  void MergeFrom(const DungeonGetStatueDropRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DungeonGetStatueDropRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 retcode = 12;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 12;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.DungeonGetStatueDropRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 retcode_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChallengeRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ChallengeRecord) */ {
 public:
  ChallengeRecord();
  virtual ~ChallengeRecord();

  ChallengeRecord(const ChallengeRecord& from);

  inline ChallengeRecord& operator=(const ChallengeRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChallengeRecord(ChallengeRecord&& from) noexcept
    : ChallengeRecord() {
    *this = ::std::move(from);
  }

  inline ChallengeRecord& operator=(ChallengeRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChallengeRecord& default_instance();

  static inline const ChallengeRecord* internal_default_instance() {
    return reinterpret_cast<const ChallengeRecord*>(
               &_ChallengeRecord_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    41;

  void Swap(ChallengeRecord* other);
  friend void swap(ChallengeRecord& a, ChallengeRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChallengeRecord* New() const PROTOBUF_FINAL { return New(NULL); }

  ChallengeRecord* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChallengeRecord& from);
  void MergeFrom(const ChallengeRecord& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChallengeRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 challenge_id = 1;
  void clear_challenge_id();
  static const int kChallengeIdFieldNumber = 1;
  ::google::protobuf::uint32 challenge_id() const;
  void set_challenge_id(::google::protobuf::uint32 value);

  // uint32 best_value = 8;
  void clear_best_value();
  static const int kBestValueFieldNumber = 8;
  ::google::protobuf::uint32 best_value() const;
  void set_best_value(::google::protobuf::uint32 value);

  // uint32 challenge_record_type = 14;
  void clear_challenge_record_type();
  static const int kChallengeRecordTypeFieldNumber = 14;
  ::google::protobuf::uint32 challenge_record_type() const;
  void set_challenge_record_type(::google::protobuf::uint32 value);

  // uint32 challenge_index = 15;
  void clear_challenge_index();
  static const int kChallengeIndexFieldNumber = 15;
  ::google::protobuf::uint32 challenge_index() const;
  void set_challenge_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.ChallengeRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 challenge_id_;
  ::google::protobuf::uint32 best_value_;
  ::google::protobuf::uint32 challenge_record_type_;
  ::google::protobuf::uint32 challenge_index_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChallengeRecordNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ChallengeRecordNotify) */ {
 public:
  ChallengeRecordNotify();
  virtual ~ChallengeRecordNotify();

  ChallengeRecordNotify(const ChallengeRecordNotify& from);

  inline ChallengeRecordNotify& operator=(const ChallengeRecordNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChallengeRecordNotify(ChallengeRecordNotify&& from) noexcept
    : ChallengeRecordNotify() {
    *this = ::std::move(from);
  }

  inline ChallengeRecordNotify& operator=(ChallengeRecordNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChallengeRecordNotify& default_instance();

  static inline const ChallengeRecordNotify* internal_default_instance() {
    return reinterpret_cast<const ChallengeRecordNotify*>(
               &_ChallengeRecordNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    42;

  void Swap(ChallengeRecordNotify* other);
  friend void swap(ChallengeRecordNotify& a, ChallengeRecordNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChallengeRecordNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  ChallengeRecordNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChallengeRecordNotify& from);
  void MergeFrom(const ChallengeRecordNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChallengeRecordNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.ChallengeRecord challenge_record_list = 5;
  int challenge_record_list_size() const;
  void clear_challenge_record_list();
  static const int kChallengeRecordListFieldNumber = 5;
  const ::proto::ChallengeRecord& challenge_record_list(int index) const;
  ::proto::ChallengeRecord* mutable_challenge_record_list(int index);
  ::proto::ChallengeRecord* add_challenge_record_list();
  ::google::protobuf::RepeatedPtrField< ::proto::ChallengeRecord >*
      mutable_challenge_record_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::ChallengeRecord >&
      challenge_record_list() const;

  // uint32 group_id = 2;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  ::google::protobuf::uint32 group_id() const;
  void set_group_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.ChallengeRecordNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::ChallengeRecord > challenge_record_list_;
  ::google::protobuf::uint32 group_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DungeonCandidateTeamAvatar : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DungeonCandidateTeamAvatar) */ {
 public:
  DungeonCandidateTeamAvatar();
  virtual ~DungeonCandidateTeamAvatar();

  DungeonCandidateTeamAvatar(const DungeonCandidateTeamAvatar& from);

  inline DungeonCandidateTeamAvatar& operator=(const DungeonCandidateTeamAvatar& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DungeonCandidateTeamAvatar(DungeonCandidateTeamAvatar&& from) noexcept
    : DungeonCandidateTeamAvatar() {
    *this = ::std::move(from);
  }

  inline DungeonCandidateTeamAvatar& operator=(DungeonCandidateTeamAvatar&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonCandidateTeamAvatar& default_instance();

  static inline const DungeonCandidateTeamAvatar* internal_default_instance() {
    return reinterpret_cast<const DungeonCandidateTeamAvatar*>(
               &_DungeonCandidateTeamAvatar_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    43;

  void Swap(DungeonCandidateTeamAvatar* other);
  friend void swap(DungeonCandidateTeamAvatar& a, DungeonCandidateTeamAvatar& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DungeonCandidateTeamAvatar* New() const PROTOBUF_FINAL { return New(NULL); }

  DungeonCandidateTeamAvatar* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DungeonCandidateTeamAvatar& from);
  void MergeFrom(const DungeonCandidateTeamAvatar& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DungeonCandidateTeamAvatar* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.AvatarInfo avatar_info = 6;
  bool has_avatar_info() const;
  void clear_avatar_info();
  static const int kAvatarInfoFieldNumber = 6;
  const ::proto::AvatarInfo& avatar_info() const;
  ::proto::AvatarInfo* mutable_avatar_info();
  ::proto::AvatarInfo* release_avatar_info();
  void set_allocated_avatar_info(::proto::AvatarInfo* avatar_info);

  // uint32 player_uid = 2;
  void clear_player_uid();
  static const int kPlayerUidFieldNumber = 2;
  ::google::protobuf::uint32 player_uid() const;
  void set_player_uid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.DungeonCandidateTeamAvatar)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::AvatarInfo* avatar_info_;
  ::google::protobuf::uint32 player_uid_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------

class DungeonCandidateTeamInfoNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DungeonCandidateTeamInfoNotify) */ {
 public:
  DungeonCandidateTeamInfoNotify();
  virtual ~DungeonCandidateTeamInfoNotify();

  DungeonCandidateTeamInfoNotify(const DungeonCandidateTeamInfoNotify& from);

  inline DungeonCandidateTeamInfoNotify& operator=(const DungeonCandidateTeamInfoNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DungeonCandidateTeamInfoNotify(DungeonCandidateTeamInfoNotify&& from) noexcept
    : DungeonCandidateTeamInfoNotify() {
    *this = ::std::move(from);
  }

  inline DungeonCandidateTeamInfoNotify& operator=(DungeonCandidateTeamInfoNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonCandidateTeamInfoNotify& default_instance();

  static inline const DungeonCandidateTeamInfoNotify* internal_default_instance() {
    return reinterpret_cast<const DungeonCandidateTeamInfoNotify*>(
               &_DungeonCandidateTeamInfoNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    45;

  void Swap(DungeonCandidateTeamInfoNotify* other);
  friend void swap(DungeonCandidateTeamInfoNotify& a, DungeonCandidateTeamInfoNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DungeonCandidateTeamInfoNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  DungeonCandidateTeamInfoNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DungeonCandidateTeamInfoNotify& from);
  void MergeFrom(const DungeonCandidateTeamInfoNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DungeonCandidateTeamInfoNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated .proto.DungeonCandidateTeamAvatar avatar_list = 4;
  int avatar_list_size() const;
  void clear_avatar_list();
  static const int kAvatarListFieldNumber = 4;
  const ::proto::DungeonCandidateTeamAvatar& avatar_list(int index) const;
  ::proto::DungeonCandidateTeamAvatar* mutable_avatar_list(int index);
  ::proto::DungeonCandidateTeamAvatar* add_avatar_list();
  ::google::protobuf::RepeatedPtrField< ::proto::DungeonCandidateTeamAvatar >*
      mutable_avatar_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::DungeonCandidateTeamAvatar >&
      avatar_list() const;

  // map<uint32, .proto.DungeonCandidateTeamPlayerState> player_state_map = 10;
  int player_state_map_size() const;
  void clear_player_state_map();
  static const int kPlayerStateMapFieldNumber = 10;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::DungeonCandidateTeamPlayerState >&
      player_state_map() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::DungeonCandidateTeamPlayerState >*
      mutable_player_state_map();

  // repeated uint32 ready_player_uid = 13;
  int ready_player_uid_size() const;
  void clear_ready_player_uid();
  static const int kReadyPlayerUidFieldNumber = 13;
  ::google::protobuf::uint32 ready_player_uid(int index) const;
  void set_ready_player_uid(int index, ::google::protobuf::uint32 value);
  void add_ready_player_uid(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      ready_player_uid() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_ready_player_uid();

  // uint32 match_type = 2;
  void clear_match_type();
  static const int kMatchTypeFieldNumber = 2;
  ::google::protobuf::uint32 match_type() const;
  void set_match_type(::google::protobuf::uint32 value);

  // uint32 dungeon_id = 9;
  void clear_dungeon_id();
  static const int kDungeonIdFieldNumber = 9;
  ::google::protobuf::uint32 dungeon_id() const;
  void set_dungeon_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.DungeonCandidateTeamInfoNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::DungeonCandidateTeamAvatar > avatar_list_;
  public:
  class DungeonCandidateTeamInfoNotify_PlayerStateMapEntry : public ::google::protobuf::internal::MapEntry<DungeonCandidateTeamInfoNotify_PlayerStateMapEntry, 
      ::google::protobuf::uint32, ::proto::DungeonCandidateTeamPlayerState,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_ENUM,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<DungeonCandidateTeamInfoNotify_PlayerStateMapEntry, 
      ::google::protobuf::uint32, ::proto::DungeonCandidateTeamPlayerState,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_ENUM,
      0 > SuperType;
    DungeonCandidateTeamInfoNotify_PlayerStateMapEntry();
    DungeonCandidateTeamInfoNotify_PlayerStateMapEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const DungeonCandidateTeamInfoNotify_PlayerStateMapEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_DungeonCandidateTeamInfoNotify_PlayerStateMapEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  private:
  ::google::protobuf::internal::MapField<
      DungeonCandidateTeamInfoNotify_PlayerStateMapEntry,
      ::google::protobuf::uint32, ::proto::DungeonCandidateTeamPlayerState,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_ENUM,
      0 > player_state_map_;
  private:
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > ready_player_uid_;
  mutable int _ready_player_uid_cached_byte_size_;
  ::google::protobuf::uint32 match_type_;
  ::google::protobuf::uint32 dungeon_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DungeonCandidateTeamInviteNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DungeonCandidateTeamInviteNotify) */ {
 public:
  DungeonCandidateTeamInviteNotify();
  virtual ~DungeonCandidateTeamInviteNotify();

  DungeonCandidateTeamInviteNotify(const DungeonCandidateTeamInviteNotify& from);

  inline DungeonCandidateTeamInviteNotify& operator=(const DungeonCandidateTeamInviteNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DungeonCandidateTeamInviteNotify(DungeonCandidateTeamInviteNotify&& from) noexcept
    : DungeonCandidateTeamInviteNotify() {
    *this = ::std::move(from);
  }

  inline DungeonCandidateTeamInviteNotify& operator=(DungeonCandidateTeamInviteNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonCandidateTeamInviteNotify& default_instance();

  static inline const DungeonCandidateTeamInviteNotify* internal_default_instance() {
    return reinterpret_cast<const DungeonCandidateTeamInviteNotify*>(
               &_DungeonCandidateTeamInviteNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    46;

  void Swap(DungeonCandidateTeamInviteNotify* other);
  friend void swap(DungeonCandidateTeamInviteNotify& a, DungeonCandidateTeamInviteNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DungeonCandidateTeamInviteNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  DungeonCandidateTeamInviteNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DungeonCandidateTeamInviteNotify& from);
  void MergeFrom(const DungeonCandidateTeamInviteNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DungeonCandidateTeamInviteNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 vaild_deadline_time_sec = 9;
  void clear_vaild_deadline_time_sec();
  static const int kVaildDeadlineTimeSecFieldNumber = 9;
  ::google::protobuf::uint32 vaild_deadline_time_sec() const;
  void set_vaild_deadline_time_sec(::google::protobuf::uint32 value);

  // uint32 player_uid = 5;
  void clear_player_uid();
  static const int kPlayerUidFieldNumber = 5;
  ::google::protobuf::uint32 player_uid() const;
  void set_player_uid(::google::protobuf::uint32 value);

  // uint32 dungeon_id = 6;
  void clear_dungeon_id();
  static const int kDungeonIdFieldNumber = 6;
  ::google::protobuf::uint32 dungeon_id() const;
  void set_dungeon_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.DungeonCandidateTeamInviteNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 vaild_deadline_time_sec_;
  ::google::protobuf::uint32 player_uid_;
  ::google::protobuf::uint32 dungeon_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DungeonCandidateTeamRefuseNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DungeonCandidateTeamRefuseNotify) */ {
 public:
  DungeonCandidateTeamRefuseNotify();
  virtual ~DungeonCandidateTeamRefuseNotify();

  DungeonCandidateTeamRefuseNotify(const DungeonCandidateTeamRefuseNotify& from);

  inline DungeonCandidateTeamRefuseNotify& operator=(const DungeonCandidateTeamRefuseNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DungeonCandidateTeamRefuseNotify(DungeonCandidateTeamRefuseNotify&& from) noexcept
    : DungeonCandidateTeamRefuseNotify() {
    *this = ::std::move(from);
  }

  inline DungeonCandidateTeamRefuseNotify& operator=(DungeonCandidateTeamRefuseNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonCandidateTeamRefuseNotify& default_instance();

  static inline const DungeonCandidateTeamRefuseNotify* internal_default_instance() {
    return reinterpret_cast<const DungeonCandidateTeamRefuseNotify*>(
               &_DungeonCandidateTeamRefuseNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    47;

  void Swap(DungeonCandidateTeamRefuseNotify* other);
  friend void swap(DungeonCandidateTeamRefuseNotify& a, DungeonCandidateTeamRefuseNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DungeonCandidateTeamRefuseNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  DungeonCandidateTeamRefuseNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DungeonCandidateTeamRefuseNotify& from);
  void MergeFrom(const DungeonCandidateTeamRefuseNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DungeonCandidateTeamRefuseNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 player_uid = 3;
  void clear_player_uid();
  static const int kPlayerUidFieldNumber = 3;
  ::google::protobuf::uint32 player_uid() const;
  void set_player_uid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.DungeonCandidateTeamRefuseNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 player_uid_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DungeonCandidateTeamPlayerLeaveNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DungeonCandidateTeamPlayerLeaveNotify) */ {
 public:
  DungeonCandidateTeamPlayerLeaveNotify();
  virtual ~DungeonCandidateTeamPlayerLeaveNotify();

  DungeonCandidateTeamPlayerLeaveNotify(const DungeonCandidateTeamPlayerLeaveNotify& from);

  inline DungeonCandidateTeamPlayerLeaveNotify& operator=(const DungeonCandidateTeamPlayerLeaveNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DungeonCandidateTeamPlayerLeaveNotify(DungeonCandidateTeamPlayerLeaveNotify&& from) noexcept
    : DungeonCandidateTeamPlayerLeaveNotify() {
    *this = ::std::move(from);
  }

  inline DungeonCandidateTeamPlayerLeaveNotify& operator=(DungeonCandidateTeamPlayerLeaveNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonCandidateTeamPlayerLeaveNotify& default_instance();

  static inline const DungeonCandidateTeamPlayerLeaveNotify* internal_default_instance() {
    return reinterpret_cast<const DungeonCandidateTeamPlayerLeaveNotify*>(
               &_DungeonCandidateTeamPlayerLeaveNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    48;

  void Swap(DungeonCandidateTeamPlayerLeaveNotify* other);
  friend void swap(DungeonCandidateTeamPlayerLeaveNotify& a, DungeonCandidateTeamPlayerLeaveNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DungeonCandidateTeamPlayerLeaveNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  DungeonCandidateTeamPlayerLeaveNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DungeonCandidateTeamPlayerLeaveNotify& from);
  void MergeFrom(const DungeonCandidateTeamPlayerLeaveNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DungeonCandidateTeamPlayerLeaveNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.DungeonCandidateTeamPlayerLeaveReason reason = 3;
  void clear_reason();
  static const int kReasonFieldNumber = 3;
  ::proto::DungeonCandidateTeamPlayerLeaveReason reason() const;
  void set_reason(::proto::DungeonCandidateTeamPlayerLeaveReason value);

  // uint32 player_uid = 13;
  void clear_player_uid();
  static const int kPlayerUidFieldNumber = 13;
  ::google::protobuf::uint32 player_uid() const;
  void set_player_uid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.DungeonCandidateTeamPlayerLeaveNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int reason_;
  ::google::protobuf::uint32 player_uid_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DungeonCandidateTeamDismissNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DungeonCandidateTeamDismissNotify) */ {
 public:
  DungeonCandidateTeamDismissNotify();
  virtual ~DungeonCandidateTeamDismissNotify();

  DungeonCandidateTeamDismissNotify(const DungeonCandidateTeamDismissNotify& from);

  inline DungeonCandidateTeamDismissNotify& operator=(const DungeonCandidateTeamDismissNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DungeonCandidateTeamDismissNotify(DungeonCandidateTeamDismissNotify&& from) noexcept
    : DungeonCandidateTeamDismissNotify() {
    *this = ::std::move(from);
  }

  inline DungeonCandidateTeamDismissNotify& operator=(DungeonCandidateTeamDismissNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonCandidateTeamDismissNotify& default_instance();

  static inline const DungeonCandidateTeamDismissNotify* internal_default_instance() {
    return reinterpret_cast<const DungeonCandidateTeamDismissNotify*>(
               &_DungeonCandidateTeamDismissNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    49;

  void Swap(DungeonCandidateTeamDismissNotify* other);
  friend void swap(DungeonCandidateTeamDismissNotify& a, DungeonCandidateTeamDismissNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DungeonCandidateTeamDismissNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  DungeonCandidateTeamDismissNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DungeonCandidateTeamDismissNotify& from);
  void MergeFrom(const DungeonCandidateTeamDismissNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DungeonCandidateTeamDismissNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.DungeonCandidateTeamDismissReason reason = 9;
  void clear_reason();
  static const int kReasonFieldNumber = 9;
  ::proto::DungeonCandidateTeamDismissReason reason() const;
  void set_reason(::proto::DungeonCandidateTeamDismissReason value);

  // uint32 player_uid = 12;
  void clear_player_uid();
  static const int kPlayerUidFieldNumber = 12;
  ::google::protobuf::uint32 player_uid() const;
  void set_player_uid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.DungeonCandidateTeamDismissNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int reason_;
  ::google::protobuf::uint32 player_uid_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DungeonCandidateTeamCreateReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DungeonCandidateTeamCreateReq) */ {
 public:
  DungeonCandidateTeamCreateReq();
  virtual ~DungeonCandidateTeamCreateReq();

  DungeonCandidateTeamCreateReq(const DungeonCandidateTeamCreateReq& from);

  inline DungeonCandidateTeamCreateReq& operator=(const DungeonCandidateTeamCreateReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DungeonCandidateTeamCreateReq(DungeonCandidateTeamCreateReq&& from) noexcept
    : DungeonCandidateTeamCreateReq() {
    *this = ::std::move(from);
  }

  inline DungeonCandidateTeamCreateReq& operator=(DungeonCandidateTeamCreateReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonCandidateTeamCreateReq& default_instance();

  static inline const DungeonCandidateTeamCreateReq* internal_default_instance() {
    return reinterpret_cast<const DungeonCandidateTeamCreateReq*>(
               &_DungeonCandidateTeamCreateReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    50;

  void Swap(DungeonCandidateTeamCreateReq* other);
  friend void swap(DungeonCandidateTeamCreateReq& a, DungeonCandidateTeamCreateReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DungeonCandidateTeamCreateReq* New() const PROTOBUF_FINAL { return New(NULL); }

  DungeonCandidateTeamCreateReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DungeonCandidateTeamCreateReq& from);
  void MergeFrom(const DungeonCandidateTeamCreateReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DungeonCandidateTeamCreateReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 dungeon_id = 6;
  void clear_dungeon_id();
  static const int kDungeonIdFieldNumber = 6;
  ::google::protobuf::uint32 dungeon_id() const;
  void set_dungeon_id(::google::protobuf::uint32 value);

  // uint32 point_id = 7;
  void clear_point_id();
  static const int kPointIdFieldNumber = 7;
  ::google::protobuf::uint32 point_id() const;
  void set_point_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.DungeonCandidateTeamCreateReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 dungeon_id_;
  ::google::protobuf::uint32 point_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DungeonCandidateTeamCreateRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DungeonCandidateTeamCreateRsp) */ {
 public:
  DungeonCandidateTeamCreateRsp();
  virtual ~DungeonCandidateTeamCreateRsp();

  DungeonCandidateTeamCreateRsp(const DungeonCandidateTeamCreateRsp& from);

  inline DungeonCandidateTeamCreateRsp& operator=(const DungeonCandidateTeamCreateRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DungeonCandidateTeamCreateRsp(DungeonCandidateTeamCreateRsp&& from) noexcept
    : DungeonCandidateTeamCreateRsp() {
    *this = ::std::move(from);
  }

  inline DungeonCandidateTeamCreateRsp& operator=(DungeonCandidateTeamCreateRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonCandidateTeamCreateRsp& default_instance();

  static inline const DungeonCandidateTeamCreateRsp* internal_default_instance() {
    return reinterpret_cast<const DungeonCandidateTeamCreateRsp*>(
               &_DungeonCandidateTeamCreateRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    51;

  void Swap(DungeonCandidateTeamCreateRsp* other);
  friend void swap(DungeonCandidateTeamCreateRsp& a, DungeonCandidateTeamCreateRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DungeonCandidateTeamCreateRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  DungeonCandidateTeamCreateRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DungeonCandidateTeamCreateRsp& from);
  void MergeFrom(const DungeonCandidateTeamCreateRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DungeonCandidateTeamCreateRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 retcode = 1;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.DungeonCandidateTeamCreateRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 retcode_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DungeonCandidateTeamInviteReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DungeonCandidateTeamInviteReq) */ {
 public:
  DungeonCandidateTeamInviteReq();
  virtual ~DungeonCandidateTeamInviteReq();

  DungeonCandidateTeamInviteReq(const DungeonCandidateTeamInviteReq& from);

  inline DungeonCandidateTeamInviteReq& operator=(const DungeonCandidateTeamInviteReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DungeonCandidateTeamInviteReq(DungeonCandidateTeamInviteReq&& from) noexcept
    : DungeonCandidateTeamInviteReq() {
    *this = ::std::move(from);
  }

  inline DungeonCandidateTeamInviteReq& operator=(DungeonCandidateTeamInviteReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonCandidateTeamInviteReq& default_instance();

  static inline const DungeonCandidateTeamInviteReq* internal_default_instance() {
    return reinterpret_cast<const DungeonCandidateTeamInviteReq*>(
               &_DungeonCandidateTeamInviteReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    52;

  void Swap(DungeonCandidateTeamInviteReq* other);
  friend void swap(DungeonCandidateTeamInviteReq& a, DungeonCandidateTeamInviteReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DungeonCandidateTeamInviteReq* New() const PROTOBUF_FINAL { return New(NULL); }

  DungeonCandidateTeamInviteReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DungeonCandidateTeamInviteReq& from);
  void MergeFrom(const DungeonCandidateTeamInviteReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DungeonCandidateTeamInviteReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 player_uids = 5;
  int player_uids_size() const;
  void clear_player_uids();
  static const int kPlayerUidsFieldNumber = 5;
  ::google::protobuf::uint32 player_uids(int index) const;
  void set_player_uids(int index, ::google::protobuf::uint32 value);
  void add_player_uids(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      player_uids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_player_uids();

  // @@protoc_insertion_point(class_scope:proto.DungeonCandidateTeamInviteReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > player_uids_;
  mutable int _player_uids_cached_byte_size_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DungeonCandidateTeamInviteRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DungeonCandidateTeamInviteRsp) */ {
 public:
  DungeonCandidateTeamInviteRsp();
  virtual ~DungeonCandidateTeamInviteRsp();

  DungeonCandidateTeamInviteRsp(const DungeonCandidateTeamInviteRsp& from);

  inline DungeonCandidateTeamInviteRsp& operator=(const DungeonCandidateTeamInviteRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DungeonCandidateTeamInviteRsp(DungeonCandidateTeamInviteRsp&& from) noexcept
    : DungeonCandidateTeamInviteRsp() {
    *this = ::std::move(from);
  }

  inline DungeonCandidateTeamInviteRsp& operator=(DungeonCandidateTeamInviteRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonCandidateTeamInviteRsp& default_instance();

  static inline const DungeonCandidateTeamInviteRsp* internal_default_instance() {
    return reinterpret_cast<const DungeonCandidateTeamInviteRsp*>(
               &_DungeonCandidateTeamInviteRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    53;

  void Swap(DungeonCandidateTeamInviteRsp* other);
  friend void swap(DungeonCandidateTeamInviteRsp& a, DungeonCandidateTeamInviteRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DungeonCandidateTeamInviteRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  DungeonCandidateTeamInviteRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DungeonCandidateTeamInviteRsp& from);
  void MergeFrom(const DungeonCandidateTeamInviteRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DungeonCandidateTeamInviteRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 invalid_player_uids = 7;
  int invalid_player_uids_size() const;
  void clear_invalid_player_uids();
  static const int kInvalidPlayerUidsFieldNumber = 7;
  ::google::protobuf::uint32 invalid_player_uids(int index) const;
  void set_invalid_player_uids(int index, ::google::protobuf::uint32 value);
  void add_invalid_player_uids(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      invalid_player_uids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_invalid_player_uids();

  // int32 retcode = 12;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 12;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.DungeonCandidateTeamInviteRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > invalid_player_uids_;
  mutable int _invalid_player_uids_cached_byte_size_;
  ::google::protobuf::int32 retcode_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DungeonCandidateTeamKickReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DungeonCandidateTeamKickReq) */ {
 public:
  DungeonCandidateTeamKickReq();
  virtual ~DungeonCandidateTeamKickReq();

  DungeonCandidateTeamKickReq(const DungeonCandidateTeamKickReq& from);

  inline DungeonCandidateTeamKickReq& operator=(const DungeonCandidateTeamKickReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DungeonCandidateTeamKickReq(DungeonCandidateTeamKickReq&& from) noexcept
    : DungeonCandidateTeamKickReq() {
    *this = ::std::move(from);
  }

  inline DungeonCandidateTeamKickReq& operator=(DungeonCandidateTeamKickReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonCandidateTeamKickReq& default_instance();

  static inline const DungeonCandidateTeamKickReq* internal_default_instance() {
    return reinterpret_cast<const DungeonCandidateTeamKickReq*>(
               &_DungeonCandidateTeamKickReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    54;

  void Swap(DungeonCandidateTeamKickReq* other);
  friend void swap(DungeonCandidateTeamKickReq& a, DungeonCandidateTeamKickReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DungeonCandidateTeamKickReq* New() const PROTOBUF_FINAL { return New(NULL); }

  DungeonCandidateTeamKickReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DungeonCandidateTeamKickReq& from);
  void MergeFrom(const DungeonCandidateTeamKickReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DungeonCandidateTeamKickReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 player_uid = 9;
  void clear_player_uid();
  static const int kPlayerUidFieldNumber = 9;
  ::google::protobuf::uint32 player_uid() const;
  void set_player_uid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.DungeonCandidateTeamKickReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 player_uid_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DungeonCandidateTeamKickRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DungeonCandidateTeamKickRsp) */ {
 public:
  DungeonCandidateTeamKickRsp();
  virtual ~DungeonCandidateTeamKickRsp();

  DungeonCandidateTeamKickRsp(const DungeonCandidateTeamKickRsp& from);

  inline DungeonCandidateTeamKickRsp& operator=(const DungeonCandidateTeamKickRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DungeonCandidateTeamKickRsp(DungeonCandidateTeamKickRsp&& from) noexcept
    : DungeonCandidateTeamKickRsp() {
    *this = ::std::move(from);
  }

  inline DungeonCandidateTeamKickRsp& operator=(DungeonCandidateTeamKickRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonCandidateTeamKickRsp& default_instance();

  static inline const DungeonCandidateTeamKickRsp* internal_default_instance() {
    return reinterpret_cast<const DungeonCandidateTeamKickRsp*>(
               &_DungeonCandidateTeamKickRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    55;

  void Swap(DungeonCandidateTeamKickRsp* other);
  friend void swap(DungeonCandidateTeamKickRsp& a, DungeonCandidateTeamKickRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DungeonCandidateTeamKickRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  DungeonCandidateTeamKickRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DungeonCandidateTeamKickRsp& from);
  void MergeFrom(const DungeonCandidateTeamKickRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DungeonCandidateTeamKickRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 retcode = 1;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.DungeonCandidateTeamKickRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 retcode_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DungeonCandidateTeamLeaveReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DungeonCandidateTeamLeaveReq) */ {
 public:
  DungeonCandidateTeamLeaveReq();
  virtual ~DungeonCandidateTeamLeaveReq();

  DungeonCandidateTeamLeaveReq(const DungeonCandidateTeamLeaveReq& from);

  inline DungeonCandidateTeamLeaveReq& operator=(const DungeonCandidateTeamLeaveReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DungeonCandidateTeamLeaveReq(DungeonCandidateTeamLeaveReq&& from) noexcept
    : DungeonCandidateTeamLeaveReq() {
    *this = ::std::move(from);
  }

  inline DungeonCandidateTeamLeaveReq& operator=(DungeonCandidateTeamLeaveReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonCandidateTeamLeaveReq& default_instance();

  static inline const DungeonCandidateTeamLeaveReq* internal_default_instance() {
    return reinterpret_cast<const DungeonCandidateTeamLeaveReq*>(
               &_DungeonCandidateTeamLeaveReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    56;

  void Swap(DungeonCandidateTeamLeaveReq* other);
  friend void swap(DungeonCandidateTeamLeaveReq& a, DungeonCandidateTeamLeaveReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DungeonCandidateTeamLeaveReq* New() const PROTOBUF_FINAL { return New(NULL); }

  DungeonCandidateTeamLeaveReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DungeonCandidateTeamLeaveReq& from);
  void MergeFrom(const DungeonCandidateTeamLeaveReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DungeonCandidateTeamLeaveReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.DungeonCandidateTeamLeaveReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DungeonCandidateTeamLeaveRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DungeonCandidateTeamLeaveRsp) */ {
 public:
  DungeonCandidateTeamLeaveRsp();
  virtual ~DungeonCandidateTeamLeaveRsp();

  DungeonCandidateTeamLeaveRsp(const DungeonCandidateTeamLeaveRsp& from);

  inline DungeonCandidateTeamLeaveRsp& operator=(const DungeonCandidateTeamLeaveRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DungeonCandidateTeamLeaveRsp(DungeonCandidateTeamLeaveRsp&& from) noexcept
    : DungeonCandidateTeamLeaveRsp() {
    *this = ::std::move(from);
  }

  inline DungeonCandidateTeamLeaveRsp& operator=(DungeonCandidateTeamLeaveRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonCandidateTeamLeaveRsp& default_instance();

  static inline const DungeonCandidateTeamLeaveRsp* internal_default_instance() {
    return reinterpret_cast<const DungeonCandidateTeamLeaveRsp*>(
               &_DungeonCandidateTeamLeaveRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    57;

  void Swap(DungeonCandidateTeamLeaveRsp* other);
  friend void swap(DungeonCandidateTeamLeaveRsp& a, DungeonCandidateTeamLeaveRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DungeonCandidateTeamLeaveRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  DungeonCandidateTeamLeaveRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DungeonCandidateTeamLeaveRsp& from);
  void MergeFrom(const DungeonCandidateTeamLeaveRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DungeonCandidateTeamLeaveRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 retcode = 14;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 14;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.DungeonCandidateTeamLeaveRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 retcode_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DungeonCandidateTeamReplyInviteReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DungeonCandidateTeamReplyInviteReq) */ {
 public:
  DungeonCandidateTeamReplyInviteReq();
  virtual ~DungeonCandidateTeamReplyInviteReq();

  DungeonCandidateTeamReplyInviteReq(const DungeonCandidateTeamReplyInviteReq& from);

  inline DungeonCandidateTeamReplyInviteReq& operator=(const DungeonCandidateTeamReplyInviteReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DungeonCandidateTeamReplyInviteReq(DungeonCandidateTeamReplyInviteReq&& from) noexcept
    : DungeonCandidateTeamReplyInviteReq() {
    *this = ::std::move(from);
  }

  inline DungeonCandidateTeamReplyInviteReq& operator=(DungeonCandidateTeamReplyInviteReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonCandidateTeamReplyInviteReq& default_instance();

  static inline const DungeonCandidateTeamReplyInviteReq* internal_default_instance() {
    return reinterpret_cast<const DungeonCandidateTeamReplyInviteReq*>(
               &_DungeonCandidateTeamReplyInviteReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    58;

  void Swap(DungeonCandidateTeamReplyInviteReq* other);
  friend void swap(DungeonCandidateTeamReplyInviteReq& a, DungeonCandidateTeamReplyInviteReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DungeonCandidateTeamReplyInviteReq* New() const PROTOBUF_FINAL { return New(NULL); }

  DungeonCandidateTeamReplyInviteReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DungeonCandidateTeamReplyInviteReq& from);
  void MergeFrom(const DungeonCandidateTeamReplyInviteReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DungeonCandidateTeamReplyInviteReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool is_accept = 5;
  void clear_is_accept();
  static const int kIsAcceptFieldNumber = 5;
  bool is_accept() const;
  void set_is_accept(bool value);

  // @@protoc_insertion_point(class_scope:proto.DungeonCandidateTeamReplyInviteReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool is_accept_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DungeonCandidateTeamReplyInviteRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DungeonCandidateTeamReplyInviteRsp) */ {
 public:
  DungeonCandidateTeamReplyInviteRsp();
  virtual ~DungeonCandidateTeamReplyInviteRsp();

  DungeonCandidateTeamReplyInviteRsp(const DungeonCandidateTeamReplyInviteRsp& from);

  inline DungeonCandidateTeamReplyInviteRsp& operator=(const DungeonCandidateTeamReplyInviteRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DungeonCandidateTeamReplyInviteRsp(DungeonCandidateTeamReplyInviteRsp&& from) noexcept
    : DungeonCandidateTeamReplyInviteRsp() {
    *this = ::std::move(from);
  }

  inline DungeonCandidateTeamReplyInviteRsp& operator=(DungeonCandidateTeamReplyInviteRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonCandidateTeamReplyInviteRsp& default_instance();

  static inline const DungeonCandidateTeamReplyInviteRsp* internal_default_instance() {
    return reinterpret_cast<const DungeonCandidateTeamReplyInviteRsp*>(
               &_DungeonCandidateTeamReplyInviteRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    59;

  void Swap(DungeonCandidateTeamReplyInviteRsp* other);
  friend void swap(DungeonCandidateTeamReplyInviteRsp& a, DungeonCandidateTeamReplyInviteRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DungeonCandidateTeamReplyInviteRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  DungeonCandidateTeamReplyInviteRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DungeonCandidateTeamReplyInviteRsp& from);
  void MergeFrom(const DungeonCandidateTeamReplyInviteRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DungeonCandidateTeamReplyInviteRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 retcode = 2;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 2;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // bool is_trans_point = 4;
  void clear_is_trans_point();
  static const int kIsTransPointFieldNumber = 4;
  bool is_trans_point() const;
  void set_is_trans_point(bool value);

  // @@protoc_insertion_point(class_scope:proto.DungeonCandidateTeamReplyInviteRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 retcode_;
  bool is_trans_point_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DungeonCandidateTeamSetReadyReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DungeonCandidateTeamSetReadyReq) */ {
 public:
  DungeonCandidateTeamSetReadyReq();
  virtual ~DungeonCandidateTeamSetReadyReq();

  DungeonCandidateTeamSetReadyReq(const DungeonCandidateTeamSetReadyReq& from);

  inline DungeonCandidateTeamSetReadyReq& operator=(const DungeonCandidateTeamSetReadyReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DungeonCandidateTeamSetReadyReq(DungeonCandidateTeamSetReadyReq&& from) noexcept
    : DungeonCandidateTeamSetReadyReq() {
    *this = ::std::move(from);
  }

  inline DungeonCandidateTeamSetReadyReq& operator=(DungeonCandidateTeamSetReadyReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonCandidateTeamSetReadyReq& default_instance();

  static inline const DungeonCandidateTeamSetReadyReq* internal_default_instance() {
    return reinterpret_cast<const DungeonCandidateTeamSetReadyReq*>(
               &_DungeonCandidateTeamSetReadyReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    60;

  void Swap(DungeonCandidateTeamSetReadyReq* other);
  friend void swap(DungeonCandidateTeamSetReadyReq& a, DungeonCandidateTeamSetReadyReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DungeonCandidateTeamSetReadyReq* New() const PROTOBUF_FINAL { return New(NULL); }

  DungeonCandidateTeamSetReadyReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DungeonCandidateTeamSetReadyReq& from);
  void MergeFrom(const DungeonCandidateTeamSetReadyReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DungeonCandidateTeamSetReadyReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool is_ready = 15;
  void clear_is_ready();
  static const int kIsReadyFieldNumber = 15;
  bool is_ready() const;
  void set_is_ready(bool value);

  // @@protoc_insertion_point(class_scope:proto.DungeonCandidateTeamSetReadyReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool is_ready_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DungeonCandidateTeamSetReadyRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DungeonCandidateTeamSetReadyRsp) */ {
 public:
  DungeonCandidateTeamSetReadyRsp();
  virtual ~DungeonCandidateTeamSetReadyRsp();

  DungeonCandidateTeamSetReadyRsp(const DungeonCandidateTeamSetReadyRsp& from);

  inline DungeonCandidateTeamSetReadyRsp& operator=(const DungeonCandidateTeamSetReadyRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DungeonCandidateTeamSetReadyRsp(DungeonCandidateTeamSetReadyRsp&& from) noexcept
    : DungeonCandidateTeamSetReadyRsp() {
    *this = ::std::move(from);
  }

  inline DungeonCandidateTeamSetReadyRsp& operator=(DungeonCandidateTeamSetReadyRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonCandidateTeamSetReadyRsp& default_instance();

  static inline const DungeonCandidateTeamSetReadyRsp* internal_default_instance() {
    return reinterpret_cast<const DungeonCandidateTeamSetReadyRsp*>(
               &_DungeonCandidateTeamSetReadyRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    61;

  void Swap(DungeonCandidateTeamSetReadyRsp* other);
  friend void swap(DungeonCandidateTeamSetReadyRsp& a, DungeonCandidateTeamSetReadyRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DungeonCandidateTeamSetReadyRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  DungeonCandidateTeamSetReadyRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DungeonCandidateTeamSetReadyRsp& from);
  void MergeFrom(const DungeonCandidateTeamSetReadyRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DungeonCandidateTeamSetReadyRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 retcode = 12;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 12;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.DungeonCandidateTeamSetReadyRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 retcode_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DungeonCandidateTeamChangeAvatarReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DungeonCandidateTeamChangeAvatarReq) */ {
 public:
  DungeonCandidateTeamChangeAvatarReq();
  virtual ~DungeonCandidateTeamChangeAvatarReq();

  DungeonCandidateTeamChangeAvatarReq(const DungeonCandidateTeamChangeAvatarReq& from);

  inline DungeonCandidateTeamChangeAvatarReq& operator=(const DungeonCandidateTeamChangeAvatarReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DungeonCandidateTeamChangeAvatarReq(DungeonCandidateTeamChangeAvatarReq&& from) noexcept
    : DungeonCandidateTeamChangeAvatarReq() {
    *this = ::std::move(from);
  }

  inline DungeonCandidateTeamChangeAvatarReq& operator=(DungeonCandidateTeamChangeAvatarReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonCandidateTeamChangeAvatarReq& default_instance();

  static inline const DungeonCandidateTeamChangeAvatarReq* internal_default_instance() {
    return reinterpret_cast<const DungeonCandidateTeamChangeAvatarReq*>(
               &_DungeonCandidateTeamChangeAvatarReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    62;

  void Swap(DungeonCandidateTeamChangeAvatarReq* other);
  friend void swap(DungeonCandidateTeamChangeAvatarReq& a, DungeonCandidateTeamChangeAvatarReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DungeonCandidateTeamChangeAvatarReq* New() const PROTOBUF_FINAL { return New(NULL); }

  DungeonCandidateTeamChangeAvatarReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DungeonCandidateTeamChangeAvatarReq& from);
  void MergeFrom(const DungeonCandidateTeamChangeAvatarReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DungeonCandidateTeamChangeAvatarReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 avatar_guid_list = 5;
  int avatar_guid_list_size() const;
  void clear_avatar_guid_list();
  static const int kAvatarGuidListFieldNumber = 5;
  ::google::protobuf::uint64 avatar_guid_list(int index) const;
  void set_avatar_guid_list(int index, ::google::protobuf::uint64 value);
  void add_avatar_guid_list(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      avatar_guid_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_avatar_guid_list();

  // @@protoc_insertion_point(class_scope:proto.DungeonCandidateTeamChangeAvatarReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > avatar_guid_list_;
  mutable int _avatar_guid_list_cached_byte_size_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DungeonCandidateTeamChangeAvatarRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DungeonCandidateTeamChangeAvatarRsp) */ {
 public:
  DungeonCandidateTeamChangeAvatarRsp();
  virtual ~DungeonCandidateTeamChangeAvatarRsp();

  DungeonCandidateTeamChangeAvatarRsp(const DungeonCandidateTeamChangeAvatarRsp& from);

  inline DungeonCandidateTeamChangeAvatarRsp& operator=(const DungeonCandidateTeamChangeAvatarRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DungeonCandidateTeamChangeAvatarRsp(DungeonCandidateTeamChangeAvatarRsp&& from) noexcept
    : DungeonCandidateTeamChangeAvatarRsp() {
    *this = ::std::move(from);
  }

  inline DungeonCandidateTeamChangeAvatarRsp& operator=(DungeonCandidateTeamChangeAvatarRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonCandidateTeamChangeAvatarRsp& default_instance();

  static inline const DungeonCandidateTeamChangeAvatarRsp* internal_default_instance() {
    return reinterpret_cast<const DungeonCandidateTeamChangeAvatarRsp*>(
               &_DungeonCandidateTeamChangeAvatarRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    63;

  void Swap(DungeonCandidateTeamChangeAvatarRsp* other);
  friend void swap(DungeonCandidateTeamChangeAvatarRsp& a, DungeonCandidateTeamChangeAvatarRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DungeonCandidateTeamChangeAvatarRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  DungeonCandidateTeamChangeAvatarRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DungeonCandidateTeamChangeAvatarRsp& from);
  void MergeFrom(const DungeonCandidateTeamChangeAvatarRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DungeonCandidateTeamChangeAvatarRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 retcode = 4;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 4;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.DungeonCandidateTeamChangeAvatarRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 retcode_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DailyDungeonEntryInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DailyDungeonEntryInfo) */ {
 public:
  DailyDungeonEntryInfo();
  virtual ~DailyDungeonEntryInfo();

  DailyDungeonEntryInfo(const DailyDungeonEntryInfo& from);

  inline DailyDungeonEntryInfo& operator=(const DailyDungeonEntryInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DailyDungeonEntryInfo(DailyDungeonEntryInfo&& from) noexcept
    : DailyDungeonEntryInfo() {
    *this = ::std::move(from);
  }

  inline DailyDungeonEntryInfo& operator=(DailyDungeonEntryInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DailyDungeonEntryInfo& default_instance();

  static inline const DailyDungeonEntryInfo* internal_default_instance() {
    return reinterpret_cast<const DailyDungeonEntryInfo*>(
               &_DailyDungeonEntryInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    64;

  void Swap(DailyDungeonEntryInfo* other);
  friend void swap(DailyDungeonEntryInfo& a, DailyDungeonEntryInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DailyDungeonEntryInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  DailyDungeonEntryInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DailyDungeonEntryInfo& from);
  void MergeFrom(const DailyDungeonEntryInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DailyDungeonEntryInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.DungeonEntryInfo recommend_dungeon_entry_info = 1;
  bool has_recommend_dungeon_entry_info() const;
  void clear_recommend_dungeon_entry_info();
  static const int kRecommendDungeonEntryInfoFieldNumber = 1;
  const ::proto::DungeonEntryInfo& recommend_dungeon_entry_info() const;
  ::proto::DungeonEntryInfo* mutable_recommend_dungeon_entry_info();
  ::proto::DungeonEntryInfo* release_recommend_dungeon_entry_info();
  void set_allocated_recommend_dungeon_entry_info(::proto::DungeonEntryInfo* recommend_dungeon_entry_info);

  // uint32 dungeon_entry_id = 15;
  void clear_dungeon_entry_id();
  static const int kDungeonEntryIdFieldNumber = 15;
  ::google::protobuf::uint32 dungeon_entry_id() const;
  void set_dungeon_entry_id(::google::protobuf::uint32 value);

  // uint32 recommend_dungeon_id = 4;
  void clear_recommend_dungeon_id();
  static const int kRecommendDungeonIdFieldNumber = 4;
  ::google::protobuf::uint32 recommend_dungeon_id() const;
  void set_recommend_dungeon_id(::google::protobuf::uint32 value);

  // uint32 dungeon_entry_config_id = 12;
  void clear_dungeon_entry_config_id();
  static const int kDungeonEntryConfigIdFieldNumber = 12;
  ::google::protobuf::uint32 dungeon_entry_config_id() const;
  void set_dungeon_entry_config_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.DailyDungeonEntryInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::DungeonEntryInfo* recommend_dungeon_entry_info_;
  ::google::protobuf::uint32 dungeon_entry_id_;
  ::google::protobuf::uint32 recommend_dungeon_id_;
  ::google::protobuf::uint32 dungeon_entry_config_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetDailyDungeonEntryInfoReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GetDailyDungeonEntryInfoReq) */ {
 public:
  GetDailyDungeonEntryInfoReq();
  virtual ~GetDailyDungeonEntryInfoReq();

  GetDailyDungeonEntryInfoReq(const GetDailyDungeonEntryInfoReq& from);

  inline GetDailyDungeonEntryInfoReq& operator=(const GetDailyDungeonEntryInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetDailyDungeonEntryInfoReq(GetDailyDungeonEntryInfoReq&& from) noexcept
    : GetDailyDungeonEntryInfoReq() {
    *this = ::std::move(from);
  }

  inline GetDailyDungeonEntryInfoReq& operator=(GetDailyDungeonEntryInfoReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetDailyDungeonEntryInfoReq& default_instance();

  static inline const GetDailyDungeonEntryInfoReq* internal_default_instance() {
    return reinterpret_cast<const GetDailyDungeonEntryInfoReq*>(
               &_GetDailyDungeonEntryInfoReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    65;

  void Swap(GetDailyDungeonEntryInfoReq* other);
  friend void swap(GetDailyDungeonEntryInfoReq& a, GetDailyDungeonEntryInfoReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetDailyDungeonEntryInfoReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GetDailyDungeonEntryInfoReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetDailyDungeonEntryInfoReq& from);
  void MergeFrom(const GetDailyDungeonEntryInfoReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetDailyDungeonEntryInfoReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 scene_id = 15;
  void clear_scene_id();
  static const int kSceneIdFieldNumber = 15;
  ::google::protobuf::uint32 scene_id() const;
  void set_scene_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GetDailyDungeonEntryInfoReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 scene_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetDailyDungeonEntryInfoRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GetDailyDungeonEntryInfoRsp) */ {
 public:
  GetDailyDungeonEntryInfoRsp();
  virtual ~GetDailyDungeonEntryInfoRsp();

  GetDailyDungeonEntryInfoRsp(const GetDailyDungeonEntryInfoRsp& from);

  inline GetDailyDungeonEntryInfoRsp& operator=(const GetDailyDungeonEntryInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetDailyDungeonEntryInfoRsp(GetDailyDungeonEntryInfoRsp&& from) noexcept
    : GetDailyDungeonEntryInfoRsp() {
    *this = ::std::move(from);
  }

  inline GetDailyDungeonEntryInfoRsp& operator=(GetDailyDungeonEntryInfoRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetDailyDungeonEntryInfoRsp& default_instance();

  static inline const GetDailyDungeonEntryInfoRsp* internal_default_instance() {
    return reinterpret_cast<const GetDailyDungeonEntryInfoRsp*>(
               &_GetDailyDungeonEntryInfoRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    66;

  void Swap(GetDailyDungeonEntryInfoRsp* other);
  friend void swap(GetDailyDungeonEntryInfoRsp& a, GetDailyDungeonEntryInfoRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetDailyDungeonEntryInfoRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GetDailyDungeonEntryInfoRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetDailyDungeonEntryInfoRsp& from);
  void MergeFrom(const GetDailyDungeonEntryInfoRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetDailyDungeonEntryInfoRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.DailyDungeonEntryInfo daily_dungeon_info_list = 2;
  int daily_dungeon_info_list_size() const;
  void clear_daily_dungeon_info_list();
  static const int kDailyDungeonInfoListFieldNumber = 2;
  const ::proto::DailyDungeonEntryInfo& daily_dungeon_info_list(int index) const;
  ::proto::DailyDungeonEntryInfo* mutable_daily_dungeon_info_list(int index);
  ::proto::DailyDungeonEntryInfo* add_daily_dungeon_info_list();
  ::google::protobuf::RepeatedPtrField< ::proto::DailyDungeonEntryInfo >*
      mutable_daily_dungeon_info_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::DailyDungeonEntryInfo >&
      daily_dungeon_info_list() const;

  // int32 retcode = 14;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 14;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.GetDailyDungeonEntryInfoRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::DailyDungeonEntryInfo > daily_dungeon_info_list_;
  ::google::protobuf::int32 retcode_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DungeonSlipRevivePointActivateReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DungeonSlipRevivePointActivateReq) */ {
 public:
  DungeonSlipRevivePointActivateReq();
  virtual ~DungeonSlipRevivePointActivateReq();

  DungeonSlipRevivePointActivateReq(const DungeonSlipRevivePointActivateReq& from);

  inline DungeonSlipRevivePointActivateReq& operator=(const DungeonSlipRevivePointActivateReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DungeonSlipRevivePointActivateReq(DungeonSlipRevivePointActivateReq&& from) noexcept
    : DungeonSlipRevivePointActivateReq() {
    *this = ::std::move(from);
  }

  inline DungeonSlipRevivePointActivateReq& operator=(DungeonSlipRevivePointActivateReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonSlipRevivePointActivateReq& default_instance();

  static inline const DungeonSlipRevivePointActivateReq* internal_default_instance() {
    return reinterpret_cast<const DungeonSlipRevivePointActivateReq*>(
               &_DungeonSlipRevivePointActivateReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    67;

  void Swap(DungeonSlipRevivePointActivateReq* other);
  friend void swap(DungeonSlipRevivePointActivateReq& a, DungeonSlipRevivePointActivateReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DungeonSlipRevivePointActivateReq* New() const PROTOBUF_FINAL { return New(NULL); }

  DungeonSlipRevivePointActivateReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DungeonSlipRevivePointActivateReq& from);
  void MergeFrom(const DungeonSlipRevivePointActivateReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DungeonSlipRevivePointActivateReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 slip_revive_point_id = 9;
  void clear_slip_revive_point_id();
  static const int kSlipRevivePointIdFieldNumber = 9;
  ::google::protobuf::uint32 slip_revive_point_id() const;
  void set_slip_revive_point_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.DungeonSlipRevivePointActivateReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 slip_revive_point_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DungeonSlipRevivePointActivateRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DungeonSlipRevivePointActivateRsp) */ {
 public:
  DungeonSlipRevivePointActivateRsp();
  virtual ~DungeonSlipRevivePointActivateRsp();

  DungeonSlipRevivePointActivateRsp(const DungeonSlipRevivePointActivateRsp& from);

  inline DungeonSlipRevivePointActivateRsp& operator=(const DungeonSlipRevivePointActivateRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DungeonSlipRevivePointActivateRsp(DungeonSlipRevivePointActivateRsp&& from) noexcept
    : DungeonSlipRevivePointActivateRsp() {
    *this = ::std::move(from);
  }

  inline DungeonSlipRevivePointActivateRsp& operator=(DungeonSlipRevivePointActivateRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonSlipRevivePointActivateRsp& default_instance();

  static inline const DungeonSlipRevivePointActivateRsp* internal_default_instance() {
    return reinterpret_cast<const DungeonSlipRevivePointActivateRsp*>(
               &_DungeonSlipRevivePointActivateRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    68;

  void Swap(DungeonSlipRevivePointActivateRsp* other);
  friend void swap(DungeonSlipRevivePointActivateRsp& a, DungeonSlipRevivePointActivateRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DungeonSlipRevivePointActivateRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  DungeonSlipRevivePointActivateRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DungeonSlipRevivePointActivateRsp& from);
  void MergeFrom(const DungeonSlipRevivePointActivateRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DungeonSlipRevivePointActivateRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 retcode = 4;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 4;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // uint32 slip_revive_point_id = 14;
  void clear_slip_revive_point_id();
  static const int kSlipRevivePointIdFieldNumber = 14;
  ::google::protobuf::uint32 slip_revive_point_id() const;
  void set_slip_revive_point_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.DungeonSlipRevivePointActivateRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::uint32 slip_revive_point_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DungeonInterruptChallengeReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DungeonInterruptChallengeReq) */ {
 public:
  DungeonInterruptChallengeReq();
  virtual ~DungeonInterruptChallengeReq();

  DungeonInterruptChallengeReq(const DungeonInterruptChallengeReq& from);

  inline DungeonInterruptChallengeReq& operator=(const DungeonInterruptChallengeReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DungeonInterruptChallengeReq(DungeonInterruptChallengeReq&& from) noexcept
    : DungeonInterruptChallengeReq() {
    *this = ::std::move(from);
  }

  inline DungeonInterruptChallengeReq& operator=(DungeonInterruptChallengeReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonInterruptChallengeReq& default_instance();

  static inline const DungeonInterruptChallengeReq* internal_default_instance() {
    return reinterpret_cast<const DungeonInterruptChallengeReq*>(
               &_DungeonInterruptChallengeReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    69;

  void Swap(DungeonInterruptChallengeReq* other);
  friend void swap(DungeonInterruptChallengeReq& a, DungeonInterruptChallengeReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DungeonInterruptChallengeReq* New() const PROTOBUF_FINAL { return New(NULL); }

  DungeonInterruptChallengeReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DungeonInterruptChallengeReq& from);
  void MergeFrom(const DungeonInterruptChallengeReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DungeonInterruptChallengeReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 challenge_index = 14;
  void clear_challenge_index();
  static const int kChallengeIndexFieldNumber = 14;
  ::google::protobuf::uint32 challenge_index() const;
  void set_challenge_index(::google::protobuf::uint32 value);

  // uint32 challenge_id = 11;
  void clear_challenge_id();
  static const int kChallengeIdFieldNumber = 11;
  ::google::protobuf::uint32 challenge_id() const;
  void set_challenge_id(::google::protobuf::uint32 value);

  // uint32 group_id = 13;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 13;
  ::google::protobuf::uint32 group_id() const;
  void set_group_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.DungeonInterruptChallengeReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 challenge_index_;
  ::google::protobuf::uint32 challenge_id_;
  ::google::protobuf::uint32 group_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DungeonInterruptChallengeRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DungeonInterruptChallengeRsp) */ {
 public:
  DungeonInterruptChallengeRsp();
  virtual ~DungeonInterruptChallengeRsp();

  DungeonInterruptChallengeRsp(const DungeonInterruptChallengeRsp& from);

  inline DungeonInterruptChallengeRsp& operator=(const DungeonInterruptChallengeRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DungeonInterruptChallengeRsp(DungeonInterruptChallengeRsp&& from) noexcept
    : DungeonInterruptChallengeRsp() {
    *this = ::std::move(from);
  }

  inline DungeonInterruptChallengeRsp& operator=(DungeonInterruptChallengeRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonInterruptChallengeRsp& default_instance();

  static inline const DungeonInterruptChallengeRsp* internal_default_instance() {
    return reinterpret_cast<const DungeonInterruptChallengeRsp*>(
               &_DungeonInterruptChallengeRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    70;

  void Swap(DungeonInterruptChallengeRsp* other);
  friend void swap(DungeonInterruptChallengeRsp& a, DungeonInterruptChallengeRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DungeonInterruptChallengeRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  DungeonInterruptChallengeRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DungeonInterruptChallengeRsp& from);
  void MergeFrom(const DungeonInterruptChallengeRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DungeonInterruptChallengeRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 retcode = 1;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // uint32 challenge_index = 2;
  void clear_challenge_index();
  static const int kChallengeIndexFieldNumber = 2;
  ::google::protobuf::uint32 challenge_index() const;
  void set_challenge_index(::google::protobuf::uint32 value);

  // uint32 challenge_id = 11;
  void clear_challenge_id();
  static const int kChallengeIdFieldNumber = 11;
  ::google::protobuf::uint32 challenge_id() const;
  void set_challenge_id(::google::protobuf::uint32 value);

  // uint32 group_id = 15;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 15;
  ::google::protobuf::uint32 group_id() const;
  void set_group_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.DungeonInterruptChallengeRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::uint32 challenge_index_;
  ::google::protobuf::uint32 challenge_id_;
  ::google::protobuf::uint32 group_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InteractDailyDungeonInfoNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.InteractDailyDungeonInfoNotify) */ {
 public:
  InteractDailyDungeonInfoNotify();
  virtual ~InteractDailyDungeonInfoNotify();

  InteractDailyDungeonInfoNotify(const InteractDailyDungeonInfoNotify& from);

  inline InteractDailyDungeonInfoNotify& operator=(const InteractDailyDungeonInfoNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InteractDailyDungeonInfoNotify(InteractDailyDungeonInfoNotify&& from) noexcept
    : InteractDailyDungeonInfoNotify() {
    *this = ::std::move(from);
  }

  inline InteractDailyDungeonInfoNotify& operator=(InteractDailyDungeonInfoNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InteractDailyDungeonInfoNotify& default_instance();

  static inline const InteractDailyDungeonInfoNotify* internal_default_instance() {
    return reinterpret_cast<const InteractDailyDungeonInfoNotify*>(
               &_InteractDailyDungeonInfoNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    71;

  void Swap(InteractDailyDungeonInfoNotify* other);
  friend void swap(InteractDailyDungeonInfoNotify& a, InteractDailyDungeonInfoNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InteractDailyDungeonInfoNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  InteractDailyDungeonInfoNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InteractDailyDungeonInfoNotify& from);
  void MergeFrom(const InteractDailyDungeonInfoNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InteractDailyDungeonInfoNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.InteractDailyDungeonInfoNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DungeonRestartReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DungeonRestartReq) */ {
 public:
  DungeonRestartReq();
  virtual ~DungeonRestartReq();

  DungeonRestartReq(const DungeonRestartReq& from);

  inline DungeonRestartReq& operator=(const DungeonRestartReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DungeonRestartReq(DungeonRestartReq&& from) noexcept
    : DungeonRestartReq() {
    *this = ::std::move(from);
  }

  inline DungeonRestartReq& operator=(DungeonRestartReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonRestartReq& default_instance();

  static inline const DungeonRestartReq* internal_default_instance() {
    return reinterpret_cast<const DungeonRestartReq*>(
               &_DungeonRestartReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    72;

  void Swap(DungeonRestartReq* other);
  friend void swap(DungeonRestartReq& a, DungeonRestartReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DungeonRestartReq* New() const PROTOBUF_FINAL { return New(NULL); }

  DungeonRestartReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DungeonRestartReq& from);
  void MergeFrom(const DungeonRestartReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DungeonRestartReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.DungeonRestartReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DungeonRestartRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DungeonRestartRsp) */ {
 public:
  DungeonRestartRsp();
  virtual ~DungeonRestartRsp();

  DungeonRestartRsp(const DungeonRestartRsp& from);

  inline DungeonRestartRsp& operator=(const DungeonRestartRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DungeonRestartRsp(DungeonRestartRsp&& from) noexcept
    : DungeonRestartRsp() {
    *this = ::std::move(from);
  }

  inline DungeonRestartRsp& operator=(DungeonRestartRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonRestartRsp& default_instance();

  static inline const DungeonRestartRsp* internal_default_instance() {
    return reinterpret_cast<const DungeonRestartRsp*>(
               &_DungeonRestartRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    73;

  void Swap(DungeonRestartRsp* other);
  friend void swap(DungeonRestartRsp& a, DungeonRestartRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DungeonRestartRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  DungeonRestartRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DungeonRestartRsp& from);
  void MergeFrom(const DungeonRestartRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DungeonRestartRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 dungeon_id = 15;
  void clear_dungeon_id();
  static const int kDungeonIdFieldNumber = 15;
  ::google::protobuf::uint32 dungeon_id() const;
  void set_dungeon_id(::google::protobuf::uint32 value);

  // int32 retcode = 9;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 9;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // uint32 point_id = 14;
  void clear_point_id();
  static const int kPointIdFieldNumber = 14;
  ::google::protobuf::uint32 point_id() const;
  void set_point_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.DungeonRestartRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 dungeon_id_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::uint32 point_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DungeonRestartInviteNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DungeonRestartInviteNotify) */ {
 public:
  DungeonRestartInviteNotify();
  virtual ~DungeonRestartInviteNotify();

  DungeonRestartInviteNotify(const DungeonRestartInviteNotify& from);

  inline DungeonRestartInviteNotify& operator=(const DungeonRestartInviteNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DungeonRestartInviteNotify(DungeonRestartInviteNotify&& from) noexcept
    : DungeonRestartInviteNotify() {
    *this = ::std::move(from);
  }

  inline DungeonRestartInviteNotify& operator=(DungeonRestartInviteNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonRestartInviteNotify& default_instance();

  static inline const DungeonRestartInviteNotify* internal_default_instance() {
    return reinterpret_cast<const DungeonRestartInviteNotify*>(
               &_DungeonRestartInviteNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    74;

  void Swap(DungeonRestartInviteNotify* other);
  friend void swap(DungeonRestartInviteNotify& a, DungeonRestartInviteNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DungeonRestartInviteNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  DungeonRestartInviteNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DungeonRestartInviteNotify& from);
  void MergeFrom(const DungeonRestartInviteNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DungeonRestartInviteNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 player_uid = 3;
  void clear_player_uid();
  static const int kPlayerUidFieldNumber = 3;
  ::google::protobuf::uint32 player_uid() const;
  void set_player_uid(::google::protobuf::uint32 value);

  // uint32 dungeon_id = 10;
  void clear_dungeon_id();
  static const int kDungeonIdFieldNumber = 10;
  ::google::protobuf::uint32 dungeon_id() const;
  void set_dungeon_id(::google::protobuf::uint32 value);

  // uint32 point_id = 13;
  void clear_point_id();
  static const int kPointIdFieldNumber = 13;
  ::google::protobuf::uint32 point_id() const;
  void set_point_id(::google::protobuf::uint32 value);

  // uint32 cd = 15;
  void clear_cd();
  static const int kCdFieldNumber = 15;
  ::google::protobuf::uint32 cd() const;
  void set_cd(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.DungeonRestartInviteNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 player_uid_;
  ::google::protobuf::uint32 dungeon_id_;
  ::google::protobuf::uint32 point_id_;
  ::google::protobuf::uint32 cd_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DungeonRestartInviteReplyReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DungeonRestartInviteReplyReq) */ {
 public:
  DungeonRestartInviteReplyReq();
  virtual ~DungeonRestartInviteReplyReq();

  DungeonRestartInviteReplyReq(const DungeonRestartInviteReplyReq& from);

  inline DungeonRestartInviteReplyReq& operator=(const DungeonRestartInviteReplyReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DungeonRestartInviteReplyReq(DungeonRestartInviteReplyReq&& from) noexcept
    : DungeonRestartInviteReplyReq() {
    *this = ::std::move(from);
  }

  inline DungeonRestartInviteReplyReq& operator=(DungeonRestartInviteReplyReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonRestartInviteReplyReq& default_instance();

  static inline const DungeonRestartInviteReplyReq* internal_default_instance() {
    return reinterpret_cast<const DungeonRestartInviteReplyReq*>(
               &_DungeonRestartInviteReplyReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    75;

  void Swap(DungeonRestartInviteReplyReq* other);
  friend void swap(DungeonRestartInviteReplyReq& a, DungeonRestartInviteReplyReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DungeonRestartInviteReplyReq* New() const PROTOBUF_FINAL { return New(NULL); }

  DungeonRestartInviteReplyReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DungeonRestartInviteReplyReq& from);
  void MergeFrom(const DungeonRestartInviteReplyReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DungeonRestartInviteReplyReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool is_accept = 11;
  void clear_is_accept();
  static const int kIsAcceptFieldNumber = 11;
  bool is_accept() const;
  void set_is_accept(bool value);

  // @@protoc_insertion_point(class_scope:proto.DungeonRestartInviteReplyReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool is_accept_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DungeonRestartInviteReplyRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DungeonRestartInviteReplyRsp) */ {
 public:
  DungeonRestartInviteReplyRsp();
  virtual ~DungeonRestartInviteReplyRsp();

  DungeonRestartInviteReplyRsp(const DungeonRestartInviteReplyRsp& from);

  inline DungeonRestartInviteReplyRsp& operator=(const DungeonRestartInviteReplyRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DungeonRestartInviteReplyRsp(DungeonRestartInviteReplyRsp&& from) noexcept
    : DungeonRestartInviteReplyRsp() {
    *this = ::std::move(from);
  }

  inline DungeonRestartInviteReplyRsp& operator=(DungeonRestartInviteReplyRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonRestartInviteReplyRsp& default_instance();

  static inline const DungeonRestartInviteReplyRsp* internal_default_instance() {
    return reinterpret_cast<const DungeonRestartInviteReplyRsp*>(
               &_DungeonRestartInviteReplyRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    76;

  void Swap(DungeonRestartInviteReplyRsp* other);
  friend void swap(DungeonRestartInviteReplyRsp& a, DungeonRestartInviteReplyRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DungeonRestartInviteReplyRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  DungeonRestartInviteReplyRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DungeonRestartInviteReplyRsp& from);
  void MergeFrom(const DungeonRestartInviteReplyRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DungeonRestartInviteReplyRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool is_accept = 10;
  void clear_is_accept();
  static const int kIsAcceptFieldNumber = 10;
  bool is_accept() const;
  void set_is_accept(bool value);

  // bool is_trans_point = 1;
  void clear_is_trans_point();
  static const int kIsTransPointFieldNumber = 1;
  bool is_trans_point() const;
  void set_is_trans_point(bool value);

  // int32 retcode = 9;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 9;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.DungeonRestartInviteReplyRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool is_accept_;
  bool is_trans_point_;
  ::google::protobuf::int32 retcode_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DungeonRestartInviteReplyNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DungeonRestartInviteReplyNotify) */ {
 public:
  DungeonRestartInviteReplyNotify();
  virtual ~DungeonRestartInviteReplyNotify();

  DungeonRestartInviteReplyNotify(const DungeonRestartInviteReplyNotify& from);

  inline DungeonRestartInviteReplyNotify& operator=(const DungeonRestartInviteReplyNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DungeonRestartInviteReplyNotify(DungeonRestartInviteReplyNotify&& from) noexcept
    : DungeonRestartInviteReplyNotify() {
    *this = ::std::move(from);
  }

  inline DungeonRestartInviteReplyNotify& operator=(DungeonRestartInviteReplyNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonRestartInviteReplyNotify& default_instance();

  static inline const DungeonRestartInviteReplyNotify* internal_default_instance() {
    return reinterpret_cast<const DungeonRestartInviteReplyNotify*>(
               &_DungeonRestartInviteReplyNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    77;

  void Swap(DungeonRestartInviteReplyNotify* other);
  friend void swap(DungeonRestartInviteReplyNotify& a, DungeonRestartInviteReplyNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DungeonRestartInviteReplyNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  DungeonRestartInviteReplyNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DungeonRestartInviteReplyNotify& from);
  void MergeFrom(const DungeonRestartInviteReplyNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DungeonRestartInviteReplyNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool is_accept = 6;
  void clear_is_accept();
  static const int kIsAcceptFieldNumber = 6;
  bool is_accept() const;
  void set_is_accept(bool value);

  // uint32 player_uid = 9;
  void clear_player_uid();
  static const int kPlayerUidFieldNumber = 9;
  ::google::protobuf::uint32 player_uid() const;
  void set_player_uid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.DungeonRestartInviteReplyNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool is_accept_;
  ::google::protobuf::uint32 player_uid_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DungeonRestartResultNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DungeonRestartResultNotify) */ {
 public:
  DungeonRestartResultNotify();
  virtual ~DungeonRestartResultNotify();

  DungeonRestartResultNotify(const DungeonRestartResultNotify& from);

  inline DungeonRestartResultNotify& operator=(const DungeonRestartResultNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DungeonRestartResultNotify(DungeonRestartResultNotify&& from) noexcept
    : DungeonRestartResultNotify() {
    *this = ::std::move(from);
  }

  inline DungeonRestartResultNotify& operator=(DungeonRestartResultNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonRestartResultNotify& default_instance();

  static inline const DungeonRestartResultNotify* internal_default_instance() {
    return reinterpret_cast<const DungeonRestartResultNotify*>(
               &_DungeonRestartResultNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    78;

  void Swap(DungeonRestartResultNotify* other);
  friend void swap(DungeonRestartResultNotify& a, DungeonRestartResultNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DungeonRestartResultNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  DungeonRestartResultNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DungeonRestartResultNotify& from);
  void MergeFrom(const DungeonRestartResultNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DungeonRestartResultNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool is_add_accpet = 9;
  void clear_is_add_accpet();
  static const int kIsAddAccpetFieldNumber = 9;
  bool is_add_accpet() const;
  void set_is_add_accpet(bool value);

  // @@protoc_insertion_point(class_scope:proto.DungeonRestartResultNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool is_add_accpet_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DungeonCandidateTeamSetChangingAvatarReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DungeonCandidateTeamSetChangingAvatarReq) */ {
 public:
  DungeonCandidateTeamSetChangingAvatarReq();
  virtual ~DungeonCandidateTeamSetChangingAvatarReq();

  DungeonCandidateTeamSetChangingAvatarReq(const DungeonCandidateTeamSetChangingAvatarReq& from);

  inline DungeonCandidateTeamSetChangingAvatarReq& operator=(const DungeonCandidateTeamSetChangingAvatarReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DungeonCandidateTeamSetChangingAvatarReq(DungeonCandidateTeamSetChangingAvatarReq&& from) noexcept
    : DungeonCandidateTeamSetChangingAvatarReq() {
    *this = ::std::move(from);
  }

  inline DungeonCandidateTeamSetChangingAvatarReq& operator=(DungeonCandidateTeamSetChangingAvatarReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonCandidateTeamSetChangingAvatarReq& default_instance();

  static inline const DungeonCandidateTeamSetChangingAvatarReq* internal_default_instance() {
    return reinterpret_cast<const DungeonCandidateTeamSetChangingAvatarReq*>(
               &_DungeonCandidateTeamSetChangingAvatarReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    79;

  void Swap(DungeonCandidateTeamSetChangingAvatarReq* other);
  friend void swap(DungeonCandidateTeamSetChangingAvatarReq& a, DungeonCandidateTeamSetChangingAvatarReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DungeonCandidateTeamSetChangingAvatarReq* New() const PROTOBUF_FINAL { return New(NULL); }

  DungeonCandidateTeamSetChangingAvatarReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DungeonCandidateTeamSetChangingAvatarReq& from);
  void MergeFrom(const DungeonCandidateTeamSetChangingAvatarReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DungeonCandidateTeamSetChangingAvatarReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool is_changing_avatar = 12;
  void clear_is_changing_avatar();
  static const int kIsChangingAvatarFieldNumber = 12;
  bool is_changing_avatar() const;
  void set_is_changing_avatar(bool value);

  // @@protoc_insertion_point(class_scope:proto.DungeonCandidateTeamSetChangingAvatarReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool is_changing_avatar_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DungeonCandidateTeamSetChangingAvatarRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DungeonCandidateTeamSetChangingAvatarRsp) */ {
 public:
  DungeonCandidateTeamSetChangingAvatarRsp();
  virtual ~DungeonCandidateTeamSetChangingAvatarRsp();

  DungeonCandidateTeamSetChangingAvatarRsp(const DungeonCandidateTeamSetChangingAvatarRsp& from);

  inline DungeonCandidateTeamSetChangingAvatarRsp& operator=(const DungeonCandidateTeamSetChangingAvatarRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DungeonCandidateTeamSetChangingAvatarRsp(DungeonCandidateTeamSetChangingAvatarRsp&& from) noexcept
    : DungeonCandidateTeamSetChangingAvatarRsp() {
    *this = ::std::move(from);
  }

  inline DungeonCandidateTeamSetChangingAvatarRsp& operator=(DungeonCandidateTeamSetChangingAvatarRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonCandidateTeamSetChangingAvatarRsp& default_instance();

  static inline const DungeonCandidateTeamSetChangingAvatarRsp* internal_default_instance() {
    return reinterpret_cast<const DungeonCandidateTeamSetChangingAvatarRsp*>(
               &_DungeonCandidateTeamSetChangingAvatarRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    80;

  void Swap(DungeonCandidateTeamSetChangingAvatarRsp* other);
  friend void swap(DungeonCandidateTeamSetChangingAvatarRsp& a, DungeonCandidateTeamSetChangingAvatarRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DungeonCandidateTeamSetChangingAvatarRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  DungeonCandidateTeamSetChangingAvatarRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DungeonCandidateTeamSetChangingAvatarRsp& from);
  void MergeFrom(const DungeonCandidateTeamSetChangingAvatarRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DungeonCandidateTeamSetChangingAvatarRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 retcode = 2;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 2;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.DungeonCandidateTeamSetChangingAvatarRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 retcode_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MistTrialFloorLevelNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.MistTrialFloorLevelNotify) */ {
 public:
  MistTrialFloorLevelNotify();
  virtual ~MistTrialFloorLevelNotify();

  MistTrialFloorLevelNotify(const MistTrialFloorLevelNotify& from);

  inline MistTrialFloorLevelNotify& operator=(const MistTrialFloorLevelNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MistTrialFloorLevelNotify(MistTrialFloorLevelNotify&& from) noexcept
    : MistTrialFloorLevelNotify() {
    *this = ::std::move(from);
  }

  inline MistTrialFloorLevelNotify& operator=(MistTrialFloorLevelNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MistTrialFloorLevelNotify& default_instance();

  static inline const MistTrialFloorLevelNotify* internal_default_instance() {
    return reinterpret_cast<const MistTrialFloorLevelNotify*>(
               &_MistTrialFloorLevelNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    81;

  void Swap(MistTrialFloorLevelNotify* other);
  friend void swap(MistTrialFloorLevelNotify& a, MistTrialFloorLevelNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MistTrialFloorLevelNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  MistTrialFloorLevelNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MistTrialFloorLevelNotify& from);
  void MergeFrom(const MistTrialFloorLevelNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MistTrialFloorLevelNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 floor_level = 7;
  void clear_floor_level();
  static const int kFloorLevelFieldNumber = 7;
  ::google::protobuf::uint32 floor_level() const;
  void set_floor_level(::google::protobuf::uint32 value);

  // uint32 dungeon_scene_id = 14;
  void clear_dungeon_scene_id();
  static const int kDungeonSceneIdFieldNumber = 14;
  ::google::protobuf::uint32 dungeon_scene_id() const;
  void set_dungeon_scene_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.MistTrialFloorLevelNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 floor_level_;
  ::google::protobuf::uint32 dungeon_scene_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DungeonReviseLevelNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.DungeonReviseLevelNotify) */ {
 public:
  DungeonReviseLevelNotify();
  virtual ~DungeonReviseLevelNotify();

  DungeonReviseLevelNotify(const DungeonReviseLevelNotify& from);

  inline DungeonReviseLevelNotify& operator=(const DungeonReviseLevelNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DungeonReviseLevelNotify(DungeonReviseLevelNotify&& from) noexcept
    : DungeonReviseLevelNotify() {
    *this = ::std::move(from);
  }

  inline DungeonReviseLevelNotify& operator=(DungeonReviseLevelNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DungeonReviseLevelNotify& default_instance();

  static inline const DungeonReviseLevelNotify* internal_default_instance() {
    return reinterpret_cast<const DungeonReviseLevelNotify*>(
               &_DungeonReviseLevelNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    82;

  void Swap(DungeonReviseLevelNotify* other);
  friend void swap(DungeonReviseLevelNotify& a, DungeonReviseLevelNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DungeonReviseLevelNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  DungeonReviseLevelNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DungeonReviseLevelNotify& from);
  void MergeFrom(const DungeonReviseLevelNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DungeonReviseLevelNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 dungeon_id = 3;
  void clear_dungeon_id();
  static const int kDungeonIdFieldNumber = 3;
  ::google::protobuf::uint32 dungeon_id() const;
  void set_dungeon_id(::google::protobuf::uint32 value);

  // uint32 scene_level = 5;
  void clear_scene_level();
  static const int kSceneLevelFieldNumber = 5;
  ::google::protobuf::uint32 scene_level() const;
  void set_scene_level(::google::protobuf::uint32 value);

  // uint32 revise_level = 10;
  void clear_revise_level();
  static const int kReviseLevelFieldNumber = 10;
  ::google::protobuf::uint32 revise_level() const;
  void set_revise_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.DungeonReviseLevelNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 dungeon_id_;
  ::google::protobuf::uint32 scene_level_;
  ::google::protobuf::uint32 revise_level_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fdungeon_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DungeonEntryInfoReq

// uint32 point_id = 2;
inline void DungeonEntryInfoReq::clear_point_id() {
  point_id_ = 0u;
}
inline ::google::protobuf::uint32 DungeonEntryInfoReq::point_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonEntryInfoReq.point_id)
  return point_id_;
}
inline void DungeonEntryInfoReq::set_point_id(::google::protobuf::uint32 value) {
  
  point_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonEntryInfoReq.point_id)
}

// uint32 scene_id = 9;
inline void DungeonEntryInfoReq::clear_scene_id() {
  scene_id_ = 0u;
}
inline ::google::protobuf::uint32 DungeonEntryInfoReq::scene_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonEntryInfoReq.scene_id)
  return scene_id_;
}
inline void DungeonEntryInfoReq::set_scene_id(::google::protobuf::uint32 value) {
  
  scene_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonEntryInfoReq.scene_id)
}

// repeated .proto.Uint32Pair scene_point_id_list = 4;
inline int DungeonEntryInfoReq::scene_point_id_list_size() const {
  return scene_point_id_list_.size();
}
inline void DungeonEntryInfoReq::clear_scene_point_id_list() {
  scene_point_id_list_.Clear();
}
inline const ::proto::Uint32Pair& DungeonEntryInfoReq::scene_point_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.DungeonEntryInfoReq.scene_point_id_list)
  return scene_point_id_list_.Get(index);
}
inline ::proto::Uint32Pair* DungeonEntryInfoReq::mutable_scene_point_id_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.DungeonEntryInfoReq.scene_point_id_list)
  return scene_point_id_list_.Mutable(index);
}
inline ::proto::Uint32Pair* DungeonEntryInfoReq::add_scene_point_id_list() {
  // @@protoc_insertion_point(field_add:proto.DungeonEntryInfoReq.scene_point_id_list)
  return scene_point_id_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::Uint32Pair >*
DungeonEntryInfoReq::mutable_scene_point_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.DungeonEntryInfoReq.scene_point_id_list)
  return &scene_point_id_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::Uint32Pair >&
DungeonEntryInfoReq::scene_point_id_list() const {
  // @@protoc_insertion_point(field_list:proto.DungeonEntryInfoReq.scene_point_id_list)
  return scene_point_id_list_;
}

// -------------------------------------------------------------------

// DungeonEntryInfo

// uint32 end_time = 6;
inline void DungeonEntryInfo::clear_end_time() {
  end_time_ = 0u;
}
inline ::google::protobuf::uint32 DungeonEntryInfo::end_time() const {
  // @@protoc_insertion_point(field_get:proto.DungeonEntryInfo.end_time)
  return end_time_;
}
inline void DungeonEntryInfo::set_end_time(::google::protobuf::uint32 value) {
  
  end_time_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonEntryInfo.end_time)
}

// uint32 dungeon_id = 5;
inline void DungeonEntryInfo::clear_dungeon_id() {
  dungeon_id_ = 0u;
}
inline ::google::protobuf::uint32 DungeonEntryInfo::dungeon_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonEntryInfo.dungeon_id)
  return dungeon_id_;
}
inline void DungeonEntryInfo::set_dungeon_id(::google::protobuf::uint32 value) {
  
  dungeon_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonEntryInfo.dungeon_id)
}

// uint32 boss_chest_num = 12;
inline void DungeonEntryInfo::clear_boss_chest_num() {
  boss_chest_num_ = 0u;
}
inline ::google::protobuf::uint32 DungeonEntryInfo::boss_chest_num() const {
  // @@protoc_insertion_point(field_get:proto.DungeonEntryInfo.boss_chest_num)
  return boss_chest_num_;
}
inline void DungeonEntryInfo::set_boss_chest_num(::google::protobuf::uint32 value) {
  
  boss_chest_num_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonEntryInfo.boss_chest_num)
}

// uint32 max_boss_chest_num = 13;
inline void DungeonEntryInfo::clear_max_boss_chest_num() {
  max_boss_chest_num_ = 0u;
}
inline ::google::protobuf::uint32 DungeonEntryInfo::max_boss_chest_num() const {
  // @@protoc_insertion_point(field_get:proto.DungeonEntryInfo.max_boss_chest_num)
  return max_boss_chest_num_;
}
inline void DungeonEntryInfo::set_max_boss_chest_num(::google::protobuf::uint32 value) {
  
  max_boss_chest_num_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonEntryInfo.max_boss_chest_num)
}

// uint32 next_refresh_time = 11;
inline void DungeonEntryInfo::clear_next_refresh_time() {
  next_refresh_time_ = 0u;
}
inline ::google::protobuf::uint32 DungeonEntryInfo::next_refresh_time() const {
  // @@protoc_insertion_point(field_get:proto.DungeonEntryInfo.next_refresh_time)
  return next_refresh_time_;
}
inline void DungeonEntryInfo::set_next_refresh_time(::google::protobuf::uint32 value) {
  
  next_refresh_time_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonEntryInfo.next_refresh_time)
}

// .proto.WeeklyBossResinDiscountInfo weekly_boss_resin_discount_info = 9;
inline bool DungeonEntryInfo::has_weekly_boss_resin_discount_info() const {
  return this != internal_default_instance() && weekly_boss_resin_discount_info_ != NULL;
}
inline void DungeonEntryInfo::clear_weekly_boss_resin_discount_info() {
  if (GetArenaNoVirtual() == NULL && weekly_boss_resin_discount_info_ != NULL) delete weekly_boss_resin_discount_info_;
  weekly_boss_resin_discount_info_ = NULL;
}
inline const ::proto::WeeklyBossResinDiscountInfo& DungeonEntryInfo::weekly_boss_resin_discount_info() const {
  const ::proto::WeeklyBossResinDiscountInfo* p = weekly_boss_resin_discount_info_;
  // @@protoc_insertion_point(field_get:proto.DungeonEntryInfo.weekly_boss_resin_discount_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::WeeklyBossResinDiscountInfo*>(
      &::proto::_WeeklyBossResinDiscountInfo_default_instance_);
}
inline ::proto::WeeklyBossResinDiscountInfo* DungeonEntryInfo::mutable_weekly_boss_resin_discount_info() {
  
  if (weekly_boss_resin_discount_info_ == NULL) {
    weekly_boss_resin_discount_info_ = new ::proto::WeeklyBossResinDiscountInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.DungeonEntryInfo.weekly_boss_resin_discount_info)
  return weekly_boss_resin_discount_info_;
}
inline ::proto::WeeklyBossResinDiscountInfo* DungeonEntryInfo::release_weekly_boss_resin_discount_info() {
  // @@protoc_insertion_point(field_release:proto.DungeonEntryInfo.weekly_boss_resin_discount_info)
  
  ::proto::WeeklyBossResinDiscountInfo* temp = weekly_boss_resin_discount_info_;
  weekly_boss_resin_discount_info_ = NULL;
  return temp;
}
inline void DungeonEntryInfo::set_allocated_weekly_boss_resin_discount_info(::proto::WeeklyBossResinDiscountInfo* weekly_boss_resin_discount_info) {
  delete weekly_boss_resin_discount_info_;
  weekly_boss_resin_discount_info_ = weekly_boss_resin_discount_info;
  if (weekly_boss_resin_discount_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.DungeonEntryInfo.weekly_boss_resin_discount_info)
}

// uint32 start_time = 15;
inline void DungeonEntryInfo::clear_start_time() {
  start_time_ = 0u;
}
inline ::google::protobuf::uint32 DungeonEntryInfo::start_time() const {
  // @@protoc_insertion_point(field_get:proto.DungeonEntryInfo.start_time)
  return start_time_;
}
inline void DungeonEntryInfo::set_start_time(::google::protobuf::uint32 value) {
  
  start_time_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonEntryInfo.start_time)
}

// bool is_passed = 4;
inline void DungeonEntryInfo::clear_is_passed() {
  is_passed_ = false;
}
inline bool DungeonEntryInfo::is_passed() const {
  // @@protoc_insertion_point(field_get:proto.DungeonEntryInfo.is_passed)
  return is_passed_;
}
inline void DungeonEntryInfo::set_is_passed(bool value) {
  
  is_passed_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonEntryInfo.is_passed)
}

// uint32 left_times = 7;
inline void DungeonEntryInfo::clear_left_times() {
  left_times_ = 0u;
}
inline ::google::protobuf::uint32 DungeonEntryInfo::left_times() const {
  // @@protoc_insertion_point(field_get:proto.DungeonEntryInfo.left_times)
  return left_times_;
}
inline void DungeonEntryInfo::set_left_times(::google::protobuf::uint32 value) {
  
  left_times_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonEntryInfo.left_times)
}

// -------------------------------------------------------------------

// DungeonEntryPointInfo

// uint32 scene_id = 12;
inline void DungeonEntryPointInfo::clear_scene_id() {
  scene_id_ = 0u;
}
inline ::google::protobuf::uint32 DungeonEntryPointInfo::scene_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonEntryPointInfo.scene_id)
  return scene_id_;
}
inline void DungeonEntryPointInfo::set_scene_id(::google::protobuf::uint32 value) {
  
  scene_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonEntryPointInfo.scene_id)
}

// uint32 point_id = 6;
inline void DungeonEntryPointInfo::clear_point_id() {
  point_id_ = 0u;
}
inline ::google::protobuf::uint32 DungeonEntryPointInfo::point_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonEntryPointInfo.point_id)
  return point_id_;
}
inline void DungeonEntryPointInfo::set_point_id(::google::protobuf::uint32 value) {
  
  point_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonEntryPointInfo.point_id)
}

// repeated .proto.DungeonEntryInfo dungeon_entry_list = 1;
inline int DungeonEntryPointInfo::dungeon_entry_list_size() const {
  return dungeon_entry_list_.size();
}
inline void DungeonEntryPointInfo::clear_dungeon_entry_list() {
  dungeon_entry_list_.Clear();
}
inline const ::proto::DungeonEntryInfo& DungeonEntryPointInfo::dungeon_entry_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.DungeonEntryPointInfo.dungeon_entry_list)
  return dungeon_entry_list_.Get(index);
}
inline ::proto::DungeonEntryInfo* DungeonEntryPointInfo::mutable_dungeon_entry_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.DungeonEntryPointInfo.dungeon_entry_list)
  return dungeon_entry_list_.Mutable(index);
}
inline ::proto::DungeonEntryInfo* DungeonEntryPointInfo::add_dungeon_entry_list() {
  // @@protoc_insertion_point(field_add:proto.DungeonEntryPointInfo.dungeon_entry_list)
  return dungeon_entry_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::DungeonEntryInfo >*
DungeonEntryPointInfo::mutable_dungeon_entry_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.DungeonEntryPointInfo.dungeon_entry_list)
  return &dungeon_entry_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::DungeonEntryInfo >&
DungeonEntryPointInfo::dungeon_entry_list() const {
  // @@protoc_insertion_point(field_list:proto.DungeonEntryPointInfo.dungeon_entry_list)
  return dungeon_entry_list_;
}

// uint32 recommend_dungeon_id = 8;
inline void DungeonEntryPointInfo::clear_recommend_dungeon_id() {
  recommend_dungeon_id_ = 0u;
}
inline ::google::protobuf::uint32 DungeonEntryPointInfo::recommend_dungeon_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonEntryPointInfo.recommend_dungeon_id)
  return recommend_dungeon_id_;
}
inline void DungeonEntryPointInfo::set_recommend_dungeon_id(::google::protobuf::uint32 value) {
  
  recommend_dungeon_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonEntryPointInfo.recommend_dungeon_id)
}

// -------------------------------------------------------------------

// DungeonEntryInfoRsp

// repeated .proto.DungeonEntryInfo dungeon_entry_list = 12;
inline int DungeonEntryInfoRsp::dungeon_entry_list_size() const {
  return dungeon_entry_list_.size();
}
inline void DungeonEntryInfoRsp::clear_dungeon_entry_list() {
  dungeon_entry_list_.Clear();
}
inline const ::proto::DungeonEntryInfo& DungeonEntryInfoRsp::dungeon_entry_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.DungeonEntryInfoRsp.dungeon_entry_list)
  return dungeon_entry_list_.Get(index);
}
inline ::proto::DungeonEntryInfo* DungeonEntryInfoRsp::mutable_dungeon_entry_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.DungeonEntryInfoRsp.dungeon_entry_list)
  return dungeon_entry_list_.Mutable(index);
}
inline ::proto::DungeonEntryInfo* DungeonEntryInfoRsp::add_dungeon_entry_list() {
  // @@protoc_insertion_point(field_add:proto.DungeonEntryInfoRsp.dungeon_entry_list)
  return dungeon_entry_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::DungeonEntryInfo >*
DungeonEntryInfoRsp::mutable_dungeon_entry_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.DungeonEntryInfoRsp.dungeon_entry_list)
  return &dungeon_entry_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::DungeonEntryInfo >&
DungeonEntryInfoRsp::dungeon_entry_list() const {
  // @@protoc_insertion_point(field_list:proto.DungeonEntryInfoRsp.dungeon_entry_list)
  return dungeon_entry_list_;
}

// uint32 point_id = 15;
inline void DungeonEntryInfoRsp::clear_point_id() {
  point_id_ = 0u;
}
inline ::google::protobuf::uint32 DungeonEntryInfoRsp::point_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonEntryInfoRsp.point_id)
  return point_id_;
}
inline void DungeonEntryInfoRsp::set_point_id(::google::protobuf::uint32 value) {
  
  point_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonEntryInfoRsp.point_id)
}

// repeated .proto.DungeonEntryPointInfo dungeon_entry_point_list = 4;
inline int DungeonEntryInfoRsp::dungeon_entry_point_list_size() const {
  return dungeon_entry_point_list_.size();
}
inline void DungeonEntryInfoRsp::clear_dungeon_entry_point_list() {
  dungeon_entry_point_list_.Clear();
}
inline const ::proto::DungeonEntryPointInfo& DungeonEntryInfoRsp::dungeon_entry_point_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.DungeonEntryInfoRsp.dungeon_entry_point_list)
  return dungeon_entry_point_list_.Get(index);
}
inline ::proto::DungeonEntryPointInfo* DungeonEntryInfoRsp::mutable_dungeon_entry_point_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.DungeonEntryInfoRsp.dungeon_entry_point_list)
  return dungeon_entry_point_list_.Mutable(index);
}
inline ::proto::DungeonEntryPointInfo* DungeonEntryInfoRsp::add_dungeon_entry_point_list() {
  // @@protoc_insertion_point(field_add:proto.DungeonEntryInfoRsp.dungeon_entry_point_list)
  return dungeon_entry_point_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::DungeonEntryPointInfo >*
DungeonEntryInfoRsp::mutable_dungeon_entry_point_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.DungeonEntryInfoRsp.dungeon_entry_point_list)
  return &dungeon_entry_point_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::DungeonEntryPointInfo >&
DungeonEntryInfoRsp::dungeon_entry_point_list() const {
  // @@protoc_insertion_point(field_list:proto.DungeonEntryInfoRsp.dungeon_entry_point_list)
  return dungeon_entry_point_list_;
}

// uint32 recommend_dungeon_id = 14;
inline void DungeonEntryInfoRsp::clear_recommend_dungeon_id() {
  recommend_dungeon_id_ = 0u;
}
inline ::google::protobuf::uint32 DungeonEntryInfoRsp::recommend_dungeon_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonEntryInfoRsp.recommend_dungeon_id)
  return recommend_dungeon_id_;
}
inline void DungeonEntryInfoRsp::set_recommend_dungeon_id(::google::protobuf::uint32 value) {
  
  recommend_dungeon_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonEntryInfoRsp.recommend_dungeon_id)
}

// int32 retcode = 11;
inline void DungeonEntryInfoRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 DungeonEntryInfoRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.DungeonEntryInfoRsp.retcode)
  return retcode_;
}
inline void DungeonEntryInfoRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonEntryInfoRsp.retcode)
}

// -------------------------------------------------------------------

// DungeonEnterPosInfo

// uint32 quest_id = 13;
inline void DungeonEnterPosInfo::clear_quest_id() {
  quest_id_ = 0u;
}
inline ::google::protobuf::uint32 DungeonEnterPosInfo::quest_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonEnterPosInfo.quest_id)
  return quest_id_;
}
inline void DungeonEnterPosInfo::set_quest_id(::google::protobuf::uint32 value) {
  
  quest_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonEnterPosInfo.quest_id)
}

// uint32 point_id = 6;
inline void DungeonEnterPosInfo::clear_point_id() {
  point_id_ = 0u;
}
inline ::google::protobuf::uint32 DungeonEnterPosInfo::point_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonEnterPosInfo.point_id)
  return point_id_;
}
inline void DungeonEnterPosInfo::set_point_id(::google::protobuf::uint32 value) {
  
  point_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonEnterPosInfo.point_id)
}

// -------------------------------------------------------------------

// PlayerEnterDungeonReq

// .proto.DungeonEnterPosInfo enter_pos_info = 2;
inline bool PlayerEnterDungeonReq::has_enter_pos_info() const {
  return this != internal_default_instance() && enter_pos_info_ != NULL;
}
inline void PlayerEnterDungeonReq::clear_enter_pos_info() {
  if (GetArenaNoVirtual() == NULL && enter_pos_info_ != NULL) delete enter_pos_info_;
  enter_pos_info_ = NULL;
}
inline const ::proto::DungeonEnterPosInfo& PlayerEnterDungeonReq::enter_pos_info() const {
  const ::proto::DungeonEnterPosInfo* p = enter_pos_info_;
  // @@protoc_insertion_point(field_get:proto.PlayerEnterDungeonReq.enter_pos_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::DungeonEnterPosInfo*>(
      &::proto::_DungeonEnterPosInfo_default_instance_);
}
inline ::proto::DungeonEnterPosInfo* PlayerEnterDungeonReq::mutable_enter_pos_info() {
  
  if (enter_pos_info_ == NULL) {
    enter_pos_info_ = new ::proto::DungeonEnterPosInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.PlayerEnterDungeonReq.enter_pos_info)
  return enter_pos_info_;
}
inline ::proto::DungeonEnterPosInfo* PlayerEnterDungeonReq::release_enter_pos_info() {
  // @@protoc_insertion_point(field_release:proto.PlayerEnterDungeonReq.enter_pos_info)
  
  ::proto::DungeonEnterPosInfo* temp = enter_pos_info_;
  enter_pos_info_ = NULL;
  return temp;
}
inline void PlayerEnterDungeonReq::set_allocated_enter_pos_info(::proto::DungeonEnterPosInfo* enter_pos_info) {
  delete enter_pos_info_;
  enter_pos_info_ = enter_pos_info;
  if (enter_pos_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.PlayerEnterDungeonReq.enter_pos_info)
}

// uint32 point_id = 13;
inline void PlayerEnterDungeonReq::clear_point_id() {
  point_id_ = 0u;
}
inline ::google::protobuf::uint32 PlayerEnterDungeonReq::point_id() const {
  // @@protoc_insertion_point(field_get:proto.PlayerEnterDungeonReq.point_id)
  return point_id_;
}
inline void PlayerEnterDungeonReq::set_point_id(::google::protobuf::uint32 value) {
  
  point_id_ = value;
  // @@protoc_insertion_point(field_set:proto.PlayerEnterDungeonReq.point_id)
}

// uint32 dungeon_id = 7;
inline void PlayerEnterDungeonReq::clear_dungeon_id() {
  dungeon_id_ = 0u;
}
inline ::google::protobuf::uint32 PlayerEnterDungeonReq::dungeon_id() const {
  // @@protoc_insertion_point(field_get:proto.PlayerEnterDungeonReq.dungeon_id)
  return dungeon_id_;
}
inline void PlayerEnterDungeonReq::set_dungeon_id(::google::protobuf::uint32 value) {
  
  dungeon_id_ = value;
  // @@protoc_insertion_point(field_set:proto.PlayerEnterDungeonReq.dungeon_id)
}

// -------------------------------------------------------------------

// PlayerEnterDungeonRsp

// uint32 dungeon_id = 2;
inline void PlayerEnterDungeonRsp::clear_dungeon_id() {
  dungeon_id_ = 0u;
}
inline ::google::protobuf::uint32 PlayerEnterDungeonRsp::dungeon_id() const {
  // @@protoc_insertion_point(field_get:proto.PlayerEnterDungeonRsp.dungeon_id)
  return dungeon_id_;
}
inline void PlayerEnterDungeonRsp::set_dungeon_id(::google::protobuf::uint32 value) {
  
  dungeon_id_ = value;
  // @@protoc_insertion_point(field_set:proto.PlayerEnterDungeonRsp.dungeon_id)
}

// uint32 point_id = 6;
inline void PlayerEnterDungeonRsp::clear_point_id() {
  point_id_ = 0u;
}
inline ::google::protobuf::uint32 PlayerEnterDungeonRsp::point_id() const {
  // @@protoc_insertion_point(field_get:proto.PlayerEnterDungeonRsp.point_id)
  return point_id_;
}
inline void PlayerEnterDungeonRsp::set_point_id(::google::protobuf::uint32 value) {
  
  point_id_ = value;
  // @@protoc_insertion_point(field_set:proto.PlayerEnterDungeonRsp.point_id)
}

// int32 retcode = 5;
inline void PlayerEnterDungeonRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 PlayerEnterDungeonRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.PlayerEnterDungeonRsp.retcode)
  return retcode_;
}
inline void PlayerEnterDungeonRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.PlayerEnterDungeonRsp.retcode)
}

// -------------------------------------------------------------------

// PlayerQuitDungeonReq

// bool is_quit_immediately = 10;
inline void PlayerQuitDungeonReq::clear_is_quit_immediately() {
  is_quit_immediately_ = false;
}
inline bool PlayerQuitDungeonReq::is_quit_immediately() const {
  // @@protoc_insertion_point(field_get:proto.PlayerQuitDungeonReq.is_quit_immediately)
  return is_quit_immediately_;
}
inline void PlayerQuitDungeonReq::set_is_quit_immediately(bool value) {
  
  is_quit_immediately_ = value;
  // @@protoc_insertion_point(field_set:proto.PlayerQuitDungeonReq.is_quit_immediately)
}

// uint32 point_id = 7;
inline void PlayerQuitDungeonReq::clear_point_id() {
  point_id_ = 0u;
}
inline ::google::protobuf::uint32 PlayerQuitDungeonReq::point_id() const {
  // @@protoc_insertion_point(field_get:proto.PlayerQuitDungeonReq.point_id)
  return point_id_;
}
inline void PlayerQuitDungeonReq::set_point_id(::google::protobuf::uint32 value) {
  
  point_id_ = value;
  // @@protoc_insertion_point(field_set:proto.PlayerQuitDungeonReq.point_id)
}

// -------------------------------------------------------------------

// PlayerQuitDungeonRsp

// uint32 point_id = 11;
inline void PlayerQuitDungeonRsp::clear_point_id() {
  point_id_ = 0u;
}
inline ::google::protobuf::uint32 PlayerQuitDungeonRsp::point_id() const {
  // @@protoc_insertion_point(field_get:proto.PlayerQuitDungeonRsp.point_id)
  return point_id_;
}
inline void PlayerQuitDungeonRsp::set_point_id(::google::protobuf::uint32 value) {
  
  point_id_ = value;
  // @@protoc_insertion_point(field_set:proto.PlayerQuitDungeonRsp.point_id)
}

// int32 retcode = 7;
inline void PlayerQuitDungeonRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 PlayerQuitDungeonRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.PlayerQuitDungeonRsp.retcode)
  return retcode_;
}
inline void PlayerQuitDungeonRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.PlayerQuitDungeonRsp.retcode)
}

// -------------------------------------------------------------------

// DungeonWayPointNotify

// bool is_add = 9;
inline void DungeonWayPointNotify::clear_is_add() {
  is_add_ = false;
}
inline bool DungeonWayPointNotify::is_add() const {
  // @@protoc_insertion_point(field_get:proto.DungeonWayPointNotify.is_add)
  return is_add_;
}
inline void DungeonWayPointNotify::set_is_add(bool value) {
  
  is_add_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonWayPointNotify.is_add)
}

// repeated uint32 active_way_point_list = 4;
inline int DungeonWayPointNotify::active_way_point_list_size() const {
  return active_way_point_list_.size();
}
inline void DungeonWayPointNotify::clear_active_way_point_list() {
  active_way_point_list_.Clear();
}
inline ::google::protobuf::uint32 DungeonWayPointNotify::active_way_point_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.DungeonWayPointNotify.active_way_point_list)
  return active_way_point_list_.Get(index);
}
inline void DungeonWayPointNotify::set_active_way_point_list(int index, ::google::protobuf::uint32 value) {
  active_way_point_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.DungeonWayPointNotify.active_way_point_list)
}
inline void DungeonWayPointNotify::add_active_way_point_list(::google::protobuf::uint32 value) {
  active_way_point_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.DungeonWayPointNotify.active_way_point_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DungeonWayPointNotify::active_way_point_list() const {
  // @@protoc_insertion_point(field_list:proto.DungeonWayPointNotify.active_way_point_list)
  return active_way_point_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DungeonWayPointNotify::mutable_active_way_point_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.DungeonWayPointNotify.active_way_point_list)
  return &active_way_point_list_;
}

// -------------------------------------------------------------------

// DungeonWayPointActivateReq

// uint32 way_point_id = 3;
inline void DungeonWayPointActivateReq::clear_way_point_id() {
  way_point_id_ = 0u;
}
inline ::google::protobuf::uint32 DungeonWayPointActivateReq::way_point_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonWayPointActivateReq.way_point_id)
  return way_point_id_;
}
inline void DungeonWayPointActivateReq::set_way_point_id(::google::protobuf::uint32 value) {
  
  way_point_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonWayPointActivateReq.way_point_id)
}

// -------------------------------------------------------------------

// DungeonWayPointActivateRsp

// int32 retcode = 6;
inline void DungeonWayPointActivateRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 DungeonWayPointActivateRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.DungeonWayPointActivateRsp.retcode)
  return retcode_;
}
inline void DungeonWayPointActivateRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonWayPointActivateRsp.retcode)
}

// uint32 way_point_id = 7;
inline void DungeonWayPointActivateRsp::clear_way_point_id() {
  way_point_id_ = 0u;
}
inline ::google::protobuf::uint32 DungeonWayPointActivateRsp::way_point_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonWayPointActivateRsp.way_point_id)
  return way_point_id_;
}
inline void DungeonWayPointActivateRsp::set_way_point_id(::google::protobuf::uint32 value) {
  
  way_point_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonWayPointActivateRsp.way_point_id)
}

// -------------------------------------------------------------------

// StrengthenPointData

// uint32 base_point = 10;
inline void StrengthenPointData::clear_base_point() {
  base_point_ = 0u;
}
inline ::google::protobuf::uint32 StrengthenPointData::base_point() const {
  // @@protoc_insertion_point(field_get:proto.StrengthenPointData.base_point)
  return base_point_;
}
inline void StrengthenPointData::set_base_point(::google::protobuf::uint32 value) {
  
  base_point_ = value;
  // @@protoc_insertion_point(field_set:proto.StrengthenPointData.base_point)
}

// uint32 cur_point = 11;
inline void StrengthenPointData::clear_cur_point() {
  cur_point_ = 0u;
}
inline ::google::protobuf::uint32 StrengthenPointData::cur_point() const {
  // @@protoc_insertion_point(field_get:proto.StrengthenPointData.cur_point)
  return cur_point_;
}
inline void StrengthenPointData::set_cur_point(::google::protobuf::uint32 value) {
  
  cur_point_ = value;
  // @@protoc_insertion_point(field_set:proto.StrengthenPointData.cur_point)
}

// -------------------------------------------------------------------

// DungeonSettleExhibitionInfo

// .proto.OnlinePlayerInfo player_info = 3;
inline bool DungeonSettleExhibitionInfo::has_player_info() const {
  return this != internal_default_instance() && player_info_ != NULL;
}
inline void DungeonSettleExhibitionInfo::clear_player_info() {
  if (GetArenaNoVirtual() == NULL && player_info_ != NULL) delete player_info_;
  player_info_ = NULL;
}
inline const ::proto::OnlinePlayerInfo& DungeonSettleExhibitionInfo::player_info() const {
  const ::proto::OnlinePlayerInfo* p = player_info_;
  // @@protoc_insertion_point(field_get:proto.DungeonSettleExhibitionInfo.player_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::OnlinePlayerInfo*>(
      &::proto::_OnlinePlayerInfo_default_instance_);
}
inline ::proto::OnlinePlayerInfo* DungeonSettleExhibitionInfo::mutable_player_info() {
  
  if (player_info_ == NULL) {
    player_info_ = new ::proto::OnlinePlayerInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.DungeonSettleExhibitionInfo.player_info)
  return player_info_;
}
inline ::proto::OnlinePlayerInfo* DungeonSettleExhibitionInfo::release_player_info() {
  // @@protoc_insertion_point(field_release:proto.DungeonSettleExhibitionInfo.player_info)
  
  ::proto::OnlinePlayerInfo* temp = player_info_;
  player_info_ = NULL;
  return temp;
}
inline void DungeonSettleExhibitionInfo::set_allocated_player_info(::proto::OnlinePlayerInfo* player_info) {
  delete player_info_;
  player_info_ = player_info;
  if (player_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.DungeonSettleExhibitionInfo.player_info)
}

// repeated .proto.ExhibitionDisplayInfo card_list = 13;
inline int DungeonSettleExhibitionInfo::card_list_size() const {
  return card_list_.size();
}
inline void DungeonSettleExhibitionInfo::clear_card_list() {
  card_list_.Clear();
}
inline const ::proto::ExhibitionDisplayInfo& DungeonSettleExhibitionInfo::card_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.DungeonSettleExhibitionInfo.card_list)
  return card_list_.Get(index);
}
inline ::proto::ExhibitionDisplayInfo* DungeonSettleExhibitionInfo::mutable_card_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.DungeonSettleExhibitionInfo.card_list)
  return card_list_.Mutable(index);
}
inline ::proto::ExhibitionDisplayInfo* DungeonSettleExhibitionInfo::add_card_list() {
  // @@protoc_insertion_point(field_add:proto.DungeonSettleExhibitionInfo.card_list)
  return card_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::ExhibitionDisplayInfo >*
DungeonSettleExhibitionInfo::mutable_card_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.DungeonSettleExhibitionInfo.card_list)
  return &card_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::ExhibitionDisplayInfo >&
DungeonSettleExhibitionInfo::card_list() const {
  // @@protoc_insertion_point(field_list:proto.DungeonSettleExhibitionInfo.card_list)
  return card_list_;
}

// -------------------------------------------------------------------

// CrystalLinkDungeonSettleInfo

// uint32 kill_elite_monster_num = 2;
inline void CrystalLinkDungeonSettleInfo::clear_kill_elite_monster_num() {
  kill_elite_monster_num_ = 0u;
}
inline ::google::protobuf::uint32 CrystalLinkDungeonSettleInfo::kill_elite_monster_num() const {
  // @@protoc_insertion_point(field_get:proto.CrystalLinkDungeonSettleInfo.kill_elite_monster_num)
  return kill_elite_monster_num_;
}
inline void CrystalLinkDungeonSettleInfo::set_kill_elite_monster_num(::google::protobuf::uint32 value) {
  
  kill_elite_monster_num_ = value;
  // @@protoc_insertion_point(field_set:proto.CrystalLinkDungeonSettleInfo.kill_elite_monster_num)
}

// uint32 final_score = 6;
inline void CrystalLinkDungeonSettleInfo::clear_final_score() {
  final_score_ = 0u;
}
inline ::google::protobuf::uint32 CrystalLinkDungeonSettleInfo::final_score() const {
  // @@protoc_insertion_point(field_get:proto.CrystalLinkDungeonSettleInfo.final_score)
  return final_score_;
}
inline void CrystalLinkDungeonSettleInfo::set_final_score(::google::protobuf::uint32 value) {
  
  final_score_ = value;
  // @@protoc_insertion_point(field_set:proto.CrystalLinkDungeonSettleInfo.final_score)
}

// uint32 level_id = 12;
inline void CrystalLinkDungeonSettleInfo::clear_level_id() {
  level_id_ = 0u;
}
inline ::google::protobuf::uint32 CrystalLinkDungeonSettleInfo::level_id() const {
  // @@protoc_insertion_point(field_get:proto.CrystalLinkDungeonSettleInfo.level_id)
  return level_id_;
}
inline void CrystalLinkDungeonSettleInfo::set_level_id(::google::protobuf::uint32 value) {
  
  level_id_ = value;
  // @@protoc_insertion_point(field_set:proto.CrystalLinkDungeonSettleInfo.level_id)
}

// bool is_new_record = 13;
inline void CrystalLinkDungeonSettleInfo::clear_is_new_record() {
  is_new_record_ = false;
}
inline bool CrystalLinkDungeonSettleInfo::is_new_record() const {
  // @@protoc_insertion_point(field_get:proto.CrystalLinkDungeonSettleInfo.is_new_record)
  return is_new_record_;
}
inline void CrystalLinkDungeonSettleInfo::set_is_new_record(bool value) {
  
  is_new_record_ = value;
  // @@protoc_insertion_point(field_set:proto.CrystalLinkDungeonSettleInfo.is_new_record)
}

// uint32 difficulty_id = 9;
inline void CrystalLinkDungeonSettleInfo::clear_difficulty_id() {
  difficulty_id_ = 0u;
}
inline ::google::protobuf::uint32 CrystalLinkDungeonSettleInfo::difficulty_id() const {
  // @@protoc_insertion_point(field_get:proto.CrystalLinkDungeonSettleInfo.difficulty_id)
  return difficulty_id_;
}
inline void CrystalLinkDungeonSettleInfo::set_difficulty_id(::google::protobuf::uint32 value) {
  
  difficulty_id_ = value;
  // @@protoc_insertion_point(field_set:proto.CrystalLinkDungeonSettleInfo.difficulty_id)
}

// uint32 kill_normal_mosnter_num = 3;
inline void CrystalLinkDungeonSettleInfo::clear_kill_normal_mosnter_num() {
  kill_normal_mosnter_num_ = 0u;
}
inline ::google::protobuf::uint32 CrystalLinkDungeonSettleInfo::kill_normal_mosnter_num() const {
  // @@protoc_insertion_point(field_get:proto.CrystalLinkDungeonSettleInfo.kill_normal_mosnter_num)
  return kill_normal_mosnter_num_;
}
inline void CrystalLinkDungeonSettleInfo::set_kill_normal_mosnter_num(::google::protobuf::uint32 value) {
  
  kill_normal_mosnter_num_ = value;
  // @@protoc_insertion_point(field_set:proto.CrystalLinkDungeonSettleInfo.kill_normal_mosnter_num)
}

// -------------------------------------------------------------------

// SummerTimeV2DungeonSettleInfo

// bool is_success = 5;
inline void SummerTimeV2DungeonSettleInfo::clear_is_success() {
  is_success_ = false;
}
inline bool SummerTimeV2DungeonSettleInfo::is_success() const {
  // @@protoc_insertion_point(field_get:proto.SummerTimeV2DungeonSettleInfo.is_success)
  return is_success_;
}
inline void SummerTimeV2DungeonSettleInfo::set_is_success(bool value) {
  
  is_success_ = value;
  // @@protoc_insertion_point(field_set:proto.SummerTimeV2DungeonSettleInfo.is_success)
}

// uint32 taken_reward_count = 2;
inline void SummerTimeV2DungeonSettleInfo::clear_taken_reward_count() {
  taken_reward_count_ = 0u;
}
inline ::google::protobuf::uint32 SummerTimeV2DungeonSettleInfo::taken_reward_count() const {
  // @@protoc_insertion_point(field_get:proto.SummerTimeV2DungeonSettleInfo.taken_reward_count)
  return taken_reward_count_;
}
inline void SummerTimeV2DungeonSettleInfo::set_taken_reward_count(::google::protobuf::uint32 value) {
  
  taken_reward_count_ = value;
  // @@protoc_insertion_point(field_set:proto.SummerTimeV2DungeonSettleInfo.taken_reward_count)
}

// uint32 cur_dungeon_reward_limit = 11;
inline void SummerTimeV2DungeonSettleInfo::clear_cur_dungeon_reward_limit() {
  cur_dungeon_reward_limit_ = 0u;
}
inline ::google::protobuf::uint32 SummerTimeV2DungeonSettleInfo::cur_dungeon_reward_limit() const {
  // @@protoc_insertion_point(field_get:proto.SummerTimeV2DungeonSettleInfo.cur_dungeon_reward_limit)
  return cur_dungeon_reward_limit_;
}
inline void SummerTimeV2DungeonSettleInfo::set_cur_dungeon_reward_limit(::google::protobuf::uint32 value) {
  
  cur_dungeon_reward_limit_ = value;
  // @@protoc_insertion_point(field_set:proto.SummerTimeV2DungeonSettleInfo.cur_dungeon_reward_limit)
}

// -------------------------------------------------------------------

// InstableSprayDungeonSettleInfo

// uint32 stage_id = 1;
inline void InstableSprayDungeonSettleInfo::clear_stage_id() {
  stage_id_ = 0u;
}
inline ::google::protobuf::uint32 InstableSprayDungeonSettleInfo::stage_id() const {
  // @@protoc_insertion_point(field_get:proto.InstableSprayDungeonSettleInfo.stage_id)
  return stage_id_;
}
inline void InstableSprayDungeonSettleInfo::set_stage_id(::google::protobuf::uint32 value) {
  
  stage_id_ = value;
  // @@protoc_insertion_point(field_set:proto.InstableSprayDungeonSettleInfo.stage_id)
}

// repeated uint32 score_list = 4;
inline int InstableSprayDungeonSettleInfo::score_list_size() const {
  return score_list_.size();
}
inline void InstableSprayDungeonSettleInfo::clear_score_list() {
  score_list_.Clear();
}
inline ::google::protobuf::uint32 InstableSprayDungeonSettleInfo::score_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.InstableSprayDungeonSettleInfo.score_list)
  return score_list_.Get(index);
}
inline void InstableSprayDungeonSettleInfo::set_score_list(int index, ::google::protobuf::uint32 value) {
  score_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.InstableSprayDungeonSettleInfo.score_list)
}
inline void InstableSprayDungeonSettleInfo::add_score_list(::google::protobuf::uint32 value) {
  score_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.InstableSprayDungeonSettleInfo.score_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
InstableSprayDungeonSettleInfo::score_list() const {
  // @@protoc_insertion_point(field_list:proto.InstableSprayDungeonSettleInfo.score_list)
  return score_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
InstableSprayDungeonSettleInfo::mutable_score_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.InstableSprayDungeonSettleInfo.score_list)
  return &score_list_;
}

// bool is_new_record = 13;
inline void InstableSprayDungeonSettleInfo::clear_is_new_record() {
  is_new_record_ = false;
}
inline bool InstableSprayDungeonSettleInfo::is_new_record() const {
  // @@protoc_insertion_point(field_get:proto.InstableSprayDungeonSettleInfo.is_new_record)
  return is_new_record_;
}
inline void InstableSprayDungeonSettleInfo::set_is_new_record(bool value) {
  
  is_new_record_ = value;
  // @@protoc_insertion_point(field_set:proto.InstableSprayDungeonSettleInfo.is_new_record)
}

// uint32 difficulty = 5;
inline void InstableSprayDungeonSettleInfo::clear_difficulty() {
  difficulty_ = 0u;
}
inline ::google::protobuf::uint32 InstableSprayDungeonSettleInfo::difficulty() const {
  // @@protoc_insertion_point(field_get:proto.InstableSprayDungeonSettleInfo.difficulty)
  return difficulty_;
}
inline void InstableSprayDungeonSettleInfo::set_difficulty(::google::protobuf::uint32 value) {
  
  difficulty_ = value;
  // @@protoc_insertion_point(field_set:proto.InstableSprayDungeonSettleInfo.difficulty)
}

// -------------------------------------------------------------------

// WindFieldDungeonSettleInfo

// repeated uint32 after_watcher_id_list = 11;
inline int WindFieldDungeonSettleInfo::after_watcher_id_list_size() const {
  return after_watcher_id_list_.size();
}
inline void WindFieldDungeonSettleInfo::clear_after_watcher_id_list() {
  after_watcher_id_list_.Clear();
}
inline ::google::protobuf::uint32 WindFieldDungeonSettleInfo::after_watcher_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.WindFieldDungeonSettleInfo.after_watcher_id_list)
  return after_watcher_id_list_.Get(index);
}
inline void WindFieldDungeonSettleInfo::set_after_watcher_id_list(int index, ::google::protobuf::uint32 value) {
  after_watcher_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.WindFieldDungeonSettleInfo.after_watcher_id_list)
}
inline void WindFieldDungeonSettleInfo::add_after_watcher_id_list(::google::protobuf::uint32 value) {
  after_watcher_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.WindFieldDungeonSettleInfo.after_watcher_id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
WindFieldDungeonSettleInfo::after_watcher_id_list() const {
  // @@protoc_insertion_point(field_list:proto.WindFieldDungeonSettleInfo.after_watcher_id_list)
  return after_watcher_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
WindFieldDungeonSettleInfo::mutable_after_watcher_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.WindFieldDungeonSettleInfo.after_watcher_id_list)
  return &after_watcher_id_list_;
}

// repeated uint32 before_watcher_id_list = 7;
inline int WindFieldDungeonSettleInfo::before_watcher_id_list_size() const {
  return before_watcher_id_list_.size();
}
inline void WindFieldDungeonSettleInfo::clear_before_watcher_id_list() {
  before_watcher_id_list_.Clear();
}
inline ::google::protobuf::uint32 WindFieldDungeonSettleInfo::before_watcher_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.WindFieldDungeonSettleInfo.before_watcher_id_list)
  return before_watcher_id_list_.Get(index);
}
inline void WindFieldDungeonSettleInfo::set_before_watcher_id_list(int index, ::google::protobuf::uint32 value) {
  before_watcher_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.WindFieldDungeonSettleInfo.before_watcher_id_list)
}
inline void WindFieldDungeonSettleInfo::add_before_watcher_id_list(::google::protobuf::uint32 value) {
  before_watcher_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.WindFieldDungeonSettleInfo.before_watcher_id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
WindFieldDungeonSettleInfo::before_watcher_id_list() const {
  // @@protoc_insertion_point(field_list:proto.WindFieldDungeonSettleInfo.before_watcher_id_list)
  return before_watcher_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
WindFieldDungeonSettleInfo::mutable_before_watcher_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.WindFieldDungeonSettleInfo.before_watcher_id_list)
  return &before_watcher_id_list_;
}

// .proto.WindFieldDungeonFailReason fail_reason = 2;
inline void WindFieldDungeonSettleInfo::clear_fail_reason() {
  fail_reason_ = 0;
}
inline ::proto::WindFieldDungeonFailReason WindFieldDungeonSettleInfo::fail_reason() const {
  // @@protoc_insertion_point(field_get:proto.WindFieldDungeonSettleInfo.fail_reason)
  return static_cast< ::proto::WindFieldDungeonFailReason >(fail_reason_);
}
inline void WindFieldDungeonSettleInfo::set_fail_reason(::proto::WindFieldDungeonFailReason value) {
  
  fail_reason_ = value;
  // @@protoc_insertion_point(field_set:proto.WindFieldDungeonSettleInfo.fail_reason)
}

// -------------------------------------------------------------------

// EffigyChallengeV2SettleInfo

// bool is_challenge_highest_difficulty = 7;
inline void EffigyChallengeV2SettleInfo::clear_is_challenge_highest_difficulty() {
  is_challenge_highest_difficulty_ = false;
}
inline bool EffigyChallengeV2SettleInfo::is_challenge_highest_difficulty() const {
  // @@protoc_insertion_point(field_get:proto.EffigyChallengeV2SettleInfo.is_challenge_highest_difficulty)
  return is_challenge_highest_difficulty_;
}
inline void EffigyChallengeV2SettleInfo::set_is_challenge_highest_difficulty(bool value) {
  
  is_challenge_highest_difficulty_ = value;
  // @@protoc_insertion_point(field_set:proto.EffigyChallengeV2SettleInfo.is_challenge_highest_difficulty)
}

// uint32 create_dungeon_player_uid = 4;
inline void EffigyChallengeV2SettleInfo::clear_create_dungeon_player_uid() {
  create_dungeon_player_uid_ = 0u;
}
inline ::google::protobuf::uint32 EffigyChallengeV2SettleInfo::create_dungeon_player_uid() const {
  // @@protoc_insertion_point(field_get:proto.EffigyChallengeV2SettleInfo.create_dungeon_player_uid)
  return create_dungeon_player_uid_;
}
inline void EffigyChallengeV2SettleInfo::set_create_dungeon_player_uid(::google::protobuf::uint32 value) {
  
  create_dungeon_player_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.EffigyChallengeV2SettleInfo.create_dungeon_player_uid)
}

// uint32 challenge_mode_difficulty = 6;
inline void EffigyChallengeV2SettleInfo::clear_challenge_mode_difficulty() {
  challenge_mode_difficulty_ = 0u;
}
inline ::google::protobuf::uint32 EffigyChallengeV2SettleInfo::challenge_mode_difficulty() const {
  // @@protoc_insertion_point(field_get:proto.EffigyChallengeV2SettleInfo.challenge_mode_difficulty)
  return challenge_mode_difficulty_;
}
inline void EffigyChallengeV2SettleInfo::set_challenge_mode_difficulty(::google::protobuf::uint32 value) {
  
  challenge_mode_difficulty_ = value;
  // @@protoc_insertion_point(field_set:proto.EffigyChallengeV2SettleInfo.challenge_mode_difficulty)
}

// bool is_new_record_time = 1;
inline void EffigyChallengeV2SettleInfo::clear_is_new_record_time() {
  is_new_record_time_ = false;
}
inline bool EffigyChallengeV2SettleInfo::is_new_record_time() const {
  // @@protoc_insertion_point(field_get:proto.EffigyChallengeV2SettleInfo.is_new_record_time)
  return is_new_record_time_;
}
inline void EffigyChallengeV2SettleInfo::set_is_new_record_time(bool value) {
  
  is_new_record_time_ = value;
  // @@protoc_insertion_point(field_set:proto.EffigyChallengeV2SettleInfo.is_new_record_time)
}

// uint32 record_time = 12;
inline void EffigyChallengeV2SettleInfo::clear_record_time() {
  record_time_ = 0u;
}
inline ::google::protobuf::uint32 EffigyChallengeV2SettleInfo::record_time() const {
  // @@protoc_insertion_point(field_get:proto.EffigyChallengeV2SettleInfo.record_time)
  return record_time_;
}
inline void EffigyChallengeV2SettleInfo::set_record_time(::google::protobuf::uint32 value) {
  
  record_time_ = value;
  // @@protoc_insertion_point(field_set:proto.EffigyChallengeV2SettleInfo.record_time)
}

// uint32 first_time_finish_difficulty = 5;
inline void EffigyChallengeV2SettleInfo::clear_first_time_finish_difficulty() {
  first_time_finish_difficulty_ = 0u;
}
inline ::google::protobuf::uint32 EffigyChallengeV2SettleInfo::first_time_finish_difficulty() const {
  // @@protoc_insertion_point(field_get:proto.EffigyChallengeV2SettleInfo.first_time_finish_difficulty)
  return first_time_finish_difficulty_;
}
inline void EffigyChallengeV2SettleInfo::set_first_time_finish_difficulty(::google::protobuf::uint32 value) {
  
  first_time_finish_difficulty_ = value;
  // @@protoc_insertion_point(field_set:proto.EffigyChallengeV2SettleInfo.first_time_finish_difficulty)
}

// -------------------------------------------------------------------

// TeamChainSettleInfo

// repeated uint32 score_list = 9;
inline int TeamChainSettleInfo::score_list_size() const {
  return score_list_.size();
}
inline void TeamChainSettleInfo::clear_score_list() {
  score_list_.Clear();
}
inline ::google::protobuf::uint32 TeamChainSettleInfo::score_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.TeamChainSettleInfo.score_list)
  return score_list_.Get(index);
}
inline void TeamChainSettleInfo::set_score_list(int index, ::google::protobuf::uint32 value) {
  score_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.TeamChainSettleInfo.score_list)
}
inline void TeamChainSettleInfo::add_score_list(::google::protobuf::uint32 value) {
  score_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.TeamChainSettleInfo.score_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TeamChainSettleInfo::score_list() const {
  // @@protoc_insertion_point(field_list:proto.TeamChainSettleInfo.score_list)
  return score_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TeamChainSettleInfo::mutable_score_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.TeamChainSettleInfo.score_list)
  return &score_list_;
}

// uint32 total_score = 1;
inline void TeamChainSettleInfo::clear_total_score() {
  total_score_ = 0u;
}
inline ::google::protobuf::uint32 TeamChainSettleInfo::total_score() const {
  // @@protoc_insertion_point(field_get:proto.TeamChainSettleInfo.total_score)
  return total_score_;
}
inline void TeamChainSettleInfo::set_total_score(::google::protobuf::uint32 value) {
  
  total_score_ = value;
  // @@protoc_insertion_point(field_set:proto.TeamChainSettleInfo.total_score)
}

// uint32 difficulty = 15;
inline void TeamChainSettleInfo::clear_difficulty() {
  difficulty_ = 0u;
}
inline ::google::protobuf::uint32 TeamChainSettleInfo::difficulty() const {
  // @@protoc_insertion_point(field_get:proto.TeamChainSettleInfo.difficulty)
  return difficulty_;
}
inline void TeamChainSettleInfo::set_difficulty(::google::protobuf::uint32 value) {
  
  difficulty_ = value;
  // @@protoc_insertion_point(field_set:proto.TeamChainSettleInfo.difficulty)
}

// uint32 stage_id = 12;
inline void TeamChainSettleInfo::clear_stage_id() {
  stage_id_ = 0u;
}
inline ::google::protobuf::uint32 TeamChainSettleInfo::stage_id() const {
  // @@protoc_insertion_point(field_get:proto.TeamChainSettleInfo.stage_id)
  return stage_id_;
}
inline void TeamChainSettleInfo::set_stage_id(::google::protobuf::uint32 value) {
  
  stage_id_ = value;
  // @@protoc_insertion_point(field_set:proto.TeamChainSettleInfo.stage_id)
}

// bool is_new_record = 4;
inline void TeamChainSettleInfo::clear_is_new_record() {
  is_new_record_ = false;
}
inline bool TeamChainSettleInfo::is_new_record() const {
  // @@protoc_insertion_point(field_get:proto.TeamChainSettleInfo.is_new_record)
  return is_new_record_;
}
inline void TeamChainSettleInfo::set_is_new_record(bool value) {
  
  is_new_record_ = value;
  // @@protoc_insertion_point(field_set:proto.TeamChainSettleInfo.is_new_record)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// DungeonSettleNotify

// uint32 result = 10;
inline void DungeonSettleNotify::clear_result() {
  result_ = 0u;
}
inline ::google::protobuf::uint32 DungeonSettleNotify::result() const {
  // @@protoc_insertion_point(field_get:proto.DungeonSettleNotify.result)
  return result_;
}
inline void DungeonSettleNotify::set_result(::google::protobuf::uint32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonSettleNotify.result)
}

// uint32 dungeon_id = 13;
inline void DungeonSettleNotify::clear_dungeon_id() {
  dungeon_id_ = 0u;
}
inline ::google::protobuf::uint32 DungeonSettleNotify::dungeon_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonSettleNotify.dungeon_id)
  return dungeon_id_;
}
inline void DungeonSettleNotify::set_dungeon_id(::google::protobuf::uint32 value) {
  
  dungeon_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonSettleNotify.dungeon_id)
}

// map<uint32, .proto.StrengthenPointData> strengthen_point_data_map = 14;
inline int DungeonSettleNotify::strengthen_point_data_map_size() const {
  return strengthen_point_data_map_.size();
}
inline void DungeonSettleNotify::clear_strengthen_point_data_map() {
  strengthen_point_data_map_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::StrengthenPointData >&
DungeonSettleNotify::strengthen_point_data_map() const {
  // @@protoc_insertion_point(field_map:proto.DungeonSettleNotify.strengthen_point_data_map)
  return strengthen_point_data_map_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::StrengthenPointData >*
DungeonSettleNotify::mutable_strengthen_point_data_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.DungeonSettleNotify.strengthen_point_data_map)
  return strengthen_point_data_map_.MutableMap();
}

// repeated .proto.DungeonSettleExhibitionInfo exhibition_info_list = 8;
inline int DungeonSettleNotify::exhibition_info_list_size() const {
  return exhibition_info_list_.size();
}
inline void DungeonSettleNotify::clear_exhibition_info_list() {
  exhibition_info_list_.Clear();
}
inline const ::proto::DungeonSettleExhibitionInfo& DungeonSettleNotify::exhibition_info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.DungeonSettleNotify.exhibition_info_list)
  return exhibition_info_list_.Get(index);
}
inline ::proto::DungeonSettleExhibitionInfo* DungeonSettleNotify::mutable_exhibition_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.DungeonSettleNotify.exhibition_info_list)
  return exhibition_info_list_.Mutable(index);
}
inline ::proto::DungeonSettleExhibitionInfo* DungeonSettleNotify::add_exhibition_info_list() {
  // @@protoc_insertion_point(field_add:proto.DungeonSettleNotify.exhibition_info_list)
  return exhibition_info_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::DungeonSettleExhibitionInfo >*
DungeonSettleNotify::mutable_exhibition_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.DungeonSettleNotify.exhibition_info_list)
  return &exhibition_info_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::DungeonSettleExhibitionInfo >&
DungeonSettleNotify::exhibition_info_list() const {
  // @@protoc_insertion_point(field_list:proto.DungeonSettleNotify.exhibition_info_list)
  return exhibition_info_list_;
}

// uint32 create_player_uid = 12;
inline void DungeonSettleNotify::clear_create_player_uid() {
  create_player_uid_ = 0u;
}
inline ::google::protobuf::uint32 DungeonSettleNotify::create_player_uid() const {
  // @@protoc_insertion_point(field_get:proto.DungeonSettleNotify.create_player_uid)
  return create_player_uid_;
}
inline void DungeonSettleNotify::set_create_player_uid(::google::protobuf::uint32 value) {
  
  create_player_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonSettleNotify.create_player_uid)
}

// repeated uint32 fail_cond_list = 11;
inline int DungeonSettleNotify::fail_cond_list_size() const {
  return fail_cond_list_.size();
}
inline void DungeonSettleNotify::clear_fail_cond_list() {
  fail_cond_list_.Clear();
}
inline ::google::protobuf::uint32 DungeonSettleNotify::fail_cond_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.DungeonSettleNotify.fail_cond_list)
  return fail_cond_list_.Get(index);
}
inline void DungeonSettleNotify::set_fail_cond_list(int index, ::google::protobuf::uint32 value) {
  fail_cond_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.DungeonSettleNotify.fail_cond_list)
}
inline void DungeonSettleNotify::add_fail_cond_list(::google::protobuf::uint32 value) {
  fail_cond_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.DungeonSettleNotify.fail_cond_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DungeonSettleNotify::fail_cond_list() const {
  // @@protoc_insertion_point(field_list:proto.DungeonSettleNotify.fail_cond_list)
  return fail_cond_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DungeonSettleNotify::mutable_fail_cond_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.DungeonSettleNotify.fail_cond_list)
  return &fail_cond_list_;
}

// uint32 use_time = 1;
inline void DungeonSettleNotify::clear_use_time() {
  use_time_ = 0u;
}
inline ::google::protobuf::uint32 DungeonSettleNotify::use_time() const {
  // @@protoc_insertion_point(field_get:proto.DungeonSettleNotify.use_time)
  return use_time_;
}
inline void DungeonSettleNotify::set_use_time(::google::protobuf::uint32 value) {
  
  use_time_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonSettleNotify.use_time)
}

// uint32 close_time = 4;
inline void DungeonSettleNotify::clear_close_time() {
  close_time_ = 0u;
}
inline ::google::protobuf::uint32 DungeonSettleNotify::close_time() const {
  // @@protoc_insertion_point(field_get:proto.DungeonSettleNotify.close_time)
  return close_time_;
}
inline void DungeonSettleNotify::set_close_time(::google::protobuf::uint32 value) {
  
  close_time_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonSettleNotify.close_time)
}

// bool is_success = 7;
inline void DungeonSettleNotify::clear_is_success() {
  is_success_ = false;
}
inline bool DungeonSettleNotify::is_success() const {
  // @@protoc_insertion_point(field_get:proto.DungeonSettleNotify.is_success)
  return is_success_;
}
inline void DungeonSettleNotify::set_is_success(bool value) {
  
  is_success_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonSettleNotify.is_success)
}

// map<uint32, .proto.ParamList> settle_show = 5;
inline int DungeonSettleNotify::settle_show_size() const {
  return settle_show_.size();
}
inline void DungeonSettleNotify::clear_settle_show() {
  settle_show_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ParamList >&
DungeonSettleNotify::settle_show() const {
  // @@protoc_insertion_point(field_map:proto.DungeonSettleNotify.settle_show)
  return settle_show_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ParamList >*
DungeonSettleNotify::mutable_settle_show() {
  // @@protoc_insertion_point(field_mutable_map:proto.DungeonSettleNotify.settle_show)
  return settle_show_.MutableMap();
}

// .proto.TowerLevelEndNotify tower_level_end_notify = 351;
inline bool DungeonSettleNotify::has_tower_level_end_notify() const {
  return detail_case() == kTowerLevelEndNotify;
}
inline void DungeonSettleNotify::set_has_tower_level_end_notify() {
  _oneof_case_[0] = kTowerLevelEndNotify;
}
inline void DungeonSettleNotify::clear_tower_level_end_notify() {
  if (has_tower_level_end_notify()) {
    delete detail_.tower_level_end_notify_;
    clear_has_detail();
  }
}
inline  const ::proto::TowerLevelEndNotify& DungeonSettleNotify::tower_level_end_notify() const {
  // @@protoc_insertion_point(field_get:proto.DungeonSettleNotify.tower_level_end_notify)
  return has_tower_level_end_notify()
      ? *detail_.tower_level_end_notify_
      : ::proto::TowerLevelEndNotify::default_instance();
}
inline ::proto::TowerLevelEndNotify* DungeonSettleNotify::mutable_tower_level_end_notify() {
  if (!has_tower_level_end_notify()) {
    clear_detail();
    set_has_tower_level_end_notify();
    detail_.tower_level_end_notify_ = new ::proto::TowerLevelEndNotify;
  }
  // @@protoc_insertion_point(field_mutable:proto.DungeonSettleNotify.tower_level_end_notify)
  return detail_.tower_level_end_notify_;
}
inline ::proto::TowerLevelEndNotify* DungeonSettleNotify::release_tower_level_end_notify() {
  // @@protoc_insertion_point(field_release:proto.DungeonSettleNotify.tower_level_end_notify)
  if (has_tower_level_end_notify()) {
    clear_has_detail();
    ::proto::TowerLevelEndNotify* temp = detail_.tower_level_end_notify_;
    detail_.tower_level_end_notify_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void DungeonSettleNotify::set_allocated_tower_level_end_notify(::proto::TowerLevelEndNotify* tower_level_end_notify) {
  clear_detail();
  if (tower_level_end_notify) {
    set_has_tower_level_end_notify();
    detail_.tower_level_end_notify_ = tower_level_end_notify;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.DungeonSettleNotify.tower_level_end_notify)
}

// .proto.TrialAvatarFirstPassDungeonNotify trial_avatar_first_pass_dungeon_notify = 635;
inline bool DungeonSettleNotify::has_trial_avatar_first_pass_dungeon_notify() const {
  return detail_case() == kTrialAvatarFirstPassDungeonNotify;
}
inline void DungeonSettleNotify::set_has_trial_avatar_first_pass_dungeon_notify() {
  _oneof_case_[0] = kTrialAvatarFirstPassDungeonNotify;
}
inline void DungeonSettleNotify::clear_trial_avatar_first_pass_dungeon_notify() {
  if (has_trial_avatar_first_pass_dungeon_notify()) {
    delete detail_.trial_avatar_first_pass_dungeon_notify_;
    clear_has_detail();
  }
}
inline  const ::proto::TrialAvatarFirstPassDungeonNotify& DungeonSettleNotify::trial_avatar_first_pass_dungeon_notify() const {
  // @@protoc_insertion_point(field_get:proto.DungeonSettleNotify.trial_avatar_first_pass_dungeon_notify)
  return has_trial_avatar_first_pass_dungeon_notify()
      ? *detail_.trial_avatar_first_pass_dungeon_notify_
      : ::proto::TrialAvatarFirstPassDungeonNotify::default_instance();
}
inline ::proto::TrialAvatarFirstPassDungeonNotify* DungeonSettleNotify::mutable_trial_avatar_first_pass_dungeon_notify() {
  if (!has_trial_avatar_first_pass_dungeon_notify()) {
    clear_detail();
    set_has_trial_avatar_first_pass_dungeon_notify();
    detail_.trial_avatar_first_pass_dungeon_notify_ = new ::proto::TrialAvatarFirstPassDungeonNotify;
  }
  // @@protoc_insertion_point(field_mutable:proto.DungeonSettleNotify.trial_avatar_first_pass_dungeon_notify)
  return detail_.trial_avatar_first_pass_dungeon_notify_;
}
inline ::proto::TrialAvatarFirstPassDungeonNotify* DungeonSettleNotify::release_trial_avatar_first_pass_dungeon_notify() {
  // @@protoc_insertion_point(field_release:proto.DungeonSettleNotify.trial_avatar_first_pass_dungeon_notify)
  if (has_trial_avatar_first_pass_dungeon_notify()) {
    clear_has_detail();
    ::proto::TrialAvatarFirstPassDungeonNotify* temp = detail_.trial_avatar_first_pass_dungeon_notify_;
    detail_.trial_avatar_first_pass_dungeon_notify_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void DungeonSettleNotify::set_allocated_trial_avatar_first_pass_dungeon_notify(::proto::TrialAvatarFirstPassDungeonNotify* trial_avatar_first_pass_dungeon_notify) {
  clear_detail();
  if (trial_avatar_first_pass_dungeon_notify) {
    set_has_trial_avatar_first_pass_dungeon_notify();
    detail_.trial_avatar_first_pass_dungeon_notify_ = trial_avatar_first_pass_dungeon_notify;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.DungeonSettleNotify.trial_avatar_first_pass_dungeon_notify)
}

// .proto.ChannellerSlabLoopDungeonResultInfo channeller_slab_loop_dungeon_result_info = 686;
inline bool DungeonSettleNotify::has_channeller_slab_loop_dungeon_result_info() const {
  return detail_case() == kChannellerSlabLoopDungeonResultInfo;
}
inline void DungeonSettleNotify::set_has_channeller_slab_loop_dungeon_result_info() {
  _oneof_case_[0] = kChannellerSlabLoopDungeonResultInfo;
}
inline void DungeonSettleNotify::clear_channeller_slab_loop_dungeon_result_info() {
  if (has_channeller_slab_loop_dungeon_result_info()) {
    delete detail_.channeller_slab_loop_dungeon_result_info_;
    clear_has_detail();
  }
}
inline  const ::proto::ChannellerSlabLoopDungeonResultInfo& DungeonSettleNotify::channeller_slab_loop_dungeon_result_info() const {
  // @@protoc_insertion_point(field_get:proto.DungeonSettleNotify.channeller_slab_loop_dungeon_result_info)
  return has_channeller_slab_loop_dungeon_result_info()
      ? *detail_.channeller_slab_loop_dungeon_result_info_
      : ::proto::ChannellerSlabLoopDungeonResultInfo::default_instance();
}
inline ::proto::ChannellerSlabLoopDungeonResultInfo* DungeonSettleNotify::mutable_channeller_slab_loop_dungeon_result_info() {
  if (!has_channeller_slab_loop_dungeon_result_info()) {
    clear_detail();
    set_has_channeller_slab_loop_dungeon_result_info();
    detail_.channeller_slab_loop_dungeon_result_info_ = new ::proto::ChannellerSlabLoopDungeonResultInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.DungeonSettleNotify.channeller_slab_loop_dungeon_result_info)
  return detail_.channeller_slab_loop_dungeon_result_info_;
}
inline ::proto::ChannellerSlabLoopDungeonResultInfo* DungeonSettleNotify::release_channeller_slab_loop_dungeon_result_info() {
  // @@protoc_insertion_point(field_release:proto.DungeonSettleNotify.channeller_slab_loop_dungeon_result_info)
  if (has_channeller_slab_loop_dungeon_result_info()) {
    clear_has_detail();
    ::proto::ChannellerSlabLoopDungeonResultInfo* temp = detail_.channeller_slab_loop_dungeon_result_info_;
    detail_.channeller_slab_loop_dungeon_result_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void DungeonSettleNotify::set_allocated_channeller_slab_loop_dungeon_result_info(::proto::ChannellerSlabLoopDungeonResultInfo* channeller_slab_loop_dungeon_result_info) {
  clear_detail();
  if (channeller_slab_loop_dungeon_result_info) {
    set_has_channeller_slab_loop_dungeon_result_info();
    detail_.channeller_slab_loop_dungeon_result_info_ = channeller_slab_loop_dungeon_result_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.DungeonSettleNotify.channeller_slab_loop_dungeon_result_info)
}

// .proto.EffigyChallengeDungeonResultInfo effigy_challenge_dungeon_result_info = 328;
inline bool DungeonSettleNotify::has_effigy_challenge_dungeon_result_info() const {
  return detail_case() == kEffigyChallengeDungeonResultInfo;
}
inline void DungeonSettleNotify::set_has_effigy_challenge_dungeon_result_info() {
  _oneof_case_[0] = kEffigyChallengeDungeonResultInfo;
}
inline void DungeonSettleNotify::clear_effigy_challenge_dungeon_result_info() {
  if (has_effigy_challenge_dungeon_result_info()) {
    delete detail_.effigy_challenge_dungeon_result_info_;
    clear_has_detail();
  }
}
inline  const ::proto::EffigyChallengeDungeonResultInfo& DungeonSettleNotify::effigy_challenge_dungeon_result_info() const {
  // @@protoc_insertion_point(field_get:proto.DungeonSettleNotify.effigy_challenge_dungeon_result_info)
  return has_effigy_challenge_dungeon_result_info()
      ? *detail_.effigy_challenge_dungeon_result_info_
      : ::proto::EffigyChallengeDungeonResultInfo::default_instance();
}
inline ::proto::EffigyChallengeDungeonResultInfo* DungeonSettleNotify::mutable_effigy_challenge_dungeon_result_info() {
  if (!has_effigy_challenge_dungeon_result_info()) {
    clear_detail();
    set_has_effigy_challenge_dungeon_result_info();
    detail_.effigy_challenge_dungeon_result_info_ = new ::proto::EffigyChallengeDungeonResultInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.DungeonSettleNotify.effigy_challenge_dungeon_result_info)
  return detail_.effigy_challenge_dungeon_result_info_;
}
inline ::proto::EffigyChallengeDungeonResultInfo* DungeonSettleNotify::release_effigy_challenge_dungeon_result_info() {
  // @@protoc_insertion_point(field_release:proto.DungeonSettleNotify.effigy_challenge_dungeon_result_info)
  if (has_effigy_challenge_dungeon_result_info()) {
    clear_has_detail();
    ::proto::EffigyChallengeDungeonResultInfo* temp = detail_.effigy_challenge_dungeon_result_info_;
    detail_.effigy_challenge_dungeon_result_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void DungeonSettleNotify::set_allocated_effigy_challenge_dungeon_result_info(::proto::EffigyChallengeDungeonResultInfo* effigy_challenge_dungeon_result_info) {
  clear_detail();
  if (effigy_challenge_dungeon_result_info) {
    set_has_effigy_challenge_dungeon_result_info();
    detail_.effigy_challenge_dungeon_result_info_ = effigy_challenge_dungeon_result_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.DungeonSettleNotify.effigy_challenge_dungeon_result_info)
}

// .proto.RoguelikeDungeonSettleInfo roguelike_dungeon_settle_info = 1482;
inline bool DungeonSettleNotify::has_roguelike_dungeon_settle_info() const {
  return detail_case() == kRoguelikeDungeonSettleInfo;
}
inline void DungeonSettleNotify::set_has_roguelike_dungeon_settle_info() {
  _oneof_case_[0] = kRoguelikeDungeonSettleInfo;
}
inline void DungeonSettleNotify::clear_roguelike_dungeon_settle_info() {
  if (has_roguelike_dungeon_settle_info()) {
    delete detail_.roguelike_dungeon_settle_info_;
    clear_has_detail();
  }
}
inline  const ::proto::RoguelikeDungeonSettleInfo& DungeonSettleNotify::roguelike_dungeon_settle_info() const {
  // @@protoc_insertion_point(field_get:proto.DungeonSettleNotify.roguelike_dungeon_settle_info)
  return has_roguelike_dungeon_settle_info()
      ? *detail_.roguelike_dungeon_settle_info_
      : ::proto::RoguelikeDungeonSettleInfo::default_instance();
}
inline ::proto::RoguelikeDungeonSettleInfo* DungeonSettleNotify::mutable_roguelike_dungeon_settle_info() {
  if (!has_roguelike_dungeon_settle_info()) {
    clear_detail();
    set_has_roguelike_dungeon_settle_info();
    detail_.roguelike_dungeon_settle_info_ = new ::proto::RoguelikeDungeonSettleInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.DungeonSettleNotify.roguelike_dungeon_settle_info)
  return detail_.roguelike_dungeon_settle_info_;
}
inline ::proto::RoguelikeDungeonSettleInfo* DungeonSettleNotify::release_roguelike_dungeon_settle_info() {
  // @@protoc_insertion_point(field_release:proto.DungeonSettleNotify.roguelike_dungeon_settle_info)
  if (has_roguelike_dungeon_settle_info()) {
    clear_has_detail();
    ::proto::RoguelikeDungeonSettleInfo* temp = detail_.roguelike_dungeon_settle_info_;
    detail_.roguelike_dungeon_settle_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void DungeonSettleNotify::set_allocated_roguelike_dungeon_settle_info(::proto::RoguelikeDungeonSettleInfo* roguelike_dungeon_settle_info) {
  clear_detail();
  if (roguelike_dungeon_settle_info) {
    set_has_roguelike_dungeon_settle_info();
    detail_.roguelike_dungeon_settle_info_ = roguelike_dungeon_settle_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.DungeonSettleNotify.roguelike_dungeon_settle_info)
}

// .proto.CrystalLinkDungeonSettleInfo crystal_link_settle_info = 112;
inline bool DungeonSettleNotify::has_crystal_link_settle_info() const {
  return detail_case() == kCrystalLinkSettleInfo;
}
inline void DungeonSettleNotify::set_has_crystal_link_settle_info() {
  _oneof_case_[0] = kCrystalLinkSettleInfo;
}
inline void DungeonSettleNotify::clear_crystal_link_settle_info() {
  if (has_crystal_link_settle_info()) {
    delete detail_.crystal_link_settle_info_;
    clear_has_detail();
  }
}
inline  const ::proto::CrystalLinkDungeonSettleInfo& DungeonSettleNotify::crystal_link_settle_info() const {
  // @@protoc_insertion_point(field_get:proto.DungeonSettleNotify.crystal_link_settle_info)
  return has_crystal_link_settle_info()
      ? *detail_.crystal_link_settle_info_
      : ::proto::CrystalLinkDungeonSettleInfo::default_instance();
}
inline ::proto::CrystalLinkDungeonSettleInfo* DungeonSettleNotify::mutable_crystal_link_settle_info() {
  if (!has_crystal_link_settle_info()) {
    clear_detail();
    set_has_crystal_link_settle_info();
    detail_.crystal_link_settle_info_ = new ::proto::CrystalLinkDungeonSettleInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.DungeonSettleNotify.crystal_link_settle_info)
  return detail_.crystal_link_settle_info_;
}
inline ::proto::CrystalLinkDungeonSettleInfo* DungeonSettleNotify::release_crystal_link_settle_info() {
  // @@protoc_insertion_point(field_release:proto.DungeonSettleNotify.crystal_link_settle_info)
  if (has_crystal_link_settle_info()) {
    clear_has_detail();
    ::proto::CrystalLinkDungeonSettleInfo* temp = detail_.crystal_link_settle_info_;
    detail_.crystal_link_settle_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void DungeonSettleNotify::set_allocated_crystal_link_settle_info(::proto::CrystalLinkDungeonSettleInfo* crystal_link_settle_info) {
  clear_detail();
  if (crystal_link_settle_info) {
    set_has_crystal_link_settle_info();
    detail_.crystal_link_settle_info_ = crystal_link_settle_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.DungeonSettleNotify.crystal_link_settle_info)
}

// .proto.SummerTimeV2DungeonSettleInfo summer_time_v2_dungeon_settle_info = 1882;
inline bool DungeonSettleNotify::has_summer_time_v2_dungeon_settle_info() const {
  return detail_case() == kSummerTimeV2DungeonSettleInfo;
}
inline void DungeonSettleNotify::set_has_summer_time_v2_dungeon_settle_info() {
  _oneof_case_[0] = kSummerTimeV2DungeonSettleInfo;
}
inline void DungeonSettleNotify::clear_summer_time_v2_dungeon_settle_info() {
  if (has_summer_time_v2_dungeon_settle_info()) {
    delete detail_.summer_time_v2_dungeon_settle_info_;
    clear_has_detail();
  }
}
inline  const ::proto::SummerTimeV2DungeonSettleInfo& DungeonSettleNotify::summer_time_v2_dungeon_settle_info() const {
  // @@protoc_insertion_point(field_get:proto.DungeonSettleNotify.summer_time_v2_dungeon_settle_info)
  return has_summer_time_v2_dungeon_settle_info()
      ? *detail_.summer_time_v2_dungeon_settle_info_
      : ::proto::SummerTimeV2DungeonSettleInfo::default_instance();
}
inline ::proto::SummerTimeV2DungeonSettleInfo* DungeonSettleNotify::mutable_summer_time_v2_dungeon_settle_info() {
  if (!has_summer_time_v2_dungeon_settle_info()) {
    clear_detail();
    set_has_summer_time_v2_dungeon_settle_info();
    detail_.summer_time_v2_dungeon_settle_info_ = new ::proto::SummerTimeV2DungeonSettleInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.DungeonSettleNotify.summer_time_v2_dungeon_settle_info)
  return detail_.summer_time_v2_dungeon_settle_info_;
}
inline ::proto::SummerTimeV2DungeonSettleInfo* DungeonSettleNotify::release_summer_time_v2_dungeon_settle_info() {
  // @@protoc_insertion_point(field_release:proto.DungeonSettleNotify.summer_time_v2_dungeon_settle_info)
  if (has_summer_time_v2_dungeon_settle_info()) {
    clear_has_detail();
    ::proto::SummerTimeV2DungeonSettleInfo* temp = detail_.summer_time_v2_dungeon_settle_info_;
    detail_.summer_time_v2_dungeon_settle_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void DungeonSettleNotify::set_allocated_summer_time_v2_dungeon_settle_info(::proto::SummerTimeV2DungeonSettleInfo* summer_time_v2_dungeon_settle_info) {
  clear_detail();
  if (summer_time_v2_dungeon_settle_info) {
    set_has_summer_time_v2_dungeon_settle_info();
    detail_.summer_time_v2_dungeon_settle_info_ = summer_time_v2_dungeon_settle_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.DungeonSettleNotify.summer_time_v2_dungeon_settle_info)
}

// .proto.InstableSprayDungeonSettleInfo instable_spray_settle_info = 193;
inline bool DungeonSettleNotify::has_instable_spray_settle_info() const {
  return detail_case() == kInstableSpraySettleInfo;
}
inline void DungeonSettleNotify::set_has_instable_spray_settle_info() {
  _oneof_case_[0] = kInstableSpraySettleInfo;
}
inline void DungeonSettleNotify::clear_instable_spray_settle_info() {
  if (has_instable_spray_settle_info()) {
    delete detail_.instable_spray_settle_info_;
    clear_has_detail();
  }
}
inline  const ::proto::InstableSprayDungeonSettleInfo& DungeonSettleNotify::instable_spray_settle_info() const {
  // @@protoc_insertion_point(field_get:proto.DungeonSettleNotify.instable_spray_settle_info)
  return has_instable_spray_settle_info()
      ? *detail_.instable_spray_settle_info_
      : ::proto::InstableSprayDungeonSettleInfo::default_instance();
}
inline ::proto::InstableSprayDungeonSettleInfo* DungeonSettleNotify::mutable_instable_spray_settle_info() {
  if (!has_instable_spray_settle_info()) {
    clear_detail();
    set_has_instable_spray_settle_info();
    detail_.instable_spray_settle_info_ = new ::proto::InstableSprayDungeonSettleInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.DungeonSettleNotify.instable_spray_settle_info)
  return detail_.instable_spray_settle_info_;
}
inline ::proto::InstableSprayDungeonSettleInfo* DungeonSettleNotify::release_instable_spray_settle_info() {
  // @@protoc_insertion_point(field_release:proto.DungeonSettleNotify.instable_spray_settle_info)
  if (has_instable_spray_settle_info()) {
    clear_has_detail();
    ::proto::InstableSprayDungeonSettleInfo* temp = detail_.instable_spray_settle_info_;
    detail_.instable_spray_settle_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void DungeonSettleNotify::set_allocated_instable_spray_settle_info(::proto::InstableSprayDungeonSettleInfo* instable_spray_settle_info) {
  clear_detail();
  if (instable_spray_settle_info) {
    set_has_instable_spray_settle_info();
    detail_.instable_spray_settle_info_ = instable_spray_settle_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.DungeonSettleNotify.instable_spray_settle_info)
}

// .proto.WindFieldDungeonSettleInfo wind_field_dungeon_settle_info = 1825;
inline bool DungeonSettleNotify::has_wind_field_dungeon_settle_info() const {
  return detail_case() == kWindFieldDungeonSettleInfo;
}
inline void DungeonSettleNotify::set_has_wind_field_dungeon_settle_info() {
  _oneof_case_[0] = kWindFieldDungeonSettleInfo;
}
inline void DungeonSettleNotify::clear_wind_field_dungeon_settle_info() {
  if (has_wind_field_dungeon_settle_info()) {
    delete detail_.wind_field_dungeon_settle_info_;
    clear_has_detail();
  }
}
inline  const ::proto::WindFieldDungeonSettleInfo& DungeonSettleNotify::wind_field_dungeon_settle_info() const {
  // @@protoc_insertion_point(field_get:proto.DungeonSettleNotify.wind_field_dungeon_settle_info)
  return has_wind_field_dungeon_settle_info()
      ? *detail_.wind_field_dungeon_settle_info_
      : ::proto::WindFieldDungeonSettleInfo::default_instance();
}
inline ::proto::WindFieldDungeonSettleInfo* DungeonSettleNotify::mutable_wind_field_dungeon_settle_info() {
  if (!has_wind_field_dungeon_settle_info()) {
    clear_detail();
    set_has_wind_field_dungeon_settle_info();
    detail_.wind_field_dungeon_settle_info_ = new ::proto::WindFieldDungeonSettleInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.DungeonSettleNotify.wind_field_dungeon_settle_info)
  return detail_.wind_field_dungeon_settle_info_;
}
inline ::proto::WindFieldDungeonSettleInfo* DungeonSettleNotify::release_wind_field_dungeon_settle_info() {
  // @@protoc_insertion_point(field_release:proto.DungeonSettleNotify.wind_field_dungeon_settle_info)
  if (has_wind_field_dungeon_settle_info()) {
    clear_has_detail();
    ::proto::WindFieldDungeonSettleInfo* temp = detail_.wind_field_dungeon_settle_info_;
    detail_.wind_field_dungeon_settle_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void DungeonSettleNotify::set_allocated_wind_field_dungeon_settle_info(::proto::WindFieldDungeonSettleInfo* wind_field_dungeon_settle_info) {
  clear_detail();
  if (wind_field_dungeon_settle_info) {
    set_has_wind_field_dungeon_settle_info();
    detail_.wind_field_dungeon_settle_info_ = wind_field_dungeon_settle_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.DungeonSettleNotify.wind_field_dungeon_settle_info)
}

// .proto.EffigyChallengeV2SettleInfo effigy_challenge_v2_settle_info = 1802;
inline bool DungeonSettleNotify::has_effigy_challenge_v2_settle_info() const {
  return detail_case() == kEffigyChallengeV2SettleInfo;
}
inline void DungeonSettleNotify::set_has_effigy_challenge_v2_settle_info() {
  _oneof_case_[0] = kEffigyChallengeV2SettleInfo;
}
inline void DungeonSettleNotify::clear_effigy_challenge_v2_settle_info() {
  if (has_effigy_challenge_v2_settle_info()) {
    delete detail_.effigy_challenge_v2_settle_info_;
    clear_has_detail();
  }
}
inline  const ::proto::EffigyChallengeV2SettleInfo& DungeonSettleNotify::effigy_challenge_v2_settle_info() const {
  // @@protoc_insertion_point(field_get:proto.DungeonSettleNotify.effigy_challenge_v2_settle_info)
  return has_effigy_challenge_v2_settle_info()
      ? *detail_.effigy_challenge_v2_settle_info_
      : ::proto::EffigyChallengeV2SettleInfo::default_instance();
}
inline ::proto::EffigyChallengeV2SettleInfo* DungeonSettleNotify::mutable_effigy_challenge_v2_settle_info() {
  if (!has_effigy_challenge_v2_settle_info()) {
    clear_detail();
    set_has_effigy_challenge_v2_settle_info();
    detail_.effigy_challenge_v2_settle_info_ = new ::proto::EffigyChallengeV2SettleInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.DungeonSettleNotify.effigy_challenge_v2_settle_info)
  return detail_.effigy_challenge_v2_settle_info_;
}
inline ::proto::EffigyChallengeV2SettleInfo* DungeonSettleNotify::release_effigy_challenge_v2_settle_info() {
  // @@protoc_insertion_point(field_release:proto.DungeonSettleNotify.effigy_challenge_v2_settle_info)
  if (has_effigy_challenge_v2_settle_info()) {
    clear_has_detail();
    ::proto::EffigyChallengeV2SettleInfo* temp = detail_.effigy_challenge_v2_settle_info_;
    detail_.effigy_challenge_v2_settle_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void DungeonSettleNotify::set_allocated_effigy_challenge_v2_settle_info(::proto::EffigyChallengeV2SettleInfo* effigy_challenge_v2_settle_info) {
  clear_detail();
  if (effigy_challenge_v2_settle_info) {
    set_has_effigy_challenge_v2_settle_info();
    detail_.effigy_challenge_v2_settle_info_ = effigy_challenge_v2_settle_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.DungeonSettleNotify.effigy_challenge_v2_settle_info)
}

// .proto.TeamChainSettleInfo team_chain_settle_info = 324;
inline bool DungeonSettleNotify::has_team_chain_settle_info() const {
  return detail_case() == kTeamChainSettleInfo;
}
inline void DungeonSettleNotify::set_has_team_chain_settle_info() {
  _oneof_case_[0] = kTeamChainSettleInfo;
}
inline void DungeonSettleNotify::clear_team_chain_settle_info() {
  if (has_team_chain_settle_info()) {
    delete detail_.team_chain_settle_info_;
    clear_has_detail();
  }
}
inline  const ::proto::TeamChainSettleInfo& DungeonSettleNotify::team_chain_settle_info() const {
  // @@protoc_insertion_point(field_get:proto.DungeonSettleNotify.team_chain_settle_info)
  return has_team_chain_settle_info()
      ? *detail_.team_chain_settle_info_
      : ::proto::TeamChainSettleInfo::default_instance();
}
inline ::proto::TeamChainSettleInfo* DungeonSettleNotify::mutable_team_chain_settle_info() {
  if (!has_team_chain_settle_info()) {
    clear_detail();
    set_has_team_chain_settle_info();
    detail_.team_chain_settle_info_ = new ::proto::TeamChainSettleInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.DungeonSettleNotify.team_chain_settle_info)
  return detail_.team_chain_settle_info_;
}
inline ::proto::TeamChainSettleInfo* DungeonSettleNotify::release_team_chain_settle_info() {
  // @@protoc_insertion_point(field_release:proto.DungeonSettleNotify.team_chain_settle_info)
  if (has_team_chain_settle_info()) {
    clear_has_detail();
    ::proto::TeamChainSettleInfo* temp = detail_.team_chain_settle_info_;
    detail_.team_chain_settle_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void DungeonSettleNotify::set_allocated_team_chain_settle_info(::proto::TeamChainSettleInfo* team_chain_settle_info) {
  clear_detail();
  if (team_chain_settle_info) {
    set_has_team_chain_settle_info();
    detail_.team_chain_settle_info_ = team_chain_settle_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.DungeonSettleNotify.team_chain_settle_info)
}

inline bool DungeonSettleNotify::has_detail() const {
  return detail_case() != DETAIL_NOT_SET;
}
inline void DungeonSettleNotify::clear_has_detail() {
  _oneof_case_[0] = DETAIL_NOT_SET;
}
inline DungeonSettleNotify::DetailCase DungeonSettleNotify::detail_case() const {
  return DungeonSettleNotify::DetailCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// DungeonPlayerDieNotify

// map<uint32, .proto.StrengthenPointData> strengthen_point_data_map = 15;
inline int DungeonPlayerDieNotify::strengthen_point_data_map_size() const {
  return strengthen_point_data_map_.size();
}
inline void DungeonPlayerDieNotify::clear_strengthen_point_data_map() {
  strengthen_point_data_map_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::StrengthenPointData >&
DungeonPlayerDieNotify::strengthen_point_data_map() const {
  // @@protoc_insertion_point(field_map:proto.DungeonPlayerDieNotify.strengthen_point_data_map)
  return strengthen_point_data_map_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::StrengthenPointData >*
DungeonPlayerDieNotify::mutable_strengthen_point_data_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.DungeonPlayerDieNotify.strengthen_point_data_map)
  return strengthen_point_data_map_.MutableMap();
}

// uint32 wait_time = 1;
inline void DungeonPlayerDieNotify::clear_wait_time() {
  wait_time_ = 0u;
}
inline ::google::protobuf::uint32 DungeonPlayerDieNotify::wait_time() const {
  // @@protoc_insertion_point(field_get:proto.DungeonPlayerDieNotify.wait_time)
  return wait_time_;
}
inline void DungeonPlayerDieNotify::set_wait_time(::google::protobuf::uint32 value) {
  
  wait_time_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonPlayerDieNotify.wait_time)
}

// uint32 dungeon_id = 9;
inline void DungeonPlayerDieNotify::clear_dungeon_id() {
  dungeon_id_ = 0u;
}
inline ::google::protobuf::uint32 DungeonPlayerDieNotify::dungeon_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonPlayerDieNotify.dungeon_id)
  return dungeon_id_;
}
inline void DungeonPlayerDieNotify::set_dungeon_id(::google::protobuf::uint32 value) {
  
  dungeon_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonPlayerDieNotify.dungeon_id)
}

// uint32 murderer_entity_id = 13;
inline void DungeonPlayerDieNotify::clear_murderer_entity_id() {
  murderer_entity_id_ = 0u;
}
inline ::google::protobuf::uint32 DungeonPlayerDieNotify::murderer_entity_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonPlayerDieNotify.murderer_entity_id)
  return murderer_entity_id_;
}
inline void DungeonPlayerDieNotify::set_murderer_entity_id(::google::protobuf::uint32 value) {
  
  murderer_entity_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonPlayerDieNotify.murderer_entity_id)
}

// .proto.PlayerDieType die_type = 3;
inline void DungeonPlayerDieNotify::clear_die_type() {
  die_type_ = 0;
}
inline ::proto::PlayerDieType DungeonPlayerDieNotify::die_type() const {
  // @@protoc_insertion_point(field_get:proto.DungeonPlayerDieNotify.die_type)
  return static_cast< ::proto::PlayerDieType >(die_type_);
}
inline void DungeonPlayerDieNotify::set_die_type(::proto::PlayerDieType value) {
  
  die_type_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonPlayerDieNotify.die_type)
}

// uint32 revive_count = 6;
inline void DungeonPlayerDieNotify::clear_revive_count() {
  revive_count_ = 0u;
}
inline ::google::protobuf::uint32 DungeonPlayerDieNotify::revive_count() const {
  // @@protoc_insertion_point(field_get:proto.DungeonPlayerDieNotify.revive_count)
  return revive_count_;
}
inline void DungeonPlayerDieNotify::set_revive_count(::google::protobuf::uint32 value) {
  
  revive_count_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonPlayerDieNotify.revive_count)
}

// uint32 monster_id = 4;
inline bool DungeonPlayerDieNotify::has_monster_id() const {
  return entity_case() == kMonsterId;
}
inline void DungeonPlayerDieNotify::set_has_monster_id() {
  _oneof_case_[0] = kMonsterId;
}
inline void DungeonPlayerDieNotify::clear_monster_id() {
  if (has_monster_id()) {
    entity_.monster_id_ = 0u;
    clear_has_entity();
  }
}
inline ::google::protobuf::uint32 DungeonPlayerDieNotify::monster_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonPlayerDieNotify.monster_id)
  if (has_monster_id()) {
    return entity_.monster_id_;
  }
  return 0u;
}
inline void DungeonPlayerDieNotify::set_monster_id(::google::protobuf::uint32 value) {
  if (!has_monster_id()) {
    clear_entity();
    set_has_monster_id();
  }
  entity_.monster_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonPlayerDieNotify.monster_id)
}

// uint32 gadget_id = 8;
inline bool DungeonPlayerDieNotify::has_gadget_id() const {
  return entity_case() == kGadgetId;
}
inline void DungeonPlayerDieNotify::set_has_gadget_id() {
  _oneof_case_[0] = kGadgetId;
}
inline void DungeonPlayerDieNotify::clear_gadget_id() {
  if (has_gadget_id()) {
    entity_.gadget_id_ = 0u;
    clear_has_entity();
  }
}
inline ::google::protobuf::uint32 DungeonPlayerDieNotify::gadget_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonPlayerDieNotify.gadget_id)
  if (has_gadget_id()) {
    return entity_.gadget_id_;
  }
  return 0u;
}
inline void DungeonPlayerDieNotify::set_gadget_id(::google::protobuf::uint32 value) {
  if (!has_gadget_id()) {
    clear_entity();
    set_has_gadget_id();
  }
  entity_.gadget_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonPlayerDieNotify.gadget_id)
}

inline bool DungeonPlayerDieNotify::has_entity() const {
  return entity_case() != ENTITY_NOT_SET;
}
inline void DungeonPlayerDieNotify::clear_has_entity() {
  _oneof_case_[0] = ENTITY_NOT_SET;
}
inline DungeonPlayerDieNotify::EntityCase DungeonPlayerDieNotify::entity_case() const {
  return DungeonPlayerDieNotify::EntityCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// DungeonDieOptionReq

// .proto.PlayerDieOption die_option = 11;
inline void DungeonDieOptionReq::clear_die_option() {
  die_option_ = 0;
}
inline ::proto::PlayerDieOption DungeonDieOptionReq::die_option() const {
  // @@protoc_insertion_point(field_get:proto.DungeonDieOptionReq.die_option)
  return static_cast< ::proto::PlayerDieOption >(die_option_);
}
inline void DungeonDieOptionReq::set_die_option(::proto::PlayerDieOption value) {
  
  die_option_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonDieOptionReq.die_option)
}

// bool is_quit_immediately = 14;
inline void DungeonDieOptionReq::clear_is_quit_immediately() {
  is_quit_immediately_ = false;
}
inline bool DungeonDieOptionReq::is_quit_immediately() const {
  // @@protoc_insertion_point(field_get:proto.DungeonDieOptionReq.is_quit_immediately)
  return is_quit_immediately_;
}
inline void DungeonDieOptionReq::set_is_quit_immediately(bool value) {
  
  is_quit_immediately_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonDieOptionReq.is_quit_immediately)
}

// -------------------------------------------------------------------

// DungeonDieOptionRsp

// int32 retcode = 5;
inline void DungeonDieOptionRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 DungeonDieOptionRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.DungeonDieOptionRsp.retcode)
  return retcode_;
}
inline void DungeonDieOptionRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonDieOptionRsp.retcode)
}

// uint32 revive_count = 10;
inline void DungeonDieOptionRsp::clear_revive_count() {
  revive_count_ = 0u;
}
inline ::google::protobuf::uint32 DungeonDieOptionRsp::revive_count() const {
  // @@protoc_insertion_point(field_get:proto.DungeonDieOptionRsp.revive_count)
  return revive_count_;
}
inline void DungeonDieOptionRsp::set_revive_count(::google::protobuf::uint32 value) {
  
  revive_count_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonDieOptionRsp.revive_count)
}

// .proto.PlayerDieOption die_option = 6;
inline void DungeonDieOptionRsp::clear_die_option() {
  die_option_ = 0;
}
inline ::proto::PlayerDieOption DungeonDieOptionRsp::die_option() const {
  // @@protoc_insertion_point(field_get:proto.DungeonDieOptionRsp.die_option)
  return static_cast< ::proto::PlayerDieOption >(die_option_);
}
inline void DungeonDieOptionRsp::set_die_option(::proto::PlayerDieOption value) {
  
  die_option_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonDieOptionRsp.die_option)
}

// -------------------------------------------------------------------

// DungeonShowReminderNotify

// uint32 reminder_id = 9;
inline void DungeonShowReminderNotify::clear_reminder_id() {
  reminder_id_ = 0u;
}
inline ::google::protobuf::uint32 DungeonShowReminderNotify::reminder_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonShowReminderNotify.reminder_id)
  return reminder_id_;
}
inline void DungeonShowReminderNotify::set_reminder_id(::google::protobuf::uint32 value) {
  
  reminder_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonShowReminderNotify.reminder_id)
}

// -------------------------------------------------------------------

// DungeonPlayerDieReq

// .proto.PlayerDieType die_type = 6;
inline void DungeonPlayerDieReq::clear_die_type() {
  die_type_ = 0;
}
inline ::proto::PlayerDieType DungeonPlayerDieReq::die_type() const {
  // @@protoc_insertion_point(field_get:proto.DungeonPlayerDieReq.die_type)
  return static_cast< ::proto::PlayerDieType >(die_type_);
}
inline void DungeonPlayerDieReq::set_die_type(::proto::PlayerDieType value) {
  
  die_type_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonPlayerDieReq.die_type)
}

// uint32 dungeon_id = 8;
inline void DungeonPlayerDieReq::clear_dungeon_id() {
  dungeon_id_ = 0u;
}
inline ::google::protobuf::uint32 DungeonPlayerDieReq::dungeon_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonPlayerDieReq.dungeon_id)
  return dungeon_id_;
}
inline void DungeonPlayerDieReq::set_dungeon_id(::google::protobuf::uint32 value) {
  
  dungeon_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonPlayerDieReq.dungeon_id)
}

// -------------------------------------------------------------------

// DungeonPlayerDieRsp

// int32 retcode = 5;
inline void DungeonPlayerDieRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 DungeonPlayerDieRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.DungeonPlayerDieRsp.retcode)
  return retcode_;
}
inline void DungeonPlayerDieRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonPlayerDieRsp.retcode)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// DungeonDataNotify

// map<uint32, uint32> dungeon_data_map = 1;
inline int DungeonDataNotify::dungeon_data_map_size() const {
  return dungeon_data_map_.size();
}
inline void DungeonDataNotify::clear_dungeon_data_map() {
  dungeon_data_map_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
DungeonDataNotify::dungeon_data_map() const {
  // @@protoc_insertion_point(field_map:proto.DungeonDataNotify.dungeon_data_map)
  return dungeon_data_map_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
DungeonDataNotify::mutable_dungeon_data_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.DungeonDataNotify.dungeon_data_map)
  return dungeon_data_map_.MutableMap();
}

// -------------------------------------------------------------------

// DungeonChallengeBeginNotify

// uint32 father_index = 5;
inline void DungeonChallengeBeginNotify::clear_father_index() {
  father_index_ = 0u;
}
inline ::google::protobuf::uint32 DungeonChallengeBeginNotify::father_index() const {
  // @@protoc_insertion_point(field_get:proto.DungeonChallengeBeginNotify.father_index)
  return father_index_;
}
inline void DungeonChallengeBeginNotify::set_father_index(::google::protobuf::uint32 value) {
  
  father_index_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonChallengeBeginNotify.father_index)
}

// repeated uint32 param_list = 14;
inline int DungeonChallengeBeginNotify::param_list_size() const {
  return param_list_.size();
}
inline void DungeonChallengeBeginNotify::clear_param_list() {
  param_list_.Clear();
}
inline ::google::protobuf::uint32 DungeonChallengeBeginNotify::param_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.DungeonChallengeBeginNotify.param_list)
  return param_list_.Get(index);
}
inline void DungeonChallengeBeginNotify::set_param_list(int index, ::google::protobuf::uint32 value) {
  param_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.DungeonChallengeBeginNotify.param_list)
}
inline void DungeonChallengeBeginNotify::add_param_list(::google::protobuf::uint32 value) {
  param_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.DungeonChallengeBeginNotify.param_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DungeonChallengeBeginNotify::param_list() const {
  // @@protoc_insertion_point(field_list:proto.DungeonChallengeBeginNotify.param_list)
  return param_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DungeonChallengeBeginNotify::mutable_param_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.DungeonChallengeBeginNotify.param_list)
  return &param_list_;
}

// uint32 challenge_index = 6;
inline void DungeonChallengeBeginNotify::clear_challenge_index() {
  challenge_index_ = 0u;
}
inline ::google::protobuf::uint32 DungeonChallengeBeginNotify::challenge_index() const {
  // @@protoc_insertion_point(field_get:proto.DungeonChallengeBeginNotify.challenge_index)
  return challenge_index_;
}
inline void DungeonChallengeBeginNotify::set_challenge_index(::google::protobuf::uint32 value) {
  
  challenge_index_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonChallengeBeginNotify.challenge_index)
}

// uint32 challenge_id = 1;
inline void DungeonChallengeBeginNotify::clear_challenge_id() {
  challenge_id_ = 0u;
}
inline ::google::protobuf::uint32 DungeonChallengeBeginNotify::challenge_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonChallengeBeginNotify.challenge_id)
  return challenge_id_;
}
inline void DungeonChallengeBeginNotify::set_challenge_id(::google::protobuf::uint32 value) {
  
  challenge_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonChallengeBeginNotify.challenge_id)
}

// uint32 group_id = 4;
inline void DungeonChallengeBeginNotify::clear_group_id() {
  group_id_ = 0u;
}
inline ::google::protobuf::uint32 DungeonChallengeBeginNotify::group_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonChallengeBeginNotify.group_id)
  return group_id_;
}
inline void DungeonChallengeBeginNotify::set_group_id(::google::protobuf::uint32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonChallengeBeginNotify.group_id)
}

// repeated uint32 uid_list = 12;
inline int DungeonChallengeBeginNotify::uid_list_size() const {
  return uid_list_.size();
}
inline void DungeonChallengeBeginNotify::clear_uid_list() {
  uid_list_.Clear();
}
inline ::google::protobuf::uint32 DungeonChallengeBeginNotify::uid_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.DungeonChallengeBeginNotify.uid_list)
  return uid_list_.Get(index);
}
inline void DungeonChallengeBeginNotify::set_uid_list(int index, ::google::protobuf::uint32 value) {
  uid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.DungeonChallengeBeginNotify.uid_list)
}
inline void DungeonChallengeBeginNotify::add_uid_list(::google::protobuf::uint32 value) {
  uid_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.DungeonChallengeBeginNotify.uid_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DungeonChallengeBeginNotify::uid_list() const {
  // @@protoc_insertion_point(field_list:proto.DungeonChallengeBeginNotify.uid_list)
  return uid_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DungeonChallengeBeginNotify::mutable_uid_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.DungeonChallengeBeginNotify.uid_list)
  return &uid_list_;
}

// -------------------------------------------------------------------

// ChallengeBrief

// uint32 cur_progress = 9;
inline void ChallengeBrief::clear_cur_progress() {
  cur_progress_ = 0u;
}
inline ::google::protobuf::uint32 ChallengeBrief::cur_progress() const {
  // @@protoc_insertion_point(field_get:proto.ChallengeBrief.cur_progress)
  return cur_progress_;
}
inline void ChallengeBrief::set_cur_progress(::google::protobuf::uint32 value) {
  
  cur_progress_ = value;
  // @@protoc_insertion_point(field_set:proto.ChallengeBrief.cur_progress)
}

// uint32 challenge_index = 10;
inline void ChallengeBrief::clear_challenge_index() {
  challenge_index_ = 0u;
}
inline ::google::protobuf::uint32 ChallengeBrief::challenge_index() const {
  // @@protoc_insertion_point(field_get:proto.ChallengeBrief.challenge_index)
  return challenge_index_;
}
inline void ChallengeBrief::set_challenge_index(::google::protobuf::uint32 value) {
  
  challenge_index_ = value;
  // @@protoc_insertion_point(field_set:proto.ChallengeBrief.challenge_index)
}

// bool is_success = 4;
inline void ChallengeBrief::clear_is_success() {
  is_success_ = false;
}
inline bool ChallengeBrief::is_success() const {
  // @@protoc_insertion_point(field_get:proto.ChallengeBrief.is_success)
  return is_success_;
}
inline void ChallengeBrief::set_is_success(bool value) {
  
  is_success_ = value;
  // @@protoc_insertion_point(field_set:proto.ChallengeBrief.is_success)
}

// uint32 challenge_id = 8;
inline void ChallengeBrief::clear_challenge_id() {
  challenge_id_ = 0u;
}
inline ::google::protobuf::uint32 ChallengeBrief::challenge_id() const {
  // @@protoc_insertion_point(field_get:proto.ChallengeBrief.challenge_id)
  return challenge_id_;
}
inline void ChallengeBrief::set_challenge_id(::google::protobuf::uint32 value) {
  
  challenge_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ChallengeBrief.challenge_id)
}

// -------------------------------------------------------------------

// CustomDungeonResultInfo

// bool is_liked = 12;
inline void CustomDungeonResultInfo::clear_is_liked() {
  is_liked_ = false;
}
inline bool CustomDungeonResultInfo::is_liked() const {
  // @@protoc_insertion_point(field_get:proto.CustomDungeonResultInfo.is_liked)
  return is_liked_;
}
inline void CustomDungeonResultInfo::set_is_liked(bool value) {
  
  is_liked_ = value;
  // @@protoc_insertion_point(field_set:proto.CustomDungeonResultInfo.is_liked)
}

// uint32 got_coin_num = 9;
inline void CustomDungeonResultInfo::clear_got_coin_num() {
  got_coin_num_ = 0u;
}
inline ::google::protobuf::uint32 CustomDungeonResultInfo::got_coin_num() const {
  // @@protoc_insertion_point(field_get:proto.CustomDungeonResultInfo.got_coin_num)
  return got_coin_num_;
}
inline void CustomDungeonResultInfo::set_got_coin_num(::google::protobuf::uint32 value) {
  
  got_coin_num_ = value;
  // @@protoc_insertion_point(field_set:proto.CustomDungeonResultInfo.got_coin_num)
}

// repeated .proto.ChallengeBrief child_challenge_list = 6;
inline int CustomDungeonResultInfo::child_challenge_list_size() const {
  return child_challenge_list_.size();
}
inline void CustomDungeonResultInfo::clear_child_challenge_list() {
  child_challenge_list_.Clear();
}
inline const ::proto::ChallengeBrief& CustomDungeonResultInfo::child_challenge_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.CustomDungeonResultInfo.child_challenge_list)
  return child_challenge_list_.Get(index);
}
inline ::proto::ChallengeBrief* CustomDungeonResultInfo::mutable_child_challenge_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.CustomDungeonResultInfo.child_challenge_list)
  return child_challenge_list_.Mutable(index);
}
inline ::proto::ChallengeBrief* CustomDungeonResultInfo::add_child_challenge_list() {
  // @@protoc_insertion_point(field_add:proto.CustomDungeonResultInfo.child_challenge_list)
  return child_challenge_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::ChallengeBrief >*
CustomDungeonResultInfo::mutable_child_challenge_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.CustomDungeonResultInfo.child_challenge_list)
  return &child_challenge_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::ChallengeBrief >&
CustomDungeonResultInfo::child_challenge_list() const {
  // @@protoc_insertion_point(field_list:proto.CustomDungeonResultInfo.child_challenge_list)
  return child_challenge_list_;
}

// uint64 dungeon_guid = 3;
inline void CustomDungeonResultInfo::clear_dungeon_guid() {
  dungeon_guid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CustomDungeonResultInfo::dungeon_guid() const {
  // @@protoc_insertion_point(field_get:proto.CustomDungeonResultInfo.dungeon_guid)
  return dungeon_guid_;
}
inline void CustomDungeonResultInfo::set_dungeon_guid(::google::protobuf::uint64 value) {
  
  dungeon_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.CustomDungeonResultInfo.dungeon_guid)
}

// .proto.CustomDungeonFinishType finish_type = 7;
inline void CustomDungeonResultInfo::clear_finish_type() {
  finish_type_ = 0;
}
inline ::proto::CustomDungeonFinishType CustomDungeonResultInfo::finish_type() const {
  // @@protoc_insertion_point(field_get:proto.CustomDungeonResultInfo.finish_type)
  return static_cast< ::proto::CustomDungeonFinishType >(finish_type_);
}
inline void CustomDungeonResultInfo::set_finish_type(::proto::CustomDungeonFinishType value) {
  
  finish_type_ = value;
  // @@protoc_insertion_point(field_set:proto.CustomDungeonResultInfo.finish_type)
}

// uint32 time_cost = 11;
inline void CustomDungeonResultInfo::clear_time_cost() {
  time_cost_ = 0u;
}
inline ::google::protobuf::uint32 CustomDungeonResultInfo::time_cost() const {
  // @@protoc_insertion_point(field_get:proto.CustomDungeonResultInfo.time_cost)
  return time_cost_;
}
inline void CustomDungeonResultInfo::set_time_cost(::google::protobuf::uint32 value) {
  
  time_cost_ = value;
  // @@protoc_insertion_point(field_set:proto.CustomDungeonResultInfo.time_cost)
}

// bool is_arrive_finish = 2;
inline void CustomDungeonResultInfo::clear_is_arrive_finish() {
  is_arrive_finish_ = false;
}
inline bool CustomDungeonResultInfo::is_arrive_finish() const {
  // @@protoc_insertion_point(field_get:proto.CustomDungeonResultInfo.is_arrive_finish)
  return is_arrive_finish_;
}
inline void CustomDungeonResultInfo::set_is_arrive_finish(bool value) {
  
  is_arrive_finish_ = value;
  // @@protoc_insertion_point(field_set:proto.CustomDungeonResultInfo.is_arrive_finish)
}

// bool is_stored = 14;
inline void CustomDungeonResultInfo::clear_is_stored() {
  is_stored_ = false;
}
inline bool CustomDungeonResultInfo::is_stored() const {
  // @@protoc_insertion_point(field_get:proto.CustomDungeonResultInfo.is_stored)
  return is_stored_;
}
inline void CustomDungeonResultInfo::set_is_stored(bool value) {
  
  is_stored_ = value;
  // @@protoc_insertion_point(field_set:proto.CustomDungeonResultInfo.is_stored)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// DungeonChallengeFinishNotify

// map<uint32, .proto.StrengthenPointData> strengthen_point_data_map = 13;
inline int DungeonChallengeFinishNotify::strengthen_point_data_map_size() const {
  return strengthen_point_data_map_.size();
}
inline void DungeonChallengeFinishNotify::clear_strengthen_point_data_map() {
  strengthen_point_data_map_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::StrengthenPointData >&
DungeonChallengeFinishNotify::strengthen_point_data_map() const {
  // @@protoc_insertion_point(field_map:proto.DungeonChallengeFinishNotify.strengthen_point_data_map)
  return strengthen_point_data_map_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::StrengthenPointData >*
DungeonChallengeFinishNotify::mutable_strengthen_point_data_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.DungeonChallengeFinishNotify.strengthen_point_data_map)
  return strengthen_point_data_map_.MutableMap();
}

// .proto.ChallengeFinishType finish_type = 9;
inline void DungeonChallengeFinishNotify::clear_finish_type() {
  finish_type_ = 0;
}
inline ::proto::ChallengeFinishType DungeonChallengeFinishNotify::finish_type() const {
  // @@protoc_insertion_point(field_get:proto.DungeonChallengeFinishNotify.finish_type)
  return static_cast< ::proto::ChallengeFinishType >(finish_type_);
}
inline void DungeonChallengeFinishNotify::set_finish_type(::proto::ChallengeFinishType value) {
  
  finish_type_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonChallengeFinishNotify.finish_type)
}

// bool is_new_record = 10;
inline void DungeonChallengeFinishNotify::clear_is_new_record() {
  is_new_record_ = false;
}
inline bool DungeonChallengeFinishNotify::is_new_record() const {
  // @@protoc_insertion_point(field_get:proto.DungeonChallengeFinishNotify.is_new_record)
  return is_new_record_;
}
inline void DungeonChallengeFinishNotify::set_is_new_record(bool value) {
  
  is_new_record_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonChallengeFinishNotify.is_new_record)
}

// uint32 challenge_record_type = 7;
inline void DungeonChallengeFinishNotify::clear_challenge_record_type() {
  challenge_record_type_ = 0u;
}
inline ::google::protobuf::uint32 DungeonChallengeFinishNotify::challenge_record_type() const {
  // @@protoc_insertion_point(field_get:proto.DungeonChallengeFinishNotify.challenge_record_type)
  return challenge_record_type_;
}
inline void DungeonChallengeFinishNotify::set_challenge_record_type(::google::protobuf::uint32 value) {
  
  challenge_record_type_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonChallengeFinishNotify.challenge_record_type)
}

// uint32 time_cost = 4;
inline void DungeonChallengeFinishNotify::clear_time_cost() {
  time_cost_ = 0u;
}
inline ::google::protobuf::uint32 DungeonChallengeFinishNotify::time_cost() const {
  // @@protoc_insertion_point(field_get:proto.DungeonChallengeFinishNotify.time_cost)
  return time_cost_;
}
inline void DungeonChallengeFinishNotify::set_time_cost(::google::protobuf::uint32 value) {
  
  time_cost_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonChallengeFinishNotify.time_cost)
}

// uint32 current_value = 15;
inline void DungeonChallengeFinishNotify::clear_current_value() {
  current_value_ = 0u;
}
inline ::google::protobuf::uint32 DungeonChallengeFinishNotify::current_value() const {
  // @@protoc_insertion_point(field_get:proto.DungeonChallengeFinishNotify.current_value)
  return current_value_;
}
inline void DungeonChallengeFinishNotify::set_current_value(::google::protobuf::uint32 value) {
  
  current_value_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonChallengeFinishNotify.current_value)
}

// bool is_success = 3;
inline void DungeonChallengeFinishNotify::clear_is_success() {
  is_success_ = false;
}
inline bool DungeonChallengeFinishNotify::is_success() const {
  // @@protoc_insertion_point(field_get:proto.DungeonChallengeFinishNotify.is_success)
  return is_success_;
}
inline void DungeonChallengeFinishNotify::set_is_success(bool value) {
  
  is_success_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonChallengeFinishNotify.is_success)
}

// uint32 challenge_index = 5;
inline void DungeonChallengeFinishNotify::clear_challenge_index() {
  challenge_index_ = 0u;
}
inline ::google::protobuf::uint32 DungeonChallengeFinishNotify::challenge_index() const {
  // @@protoc_insertion_point(field_get:proto.DungeonChallengeFinishNotify.challenge_index)
  return challenge_index_;
}
inline void DungeonChallengeFinishNotify::set_challenge_index(::google::protobuf::uint32 value) {
  
  challenge_index_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonChallengeFinishNotify.challenge_index)
}

// .proto.ChannellerSlabLoopDungeonResultInfo channeller_slab_loop_dungeon_result_info = 1521;
inline bool DungeonChallengeFinishNotify::has_channeller_slab_loop_dungeon_result_info() const {
  return detail_case() == kChannellerSlabLoopDungeonResultInfo;
}
inline void DungeonChallengeFinishNotify::set_has_channeller_slab_loop_dungeon_result_info() {
  _oneof_case_[0] = kChannellerSlabLoopDungeonResultInfo;
}
inline void DungeonChallengeFinishNotify::clear_channeller_slab_loop_dungeon_result_info() {
  if (has_channeller_slab_loop_dungeon_result_info()) {
    delete detail_.channeller_slab_loop_dungeon_result_info_;
    clear_has_detail();
  }
}
inline  const ::proto::ChannellerSlabLoopDungeonResultInfo& DungeonChallengeFinishNotify::channeller_slab_loop_dungeon_result_info() const {
  // @@protoc_insertion_point(field_get:proto.DungeonChallengeFinishNotify.channeller_slab_loop_dungeon_result_info)
  return has_channeller_slab_loop_dungeon_result_info()
      ? *detail_.channeller_slab_loop_dungeon_result_info_
      : ::proto::ChannellerSlabLoopDungeonResultInfo::default_instance();
}
inline ::proto::ChannellerSlabLoopDungeonResultInfo* DungeonChallengeFinishNotify::mutable_channeller_slab_loop_dungeon_result_info() {
  if (!has_channeller_slab_loop_dungeon_result_info()) {
    clear_detail();
    set_has_channeller_slab_loop_dungeon_result_info();
    detail_.channeller_slab_loop_dungeon_result_info_ = new ::proto::ChannellerSlabLoopDungeonResultInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.DungeonChallengeFinishNotify.channeller_slab_loop_dungeon_result_info)
  return detail_.channeller_slab_loop_dungeon_result_info_;
}
inline ::proto::ChannellerSlabLoopDungeonResultInfo* DungeonChallengeFinishNotify::release_channeller_slab_loop_dungeon_result_info() {
  // @@protoc_insertion_point(field_release:proto.DungeonChallengeFinishNotify.channeller_slab_loop_dungeon_result_info)
  if (has_channeller_slab_loop_dungeon_result_info()) {
    clear_has_detail();
    ::proto::ChannellerSlabLoopDungeonResultInfo* temp = detail_.channeller_slab_loop_dungeon_result_info_;
    detail_.channeller_slab_loop_dungeon_result_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void DungeonChallengeFinishNotify::set_allocated_channeller_slab_loop_dungeon_result_info(::proto::ChannellerSlabLoopDungeonResultInfo* channeller_slab_loop_dungeon_result_info) {
  clear_detail();
  if (channeller_slab_loop_dungeon_result_info) {
    set_has_channeller_slab_loop_dungeon_result_info();
    detail_.channeller_slab_loop_dungeon_result_info_ = channeller_slab_loop_dungeon_result_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.DungeonChallengeFinishNotify.channeller_slab_loop_dungeon_result_info)
}

// .proto.EffigyChallengeDungeonResultInfo effigy_challenge_dungeon_result_info = 1627;
inline bool DungeonChallengeFinishNotify::has_effigy_challenge_dungeon_result_info() const {
  return detail_case() == kEffigyChallengeDungeonResultInfo;
}
inline void DungeonChallengeFinishNotify::set_has_effigy_challenge_dungeon_result_info() {
  _oneof_case_[0] = kEffigyChallengeDungeonResultInfo;
}
inline void DungeonChallengeFinishNotify::clear_effigy_challenge_dungeon_result_info() {
  if (has_effigy_challenge_dungeon_result_info()) {
    delete detail_.effigy_challenge_dungeon_result_info_;
    clear_has_detail();
  }
}
inline  const ::proto::EffigyChallengeDungeonResultInfo& DungeonChallengeFinishNotify::effigy_challenge_dungeon_result_info() const {
  // @@protoc_insertion_point(field_get:proto.DungeonChallengeFinishNotify.effigy_challenge_dungeon_result_info)
  return has_effigy_challenge_dungeon_result_info()
      ? *detail_.effigy_challenge_dungeon_result_info_
      : ::proto::EffigyChallengeDungeonResultInfo::default_instance();
}
inline ::proto::EffigyChallengeDungeonResultInfo* DungeonChallengeFinishNotify::mutable_effigy_challenge_dungeon_result_info() {
  if (!has_effigy_challenge_dungeon_result_info()) {
    clear_detail();
    set_has_effigy_challenge_dungeon_result_info();
    detail_.effigy_challenge_dungeon_result_info_ = new ::proto::EffigyChallengeDungeonResultInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.DungeonChallengeFinishNotify.effigy_challenge_dungeon_result_info)
  return detail_.effigy_challenge_dungeon_result_info_;
}
inline ::proto::EffigyChallengeDungeonResultInfo* DungeonChallengeFinishNotify::release_effigy_challenge_dungeon_result_info() {
  // @@protoc_insertion_point(field_release:proto.DungeonChallengeFinishNotify.effigy_challenge_dungeon_result_info)
  if (has_effigy_challenge_dungeon_result_info()) {
    clear_has_detail();
    ::proto::EffigyChallengeDungeonResultInfo* temp = detail_.effigy_challenge_dungeon_result_info_;
    detail_.effigy_challenge_dungeon_result_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void DungeonChallengeFinishNotify::set_allocated_effigy_challenge_dungeon_result_info(::proto::EffigyChallengeDungeonResultInfo* effigy_challenge_dungeon_result_info) {
  clear_detail();
  if (effigy_challenge_dungeon_result_info) {
    set_has_effigy_challenge_dungeon_result_info();
    detail_.effigy_challenge_dungeon_result_info_ = effigy_challenge_dungeon_result_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.DungeonChallengeFinishNotify.effigy_challenge_dungeon_result_info)
}

// .proto.PotionDungeonResultInfo potion_dungeon_result_info = 1824;
inline bool DungeonChallengeFinishNotify::has_potion_dungeon_result_info() const {
  return detail_case() == kPotionDungeonResultInfo;
}
inline void DungeonChallengeFinishNotify::set_has_potion_dungeon_result_info() {
  _oneof_case_[0] = kPotionDungeonResultInfo;
}
inline void DungeonChallengeFinishNotify::clear_potion_dungeon_result_info() {
  if (has_potion_dungeon_result_info()) {
    delete detail_.potion_dungeon_result_info_;
    clear_has_detail();
  }
}
inline  const ::proto::PotionDungeonResultInfo& DungeonChallengeFinishNotify::potion_dungeon_result_info() const {
  // @@protoc_insertion_point(field_get:proto.DungeonChallengeFinishNotify.potion_dungeon_result_info)
  return has_potion_dungeon_result_info()
      ? *detail_.potion_dungeon_result_info_
      : ::proto::PotionDungeonResultInfo::default_instance();
}
inline ::proto::PotionDungeonResultInfo* DungeonChallengeFinishNotify::mutable_potion_dungeon_result_info() {
  if (!has_potion_dungeon_result_info()) {
    clear_detail();
    set_has_potion_dungeon_result_info();
    detail_.potion_dungeon_result_info_ = new ::proto::PotionDungeonResultInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.DungeonChallengeFinishNotify.potion_dungeon_result_info)
  return detail_.potion_dungeon_result_info_;
}
inline ::proto::PotionDungeonResultInfo* DungeonChallengeFinishNotify::release_potion_dungeon_result_info() {
  // @@protoc_insertion_point(field_release:proto.DungeonChallengeFinishNotify.potion_dungeon_result_info)
  if (has_potion_dungeon_result_info()) {
    clear_has_detail();
    ::proto::PotionDungeonResultInfo* temp = detail_.potion_dungeon_result_info_;
    detail_.potion_dungeon_result_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void DungeonChallengeFinishNotify::set_allocated_potion_dungeon_result_info(::proto::PotionDungeonResultInfo* potion_dungeon_result_info) {
  clear_detail();
  if (potion_dungeon_result_info) {
    set_has_potion_dungeon_result_info();
    detail_.potion_dungeon_result_info_ = potion_dungeon_result_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.DungeonChallengeFinishNotify.potion_dungeon_result_info)
}

// .proto.CustomDungeonResultInfo custom_dungeon_result_info = 1664;
inline bool DungeonChallengeFinishNotify::has_custom_dungeon_result_info() const {
  return detail_case() == kCustomDungeonResultInfo;
}
inline void DungeonChallengeFinishNotify::set_has_custom_dungeon_result_info() {
  _oneof_case_[0] = kCustomDungeonResultInfo;
}
inline void DungeonChallengeFinishNotify::clear_custom_dungeon_result_info() {
  if (has_custom_dungeon_result_info()) {
    delete detail_.custom_dungeon_result_info_;
    clear_has_detail();
  }
}
inline  const ::proto::CustomDungeonResultInfo& DungeonChallengeFinishNotify::custom_dungeon_result_info() const {
  // @@protoc_insertion_point(field_get:proto.DungeonChallengeFinishNotify.custom_dungeon_result_info)
  return has_custom_dungeon_result_info()
      ? *detail_.custom_dungeon_result_info_
      : ::proto::CustomDungeonResultInfo::default_instance();
}
inline ::proto::CustomDungeonResultInfo* DungeonChallengeFinishNotify::mutable_custom_dungeon_result_info() {
  if (!has_custom_dungeon_result_info()) {
    clear_detail();
    set_has_custom_dungeon_result_info();
    detail_.custom_dungeon_result_info_ = new ::proto::CustomDungeonResultInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.DungeonChallengeFinishNotify.custom_dungeon_result_info)
  return detail_.custom_dungeon_result_info_;
}
inline ::proto::CustomDungeonResultInfo* DungeonChallengeFinishNotify::release_custom_dungeon_result_info() {
  // @@protoc_insertion_point(field_release:proto.DungeonChallengeFinishNotify.custom_dungeon_result_info)
  if (has_custom_dungeon_result_info()) {
    clear_has_detail();
    ::proto::CustomDungeonResultInfo* temp = detail_.custom_dungeon_result_info_;
    detail_.custom_dungeon_result_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void DungeonChallengeFinishNotify::set_allocated_custom_dungeon_result_info(::proto::CustomDungeonResultInfo* custom_dungeon_result_info) {
  clear_detail();
  if (custom_dungeon_result_info) {
    set_has_custom_dungeon_result_info();
    detail_.custom_dungeon_result_info_ = custom_dungeon_result_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.DungeonChallengeFinishNotify.custom_dungeon_result_info)
}

inline bool DungeonChallengeFinishNotify::has_detail() const {
  return detail_case() != DETAIL_NOT_SET;
}
inline void DungeonChallengeFinishNotify::clear_has_detail() {
  _oneof_case_[0] = DETAIL_NOT_SET;
}
inline DungeonChallengeFinishNotify::DetailCase DungeonChallengeFinishNotify::detail_case() const {
  return DungeonChallengeFinishNotify::DetailCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ChallengeDataNotify

// uint32 value = 8;
inline void ChallengeDataNotify::clear_value() {
  value_ = 0u;
}
inline ::google::protobuf::uint32 ChallengeDataNotify::value() const {
  // @@protoc_insertion_point(field_get:proto.ChallengeDataNotify.value)
  return value_;
}
inline void ChallengeDataNotify::set_value(::google::protobuf::uint32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:proto.ChallengeDataNotify.value)
}

// uint32 challenge_index = 2;
inline void ChallengeDataNotify::clear_challenge_index() {
  challenge_index_ = 0u;
}
inline ::google::protobuf::uint32 ChallengeDataNotify::challenge_index() const {
  // @@protoc_insertion_point(field_get:proto.ChallengeDataNotify.challenge_index)
  return challenge_index_;
}
inline void ChallengeDataNotify::set_challenge_index(::google::protobuf::uint32 value) {
  
  challenge_index_ = value;
  // @@protoc_insertion_point(field_set:proto.ChallengeDataNotify.challenge_index)
}

// uint32 param_index = 9;
inline void ChallengeDataNotify::clear_param_index() {
  param_index_ = 0u;
}
inline ::google::protobuf::uint32 ChallengeDataNotify::param_index() const {
  // @@protoc_insertion_point(field_get:proto.ChallengeDataNotify.param_index)
  return param_index_;
}
inline void ChallengeDataNotify::set_param_index(::google::protobuf::uint32 value) {
  
  param_index_ = value;
  // @@protoc_insertion_point(field_set:proto.ChallengeDataNotify.param_index)
}

// -------------------------------------------------------------------

// DungeonFollowNotify

// uint32 target_uid = 8;
inline void DungeonFollowNotify::clear_target_uid() {
  target_uid_ = 0u;
}
inline ::google::protobuf::uint32 DungeonFollowNotify::target_uid() const {
  // @@protoc_insertion_point(field_get:proto.DungeonFollowNotify.target_uid)
  return target_uid_;
}
inline void DungeonFollowNotify::set_target_uid(::google::protobuf::uint32 value) {
  
  target_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonFollowNotify.target_uid)
}

// -------------------------------------------------------------------

// DungeonGetStatueDropReq

// -------------------------------------------------------------------

// DungeonGetStatueDropRsp

// int32 retcode = 12;
inline void DungeonGetStatueDropRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 DungeonGetStatueDropRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.DungeonGetStatueDropRsp.retcode)
  return retcode_;
}
inline void DungeonGetStatueDropRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonGetStatueDropRsp.retcode)
}

// -------------------------------------------------------------------

// ChallengeRecord

// uint32 challenge_record_type = 14;
inline void ChallengeRecord::clear_challenge_record_type() {
  challenge_record_type_ = 0u;
}
inline ::google::protobuf::uint32 ChallengeRecord::challenge_record_type() const {
  // @@protoc_insertion_point(field_get:proto.ChallengeRecord.challenge_record_type)
  return challenge_record_type_;
}
inline void ChallengeRecord::set_challenge_record_type(::google::protobuf::uint32 value) {
  
  challenge_record_type_ = value;
  // @@protoc_insertion_point(field_set:proto.ChallengeRecord.challenge_record_type)
}

// uint32 challenge_index = 15;
inline void ChallengeRecord::clear_challenge_index() {
  challenge_index_ = 0u;
}
inline ::google::protobuf::uint32 ChallengeRecord::challenge_index() const {
  // @@protoc_insertion_point(field_get:proto.ChallengeRecord.challenge_index)
  return challenge_index_;
}
inline void ChallengeRecord::set_challenge_index(::google::protobuf::uint32 value) {
  
  challenge_index_ = value;
  // @@protoc_insertion_point(field_set:proto.ChallengeRecord.challenge_index)
}

// uint32 challenge_id = 1;
inline void ChallengeRecord::clear_challenge_id() {
  challenge_id_ = 0u;
}
inline ::google::protobuf::uint32 ChallengeRecord::challenge_id() const {
  // @@protoc_insertion_point(field_get:proto.ChallengeRecord.challenge_id)
  return challenge_id_;
}
inline void ChallengeRecord::set_challenge_id(::google::protobuf::uint32 value) {
  
  challenge_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ChallengeRecord.challenge_id)
}

// uint32 best_value = 8;
inline void ChallengeRecord::clear_best_value() {
  best_value_ = 0u;
}
inline ::google::protobuf::uint32 ChallengeRecord::best_value() const {
  // @@protoc_insertion_point(field_get:proto.ChallengeRecord.best_value)
  return best_value_;
}
inline void ChallengeRecord::set_best_value(::google::protobuf::uint32 value) {
  
  best_value_ = value;
  // @@protoc_insertion_point(field_set:proto.ChallengeRecord.best_value)
}

// -------------------------------------------------------------------

// ChallengeRecordNotify

// uint32 group_id = 2;
inline void ChallengeRecordNotify::clear_group_id() {
  group_id_ = 0u;
}
inline ::google::protobuf::uint32 ChallengeRecordNotify::group_id() const {
  // @@protoc_insertion_point(field_get:proto.ChallengeRecordNotify.group_id)
  return group_id_;
}
inline void ChallengeRecordNotify::set_group_id(::google::protobuf::uint32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ChallengeRecordNotify.group_id)
}

// repeated .proto.ChallengeRecord challenge_record_list = 5;
inline int ChallengeRecordNotify::challenge_record_list_size() const {
  return challenge_record_list_.size();
}
inline void ChallengeRecordNotify::clear_challenge_record_list() {
  challenge_record_list_.Clear();
}
inline const ::proto::ChallengeRecord& ChallengeRecordNotify::challenge_record_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ChallengeRecordNotify.challenge_record_list)
  return challenge_record_list_.Get(index);
}
inline ::proto::ChallengeRecord* ChallengeRecordNotify::mutable_challenge_record_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ChallengeRecordNotify.challenge_record_list)
  return challenge_record_list_.Mutable(index);
}
inline ::proto::ChallengeRecord* ChallengeRecordNotify::add_challenge_record_list() {
  // @@protoc_insertion_point(field_add:proto.ChallengeRecordNotify.challenge_record_list)
  return challenge_record_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::ChallengeRecord >*
ChallengeRecordNotify::mutable_challenge_record_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ChallengeRecordNotify.challenge_record_list)
  return &challenge_record_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::ChallengeRecord >&
ChallengeRecordNotify::challenge_record_list() const {
  // @@protoc_insertion_point(field_list:proto.ChallengeRecordNotify.challenge_record_list)
  return challenge_record_list_;
}

// -------------------------------------------------------------------

// DungeonCandidateTeamAvatar

// uint32 player_uid = 2;
inline void DungeonCandidateTeamAvatar::clear_player_uid() {
  player_uid_ = 0u;
}
inline ::google::protobuf::uint32 DungeonCandidateTeamAvatar::player_uid() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamAvatar.player_uid)
  return player_uid_;
}
inline void DungeonCandidateTeamAvatar::set_player_uid(::google::protobuf::uint32 value) {
  
  player_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamAvatar.player_uid)
}

// .proto.AvatarInfo avatar_info = 6;
inline bool DungeonCandidateTeamAvatar::has_avatar_info() const {
  return this != internal_default_instance() && avatar_info_ != NULL;
}
inline void DungeonCandidateTeamAvatar::clear_avatar_info() {
  if (GetArenaNoVirtual() == NULL && avatar_info_ != NULL) delete avatar_info_;
  avatar_info_ = NULL;
}
inline const ::proto::AvatarInfo& DungeonCandidateTeamAvatar::avatar_info() const {
  const ::proto::AvatarInfo* p = avatar_info_;
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamAvatar.avatar_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::AvatarInfo*>(
      &::proto::_AvatarInfo_default_instance_);
}
inline ::proto::AvatarInfo* DungeonCandidateTeamAvatar::mutable_avatar_info() {
  
  if (avatar_info_ == NULL) {
    avatar_info_ = new ::proto::AvatarInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.DungeonCandidateTeamAvatar.avatar_info)
  return avatar_info_;
}
inline ::proto::AvatarInfo* DungeonCandidateTeamAvatar::release_avatar_info() {
  // @@protoc_insertion_point(field_release:proto.DungeonCandidateTeamAvatar.avatar_info)
  
  ::proto::AvatarInfo* temp = avatar_info_;
  avatar_info_ = NULL;
  return temp;
}
inline void DungeonCandidateTeamAvatar::set_allocated_avatar_info(::proto::AvatarInfo* avatar_info) {
  delete avatar_info_;
  avatar_info_ = avatar_info;
  if (avatar_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.DungeonCandidateTeamAvatar.avatar_info)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// DungeonCandidateTeamInfoNotify

// map<uint32, .proto.DungeonCandidateTeamPlayerState> player_state_map = 10;
inline int DungeonCandidateTeamInfoNotify::player_state_map_size() const {
  return player_state_map_.size();
}
inline void DungeonCandidateTeamInfoNotify::clear_player_state_map() {
  player_state_map_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::DungeonCandidateTeamPlayerState >&
DungeonCandidateTeamInfoNotify::player_state_map() const {
  // @@protoc_insertion_point(field_map:proto.DungeonCandidateTeamInfoNotify.player_state_map)
  return player_state_map_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::DungeonCandidateTeamPlayerState >*
DungeonCandidateTeamInfoNotify::mutable_player_state_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.DungeonCandidateTeamInfoNotify.player_state_map)
  return player_state_map_.MutableMap();
}

// uint32 dungeon_id = 9;
inline void DungeonCandidateTeamInfoNotify::clear_dungeon_id() {
  dungeon_id_ = 0u;
}
inline ::google::protobuf::uint32 DungeonCandidateTeamInfoNotify::dungeon_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamInfoNotify.dungeon_id)
  return dungeon_id_;
}
inline void DungeonCandidateTeamInfoNotify::set_dungeon_id(::google::protobuf::uint32 value) {
  
  dungeon_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamInfoNotify.dungeon_id)
}

// repeated uint32 ready_player_uid = 13;
inline int DungeonCandidateTeamInfoNotify::ready_player_uid_size() const {
  return ready_player_uid_.size();
}
inline void DungeonCandidateTeamInfoNotify::clear_ready_player_uid() {
  ready_player_uid_.Clear();
}
inline ::google::protobuf::uint32 DungeonCandidateTeamInfoNotify::ready_player_uid(int index) const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamInfoNotify.ready_player_uid)
  return ready_player_uid_.Get(index);
}
inline void DungeonCandidateTeamInfoNotify::set_ready_player_uid(int index, ::google::protobuf::uint32 value) {
  ready_player_uid_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamInfoNotify.ready_player_uid)
}
inline void DungeonCandidateTeamInfoNotify::add_ready_player_uid(::google::protobuf::uint32 value) {
  ready_player_uid_.Add(value);
  // @@protoc_insertion_point(field_add:proto.DungeonCandidateTeamInfoNotify.ready_player_uid)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DungeonCandidateTeamInfoNotify::ready_player_uid() const {
  // @@protoc_insertion_point(field_list:proto.DungeonCandidateTeamInfoNotify.ready_player_uid)
  return ready_player_uid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DungeonCandidateTeamInfoNotify::mutable_ready_player_uid() {
  // @@protoc_insertion_point(field_mutable_list:proto.DungeonCandidateTeamInfoNotify.ready_player_uid)
  return &ready_player_uid_;
}

// uint32 match_type = 2;
inline void DungeonCandidateTeamInfoNotify::clear_match_type() {
  match_type_ = 0u;
}
inline ::google::protobuf::uint32 DungeonCandidateTeamInfoNotify::match_type() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamInfoNotify.match_type)
  return match_type_;
}
inline void DungeonCandidateTeamInfoNotify::set_match_type(::google::protobuf::uint32 value) {
  
  match_type_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamInfoNotify.match_type)
}

// repeated .proto.DungeonCandidateTeamAvatar avatar_list = 4;
inline int DungeonCandidateTeamInfoNotify::avatar_list_size() const {
  return avatar_list_.size();
}
inline void DungeonCandidateTeamInfoNotify::clear_avatar_list() {
  avatar_list_.Clear();
}
inline const ::proto::DungeonCandidateTeamAvatar& DungeonCandidateTeamInfoNotify::avatar_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamInfoNotify.avatar_list)
  return avatar_list_.Get(index);
}
inline ::proto::DungeonCandidateTeamAvatar* DungeonCandidateTeamInfoNotify::mutable_avatar_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.DungeonCandidateTeamInfoNotify.avatar_list)
  return avatar_list_.Mutable(index);
}
inline ::proto::DungeonCandidateTeamAvatar* DungeonCandidateTeamInfoNotify::add_avatar_list() {
  // @@protoc_insertion_point(field_add:proto.DungeonCandidateTeamInfoNotify.avatar_list)
  return avatar_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::DungeonCandidateTeamAvatar >*
DungeonCandidateTeamInfoNotify::mutable_avatar_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.DungeonCandidateTeamInfoNotify.avatar_list)
  return &avatar_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::DungeonCandidateTeamAvatar >&
DungeonCandidateTeamInfoNotify::avatar_list() const {
  // @@protoc_insertion_point(field_list:proto.DungeonCandidateTeamInfoNotify.avatar_list)
  return avatar_list_;
}

// -------------------------------------------------------------------

// DungeonCandidateTeamInviteNotify

// uint32 player_uid = 5;
inline void DungeonCandidateTeamInviteNotify::clear_player_uid() {
  player_uid_ = 0u;
}
inline ::google::protobuf::uint32 DungeonCandidateTeamInviteNotify::player_uid() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamInviteNotify.player_uid)
  return player_uid_;
}
inline void DungeonCandidateTeamInviteNotify::set_player_uid(::google::protobuf::uint32 value) {
  
  player_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamInviteNotify.player_uid)
}

// uint32 vaild_deadline_time_sec = 9;
inline void DungeonCandidateTeamInviteNotify::clear_vaild_deadline_time_sec() {
  vaild_deadline_time_sec_ = 0u;
}
inline ::google::protobuf::uint32 DungeonCandidateTeamInviteNotify::vaild_deadline_time_sec() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamInviteNotify.vaild_deadline_time_sec)
  return vaild_deadline_time_sec_;
}
inline void DungeonCandidateTeamInviteNotify::set_vaild_deadline_time_sec(::google::protobuf::uint32 value) {
  
  vaild_deadline_time_sec_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamInviteNotify.vaild_deadline_time_sec)
}

// uint32 dungeon_id = 6;
inline void DungeonCandidateTeamInviteNotify::clear_dungeon_id() {
  dungeon_id_ = 0u;
}
inline ::google::protobuf::uint32 DungeonCandidateTeamInviteNotify::dungeon_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamInviteNotify.dungeon_id)
  return dungeon_id_;
}
inline void DungeonCandidateTeamInviteNotify::set_dungeon_id(::google::protobuf::uint32 value) {
  
  dungeon_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamInviteNotify.dungeon_id)
}

// -------------------------------------------------------------------

// DungeonCandidateTeamRefuseNotify

// uint32 player_uid = 3;
inline void DungeonCandidateTeamRefuseNotify::clear_player_uid() {
  player_uid_ = 0u;
}
inline ::google::protobuf::uint32 DungeonCandidateTeamRefuseNotify::player_uid() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamRefuseNotify.player_uid)
  return player_uid_;
}
inline void DungeonCandidateTeamRefuseNotify::set_player_uid(::google::protobuf::uint32 value) {
  
  player_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamRefuseNotify.player_uid)
}

// -------------------------------------------------------------------

// DungeonCandidateTeamPlayerLeaveNotify

// .proto.DungeonCandidateTeamPlayerLeaveReason reason = 3;
inline void DungeonCandidateTeamPlayerLeaveNotify::clear_reason() {
  reason_ = 0;
}
inline ::proto::DungeonCandidateTeamPlayerLeaveReason DungeonCandidateTeamPlayerLeaveNotify::reason() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamPlayerLeaveNotify.reason)
  return static_cast< ::proto::DungeonCandidateTeamPlayerLeaveReason >(reason_);
}
inline void DungeonCandidateTeamPlayerLeaveNotify::set_reason(::proto::DungeonCandidateTeamPlayerLeaveReason value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamPlayerLeaveNotify.reason)
}

// uint32 player_uid = 13;
inline void DungeonCandidateTeamPlayerLeaveNotify::clear_player_uid() {
  player_uid_ = 0u;
}
inline ::google::protobuf::uint32 DungeonCandidateTeamPlayerLeaveNotify::player_uid() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamPlayerLeaveNotify.player_uid)
  return player_uid_;
}
inline void DungeonCandidateTeamPlayerLeaveNotify::set_player_uid(::google::protobuf::uint32 value) {
  
  player_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamPlayerLeaveNotify.player_uid)
}

// -------------------------------------------------------------------

// DungeonCandidateTeamDismissNotify

// .proto.DungeonCandidateTeamDismissReason reason = 9;
inline void DungeonCandidateTeamDismissNotify::clear_reason() {
  reason_ = 0;
}
inline ::proto::DungeonCandidateTeamDismissReason DungeonCandidateTeamDismissNotify::reason() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamDismissNotify.reason)
  return static_cast< ::proto::DungeonCandidateTeamDismissReason >(reason_);
}
inline void DungeonCandidateTeamDismissNotify::set_reason(::proto::DungeonCandidateTeamDismissReason value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamDismissNotify.reason)
}

// uint32 player_uid = 12;
inline void DungeonCandidateTeamDismissNotify::clear_player_uid() {
  player_uid_ = 0u;
}
inline ::google::protobuf::uint32 DungeonCandidateTeamDismissNotify::player_uid() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamDismissNotify.player_uid)
  return player_uid_;
}
inline void DungeonCandidateTeamDismissNotify::set_player_uid(::google::protobuf::uint32 value) {
  
  player_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamDismissNotify.player_uid)
}

// -------------------------------------------------------------------

// DungeonCandidateTeamCreateReq

// uint32 point_id = 7;
inline void DungeonCandidateTeamCreateReq::clear_point_id() {
  point_id_ = 0u;
}
inline ::google::protobuf::uint32 DungeonCandidateTeamCreateReq::point_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamCreateReq.point_id)
  return point_id_;
}
inline void DungeonCandidateTeamCreateReq::set_point_id(::google::protobuf::uint32 value) {
  
  point_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamCreateReq.point_id)
}

// uint32 dungeon_id = 6;
inline void DungeonCandidateTeamCreateReq::clear_dungeon_id() {
  dungeon_id_ = 0u;
}
inline ::google::protobuf::uint32 DungeonCandidateTeamCreateReq::dungeon_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamCreateReq.dungeon_id)
  return dungeon_id_;
}
inline void DungeonCandidateTeamCreateReq::set_dungeon_id(::google::protobuf::uint32 value) {
  
  dungeon_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamCreateReq.dungeon_id)
}

// -------------------------------------------------------------------

// DungeonCandidateTeamCreateRsp

// int32 retcode = 1;
inline void DungeonCandidateTeamCreateRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 DungeonCandidateTeamCreateRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamCreateRsp.retcode)
  return retcode_;
}
inline void DungeonCandidateTeamCreateRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamCreateRsp.retcode)
}

// -------------------------------------------------------------------

// DungeonCandidateTeamInviteReq

// repeated uint32 player_uids = 5;
inline int DungeonCandidateTeamInviteReq::player_uids_size() const {
  return player_uids_.size();
}
inline void DungeonCandidateTeamInviteReq::clear_player_uids() {
  player_uids_.Clear();
}
inline ::google::protobuf::uint32 DungeonCandidateTeamInviteReq::player_uids(int index) const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamInviteReq.player_uids)
  return player_uids_.Get(index);
}
inline void DungeonCandidateTeamInviteReq::set_player_uids(int index, ::google::protobuf::uint32 value) {
  player_uids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamInviteReq.player_uids)
}
inline void DungeonCandidateTeamInviteReq::add_player_uids(::google::protobuf::uint32 value) {
  player_uids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.DungeonCandidateTeamInviteReq.player_uids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DungeonCandidateTeamInviteReq::player_uids() const {
  // @@protoc_insertion_point(field_list:proto.DungeonCandidateTeamInviteReq.player_uids)
  return player_uids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DungeonCandidateTeamInviteReq::mutable_player_uids() {
  // @@protoc_insertion_point(field_mutable_list:proto.DungeonCandidateTeamInviteReq.player_uids)
  return &player_uids_;
}

// -------------------------------------------------------------------

// DungeonCandidateTeamInviteRsp

// int32 retcode = 12;
inline void DungeonCandidateTeamInviteRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 DungeonCandidateTeamInviteRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamInviteRsp.retcode)
  return retcode_;
}
inline void DungeonCandidateTeamInviteRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamInviteRsp.retcode)
}

// repeated uint32 invalid_player_uids = 7;
inline int DungeonCandidateTeamInviteRsp::invalid_player_uids_size() const {
  return invalid_player_uids_.size();
}
inline void DungeonCandidateTeamInviteRsp::clear_invalid_player_uids() {
  invalid_player_uids_.Clear();
}
inline ::google::protobuf::uint32 DungeonCandidateTeamInviteRsp::invalid_player_uids(int index) const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamInviteRsp.invalid_player_uids)
  return invalid_player_uids_.Get(index);
}
inline void DungeonCandidateTeamInviteRsp::set_invalid_player_uids(int index, ::google::protobuf::uint32 value) {
  invalid_player_uids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamInviteRsp.invalid_player_uids)
}
inline void DungeonCandidateTeamInviteRsp::add_invalid_player_uids(::google::protobuf::uint32 value) {
  invalid_player_uids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.DungeonCandidateTeamInviteRsp.invalid_player_uids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DungeonCandidateTeamInviteRsp::invalid_player_uids() const {
  // @@protoc_insertion_point(field_list:proto.DungeonCandidateTeamInviteRsp.invalid_player_uids)
  return invalid_player_uids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DungeonCandidateTeamInviteRsp::mutable_invalid_player_uids() {
  // @@protoc_insertion_point(field_mutable_list:proto.DungeonCandidateTeamInviteRsp.invalid_player_uids)
  return &invalid_player_uids_;
}

// -------------------------------------------------------------------

// DungeonCandidateTeamKickReq

// uint32 player_uid = 9;
inline void DungeonCandidateTeamKickReq::clear_player_uid() {
  player_uid_ = 0u;
}
inline ::google::protobuf::uint32 DungeonCandidateTeamKickReq::player_uid() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamKickReq.player_uid)
  return player_uid_;
}
inline void DungeonCandidateTeamKickReq::set_player_uid(::google::protobuf::uint32 value) {
  
  player_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamKickReq.player_uid)
}

// -------------------------------------------------------------------

// DungeonCandidateTeamKickRsp

// int32 retcode = 1;
inline void DungeonCandidateTeamKickRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 DungeonCandidateTeamKickRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamKickRsp.retcode)
  return retcode_;
}
inline void DungeonCandidateTeamKickRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamKickRsp.retcode)
}

// -------------------------------------------------------------------

// DungeonCandidateTeamLeaveReq

// -------------------------------------------------------------------

// DungeonCandidateTeamLeaveRsp

// int32 retcode = 14;
inline void DungeonCandidateTeamLeaveRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 DungeonCandidateTeamLeaveRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamLeaveRsp.retcode)
  return retcode_;
}
inline void DungeonCandidateTeamLeaveRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamLeaveRsp.retcode)
}

// -------------------------------------------------------------------

// DungeonCandidateTeamReplyInviteReq

// bool is_accept = 5;
inline void DungeonCandidateTeamReplyInviteReq::clear_is_accept() {
  is_accept_ = false;
}
inline bool DungeonCandidateTeamReplyInviteReq::is_accept() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamReplyInviteReq.is_accept)
  return is_accept_;
}
inline void DungeonCandidateTeamReplyInviteReq::set_is_accept(bool value) {
  
  is_accept_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamReplyInviteReq.is_accept)
}

// -------------------------------------------------------------------

// DungeonCandidateTeamReplyInviteRsp

// bool is_trans_point = 4;
inline void DungeonCandidateTeamReplyInviteRsp::clear_is_trans_point() {
  is_trans_point_ = false;
}
inline bool DungeonCandidateTeamReplyInviteRsp::is_trans_point() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamReplyInviteRsp.is_trans_point)
  return is_trans_point_;
}
inline void DungeonCandidateTeamReplyInviteRsp::set_is_trans_point(bool value) {
  
  is_trans_point_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamReplyInviteRsp.is_trans_point)
}

// int32 retcode = 2;
inline void DungeonCandidateTeamReplyInviteRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 DungeonCandidateTeamReplyInviteRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamReplyInviteRsp.retcode)
  return retcode_;
}
inline void DungeonCandidateTeamReplyInviteRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamReplyInviteRsp.retcode)
}

// -------------------------------------------------------------------

// DungeonCandidateTeamSetReadyReq

// bool is_ready = 15;
inline void DungeonCandidateTeamSetReadyReq::clear_is_ready() {
  is_ready_ = false;
}
inline bool DungeonCandidateTeamSetReadyReq::is_ready() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamSetReadyReq.is_ready)
  return is_ready_;
}
inline void DungeonCandidateTeamSetReadyReq::set_is_ready(bool value) {
  
  is_ready_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamSetReadyReq.is_ready)
}

// -------------------------------------------------------------------

// DungeonCandidateTeamSetReadyRsp

// int32 retcode = 12;
inline void DungeonCandidateTeamSetReadyRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 DungeonCandidateTeamSetReadyRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamSetReadyRsp.retcode)
  return retcode_;
}
inline void DungeonCandidateTeamSetReadyRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamSetReadyRsp.retcode)
}

// -------------------------------------------------------------------

// DungeonCandidateTeamChangeAvatarReq

// repeated uint64 avatar_guid_list = 5;
inline int DungeonCandidateTeamChangeAvatarReq::avatar_guid_list_size() const {
  return avatar_guid_list_.size();
}
inline void DungeonCandidateTeamChangeAvatarReq::clear_avatar_guid_list() {
  avatar_guid_list_.Clear();
}
inline ::google::protobuf::uint64 DungeonCandidateTeamChangeAvatarReq::avatar_guid_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamChangeAvatarReq.avatar_guid_list)
  return avatar_guid_list_.Get(index);
}
inline void DungeonCandidateTeamChangeAvatarReq::set_avatar_guid_list(int index, ::google::protobuf::uint64 value) {
  avatar_guid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamChangeAvatarReq.avatar_guid_list)
}
inline void DungeonCandidateTeamChangeAvatarReq::add_avatar_guid_list(::google::protobuf::uint64 value) {
  avatar_guid_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.DungeonCandidateTeamChangeAvatarReq.avatar_guid_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
DungeonCandidateTeamChangeAvatarReq::avatar_guid_list() const {
  // @@protoc_insertion_point(field_list:proto.DungeonCandidateTeamChangeAvatarReq.avatar_guid_list)
  return avatar_guid_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
DungeonCandidateTeamChangeAvatarReq::mutable_avatar_guid_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.DungeonCandidateTeamChangeAvatarReq.avatar_guid_list)
  return &avatar_guid_list_;
}

// -------------------------------------------------------------------

// DungeonCandidateTeamChangeAvatarRsp

// int32 retcode = 4;
inline void DungeonCandidateTeamChangeAvatarRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 DungeonCandidateTeamChangeAvatarRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamChangeAvatarRsp.retcode)
  return retcode_;
}
inline void DungeonCandidateTeamChangeAvatarRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamChangeAvatarRsp.retcode)
}

// -------------------------------------------------------------------

// DailyDungeonEntryInfo

// uint32 dungeon_entry_config_id = 12;
inline void DailyDungeonEntryInfo::clear_dungeon_entry_config_id() {
  dungeon_entry_config_id_ = 0u;
}
inline ::google::protobuf::uint32 DailyDungeonEntryInfo::dungeon_entry_config_id() const {
  // @@protoc_insertion_point(field_get:proto.DailyDungeonEntryInfo.dungeon_entry_config_id)
  return dungeon_entry_config_id_;
}
inline void DailyDungeonEntryInfo::set_dungeon_entry_config_id(::google::protobuf::uint32 value) {
  
  dungeon_entry_config_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DailyDungeonEntryInfo.dungeon_entry_config_id)
}

// uint32 dungeon_entry_id = 15;
inline void DailyDungeonEntryInfo::clear_dungeon_entry_id() {
  dungeon_entry_id_ = 0u;
}
inline ::google::protobuf::uint32 DailyDungeonEntryInfo::dungeon_entry_id() const {
  // @@protoc_insertion_point(field_get:proto.DailyDungeonEntryInfo.dungeon_entry_id)
  return dungeon_entry_id_;
}
inline void DailyDungeonEntryInfo::set_dungeon_entry_id(::google::protobuf::uint32 value) {
  
  dungeon_entry_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DailyDungeonEntryInfo.dungeon_entry_id)
}

// .proto.DungeonEntryInfo recommend_dungeon_entry_info = 1;
inline bool DailyDungeonEntryInfo::has_recommend_dungeon_entry_info() const {
  return this != internal_default_instance() && recommend_dungeon_entry_info_ != NULL;
}
inline void DailyDungeonEntryInfo::clear_recommend_dungeon_entry_info() {
  if (GetArenaNoVirtual() == NULL && recommend_dungeon_entry_info_ != NULL) delete recommend_dungeon_entry_info_;
  recommend_dungeon_entry_info_ = NULL;
}
inline const ::proto::DungeonEntryInfo& DailyDungeonEntryInfo::recommend_dungeon_entry_info() const {
  const ::proto::DungeonEntryInfo* p = recommend_dungeon_entry_info_;
  // @@protoc_insertion_point(field_get:proto.DailyDungeonEntryInfo.recommend_dungeon_entry_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::DungeonEntryInfo*>(
      &::proto::_DungeonEntryInfo_default_instance_);
}
inline ::proto::DungeonEntryInfo* DailyDungeonEntryInfo::mutable_recommend_dungeon_entry_info() {
  
  if (recommend_dungeon_entry_info_ == NULL) {
    recommend_dungeon_entry_info_ = new ::proto::DungeonEntryInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.DailyDungeonEntryInfo.recommend_dungeon_entry_info)
  return recommend_dungeon_entry_info_;
}
inline ::proto::DungeonEntryInfo* DailyDungeonEntryInfo::release_recommend_dungeon_entry_info() {
  // @@protoc_insertion_point(field_release:proto.DailyDungeonEntryInfo.recommend_dungeon_entry_info)
  
  ::proto::DungeonEntryInfo* temp = recommend_dungeon_entry_info_;
  recommend_dungeon_entry_info_ = NULL;
  return temp;
}
inline void DailyDungeonEntryInfo::set_allocated_recommend_dungeon_entry_info(::proto::DungeonEntryInfo* recommend_dungeon_entry_info) {
  delete recommend_dungeon_entry_info_;
  recommend_dungeon_entry_info_ = recommend_dungeon_entry_info;
  if (recommend_dungeon_entry_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.DailyDungeonEntryInfo.recommend_dungeon_entry_info)
}

// uint32 recommend_dungeon_id = 4;
inline void DailyDungeonEntryInfo::clear_recommend_dungeon_id() {
  recommend_dungeon_id_ = 0u;
}
inline ::google::protobuf::uint32 DailyDungeonEntryInfo::recommend_dungeon_id() const {
  // @@protoc_insertion_point(field_get:proto.DailyDungeonEntryInfo.recommend_dungeon_id)
  return recommend_dungeon_id_;
}
inline void DailyDungeonEntryInfo::set_recommend_dungeon_id(::google::protobuf::uint32 value) {
  
  recommend_dungeon_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DailyDungeonEntryInfo.recommend_dungeon_id)
}

// -------------------------------------------------------------------

// GetDailyDungeonEntryInfoReq

// uint32 scene_id = 15;
inline void GetDailyDungeonEntryInfoReq::clear_scene_id() {
  scene_id_ = 0u;
}
inline ::google::protobuf::uint32 GetDailyDungeonEntryInfoReq::scene_id() const {
  // @@protoc_insertion_point(field_get:proto.GetDailyDungeonEntryInfoReq.scene_id)
  return scene_id_;
}
inline void GetDailyDungeonEntryInfoReq::set_scene_id(::google::protobuf::uint32 value) {
  
  scene_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GetDailyDungeonEntryInfoReq.scene_id)
}

// -------------------------------------------------------------------

// GetDailyDungeonEntryInfoRsp

// repeated .proto.DailyDungeonEntryInfo daily_dungeon_info_list = 2;
inline int GetDailyDungeonEntryInfoRsp::daily_dungeon_info_list_size() const {
  return daily_dungeon_info_list_.size();
}
inline void GetDailyDungeonEntryInfoRsp::clear_daily_dungeon_info_list() {
  daily_dungeon_info_list_.Clear();
}
inline const ::proto::DailyDungeonEntryInfo& GetDailyDungeonEntryInfoRsp::daily_dungeon_info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GetDailyDungeonEntryInfoRsp.daily_dungeon_info_list)
  return daily_dungeon_info_list_.Get(index);
}
inline ::proto::DailyDungeonEntryInfo* GetDailyDungeonEntryInfoRsp::mutable_daily_dungeon_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GetDailyDungeonEntryInfoRsp.daily_dungeon_info_list)
  return daily_dungeon_info_list_.Mutable(index);
}
inline ::proto::DailyDungeonEntryInfo* GetDailyDungeonEntryInfoRsp::add_daily_dungeon_info_list() {
  // @@protoc_insertion_point(field_add:proto.GetDailyDungeonEntryInfoRsp.daily_dungeon_info_list)
  return daily_dungeon_info_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::DailyDungeonEntryInfo >*
GetDailyDungeonEntryInfoRsp::mutable_daily_dungeon_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GetDailyDungeonEntryInfoRsp.daily_dungeon_info_list)
  return &daily_dungeon_info_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::DailyDungeonEntryInfo >&
GetDailyDungeonEntryInfoRsp::daily_dungeon_info_list() const {
  // @@protoc_insertion_point(field_list:proto.GetDailyDungeonEntryInfoRsp.daily_dungeon_info_list)
  return daily_dungeon_info_list_;
}

// int32 retcode = 14;
inline void GetDailyDungeonEntryInfoRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 GetDailyDungeonEntryInfoRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GetDailyDungeonEntryInfoRsp.retcode)
  return retcode_;
}
inline void GetDailyDungeonEntryInfoRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GetDailyDungeonEntryInfoRsp.retcode)
}

// -------------------------------------------------------------------

// DungeonSlipRevivePointActivateReq

// uint32 slip_revive_point_id = 9;
inline void DungeonSlipRevivePointActivateReq::clear_slip_revive_point_id() {
  slip_revive_point_id_ = 0u;
}
inline ::google::protobuf::uint32 DungeonSlipRevivePointActivateReq::slip_revive_point_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonSlipRevivePointActivateReq.slip_revive_point_id)
  return slip_revive_point_id_;
}
inline void DungeonSlipRevivePointActivateReq::set_slip_revive_point_id(::google::protobuf::uint32 value) {
  
  slip_revive_point_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonSlipRevivePointActivateReq.slip_revive_point_id)
}

// -------------------------------------------------------------------

// DungeonSlipRevivePointActivateRsp

// uint32 slip_revive_point_id = 14;
inline void DungeonSlipRevivePointActivateRsp::clear_slip_revive_point_id() {
  slip_revive_point_id_ = 0u;
}
inline ::google::protobuf::uint32 DungeonSlipRevivePointActivateRsp::slip_revive_point_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonSlipRevivePointActivateRsp.slip_revive_point_id)
  return slip_revive_point_id_;
}
inline void DungeonSlipRevivePointActivateRsp::set_slip_revive_point_id(::google::protobuf::uint32 value) {
  
  slip_revive_point_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonSlipRevivePointActivateRsp.slip_revive_point_id)
}

// int32 retcode = 4;
inline void DungeonSlipRevivePointActivateRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 DungeonSlipRevivePointActivateRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.DungeonSlipRevivePointActivateRsp.retcode)
  return retcode_;
}
inline void DungeonSlipRevivePointActivateRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonSlipRevivePointActivateRsp.retcode)
}

// -------------------------------------------------------------------

// DungeonInterruptChallengeReq

// uint32 challenge_index = 14;
inline void DungeonInterruptChallengeReq::clear_challenge_index() {
  challenge_index_ = 0u;
}
inline ::google::protobuf::uint32 DungeonInterruptChallengeReq::challenge_index() const {
  // @@protoc_insertion_point(field_get:proto.DungeonInterruptChallengeReq.challenge_index)
  return challenge_index_;
}
inline void DungeonInterruptChallengeReq::set_challenge_index(::google::protobuf::uint32 value) {
  
  challenge_index_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonInterruptChallengeReq.challenge_index)
}

// uint32 group_id = 13;
inline void DungeonInterruptChallengeReq::clear_group_id() {
  group_id_ = 0u;
}
inline ::google::protobuf::uint32 DungeonInterruptChallengeReq::group_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonInterruptChallengeReq.group_id)
  return group_id_;
}
inline void DungeonInterruptChallengeReq::set_group_id(::google::protobuf::uint32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonInterruptChallengeReq.group_id)
}

// uint32 challenge_id = 11;
inline void DungeonInterruptChallengeReq::clear_challenge_id() {
  challenge_id_ = 0u;
}
inline ::google::protobuf::uint32 DungeonInterruptChallengeReq::challenge_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonInterruptChallengeReq.challenge_id)
  return challenge_id_;
}
inline void DungeonInterruptChallengeReq::set_challenge_id(::google::protobuf::uint32 value) {
  
  challenge_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonInterruptChallengeReq.challenge_id)
}

// -------------------------------------------------------------------

// DungeonInterruptChallengeRsp

// int32 retcode = 1;
inline void DungeonInterruptChallengeRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 DungeonInterruptChallengeRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.DungeonInterruptChallengeRsp.retcode)
  return retcode_;
}
inline void DungeonInterruptChallengeRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonInterruptChallengeRsp.retcode)
}

// uint32 challenge_index = 2;
inline void DungeonInterruptChallengeRsp::clear_challenge_index() {
  challenge_index_ = 0u;
}
inline ::google::protobuf::uint32 DungeonInterruptChallengeRsp::challenge_index() const {
  // @@protoc_insertion_point(field_get:proto.DungeonInterruptChallengeRsp.challenge_index)
  return challenge_index_;
}
inline void DungeonInterruptChallengeRsp::set_challenge_index(::google::protobuf::uint32 value) {
  
  challenge_index_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonInterruptChallengeRsp.challenge_index)
}

// uint32 group_id = 15;
inline void DungeonInterruptChallengeRsp::clear_group_id() {
  group_id_ = 0u;
}
inline ::google::protobuf::uint32 DungeonInterruptChallengeRsp::group_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonInterruptChallengeRsp.group_id)
  return group_id_;
}
inline void DungeonInterruptChallengeRsp::set_group_id(::google::protobuf::uint32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonInterruptChallengeRsp.group_id)
}

// uint32 challenge_id = 11;
inline void DungeonInterruptChallengeRsp::clear_challenge_id() {
  challenge_id_ = 0u;
}
inline ::google::protobuf::uint32 DungeonInterruptChallengeRsp::challenge_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonInterruptChallengeRsp.challenge_id)
  return challenge_id_;
}
inline void DungeonInterruptChallengeRsp::set_challenge_id(::google::protobuf::uint32 value) {
  
  challenge_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonInterruptChallengeRsp.challenge_id)
}

// -------------------------------------------------------------------

// InteractDailyDungeonInfoNotify

// -------------------------------------------------------------------

// DungeonRestartReq

// -------------------------------------------------------------------

// DungeonRestartRsp

// uint32 dungeon_id = 15;
inline void DungeonRestartRsp::clear_dungeon_id() {
  dungeon_id_ = 0u;
}
inline ::google::protobuf::uint32 DungeonRestartRsp::dungeon_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonRestartRsp.dungeon_id)
  return dungeon_id_;
}
inline void DungeonRestartRsp::set_dungeon_id(::google::protobuf::uint32 value) {
  
  dungeon_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonRestartRsp.dungeon_id)
}

// int32 retcode = 9;
inline void DungeonRestartRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 DungeonRestartRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.DungeonRestartRsp.retcode)
  return retcode_;
}
inline void DungeonRestartRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonRestartRsp.retcode)
}

// uint32 point_id = 14;
inline void DungeonRestartRsp::clear_point_id() {
  point_id_ = 0u;
}
inline ::google::protobuf::uint32 DungeonRestartRsp::point_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonRestartRsp.point_id)
  return point_id_;
}
inline void DungeonRestartRsp::set_point_id(::google::protobuf::uint32 value) {
  
  point_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonRestartRsp.point_id)
}

// -------------------------------------------------------------------

// DungeonRestartInviteNotify

// uint32 player_uid = 3;
inline void DungeonRestartInviteNotify::clear_player_uid() {
  player_uid_ = 0u;
}
inline ::google::protobuf::uint32 DungeonRestartInviteNotify::player_uid() const {
  // @@protoc_insertion_point(field_get:proto.DungeonRestartInviteNotify.player_uid)
  return player_uid_;
}
inline void DungeonRestartInviteNotify::set_player_uid(::google::protobuf::uint32 value) {
  
  player_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonRestartInviteNotify.player_uid)
}

// uint32 cd = 15;
inline void DungeonRestartInviteNotify::clear_cd() {
  cd_ = 0u;
}
inline ::google::protobuf::uint32 DungeonRestartInviteNotify::cd() const {
  // @@protoc_insertion_point(field_get:proto.DungeonRestartInviteNotify.cd)
  return cd_;
}
inline void DungeonRestartInviteNotify::set_cd(::google::protobuf::uint32 value) {
  
  cd_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonRestartInviteNotify.cd)
}

// uint32 point_id = 13;
inline void DungeonRestartInviteNotify::clear_point_id() {
  point_id_ = 0u;
}
inline ::google::protobuf::uint32 DungeonRestartInviteNotify::point_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonRestartInviteNotify.point_id)
  return point_id_;
}
inline void DungeonRestartInviteNotify::set_point_id(::google::protobuf::uint32 value) {
  
  point_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonRestartInviteNotify.point_id)
}

// uint32 dungeon_id = 10;
inline void DungeonRestartInviteNotify::clear_dungeon_id() {
  dungeon_id_ = 0u;
}
inline ::google::protobuf::uint32 DungeonRestartInviteNotify::dungeon_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonRestartInviteNotify.dungeon_id)
  return dungeon_id_;
}
inline void DungeonRestartInviteNotify::set_dungeon_id(::google::protobuf::uint32 value) {
  
  dungeon_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonRestartInviteNotify.dungeon_id)
}

// -------------------------------------------------------------------

// DungeonRestartInviteReplyReq

// bool is_accept = 11;
inline void DungeonRestartInviteReplyReq::clear_is_accept() {
  is_accept_ = false;
}
inline bool DungeonRestartInviteReplyReq::is_accept() const {
  // @@protoc_insertion_point(field_get:proto.DungeonRestartInviteReplyReq.is_accept)
  return is_accept_;
}
inline void DungeonRestartInviteReplyReq::set_is_accept(bool value) {
  
  is_accept_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonRestartInviteReplyReq.is_accept)
}

// -------------------------------------------------------------------

// DungeonRestartInviteReplyRsp

// bool is_accept = 10;
inline void DungeonRestartInviteReplyRsp::clear_is_accept() {
  is_accept_ = false;
}
inline bool DungeonRestartInviteReplyRsp::is_accept() const {
  // @@protoc_insertion_point(field_get:proto.DungeonRestartInviteReplyRsp.is_accept)
  return is_accept_;
}
inline void DungeonRestartInviteReplyRsp::set_is_accept(bool value) {
  
  is_accept_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonRestartInviteReplyRsp.is_accept)
}

// bool is_trans_point = 1;
inline void DungeonRestartInviteReplyRsp::clear_is_trans_point() {
  is_trans_point_ = false;
}
inline bool DungeonRestartInviteReplyRsp::is_trans_point() const {
  // @@protoc_insertion_point(field_get:proto.DungeonRestartInviteReplyRsp.is_trans_point)
  return is_trans_point_;
}
inline void DungeonRestartInviteReplyRsp::set_is_trans_point(bool value) {
  
  is_trans_point_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonRestartInviteReplyRsp.is_trans_point)
}

// int32 retcode = 9;
inline void DungeonRestartInviteReplyRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 DungeonRestartInviteReplyRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.DungeonRestartInviteReplyRsp.retcode)
  return retcode_;
}
inline void DungeonRestartInviteReplyRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonRestartInviteReplyRsp.retcode)
}

// -------------------------------------------------------------------

// DungeonRestartInviteReplyNotify

// bool is_accept = 6;
inline void DungeonRestartInviteReplyNotify::clear_is_accept() {
  is_accept_ = false;
}
inline bool DungeonRestartInviteReplyNotify::is_accept() const {
  // @@protoc_insertion_point(field_get:proto.DungeonRestartInviteReplyNotify.is_accept)
  return is_accept_;
}
inline void DungeonRestartInviteReplyNotify::set_is_accept(bool value) {
  
  is_accept_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonRestartInviteReplyNotify.is_accept)
}

// uint32 player_uid = 9;
inline void DungeonRestartInviteReplyNotify::clear_player_uid() {
  player_uid_ = 0u;
}
inline ::google::protobuf::uint32 DungeonRestartInviteReplyNotify::player_uid() const {
  // @@protoc_insertion_point(field_get:proto.DungeonRestartInviteReplyNotify.player_uid)
  return player_uid_;
}
inline void DungeonRestartInviteReplyNotify::set_player_uid(::google::protobuf::uint32 value) {
  
  player_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonRestartInviteReplyNotify.player_uid)
}

// -------------------------------------------------------------------

// DungeonRestartResultNotify

// bool is_add_accpet = 9;
inline void DungeonRestartResultNotify::clear_is_add_accpet() {
  is_add_accpet_ = false;
}
inline bool DungeonRestartResultNotify::is_add_accpet() const {
  // @@protoc_insertion_point(field_get:proto.DungeonRestartResultNotify.is_add_accpet)
  return is_add_accpet_;
}
inline void DungeonRestartResultNotify::set_is_add_accpet(bool value) {
  
  is_add_accpet_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonRestartResultNotify.is_add_accpet)
}

// -------------------------------------------------------------------

// DungeonCandidateTeamSetChangingAvatarReq

// bool is_changing_avatar = 12;
inline void DungeonCandidateTeamSetChangingAvatarReq::clear_is_changing_avatar() {
  is_changing_avatar_ = false;
}
inline bool DungeonCandidateTeamSetChangingAvatarReq::is_changing_avatar() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamSetChangingAvatarReq.is_changing_avatar)
  return is_changing_avatar_;
}
inline void DungeonCandidateTeamSetChangingAvatarReq::set_is_changing_avatar(bool value) {
  
  is_changing_avatar_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamSetChangingAvatarReq.is_changing_avatar)
}

// -------------------------------------------------------------------

// DungeonCandidateTeamSetChangingAvatarRsp

// int32 retcode = 2;
inline void DungeonCandidateTeamSetChangingAvatarRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 DungeonCandidateTeamSetChangingAvatarRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamSetChangingAvatarRsp.retcode)
  return retcode_;
}
inline void DungeonCandidateTeamSetChangingAvatarRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamSetChangingAvatarRsp.retcode)
}

// -------------------------------------------------------------------

// MistTrialFloorLevelNotify

// uint32 floor_level = 7;
inline void MistTrialFloorLevelNotify::clear_floor_level() {
  floor_level_ = 0u;
}
inline ::google::protobuf::uint32 MistTrialFloorLevelNotify::floor_level() const {
  // @@protoc_insertion_point(field_get:proto.MistTrialFloorLevelNotify.floor_level)
  return floor_level_;
}
inline void MistTrialFloorLevelNotify::set_floor_level(::google::protobuf::uint32 value) {
  
  floor_level_ = value;
  // @@protoc_insertion_point(field_set:proto.MistTrialFloorLevelNotify.floor_level)
}

// uint32 dungeon_scene_id = 14;
inline void MistTrialFloorLevelNotify::clear_dungeon_scene_id() {
  dungeon_scene_id_ = 0u;
}
inline ::google::protobuf::uint32 MistTrialFloorLevelNotify::dungeon_scene_id() const {
  // @@protoc_insertion_point(field_get:proto.MistTrialFloorLevelNotify.dungeon_scene_id)
  return dungeon_scene_id_;
}
inline void MistTrialFloorLevelNotify::set_dungeon_scene_id(::google::protobuf::uint32 value) {
  
  dungeon_scene_id_ = value;
  // @@protoc_insertion_point(field_set:proto.MistTrialFloorLevelNotify.dungeon_scene_id)
}

// -------------------------------------------------------------------

// DungeonReviseLevelNotify

// uint32 scene_level = 5;
inline void DungeonReviseLevelNotify::clear_scene_level() {
  scene_level_ = 0u;
}
inline ::google::protobuf::uint32 DungeonReviseLevelNotify::scene_level() const {
  // @@protoc_insertion_point(field_get:proto.DungeonReviseLevelNotify.scene_level)
  return scene_level_;
}
inline void DungeonReviseLevelNotify::set_scene_level(::google::protobuf::uint32 value) {
  
  scene_level_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonReviseLevelNotify.scene_level)
}

// uint32 revise_level = 10;
inline void DungeonReviseLevelNotify::clear_revise_level() {
  revise_level_ = 0u;
}
inline ::google::protobuf::uint32 DungeonReviseLevelNotify::revise_level() const {
  // @@protoc_insertion_point(field_get:proto.DungeonReviseLevelNotify.revise_level)
  return revise_level_;
}
inline void DungeonReviseLevelNotify::set_revise_level(::google::protobuf::uint32 value) {
  
  revise_level_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonReviseLevelNotify.revise_level)
}

// uint32 dungeon_id = 3;
inline void DungeonReviseLevelNotify::clear_dungeon_id() {
  dungeon_id_ = 0u;
}
inline ::google::protobuf::uint32 DungeonReviseLevelNotify::dungeon_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonReviseLevelNotify.dungeon_id)
  return dungeon_id_;
}
inline void DungeonReviseLevelNotify::set_dungeon_id(::google::protobuf::uint32 value) {
  
  dungeon_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonReviseLevelNotify.dungeon_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace proto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::proto::WindFieldDungeonFailReason> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::WindFieldDungeonFailReason>() {
  return ::proto::WindFieldDungeonFailReason_descriptor();
}
template <> struct is_proto_enum< ::proto::DungeonDataType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::DungeonDataType>() {
  return ::proto::DungeonDataType_descriptor();
}
template <> struct is_proto_enum< ::proto::ChallengeFinishType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::ChallengeFinishType>() {
  return ::proto::ChallengeFinishType_descriptor();
}
template <> struct is_proto_enum< ::proto::CustomDungeonFinishType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::CustomDungeonFinishType>() {
  return ::proto::CustomDungeonFinishType_descriptor();
}
template <> struct is_proto_enum< ::proto::DungeonCandidateTeamPlayerLeaveReason> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::DungeonCandidateTeamPlayerLeaveReason>() {
  return ::proto::DungeonCandidateTeamPlayerLeaveReason_descriptor();
}
template <> struct is_proto_enum< ::proto::DungeonCandidateTeamDismissReason> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::DungeonCandidateTeamDismissReason>() {
  return ::proto::DungeonCandidateTeamDismissReason_descriptor();
}
template <> struct is_proto_enum< ::proto::DungeonRestartReason> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::DungeonRestartReason>() {
  return ::proto::DungeonRestartReason_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cmd_2fcmd_5fdungeon_2eproto__INCLUDED
