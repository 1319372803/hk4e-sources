// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cmd/cmd_ugc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cmd/cmd_ugc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
class UgcMusicNoteDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UgcMusicNote>
     _instance;
} _UgcMusicNote_default_instance_;
class UgcMusicTrackDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UgcMusicTrack>
     _instance;
} _UgcMusicTrack_default_instance_;
class UgcMusicRecordDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UgcMusicRecord>
     _instance;
} _UgcMusicRecord_default_instance_;
class UgcMusicBriefInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UgcMusicBriefInfo>
     _instance;
} _UgcMusicBriefInfo_default_instance_;
class GetUgcReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetUgcReq>
     _instance;
} _GetUgcReq_default_instance_;
class GetUgcRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetUgcRsp>
     _instance;
  const ::proto::UgcMusicRecord* music_record_;
  const ::proto::UgcMusicBriefInfo* music_brief_info_;
} _GetUgcRsp_default_instance_;
class GetUgcBriefInfoReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetUgcBriefInfoReq>
     _instance;
} _GetUgcBriefInfoReq_default_instance_;
class GetUgcBriefInfoRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetUgcBriefInfoRsp>
     _instance;
  const ::proto::UgcMusicBriefInfo* music_brief_info_;
} _GetUgcBriefInfoRsp_default_instance_;
class SaveUgcReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SaveUgcReq>
     _instance;
  const ::proto::UgcMusicRecord* music_record_;
  const ::proto::UgcMusicBriefInfo* music_brief_info_;
} _SaveUgcReq_default_instance_;
class SaveUgcRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SaveUgcRsp>
     _instance;
} _SaveUgcRsp_default_instance_;
class PublishUgcReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PublishUgcReq>
     _instance;
} _PublishUgcReq_default_instance_;
class PublishUgcRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PublishUgcRsp>
     _instance;
} _PublishUgcRsp_default_instance_;
class CheckUgcUpdateReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CheckUgcUpdateReq>
     _instance;
} _CheckUgcUpdateReq_default_instance_;
class CheckUgcUpdateRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CheckUgcUpdateRsp>
     _instance;
} _CheckUgcUpdateRsp_default_instance_;
class UgcNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UgcNotify>
     _instance;
} _UgcNotify_default_instance_;
class CheckUgcStateReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CheckUgcStateReq>
     _instance;
} _CheckUgcStateReq_default_instance_;
class CheckUgcStateRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CheckUgcStateRsp>
     _instance;
} _CheckUgcStateRsp_default_instance_;

namespace protobuf_cmd_2fcmd_5fugc_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[17];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UgcMusicNote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UgcMusicNote, start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UgcMusicNote, end_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UgcMusicTrack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UgcMusicTrack, music_note_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UgcMusicRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UgcMusicRecord, music_track_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UgcMusicRecord, music_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UgcMusicBriefInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UgcMusicBriefInfo, import_from_ugc_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UgcMusicBriefInfo, is_published_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UgcMusicBriefInfo, is_played_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UgcMusicBriefInfo, music_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UgcMusicBriefInfo, save_page_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UgcMusicBriefInfo, save_idx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UgcMusicBriefInfo, creator_nickname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UgcMusicBriefInfo, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UgcMusicBriefInfo, save_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UgcMusicBriefInfo, after_note_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UgcMusicBriefInfo, before_note_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UgcMusicBriefInfo, is_psn_platform_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UgcMusicBriefInfo, time_line_edit_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UgcMusicBriefInfo, is_changed_after_publish_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UgcMusicBriefInfo, publish_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UgcMusicBriefInfo, max_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UgcMusicBriefInfo, real_time_edit_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UgcMusicBriefInfo, note_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UgcMusicBriefInfo, ugc_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UgcMusicBriefInfo, self_max_score_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUgcReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUgcReq, ugc_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUgcReq, ugc_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUgcReq, ugc_record_usage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUgcReq, is_require_brief_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUgcReq, get_ugc_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUgcRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUgcRsp, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUgcRsp, ugc_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUgcRsp, ugc_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUgcRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUgcRsp, ugc_record_usage_),
  offsetof(GetUgcRspDefaultTypeInternal, music_record_),
  offsetof(GetUgcRspDefaultTypeInternal, music_brief_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUgcRsp, record_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUgcRsp, brief_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUgcBriefInfoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUgcBriefInfoReq, ugc_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUgcBriefInfoReq, ugc_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUgcBriefInfoRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUgcBriefInfoRsp, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUgcBriefInfoRsp, ugc_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUgcBriefInfoRsp, ugc_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUgcBriefInfoRsp, retcode_),
  offsetof(GetUgcBriefInfoRspDefaultTypeInternal, music_brief_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUgcBriefInfoRsp, brief_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveUgcReq, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveUgcReq, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveUgcReq, ugc_type_),
  offsetof(SaveUgcReqDefaultTypeInternal, music_record_),
  offsetof(SaveUgcReqDefaultTypeInternal, music_brief_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveUgcReq, record_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveUgcReq, brief_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveUgcRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveUgcRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveUgcRsp, ugc_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveUgcRsp, ugc_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishUgcReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishUgcReq, ugc_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishUgcReq, ugc_guid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishUgcRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishUgcRsp, ugc_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishUgcRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishUgcRsp, ugc_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckUgcUpdateReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckUgcUpdateReq, ugc_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckUgcUpdateRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckUgcUpdateRsp, update_ugc_guid_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckUgcUpdateRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckUgcUpdateRsp, ugc_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UgcNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UgcNotify, is_ugc_publish_ban_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UgcNotify, is_ugc_publish_feature_closed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UgcNotify, is_ugc_feature_closed_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckUgcStateReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckUgcStateRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckUgcStateRsp, retcode_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(UgcMusicNote)},
  { 7, -1, sizeof(UgcMusicTrack)},
  { 13, -1, sizeof(UgcMusicRecord)},
  { 20, -1, sizeof(UgcMusicBriefInfo)},
  { 45, -1, sizeof(GetUgcReq)},
  { 55, -1, sizeof(GetUgcRsp)},
  { 68, -1, sizeof(GetUgcBriefInfoReq)},
  { 75, -1, sizeof(GetUgcBriefInfoRsp)},
  { 85, -1, sizeof(SaveUgcReq)},
  { 95, -1, sizeof(SaveUgcRsp)},
  { 103, -1, sizeof(PublishUgcReq)},
  { 110, -1, sizeof(PublishUgcRsp)},
  { 118, -1, sizeof(CheckUgcUpdateReq)},
  { 124, -1, sizeof(CheckUgcUpdateRsp)},
  { 132, -1, sizeof(UgcNotify)},
  { 140, -1, sizeof(CheckUgcStateReq)},
  { 145, -1, sizeof(CheckUgcStateRsp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_UgcMusicNote_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UgcMusicTrack_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UgcMusicRecord_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UgcMusicBriefInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetUgcReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetUgcRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetUgcBriefInfoReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetUgcBriefInfoRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SaveUgcReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SaveUgcRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PublishUgcReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PublishUgcRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CheckUgcUpdateReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CheckUgcUpdateRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UgcNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CheckUgcStateReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CheckUgcStateRsp_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cmd/cmd_ugc.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 17);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::protobuf_define_2eproto::InitDefaults();
  ::proto::protobuf_cmd_2fcmd_5fsocial_2eproto::InitDefaults();
  _UgcMusicNote_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UgcMusicNote_default_instance_);_UgcMusicTrack_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UgcMusicTrack_default_instance_);_UgcMusicRecord_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UgcMusicRecord_default_instance_);_UgcMusicBriefInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UgcMusicBriefInfo_default_instance_);_GetUgcReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetUgcReq_default_instance_);_GetUgcRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetUgcRsp_default_instance_);_GetUgcBriefInfoReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetUgcBriefInfoReq_default_instance_);_GetUgcBriefInfoRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetUgcBriefInfoRsp_default_instance_);_SaveUgcReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SaveUgcReq_default_instance_);_SaveUgcRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SaveUgcRsp_default_instance_);_PublishUgcReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PublishUgcReq_default_instance_);_PublishUgcRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PublishUgcRsp_default_instance_);_CheckUgcUpdateReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CheckUgcUpdateReq_default_instance_);_CheckUgcUpdateRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CheckUgcUpdateRsp_default_instance_);_UgcNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UgcNotify_default_instance_);_CheckUgcStateReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CheckUgcStateReq_default_instance_);_CheckUgcStateRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CheckUgcStateRsp_default_instance_);_GetUgcRsp_default_instance_.music_record_ = const_cast< ::proto::UgcMusicRecord*>(
      ::proto::UgcMusicRecord::internal_default_instance());
  _GetUgcRsp_default_instance_.music_brief_info_ = const_cast< ::proto::UgcMusicBriefInfo*>(
      ::proto::UgcMusicBriefInfo::internal_default_instance());
  _GetUgcBriefInfoRsp_default_instance_.music_brief_info_ = const_cast< ::proto::UgcMusicBriefInfo*>(
      ::proto::UgcMusicBriefInfo::internal_default_instance());
  _SaveUgcReq_default_instance_.music_record_ = const_cast< ::proto::UgcMusicRecord*>(
      ::proto::UgcMusicRecord::internal_default_instance());
  _SaveUgcReq_default_instance_.music_brief_info_ = const_cast< ::proto::UgcMusicBriefInfo*>(
      ::proto::UgcMusicBriefInfo::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021cmd/cmd_ugc.proto\022\005proto\032\014define.proto"
      "\032\024cmd/cmd_social.proto\"4\n\014UgcMusicNote\022\022"
      "\n\nstart_time\030\014 \001(\r\022\020\n\010end_time\030\005 \001(\r\"=\n\r"
      "UgcMusicTrack\022,\n\017music_note_list\030\006 \003(\0132\023"
      ".proto.UgcMusicNote\"R\n\016UgcMusicRecord\022.\n"
      "\020music_track_list\030\004 \003(\0132\024.proto.UgcMusic"
      "Track\022\020\n\010music_id\030\r \001(\r\"\350\003\n\021UgcMusicBrie"
      "fInfo\022\034\n\024import_from_ugc_guid\030\005 \001(\004\022\024\n\014i"
      "s_published\030\010 \001(\010\022\021\n\tis_played\030\001 \001(\010\022\020\n\010"
      "music_id\030\002 \001(\r\022\027\n\016save_page_type\030\236\t \001(\r\022"
      "\020\n\010save_idx\030\014 \001(\r\022\030\n\020creator_nickname\030\n "
      "\001(\t\022\017\n\007version\030\017 \001(\r\022\021\n\tsave_time\030\003 \001(\r\022"
      "\030\n\017after_note_list\030\352\007 \003(\r\022\031\n\020before_note"
      "_list\030\326\007 \003(\r\022\027\n\017is_psn_platform\030\t \001(\010\022\034\n"
      "\023time_line_edit_time\030\236\016 \001(\r\022 \n\030is_change"
      "d_after_publish\030\013 \001(\010\022\024\n\014publish_time\030\r "
      "\001(\r\022\021\n\tmax_score\030\016 \001(\r\022\034\n\023real_time_edit"
      "_time\030\300\004 \001(\r\022\022\n\nnote_count\030\007 \001(\r\022\020\n\010ugc_"
      "guid\030\004 \001(\004\022\026\n\016self_max_score\030\006 \001(\r\"\260\001\n\tG"
      "etUgcReq\022 \n\010ugc_type\030\010 \001(\0162\016.proto.UgcTy"
      "pe\022\020\n\010ugc_guid\030\005 \001(\004\022,\n\020ugc_record_usage"
      "\030\006 \001(\0162\022.proto.RecordUsage\022\030\n\020is_require"
      "_brief\030\013 \001(\010\022\'\n\014get_ugc_type\030\r \001(\0162\021.pro"
      "to.GetUgcType\"\367\001\n\tGetUgcRsp\022\020\n\010ugc_guid\030"
      "\017 \001(\004\022 \n\010ugc_type\030\n \001(\0162\016.proto.UgcType\022"
      "\017\n\007retcode\030\002 \001(\005\022,\n\020ugc_record_usage\030\016 \001"
      "(\0162\022.proto.RecordUsage\022-\n\014music_record\030\004"
      " \001(\0132\025.proto.UgcMusicRecordH\000\0225\n\020music_b"
      "rief_info\030\233\016 \001(\0132\030.proto.UgcMusicBriefIn"
      "foH\001B\010\n\006recordB\007\n\005brief\"H\n\022GetUgcBriefIn"
      "foReq\022\020\n\010ugc_guid\030\007 \001(\004\022 \n\010ugc_type\030\n \001("
      "\0162\016.proto.UgcType\"\230\001\n\022GetUgcBriefInfoRsp"
      "\022\020\n\010ugc_guid\030\003 \001(\004\022 \n\010ugc_type\030\013 \001(\0162\016.p"
      "roto.UgcType\022\017\n\007retcode\030\004 \001(\005\0224\n\020music_b"
      "rief_info\030\002 \001(\0132\030.proto.UgcMusicBriefInf"
      "oH\000B\007\n\005brief\"\247\001\n\nSaveUgcReq\022 \n\010ugc_type\030"
      "\013 \001(\0162\016.proto.UgcType\022-\n\014music_record\030\002 "
      "\001(\0132\025.proto.UgcMusicRecordH\000\0225\n\020music_br"
      "ief_info\030\320\013 \001(\0132\030.proto.UgcMusicBriefInf"
      "oH\001B\010\n\006recordB\007\n\005brief\"Q\n\nSaveUgcRsp\022\017\n\007"
      "retcode\030\017 \001(\005\022\020\n\010ugc_guid\030\010 \001(\004\022 \n\010ugc_t"
      "ype\030\001 \001(\0162\016.proto.UgcType\"C\n\rPublishUgcR"
      "eq\022 \n\010ugc_type\030\007 \001(\0162\016.proto.UgcType\022\020\n\010"
      "ugc_guid\030\014 \001(\004\"T\n\rPublishUgcRsp\022\020\n\010ugc_g"
      "uid\030\016 \001(\004\022\017\n\007retcode\030\017 \001(\005\022 \n\010ugc_type\030\r"
      " \001(\0162\016.proto.UgcType\"5\n\021CheckUgcUpdateRe"
      "q\022 \n\010ugc_type\030\r \001(\0162\016.proto.UgcType\"d\n\021C"
      "heckUgcUpdateRsp\022\034\n\024update_ugc_guid_list"
      "\030\017 \003(\004\022\017\n\007retcode\030\n \001(\005\022 \n\010ugc_type\030\014 \001("
      "\0162\016.proto.UgcType\"m\n\tUgcNotify\022\032\n\022is_ugc"
      "_publish_ban\030\014 \001(\010\022%\n\035is_ugc_publish_fea"
      "ture_closed\030\010 \001(\010\022\035\n\025is_ugc_feature_clos"
      "ed\030\017 \001(\010\"\022\n\020CheckUgcStateReq\"#\n\020CheckUgc"
      "StateRsp\022\017\n\007retcode\030\007 \001(\005*5\n\007UgcType\022\021\n\r"
      "UGC_TYPE_NONE\020\000\022\027\n\023UGC_TYPE_MUSIC_GAME\020\001"
      "*O\n\nGetUgcType\022\020\n\014GET_UGC_NONE\020\000\022\025\n\021GET_"
      "UGC_TYPE_MINE\020\001\022\030\n\024GET_UGC_TYPE_PUBLISH\020"
      "\002*\232\001\n\013RecordUsage\022\031\n\025UGC_RECORD_USAGE_NO"
      "NE\020\000\022\033\n\027UGC_RECORD_USAGE_IMPORT\020\001\022\031\n\025UGC"
      "_RECORD_USAGE_PLAY\020\002\022\032\n\026UGC_RECORD_USAGE"
      "_TRIAL\020\003\022\034\n\030UGC_RECORD_USAGE_COMPARE\020\004B("
      "Z&github.com/teyvat-helper/hk4e-proto/pb"
      "b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2488);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cmd/cmd_ugc.proto", &protobuf_RegisterTypes);
  ::proto::protobuf_define_2eproto::AddDescriptors();
  ::proto::protobuf_cmd_2fcmd_5fsocial_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_cmd_2fcmd_5fugc_2eproto

const ::google::protobuf::EnumDescriptor* UgcType_descriptor() {
  protobuf_cmd_2fcmd_5fugc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fugc_2eproto::file_level_enum_descriptors[0];
}
bool UgcType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GetUgcType_descriptor() {
  protobuf_cmd_2fcmd_5fugc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fugc_2eproto::file_level_enum_descriptors[1];
}
bool GetUgcType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RecordUsage_descriptor() {
  protobuf_cmd_2fcmd_5fugc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fugc_2eproto::file_level_enum_descriptors[2];
}
bool RecordUsage_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UgcMusicNote::kStartTimeFieldNumber;
const int UgcMusicNote::kEndTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UgcMusicNote::UgcMusicNote()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fugc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.UgcMusicNote)
}
UgcMusicNote::UgcMusicNote(const UgcMusicNote& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&end_time_, &from.end_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&start_time_) -
    reinterpret_cast<char*>(&end_time_)) + sizeof(start_time_));
  // @@protoc_insertion_point(copy_constructor:proto.UgcMusicNote)
}

void UgcMusicNote::SharedCtor() {
  ::memset(&end_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&start_time_) -
      reinterpret_cast<char*>(&end_time_)) + sizeof(start_time_));
  _cached_size_ = 0;
}

UgcMusicNote::~UgcMusicNote() {
  // @@protoc_insertion_point(destructor:proto.UgcMusicNote)
  SharedDtor();
}

void UgcMusicNote::SharedDtor() {
}

void UgcMusicNote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UgcMusicNote::descriptor() {
  protobuf_cmd_2fcmd_5fugc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fugc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UgcMusicNote& UgcMusicNote::default_instance() {
  protobuf_cmd_2fcmd_5fugc_2eproto::InitDefaults();
  return *internal_default_instance();
}

UgcMusicNote* UgcMusicNote::New(::google::protobuf::Arena* arena) const {
  UgcMusicNote* n = new UgcMusicNote;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UgcMusicNote::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.UgcMusicNote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&end_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&start_time_) -
      reinterpret_cast<char*>(&end_time_)) + sizeof(start_time_));
  _internal_metadata_.Clear();
}

bool UgcMusicNote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.UgcMusicNote)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 end_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 start_time = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.UgcMusicNote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.UgcMusicNote)
  return false;
#undef DO_
}

void UgcMusicNote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.UgcMusicNote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 end_time = 5;
  if (this->end_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->end_time(), output);
  }

  // uint32 start_time = 12;
  if (this->start_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->start_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.UgcMusicNote)
}

::google::protobuf::uint8* UgcMusicNote::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.UgcMusicNote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 end_time = 5;
  if (this->end_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->end_time(), target);
  }

  // uint32 start_time = 12;
  if (this->start_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->start_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.UgcMusicNote)
  return target;
}

size_t UgcMusicNote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.UgcMusicNote)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 end_time = 5;
  if (this->end_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->end_time());
  }

  // uint32 start_time = 12;
  if (this->start_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->start_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UgcMusicNote::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.UgcMusicNote)
  GOOGLE_DCHECK_NE(&from, this);
  const UgcMusicNote* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UgcMusicNote>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.UgcMusicNote)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.UgcMusicNote)
    MergeFrom(*source);
  }
}

void UgcMusicNote::MergeFrom(const UgcMusicNote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.UgcMusicNote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.end_time() != 0) {
    set_end_time(from.end_time());
  }
  if (from.start_time() != 0) {
    set_start_time(from.start_time());
  }
}

void UgcMusicNote::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.UgcMusicNote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UgcMusicNote::CopyFrom(const UgcMusicNote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.UgcMusicNote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UgcMusicNote::IsInitialized() const {
  return true;
}

void UgcMusicNote::Swap(UgcMusicNote* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UgcMusicNote::InternalSwap(UgcMusicNote* other) {
  using std::swap;
  swap(end_time_, other->end_time_);
  swap(start_time_, other->start_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UgcMusicNote::GetMetadata() const {
  protobuf_cmd_2fcmd_5fugc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fugc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UgcMusicNote

// uint32 start_time = 12;
void UgcMusicNote::clear_start_time() {
  start_time_ = 0u;
}
::google::protobuf::uint32 UgcMusicNote::start_time() const {
  // @@protoc_insertion_point(field_get:proto.UgcMusicNote.start_time)
  return start_time_;
}
void UgcMusicNote::set_start_time(::google::protobuf::uint32 value) {
  
  start_time_ = value;
  // @@protoc_insertion_point(field_set:proto.UgcMusicNote.start_time)
}

// uint32 end_time = 5;
void UgcMusicNote::clear_end_time() {
  end_time_ = 0u;
}
::google::protobuf::uint32 UgcMusicNote::end_time() const {
  // @@protoc_insertion_point(field_get:proto.UgcMusicNote.end_time)
  return end_time_;
}
void UgcMusicNote::set_end_time(::google::protobuf::uint32 value) {
  
  end_time_ = value;
  // @@protoc_insertion_point(field_set:proto.UgcMusicNote.end_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UgcMusicTrack::kMusicNoteListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UgcMusicTrack::UgcMusicTrack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fugc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.UgcMusicTrack)
}
UgcMusicTrack::UgcMusicTrack(const UgcMusicTrack& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      music_note_list_(from.music_note_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.UgcMusicTrack)
}

void UgcMusicTrack::SharedCtor() {
  _cached_size_ = 0;
}

UgcMusicTrack::~UgcMusicTrack() {
  // @@protoc_insertion_point(destructor:proto.UgcMusicTrack)
  SharedDtor();
}

void UgcMusicTrack::SharedDtor() {
}

void UgcMusicTrack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UgcMusicTrack::descriptor() {
  protobuf_cmd_2fcmd_5fugc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fugc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UgcMusicTrack& UgcMusicTrack::default_instance() {
  protobuf_cmd_2fcmd_5fugc_2eproto::InitDefaults();
  return *internal_default_instance();
}

UgcMusicTrack* UgcMusicTrack::New(::google::protobuf::Arena* arena) const {
  UgcMusicTrack* n = new UgcMusicTrack;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UgcMusicTrack::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.UgcMusicTrack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  music_note_list_.Clear();
  _internal_metadata_.Clear();
}

bool UgcMusicTrack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.UgcMusicTrack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.UgcMusicNote music_note_list = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_music_note_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.UgcMusicTrack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.UgcMusicTrack)
  return false;
#undef DO_
}

void UgcMusicTrack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.UgcMusicTrack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.UgcMusicNote music_note_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->music_note_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->music_note_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.UgcMusicTrack)
}

::google::protobuf::uint8* UgcMusicTrack::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.UgcMusicTrack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.UgcMusicNote music_note_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->music_note_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->music_note_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.UgcMusicTrack)
  return target;
}

size_t UgcMusicTrack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.UgcMusicTrack)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.UgcMusicNote music_note_list = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->music_note_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->music_note_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UgcMusicTrack::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.UgcMusicTrack)
  GOOGLE_DCHECK_NE(&from, this);
  const UgcMusicTrack* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UgcMusicTrack>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.UgcMusicTrack)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.UgcMusicTrack)
    MergeFrom(*source);
  }
}

void UgcMusicTrack::MergeFrom(const UgcMusicTrack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.UgcMusicTrack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  music_note_list_.MergeFrom(from.music_note_list_);
}

void UgcMusicTrack::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.UgcMusicTrack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UgcMusicTrack::CopyFrom(const UgcMusicTrack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.UgcMusicTrack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UgcMusicTrack::IsInitialized() const {
  return true;
}

void UgcMusicTrack::Swap(UgcMusicTrack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UgcMusicTrack::InternalSwap(UgcMusicTrack* other) {
  using std::swap;
  music_note_list_.InternalSwap(&other->music_note_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UgcMusicTrack::GetMetadata() const {
  protobuf_cmd_2fcmd_5fugc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fugc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UgcMusicTrack

// repeated .proto.UgcMusicNote music_note_list = 6;
int UgcMusicTrack::music_note_list_size() const {
  return music_note_list_.size();
}
void UgcMusicTrack::clear_music_note_list() {
  music_note_list_.Clear();
}
const ::proto::UgcMusicNote& UgcMusicTrack::music_note_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.UgcMusicTrack.music_note_list)
  return music_note_list_.Get(index);
}
::proto::UgcMusicNote* UgcMusicTrack::mutable_music_note_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.UgcMusicTrack.music_note_list)
  return music_note_list_.Mutable(index);
}
::proto::UgcMusicNote* UgcMusicTrack::add_music_note_list() {
  // @@protoc_insertion_point(field_add:proto.UgcMusicTrack.music_note_list)
  return music_note_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::UgcMusicNote >*
UgcMusicTrack::mutable_music_note_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.UgcMusicTrack.music_note_list)
  return &music_note_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::UgcMusicNote >&
UgcMusicTrack::music_note_list() const {
  // @@protoc_insertion_point(field_list:proto.UgcMusicTrack.music_note_list)
  return music_note_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UgcMusicRecord::kMusicTrackListFieldNumber;
const int UgcMusicRecord::kMusicIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UgcMusicRecord::UgcMusicRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fugc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.UgcMusicRecord)
}
UgcMusicRecord::UgcMusicRecord(const UgcMusicRecord& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      music_track_list_(from.music_track_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  music_id_ = from.music_id_;
  // @@protoc_insertion_point(copy_constructor:proto.UgcMusicRecord)
}

void UgcMusicRecord::SharedCtor() {
  music_id_ = 0u;
  _cached_size_ = 0;
}

UgcMusicRecord::~UgcMusicRecord() {
  // @@protoc_insertion_point(destructor:proto.UgcMusicRecord)
  SharedDtor();
}

void UgcMusicRecord::SharedDtor() {
}

void UgcMusicRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UgcMusicRecord::descriptor() {
  protobuf_cmd_2fcmd_5fugc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fugc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UgcMusicRecord& UgcMusicRecord::default_instance() {
  protobuf_cmd_2fcmd_5fugc_2eproto::InitDefaults();
  return *internal_default_instance();
}

UgcMusicRecord* UgcMusicRecord::New(::google::protobuf::Arena* arena) const {
  UgcMusicRecord* n = new UgcMusicRecord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UgcMusicRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.UgcMusicRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  music_track_list_.Clear();
  music_id_ = 0u;
  _internal_metadata_.Clear();
}

bool UgcMusicRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.UgcMusicRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.UgcMusicTrack music_track_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_music_track_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 music_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &music_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.UgcMusicRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.UgcMusicRecord)
  return false;
#undef DO_
}

void UgcMusicRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.UgcMusicRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.UgcMusicTrack music_track_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->music_track_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->music_track_list(static_cast<int>(i)), output);
  }

  // uint32 music_id = 13;
  if (this->music_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->music_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.UgcMusicRecord)
}

::google::protobuf::uint8* UgcMusicRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.UgcMusicRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.UgcMusicTrack music_track_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->music_track_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->music_track_list(static_cast<int>(i)), deterministic, target);
  }

  // uint32 music_id = 13;
  if (this->music_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->music_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.UgcMusicRecord)
  return target;
}

size_t UgcMusicRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.UgcMusicRecord)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.UgcMusicTrack music_track_list = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->music_track_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->music_track_list(static_cast<int>(i)));
    }
  }

  // uint32 music_id = 13;
  if (this->music_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->music_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UgcMusicRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.UgcMusicRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const UgcMusicRecord* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UgcMusicRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.UgcMusicRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.UgcMusicRecord)
    MergeFrom(*source);
  }
}

void UgcMusicRecord::MergeFrom(const UgcMusicRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.UgcMusicRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  music_track_list_.MergeFrom(from.music_track_list_);
  if (from.music_id() != 0) {
    set_music_id(from.music_id());
  }
}

void UgcMusicRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.UgcMusicRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UgcMusicRecord::CopyFrom(const UgcMusicRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.UgcMusicRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UgcMusicRecord::IsInitialized() const {
  return true;
}

void UgcMusicRecord::Swap(UgcMusicRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UgcMusicRecord::InternalSwap(UgcMusicRecord* other) {
  using std::swap;
  music_track_list_.InternalSwap(&other->music_track_list_);
  swap(music_id_, other->music_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UgcMusicRecord::GetMetadata() const {
  protobuf_cmd_2fcmd_5fugc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fugc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UgcMusicRecord

// repeated .proto.UgcMusicTrack music_track_list = 4;
int UgcMusicRecord::music_track_list_size() const {
  return music_track_list_.size();
}
void UgcMusicRecord::clear_music_track_list() {
  music_track_list_.Clear();
}
const ::proto::UgcMusicTrack& UgcMusicRecord::music_track_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.UgcMusicRecord.music_track_list)
  return music_track_list_.Get(index);
}
::proto::UgcMusicTrack* UgcMusicRecord::mutable_music_track_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.UgcMusicRecord.music_track_list)
  return music_track_list_.Mutable(index);
}
::proto::UgcMusicTrack* UgcMusicRecord::add_music_track_list() {
  // @@protoc_insertion_point(field_add:proto.UgcMusicRecord.music_track_list)
  return music_track_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::UgcMusicTrack >*
UgcMusicRecord::mutable_music_track_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.UgcMusicRecord.music_track_list)
  return &music_track_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::UgcMusicTrack >&
UgcMusicRecord::music_track_list() const {
  // @@protoc_insertion_point(field_list:proto.UgcMusicRecord.music_track_list)
  return music_track_list_;
}

// uint32 music_id = 13;
void UgcMusicRecord::clear_music_id() {
  music_id_ = 0u;
}
::google::protobuf::uint32 UgcMusicRecord::music_id() const {
  // @@protoc_insertion_point(field_get:proto.UgcMusicRecord.music_id)
  return music_id_;
}
void UgcMusicRecord::set_music_id(::google::protobuf::uint32 value) {
  
  music_id_ = value;
  // @@protoc_insertion_point(field_set:proto.UgcMusicRecord.music_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UgcMusicBriefInfo::kImportFromUgcGuidFieldNumber;
const int UgcMusicBriefInfo::kIsPublishedFieldNumber;
const int UgcMusicBriefInfo::kIsPlayedFieldNumber;
const int UgcMusicBriefInfo::kMusicIdFieldNumber;
const int UgcMusicBriefInfo::kSavePageTypeFieldNumber;
const int UgcMusicBriefInfo::kSaveIdxFieldNumber;
const int UgcMusicBriefInfo::kCreatorNicknameFieldNumber;
const int UgcMusicBriefInfo::kVersionFieldNumber;
const int UgcMusicBriefInfo::kSaveTimeFieldNumber;
const int UgcMusicBriefInfo::kAfterNoteListFieldNumber;
const int UgcMusicBriefInfo::kBeforeNoteListFieldNumber;
const int UgcMusicBriefInfo::kIsPsnPlatformFieldNumber;
const int UgcMusicBriefInfo::kTimeLineEditTimeFieldNumber;
const int UgcMusicBriefInfo::kIsChangedAfterPublishFieldNumber;
const int UgcMusicBriefInfo::kPublishTimeFieldNumber;
const int UgcMusicBriefInfo::kMaxScoreFieldNumber;
const int UgcMusicBriefInfo::kRealTimeEditTimeFieldNumber;
const int UgcMusicBriefInfo::kNoteCountFieldNumber;
const int UgcMusicBriefInfo::kUgcGuidFieldNumber;
const int UgcMusicBriefInfo::kSelfMaxScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UgcMusicBriefInfo::UgcMusicBriefInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fugc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.UgcMusicBriefInfo)
}
UgcMusicBriefInfo::UgcMusicBriefInfo(const UgcMusicBriefInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      before_note_list_(from.before_note_list_),
      after_note_list_(from.after_note_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  creator_nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.creator_nickname().size() > 0) {
    creator_nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.creator_nickname_);
  }
  ::memcpy(&music_id_, &from.music_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_line_edit_time_) -
    reinterpret_cast<char*>(&music_id_)) + sizeof(time_line_edit_time_));
  // @@protoc_insertion_point(copy_constructor:proto.UgcMusicBriefInfo)
}

void UgcMusicBriefInfo::SharedCtor() {
  creator_nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&music_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_line_edit_time_) -
      reinterpret_cast<char*>(&music_id_)) + sizeof(time_line_edit_time_));
  _cached_size_ = 0;
}

UgcMusicBriefInfo::~UgcMusicBriefInfo() {
  // @@protoc_insertion_point(destructor:proto.UgcMusicBriefInfo)
  SharedDtor();
}

void UgcMusicBriefInfo::SharedDtor() {
  creator_nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UgcMusicBriefInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UgcMusicBriefInfo::descriptor() {
  protobuf_cmd_2fcmd_5fugc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fugc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UgcMusicBriefInfo& UgcMusicBriefInfo::default_instance() {
  protobuf_cmd_2fcmd_5fugc_2eproto::InitDefaults();
  return *internal_default_instance();
}

UgcMusicBriefInfo* UgcMusicBriefInfo::New(::google::protobuf::Arena* arena) const {
  UgcMusicBriefInfo* n = new UgcMusicBriefInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UgcMusicBriefInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.UgcMusicBriefInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  before_note_list_.Clear();
  after_note_list_.Clear();
  creator_nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&music_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_line_edit_time_) -
      reinterpret_cast<char*>(&music_id_)) + sizeof(time_line_edit_time_));
  _internal_metadata_.Clear();
}

bool UgcMusicBriefInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.UgcMusicBriefInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_played = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_played_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 music_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &music_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 save_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &save_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 ugc_guid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ugc_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 import_from_ugc_guid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &import_from_ugc_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 self_max_score = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &self_max_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 note_count = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &note_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_published = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_published_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_psn_platform = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_psn_platform_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string creator_nickname = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creator_nickname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->creator_nickname().data(), static_cast<int>(this->creator_nickname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.UgcMusicBriefInfo.creator_nickname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_changed_after_publish = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_changed_after_publish_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 save_idx = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &save_idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 publish_time = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &publish_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_score = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 version = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 real_time_edit_time = 576;
      case 576: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 4608 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &real_time_edit_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 before_note_list = 982;
      case 982: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 7858 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_before_note_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 7856 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 7858u, input, this->mutable_before_note_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 after_note_list = 1002;
      case 1002: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 8018 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_after_note_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 8016 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 8018u, input, this->mutable_after_note_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 save_page_type = 1182;
      case 1182: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 9456 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &save_page_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 time_line_edit_time = 1822;
      case 1822: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 14576 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_line_edit_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.UgcMusicBriefInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.UgcMusicBriefInfo)
  return false;
#undef DO_
}

void UgcMusicBriefInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.UgcMusicBriefInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_played = 1;
  if (this->is_played() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_played(), output);
  }

  // uint32 music_id = 2;
  if (this->music_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->music_id(), output);
  }

  // uint32 save_time = 3;
  if (this->save_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->save_time(), output);
  }

  // uint64 ugc_guid = 4;
  if (this->ugc_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->ugc_guid(), output);
  }

  // uint64 import_from_ugc_guid = 5;
  if (this->import_from_ugc_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->import_from_ugc_guid(), output);
  }

  // uint32 self_max_score = 6;
  if (this->self_max_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->self_max_score(), output);
  }

  // uint32 note_count = 7;
  if (this->note_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->note_count(), output);
  }

  // bool is_published = 8;
  if (this->is_published() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_published(), output);
  }

  // bool is_psn_platform = 9;
  if (this->is_psn_platform() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_psn_platform(), output);
  }

  // string creator_nickname = 10;
  if (this->creator_nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->creator_nickname().data(), static_cast<int>(this->creator_nickname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.UgcMusicBriefInfo.creator_nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->creator_nickname(), output);
  }

  // bool is_changed_after_publish = 11;
  if (this->is_changed_after_publish() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_changed_after_publish(), output);
  }

  // uint32 save_idx = 12;
  if (this->save_idx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->save_idx(), output);
  }

  // uint32 publish_time = 13;
  if (this->publish_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->publish_time(), output);
  }

  // uint32 max_score = 14;
  if (this->max_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->max_score(), output);
  }

  // uint32 version = 15;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->version(), output);
  }

  // uint32 real_time_edit_time = 576;
  if (this->real_time_edit_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(576, this->real_time_edit_time(), output);
  }

  // repeated uint32 before_note_list = 982;
  if (this->before_note_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(982, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _before_note_list_cached_byte_size_));
  }
  for (int i = 0, n = this->before_note_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->before_note_list(i), output);
  }

  // repeated uint32 after_note_list = 1002;
  if (this->after_note_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1002, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _after_note_list_cached_byte_size_));
  }
  for (int i = 0, n = this->after_note_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->after_note_list(i), output);
  }

  // uint32 save_page_type = 1182;
  if (this->save_page_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1182, this->save_page_type(), output);
  }

  // uint32 time_line_edit_time = 1822;
  if (this->time_line_edit_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1822, this->time_line_edit_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.UgcMusicBriefInfo)
}

::google::protobuf::uint8* UgcMusicBriefInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.UgcMusicBriefInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_played = 1;
  if (this->is_played() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_played(), target);
  }

  // uint32 music_id = 2;
  if (this->music_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->music_id(), target);
  }

  // uint32 save_time = 3;
  if (this->save_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->save_time(), target);
  }

  // uint64 ugc_guid = 4;
  if (this->ugc_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->ugc_guid(), target);
  }

  // uint64 import_from_ugc_guid = 5;
  if (this->import_from_ugc_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->import_from_ugc_guid(), target);
  }

  // uint32 self_max_score = 6;
  if (this->self_max_score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->self_max_score(), target);
  }

  // uint32 note_count = 7;
  if (this->note_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->note_count(), target);
  }

  // bool is_published = 8;
  if (this->is_published() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_published(), target);
  }

  // bool is_psn_platform = 9;
  if (this->is_psn_platform() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_psn_platform(), target);
  }

  // string creator_nickname = 10;
  if (this->creator_nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->creator_nickname().data(), static_cast<int>(this->creator_nickname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.UgcMusicBriefInfo.creator_nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->creator_nickname(), target);
  }

  // bool is_changed_after_publish = 11;
  if (this->is_changed_after_publish() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_changed_after_publish(), target);
  }

  // uint32 save_idx = 12;
  if (this->save_idx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->save_idx(), target);
  }

  // uint32 publish_time = 13;
  if (this->publish_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->publish_time(), target);
  }

  // uint32 max_score = 14;
  if (this->max_score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->max_score(), target);
  }

  // uint32 version = 15;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->version(), target);
  }

  // uint32 real_time_edit_time = 576;
  if (this->real_time_edit_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(576, this->real_time_edit_time(), target);
  }

  // repeated uint32 before_note_list = 982;
  if (this->before_note_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      982,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _before_note_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->before_note_list_, target);
  }

  // repeated uint32 after_note_list = 1002;
  if (this->after_note_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1002,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _after_note_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->after_note_list_, target);
  }

  // uint32 save_page_type = 1182;
  if (this->save_page_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1182, this->save_page_type(), target);
  }

  // uint32 time_line_edit_time = 1822;
  if (this->time_line_edit_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1822, this->time_line_edit_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.UgcMusicBriefInfo)
  return target;
}

size_t UgcMusicBriefInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.UgcMusicBriefInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 before_note_list = 982;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->before_note_list_);
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _before_note_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 after_note_list = 1002;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->after_note_list_);
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _after_note_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string creator_nickname = 10;
  if (this->creator_nickname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->creator_nickname());
  }

  // uint32 music_id = 2;
  if (this->music_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->music_id());
  }

  // uint32 save_time = 3;
  if (this->save_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->save_time());
  }

  // uint64 ugc_guid = 4;
  if (this->ugc_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ugc_guid());
  }

  // uint64 import_from_ugc_guid = 5;
  if (this->import_from_ugc_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->import_from_ugc_guid());
  }

  // uint32 self_max_score = 6;
  if (this->self_max_score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->self_max_score());
  }

  // uint32 note_count = 7;
  if (this->note_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->note_count());
  }

  // bool is_published = 8;
  if (this->is_published() != 0) {
    total_size += 1 + 1;
  }

  // bool is_played = 1;
  if (this->is_played() != 0) {
    total_size += 1 + 1;
  }

  // bool is_psn_platform = 9;
  if (this->is_psn_platform() != 0) {
    total_size += 1 + 1;
  }

  // bool is_changed_after_publish = 11;
  if (this->is_changed_after_publish() != 0) {
    total_size += 1 + 1;
  }

  // uint32 save_idx = 12;
  if (this->save_idx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->save_idx());
  }

  // uint32 publish_time = 13;
  if (this->publish_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->publish_time());
  }

  // uint32 max_score = 14;
  if (this->max_score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_score());
  }

  // uint32 version = 15;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  // uint32 real_time_edit_time = 576;
  if (this->real_time_edit_time() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->real_time_edit_time());
  }

  // uint32 save_page_type = 1182;
  if (this->save_page_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->save_page_type());
  }

  // uint32 time_line_edit_time = 1822;
  if (this->time_line_edit_time() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->time_line_edit_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UgcMusicBriefInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.UgcMusicBriefInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UgcMusicBriefInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UgcMusicBriefInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.UgcMusicBriefInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.UgcMusicBriefInfo)
    MergeFrom(*source);
  }
}

void UgcMusicBriefInfo::MergeFrom(const UgcMusicBriefInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.UgcMusicBriefInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  before_note_list_.MergeFrom(from.before_note_list_);
  after_note_list_.MergeFrom(from.after_note_list_);
  if (from.creator_nickname().size() > 0) {

    creator_nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.creator_nickname_);
  }
  if (from.music_id() != 0) {
    set_music_id(from.music_id());
  }
  if (from.save_time() != 0) {
    set_save_time(from.save_time());
  }
  if (from.ugc_guid() != 0) {
    set_ugc_guid(from.ugc_guid());
  }
  if (from.import_from_ugc_guid() != 0) {
    set_import_from_ugc_guid(from.import_from_ugc_guid());
  }
  if (from.self_max_score() != 0) {
    set_self_max_score(from.self_max_score());
  }
  if (from.note_count() != 0) {
    set_note_count(from.note_count());
  }
  if (from.is_published() != 0) {
    set_is_published(from.is_published());
  }
  if (from.is_played() != 0) {
    set_is_played(from.is_played());
  }
  if (from.is_psn_platform() != 0) {
    set_is_psn_platform(from.is_psn_platform());
  }
  if (from.is_changed_after_publish() != 0) {
    set_is_changed_after_publish(from.is_changed_after_publish());
  }
  if (from.save_idx() != 0) {
    set_save_idx(from.save_idx());
  }
  if (from.publish_time() != 0) {
    set_publish_time(from.publish_time());
  }
  if (from.max_score() != 0) {
    set_max_score(from.max_score());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.real_time_edit_time() != 0) {
    set_real_time_edit_time(from.real_time_edit_time());
  }
  if (from.save_page_type() != 0) {
    set_save_page_type(from.save_page_type());
  }
  if (from.time_line_edit_time() != 0) {
    set_time_line_edit_time(from.time_line_edit_time());
  }
}

void UgcMusicBriefInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.UgcMusicBriefInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UgcMusicBriefInfo::CopyFrom(const UgcMusicBriefInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.UgcMusicBriefInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UgcMusicBriefInfo::IsInitialized() const {
  return true;
}

void UgcMusicBriefInfo::Swap(UgcMusicBriefInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UgcMusicBriefInfo::InternalSwap(UgcMusicBriefInfo* other) {
  using std::swap;
  before_note_list_.InternalSwap(&other->before_note_list_);
  after_note_list_.InternalSwap(&other->after_note_list_);
  creator_nickname_.Swap(&other->creator_nickname_);
  swap(music_id_, other->music_id_);
  swap(save_time_, other->save_time_);
  swap(ugc_guid_, other->ugc_guid_);
  swap(import_from_ugc_guid_, other->import_from_ugc_guid_);
  swap(self_max_score_, other->self_max_score_);
  swap(note_count_, other->note_count_);
  swap(is_published_, other->is_published_);
  swap(is_played_, other->is_played_);
  swap(is_psn_platform_, other->is_psn_platform_);
  swap(is_changed_after_publish_, other->is_changed_after_publish_);
  swap(save_idx_, other->save_idx_);
  swap(publish_time_, other->publish_time_);
  swap(max_score_, other->max_score_);
  swap(version_, other->version_);
  swap(real_time_edit_time_, other->real_time_edit_time_);
  swap(save_page_type_, other->save_page_type_);
  swap(time_line_edit_time_, other->time_line_edit_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UgcMusicBriefInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fugc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fugc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UgcMusicBriefInfo

// uint64 import_from_ugc_guid = 5;
void UgcMusicBriefInfo::clear_import_from_ugc_guid() {
  import_from_ugc_guid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 UgcMusicBriefInfo::import_from_ugc_guid() const {
  // @@protoc_insertion_point(field_get:proto.UgcMusicBriefInfo.import_from_ugc_guid)
  return import_from_ugc_guid_;
}
void UgcMusicBriefInfo::set_import_from_ugc_guid(::google::protobuf::uint64 value) {
  
  import_from_ugc_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.UgcMusicBriefInfo.import_from_ugc_guid)
}

// bool is_published = 8;
void UgcMusicBriefInfo::clear_is_published() {
  is_published_ = false;
}
bool UgcMusicBriefInfo::is_published() const {
  // @@protoc_insertion_point(field_get:proto.UgcMusicBriefInfo.is_published)
  return is_published_;
}
void UgcMusicBriefInfo::set_is_published(bool value) {
  
  is_published_ = value;
  // @@protoc_insertion_point(field_set:proto.UgcMusicBriefInfo.is_published)
}

// bool is_played = 1;
void UgcMusicBriefInfo::clear_is_played() {
  is_played_ = false;
}
bool UgcMusicBriefInfo::is_played() const {
  // @@protoc_insertion_point(field_get:proto.UgcMusicBriefInfo.is_played)
  return is_played_;
}
void UgcMusicBriefInfo::set_is_played(bool value) {
  
  is_played_ = value;
  // @@protoc_insertion_point(field_set:proto.UgcMusicBriefInfo.is_played)
}

// uint32 music_id = 2;
void UgcMusicBriefInfo::clear_music_id() {
  music_id_ = 0u;
}
::google::protobuf::uint32 UgcMusicBriefInfo::music_id() const {
  // @@protoc_insertion_point(field_get:proto.UgcMusicBriefInfo.music_id)
  return music_id_;
}
void UgcMusicBriefInfo::set_music_id(::google::protobuf::uint32 value) {
  
  music_id_ = value;
  // @@protoc_insertion_point(field_set:proto.UgcMusicBriefInfo.music_id)
}

// uint32 save_page_type = 1182;
void UgcMusicBriefInfo::clear_save_page_type() {
  save_page_type_ = 0u;
}
::google::protobuf::uint32 UgcMusicBriefInfo::save_page_type() const {
  // @@protoc_insertion_point(field_get:proto.UgcMusicBriefInfo.save_page_type)
  return save_page_type_;
}
void UgcMusicBriefInfo::set_save_page_type(::google::protobuf::uint32 value) {
  
  save_page_type_ = value;
  // @@protoc_insertion_point(field_set:proto.UgcMusicBriefInfo.save_page_type)
}

// uint32 save_idx = 12;
void UgcMusicBriefInfo::clear_save_idx() {
  save_idx_ = 0u;
}
::google::protobuf::uint32 UgcMusicBriefInfo::save_idx() const {
  // @@protoc_insertion_point(field_get:proto.UgcMusicBriefInfo.save_idx)
  return save_idx_;
}
void UgcMusicBriefInfo::set_save_idx(::google::protobuf::uint32 value) {
  
  save_idx_ = value;
  // @@protoc_insertion_point(field_set:proto.UgcMusicBriefInfo.save_idx)
}

// string creator_nickname = 10;
void UgcMusicBriefInfo::clear_creator_nickname() {
  creator_nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UgcMusicBriefInfo::creator_nickname() const {
  // @@protoc_insertion_point(field_get:proto.UgcMusicBriefInfo.creator_nickname)
  return creator_nickname_.GetNoArena();
}
void UgcMusicBriefInfo::set_creator_nickname(const ::std::string& value) {
  
  creator_nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.UgcMusicBriefInfo.creator_nickname)
}
#if LANG_CXX11
void UgcMusicBriefInfo::set_creator_nickname(::std::string&& value) {
  
  creator_nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.UgcMusicBriefInfo.creator_nickname)
}
#endif
void UgcMusicBriefInfo::set_creator_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  creator_nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.UgcMusicBriefInfo.creator_nickname)
}
void UgcMusicBriefInfo::set_creator_nickname(const char* value, size_t size) {
  
  creator_nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.UgcMusicBriefInfo.creator_nickname)
}
::std::string* UgcMusicBriefInfo::mutable_creator_nickname() {
  
  // @@protoc_insertion_point(field_mutable:proto.UgcMusicBriefInfo.creator_nickname)
  return creator_nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UgcMusicBriefInfo::release_creator_nickname() {
  // @@protoc_insertion_point(field_release:proto.UgcMusicBriefInfo.creator_nickname)
  
  return creator_nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UgcMusicBriefInfo::set_allocated_creator_nickname(::std::string* creator_nickname) {
  if (creator_nickname != NULL) {
    
  } else {
    
  }
  creator_nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), creator_nickname);
  // @@protoc_insertion_point(field_set_allocated:proto.UgcMusicBriefInfo.creator_nickname)
}

// uint32 version = 15;
void UgcMusicBriefInfo::clear_version() {
  version_ = 0u;
}
::google::protobuf::uint32 UgcMusicBriefInfo::version() const {
  // @@protoc_insertion_point(field_get:proto.UgcMusicBriefInfo.version)
  return version_;
}
void UgcMusicBriefInfo::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:proto.UgcMusicBriefInfo.version)
}

// uint32 save_time = 3;
void UgcMusicBriefInfo::clear_save_time() {
  save_time_ = 0u;
}
::google::protobuf::uint32 UgcMusicBriefInfo::save_time() const {
  // @@protoc_insertion_point(field_get:proto.UgcMusicBriefInfo.save_time)
  return save_time_;
}
void UgcMusicBriefInfo::set_save_time(::google::protobuf::uint32 value) {
  
  save_time_ = value;
  // @@protoc_insertion_point(field_set:proto.UgcMusicBriefInfo.save_time)
}

// repeated uint32 after_note_list = 1002;
int UgcMusicBriefInfo::after_note_list_size() const {
  return after_note_list_.size();
}
void UgcMusicBriefInfo::clear_after_note_list() {
  after_note_list_.Clear();
}
::google::protobuf::uint32 UgcMusicBriefInfo::after_note_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.UgcMusicBriefInfo.after_note_list)
  return after_note_list_.Get(index);
}
void UgcMusicBriefInfo::set_after_note_list(int index, ::google::protobuf::uint32 value) {
  after_note_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.UgcMusicBriefInfo.after_note_list)
}
void UgcMusicBriefInfo::add_after_note_list(::google::protobuf::uint32 value) {
  after_note_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.UgcMusicBriefInfo.after_note_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
UgcMusicBriefInfo::after_note_list() const {
  // @@protoc_insertion_point(field_list:proto.UgcMusicBriefInfo.after_note_list)
  return after_note_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
UgcMusicBriefInfo::mutable_after_note_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.UgcMusicBriefInfo.after_note_list)
  return &after_note_list_;
}

// repeated uint32 before_note_list = 982;
int UgcMusicBriefInfo::before_note_list_size() const {
  return before_note_list_.size();
}
void UgcMusicBriefInfo::clear_before_note_list() {
  before_note_list_.Clear();
}
::google::protobuf::uint32 UgcMusicBriefInfo::before_note_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.UgcMusicBriefInfo.before_note_list)
  return before_note_list_.Get(index);
}
void UgcMusicBriefInfo::set_before_note_list(int index, ::google::protobuf::uint32 value) {
  before_note_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.UgcMusicBriefInfo.before_note_list)
}
void UgcMusicBriefInfo::add_before_note_list(::google::protobuf::uint32 value) {
  before_note_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.UgcMusicBriefInfo.before_note_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
UgcMusicBriefInfo::before_note_list() const {
  // @@protoc_insertion_point(field_list:proto.UgcMusicBriefInfo.before_note_list)
  return before_note_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
UgcMusicBriefInfo::mutable_before_note_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.UgcMusicBriefInfo.before_note_list)
  return &before_note_list_;
}

// bool is_psn_platform = 9;
void UgcMusicBriefInfo::clear_is_psn_platform() {
  is_psn_platform_ = false;
}
bool UgcMusicBriefInfo::is_psn_platform() const {
  // @@protoc_insertion_point(field_get:proto.UgcMusicBriefInfo.is_psn_platform)
  return is_psn_platform_;
}
void UgcMusicBriefInfo::set_is_psn_platform(bool value) {
  
  is_psn_platform_ = value;
  // @@protoc_insertion_point(field_set:proto.UgcMusicBriefInfo.is_psn_platform)
}

// uint32 time_line_edit_time = 1822;
void UgcMusicBriefInfo::clear_time_line_edit_time() {
  time_line_edit_time_ = 0u;
}
::google::protobuf::uint32 UgcMusicBriefInfo::time_line_edit_time() const {
  // @@protoc_insertion_point(field_get:proto.UgcMusicBriefInfo.time_line_edit_time)
  return time_line_edit_time_;
}
void UgcMusicBriefInfo::set_time_line_edit_time(::google::protobuf::uint32 value) {
  
  time_line_edit_time_ = value;
  // @@protoc_insertion_point(field_set:proto.UgcMusicBriefInfo.time_line_edit_time)
}

// bool is_changed_after_publish = 11;
void UgcMusicBriefInfo::clear_is_changed_after_publish() {
  is_changed_after_publish_ = false;
}
bool UgcMusicBriefInfo::is_changed_after_publish() const {
  // @@protoc_insertion_point(field_get:proto.UgcMusicBriefInfo.is_changed_after_publish)
  return is_changed_after_publish_;
}
void UgcMusicBriefInfo::set_is_changed_after_publish(bool value) {
  
  is_changed_after_publish_ = value;
  // @@protoc_insertion_point(field_set:proto.UgcMusicBriefInfo.is_changed_after_publish)
}

// uint32 publish_time = 13;
void UgcMusicBriefInfo::clear_publish_time() {
  publish_time_ = 0u;
}
::google::protobuf::uint32 UgcMusicBriefInfo::publish_time() const {
  // @@protoc_insertion_point(field_get:proto.UgcMusicBriefInfo.publish_time)
  return publish_time_;
}
void UgcMusicBriefInfo::set_publish_time(::google::protobuf::uint32 value) {
  
  publish_time_ = value;
  // @@protoc_insertion_point(field_set:proto.UgcMusicBriefInfo.publish_time)
}

// uint32 max_score = 14;
void UgcMusicBriefInfo::clear_max_score() {
  max_score_ = 0u;
}
::google::protobuf::uint32 UgcMusicBriefInfo::max_score() const {
  // @@protoc_insertion_point(field_get:proto.UgcMusicBriefInfo.max_score)
  return max_score_;
}
void UgcMusicBriefInfo::set_max_score(::google::protobuf::uint32 value) {
  
  max_score_ = value;
  // @@protoc_insertion_point(field_set:proto.UgcMusicBriefInfo.max_score)
}

// uint32 real_time_edit_time = 576;
void UgcMusicBriefInfo::clear_real_time_edit_time() {
  real_time_edit_time_ = 0u;
}
::google::protobuf::uint32 UgcMusicBriefInfo::real_time_edit_time() const {
  // @@protoc_insertion_point(field_get:proto.UgcMusicBriefInfo.real_time_edit_time)
  return real_time_edit_time_;
}
void UgcMusicBriefInfo::set_real_time_edit_time(::google::protobuf::uint32 value) {
  
  real_time_edit_time_ = value;
  // @@protoc_insertion_point(field_set:proto.UgcMusicBriefInfo.real_time_edit_time)
}

// uint32 note_count = 7;
void UgcMusicBriefInfo::clear_note_count() {
  note_count_ = 0u;
}
::google::protobuf::uint32 UgcMusicBriefInfo::note_count() const {
  // @@protoc_insertion_point(field_get:proto.UgcMusicBriefInfo.note_count)
  return note_count_;
}
void UgcMusicBriefInfo::set_note_count(::google::protobuf::uint32 value) {
  
  note_count_ = value;
  // @@protoc_insertion_point(field_set:proto.UgcMusicBriefInfo.note_count)
}

// uint64 ugc_guid = 4;
void UgcMusicBriefInfo::clear_ugc_guid() {
  ugc_guid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 UgcMusicBriefInfo::ugc_guid() const {
  // @@protoc_insertion_point(field_get:proto.UgcMusicBriefInfo.ugc_guid)
  return ugc_guid_;
}
void UgcMusicBriefInfo::set_ugc_guid(::google::protobuf::uint64 value) {
  
  ugc_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.UgcMusicBriefInfo.ugc_guid)
}

// uint32 self_max_score = 6;
void UgcMusicBriefInfo::clear_self_max_score() {
  self_max_score_ = 0u;
}
::google::protobuf::uint32 UgcMusicBriefInfo::self_max_score() const {
  // @@protoc_insertion_point(field_get:proto.UgcMusicBriefInfo.self_max_score)
  return self_max_score_;
}
void UgcMusicBriefInfo::set_self_max_score(::google::protobuf::uint32 value) {
  
  self_max_score_ = value;
  // @@protoc_insertion_point(field_set:proto.UgcMusicBriefInfo.self_max_score)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetUgcReq::kUgcTypeFieldNumber;
const int GetUgcReq::kUgcGuidFieldNumber;
const int GetUgcReq::kUgcRecordUsageFieldNumber;
const int GetUgcReq::kIsRequireBriefFieldNumber;
const int GetUgcReq::kGetUgcTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetUgcReq::GetUgcReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fugc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GetUgcReq)
}
GetUgcReq::GetUgcReq(const GetUgcReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ugc_guid_, &from.ugc_guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&get_ugc_type_) -
    reinterpret_cast<char*>(&ugc_guid_)) + sizeof(get_ugc_type_));
  // @@protoc_insertion_point(copy_constructor:proto.GetUgcReq)
}

void GetUgcReq::SharedCtor() {
  ::memset(&ugc_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&get_ugc_type_) -
      reinterpret_cast<char*>(&ugc_guid_)) + sizeof(get_ugc_type_));
  _cached_size_ = 0;
}

GetUgcReq::~GetUgcReq() {
  // @@protoc_insertion_point(destructor:proto.GetUgcReq)
  SharedDtor();
}

void GetUgcReq::SharedDtor() {
}

void GetUgcReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUgcReq::descriptor() {
  protobuf_cmd_2fcmd_5fugc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fugc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetUgcReq& GetUgcReq::default_instance() {
  protobuf_cmd_2fcmd_5fugc_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetUgcReq* GetUgcReq::New(::google::protobuf::Arena* arena) const {
  GetUgcReq* n = new GetUgcReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetUgcReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GetUgcReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ugc_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&get_ugc_type_) -
      reinterpret_cast<char*>(&ugc_guid_)) + sizeof(get_ugc_type_));
  _internal_metadata_.Clear();
}

bool GetUgcReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GetUgcReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 ugc_guid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ugc_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.RecordUsage ugc_record_usage = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ugc_record_usage(static_cast< ::proto::RecordUsage >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.UgcType ugc_type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ugc_type(static_cast< ::proto::UgcType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_require_brief = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_require_brief_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GetUgcType get_ugc_type = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_get_ugc_type(static_cast< ::proto::GetUgcType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GetUgcReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GetUgcReq)
  return false;
#undef DO_
}

void GetUgcReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GetUgcReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 ugc_guid = 5;
  if (this->ugc_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->ugc_guid(), output);
  }

  // .proto.RecordUsage ugc_record_usage = 6;
  if (this->ugc_record_usage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->ugc_record_usage(), output);
  }

  // .proto.UgcType ugc_type = 8;
  if (this->ugc_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->ugc_type(), output);
  }

  // bool is_require_brief = 11;
  if (this->is_require_brief() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_require_brief(), output);
  }

  // .proto.GetUgcType get_ugc_type = 13;
  if (this->get_ugc_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->get_ugc_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GetUgcReq)
}

::google::protobuf::uint8* GetUgcReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GetUgcReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 ugc_guid = 5;
  if (this->ugc_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->ugc_guid(), target);
  }

  // .proto.RecordUsage ugc_record_usage = 6;
  if (this->ugc_record_usage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->ugc_record_usage(), target);
  }

  // .proto.UgcType ugc_type = 8;
  if (this->ugc_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->ugc_type(), target);
  }

  // bool is_require_brief = 11;
  if (this->is_require_brief() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_require_brief(), target);
  }

  // .proto.GetUgcType get_ugc_type = 13;
  if (this->get_ugc_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->get_ugc_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GetUgcReq)
  return target;
}

size_t GetUgcReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GetUgcReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 ugc_guid = 5;
  if (this->ugc_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ugc_guid());
  }

  // .proto.RecordUsage ugc_record_usage = 6;
  if (this->ugc_record_usage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ugc_record_usage());
  }

  // .proto.UgcType ugc_type = 8;
  if (this->ugc_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ugc_type());
  }

  // bool is_require_brief = 11;
  if (this->is_require_brief() != 0) {
    total_size += 1 + 1;
  }

  // .proto.GetUgcType get_ugc_type = 13;
  if (this->get_ugc_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->get_ugc_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUgcReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GetUgcReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetUgcReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetUgcReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GetUgcReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GetUgcReq)
    MergeFrom(*source);
  }
}

void GetUgcReq::MergeFrom(const GetUgcReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GetUgcReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ugc_guid() != 0) {
    set_ugc_guid(from.ugc_guid());
  }
  if (from.ugc_record_usage() != 0) {
    set_ugc_record_usage(from.ugc_record_usage());
  }
  if (from.ugc_type() != 0) {
    set_ugc_type(from.ugc_type());
  }
  if (from.is_require_brief() != 0) {
    set_is_require_brief(from.is_require_brief());
  }
  if (from.get_ugc_type() != 0) {
    set_get_ugc_type(from.get_ugc_type());
  }
}

void GetUgcReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GetUgcReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUgcReq::CopyFrom(const GetUgcReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GetUgcReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUgcReq::IsInitialized() const {
  return true;
}

void GetUgcReq::Swap(GetUgcReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetUgcReq::InternalSwap(GetUgcReq* other) {
  using std::swap;
  swap(ugc_guid_, other->ugc_guid_);
  swap(ugc_record_usage_, other->ugc_record_usage_);
  swap(ugc_type_, other->ugc_type_);
  swap(is_require_brief_, other->is_require_brief_);
  swap(get_ugc_type_, other->get_ugc_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetUgcReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fugc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fugc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetUgcReq

// .proto.UgcType ugc_type = 8;
void GetUgcReq::clear_ugc_type() {
  ugc_type_ = 0;
}
::proto::UgcType GetUgcReq::ugc_type() const {
  // @@protoc_insertion_point(field_get:proto.GetUgcReq.ugc_type)
  return static_cast< ::proto::UgcType >(ugc_type_);
}
void GetUgcReq::set_ugc_type(::proto::UgcType value) {
  
  ugc_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GetUgcReq.ugc_type)
}

// uint64 ugc_guid = 5;
void GetUgcReq::clear_ugc_guid() {
  ugc_guid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GetUgcReq::ugc_guid() const {
  // @@protoc_insertion_point(field_get:proto.GetUgcReq.ugc_guid)
  return ugc_guid_;
}
void GetUgcReq::set_ugc_guid(::google::protobuf::uint64 value) {
  
  ugc_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GetUgcReq.ugc_guid)
}

// .proto.RecordUsage ugc_record_usage = 6;
void GetUgcReq::clear_ugc_record_usage() {
  ugc_record_usage_ = 0;
}
::proto::RecordUsage GetUgcReq::ugc_record_usage() const {
  // @@protoc_insertion_point(field_get:proto.GetUgcReq.ugc_record_usage)
  return static_cast< ::proto::RecordUsage >(ugc_record_usage_);
}
void GetUgcReq::set_ugc_record_usage(::proto::RecordUsage value) {
  
  ugc_record_usage_ = value;
  // @@protoc_insertion_point(field_set:proto.GetUgcReq.ugc_record_usage)
}

// bool is_require_brief = 11;
void GetUgcReq::clear_is_require_brief() {
  is_require_brief_ = false;
}
bool GetUgcReq::is_require_brief() const {
  // @@protoc_insertion_point(field_get:proto.GetUgcReq.is_require_brief)
  return is_require_brief_;
}
void GetUgcReq::set_is_require_brief(bool value) {
  
  is_require_brief_ = value;
  // @@protoc_insertion_point(field_set:proto.GetUgcReq.is_require_brief)
}

// .proto.GetUgcType get_ugc_type = 13;
void GetUgcReq::clear_get_ugc_type() {
  get_ugc_type_ = 0;
}
::proto::GetUgcType GetUgcReq::get_ugc_type() const {
  // @@protoc_insertion_point(field_get:proto.GetUgcReq.get_ugc_type)
  return static_cast< ::proto::GetUgcType >(get_ugc_type_);
}
void GetUgcReq::set_get_ugc_type(::proto::GetUgcType value) {
  
  get_ugc_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GetUgcReq.get_ugc_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetUgcRsp::kUgcGuidFieldNumber;
const int GetUgcRsp::kUgcTypeFieldNumber;
const int GetUgcRsp::kRetcodeFieldNumber;
const int GetUgcRsp::kUgcRecordUsageFieldNumber;
const int GetUgcRsp::kMusicRecordFieldNumber;
const int GetUgcRsp::kMusicBriefInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetUgcRsp::GetUgcRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fugc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GetUgcRsp)
}
GetUgcRsp::GetUgcRsp(const GetUgcRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ugc_record_usage_, &from.ugc_record_usage_,
    static_cast<size_t>(reinterpret_cast<char*>(&ugc_guid_) -
    reinterpret_cast<char*>(&ugc_record_usage_)) + sizeof(ugc_guid_));
  clear_has_record();
  switch (from.record_case()) {
    case kMusicRecord: {
      mutable_music_record()->::proto::UgcMusicRecord::MergeFrom(from.music_record());
      break;
    }
    case RECORD_NOT_SET: {
      break;
    }
  }
  clear_has_brief();
  switch (from.brief_case()) {
    case kMusicBriefInfo: {
      mutable_music_brief_info()->::proto::UgcMusicBriefInfo::MergeFrom(from.music_brief_info());
      break;
    }
    case BRIEF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.GetUgcRsp)
}

void GetUgcRsp::SharedCtor() {
  ::memset(&ugc_record_usage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ugc_guid_) -
      reinterpret_cast<char*>(&ugc_record_usage_)) + sizeof(ugc_guid_));
  clear_has_record();
  clear_has_brief();
  _cached_size_ = 0;
}

GetUgcRsp::~GetUgcRsp() {
  // @@protoc_insertion_point(destructor:proto.GetUgcRsp)
  SharedDtor();
}

void GetUgcRsp::SharedDtor() {
  if (has_record()) {
    clear_record();
  }
  if (has_brief()) {
    clear_brief();
  }
}

void GetUgcRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUgcRsp::descriptor() {
  protobuf_cmd_2fcmd_5fugc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fugc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetUgcRsp& GetUgcRsp::default_instance() {
  protobuf_cmd_2fcmd_5fugc_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetUgcRsp* GetUgcRsp::New(::google::protobuf::Arena* arena) const {
  GetUgcRsp* n = new GetUgcRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetUgcRsp::clear_record() {
// @@protoc_insertion_point(one_of_clear_start:proto.GetUgcRsp)
  switch (record_case()) {
    case kMusicRecord: {
      delete record_.music_record_;
      break;
    }
    case RECORD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RECORD_NOT_SET;
}

void GetUgcRsp::clear_brief() {
// @@protoc_insertion_point(one_of_clear_start:proto.GetUgcRsp)
  switch (brief_case()) {
    case kMusicBriefInfo: {
      delete brief_.music_brief_info_;
      break;
    }
    case BRIEF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = BRIEF_NOT_SET;
}


void GetUgcRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GetUgcRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ugc_record_usage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ugc_guid_) -
      reinterpret_cast<char*>(&ugc_record_usage_)) + sizeof(ugc_guid_));
  clear_record();
  clear_brief();
  _internal_metadata_.Clear();
}

bool GetUgcRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GetUgcRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.UgcMusicRecord music_record = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_music_record()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.UgcType ugc_type = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ugc_type(static_cast< ::proto::UgcType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.RecordUsage ugc_record_usage = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ugc_record_usage(static_cast< ::proto::RecordUsage >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 ugc_guid = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ugc_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.UgcMusicBriefInfo music_brief_info = 1819;
      case 1819: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 14554 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_music_brief_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GetUgcRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GetUgcRsp)
  return false;
#undef DO_
}

void GetUgcRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GetUgcRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 2;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->retcode(), output);
  }

  // .proto.UgcMusicRecord music_record = 4;
  if (has_music_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *record_.music_record_, output);
  }

  // .proto.UgcType ugc_type = 10;
  if (this->ugc_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->ugc_type(), output);
  }

  // .proto.RecordUsage ugc_record_usage = 14;
  if (this->ugc_record_usage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->ugc_record_usage(), output);
  }

  // uint64 ugc_guid = 15;
  if (this->ugc_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->ugc_guid(), output);
  }

  // .proto.UgcMusicBriefInfo music_brief_info = 1819;
  if (has_music_brief_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1819, *brief_.music_brief_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GetUgcRsp)
}

::google::protobuf::uint8* GetUgcRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GetUgcRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 2;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->retcode(), target);
  }

  // .proto.UgcMusicRecord music_record = 4;
  if (has_music_record()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *record_.music_record_, deterministic, target);
  }

  // .proto.UgcType ugc_type = 10;
  if (this->ugc_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->ugc_type(), target);
  }

  // .proto.RecordUsage ugc_record_usage = 14;
  if (this->ugc_record_usage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->ugc_record_usage(), target);
  }

  // uint64 ugc_guid = 15;
  if (this->ugc_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->ugc_guid(), target);
  }

  // .proto.UgcMusicBriefInfo music_brief_info = 1819;
  if (has_music_brief_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1819, *brief_.music_brief_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GetUgcRsp)
  return target;
}

size_t GetUgcRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GetUgcRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.RecordUsage ugc_record_usage = 14;
  if (this->ugc_record_usage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ugc_record_usage());
  }

  // int32 retcode = 2;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // .proto.UgcType ugc_type = 10;
  if (this->ugc_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ugc_type());
  }

  // uint64 ugc_guid = 15;
  if (this->ugc_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ugc_guid());
  }

  switch (record_case()) {
    // .proto.UgcMusicRecord music_record = 4;
    case kMusicRecord: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *record_.music_record_);
      break;
    }
    case RECORD_NOT_SET: {
      break;
    }
  }
  switch (brief_case()) {
    // .proto.UgcMusicBriefInfo music_brief_info = 1819;
    case kMusicBriefInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *brief_.music_brief_info_);
      break;
    }
    case BRIEF_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUgcRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GetUgcRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetUgcRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetUgcRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GetUgcRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GetUgcRsp)
    MergeFrom(*source);
  }
}

void GetUgcRsp::MergeFrom(const GetUgcRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GetUgcRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ugc_record_usage() != 0) {
    set_ugc_record_usage(from.ugc_record_usage());
  }
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.ugc_type() != 0) {
    set_ugc_type(from.ugc_type());
  }
  if (from.ugc_guid() != 0) {
    set_ugc_guid(from.ugc_guid());
  }
  switch (from.record_case()) {
    case kMusicRecord: {
      mutable_music_record()->::proto::UgcMusicRecord::MergeFrom(from.music_record());
      break;
    }
    case RECORD_NOT_SET: {
      break;
    }
  }
  switch (from.brief_case()) {
    case kMusicBriefInfo: {
      mutable_music_brief_info()->::proto::UgcMusicBriefInfo::MergeFrom(from.music_brief_info());
      break;
    }
    case BRIEF_NOT_SET: {
      break;
    }
  }
}

void GetUgcRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GetUgcRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUgcRsp::CopyFrom(const GetUgcRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GetUgcRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUgcRsp::IsInitialized() const {
  return true;
}

void GetUgcRsp::Swap(GetUgcRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetUgcRsp::InternalSwap(GetUgcRsp* other) {
  using std::swap;
  swap(ugc_record_usage_, other->ugc_record_usage_);
  swap(retcode_, other->retcode_);
  swap(ugc_type_, other->ugc_type_);
  swap(ugc_guid_, other->ugc_guid_);
  swap(record_, other->record_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(brief_, other->brief_);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetUgcRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fugc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fugc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetUgcRsp

// uint64 ugc_guid = 15;
void GetUgcRsp::clear_ugc_guid() {
  ugc_guid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GetUgcRsp::ugc_guid() const {
  // @@protoc_insertion_point(field_get:proto.GetUgcRsp.ugc_guid)
  return ugc_guid_;
}
void GetUgcRsp::set_ugc_guid(::google::protobuf::uint64 value) {
  
  ugc_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GetUgcRsp.ugc_guid)
}

// .proto.UgcType ugc_type = 10;
void GetUgcRsp::clear_ugc_type() {
  ugc_type_ = 0;
}
::proto::UgcType GetUgcRsp::ugc_type() const {
  // @@protoc_insertion_point(field_get:proto.GetUgcRsp.ugc_type)
  return static_cast< ::proto::UgcType >(ugc_type_);
}
void GetUgcRsp::set_ugc_type(::proto::UgcType value) {
  
  ugc_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GetUgcRsp.ugc_type)
}

// int32 retcode = 2;
void GetUgcRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 GetUgcRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GetUgcRsp.retcode)
  return retcode_;
}
void GetUgcRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GetUgcRsp.retcode)
}

// .proto.RecordUsage ugc_record_usage = 14;
void GetUgcRsp::clear_ugc_record_usage() {
  ugc_record_usage_ = 0;
}
::proto::RecordUsage GetUgcRsp::ugc_record_usage() const {
  // @@protoc_insertion_point(field_get:proto.GetUgcRsp.ugc_record_usage)
  return static_cast< ::proto::RecordUsage >(ugc_record_usage_);
}
void GetUgcRsp::set_ugc_record_usage(::proto::RecordUsage value) {
  
  ugc_record_usage_ = value;
  // @@protoc_insertion_point(field_set:proto.GetUgcRsp.ugc_record_usage)
}

// .proto.UgcMusicRecord music_record = 4;
bool GetUgcRsp::has_music_record() const {
  return record_case() == kMusicRecord;
}
void GetUgcRsp::set_has_music_record() {
  _oneof_case_[0] = kMusicRecord;
}
void GetUgcRsp::clear_music_record() {
  if (has_music_record()) {
    delete record_.music_record_;
    clear_has_record();
  }
}
 const ::proto::UgcMusicRecord& GetUgcRsp::music_record() const {
  // @@protoc_insertion_point(field_get:proto.GetUgcRsp.music_record)
  return has_music_record()
      ? *record_.music_record_
      : ::proto::UgcMusicRecord::default_instance();
}
::proto::UgcMusicRecord* GetUgcRsp::mutable_music_record() {
  if (!has_music_record()) {
    clear_record();
    set_has_music_record();
    record_.music_record_ = new ::proto::UgcMusicRecord;
  }
  // @@protoc_insertion_point(field_mutable:proto.GetUgcRsp.music_record)
  return record_.music_record_;
}
::proto::UgcMusicRecord* GetUgcRsp::release_music_record() {
  // @@protoc_insertion_point(field_release:proto.GetUgcRsp.music_record)
  if (has_music_record()) {
    clear_has_record();
    ::proto::UgcMusicRecord* temp = record_.music_record_;
    record_.music_record_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GetUgcRsp::set_allocated_music_record(::proto::UgcMusicRecord* music_record) {
  clear_record();
  if (music_record) {
    set_has_music_record();
    record_.music_record_ = music_record;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GetUgcRsp.music_record)
}

// .proto.UgcMusicBriefInfo music_brief_info = 1819;
bool GetUgcRsp::has_music_brief_info() const {
  return brief_case() == kMusicBriefInfo;
}
void GetUgcRsp::set_has_music_brief_info() {
  _oneof_case_[1] = kMusicBriefInfo;
}
void GetUgcRsp::clear_music_brief_info() {
  if (has_music_brief_info()) {
    delete brief_.music_brief_info_;
    clear_has_brief();
  }
}
 const ::proto::UgcMusicBriefInfo& GetUgcRsp::music_brief_info() const {
  // @@protoc_insertion_point(field_get:proto.GetUgcRsp.music_brief_info)
  return has_music_brief_info()
      ? *brief_.music_brief_info_
      : ::proto::UgcMusicBriefInfo::default_instance();
}
::proto::UgcMusicBriefInfo* GetUgcRsp::mutable_music_brief_info() {
  if (!has_music_brief_info()) {
    clear_brief();
    set_has_music_brief_info();
    brief_.music_brief_info_ = new ::proto::UgcMusicBriefInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.GetUgcRsp.music_brief_info)
  return brief_.music_brief_info_;
}
::proto::UgcMusicBriefInfo* GetUgcRsp::release_music_brief_info() {
  // @@protoc_insertion_point(field_release:proto.GetUgcRsp.music_brief_info)
  if (has_music_brief_info()) {
    clear_has_brief();
    ::proto::UgcMusicBriefInfo* temp = brief_.music_brief_info_;
    brief_.music_brief_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GetUgcRsp::set_allocated_music_brief_info(::proto::UgcMusicBriefInfo* music_brief_info) {
  clear_brief();
  if (music_brief_info) {
    set_has_music_brief_info();
    brief_.music_brief_info_ = music_brief_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GetUgcRsp.music_brief_info)
}

bool GetUgcRsp::has_record() const {
  return record_case() != RECORD_NOT_SET;
}
void GetUgcRsp::clear_has_record() {
  _oneof_case_[0] = RECORD_NOT_SET;
}
bool GetUgcRsp::has_brief() const {
  return brief_case() != BRIEF_NOT_SET;
}
void GetUgcRsp::clear_has_brief() {
  _oneof_case_[1] = BRIEF_NOT_SET;
}
GetUgcRsp::RecordCase GetUgcRsp::record_case() const {
  return GetUgcRsp::RecordCase(_oneof_case_[0]);
}
GetUgcRsp::BriefCase GetUgcRsp::brief_case() const {
  return GetUgcRsp::BriefCase(_oneof_case_[1]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetUgcBriefInfoReq::kUgcGuidFieldNumber;
const int GetUgcBriefInfoReq::kUgcTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetUgcBriefInfoReq::GetUgcBriefInfoReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fugc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GetUgcBriefInfoReq)
}
GetUgcBriefInfoReq::GetUgcBriefInfoReq(const GetUgcBriefInfoReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ugc_type_, &from.ugc_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&ugc_guid_) -
    reinterpret_cast<char*>(&ugc_type_)) + sizeof(ugc_guid_));
  // @@protoc_insertion_point(copy_constructor:proto.GetUgcBriefInfoReq)
}

void GetUgcBriefInfoReq::SharedCtor() {
  ::memset(&ugc_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ugc_guid_) -
      reinterpret_cast<char*>(&ugc_type_)) + sizeof(ugc_guid_));
  _cached_size_ = 0;
}

GetUgcBriefInfoReq::~GetUgcBriefInfoReq() {
  // @@protoc_insertion_point(destructor:proto.GetUgcBriefInfoReq)
  SharedDtor();
}

void GetUgcBriefInfoReq::SharedDtor() {
}

void GetUgcBriefInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUgcBriefInfoReq::descriptor() {
  protobuf_cmd_2fcmd_5fugc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fugc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetUgcBriefInfoReq& GetUgcBriefInfoReq::default_instance() {
  protobuf_cmd_2fcmd_5fugc_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetUgcBriefInfoReq* GetUgcBriefInfoReq::New(::google::protobuf::Arena* arena) const {
  GetUgcBriefInfoReq* n = new GetUgcBriefInfoReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetUgcBriefInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GetUgcBriefInfoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ugc_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ugc_guid_) -
      reinterpret_cast<char*>(&ugc_type_)) + sizeof(ugc_guid_));
  _internal_metadata_.Clear();
}

bool GetUgcBriefInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GetUgcBriefInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 ugc_guid = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ugc_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.UgcType ugc_type = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ugc_type(static_cast< ::proto::UgcType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GetUgcBriefInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GetUgcBriefInfoReq)
  return false;
#undef DO_
}

void GetUgcBriefInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GetUgcBriefInfoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 ugc_guid = 7;
  if (this->ugc_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->ugc_guid(), output);
  }

  // .proto.UgcType ugc_type = 10;
  if (this->ugc_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->ugc_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GetUgcBriefInfoReq)
}

::google::protobuf::uint8* GetUgcBriefInfoReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GetUgcBriefInfoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 ugc_guid = 7;
  if (this->ugc_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->ugc_guid(), target);
  }

  // .proto.UgcType ugc_type = 10;
  if (this->ugc_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->ugc_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GetUgcBriefInfoReq)
  return target;
}

size_t GetUgcBriefInfoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GetUgcBriefInfoReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.UgcType ugc_type = 10;
  if (this->ugc_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ugc_type());
  }

  // uint64 ugc_guid = 7;
  if (this->ugc_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ugc_guid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUgcBriefInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GetUgcBriefInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetUgcBriefInfoReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetUgcBriefInfoReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GetUgcBriefInfoReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GetUgcBriefInfoReq)
    MergeFrom(*source);
  }
}

void GetUgcBriefInfoReq::MergeFrom(const GetUgcBriefInfoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GetUgcBriefInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ugc_type() != 0) {
    set_ugc_type(from.ugc_type());
  }
  if (from.ugc_guid() != 0) {
    set_ugc_guid(from.ugc_guid());
  }
}

void GetUgcBriefInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GetUgcBriefInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUgcBriefInfoReq::CopyFrom(const GetUgcBriefInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GetUgcBriefInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUgcBriefInfoReq::IsInitialized() const {
  return true;
}

void GetUgcBriefInfoReq::Swap(GetUgcBriefInfoReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetUgcBriefInfoReq::InternalSwap(GetUgcBriefInfoReq* other) {
  using std::swap;
  swap(ugc_type_, other->ugc_type_);
  swap(ugc_guid_, other->ugc_guid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetUgcBriefInfoReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fugc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fugc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetUgcBriefInfoReq

// uint64 ugc_guid = 7;
void GetUgcBriefInfoReq::clear_ugc_guid() {
  ugc_guid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GetUgcBriefInfoReq::ugc_guid() const {
  // @@protoc_insertion_point(field_get:proto.GetUgcBriefInfoReq.ugc_guid)
  return ugc_guid_;
}
void GetUgcBriefInfoReq::set_ugc_guid(::google::protobuf::uint64 value) {
  
  ugc_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GetUgcBriefInfoReq.ugc_guid)
}

// .proto.UgcType ugc_type = 10;
void GetUgcBriefInfoReq::clear_ugc_type() {
  ugc_type_ = 0;
}
::proto::UgcType GetUgcBriefInfoReq::ugc_type() const {
  // @@protoc_insertion_point(field_get:proto.GetUgcBriefInfoReq.ugc_type)
  return static_cast< ::proto::UgcType >(ugc_type_);
}
void GetUgcBriefInfoReq::set_ugc_type(::proto::UgcType value) {
  
  ugc_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GetUgcBriefInfoReq.ugc_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetUgcBriefInfoRsp::kUgcGuidFieldNumber;
const int GetUgcBriefInfoRsp::kUgcTypeFieldNumber;
const int GetUgcBriefInfoRsp::kRetcodeFieldNumber;
const int GetUgcBriefInfoRsp::kMusicBriefInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetUgcBriefInfoRsp::GetUgcBriefInfoRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fugc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GetUgcBriefInfoRsp)
}
GetUgcBriefInfoRsp::GetUgcBriefInfoRsp(const GetUgcBriefInfoRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ugc_guid_, &from.ugc_guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&ugc_type_) -
    reinterpret_cast<char*>(&ugc_guid_)) + sizeof(ugc_type_));
  clear_has_brief();
  switch (from.brief_case()) {
    case kMusicBriefInfo: {
      mutable_music_brief_info()->::proto::UgcMusicBriefInfo::MergeFrom(from.music_brief_info());
      break;
    }
    case BRIEF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.GetUgcBriefInfoRsp)
}

void GetUgcBriefInfoRsp::SharedCtor() {
  ::memset(&ugc_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ugc_type_) -
      reinterpret_cast<char*>(&ugc_guid_)) + sizeof(ugc_type_));
  clear_has_brief();
  _cached_size_ = 0;
}

GetUgcBriefInfoRsp::~GetUgcBriefInfoRsp() {
  // @@protoc_insertion_point(destructor:proto.GetUgcBriefInfoRsp)
  SharedDtor();
}

void GetUgcBriefInfoRsp::SharedDtor() {
  if (has_brief()) {
    clear_brief();
  }
}

void GetUgcBriefInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUgcBriefInfoRsp::descriptor() {
  protobuf_cmd_2fcmd_5fugc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fugc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetUgcBriefInfoRsp& GetUgcBriefInfoRsp::default_instance() {
  protobuf_cmd_2fcmd_5fugc_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetUgcBriefInfoRsp* GetUgcBriefInfoRsp::New(::google::protobuf::Arena* arena) const {
  GetUgcBriefInfoRsp* n = new GetUgcBriefInfoRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetUgcBriefInfoRsp::clear_brief() {
// @@protoc_insertion_point(one_of_clear_start:proto.GetUgcBriefInfoRsp)
  switch (brief_case()) {
    case kMusicBriefInfo: {
      delete brief_.music_brief_info_;
      break;
    }
    case BRIEF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = BRIEF_NOT_SET;
}


void GetUgcBriefInfoRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GetUgcBriefInfoRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ugc_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ugc_type_) -
      reinterpret_cast<char*>(&ugc_guid_)) + sizeof(ugc_type_));
  clear_brief();
  _internal_metadata_.Clear();
}

bool GetUgcBriefInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GetUgcBriefInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.UgcMusicBriefInfo music_brief_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_music_brief_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 ugc_guid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ugc_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 retcode = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.UgcType ugc_type = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ugc_type(static_cast< ::proto::UgcType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GetUgcBriefInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GetUgcBriefInfoRsp)
  return false;
#undef DO_
}

void GetUgcBriefInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GetUgcBriefInfoRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.UgcMusicBriefInfo music_brief_info = 2;
  if (has_music_brief_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *brief_.music_brief_info_, output);
  }

  // uint64 ugc_guid = 3;
  if (this->ugc_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->ugc_guid(), output);
  }

  // int32 retcode = 4;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->retcode(), output);
  }

  // .proto.UgcType ugc_type = 11;
  if (this->ugc_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->ugc_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GetUgcBriefInfoRsp)
}

::google::protobuf::uint8* GetUgcBriefInfoRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GetUgcBriefInfoRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.UgcMusicBriefInfo music_brief_info = 2;
  if (has_music_brief_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *brief_.music_brief_info_, deterministic, target);
  }

  // uint64 ugc_guid = 3;
  if (this->ugc_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->ugc_guid(), target);
  }

  // int32 retcode = 4;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->retcode(), target);
  }

  // .proto.UgcType ugc_type = 11;
  if (this->ugc_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->ugc_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GetUgcBriefInfoRsp)
  return target;
}

size_t GetUgcBriefInfoRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GetUgcBriefInfoRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 ugc_guid = 3;
  if (this->ugc_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ugc_guid());
  }

  // int32 retcode = 4;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // .proto.UgcType ugc_type = 11;
  if (this->ugc_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ugc_type());
  }

  switch (brief_case()) {
    // .proto.UgcMusicBriefInfo music_brief_info = 2;
    case kMusicBriefInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *brief_.music_brief_info_);
      break;
    }
    case BRIEF_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUgcBriefInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GetUgcBriefInfoRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetUgcBriefInfoRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetUgcBriefInfoRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GetUgcBriefInfoRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GetUgcBriefInfoRsp)
    MergeFrom(*source);
  }
}

void GetUgcBriefInfoRsp::MergeFrom(const GetUgcBriefInfoRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GetUgcBriefInfoRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ugc_guid() != 0) {
    set_ugc_guid(from.ugc_guid());
  }
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.ugc_type() != 0) {
    set_ugc_type(from.ugc_type());
  }
  switch (from.brief_case()) {
    case kMusicBriefInfo: {
      mutable_music_brief_info()->::proto::UgcMusicBriefInfo::MergeFrom(from.music_brief_info());
      break;
    }
    case BRIEF_NOT_SET: {
      break;
    }
  }
}

void GetUgcBriefInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GetUgcBriefInfoRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUgcBriefInfoRsp::CopyFrom(const GetUgcBriefInfoRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GetUgcBriefInfoRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUgcBriefInfoRsp::IsInitialized() const {
  return true;
}

void GetUgcBriefInfoRsp::Swap(GetUgcBriefInfoRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetUgcBriefInfoRsp::InternalSwap(GetUgcBriefInfoRsp* other) {
  using std::swap;
  swap(ugc_guid_, other->ugc_guid_);
  swap(retcode_, other->retcode_);
  swap(ugc_type_, other->ugc_type_);
  swap(brief_, other->brief_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetUgcBriefInfoRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fugc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fugc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetUgcBriefInfoRsp

// uint64 ugc_guid = 3;
void GetUgcBriefInfoRsp::clear_ugc_guid() {
  ugc_guid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GetUgcBriefInfoRsp::ugc_guid() const {
  // @@protoc_insertion_point(field_get:proto.GetUgcBriefInfoRsp.ugc_guid)
  return ugc_guid_;
}
void GetUgcBriefInfoRsp::set_ugc_guid(::google::protobuf::uint64 value) {
  
  ugc_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GetUgcBriefInfoRsp.ugc_guid)
}

// .proto.UgcType ugc_type = 11;
void GetUgcBriefInfoRsp::clear_ugc_type() {
  ugc_type_ = 0;
}
::proto::UgcType GetUgcBriefInfoRsp::ugc_type() const {
  // @@protoc_insertion_point(field_get:proto.GetUgcBriefInfoRsp.ugc_type)
  return static_cast< ::proto::UgcType >(ugc_type_);
}
void GetUgcBriefInfoRsp::set_ugc_type(::proto::UgcType value) {
  
  ugc_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GetUgcBriefInfoRsp.ugc_type)
}

// int32 retcode = 4;
void GetUgcBriefInfoRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 GetUgcBriefInfoRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GetUgcBriefInfoRsp.retcode)
  return retcode_;
}
void GetUgcBriefInfoRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GetUgcBriefInfoRsp.retcode)
}

// .proto.UgcMusicBriefInfo music_brief_info = 2;
bool GetUgcBriefInfoRsp::has_music_brief_info() const {
  return brief_case() == kMusicBriefInfo;
}
void GetUgcBriefInfoRsp::set_has_music_brief_info() {
  _oneof_case_[0] = kMusicBriefInfo;
}
void GetUgcBriefInfoRsp::clear_music_brief_info() {
  if (has_music_brief_info()) {
    delete brief_.music_brief_info_;
    clear_has_brief();
  }
}
 const ::proto::UgcMusicBriefInfo& GetUgcBriefInfoRsp::music_brief_info() const {
  // @@protoc_insertion_point(field_get:proto.GetUgcBriefInfoRsp.music_brief_info)
  return has_music_brief_info()
      ? *brief_.music_brief_info_
      : ::proto::UgcMusicBriefInfo::default_instance();
}
::proto::UgcMusicBriefInfo* GetUgcBriefInfoRsp::mutable_music_brief_info() {
  if (!has_music_brief_info()) {
    clear_brief();
    set_has_music_brief_info();
    brief_.music_brief_info_ = new ::proto::UgcMusicBriefInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.GetUgcBriefInfoRsp.music_brief_info)
  return brief_.music_brief_info_;
}
::proto::UgcMusicBriefInfo* GetUgcBriefInfoRsp::release_music_brief_info() {
  // @@protoc_insertion_point(field_release:proto.GetUgcBriefInfoRsp.music_brief_info)
  if (has_music_brief_info()) {
    clear_has_brief();
    ::proto::UgcMusicBriefInfo* temp = brief_.music_brief_info_;
    brief_.music_brief_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GetUgcBriefInfoRsp::set_allocated_music_brief_info(::proto::UgcMusicBriefInfo* music_brief_info) {
  clear_brief();
  if (music_brief_info) {
    set_has_music_brief_info();
    brief_.music_brief_info_ = music_brief_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GetUgcBriefInfoRsp.music_brief_info)
}

bool GetUgcBriefInfoRsp::has_brief() const {
  return brief_case() != BRIEF_NOT_SET;
}
void GetUgcBriefInfoRsp::clear_has_brief() {
  _oneof_case_[0] = BRIEF_NOT_SET;
}
GetUgcBriefInfoRsp::BriefCase GetUgcBriefInfoRsp::brief_case() const {
  return GetUgcBriefInfoRsp::BriefCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SaveUgcReq::kUgcTypeFieldNumber;
const int SaveUgcReq::kMusicRecordFieldNumber;
const int SaveUgcReq::kMusicBriefInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SaveUgcReq::SaveUgcReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fugc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SaveUgcReq)
}
SaveUgcReq::SaveUgcReq(const SaveUgcReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ugc_type_ = from.ugc_type_;
  clear_has_record();
  switch (from.record_case()) {
    case kMusicRecord: {
      mutable_music_record()->::proto::UgcMusicRecord::MergeFrom(from.music_record());
      break;
    }
    case RECORD_NOT_SET: {
      break;
    }
  }
  clear_has_brief();
  switch (from.brief_case()) {
    case kMusicBriefInfo: {
      mutable_music_brief_info()->::proto::UgcMusicBriefInfo::MergeFrom(from.music_brief_info());
      break;
    }
    case BRIEF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.SaveUgcReq)
}

void SaveUgcReq::SharedCtor() {
  ugc_type_ = 0;
  clear_has_record();
  clear_has_brief();
  _cached_size_ = 0;
}

SaveUgcReq::~SaveUgcReq() {
  // @@protoc_insertion_point(destructor:proto.SaveUgcReq)
  SharedDtor();
}

void SaveUgcReq::SharedDtor() {
  if (has_record()) {
    clear_record();
  }
  if (has_brief()) {
    clear_brief();
  }
}

void SaveUgcReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SaveUgcReq::descriptor() {
  protobuf_cmd_2fcmd_5fugc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fugc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SaveUgcReq& SaveUgcReq::default_instance() {
  protobuf_cmd_2fcmd_5fugc_2eproto::InitDefaults();
  return *internal_default_instance();
}

SaveUgcReq* SaveUgcReq::New(::google::protobuf::Arena* arena) const {
  SaveUgcReq* n = new SaveUgcReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SaveUgcReq::clear_record() {
// @@protoc_insertion_point(one_of_clear_start:proto.SaveUgcReq)
  switch (record_case()) {
    case kMusicRecord: {
      delete record_.music_record_;
      break;
    }
    case RECORD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RECORD_NOT_SET;
}

void SaveUgcReq::clear_brief() {
// @@protoc_insertion_point(one_of_clear_start:proto.SaveUgcReq)
  switch (brief_case()) {
    case kMusicBriefInfo: {
      delete brief_.music_brief_info_;
      break;
    }
    case BRIEF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = BRIEF_NOT_SET;
}


void SaveUgcReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SaveUgcReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ugc_type_ = 0;
  clear_record();
  clear_brief();
  _internal_metadata_.Clear();
}

bool SaveUgcReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SaveUgcReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.UgcMusicRecord music_record = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_music_record()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.UgcType ugc_type = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ugc_type(static_cast< ::proto::UgcType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.UgcMusicBriefInfo music_brief_info = 1488;
      case 1488: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 11906 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_music_brief_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SaveUgcReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SaveUgcReq)
  return false;
#undef DO_
}

void SaveUgcReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SaveUgcReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.UgcMusicRecord music_record = 2;
  if (has_music_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *record_.music_record_, output);
  }

  // .proto.UgcType ugc_type = 11;
  if (this->ugc_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->ugc_type(), output);
  }

  // .proto.UgcMusicBriefInfo music_brief_info = 1488;
  if (has_music_brief_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1488, *brief_.music_brief_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SaveUgcReq)
}

::google::protobuf::uint8* SaveUgcReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SaveUgcReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.UgcMusicRecord music_record = 2;
  if (has_music_record()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *record_.music_record_, deterministic, target);
  }

  // .proto.UgcType ugc_type = 11;
  if (this->ugc_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->ugc_type(), target);
  }

  // .proto.UgcMusicBriefInfo music_brief_info = 1488;
  if (has_music_brief_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1488, *brief_.music_brief_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SaveUgcReq)
  return target;
}

size_t SaveUgcReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SaveUgcReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.UgcType ugc_type = 11;
  if (this->ugc_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ugc_type());
  }

  switch (record_case()) {
    // .proto.UgcMusicRecord music_record = 2;
    case kMusicRecord: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *record_.music_record_);
      break;
    }
    case RECORD_NOT_SET: {
      break;
    }
  }
  switch (brief_case()) {
    // .proto.UgcMusicBriefInfo music_brief_info = 1488;
    case kMusicBriefInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *brief_.music_brief_info_);
      break;
    }
    case BRIEF_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaveUgcReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SaveUgcReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SaveUgcReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SaveUgcReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SaveUgcReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SaveUgcReq)
    MergeFrom(*source);
  }
}

void SaveUgcReq::MergeFrom(const SaveUgcReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SaveUgcReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ugc_type() != 0) {
    set_ugc_type(from.ugc_type());
  }
  switch (from.record_case()) {
    case kMusicRecord: {
      mutable_music_record()->::proto::UgcMusicRecord::MergeFrom(from.music_record());
      break;
    }
    case RECORD_NOT_SET: {
      break;
    }
  }
  switch (from.brief_case()) {
    case kMusicBriefInfo: {
      mutable_music_brief_info()->::proto::UgcMusicBriefInfo::MergeFrom(from.music_brief_info());
      break;
    }
    case BRIEF_NOT_SET: {
      break;
    }
  }
}

void SaveUgcReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SaveUgcReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveUgcReq::CopyFrom(const SaveUgcReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SaveUgcReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveUgcReq::IsInitialized() const {
  return true;
}

void SaveUgcReq::Swap(SaveUgcReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SaveUgcReq::InternalSwap(SaveUgcReq* other) {
  using std::swap;
  swap(ugc_type_, other->ugc_type_);
  swap(record_, other->record_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(brief_, other->brief_);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SaveUgcReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fugc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fugc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SaveUgcReq

// .proto.UgcType ugc_type = 11;
void SaveUgcReq::clear_ugc_type() {
  ugc_type_ = 0;
}
::proto::UgcType SaveUgcReq::ugc_type() const {
  // @@protoc_insertion_point(field_get:proto.SaveUgcReq.ugc_type)
  return static_cast< ::proto::UgcType >(ugc_type_);
}
void SaveUgcReq::set_ugc_type(::proto::UgcType value) {
  
  ugc_type_ = value;
  // @@protoc_insertion_point(field_set:proto.SaveUgcReq.ugc_type)
}

// .proto.UgcMusicRecord music_record = 2;
bool SaveUgcReq::has_music_record() const {
  return record_case() == kMusicRecord;
}
void SaveUgcReq::set_has_music_record() {
  _oneof_case_[0] = kMusicRecord;
}
void SaveUgcReq::clear_music_record() {
  if (has_music_record()) {
    delete record_.music_record_;
    clear_has_record();
  }
}
 const ::proto::UgcMusicRecord& SaveUgcReq::music_record() const {
  // @@protoc_insertion_point(field_get:proto.SaveUgcReq.music_record)
  return has_music_record()
      ? *record_.music_record_
      : ::proto::UgcMusicRecord::default_instance();
}
::proto::UgcMusicRecord* SaveUgcReq::mutable_music_record() {
  if (!has_music_record()) {
    clear_record();
    set_has_music_record();
    record_.music_record_ = new ::proto::UgcMusicRecord;
  }
  // @@protoc_insertion_point(field_mutable:proto.SaveUgcReq.music_record)
  return record_.music_record_;
}
::proto::UgcMusicRecord* SaveUgcReq::release_music_record() {
  // @@protoc_insertion_point(field_release:proto.SaveUgcReq.music_record)
  if (has_music_record()) {
    clear_has_record();
    ::proto::UgcMusicRecord* temp = record_.music_record_;
    record_.music_record_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SaveUgcReq::set_allocated_music_record(::proto::UgcMusicRecord* music_record) {
  clear_record();
  if (music_record) {
    set_has_music_record();
    record_.music_record_ = music_record;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SaveUgcReq.music_record)
}

// .proto.UgcMusicBriefInfo music_brief_info = 1488;
bool SaveUgcReq::has_music_brief_info() const {
  return brief_case() == kMusicBriefInfo;
}
void SaveUgcReq::set_has_music_brief_info() {
  _oneof_case_[1] = kMusicBriefInfo;
}
void SaveUgcReq::clear_music_brief_info() {
  if (has_music_brief_info()) {
    delete brief_.music_brief_info_;
    clear_has_brief();
  }
}
 const ::proto::UgcMusicBriefInfo& SaveUgcReq::music_brief_info() const {
  // @@protoc_insertion_point(field_get:proto.SaveUgcReq.music_brief_info)
  return has_music_brief_info()
      ? *brief_.music_brief_info_
      : ::proto::UgcMusicBriefInfo::default_instance();
}
::proto::UgcMusicBriefInfo* SaveUgcReq::mutable_music_brief_info() {
  if (!has_music_brief_info()) {
    clear_brief();
    set_has_music_brief_info();
    brief_.music_brief_info_ = new ::proto::UgcMusicBriefInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SaveUgcReq.music_brief_info)
  return brief_.music_brief_info_;
}
::proto::UgcMusicBriefInfo* SaveUgcReq::release_music_brief_info() {
  // @@protoc_insertion_point(field_release:proto.SaveUgcReq.music_brief_info)
  if (has_music_brief_info()) {
    clear_has_brief();
    ::proto::UgcMusicBriefInfo* temp = brief_.music_brief_info_;
    brief_.music_brief_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SaveUgcReq::set_allocated_music_brief_info(::proto::UgcMusicBriefInfo* music_brief_info) {
  clear_brief();
  if (music_brief_info) {
    set_has_music_brief_info();
    brief_.music_brief_info_ = music_brief_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SaveUgcReq.music_brief_info)
}

bool SaveUgcReq::has_record() const {
  return record_case() != RECORD_NOT_SET;
}
void SaveUgcReq::clear_has_record() {
  _oneof_case_[0] = RECORD_NOT_SET;
}
bool SaveUgcReq::has_brief() const {
  return brief_case() != BRIEF_NOT_SET;
}
void SaveUgcReq::clear_has_brief() {
  _oneof_case_[1] = BRIEF_NOT_SET;
}
SaveUgcReq::RecordCase SaveUgcReq::record_case() const {
  return SaveUgcReq::RecordCase(_oneof_case_[0]);
}
SaveUgcReq::BriefCase SaveUgcReq::brief_case() const {
  return SaveUgcReq::BriefCase(_oneof_case_[1]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SaveUgcRsp::kRetcodeFieldNumber;
const int SaveUgcRsp::kUgcGuidFieldNumber;
const int SaveUgcRsp::kUgcTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SaveUgcRsp::SaveUgcRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fugc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SaveUgcRsp)
}
SaveUgcRsp::SaveUgcRsp(const SaveUgcRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ugc_guid_, &from.ugc_guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&retcode_) -
    reinterpret_cast<char*>(&ugc_guid_)) + sizeof(retcode_));
  // @@protoc_insertion_point(copy_constructor:proto.SaveUgcRsp)
}

void SaveUgcRsp::SharedCtor() {
  ::memset(&ugc_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&ugc_guid_)) + sizeof(retcode_));
  _cached_size_ = 0;
}

SaveUgcRsp::~SaveUgcRsp() {
  // @@protoc_insertion_point(destructor:proto.SaveUgcRsp)
  SharedDtor();
}

void SaveUgcRsp::SharedDtor() {
}

void SaveUgcRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SaveUgcRsp::descriptor() {
  protobuf_cmd_2fcmd_5fugc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fugc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SaveUgcRsp& SaveUgcRsp::default_instance() {
  protobuf_cmd_2fcmd_5fugc_2eproto::InitDefaults();
  return *internal_default_instance();
}

SaveUgcRsp* SaveUgcRsp::New(::google::protobuf::Arena* arena) const {
  SaveUgcRsp* n = new SaveUgcRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SaveUgcRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SaveUgcRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ugc_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&ugc_guid_)) + sizeof(retcode_));
  _internal_metadata_.Clear();
}

bool SaveUgcRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SaveUgcRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.UgcType ugc_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ugc_type(static_cast< ::proto::UgcType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 ugc_guid = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ugc_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 retcode = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SaveUgcRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SaveUgcRsp)
  return false;
#undef DO_
}

void SaveUgcRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SaveUgcRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.UgcType ugc_type = 1;
  if (this->ugc_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ugc_type(), output);
  }

  // uint64 ugc_guid = 8;
  if (this->ugc_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->ugc_guid(), output);
  }

  // int32 retcode = 15;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->retcode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SaveUgcRsp)
}

::google::protobuf::uint8* SaveUgcRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SaveUgcRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.UgcType ugc_type = 1;
  if (this->ugc_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ugc_type(), target);
  }

  // uint64 ugc_guid = 8;
  if (this->ugc_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->ugc_guid(), target);
  }

  // int32 retcode = 15;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->retcode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SaveUgcRsp)
  return target;
}

size_t SaveUgcRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SaveUgcRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 ugc_guid = 8;
  if (this->ugc_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ugc_guid());
  }

  // .proto.UgcType ugc_type = 1;
  if (this->ugc_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ugc_type());
  }

  // int32 retcode = 15;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaveUgcRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SaveUgcRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SaveUgcRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SaveUgcRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SaveUgcRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SaveUgcRsp)
    MergeFrom(*source);
  }
}

void SaveUgcRsp::MergeFrom(const SaveUgcRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SaveUgcRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ugc_guid() != 0) {
    set_ugc_guid(from.ugc_guid());
  }
  if (from.ugc_type() != 0) {
    set_ugc_type(from.ugc_type());
  }
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void SaveUgcRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SaveUgcRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveUgcRsp::CopyFrom(const SaveUgcRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SaveUgcRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveUgcRsp::IsInitialized() const {
  return true;
}

void SaveUgcRsp::Swap(SaveUgcRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SaveUgcRsp::InternalSwap(SaveUgcRsp* other) {
  using std::swap;
  swap(ugc_guid_, other->ugc_guid_);
  swap(ugc_type_, other->ugc_type_);
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SaveUgcRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fugc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fugc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SaveUgcRsp

// int32 retcode = 15;
void SaveUgcRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 SaveUgcRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.SaveUgcRsp.retcode)
  return retcode_;
}
void SaveUgcRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.SaveUgcRsp.retcode)
}

// uint64 ugc_guid = 8;
void SaveUgcRsp::clear_ugc_guid() {
  ugc_guid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SaveUgcRsp::ugc_guid() const {
  // @@protoc_insertion_point(field_get:proto.SaveUgcRsp.ugc_guid)
  return ugc_guid_;
}
void SaveUgcRsp::set_ugc_guid(::google::protobuf::uint64 value) {
  
  ugc_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.SaveUgcRsp.ugc_guid)
}

// .proto.UgcType ugc_type = 1;
void SaveUgcRsp::clear_ugc_type() {
  ugc_type_ = 0;
}
::proto::UgcType SaveUgcRsp::ugc_type() const {
  // @@protoc_insertion_point(field_get:proto.SaveUgcRsp.ugc_type)
  return static_cast< ::proto::UgcType >(ugc_type_);
}
void SaveUgcRsp::set_ugc_type(::proto::UgcType value) {
  
  ugc_type_ = value;
  // @@protoc_insertion_point(field_set:proto.SaveUgcRsp.ugc_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublishUgcReq::kUgcTypeFieldNumber;
const int PublishUgcReq::kUgcGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublishUgcReq::PublishUgcReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fugc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.PublishUgcReq)
}
PublishUgcReq::PublishUgcReq(const PublishUgcReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ugc_type_, &from.ugc_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&ugc_guid_) -
    reinterpret_cast<char*>(&ugc_type_)) + sizeof(ugc_guid_));
  // @@protoc_insertion_point(copy_constructor:proto.PublishUgcReq)
}

void PublishUgcReq::SharedCtor() {
  ::memset(&ugc_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ugc_guid_) -
      reinterpret_cast<char*>(&ugc_type_)) + sizeof(ugc_guid_));
  _cached_size_ = 0;
}

PublishUgcReq::~PublishUgcReq() {
  // @@protoc_insertion_point(destructor:proto.PublishUgcReq)
  SharedDtor();
}

void PublishUgcReq::SharedDtor() {
}

void PublishUgcReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublishUgcReq::descriptor() {
  protobuf_cmd_2fcmd_5fugc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fugc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PublishUgcReq& PublishUgcReq::default_instance() {
  protobuf_cmd_2fcmd_5fugc_2eproto::InitDefaults();
  return *internal_default_instance();
}

PublishUgcReq* PublishUgcReq::New(::google::protobuf::Arena* arena) const {
  PublishUgcReq* n = new PublishUgcReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PublishUgcReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PublishUgcReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ugc_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ugc_guid_) -
      reinterpret_cast<char*>(&ugc_type_)) + sizeof(ugc_guid_));
  _internal_metadata_.Clear();
}

bool PublishUgcReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.PublishUgcReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.UgcType ugc_type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ugc_type(static_cast< ::proto::UgcType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 ugc_guid = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ugc_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.PublishUgcReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.PublishUgcReq)
  return false;
#undef DO_
}

void PublishUgcReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.PublishUgcReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.UgcType ugc_type = 7;
  if (this->ugc_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->ugc_type(), output);
  }

  // uint64 ugc_guid = 12;
  if (this->ugc_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->ugc_guid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.PublishUgcReq)
}

::google::protobuf::uint8* PublishUgcReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.PublishUgcReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.UgcType ugc_type = 7;
  if (this->ugc_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->ugc_type(), target);
  }

  // uint64 ugc_guid = 12;
  if (this->ugc_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->ugc_guid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PublishUgcReq)
  return target;
}

size_t PublishUgcReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PublishUgcReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.UgcType ugc_type = 7;
  if (this->ugc_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ugc_type());
  }

  // uint64 ugc_guid = 12;
  if (this->ugc_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ugc_guid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublishUgcReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.PublishUgcReq)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishUgcReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PublishUgcReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.PublishUgcReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.PublishUgcReq)
    MergeFrom(*source);
  }
}

void PublishUgcReq::MergeFrom(const PublishUgcReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.PublishUgcReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ugc_type() != 0) {
    set_ugc_type(from.ugc_type());
  }
  if (from.ugc_guid() != 0) {
    set_ugc_guid(from.ugc_guid());
  }
}

void PublishUgcReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.PublishUgcReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishUgcReq::CopyFrom(const PublishUgcReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PublishUgcReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishUgcReq::IsInitialized() const {
  return true;
}

void PublishUgcReq::Swap(PublishUgcReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PublishUgcReq::InternalSwap(PublishUgcReq* other) {
  using std::swap;
  swap(ugc_type_, other->ugc_type_);
  swap(ugc_guid_, other->ugc_guid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PublishUgcReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fugc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fugc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PublishUgcReq

// .proto.UgcType ugc_type = 7;
void PublishUgcReq::clear_ugc_type() {
  ugc_type_ = 0;
}
::proto::UgcType PublishUgcReq::ugc_type() const {
  // @@protoc_insertion_point(field_get:proto.PublishUgcReq.ugc_type)
  return static_cast< ::proto::UgcType >(ugc_type_);
}
void PublishUgcReq::set_ugc_type(::proto::UgcType value) {
  
  ugc_type_ = value;
  // @@protoc_insertion_point(field_set:proto.PublishUgcReq.ugc_type)
}

// uint64 ugc_guid = 12;
void PublishUgcReq::clear_ugc_guid() {
  ugc_guid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PublishUgcReq::ugc_guid() const {
  // @@protoc_insertion_point(field_get:proto.PublishUgcReq.ugc_guid)
  return ugc_guid_;
}
void PublishUgcReq::set_ugc_guid(::google::protobuf::uint64 value) {
  
  ugc_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.PublishUgcReq.ugc_guid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublishUgcRsp::kUgcGuidFieldNumber;
const int PublishUgcRsp::kRetcodeFieldNumber;
const int PublishUgcRsp::kUgcTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublishUgcRsp::PublishUgcRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fugc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.PublishUgcRsp)
}
PublishUgcRsp::PublishUgcRsp(const PublishUgcRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ugc_guid_, &from.ugc_guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&retcode_) -
    reinterpret_cast<char*>(&ugc_guid_)) + sizeof(retcode_));
  // @@protoc_insertion_point(copy_constructor:proto.PublishUgcRsp)
}

void PublishUgcRsp::SharedCtor() {
  ::memset(&ugc_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&ugc_guid_)) + sizeof(retcode_));
  _cached_size_ = 0;
}

PublishUgcRsp::~PublishUgcRsp() {
  // @@protoc_insertion_point(destructor:proto.PublishUgcRsp)
  SharedDtor();
}

void PublishUgcRsp::SharedDtor() {
}

void PublishUgcRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublishUgcRsp::descriptor() {
  protobuf_cmd_2fcmd_5fugc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fugc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PublishUgcRsp& PublishUgcRsp::default_instance() {
  protobuf_cmd_2fcmd_5fugc_2eproto::InitDefaults();
  return *internal_default_instance();
}

PublishUgcRsp* PublishUgcRsp::New(::google::protobuf::Arena* arena) const {
  PublishUgcRsp* n = new PublishUgcRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PublishUgcRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PublishUgcRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ugc_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&ugc_guid_)) + sizeof(retcode_));
  _internal_metadata_.Clear();
}

bool PublishUgcRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.PublishUgcRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.UgcType ugc_type = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ugc_type(static_cast< ::proto::UgcType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 ugc_guid = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ugc_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 retcode = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.PublishUgcRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.PublishUgcRsp)
  return false;
#undef DO_
}

void PublishUgcRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.PublishUgcRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.UgcType ugc_type = 13;
  if (this->ugc_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->ugc_type(), output);
  }

  // uint64 ugc_guid = 14;
  if (this->ugc_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->ugc_guid(), output);
  }

  // int32 retcode = 15;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->retcode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.PublishUgcRsp)
}

::google::protobuf::uint8* PublishUgcRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.PublishUgcRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.UgcType ugc_type = 13;
  if (this->ugc_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->ugc_type(), target);
  }

  // uint64 ugc_guid = 14;
  if (this->ugc_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->ugc_guid(), target);
  }

  // int32 retcode = 15;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->retcode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PublishUgcRsp)
  return target;
}

size_t PublishUgcRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PublishUgcRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 ugc_guid = 14;
  if (this->ugc_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ugc_guid());
  }

  // .proto.UgcType ugc_type = 13;
  if (this->ugc_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ugc_type());
  }

  // int32 retcode = 15;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublishUgcRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.PublishUgcRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishUgcRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PublishUgcRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.PublishUgcRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.PublishUgcRsp)
    MergeFrom(*source);
  }
}

void PublishUgcRsp::MergeFrom(const PublishUgcRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.PublishUgcRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ugc_guid() != 0) {
    set_ugc_guid(from.ugc_guid());
  }
  if (from.ugc_type() != 0) {
    set_ugc_type(from.ugc_type());
  }
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void PublishUgcRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.PublishUgcRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishUgcRsp::CopyFrom(const PublishUgcRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PublishUgcRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishUgcRsp::IsInitialized() const {
  return true;
}

void PublishUgcRsp::Swap(PublishUgcRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PublishUgcRsp::InternalSwap(PublishUgcRsp* other) {
  using std::swap;
  swap(ugc_guid_, other->ugc_guid_);
  swap(ugc_type_, other->ugc_type_);
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PublishUgcRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fugc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fugc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PublishUgcRsp

// uint64 ugc_guid = 14;
void PublishUgcRsp::clear_ugc_guid() {
  ugc_guid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PublishUgcRsp::ugc_guid() const {
  // @@protoc_insertion_point(field_get:proto.PublishUgcRsp.ugc_guid)
  return ugc_guid_;
}
void PublishUgcRsp::set_ugc_guid(::google::protobuf::uint64 value) {
  
  ugc_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.PublishUgcRsp.ugc_guid)
}

// int32 retcode = 15;
void PublishUgcRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 PublishUgcRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.PublishUgcRsp.retcode)
  return retcode_;
}
void PublishUgcRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.PublishUgcRsp.retcode)
}

// .proto.UgcType ugc_type = 13;
void PublishUgcRsp::clear_ugc_type() {
  ugc_type_ = 0;
}
::proto::UgcType PublishUgcRsp::ugc_type() const {
  // @@protoc_insertion_point(field_get:proto.PublishUgcRsp.ugc_type)
  return static_cast< ::proto::UgcType >(ugc_type_);
}
void PublishUgcRsp::set_ugc_type(::proto::UgcType value) {
  
  ugc_type_ = value;
  // @@protoc_insertion_point(field_set:proto.PublishUgcRsp.ugc_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckUgcUpdateReq::kUgcTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckUgcUpdateReq::CheckUgcUpdateReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fugc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.CheckUgcUpdateReq)
}
CheckUgcUpdateReq::CheckUgcUpdateReq(const CheckUgcUpdateReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ugc_type_ = from.ugc_type_;
  // @@protoc_insertion_point(copy_constructor:proto.CheckUgcUpdateReq)
}

void CheckUgcUpdateReq::SharedCtor() {
  ugc_type_ = 0;
  _cached_size_ = 0;
}

CheckUgcUpdateReq::~CheckUgcUpdateReq() {
  // @@protoc_insertion_point(destructor:proto.CheckUgcUpdateReq)
  SharedDtor();
}

void CheckUgcUpdateReq::SharedDtor() {
}

void CheckUgcUpdateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckUgcUpdateReq::descriptor() {
  protobuf_cmd_2fcmd_5fugc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fugc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CheckUgcUpdateReq& CheckUgcUpdateReq::default_instance() {
  protobuf_cmd_2fcmd_5fugc_2eproto::InitDefaults();
  return *internal_default_instance();
}

CheckUgcUpdateReq* CheckUgcUpdateReq::New(::google::protobuf::Arena* arena) const {
  CheckUgcUpdateReq* n = new CheckUgcUpdateReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckUgcUpdateReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CheckUgcUpdateReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ugc_type_ = 0;
  _internal_metadata_.Clear();
}

bool CheckUgcUpdateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.CheckUgcUpdateReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.UgcType ugc_type = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ugc_type(static_cast< ::proto::UgcType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.CheckUgcUpdateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.CheckUgcUpdateReq)
  return false;
#undef DO_
}

void CheckUgcUpdateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.CheckUgcUpdateReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.UgcType ugc_type = 13;
  if (this->ugc_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->ugc_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.CheckUgcUpdateReq)
}

::google::protobuf::uint8* CheckUgcUpdateReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.CheckUgcUpdateReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.UgcType ugc_type = 13;
  if (this->ugc_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->ugc_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CheckUgcUpdateReq)
  return target;
}

size_t CheckUgcUpdateReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CheckUgcUpdateReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.UgcType ugc_type = 13;
  if (this->ugc_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ugc_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckUgcUpdateReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.CheckUgcUpdateReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckUgcUpdateReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckUgcUpdateReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.CheckUgcUpdateReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.CheckUgcUpdateReq)
    MergeFrom(*source);
  }
}

void CheckUgcUpdateReq::MergeFrom(const CheckUgcUpdateReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.CheckUgcUpdateReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ugc_type() != 0) {
    set_ugc_type(from.ugc_type());
  }
}

void CheckUgcUpdateReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.CheckUgcUpdateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckUgcUpdateReq::CopyFrom(const CheckUgcUpdateReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CheckUgcUpdateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckUgcUpdateReq::IsInitialized() const {
  return true;
}

void CheckUgcUpdateReq::Swap(CheckUgcUpdateReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckUgcUpdateReq::InternalSwap(CheckUgcUpdateReq* other) {
  using std::swap;
  swap(ugc_type_, other->ugc_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CheckUgcUpdateReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fugc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fugc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckUgcUpdateReq

// .proto.UgcType ugc_type = 13;
void CheckUgcUpdateReq::clear_ugc_type() {
  ugc_type_ = 0;
}
::proto::UgcType CheckUgcUpdateReq::ugc_type() const {
  // @@protoc_insertion_point(field_get:proto.CheckUgcUpdateReq.ugc_type)
  return static_cast< ::proto::UgcType >(ugc_type_);
}
void CheckUgcUpdateReq::set_ugc_type(::proto::UgcType value) {
  
  ugc_type_ = value;
  // @@protoc_insertion_point(field_set:proto.CheckUgcUpdateReq.ugc_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckUgcUpdateRsp::kUpdateUgcGuidListFieldNumber;
const int CheckUgcUpdateRsp::kRetcodeFieldNumber;
const int CheckUgcUpdateRsp::kUgcTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckUgcUpdateRsp::CheckUgcUpdateRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fugc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.CheckUgcUpdateRsp)
}
CheckUgcUpdateRsp::CheckUgcUpdateRsp(const CheckUgcUpdateRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      update_ugc_guid_list_(from.update_ugc_guid_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&ugc_type_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(ugc_type_));
  // @@protoc_insertion_point(copy_constructor:proto.CheckUgcUpdateRsp)
}

void CheckUgcUpdateRsp::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ugc_type_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(ugc_type_));
  _cached_size_ = 0;
}

CheckUgcUpdateRsp::~CheckUgcUpdateRsp() {
  // @@protoc_insertion_point(destructor:proto.CheckUgcUpdateRsp)
  SharedDtor();
}

void CheckUgcUpdateRsp::SharedDtor() {
}

void CheckUgcUpdateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckUgcUpdateRsp::descriptor() {
  protobuf_cmd_2fcmd_5fugc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fugc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CheckUgcUpdateRsp& CheckUgcUpdateRsp::default_instance() {
  protobuf_cmd_2fcmd_5fugc_2eproto::InitDefaults();
  return *internal_default_instance();
}

CheckUgcUpdateRsp* CheckUgcUpdateRsp::New(::google::protobuf::Arena* arena) const {
  CheckUgcUpdateRsp* n = new CheckUgcUpdateRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckUgcUpdateRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CheckUgcUpdateRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  update_ugc_guid_list_.Clear();
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ugc_type_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(ugc_type_));
  _internal_metadata_.Clear();
}

bool CheckUgcUpdateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.CheckUgcUpdateRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.UgcType ugc_type = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ugc_type(static_cast< ::proto::UgcType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 update_ugc_guid_list = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_update_ugc_guid_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 122u, input, this->mutable_update_ugc_guid_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.CheckUgcUpdateRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.CheckUgcUpdateRsp)
  return false;
#undef DO_
}

void CheckUgcUpdateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.CheckUgcUpdateRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 10;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->retcode(), output);
  }

  // .proto.UgcType ugc_type = 12;
  if (this->ugc_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->ugc_type(), output);
  }

  // repeated uint64 update_ugc_guid_list = 15;
  if (this->update_ugc_guid_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(15, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _update_ugc_guid_list_cached_byte_size_));
  }
  for (int i = 0, n = this->update_ugc_guid_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->update_ugc_guid_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.CheckUgcUpdateRsp)
}

::google::protobuf::uint8* CheckUgcUpdateRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.CheckUgcUpdateRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 10;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->retcode(), target);
  }

  // .proto.UgcType ugc_type = 12;
  if (this->ugc_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->ugc_type(), target);
  }

  // repeated uint64 update_ugc_guid_list = 15;
  if (this->update_ugc_guid_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      15,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _update_ugc_guid_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->update_ugc_guid_list_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CheckUgcUpdateRsp)
  return target;
}

size_t CheckUgcUpdateRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CheckUgcUpdateRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint64 update_ugc_guid_list = 15;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->update_ugc_guid_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _update_ugc_guid_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // int32 retcode = 10;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // .proto.UgcType ugc_type = 12;
  if (this->ugc_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ugc_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckUgcUpdateRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.CheckUgcUpdateRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckUgcUpdateRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckUgcUpdateRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.CheckUgcUpdateRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.CheckUgcUpdateRsp)
    MergeFrom(*source);
  }
}

void CheckUgcUpdateRsp::MergeFrom(const CheckUgcUpdateRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.CheckUgcUpdateRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  update_ugc_guid_list_.MergeFrom(from.update_ugc_guid_list_);
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.ugc_type() != 0) {
    set_ugc_type(from.ugc_type());
  }
}

void CheckUgcUpdateRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.CheckUgcUpdateRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckUgcUpdateRsp::CopyFrom(const CheckUgcUpdateRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CheckUgcUpdateRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckUgcUpdateRsp::IsInitialized() const {
  return true;
}

void CheckUgcUpdateRsp::Swap(CheckUgcUpdateRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckUgcUpdateRsp::InternalSwap(CheckUgcUpdateRsp* other) {
  using std::swap;
  update_ugc_guid_list_.InternalSwap(&other->update_ugc_guid_list_);
  swap(retcode_, other->retcode_);
  swap(ugc_type_, other->ugc_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CheckUgcUpdateRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fugc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fugc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckUgcUpdateRsp

// repeated uint64 update_ugc_guid_list = 15;
int CheckUgcUpdateRsp::update_ugc_guid_list_size() const {
  return update_ugc_guid_list_.size();
}
void CheckUgcUpdateRsp::clear_update_ugc_guid_list() {
  update_ugc_guid_list_.Clear();
}
::google::protobuf::uint64 CheckUgcUpdateRsp::update_ugc_guid_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.CheckUgcUpdateRsp.update_ugc_guid_list)
  return update_ugc_guid_list_.Get(index);
}
void CheckUgcUpdateRsp::set_update_ugc_guid_list(int index, ::google::protobuf::uint64 value) {
  update_ugc_guid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.CheckUgcUpdateRsp.update_ugc_guid_list)
}
void CheckUgcUpdateRsp::add_update_ugc_guid_list(::google::protobuf::uint64 value) {
  update_ugc_guid_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.CheckUgcUpdateRsp.update_ugc_guid_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CheckUgcUpdateRsp::update_ugc_guid_list() const {
  // @@protoc_insertion_point(field_list:proto.CheckUgcUpdateRsp.update_ugc_guid_list)
  return update_ugc_guid_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CheckUgcUpdateRsp::mutable_update_ugc_guid_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.CheckUgcUpdateRsp.update_ugc_guid_list)
  return &update_ugc_guid_list_;
}

// int32 retcode = 10;
void CheckUgcUpdateRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 CheckUgcUpdateRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.CheckUgcUpdateRsp.retcode)
  return retcode_;
}
void CheckUgcUpdateRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.CheckUgcUpdateRsp.retcode)
}

// .proto.UgcType ugc_type = 12;
void CheckUgcUpdateRsp::clear_ugc_type() {
  ugc_type_ = 0;
}
::proto::UgcType CheckUgcUpdateRsp::ugc_type() const {
  // @@protoc_insertion_point(field_get:proto.CheckUgcUpdateRsp.ugc_type)
  return static_cast< ::proto::UgcType >(ugc_type_);
}
void CheckUgcUpdateRsp::set_ugc_type(::proto::UgcType value) {
  
  ugc_type_ = value;
  // @@protoc_insertion_point(field_set:proto.CheckUgcUpdateRsp.ugc_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UgcNotify::kIsUgcPublishBanFieldNumber;
const int UgcNotify::kIsUgcPublishFeatureClosedFieldNumber;
const int UgcNotify::kIsUgcFeatureClosedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UgcNotify::UgcNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fugc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.UgcNotify)
}
UgcNotify::UgcNotify(const UgcNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_ugc_publish_ban_, &from.is_ugc_publish_ban_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_ugc_feature_closed_) -
    reinterpret_cast<char*>(&is_ugc_publish_ban_)) + sizeof(is_ugc_feature_closed_));
  // @@protoc_insertion_point(copy_constructor:proto.UgcNotify)
}

void UgcNotify::SharedCtor() {
  ::memset(&is_ugc_publish_ban_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_ugc_feature_closed_) -
      reinterpret_cast<char*>(&is_ugc_publish_ban_)) + sizeof(is_ugc_feature_closed_));
  _cached_size_ = 0;
}

UgcNotify::~UgcNotify() {
  // @@protoc_insertion_point(destructor:proto.UgcNotify)
  SharedDtor();
}

void UgcNotify::SharedDtor() {
}

void UgcNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UgcNotify::descriptor() {
  protobuf_cmd_2fcmd_5fugc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fugc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UgcNotify& UgcNotify::default_instance() {
  protobuf_cmd_2fcmd_5fugc_2eproto::InitDefaults();
  return *internal_default_instance();
}

UgcNotify* UgcNotify::New(::google::protobuf::Arena* arena) const {
  UgcNotify* n = new UgcNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UgcNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.UgcNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_ugc_publish_ban_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_ugc_feature_closed_) -
      reinterpret_cast<char*>(&is_ugc_publish_ban_)) + sizeof(is_ugc_feature_closed_));
  _internal_metadata_.Clear();
}

bool UgcNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.UgcNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_ugc_publish_feature_closed = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ugc_publish_feature_closed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_ugc_publish_ban = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ugc_publish_ban_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_ugc_feature_closed = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ugc_feature_closed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.UgcNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.UgcNotify)
  return false;
#undef DO_
}

void UgcNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.UgcNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_ugc_publish_feature_closed = 8;
  if (this->is_ugc_publish_feature_closed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_ugc_publish_feature_closed(), output);
  }

  // bool is_ugc_publish_ban = 12;
  if (this->is_ugc_publish_ban() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_ugc_publish_ban(), output);
  }

  // bool is_ugc_feature_closed = 15;
  if (this->is_ugc_feature_closed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->is_ugc_feature_closed(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.UgcNotify)
}

::google::protobuf::uint8* UgcNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.UgcNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_ugc_publish_feature_closed = 8;
  if (this->is_ugc_publish_feature_closed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_ugc_publish_feature_closed(), target);
  }

  // bool is_ugc_publish_ban = 12;
  if (this->is_ugc_publish_ban() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->is_ugc_publish_ban(), target);
  }

  // bool is_ugc_feature_closed = 15;
  if (this->is_ugc_feature_closed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->is_ugc_feature_closed(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.UgcNotify)
  return target;
}

size_t UgcNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.UgcNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool is_ugc_publish_ban = 12;
  if (this->is_ugc_publish_ban() != 0) {
    total_size += 1 + 1;
  }

  // bool is_ugc_publish_feature_closed = 8;
  if (this->is_ugc_publish_feature_closed() != 0) {
    total_size += 1 + 1;
  }

  // bool is_ugc_feature_closed = 15;
  if (this->is_ugc_feature_closed() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UgcNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.UgcNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const UgcNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UgcNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.UgcNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.UgcNotify)
    MergeFrom(*source);
  }
}

void UgcNotify::MergeFrom(const UgcNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.UgcNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_ugc_publish_ban() != 0) {
    set_is_ugc_publish_ban(from.is_ugc_publish_ban());
  }
  if (from.is_ugc_publish_feature_closed() != 0) {
    set_is_ugc_publish_feature_closed(from.is_ugc_publish_feature_closed());
  }
  if (from.is_ugc_feature_closed() != 0) {
    set_is_ugc_feature_closed(from.is_ugc_feature_closed());
  }
}

void UgcNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.UgcNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UgcNotify::CopyFrom(const UgcNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.UgcNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UgcNotify::IsInitialized() const {
  return true;
}

void UgcNotify::Swap(UgcNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UgcNotify::InternalSwap(UgcNotify* other) {
  using std::swap;
  swap(is_ugc_publish_ban_, other->is_ugc_publish_ban_);
  swap(is_ugc_publish_feature_closed_, other->is_ugc_publish_feature_closed_);
  swap(is_ugc_feature_closed_, other->is_ugc_feature_closed_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UgcNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fugc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fugc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UgcNotify

// bool is_ugc_publish_ban = 12;
void UgcNotify::clear_is_ugc_publish_ban() {
  is_ugc_publish_ban_ = false;
}
bool UgcNotify::is_ugc_publish_ban() const {
  // @@protoc_insertion_point(field_get:proto.UgcNotify.is_ugc_publish_ban)
  return is_ugc_publish_ban_;
}
void UgcNotify::set_is_ugc_publish_ban(bool value) {
  
  is_ugc_publish_ban_ = value;
  // @@protoc_insertion_point(field_set:proto.UgcNotify.is_ugc_publish_ban)
}

// bool is_ugc_publish_feature_closed = 8;
void UgcNotify::clear_is_ugc_publish_feature_closed() {
  is_ugc_publish_feature_closed_ = false;
}
bool UgcNotify::is_ugc_publish_feature_closed() const {
  // @@protoc_insertion_point(field_get:proto.UgcNotify.is_ugc_publish_feature_closed)
  return is_ugc_publish_feature_closed_;
}
void UgcNotify::set_is_ugc_publish_feature_closed(bool value) {
  
  is_ugc_publish_feature_closed_ = value;
  // @@protoc_insertion_point(field_set:proto.UgcNotify.is_ugc_publish_feature_closed)
}

// bool is_ugc_feature_closed = 15;
void UgcNotify::clear_is_ugc_feature_closed() {
  is_ugc_feature_closed_ = false;
}
bool UgcNotify::is_ugc_feature_closed() const {
  // @@protoc_insertion_point(field_get:proto.UgcNotify.is_ugc_feature_closed)
  return is_ugc_feature_closed_;
}
void UgcNotify::set_is_ugc_feature_closed(bool value) {
  
  is_ugc_feature_closed_ = value;
  // @@protoc_insertion_point(field_set:proto.UgcNotify.is_ugc_feature_closed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckUgcStateReq::CheckUgcStateReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fugc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.CheckUgcStateReq)
}
CheckUgcStateReq::CheckUgcStateReq(const CheckUgcStateReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.CheckUgcStateReq)
}

void CheckUgcStateReq::SharedCtor() {
  _cached_size_ = 0;
}

CheckUgcStateReq::~CheckUgcStateReq() {
  // @@protoc_insertion_point(destructor:proto.CheckUgcStateReq)
  SharedDtor();
}

void CheckUgcStateReq::SharedDtor() {
}

void CheckUgcStateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckUgcStateReq::descriptor() {
  protobuf_cmd_2fcmd_5fugc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fugc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CheckUgcStateReq& CheckUgcStateReq::default_instance() {
  protobuf_cmd_2fcmd_5fugc_2eproto::InitDefaults();
  return *internal_default_instance();
}

CheckUgcStateReq* CheckUgcStateReq::New(::google::protobuf::Arena* arena) const {
  CheckUgcStateReq* n = new CheckUgcStateReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckUgcStateReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CheckUgcStateReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool CheckUgcStateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.CheckUgcStateReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.CheckUgcStateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.CheckUgcStateReq)
  return false;
#undef DO_
}

void CheckUgcStateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.CheckUgcStateReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.CheckUgcStateReq)
}

::google::protobuf::uint8* CheckUgcStateReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.CheckUgcStateReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CheckUgcStateReq)
  return target;
}

size_t CheckUgcStateReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CheckUgcStateReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckUgcStateReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.CheckUgcStateReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckUgcStateReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckUgcStateReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.CheckUgcStateReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.CheckUgcStateReq)
    MergeFrom(*source);
  }
}

void CheckUgcStateReq::MergeFrom(const CheckUgcStateReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.CheckUgcStateReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CheckUgcStateReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.CheckUgcStateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckUgcStateReq::CopyFrom(const CheckUgcStateReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CheckUgcStateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckUgcStateReq::IsInitialized() const {
  return true;
}

void CheckUgcStateReq::Swap(CheckUgcStateReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckUgcStateReq::InternalSwap(CheckUgcStateReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CheckUgcStateReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fugc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fugc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckUgcStateReq

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckUgcStateRsp::kRetcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckUgcStateRsp::CheckUgcStateRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fugc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.CheckUgcStateRsp)
}
CheckUgcStateRsp::CheckUgcStateRsp(const CheckUgcStateRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:proto.CheckUgcStateRsp)
}

void CheckUgcStateRsp::SharedCtor() {
  retcode_ = 0;
  _cached_size_ = 0;
}

CheckUgcStateRsp::~CheckUgcStateRsp() {
  // @@protoc_insertion_point(destructor:proto.CheckUgcStateRsp)
  SharedDtor();
}

void CheckUgcStateRsp::SharedDtor() {
}

void CheckUgcStateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckUgcStateRsp::descriptor() {
  protobuf_cmd_2fcmd_5fugc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fugc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CheckUgcStateRsp& CheckUgcStateRsp::default_instance() {
  protobuf_cmd_2fcmd_5fugc_2eproto::InitDefaults();
  return *internal_default_instance();
}

CheckUgcStateRsp* CheckUgcStateRsp::New(::google::protobuf::Arena* arena) const {
  CheckUgcStateRsp* n = new CheckUgcStateRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckUgcStateRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CheckUgcStateRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0;
  _internal_metadata_.Clear();
}

bool CheckUgcStateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.CheckUgcStateRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.CheckUgcStateRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.CheckUgcStateRsp)
  return false;
#undef DO_
}

void CheckUgcStateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.CheckUgcStateRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 7;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->retcode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.CheckUgcStateRsp)
}

::google::protobuf::uint8* CheckUgcStateRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.CheckUgcStateRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 7;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->retcode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CheckUgcStateRsp)
  return target;
}

size_t CheckUgcStateRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CheckUgcStateRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 7;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckUgcStateRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.CheckUgcStateRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckUgcStateRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckUgcStateRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.CheckUgcStateRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.CheckUgcStateRsp)
    MergeFrom(*source);
  }
}

void CheckUgcStateRsp::MergeFrom(const CheckUgcStateRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.CheckUgcStateRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void CheckUgcStateRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.CheckUgcStateRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckUgcStateRsp::CopyFrom(const CheckUgcStateRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CheckUgcStateRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckUgcStateRsp::IsInitialized() const {
  return true;
}

void CheckUgcStateRsp::Swap(CheckUgcStateRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckUgcStateRsp::InternalSwap(CheckUgcStateRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CheckUgcStateRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fugc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fugc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckUgcStateRsp

// int32 retcode = 7;
void CheckUgcStateRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 CheckUgcStateRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.CheckUgcStateRsp.retcode)
  return retcode_;
}
void CheckUgcStateRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.CheckUgcStateRsp.retcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
