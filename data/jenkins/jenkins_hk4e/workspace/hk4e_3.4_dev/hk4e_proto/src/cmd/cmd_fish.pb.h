// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cmd/cmd_fish.proto

#ifndef PROTOBUF_cmd_2fcmd_5ffish_2eproto__INCLUDED
#define PROTOBUF_cmd_2fcmd_5ffish_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "define.pb.h"
// @@protoc_insertion_point(includes)
namespace proto {
class EnterFishingReq;
class EnterFishingReqDefaultTypeInternal;
extern EnterFishingReqDefaultTypeInternal _EnterFishingReq_default_instance_;
class EnterFishingRsp;
class EnterFishingRspDefaultTypeInternal;
extern EnterFishingRspDefaultTypeInternal _EnterFishingRsp_default_instance_;
class ExitFishingReq;
class ExitFishingReqDefaultTypeInternal;
extern ExitFishingReqDefaultTypeInternal _ExitFishingReq_default_instance_;
class ExitFishingRsp;
class ExitFishingRspDefaultTypeInternal;
extern ExitFishingRspDefaultTypeInternal _ExitFishingRsp_default_instance_;
class FishAttractNotify;
class FishAttractNotifyDefaultTypeInternal;
extern FishAttractNotifyDefaultTypeInternal _FishAttractNotify_default_instance_;
class FishBaitGoneNotify;
class FishBaitGoneNotifyDefaultTypeInternal;
extern FishBaitGoneNotifyDefaultTypeInternal _FishBaitGoneNotify_default_instance_;
class FishBattleBeginReq;
class FishBattleBeginReqDefaultTypeInternal;
extern FishBattleBeginReqDefaultTypeInternal _FishBattleBeginReq_default_instance_;
class FishBattleBeginRsp;
class FishBattleBeginRspDefaultTypeInternal;
extern FishBattleBeginRspDefaultTypeInternal _FishBattleBeginRsp_default_instance_;
class FishBattleEndReq;
class FishBattleEndReqDefaultTypeInternal;
extern FishBattleEndReqDefaultTypeInternal _FishBattleEndReq_default_instance_;
class FishBattleEndRsp;
class FishBattleEndRspDefaultTypeInternal;
extern FishBattleEndRspDefaultTypeInternal _FishBattleEndRsp_default_instance_;
class FishBiteReq;
class FishBiteReqDefaultTypeInternal;
extern FishBiteReqDefaultTypeInternal _FishBiteReq_default_instance_;
class FishBiteRsp;
class FishBiteRspDefaultTypeInternal;
extern FishBiteRspDefaultTypeInternal _FishBiteRsp_default_instance_;
class FishCastRodReq;
class FishCastRodReqDefaultTypeInternal;
extern FishCastRodReqDefaultTypeInternal _FishCastRodReq_default_instance_;
class FishCastRodRsp;
class FishCastRodRspDefaultTypeInternal;
extern FishCastRodRspDefaultTypeInternal _FishCastRodRsp_default_instance_;
class FishChosenNotify;
class FishChosenNotifyDefaultTypeInternal;
extern FishChosenNotifyDefaultTypeInternal _FishChosenNotify_default_instance_;
class FishEscapeNotify;
class FishEscapeNotifyDefaultTypeInternal;
extern FishEscapeNotifyDefaultTypeInternal _FishEscapeNotify_default_instance_;
class FishPoolDataNotify;
class FishPoolDataNotifyDefaultTypeInternal;
extern FishPoolDataNotifyDefaultTypeInternal _FishPoolDataNotify_default_instance_;
class PlayerFishingDataNotify;
class PlayerFishingDataNotifyDefaultTypeInternal;
extern PlayerFishingDataNotifyDefaultTypeInternal _PlayerFishingDataNotify_default_instance_;
class StartFishingReq;
class StartFishingReqDefaultTypeInternal;
extern StartFishingReqDefaultTypeInternal _StartFishingReq_default_instance_;
class StartFishingRsp;
class StartFishingRspDefaultTypeInternal;
extern StartFishingRspDefaultTypeInternal _StartFishingRsp_default_instance_;
}  // namespace proto

namespace proto {

namespace protobuf_cmd_2fcmd_5ffish_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_cmd_2fcmd_5ffish_2eproto

enum FishBattleEndRsp_FishNoRewardReason {
  FishBattleEndRsp_FishNoRewardReason_FISH_NO_REWARD_NONE = 0,
  FishBattleEndRsp_FishNoRewardReason_FISH_NO_REWARD_ACTIVITY_LIMIT = 1,
  FishBattleEndRsp_FishNoRewardReason_FISH_NO_REWARD_BAG_LIMIT = 2,
  FishBattleEndRsp_FishNoRewardReason_FISH_NO_REWARD_POOL_LIMIT = 3,
  FishBattleEndRsp_FishNoRewardReason_FishBattleEndRsp_FishNoRewardReason_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  FishBattleEndRsp_FishNoRewardReason_FishBattleEndRsp_FishNoRewardReason_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool FishBattleEndRsp_FishNoRewardReason_IsValid(int value);
const FishBattleEndRsp_FishNoRewardReason FishBattleEndRsp_FishNoRewardReason_FishNoRewardReason_MIN = FishBattleEndRsp_FishNoRewardReason_FISH_NO_REWARD_NONE;
const FishBattleEndRsp_FishNoRewardReason FishBattleEndRsp_FishNoRewardReason_FishNoRewardReason_MAX = FishBattleEndRsp_FishNoRewardReason_FISH_NO_REWARD_POOL_LIMIT;
const int FishBattleEndRsp_FishNoRewardReason_FishNoRewardReason_ARRAYSIZE = FishBattleEndRsp_FishNoRewardReason_FishNoRewardReason_MAX + 1;

const ::google::protobuf::EnumDescriptor* FishBattleEndRsp_FishNoRewardReason_descriptor();
inline const ::std::string& FishBattleEndRsp_FishNoRewardReason_Name(FishBattleEndRsp_FishNoRewardReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    FishBattleEndRsp_FishNoRewardReason_descriptor(), value);
}
inline bool FishBattleEndRsp_FishNoRewardReason_Parse(
    const ::std::string& name, FishBattleEndRsp_FishNoRewardReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FishBattleEndRsp_FishNoRewardReason>(
    FishBattleEndRsp_FishNoRewardReason_descriptor(), name, value);
}
enum FishEscapeReason {
  FISN_ESCAPE_NONE = 0,
  FISH_ESCAPE_SHOCKED = 1,
  FISH_ESCAPE_UNHOOK = 2,
  FishEscapeReason_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  FishEscapeReason_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool FishEscapeReason_IsValid(int value);
const FishEscapeReason FishEscapeReason_MIN = FISN_ESCAPE_NONE;
const FishEscapeReason FishEscapeReason_MAX = FISH_ESCAPE_UNHOOK;
const int FishEscapeReason_ARRAYSIZE = FishEscapeReason_MAX + 1;

const ::google::protobuf::EnumDescriptor* FishEscapeReason_descriptor();
inline const ::std::string& FishEscapeReason_Name(FishEscapeReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    FishEscapeReason_descriptor(), value);
}
inline bool FishEscapeReason_Parse(
    const ::std::string& name, FishEscapeReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FishEscapeReason>(
    FishEscapeReason_descriptor(), name, value);
}
enum FishBattleResult {
  FISH_BATTLE_RESULT_NONE = 0,
  FISH_BATTLE_RESULT_SUCC = 1,
  FISH_BATTLE_RESULT_FAIL = 2,
  FISH_BATTLE_RESULT_TIMEOUT = 3,
  FISH_BATTLE_RESULT_CANCEL = 4,
  FISH_BATTLE_RESULT_EXIT = 5,
  FishBattleResult_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  FishBattleResult_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool FishBattleResult_IsValid(int value);
const FishBattleResult FishBattleResult_MIN = FISH_BATTLE_RESULT_NONE;
const FishBattleResult FishBattleResult_MAX = FISH_BATTLE_RESULT_EXIT;
const int FishBattleResult_ARRAYSIZE = FishBattleResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* FishBattleResult_descriptor();
inline const ::std::string& FishBattleResult_Name(FishBattleResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    FishBattleResult_descriptor(), value);
}
inline bool FishBattleResult_Parse(
    const ::std::string& name, FishBattleResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FishBattleResult>(
    FishBattleResult_descriptor(), name, value);
}
// ===================================================================

class EnterFishingReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.EnterFishingReq) */ {
 public:
  EnterFishingReq();
  virtual ~EnterFishingReq();

  EnterFishingReq(const EnterFishingReq& from);

  inline EnterFishingReq& operator=(const EnterFishingReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EnterFishingReq(EnterFishingReq&& from) noexcept
    : EnterFishingReq() {
    *this = ::std::move(from);
  }

  inline EnterFishingReq& operator=(EnterFishingReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EnterFishingReq& default_instance();

  static inline const EnterFishingReq* internal_default_instance() {
    return reinterpret_cast<const EnterFishingReq*>(
               &_EnterFishingReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(EnterFishingReq* other);
  friend void swap(EnterFishingReq& a, EnterFishingReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EnterFishingReq* New() const PROTOBUF_FINAL { return New(NULL); }

  EnterFishingReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EnterFishingReq& from);
  void MergeFrom(const EnterFishingReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EnterFishingReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 fish_pool_id = 3;
  void clear_fish_pool_id();
  static const int kFishPoolIdFieldNumber = 3;
  ::google::protobuf::uint32 fish_pool_id() const;
  void set_fish_pool_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.EnterFishingReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 fish_pool_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5ffish_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EnterFishingRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.EnterFishingRsp) */ {
 public:
  EnterFishingRsp();
  virtual ~EnterFishingRsp();

  EnterFishingRsp(const EnterFishingRsp& from);

  inline EnterFishingRsp& operator=(const EnterFishingRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EnterFishingRsp(EnterFishingRsp&& from) noexcept
    : EnterFishingRsp() {
    *this = ::std::move(from);
  }

  inline EnterFishingRsp& operator=(EnterFishingRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EnterFishingRsp& default_instance();

  static inline const EnterFishingRsp* internal_default_instance() {
    return reinterpret_cast<const EnterFishingRsp*>(
               &_EnterFishingRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(EnterFishingRsp* other);
  friend void swap(EnterFishingRsp& a, EnterFishingRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EnterFishingRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  EnterFishingRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EnterFishingRsp& from);
  void MergeFrom(const EnterFishingRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EnterFishingRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 retcode = 7;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 7;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // uint32 fish_pool_id = 9;
  void clear_fish_pool_id();
  static const int kFishPoolIdFieldNumber = 9;
  ::google::protobuf::uint32 fish_pool_id() const;
  void set_fish_pool_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.EnterFishingRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::uint32 fish_pool_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5ffish_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StartFishingReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.StartFishingReq) */ {
 public:
  StartFishingReq();
  virtual ~StartFishingReq();

  StartFishingReq(const StartFishingReq& from);

  inline StartFishingReq& operator=(const StartFishingReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StartFishingReq(StartFishingReq&& from) noexcept
    : StartFishingReq() {
    *this = ::std::move(from);
  }

  inline StartFishingReq& operator=(StartFishingReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StartFishingReq& default_instance();

  static inline const StartFishingReq* internal_default_instance() {
    return reinterpret_cast<const StartFishingReq*>(
               &_StartFishingReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(StartFishingReq* other);
  friend void swap(StartFishingReq& a, StartFishingReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StartFishingReq* New() const PROTOBUF_FINAL { return New(NULL); }

  StartFishingReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StartFishingReq& from);
  void MergeFrom(const StartFishingReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StartFishingReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 rod_entity_id = 5;
  void clear_rod_entity_id();
  static const int kRodEntityIdFieldNumber = 5;
  ::google::protobuf::uint32 rod_entity_id() const;
  void set_rod_entity_id(::google::protobuf::uint32 value);

  // uint32 fish_pool_id = 15;
  void clear_fish_pool_id();
  static const int kFishPoolIdFieldNumber = 15;
  ::google::protobuf::uint32 fish_pool_id() const;
  void set_fish_pool_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.StartFishingReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 rod_entity_id_;
  ::google::protobuf::uint32 fish_pool_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5ffish_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StartFishingRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.StartFishingRsp) */ {
 public:
  StartFishingRsp();
  virtual ~StartFishingRsp();

  StartFishingRsp(const StartFishingRsp& from);

  inline StartFishingRsp& operator=(const StartFishingRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StartFishingRsp(StartFishingRsp&& from) noexcept
    : StartFishingRsp() {
    *this = ::std::move(from);
  }

  inline StartFishingRsp& operator=(StartFishingRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StartFishingRsp& default_instance();

  static inline const StartFishingRsp* internal_default_instance() {
    return reinterpret_cast<const StartFishingRsp*>(
               &_StartFishingRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(StartFishingRsp* other);
  friend void swap(StartFishingRsp& a, StartFishingRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StartFishingRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  StartFishingRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StartFishingRsp& from);
  void MergeFrom(const StartFishingRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StartFishingRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 retcode = 1;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // uint32 fish_pool_id = 14;
  void clear_fish_pool_id();
  static const int kFishPoolIdFieldNumber = 14;
  ::google::protobuf::uint32 fish_pool_id() const;
  void set_fish_pool_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.StartFishingRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::uint32 fish_pool_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5ffish_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FishCastRodReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.FishCastRodReq) */ {
 public:
  FishCastRodReq();
  virtual ~FishCastRodReq();

  FishCastRodReq(const FishCastRodReq& from);

  inline FishCastRodReq& operator=(const FishCastRodReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FishCastRodReq(FishCastRodReq&& from) noexcept
    : FishCastRodReq() {
    *this = ::std::move(from);
  }

  inline FishCastRodReq& operator=(FishCastRodReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FishCastRodReq& default_instance();

  static inline const FishCastRodReq* internal_default_instance() {
    return reinterpret_cast<const FishCastRodReq*>(
               &_FishCastRodReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(FishCastRodReq* other);
  friend void swap(FishCastRodReq& a, FishCastRodReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FishCastRodReq* New() const PROTOBUF_FINAL { return New(NULL); }

  FishCastRodReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FishCastRodReq& from);
  void MergeFrom(const FishCastRodReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FishCastRodReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.Vector pos = 12;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 12;
  const ::proto::Vector& pos() const;
  ::proto::Vector* mutable_pos();
  ::proto::Vector* release_pos();
  void set_allocated_pos(::proto::Vector* pos);

  // uint32 bait_id = 14;
  void clear_bait_id();
  static const int kBaitIdFieldNumber = 14;
  ::google::protobuf::uint32 bait_id() const;
  void set_bait_id(::google::protobuf::uint32 value);

  // uint32 rod_id = 4;
  void clear_rod_id();
  static const int kRodIdFieldNumber = 4;
  ::google::protobuf::uint32 rod_id() const;
  void set_rod_id(::google::protobuf::uint32 value);

  // uint32 rod_entity_id = 7;
  void clear_rod_entity_id();
  static const int kRodEntityIdFieldNumber = 7;
  ::google::protobuf::uint32 rod_entity_id() const;
  void set_rod_entity_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.FishCastRodReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::Vector* pos_;
  ::google::protobuf::uint32 bait_id_;
  ::google::protobuf::uint32 rod_id_;
  ::google::protobuf::uint32 rod_entity_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5ffish_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FishCastRodRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.FishCastRodRsp) */ {
 public:
  FishCastRodRsp();
  virtual ~FishCastRodRsp();

  FishCastRodRsp(const FishCastRodRsp& from);

  inline FishCastRodRsp& operator=(const FishCastRodRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FishCastRodRsp(FishCastRodRsp&& from) noexcept
    : FishCastRodRsp() {
    *this = ::std::move(from);
  }

  inline FishCastRodRsp& operator=(FishCastRodRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FishCastRodRsp& default_instance();

  static inline const FishCastRodRsp* internal_default_instance() {
    return reinterpret_cast<const FishCastRodRsp*>(
               &_FishCastRodRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(FishCastRodRsp* other);
  friend void swap(FishCastRodRsp& a, FishCastRodRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FishCastRodRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  FishCastRodRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FishCastRodRsp& from);
  void MergeFrom(const FishCastRodRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FishCastRodRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 retcode = 12;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 12;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.FishCastRodRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 retcode_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5ffish_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FishChosenNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.FishChosenNotify) */ {
 public:
  FishChosenNotify();
  virtual ~FishChosenNotify();

  FishChosenNotify(const FishChosenNotify& from);

  inline FishChosenNotify& operator=(const FishChosenNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FishChosenNotify(FishChosenNotify&& from) noexcept
    : FishChosenNotify() {
    *this = ::std::move(from);
  }

  inline FishChosenNotify& operator=(FishChosenNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FishChosenNotify& default_instance();

  static inline const FishChosenNotify* internal_default_instance() {
    return reinterpret_cast<const FishChosenNotify*>(
               &_FishChosenNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(FishChosenNotify* other);
  friend void swap(FishChosenNotify& a, FishChosenNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FishChosenNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  FishChosenNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FishChosenNotify& from);
  void MergeFrom(const FishChosenNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FishChosenNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 fish_id = 12;
  void clear_fish_id();
  static const int kFishIdFieldNumber = 12;
  ::google::protobuf::uint32 fish_id() const;
  void set_fish_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.FishChosenNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 fish_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5ffish_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FishEscapeNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.FishEscapeNotify) */ {
 public:
  FishEscapeNotify();
  virtual ~FishEscapeNotify();

  FishEscapeNotify(const FishEscapeNotify& from);

  inline FishEscapeNotify& operator=(const FishEscapeNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FishEscapeNotify(FishEscapeNotify&& from) noexcept
    : FishEscapeNotify() {
    *this = ::std::move(from);
  }

  inline FishEscapeNotify& operator=(FishEscapeNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FishEscapeNotify& default_instance();

  static inline const FishEscapeNotify* internal_default_instance() {
    return reinterpret_cast<const FishEscapeNotify*>(
               &_FishEscapeNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(FishEscapeNotify* other);
  friend void swap(FishEscapeNotify& a, FishEscapeNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FishEscapeNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  FishEscapeNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FishEscapeNotify& from);
  void MergeFrom(const FishEscapeNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FishEscapeNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 fish_id_list = 6;
  int fish_id_list_size() const;
  void clear_fish_id_list();
  static const int kFishIdListFieldNumber = 6;
  ::google::protobuf::uint32 fish_id_list(int index) const;
  void set_fish_id_list(int index, ::google::protobuf::uint32 value);
  void add_fish_id_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      fish_id_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_fish_id_list();

  // .proto.Vector pos = 7;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 7;
  const ::proto::Vector& pos() const;
  ::proto::Vector* mutable_pos();
  ::proto::Vector* release_pos();
  void set_allocated_pos(::proto::Vector* pos);

  // .proto.FishEscapeReason reason = 4;
  void clear_reason();
  static const int kReasonFieldNumber = 4;
  ::proto::FishEscapeReason reason() const;
  void set_reason(::proto::FishEscapeReason value);

  // uint32 uid = 14;
  void clear_uid();
  static const int kUidFieldNumber = 14;
  ::google::protobuf::uint32 uid() const;
  void set_uid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.FishEscapeNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > fish_id_list_;
  mutable int _fish_id_list_cached_byte_size_;
  ::proto::Vector* pos_;
  int reason_;
  ::google::protobuf::uint32 uid_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5ffish_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FishBiteReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.FishBiteReq) */ {
 public:
  FishBiteReq();
  virtual ~FishBiteReq();

  FishBiteReq(const FishBiteReq& from);

  inline FishBiteReq& operator=(const FishBiteReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FishBiteReq(FishBiteReq&& from) noexcept
    : FishBiteReq() {
    *this = ::std::move(from);
  }

  inline FishBiteReq& operator=(FishBiteReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FishBiteReq& default_instance();

  static inline const FishBiteReq* internal_default_instance() {
    return reinterpret_cast<const FishBiteReq*>(
               &_FishBiteReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(FishBiteReq* other);
  friend void swap(FishBiteReq& a, FishBiteReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FishBiteReq* New() const PROTOBUF_FINAL { return New(NULL); }

  FishBiteReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FishBiteReq& from);
  void MergeFrom(const FishBiteReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FishBiteReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.FishBiteReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5ffish_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FishBiteRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.FishBiteRsp) */ {
 public:
  FishBiteRsp();
  virtual ~FishBiteRsp();

  FishBiteRsp(const FishBiteRsp& from);

  inline FishBiteRsp& operator=(const FishBiteRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FishBiteRsp(FishBiteRsp&& from) noexcept
    : FishBiteRsp() {
    *this = ::std::move(from);
  }

  inline FishBiteRsp& operator=(FishBiteRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FishBiteRsp& default_instance();

  static inline const FishBiteRsp* internal_default_instance() {
    return reinterpret_cast<const FishBiteRsp*>(
               &_FishBiteRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(FishBiteRsp* other);
  friend void swap(FishBiteRsp& a, FishBiteRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FishBiteRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  FishBiteRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FishBiteRsp& from);
  void MergeFrom(const FishBiteRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FishBiteRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 retcode = 9;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 9;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.FishBiteRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 retcode_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5ffish_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FishBattleBeginReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.FishBattleBeginReq) */ {
 public:
  FishBattleBeginReq();
  virtual ~FishBattleBeginReq();

  FishBattleBeginReq(const FishBattleBeginReq& from);

  inline FishBattleBeginReq& operator=(const FishBattleBeginReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FishBattleBeginReq(FishBattleBeginReq&& from) noexcept
    : FishBattleBeginReq() {
    *this = ::std::move(from);
  }

  inline FishBattleBeginReq& operator=(FishBattleBeginReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FishBattleBeginReq& default_instance();

  static inline const FishBattleBeginReq* internal_default_instance() {
    return reinterpret_cast<const FishBattleBeginReq*>(
               &_FishBattleBeginReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(FishBattleBeginReq* other);
  friend void swap(FishBattleBeginReq& a, FishBattleBeginReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FishBattleBeginReq* New() const PROTOBUF_FINAL { return New(NULL); }

  FishBattleBeginReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FishBattleBeginReq& from);
  void MergeFrom(const FishBattleBeginReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FishBattleBeginReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.FishBattleBeginReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5ffish_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FishBattleBeginRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.FishBattleBeginRsp) */ {
 public:
  FishBattleBeginRsp();
  virtual ~FishBattleBeginRsp();

  FishBattleBeginRsp(const FishBattleBeginRsp& from);

  inline FishBattleBeginRsp& operator=(const FishBattleBeginRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FishBattleBeginRsp(FishBattleBeginRsp&& from) noexcept
    : FishBattleBeginRsp() {
    *this = ::std::move(from);
  }

  inline FishBattleBeginRsp& operator=(FishBattleBeginRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FishBattleBeginRsp& default_instance();

  static inline const FishBattleBeginRsp* internal_default_instance() {
    return reinterpret_cast<const FishBattleBeginRsp*>(
               &_FishBattleBeginRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(FishBattleBeginRsp* other);
  friend void swap(FishBattleBeginRsp& a, FishBattleBeginRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FishBattleBeginRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  FishBattleBeginRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FishBattleBeginRsp& from);
  void MergeFrom(const FishBattleBeginRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FishBattleBeginRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 retcode = 10;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 10;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.FishBattleBeginRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 retcode_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5ffish_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FishBattleEndReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.FishBattleEndReq) */ {
 public:
  FishBattleEndReq();
  virtual ~FishBattleEndReq();

  FishBattleEndReq(const FishBattleEndReq& from);

  inline FishBattleEndReq& operator=(const FishBattleEndReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FishBattleEndReq(FishBattleEndReq&& from) noexcept
    : FishBattleEndReq() {
    *this = ::std::move(from);
  }

  inline FishBattleEndReq& operator=(FishBattleEndReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FishBattleEndReq& default_instance();

  static inline const FishBattleEndReq* internal_default_instance() {
    return reinterpret_cast<const FishBattleEndReq*>(
               &_FishBattleEndReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(FishBattleEndReq* other);
  friend void swap(FishBattleEndReq& a, FishBattleEndReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FishBattleEndReq* New() const PROTOBUF_FINAL { return New(NULL); }

  FishBattleEndReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FishBattleEndReq& from);
  void MergeFrom(const FishBattleEndReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FishBattleEndReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool is_always_bonus = 11;
  void clear_is_always_bonus();
  static const int kIsAlwaysBonusFieldNumber = 11;
  bool is_always_bonus() const;
  void set_is_always_bonus(bool value);

  // uint32 max_bonus_time = 3;
  void clear_max_bonus_time();
  static const int kMaxBonusTimeFieldNumber = 3;
  ::google::protobuf::uint32 max_bonus_time() const;
  void set_max_bonus_time(::google::protobuf::uint32 value);

  // .proto.FishBattleResult battle_result = 10;
  void clear_battle_result();
  static const int kBattleResultFieldNumber = 10;
  ::proto::FishBattleResult battle_result() const;
  void set_battle_result(::proto::FishBattleResult value);

  // @@protoc_insertion_point(class_scope:proto.FishBattleEndReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool is_always_bonus_;
  ::google::protobuf::uint32 max_bonus_time_;
  int battle_result_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5ffish_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FishBattleEndRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.FishBattleEndRsp) */ {
 public:
  FishBattleEndRsp();
  virtual ~FishBattleEndRsp();

  FishBattleEndRsp(const FishBattleEndRsp& from);

  inline FishBattleEndRsp& operator=(const FishBattleEndRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FishBattleEndRsp(FishBattleEndRsp&& from) noexcept
    : FishBattleEndRsp() {
    *this = ::std::move(from);
  }

  inline FishBattleEndRsp& operator=(FishBattleEndRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FishBattleEndRsp& default_instance();

  static inline const FishBattleEndRsp* internal_default_instance() {
    return reinterpret_cast<const FishBattleEndRsp*>(
               &_FishBattleEndRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(FishBattleEndRsp* other);
  friend void swap(FishBattleEndRsp& a, FishBattleEndRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FishBattleEndRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  FishBattleEndRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FishBattleEndRsp& from);
  void MergeFrom(const FishBattleEndRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FishBattleEndRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef FishBattleEndRsp_FishNoRewardReason FishNoRewardReason;
  static const FishNoRewardReason FISH_NO_REWARD_NONE =
    FishBattleEndRsp_FishNoRewardReason_FISH_NO_REWARD_NONE;
  static const FishNoRewardReason FISH_NO_REWARD_ACTIVITY_LIMIT =
    FishBattleEndRsp_FishNoRewardReason_FISH_NO_REWARD_ACTIVITY_LIMIT;
  static const FishNoRewardReason FISH_NO_REWARD_BAG_LIMIT =
    FishBattleEndRsp_FishNoRewardReason_FISH_NO_REWARD_BAG_LIMIT;
  static const FishNoRewardReason FISH_NO_REWARD_POOL_LIMIT =
    FishBattleEndRsp_FishNoRewardReason_FISH_NO_REWARD_POOL_LIMIT;
  static inline bool FishNoRewardReason_IsValid(int value) {
    return FishBattleEndRsp_FishNoRewardReason_IsValid(value);
  }
  static const FishNoRewardReason FishNoRewardReason_MIN =
    FishBattleEndRsp_FishNoRewardReason_FishNoRewardReason_MIN;
  static const FishNoRewardReason FishNoRewardReason_MAX =
    FishBattleEndRsp_FishNoRewardReason_FishNoRewardReason_MAX;
  static const int FishNoRewardReason_ARRAYSIZE =
    FishBattleEndRsp_FishNoRewardReason_FishNoRewardReason_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FishNoRewardReason_descriptor() {
    return FishBattleEndRsp_FishNoRewardReason_descriptor();
  }
  static inline const ::std::string& FishNoRewardReason_Name(FishNoRewardReason value) {
    return FishBattleEndRsp_FishNoRewardReason_Name(value);
  }
  static inline bool FishNoRewardReason_Parse(const ::std::string& name,
      FishNoRewardReason* value) {
    return FishBattleEndRsp_FishNoRewardReason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .proto.ItemParam drop_item_list = 9;
  int drop_item_list_size() const;
  void clear_drop_item_list();
  static const int kDropItemListFieldNumber = 9;
  const ::proto::ItemParam& drop_item_list(int index) const;
  ::proto::ItemParam* mutable_drop_item_list(int index);
  ::proto::ItemParam* add_drop_item_list();
  ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >*
      mutable_drop_item_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >&
      drop_item_list() const;

  // repeated .proto.ItemParam reward_item_list = 11;
  int reward_item_list_size() const;
  void clear_reward_item_list();
  static const int kRewardItemListFieldNumber = 11;
  const ::proto::ItemParam& reward_item_list(int index) const;
  ::proto::ItemParam* mutable_reward_item_list(int index);
  ::proto::ItemParam* add_reward_item_list();
  ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >*
      mutable_reward_item_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >&
      reward_item_list() const;

  // repeated .proto.ItemParam talent_item_list = 13;
  int talent_item_list_size() const;
  void clear_talent_item_list();
  static const int kTalentItemListFieldNumber = 13;
  const ::proto::ItemParam& talent_item_list(int index) const;
  ::proto::ItemParam* mutable_talent_item_list(int index);
  ::proto::ItemParam* add_talent_item_list();
  ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >*
      mutable_talent_item_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >&
      talent_item_list() const;

  // .proto.FishBattleResult battle_result = 6;
  void clear_battle_result();
  static const int kBattleResultFieldNumber = 6;
  ::proto::FishBattleResult battle_result() const;
  void set_battle_result(::proto::FishBattleResult value);

  // int32 retcode = 7;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 7;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // bool is_got_reward = 10;
  void clear_is_got_reward();
  static const int kIsGotRewardFieldNumber = 10;
  bool is_got_reward() const;
  void set_is_got_reward(bool value);

  // .proto.FishBattleEndRsp.FishNoRewardReason no_reward_reason = 14;
  void clear_no_reward_reason();
  static const int kNoRewardReasonFieldNumber = 14;
  ::proto::FishBattleEndRsp_FishNoRewardReason no_reward_reason() const;
  void set_no_reward_reason(::proto::FishBattleEndRsp_FishNoRewardReason value);

  // @@protoc_insertion_point(class_scope:proto.FishBattleEndRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::ItemParam > drop_item_list_;
  ::google::protobuf::RepeatedPtrField< ::proto::ItemParam > reward_item_list_;
  ::google::protobuf::RepeatedPtrField< ::proto::ItemParam > talent_item_list_;
  int battle_result_;
  ::google::protobuf::int32 retcode_;
  bool is_got_reward_;
  int no_reward_reason_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5ffish_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExitFishingReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ExitFishingReq) */ {
 public:
  ExitFishingReq();
  virtual ~ExitFishingReq();

  ExitFishingReq(const ExitFishingReq& from);

  inline ExitFishingReq& operator=(const ExitFishingReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExitFishingReq(ExitFishingReq&& from) noexcept
    : ExitFishingReq() {
    *this = ::std::move(from);
  }

  inline ExitFishingReq& operator=(ExitFishingReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExitFishingReq& default_instance();

  static inline const ExitFishingReq* internal_default_instance() {
    return reinterpret_cast<const ExitFishingReq*>(
               &_ExitFishingReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(ExitFishingReq* other);
  friend void swap(ExitFishingReq& a, ExitFishingReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExitFishingReq* New() const PROTOBUF_FINAL { return New(NULL); }

  ExitFishingReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ExitFishingReq& from);
  void MergeFrom(const ExitFishingReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ExitFishingReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.ExitFishingReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5ffish_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExitFishingRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ExitFishingRsp) */ {
 public:
  ExitFishingRsp();
  virtual ~ExitFishingRsp();

  ExitFishingRsp(const ExitFishingRsp& from);

  inline ExitFishingRsp& operator=(const ExitFishingRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExitFishingRsp(ExitFishingRsp&& from) noexcept
    : ExitFishingRsp() {
    *this = ::std::move(from);
  }

  inline ExitFishingRsp& operator=(ExitFishingRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExitFishingRsp& default_instance();

  static inline const ExitFishingRsp* internal_default_instance() {
    return reinterpret_cast<const ExitFishingRsp*>(
               &_ExitFishingRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(ExitFishingRsp* other);
  friend void swap(ExitFishingRsp& a, ExitFishingRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExitFishingRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  ExitFishingRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ExitFishingRsp& from);
  void MergeFrom(const ExitFishingRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ExitFishingRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 retcode = 9;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 9;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.ExitFishingRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 retcode_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5ffish_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FishAttractNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.FishAttractNotify) */ {
 public:
  FishAttractNotify();
  virtual ~FishAttractNotify();

  FishAttractNotify(const FishAttractNotify& from);

  inline FishAttractNotify& operator=(const FishAttractNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FishAttractNotify(FishAttractNotify&& from) noexcept
    : FishAttractNotify() {
    *this = ::std::move(from);
  }

  inline FishAttractNotify& operator=(FishAttractNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FishAttractNotify& default_instance();

  static inline const FishAttractNotify* internal_default_instance() {
    return reinterpret_cast<const FishAttractNotify*>(
               &_FishAttractNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(FishAttractNotify* other);
  friend void swap(FishAttractNotify& a, FishAttractNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FishAttractNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  FishAttractNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FishAttractNotify& from);
  void MergeFrom(const FishAttractNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FishAttractNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 fish_id_list = 3;
  int fish_id_list_size() const;
  void clear_fish_id_list();
  static const int kFishIdListFieldNumber = 3;
  ::google::protobuf::uint32 fish_id_list(int index) const;
  void set_fish_id_list(int index, ::google::protobuf::uint32 value);
  void add_fish_id_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      fish_id_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_fish_id_list();

  // .proto.Vector pos = 9;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 9;
  const ::proto::Vector& pos() const;
  ::proto::Vector* mutable_pos();
  ::proto::Vector* release_pos();
  void set_allocated_pos(::proto::Vector* pos);

  // uint32 uid = 2;
  void clear_uid();
  static const int kUidFieldNumber = 2;
  ::google::protobuf::uint32 uid() const;
  void set_uid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.FishAttractNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > fish_id_list_;
  mutable int _fish_id_list_cached_byte_size_;
  ::proto::Vector* pos_;
  ::google::protobuf::uint32 uid_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5ffish_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FishBaitGoneNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.FishBaitGoneNotify) */ {
 public:
  FishBaitGoneNotify();
  virtual ~FishBaitGoneNotify();

  FishBaitGoneNotify(const FishBaitGoneNotify& from);

  inline FishBaitGoneNotify& operator=(const FishBaitGoneNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FishBaitGoneNotify(FishBaitGoneNotify&& from) noexcept
    : FishBaitGoneNotify() {
    *this = ::std::move(from);
  }

  inline FishBaitGoneNotify& operator=(FishBaitGoneNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FishBaitGoneNotify& default_instance();

  static inline const FishBaitGoneNotify* internal_default_instance() {
    return reinterpret_cast<const FishBaitGoneNotify*>(
               &_FishBaitGoneNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(FishBaitGoneNotify* other);
  friend void swap(FishBaitGoneNotify& a, FishBaitGoneNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FishBaitGoneNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  FishBaitGoneNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FishBaitGoneNotify& from);
  void MergeFrom(const FishBaitGoneNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FishBaitGoneNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 uid = 8;
  void clear_uid();
  static const int kUidFieldNumber = 8;
  ::google::protobuf::uint32 uid() const;
  void set_uid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.FishBaitGoneNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 uid_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5ffish_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerFishingDataNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.PlayerFishingDataNotify) */ {
 public:
  PlayerFishingDataNotify();
  virtual ~PlayerFishingDataNotify();

  PlayerFishingDataNotify(const PlayerFishingDataNotify& from);

  inline PlayerFishingDataNotify& operator=(const PlayerFishingDataNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerFishingDataNotify(PlayerFishingDataNotify&& from) noexcept
    : PlayerFishingDataNotify() {
    *this = ::std::move(from);
  }

  inline PlayerFishingDataNotify& operator=(PlayerFishingDataNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerFishingDataNotify& default_instance();

  static inline const PlayerFishingDataNotify* internal_default_instance() {
    return reinterpret_cast<const PlayerFishingDataNotify*>(
               &_PlayerFishingDataNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(PlayerFishingDataNotify* other);
  friend void swap(PlayerFishingDataNotify& a, PlayerFishingDataNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerFishingDataNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerFishingDataNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerFishingDataNotify& from);
  void MergeFrom(const PlayerFishingDataNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerFishingDataNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 last_fish_rod_id = 8;
  void clear_last_fish_rod_id();
  static const int kLastFishRodIdFieldNumber = 8;
  ::google::protobuf::uint32 last_fish_rod_id() const;
  void set_last_fish_rod_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.PlayerFishingDataNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 last_fish_rod_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5ffish_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FishPoolDataNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.FishPoolDataNotify) */ {
 public:
  FishPoolDataNotify();
  virtual ~FishPoolDataNotify();

  FishPoolDataNotify(const FishPoolDataNotify& from);

  inline FishPoolDataNotify& operator=(const FishPoolDataNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FishPoolDataNotify(FishPoolDataNotify&& from) noexcept
    : FishPoolDataNotify() {
    *this = ::std::move(from);
  }

  inline FishPoolDataNotify& operator=(FishPoolDataNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FishPoolDataNotify& default_instance();

  static inline const FishPoolDataNotify* internal_default_instance() {
    return reinterpret_cast<const FishPoolDataNotify*>(
               &_FishPoolDataNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(FishPoolDataNotify* other);
  friend void swap(FishPoolDataNotify& a, FishPoolDataNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FishPoolDataNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  FishPoolDataNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FishPoolDataNotify& from);
  void MergeFrom(const FishPoolDataNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FishPoolDataNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 today_fish_num = 2;
  void clear_today_fish_num();
  static const int kTodayFishNumFieldNumber = 2;
  ::google::protobuf::uint32 today_fish_num() const;
  void set_today_fish_num(::google::protobuf::uint32 value);

  // uint32 entity_id = 6;
  void clear_entity_id();
  static const int kEntityIdFieldNumber = 6;
  ::google::protobuf::uint32 entity_id() const;
  void set_entity_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.FishPoolDataNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 today_fish_num_;
  ::google::protobuf::uint32 entity_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5ffish_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EnterFishingReq

// uint32 fish_pool_id = 3;
inline void EnterFishingReq::clear_fish_pool_id() {
  fish_pool_id_ = 0u;
}
inline ::google::protobuf::uint32 EnterFishingReq::fish_pool_id() const {
  // @@protoc_insertion_point(field_get:proto.EnterFishingReq.fish_pool_id)
  return fish_pool_id_;
}
inline void EnterFishingReq::set_fish_pool_id(::google::protobuf::uint32 value) {
  
  fish_pool_id_ = value;
  // @@protoc_insertion_point(field_set:proto.EnterFishingReq.fish_pool_id)
}

// -------------------------------------------------------------------

// EnterFishingRsp

// int32 retcode = 7;
inline void EnterFishingRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 EnterFishingRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.EnterFishingRsp.retcode)
  return retcode_;
}
inline void EnterFishingRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.EnterFishingRsp.retcode)
}

// uint32 fish_pool_id = 9;
inline void EnterFishingRsp::clear_fish_pool_id() {
  fish_pool_id_ = 0u;
}
inline ::google::protobuf::uint32 EnterFishingRsp::fish_pool_id() const {
  // @@protoc_insertion_point(field_get:proto.EnterFishingRsp.fish_pool_id)
  return fish_pool_id_;
}
inline void EnterFishingRsp::set_fish_pool_id(::google::protobuf::uint32 value) {
  
  fish_pool_id_ = value;
  // @@protoc_insertion_point(field_set:proto.EnterFishingRsp.fish_pool_id)
}

// -------------------------------------------------------------------

// StartFishingReq

// uint32 rod_entity_id = 5;
inline void StartFishingReq::clear_rod_entity_id() {
  rod_entity_id_ = 0u;
}
inline ::google::protobuf::uint32 StartFishingReq::rod_entity_id() const {
  // @@protoc_insertion_point(field_get:proto.StartFishingReq.rod_entity_id)
  return rod_entity_id_;
}
inline void StartFishingReq::set_rod_entity_id(::google::protobuf::uint32 value) {
  
  rod_entity_id_ = value;
  // @@protoc_insertion_point(field_set:proto.StartFishingReq.rod_entity_id)
}

// uint32 fish_pool_id = 15;
inline void StartFishingReq::clear_fish_pool_id() {
  fish_pool_id_ = 0u;
}
inline ::google::protobuf::uint32 StartFishingReq::fish_pool_id() const {
  // @@protoc_insertion_point(field_get:proto.StartFishingReq.fish_pool_id)
  return fish_pool_id_;
}
inline void StartFishingReq::set_fish_pool_id(::google::protobuf::uint32 value) {
  
  fish_pool_id_ = value;
  // @@protoc_insertion_point(field_set:proto.StartFishingReq.fish_pool_id)
}

// -------------------------------------------------------------------

// StartFishingRsp

// int32 retcode = 1;
inline void StartFishingRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 StartFishingRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.StartFishingRsp.retcode)
  return retcode_;
}
inline void StartFishingRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.StartFishingRsp.retcode)
}

// uint32 fish_pool_id = 14;
inline void StartFishingRsp::clear_fish_pool_id() {
  fish_pool_id_ = 0u;
}
inline ::google::protobuf::uint32 StartFishingRsp::fish_pool_id() const {
  // @@protoc_insertion_point(field_get:proto.StartFishingRsp.fish_pool_id)
  return fish_pool_id_;
}
inline void StartFishingRsp::set_fish_pool_id(::google::protobuf::uint32 value) {
  
  fish_pool_id_ = value;
  // @@protoc_insertion_point(field_set:proto.StartFishingRsp.fish_pool_id)
}

// -------------------------------------------------------------------

// FishCastRodReq

// uint32 bait_id = 14;
inline void FishCastRodReq::clear_bait_id() {
  bait_id_ = 0u;
}
inline ::google::protobuf::uint32 FishCastRodReq::bait_id() const {
  // @@protoc_insertion_point(field_get:proto.FishCastRodReq.bait_id)
  return bait_id_;
}
inline void FishCastRodReq::set_bait_id(::google::protobuf::uint32 value) {
  
  bait_id_ = value;
  // @@protoc_insertion_point(field_set:proto.FishCastRodReq.bait_id)
}

// uint32 rod_id = 4;
inline void FishCastRodReq::clear_rod_id() {
  rod_id_ = 0u;
}
inline ::google::protobuf::uint32 FishCastRodReq::rod_id() const {
  // @@protoc_insertion_point(field_get:proto.FishCastRodReq.rod_id)
  return rod_id_;
}
inline void FishCastRodReq::set_rod_id(::google::protobuf::uint32 value) {
  
  rod_id_ = value;
  // @@protoc_insertion_point(field_set:proto.FishCastRodReq.rod_id)
}

// uint32 rod_entity_id = 7;
inline void FishCastRodReq::clear_rod_entity_id() {
  rod_entity_id_ = 0u;
}
inline ::google::protobuf::uint32 FishCastRodReq::rod_entity_id() const {
  // @@protoc_insertion_point(field_get:proto.FishCastRodReq.rod_entity_id)
  return rod_entity_id_;
}
inline void FishCastRodReq::set_rod_entity_id(::google::protobuf::uint32 value) {
  
  rod_entity_id_ = value;
  // @@protoc_insertion_point(field_set:proto.FishCastRodReq.rod_entity_id)
}

// .proto.Vector pos = 12;
inline bool FishCastRodReq::has_pos() const {
  return this != internal_default_instance() && pos_ != NULL;
}
inline void FishCastRodReq::clear_pos() {
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) delete pos_;
  pos_ = NULL;
}
inline const ::proto::Vector& FishCastRodReq::pos() const {
  const ::proto::Vector* p = pos_;
  // @@protoc_insertion_point(field_get:proto.FishCastRodReq.pos)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Vector*>(
      &::proto::_Vector_default_instance_);
}
inline ::proto::Vector* FishCastRodReq::mutable_pos() {
  
  if (pos_ == NULL) {
    pos_ = new ::proto::Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.FishCastRodReq.pos)
  return pos_;
}
inline ::proto::Vector* FishCastRodReq::release_pos() {
  // @@protoc_insertion_point(field_release:proto.FishCastRodReq.pos)
  
  ::proto::Vector* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void FishCastRodReq::set_allocated_pos(::proto::Vector* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.FishCastRodReq.pos)
}

// -------------------------------------------------------------------

// FishCastRodRsp

// int32 retcode = 12;
inline void FishCastRodRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 FishCastRodRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.FishCastRodRsp.retcode)
  return retcode_;
}
inline void FishCastRodRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.FishCastRodRsp.retcode)
}

// -------------------------------------------------------------------

// FishChosenNotify

// uint32 fish_id = 12;
inline void FishChosenNotify::clear_fish_id() {
  fish_id_ = 0u;
}
inline ::google::protobuf::uint32 FishChosenNotify::fish_id() const {
  // @@protoc_insertion_point(field_get:proto.FishChosenNotify.fish_id)
  return fish_id_;
}
inline void FishChosenNotify::set_fish_id(::google::protobuf::uint32 value) {
  
  fish_id_ = value;
  // @@protoc_insertion_point(field_set:proto.FishChosenNotify.fish_id)
}

// -------------------------------------------------------------------

// FishEscapeNotify

// .proto.FishEscapeReason reason = 4;
inline void FishEscapeNotify::clear_reason() {
  reason_ = 0;
}
inline ::proto::FishEscapeReason FishEscapeNotify::reason() const {
  // @@protoc_insertion_point(field_get:proto.FishEscapeNotify.reason)
  return static_cast< ::proto::FishEscapeReason >(reason_);
}
inline void FishEscapeNotify::set_reason(::proto::FishEscapeReason value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:proto.FishEscapeNotify.reason)
}

// .proto.Vector pos = 7;
inline bool FishEscapeNotify::has_pos() const {
  return this != internal_default_instance() && pos_ != NULL;
}
inline void FishEscapeNotify::clear_pos() {
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) delete pos_;
  pos_ = NULL;
}
inline const ::proto::Vector& FishEscapeNotify::pos() const {
  const ::proto::Vector* p = pos_;
  // @@protoc_insertion_point(field_get:proto.FishEscapeNotify.pos)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Vector*>(
      &::proto::_Vector_default_instance_);
}
inline ::proto::Vector* FishEscapeNotify::mutable_pos() {
  
  if (pos_ == NULL) {
    pos_ = new ::proto::Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.FishEscapeNotify.pos)
  return pos_;
}
inline ::proto::Vector* FishEscapeNotify::release_pos() {
  // @@protoc_insertion_point(field_release:proto.FishEscapeNotify.pos)
  
  ::proto::Vector* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void FishEscapeNotify::set_allocated_pos(::proto::Vector* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.FishEscapeNotify.pos)
}

// uint32 uid = 14;
inline void FishEscapeNotify::clear_uid() {
  uid_ = 0u;
}
inline ::google::protobuf::uint32 FishEscapeNotify::uid() const {
  // @@protoc_insertion_point(field_get:proto.FishEscapeNotify.uid)
  return uid_;
}
inline void FishEscapeNotify::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.FishEscapeNotify.uid)
}

// repeated uint32 fish_id_list = 6;
inline int FishEscapeNotify::fish_id_list_size() const {
  return fish_id_list_.size();
}
inline void FishEscapeNotify::clear_fish_id_list() {
  fish_id_list_.Clear();
}
inline ::google::protobuf::uint32 FishEscapeNotify::fish_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.FishEscapeNotify.fish_id_list)
  return fish_id_list_.Get(index);
}
inline void FishEscapeNotify::set_fish_id_list(int index, ::google::protobuf::uint32 value) {
  fish_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.FishEscapeNotify.fish_id_list)
}
inline void FishEscapeNotify::add_fish_id_list(::google::protobuf::uint32 value) {
  fish_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.FishEscapeNotify.fish_id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
FishEscapeNotify::fish_id_list() const {
  // @@protoc_insertion_point(field_list:proto.FishEscapeNotify.fish_id_list)
  return fish_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
FishEscapeNotify::mutable_fish_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.FishEscapeNotify.fish_id_list)
  return &fish_id_list_;
}

// -------------------------------------------------------------------

// FishBiteReq

// -------------------------------------------------------------------

// FishBiteRsp

// int32 retcode = 9;
inline void FishBiteRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 FishBiteRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.FishBiteRsp.retcode)
  return retcode_;
}
inline void FishBiteRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.FishBiteRsp.retcode)
}

// -------------------------------------------------------------------

// FishBattleBeginReq

// -------------------------------------------------------------------

// FishBattleBeginRsp

// int32 retcode = 10;
inline void FishBattleBeginRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 FishBattleBeginRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.FishBattleBeginRsp.retcode)
  return retcode_;
}
inline void FishBattleBeginRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.FishBattleBeginRsp.retcode)
}

// -------------------------------------------------------------------

// FishBattleEndReq

// uint32 max_bonus_time = 3;
inline void FishBattleEndReq::clear_max_bonus_time() {
  max_bonus_time_ = 0u;
}
inline ::google::protobuf::uint32 FishBattleEndReq::max_bonus_time() const {
  // @@protoc_insertion_point(field_get:proto.FishBattleEndReq.max_bonus_time)
  return max_bonus_time_;
}
inline void FishBattleEndReq::set_max_bonus_time(::google::protobuf::uint32 value) {
  
  max_bonus_time_ = value;
  // @@protoc_insertion_point(field_set:proto.FishBattleEndReq.max_bonus_time)
}

// .proto.FishBattleResult battle_result = 10;
inline void FishBattleEndReq::clear_battle_result() {
  battle_result_ = 0;
}
inline ::proto::FishBattleResult FishBattleEndReq::battle_result() const {
  // @@protoc_insertion_point(field_get:proto.FishBattleEndReq.battle_result)
  return static_cast< ::proto::FishBattleResult >(battle_result_);
}
inline void FishBattleEndReq::set_battle_result(::proto::FishBattleResult value) {
  
  battle_result_ = value;
  // @@protoc_insertion_point(field_set:proto.FishBattleEndReq.battle_result)
}

// bool is_always_bonus = 11;
inline void FishBattleEndReq::clear_is_always_bonus() {
  is_always_bonus_ = false;
}
inline bool FishBattleEndReq::is_always_bonus() const {
  // @@protoc_insertion_point(field_get:proto.FishBattleEndReq.is_always_bonus)
  return is_always_bonus_;
}
inline void FishBattleEndReq::set_is_always_bonus(bool value) {
  
  is_always_bonus_ = value;
  // @@protoc_insertion_point(field_set:proto.FishBattleEndReq.is_always_bonus)
}

// -------------------------------------------------------------------

// FishBattleEndRsp

// bool is_got_reward = 10;
inline void FishBattleEndRsp::clear_is_got_reward() {
  is_got_reward_ = false;
}
inline bool FishBattleEndRsp::is_got_reward() const {
  // @@protoc_insertion_point(field_get:proto.FishBattleEndRsp.is_got_reward)
  return is_got_reward_;
}
inline void FishBattleEndRsp::set_is_got_reward(bool value) {
  
  is_got_reward_ = value;
  // @@protoc_insertion_point(field_set:proto.FishBattleEndRsp.is_got_reward)
}

// repeated .proto.ItemParam reward_item_list = 11;
inline int FishBattleEndRsp::reward_item_list_size() const {
  return reward_item_list_.size();
}
inline void FishBattleEndRsp::clear_reward_item_list() {
  reward_item_list_.Clear();
}
inline const ::proto::ItemParam& FishBattleEndRsp::reward_item_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.FishBattleEndRsp.reward_item_list)
  return reward_item_list_.Get(index);
}
inline ::proto::ItemParam* FishBattleEndRsp::mutable_reward_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.FishBattleEndRsp.reward_item_list)
  return reward_item_list_.Mutable(index);
}
inline ::proto::ItemParam* FishBattleEndRsp::add_reward_item_list() {
  // @@protoc_insertion_point(field_add:proto.FishBattleEndRsp.reward_item_list)
  return reward_item_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >*
FishBattleEndRsp::mutable_reward_item_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.FishBattleEndRsp.reward_item_list)
  return &reward_item_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >&
FishBattleEndRsp::reward_item_list() const {
  // @@protoc_insertion_point(field_list:proto.FishBattleEndRsp.reward_item_list)
  return reward_item_list_;
}

// repeated .proto.ItemParam talent_item_list = 13;
inline int FishBattleEndRsp::talent_item_list_size() const {
  return talent_item_list_.size();
}
inline void FishBattleEndRsp::clear_talent_item_list() {
  talent_item_list_.Clear();
}
inline const ::proto::ItemParam& FishBattleEndRsp::talent_item_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.FishBattleEndRsp.talent_item_list)
  return talent_item_list_.Get(index);
}
inline ::proto::ItemParam* FishBattleEndRsp::mutable_talent_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.FishBattleEndRsp.talent_item_list)
  return talent_item_list_.Mutable(index);
}
inline ::proto::ItemParam* FishBattleEndRsp::add_talent_item_list() {
  // @@protoc_insertion_point(field_add:proto.FishBattleEndRsp.talent_item_list)
  return talent_item_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >*
FishBattleEndRsp::mutable_talent_item_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.FishBattleEndRsp.talent_item_list)
  return &talent_item_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >&
FishBattleEndRsp::talent_item_list() const {
  // @@protoc_insertion_point(field_list:proto.FishBattleEndRsp.talent_item_list)
  return talent_item_list_;
}

// repeated .proto.ItemParam drop_item_list = 9;
inline int FishBattleEndRsp::drop_item_list_size() const {
  return drop_item_list_.size();
}
inline void FishBattleEndRsp::clear_drop_item_list() {
  drop_item_list_.Clear();
}
inline const ::proto::ItemParam& FishBattleEndRsp::drop_item_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.FishBattleEndRsp.drop_item_list)
  return drop_item_list_.Get(index);
}
inline ::proto::ItemParam* FishBattleEndRsp::mutable_drop_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.FishBattleEndRsp.drop_item_list)
  return drop_item_list_.Mutable(index);
}
inline ::proto::ItemParam* FishBattleEndRsp::add_drop_item_list() {
  // @@protoc_insertion_point(field_add:proto.FishBattleEndRsp.drop_item_list)
  return drop_item_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >*
FishBattleEndRsp::mutable_drop_item_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.FishBattleEndRsp.drop_item_list)
  return &drop_item_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >&
FishBattleEndRsp::drop_item_list() const {
  // @@protoc_insertion_point(field_list:proto.FishBattleEndRsp.drop_item_list)
  return drop_item_list_;
}

// int32 retcode = 7;
inline void FishBattleEndRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 FishBattleEndRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.FishBattleEndRsp.retcode)
  return retcode_;
}
inline void FishBattleEndRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.FishBattleEndRsp.retcode)
}

// .proto.FishBattleEndRsp.FishNoRewardReason no_reward_reason = 14;
inline void FishBattleEndRsp::clear_no_reward_reason() {
  no_reward_reason_ = 0;
}
inline ::proto::FishBattleEndRsp_FishNoRewardReason FishBattleEndRsp::no_reward_reason() const {
  // @@protoc_insertion_point(field_get:proto.FishBattleEndRsp.no_reward_reason)
  return static_cast< ::proto::FishBattleEndRsp_FishNoRewardReason >(no_reward_reason_);
}
inline void FishBattleEndRsp::set_no_reward_reason(::proto::FishBattleEndRsp_FishNoRewardReason value) {
  
  no_reward_reason_ = value;
  // @@protoc_insertion_point(field_set:proto.FishBattleEndRsp.no_reward_reason)
}

// .proto.FishBattleResult battle_result = 6;
inline void FishBattleEndRsp::clear_battle_result() {
  battle_result_ = 0;
}
inline ::proto::FishBattleResult FishBattleEndRsp::battle_result() const {
  // @@protoc_insertion_point(field_get:proto.FishBattleEndRsp.battle_result)
  return static_cast< ::proto::FishBattleResult >(battle_result_);
}
inline void FishBattleEndRsp::set_battle_result(::proto::FishBattleResult value) {
  
  battle_result_ = value;
  // @@protoc_insertion_point(field_set:proto.FishBattleEndRsp.battle_result)
}

// -------------------------------------------------------------------

// ExitFishingReq

// -------------------------------------------------------------------

// ExitFishingRsp

// int32 retcode = 9;
inline void ExitFishingRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 ExitFishingRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.ExitFishingRsp.retcode)
  return retcode_;
}
inline void ExitFishingRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.ExitFishingRsp.retcode)
}

// -------------------------------------------------------------------

// FishAttractNotify

// repeated uint32 fish_id_list = 3;
inline int FishAttractNotify::fish_id_list_size() const {
  return fish_id_list_.size();
}
inline void FishAttractNotify::clear_fish_id_list() {
  fish_id_list_.Clear();
}
inline ::google::protobuf::uint32 FishAttractNotify::fish_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.FishAttractNotify.fish_id_list)
  return fish_id_list_.Get(index);
}
inline void FishAttractNotify::set_fish_id_list(int index, ::google::protobuf::uint32 value) {
  fish_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.FishAttractNotify.fish_id_list)
}
inline void FishAttractNotify::add_fish_id_list(::google::protobuf::uint32 value) {
  fish_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.FishAttractNotify.fish_id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
FishAttractNotify::fish_id_list() const {
  // @@protoc_insertion_point(field_list:proto.FishAttractNotify.fish_id_list)
  return fish_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
FishAttractNotify::mutable_fish_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.FishAttractNotify.fish_id_list)
  return &fish_id_list_;
}

// .proto.Vector pos = 9;
inline bool FishAttractNotify::has_pos() const {
  return this != internal_default_instance() && pos_ != NULL;
}
inline void FishAttractNotify::clear_pos() {
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) delete pos_;
  pos_ = NULL;
}
inline const ::proto::Vector& FishAttractNotify::pos() const {
  const ::proto::Vector* p = pos_;
  // @@protoc_insertion_point(field_get:proto.FishAttractNotify.pos)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Vector*>(
      &::proto::_Vector_default_instance_);
}
inline ::proto::Vector* FishAttractNotify::mutable_pos() {
  
  if (pos_ == NULL) {
    pos_ = new ::proto::Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.FishAttractNotify.pos)
  return pos_;
}
inline ::proto::Vector* FishAttractNotify::release_pos() {
  // @@protoc_insertion_point(field_release:proto.FishAttractNotify.pos)
  
  ::proto::Vector* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void FishAttractNotify::set_allocated_pos(::proto::Vector* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.FishAttractNotify.pos)
}

// uint32 uid = 2;
inline void FishAttractNotify::clear_uid() {
  uid_ = 0u;
}
inline ::google::protobuf::uint32 FishAttractNotify::uid() const {
  // @@protoc_insertion_point(field_get:proto.FishAttractNotify.uid)
  return uid_;
}
inline void FishAttractNotify::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.FishAttractNotify.uid)
}

// -------------------------------------------------------------------

// FishBaitGoneNotify

// uint32 uid = 8;
inline void FishBaitGoneNotify::clear_uid() {
  uid_ = 0u;
}
inline ::google::protobuf::uint32 FishBaitGoneNotify::uid() const {
  // @@protoc_insertion_point(field_get:proto.FishBaitGoneNotify.uid)
  return uid_;
}
inline void FishBaitGoneNotify::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.FishBaitGoneNotify.uid)
}

// -------------------------------------------------------------------

// PlayerFishingDataNotify

// uint32 last_fish_rod_id = 8;
inline void PlayerFishingDataNotify::clear_last_fish_rod_id() {
  last_fish_rod_id_ = 0u;
}
inline ::google::protobuf::uint32 PlayerFishingDataNotify::last_fish_rod_id() const {
  // @@protoc_insertion_point(field_get:proto.PlayerFishingDataNotify.last_fish_rod_id)
  return last_fish_rod_id_;
}
inline void PlayerFishingDataNotify::set_last_fish_rod_id(::google::protobuf::uint32 value) {
  
  last_fish_rod_id_ = value;
  // @@protoc_insertion_point(field_set:proto.PlayerFishingDataNotify.last_fish_rod_id)
}

// -------------------------------------------------------------------

// FishPoolDataNotify

// uint32 entity_id = 6;
inline void FishPoolDataNotify::clear_entity_id() {
  entity_id_ = 0u;
}
inline ::google::protobuf::uint32 FishPoolDataNotify::entity_id() const {
  // @@protoc_insertion_point(field_get:proto.FishPoolDataNotify.entity_id)
  return entity_id_;
}
inline void FishPoolDataNotify::set_entity_id(::google::protobuf::uint32 value) {
  
  entity_id_ = value;
  // @@protoc_insertion_point(field_set:proto.FishPoolDataNotify.entity_id)
}

// uint32 today_fish_num = 2;
inline void FishPoolDataNotify::clear_today_fish_num() {
  today_fish_num_ = 0u;
}
inline ::google::protobuf::uint32 FishPoolDataNotify::today_fish_num() const {
  // @@protoc_insertion_point(field_get:proto.FishPoolDataNotify.today_fish_num)
  return today_fish_num_;
}
inline void FishPoolDataNotify::set_today_fish_num(::google::protobuf::uint32 value) {
  
  today_fish_num_ = value;
  // @@protoc_insertion_point(field_set:proto.FishPoolDataNotify.today_fish_num)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace proto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::proto::FishBattleEndRsp_FishNoRewardReason> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::FishBattleEndRsp_FishNoRewardReason>() {
  return ::proto::FishBattleEndRsp_FishNoRewardReason_descriptor();
}
template <> struct is_proto_enum< ::proto::FishEscapeReason> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::FishEscapeReason>() {
  return ::proto::FishEscapeReason_descriptor();
}
template <> struct is_proto_enum< ::proto::FishBattleResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::FishBattleResult>() {
  return ::proto::FishBattleResult_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cmd_2fcmd_5ffish_2eproto__INCLUDED
