// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cmd/cmd_battle_pass.proto

#ifndef PROTOBUF_cmd_2fcmd_5fbattle_5fpass_2eproto__INCLUDED
#define PROTOBUF_cmd_2fcmd_5fbattle_5fpass_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "define.pb.h"
// @@protoc_insertion_point(includes)
namespace proto {
class BattlePassAllDataNotify;
class BattlePassAllDataNotifyDefaultTypeInternal;
extern BattlePassAllDataNotifyDefaultTypeInternal _BattlePassAllDataNotify_default_instance_;
class BattlePassBuySuccNotify;
class BattlePassBuySuccNotifyDefaultTypeInternal;
extern BattlePassBuySuccNotifyDefaultTypeInternal _BattlePassBuySuccNotify_default_instance_;
class BattlePassCurScheduleUpdateNotify;
class BattlePassCurScheduleUpdateNotifyDefaultTypeInternal;
extern BattlePassCurScheduleUpdateNotifyDefaultTypeInternal _BattlePassCurScheduleUpdateNotify_default_instance_;
class BattlePassCycle;
class BattlePassCycleDefaultTypeInternal;
extern BattlePassCycleDefaultTypeInternal _BattlePassCycle_default_instance_;
class BattlePassMission;
class BattlePassMissionDefaultTypeInternal;
extern BattlePassMissionDefaultTypeInternal _BattlePassMission_default_instance_;
class BattlePassMissionDelNotify;
class BattlePassMissionDelNotifyDefaultTypeInternal;
extern BattlePassMissionDelNotifyDefaultTypeInternal _BattlePassMissionDelNotify_default_instance_;
class BattlePassMissionUpdateNotify;
class BattlePassMissionUpdateNotifyDefaultTypeInternal;
extern BattlePassMissionUpdateNotifyDefaultTypeInternal _BattlePassMissionUpdateNotify_default_instance_;
class BattlePassProduct;
class BattlePassProductDefaultTypeInternal;
extern BattlePassProductDefaultTypeInternal _BattlePassProduct_default_instance_;
class BattlePassRewardTag;
class BattlePassRewardTagDefaultTypeInternal;
extern BattlePassRewardTagDefaultTypeInternal _BattlePassRewardTag_default_instance_;
class BattlePassRewardTakeOption;
class BattlePassRewardTakeOptionDefaultTypeInternal;
extern BattlePassRewardTakeOptionDefaultTypeInternal _BattlePassRewardTakeOption_default_instance_;
class BattlePassSchedule;
class BattlePassScheduleDefaultTypeInternal;
extern BattlePassScheduleDefaultTypeInternal _BattlePassSchedule_default_instance_;
class BuyBattlePassLevelReq;
class BuyBattlePassLevelReqDefaultTypeInternal;
extern BuyBattlePassLevelReqDefaultTypeInternal _BuyBattlePassLevelReq_default_instance_;
class BuyBattlePassLevelRsp;
class BuyBattlePassLevelRspDefaultTypeInternal;
extern BuyBattlePassLevelRspDefaultTypeInternal _BuyBattlePassLevelRsp_default_instance_;
class GetBattlePassProductReq;
class GetBattlePassProductReqDefaultTypeInternal;
extern GetBattlePassProductReqDefaultTypeInternal _GetBattlePassProductReq_default_instance_;
class GetBattlePassProductRsp;
class GetBattlePassProductRspDefaultTypeInternal;
extern GetBattlePassProductRspDefaultTypeInternal _GetBattlePassProductRsp_default_instance_;
class SetBattlePassViewedReq;
class SetBattlePassViewedReqDefaultTypeInternal;
extern SetBattlePassViewedReqDefaultTypeInternal _SetBattlePassViewedReq_default_instance_;
class SetBattlePassViewedRsp;
class SetBattlePassViewedRspDefaultTypeInternal;
extern SetBattlePassViewedRspDefaultTypeInternal _SetBattlePassViewedRsp_default_instance_;
class TakeBattlePassMissionPointReq;
class TakeBattlePassMissionPointReqDefaultTypeInternal;
extern TakeBattlePassMissionPointReqDefaultTypeInternal _TakeBattlePassMissionPointReq_default_instance_;
class TakeBattlePassMissionPointRsp;
class TakeBattlePassMissionPointRspDefaultTypeInternal;
extern TakeBattlePassMissionPointRspDefaultTypeInternal _TakeBattlePassMissionPointRsp_default_instance_;
class TakeBattlePassRewardReq;
class TakeBattlePassRewardReqDefaultTypeInternal;
extern TakeBattlePassRewardReqDefaultTypeInternal _TakeBattlePassRewardReq_default_instance_;
class TakeBattlePassRewardRsp;
class TakeBattlePassRewardRspDefaultTypeInternal;
extern TakeBattlePassRewardRspDefaultTypeInternal _TakeBattlePassRewardRsp_default_instance_;
}  // namespace proto

namespace proto {

namespace protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto

enum BattlePassMission_MissionStatus {
  BattlePassMission_MissionStatus_MISSION_INVALID = 0,
  BattlePassMission_MissionStatus_MISSION_UNFINISHED = 1,
  BattlePassMission_MissionStatus_MISSION_FINISHED = 2,
  BattlePassMission_MissionStatus_MISSION_POINT_TAKEN = 3,
  BattlePassMission_MissionStatus_BattlePassMission_MissionStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  BattlePassMission_MissionStatus_BattlePassMission_MissionStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool BattlePassMission_MissionStatus_IsValid(int value);
const BattlePassMission_MissionStatus BattlePassMission_MissionStatus_MissionStatus_MIN = BattlePassMission_MissionStatus_MISSION_INVALID;
const BattlePassMission_MissionStatus BattlePassMission_MissionStatus_MissionStatus_MAX = BattlePassMission_MissionStatus_MISSION_POINT_TAKEN;
const int BattlePassMission_MissionStatus_MissionStatus_ARRAYSIZE = BattlePassMission_MissionStatus_MissionStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* BattlePassMission_MissionStatus_descriptor();
inline const ::std::string& BattlePassMission_MissionStatus_Name(BattlePassMission_MissionStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    BattlePassMission_MissionStatus_descriptor(), value);
}
inline bool BattlePassMission_MissionStatus_Parse(
    const ::std::string& name, BattlePassMission_MissionStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BattlePassMission_MissionStatus>(
    BattlePassMission_MissionStatus_descriptor(), name, value);
}
enum BattlePassUnlockStatus {
  BATTLE_PASS_UNLOCK_INVALID = 0,
  BATTLE_PASS_UNLOCK_FREE = 1,
  BATTLE_PASS_UNLOCK_PAID = 2,
  BattlePassUnlockStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  BattlePassUnlockStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool BattlePassUnlockStatus_IsValid(int value);
const BattlePassUnlockStatus BattlePassUnlockStatus_MIN = BATTLE_PASS_UNLOCK_INVALID;
const BattlePassUnlockStatus BattlePassUnlockStatus_MAX = BATTLE_PASS_UNLOCK_PAID;
const int BattlePassUnlockStatus_ARRAYSIZE = BattlePassUnlockStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* BattlePassUnlockStatus_descriptor();
inline const ::std::string& BattlePassUnlockStatus_Name(BattlePassUnlockStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    BattlePassUnlockStatus_descriptor(), value);
}
inline bool BattlePassUnlockStatus_Parse(
    const ::std::string& name, BattlePassUnlockStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BattlePassUnlockStatus>(
    BattlePassUnlockStatus_descriptor(), name, value);
}
// ===================================================================

class BattlePassCycle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.BattlePassCycle) */ {
 public:
  BattlePassCycle();
  virtual ~BattlePassCycle();

  BattlePassCycle(const BattlePassCycle& from);

  inline BattlePassCycle& operator=(const BattlePassCycle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BattlePassCycle(BattlePassCycle&& from) noexcept
    : BattlePassCycle() {
    *this = ::std::move(from);
  }

  inline BattlePassCycle& operator=(BattlePassCycle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BattlePassCycle& default_instance();

  static inline const BattlePassCycle* internal_default_instance() {
    return reinterpret_cast<const BattlePassCycle*>(
               &_BattlePassCycle_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(BattlePassCycle* other);
  friend void swap(BattlePassCycle& a, BattlePassCycle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BattlePassCycle* New() const PROTOBUF_FINAL { return New(NULL); }

  BattlePassCycle* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BattlePassCycle& from);
  void MergeFrom(const BattlePassCycle& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BattlePassCycle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 begin_time = 13;
  void clear_begin_time();
  static const int kBeginTimeFieldNumber = 13;
  ::google::protobuf::uint32 begin_time() const;
  void set_begin_time(::google::protobuf::uint32 value);

  // uint32 cycle_idx = 3;
  void clear_cycle_idx();
  static const int kCycleIdxFieldNumber = 3;
  ::google::protobuf::uint32 cycle_idx() const;
  void set_cycle_idx(::google::protobuf::uint32 value);

  // uint32 end_time = 10;
  void clear_end_time();
  static const int kEndTimeFieldNumber = 10;
  ::google::protobuf::uint32 end_time() const;
  void set_end_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.BattlePassCycle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 begin_time_;
  ::google::protobuf::uint32 cycle_idx_;
  ::google::protobuf::uint32 end_time_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BattlePassMission : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.BattlePassMission) */ {
 public:
  BattlePassMission();
  virtual ~BattlePassMission();

  BattlePassMission(const BattlePassMission& from);

  inline BattlePassMission& operator=(const BattlePassMission& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BattlePassMission(BattlePassMission&& from) noexcept
    : BattlePassMission() {
    *this = ::std::move(from);
  }

  inline BattlePassMission& operator=(BattlePassMission&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BattlePassMission& default_instance();

  static inline const BattlePassMission* internal_default_instance() {
    return reinterpret_cast<const BattlePassMission*>(
               &_BattlePassMission_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(BattlePassMission* other);
  friend void swap(BattlePassMission& a, BattlePassMission& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BattlePassMission* New() const PROTOBUF_FINAL { return New(NULL); }

  BattlePassMission* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BattlePassMission& from);
  void MergeFrom(const BattlePassMission& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BattlePassMission* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef BattlePassMission_MissionStatus MissionStatus;
  static const MissionStatus MISSION_INVALID =
    BattlePassMission_MissionStatus_MISSION_INVALID;
  static const MissionStatus MISSION_UNFINISHED =
    BattlePassMission_MissionStatus_MISSION_UNFINISHED;
  static const MissionStatus MISSION_FINISHED =
    BattlePassMission_MissionStatus_MISSION_FINISHED;
  static const MissionStatus MISSION_POINT_TAKEN =
    BattlePassMission_MissionStatus_MISSION_POINT_TAKEN;
  static inline bool MissionStatus_IsValid(int value) {
    return BattlePassMission_MissionStatus_IsValid(value);
  }
  static const MissionStatus MissionStatus_MIN =
    BattlePassMission_MissionStatus_MissionStatus_MIN;
  static const MissionStatus MissionStatus_MAX =
    BattlePassMission_MissionStatus_MissionStatus_MAX;
  static const int MissionStatus_ARRAYSIZE =
    BattlePassMission_MissionStatus_MissionStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MissionStatus_descriptor() {
    return BattlePassMission_MissionStatus_descriptor();
  }
  static inline const ::std::string& MissionStatus_Name(MissionStatus value) {
    return BattlePassMission_MissionStatus_Name(value);
  }
  static inline bool MissionStatus_Parse(const ::std::string& name,
      MissionStatus* value) {
    return BattlePassMission_MissionStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // uint32 reward_battle_pass_point = 3;
  void clear_reward_battle_pass_point();
  static const int kRewardBattlePassPointFieldNumber = 3;
  ::google::protobuf::uint32 reward_battle_pass_point() const;
  void set_reward_battle_pass_point(::google::protobuf::uint32 value);

  // uint32 total_progress = 6;
  void clear_total_progress();
  static const int kTotalProgressFieldNumber = 6;
  ::google::protobuf::uint32 total_progress() const;
  void set_total_progress(::google::protobuf::uint32 value);

  // uint32 mission_id = 11;
  void clear_mission_id();
  static const int kMissionIdFieldNumber = 11;
  ::google::protobuf::uint32 mission_id() const;
  void set_mission_id(::google::protobuf::uint32 value);

  // uint32 mission_type = 12;
  void clear_mission_type();
  static const int kMissionTypeFieldNumber = 12;
  ::google::protobuf::uint32 mission_type() const;
  void set_mission_type(::google::protobuf::uint32 value);

  // uint32 cur_progress = 13;
  void clear_cur_progress();
  static const int kCurProgressFieldNumber = 13;
  ::google::protobuf::uint32 cur_progress() const;
  void set_cur_progress(::google::protobuf::uint32 value);

  // .proto.BattlePassMission.MissionStatus mission_status = 15;
  void clear_mission_status();
  static const int kMissionStatusFieldNumber = 15;
  ::proto::BattlePassMission_MissionStatus mission_status() const;
  void set_mission_status(::proto::BattlePassMission_MissionStatus value);

  // @@protoc_insertion_point(class_scope:proto.BattlePassMission)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 reward_battle_pass_point_;
  ::google::protobuf::uint32 total_progress_;
  ::google::protobuf::uint32 mission_id_;
  ::google::protobuf::uint32 mission_type_;
  ::google::protobuf::uint32 cur_progress_;
  int mission_status_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BattlePassRewardTag : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.BattlePassRewardTag) */ {
 public:
  BattlePassRewardTag();
  virtual ~BattlePassRewardTag();

  BattlePassRewardTag(const BattlePassRewardTag& from);

  inline BattlePassRewardTag& operator=(const BattlePassRewardTag& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BattlePassRewardTag(BattlePassRewardTag&& from) noexcept
    : BattlePassRewardTag() {
    *this = ::std::move(from);
  }

  inline BattlePassRewardTag& operator=(BattlePassRewardTag&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BattlePassRewardTag& default_instance();

  static inline const BattlePassRewardTag* internal_default_instance() {
    return reinterpret_cast<const BattlePassRewardTag*>(
               &_BattlePassRewardTag_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(BattlePassRewardTag* other);
  friend void swap(BattlePassRewardTag& a, BattlePassRewardTag& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BattlePassRewardTag* New() const PROTOBUF_FINAL { return New(NULL); }

  BattlePassRewardTag* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BattlePassRewardTag& from);
  void MergeFrom(const BattlePassRewardTag& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BattlePassRewardTag* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.BattlePassUnlockStatus unlock_status = 2;
  void clear_unlock_status();
  static const int kUnlockStatusFieldNumber = 2;
  ::proto::BattlePassUnlockStatus unlock_status() const;
  void set_unlock_status(::proto::BattlePassUnlockStatus value);

  // uint32 level = 4;
  void clear_level();
  static const int kLevelFieldNumber = 4;
  ::google::protobuf::uint32 level() const;
  void set_level(::google::protobuf::uint32 value);

  // uint32 reward_id = 7;
  void clear_reward_id();
  static const int kRewardIdFieldNumber = 7;
  ::google::protobuf::uint32 reward_id() const;
  void set_reward_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.BattlePassRewardTag)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int unlock_status_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 reward_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BattlePassProduct : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.BattlePassProduct) */ {
 public:
  BattlePassProduct();
  virtual ~BattlePassProduct();

  BattlePassProduct(const BattlePassProduct& from);

  inline BattlePassProduct& operator=(const BattlePassProduct& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BattlePassProduct(BattlePassProduct&& from) noexcept
    : BattlePassProduct() {
    *this = ::std::move(from);
  }

  inline BattlePassProduct& operator=(BattlePassProduct&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BattlePassProduct& default_instance();

  static inline const BattlePassProduct* internal_default_instance() {
    return reinterpret_cast<const BattlePassProduct*>(
               &_BattlePassProduct_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(BattlePassProduct* other);
  friend void swap(BattlePassProduct& a, BattlePassProduct& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BattlePassProduct* New() const PROTOBUF_FINAL { return New(NULL); }

  BattlePassProduct* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BattlePassProduct& from);
  void MergeFrom(const BattlePassProduct& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BattlePassProduct* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string upgrade_product_id = 6;
  void clear_upgrade_product_id();
  static const int kUpgradeProductIdFieldNumber = 6;
  const ::std::string& upgrade_product_id() const;
  void set_upgrade_product_id(const ::std::string& value);
  #if LANG_CXX11
  void set_upgrade_product_id(::std::string&& value);
  #endif
  void set_upgrade_product_id(const char* value);
  void set_upgrade_product_id(const char* value, size_t size);
  ::std::string* mutable_upgrade_product_id();
  ::std::string* release_upgrade_product_id();
  void set_allocated_upgrade_product_id(::std::string* upgrade_product_id);

  // string extra_product_id = 10;
  void clear_extra_product_id();
  static const int kExtraProductIdFieldNumber = 10;
  const ::std::string& extra_product_id() const;
  void set_extra_product_id(const ::std::string& value);
  #if LANG_CXX11
  void set_extra_product_id(::std::string&& value);
  #endif
  void set_extra_product_id(const char* value);
  void set_extra_product_id(const char* value, size_t size);
  ::std::string* mutable_extra_product_id();
  ::std::string* release_extra_product_id();
  void set_allocated_extra_product_id(::std::string* extra_product_id);

  // string normal_product_id = 13;
  void clear_normal_product_id();
  static const int kNormalProductIdFieldNumber = 13;
  const ::std::string& normal_product_id() const;
  void set_normal_product_id(const ::std::string& value);
  #if LANG_CXX11
  void set_normal_product_id(::std::string&& value);
  #endif
  void set_normal_product_id(const char* value);
  void set_normal_product_id(const char* value, size_t size);
  ::std::string* mutable_normal_product_id();
  ::std::string* release_normal_product_id();
  void set_allocated_normal_product_id(::std::string* normal_product_id);

  // @@protoc_insertion_point(class_scope:proto.BattlePassProduct)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr upgrade_product_id_;
  ::google::protobuf::internal::ArenaStringPtr extra_product_id_;
  ::google::protobuf::internal::ArenaStringPtr normal_product_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BattlePassSchedule : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.BattlePassSchedule) */ {
 public:
  BattlePassSchedule();
  virtual ~BattlePassSchedule();

  BattlePassSchedule(const BattlePassSchedule& from);

  inline BattlePassSchedule& operator=(const BattlePassSchedule& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BattlePassSchedule(BattlePassSchedule&& from) noexcept
    : BattlePassSchedule() {
    *this = ::std::move(from);
  }

  inline BattlePassSchedule& operator=(BattlePassSchedule&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BattlePassSchedule& default_instance();

  static inline const BattlePassSchedule* internal_default_instance() {
    return reinterpret_cast<const BattlePassSchedule*>(
               &_BattlePassSchedule_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(BattlePassSchedule* other);
  friend void swap(BattlePassSchedule& a, BattlePassSchedule& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BattlePassSchedule* New() const PROTOBUF_FINAL { return New(NULL); }

  BattlePassSchedule* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BattlePassSchedule& from);
  void MergeFrom(const BattlePassSchedule& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BattlePassSchedule* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.BattlePassRewardTag reward_taken_list = 11;
  int reward_taken_list_size() const;
  void clear_reward_taken_list();
  static const int kRewardTakenListFieldNumber = 11;
  const ::proto::BattlePassRewardTag& reward_taken_list(int index) const;
  ::proto::BattlePassRewardTag* mutable_reward_taken_list(int index);
  ::proto::BattlePassRewardTag* add_reward_taken_list();
  ::google::protobuf::RepeatedPtrField< ::proto::BattlePassRewardTag >*
      mutable_reward_taken_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::BattlePassRewardTag >&
      reward_taken_list() const;

  // .proto.BattlePassCycle cur_cycle = 4;
  bool has_cur_cycle() const;
  void clear_cur_cycle();
  static const int kCurCycleFieldNumber = 4;
  const ::proto::BattlePassCycle& cur_cycle() const;
  ::proto::BattlePassCycle* mutable_cur_cycle();
  ::proto::BattlePassCycle* release_cur_cycle();
  void set_allocated_cur_cycle(::proto::BattlePassCycle* cur_cycle);

  // .proto.BattlePassProduct product_info = 13;
  bool has_product_info() const;
  void clear_product_info();
  static const int kProductInfoFieldNumber = 13;
  const ::proto::BattlePassProduct& product_info() const;
  ::proto::BattlePassProduct* mutable_product_info();
  ::proto::BattlePassProduct* release_product_info();
  void set_allocated_product_info(::proto::BattlePassProduct* product_info);

  // uint32 point = 1;
  void clear_point();
  static const int kPointFieldNumber = 1;
  ::google::protobuf::uint32 point() const;
  void set_point(::google::protobuf::uint32 value);

  // uint32 begin_time = 2;
  void clear_begin_time();
  static const int kBeginTimeFieldNumber = 2;
  ::google::protobuf::uint32 begin_time() const;
  void set_begin_time(::google::protobuf::uint32 value);

  // bool is_extra_paid_reward_taken = 6;
  void clear_is_extra_paid_reward_taken();
  static const int kIsExtraPaidRewardTakenFieldNumber = 6;
  bool is_extra_paid_reward_taken() const;
  void set_is_extra_paid_reward_taken(bool value);

  // bool is_viewed = 3;
  void clear_is_viewed();
  static const int kIsViewedFieldNumber = 3;
  bool is_viewed() const;
  void set_is_viewed(bool value);

  // .proto.BattlePassUnlockStatus unlock_status = 7;
  void clear_unlock_status();
  static const int kUnlockStatusFieldNumber = 7;
  ::proto::BattlePassUnlockStatus unlock_status() const;
  void set_unlock_status(::proto::BattlePassUnlockStatus value);

  // uint32 schedule_id = 9;
  void clear_schedule_id();
  static const int kScheduleIdFieldNumber = 9;
  ::google::protobuf::uint32 schedule_id() const;
  void set_schedule_id(::google::protobuf::uint32 value);

  // uint32 cur_cycle_points = 10;
  void clear_cur_cycle_points();
  static const int kCurCyclePointsFieldNumber = 10;
  ::google::protobuf::uint32 cur_cycle_points() const;
  void set_cur_cycle_points(::google::protobuf::uint32 value);

  // uint32 paid_platform_flags = 12;
  void clear_paid_platform_flags();
  static const int kPaidPlatformFlagsFieldNumber = 12;
  ::google::protobuf::uint32 paid_platform_flags() const;
  void set_paid_platform_flags(::google::protobuf::uint32 value);

  // uint32 level = 14;
  void clear_level();
  static const int kLevelFieldNumber = 14;
  ::google::protobuf::uint32 level() const;
  void set_level(::google::protobuf::uint32 value);

  // uint32 end_time = 15;
  void clear_end_time();
  static const int kEndTimeFieldNumber = 15;
  ::google::protobuf::uint32 end_time() const;
  void set_end_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.BattlePassSchedule)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::BattlePassRewardTag > reward_taken_list_;
  ::proto::BattlePassCycle* cur_cycle_;
  ::proto::BattlePassProduct* product_info_;
  ::google::protobuf::uint32 point_;
  ::google::protobuf::uint32 begin_time_;
  bool is_extra_paid_reward_taken_;
  bool is_viewed_;
  int unlock_status_;
  ::google::protobuf::uint32 schedule_id_;
  ::google::protobuf::uint32 cur_cycle_points_;
  ::google::protobuf::uint32 paid_platform_flags_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 end_time_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BattlePassAllDataNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.BattlePassAllDataNotify) */ {
 public:
  BattlePassAllDataNotify();
  virtual ~BattlePassAllDataNotify();

  BattlePassAllDataNotify(const BattlePassAllDataNotify& from);

  inline BattlePassAllDataNotify& operator=(const BattlePassAllDataNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BattlePassAllDataNotify(BattlePassAllDataNotify&& from) noexcept
    : BattlePassAllDataNotify() {
    *this = ::std::move(from);
  }

  inline BattlePassAllDataNotify& operator=(BattlePassAllDataNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BattlePassAllDataNotify& default_instance();

  static inline const BattlePassAllDataNotify* internal_default_instance() {
    return reinterpret_cast<const BattlePassAllDataNotify*>(
               &_BattlePassAllDataNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(BattlePassAllDataNotify* other);
  friend void swap(BattlePassAllDataNotify& a, BattlePassAllDataNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BattlePassAllDataNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  BattlePassAllDataNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BattlePassAllDataNotify& from);
  void MergeFrom(const BattlePassAllDataNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BattlePassAllDataNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.BattlePassMission mission_list = 4;
  int mission_list_size() const;
  void clear_mission_list();
  static const int kMissionListFieldNumber = 4;
  const ::proto::BattlePassMission& mission_list(int index) const;
  ::proto::BattlePassMission* mutable_mission_list(int index);
  ::proto::BattlePassMission* add_mission_list();
  ::google::protobuf::RepeatedPtrField< ::proto::BattlePassMission >*
      mutable_mission_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::BattlePassMission >&
      mission_list() const;

  // .proto.BattlePassSchedule cur_schedule = 1;
  bool has_cur_schedule() const;
  void clear_cur_schedule();
  static const int kCurScheduleFieldNumber = 1;
  const ::proto::BattlePassSchedule& cur_schedule() const;
  ::proto::BattlePassSchedule* mutable_cur_schedule();
  ::proto::BattlePassSchedule* release_cur_schedule();
  void set_allocated_cur_schedule(::proto::BattlePassSchedule* cur_schedule);

  // bool have_cur_schedule = 2;
  void clear_have_cur_schedule();
  static const int kHaveCurScheduleFieldNumber = 2;
  bool have_cur_schedule() const;
  void set_have_cur_schedule(bool value);

  // @@protoc_insertion_point(class_scope:proto.BattlePassAllDataNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::BattlePassMission > mission_list_;
  ::proto::BattlePassSchedule* cur_schedule_;
  bool have_cur_schedule_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BattlePassMissionUpdateNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.BattlePassMissionUpdateNotify) */ {
 public:
  BattlePassMissionUpdateNotify();
  virtual ~BattlePassMissionUpdateNotify();

  BattlePassMissionUpdateNotify(const BattlePassMissionUpdateNotify& from);

  inline BattlePassMissionUpdateNotify& operator=(const BattlePassMissionUpdateNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BattlePassMissionUpdateNotify(BattlePassMissionUpdateNotify&& from) noexcept
    : BattlePassMissionUpdateNotify() {
    *this = ::std::move(from);
  }

  inline BattlePassMissionUpdateNotify& operator=(BattlePassMissionUpdateNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BattlePassMissionUpdateNotify& default_instance();

  static inline const BattlePassMissionUpdateNotify* internal_default_instance() {
    return reinterpret_cast<const BattlePassMissionUpdateNotify*>(
               &_BattlePassMissionUpdateNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(BattlePassMissionUpdateNotify* other);
  friend void swap(BattlePassMissionUpdateNotify& a, BattlePassMissionUpdateNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BattlePassMissionUpdateNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  BattlePassMissionUpdateNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BattlePassMissionUpdateNotify& from);
  void MergeFrom(const BattlePassMissionUpdateNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BattlePassMissionUpdateNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.BattlePassMission mission_list = 1;
  int mission_list_size() const;
  void clear_mission_list();
  static const int kMissionListFieldNumber = 1;
  const ::proto::BattlePassMission& mission_list(int index) const;
  ::proto::BattlePassMission* mutable_mission_list(int index);
  ::proto::BattlePassMission* add_mission_list();
  ::google::protobuf::RepeatedPtrField< ::proto::BattlePassMission >*
      mutable_mission_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::BattlePassMission >&
      mission_list() const;

  // @@protoc_insertion_point(class_scope:proto.BattlePassMissionUpdateNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::BattlePassMission > mission_list_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BattlePassMissionDelNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.BattlePassMissionDelNotify) */ {
 public:
  BattlePassMissionDelNotify();
  virtual ~BattlePassMissionDelNotify();

  BattlePassMissionDelNotify(const BattlePassMissionDelNotify& from);

  inline BattlePassMissionDelNotify& operator=(const BattlePassMissionDelNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BattlePassMissionDelNotify(BattlePassMissionDelNotify&& from) noexcept
    : BattlePassMissionDelNotify() {
    *this = ::std::move(from);
  }

  inline BattlePassMissionDelNotify& operator=(BattlePassMissionDelNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BattlePassMissionDelNotify& default_instance();

  static inline const BattlePassMissionDelNotify* internal_default_instance() {
    return reinterpret_cast<const BattlePassMissionDelNotify*>(
               &_BattlePassMissionDelNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(BattlePassMissionDelNotify* other);
  friend void swap(BattlePassMissionDelNotify& a, BattlePassMissionDelNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BattlePassMissionDelNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  BattlePassMissionDelNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BattlePassMissionDelNotify& from);
  void MergeFrom(const BattlePassMissionDelNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BattlePassMissionDelNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 del_mission_id_list = 10;
  int del_mission_id_list_size() const;
  void clear_del_mission_id_list();
  static const int kDelMissionIdListFieldNumber = 10;
  ::google::protobuf::uint32 del_mission_id_list(int index) const;
  void set_del_mission_id_list(int index, ::google::protobuf::uint32 value);
  void add_del_mission_id_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      del_mission_id_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_del_mission_id_list();

  // @@protoc_insertion_point(class_scope:proto.BattlePassMissionDelNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > del_mission_id_list_;
  mutable int _del_mission_id_list_cached_byte_size_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BattlePassCurScheduleUpdateNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.BattlePassCurScheduleUpdateNotify) */ {
 public:
  BattlePassCurScheduleUpdateNotify();
  virtual ~BattlePassCurScheduleUpdateNotify();

  BattlePassCurScheduleUpdateNotify(const BattlePassCurScheduleUpdateNotify& from);

  inline BattlePassCurScheduleUpdateNotify& operator=(const BattlePassCurScheduleUpdateNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BattlePassCurScheduleUpdateNotify(BattlePassCurScheduleUpdateNotify&& from) noexcept
    : BattlePassCurScheduleUpdateNotify() {
    *this = ::std::move(from);
  }

  inline BattlePassCurScheduleUpdateNotify& operator=(BattlePassCurScheduleUpdateNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BattlePassCurScheduleUpdateNotify& default_instance();

  static inline const BattlePassCurScheduleUpdateNotify* internal_default_instance() {
    return reinterpret_cast<const BattlePassCurScheduleUpdateNotify*>(
               &_BattlePassCurScheduleUpdateNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(BattlePassCurScheduleUpdateNotify* other);
  friend void swap(BattlePassCurScheduleUpdateNotify& a, BattlePassCurScheduleUpdateNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BattlePassCurScheduleUpdateNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  BattlePassCurScheduleUpdateNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BattlePassCurScheduleUpdateNotify& from);
  void MergeFrom(const BattlePassCurScheduleUpdateNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BattlePassCurScheduleUpdateNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.BattlePassSchedule cur_schedule = 1;
  bool has_cur_schedule() const;
  void clear_cur_schedule();
  static const int kCurScheduleFieldNumber = 1;
  const ::proto::BattlePassSchedule& cur_schedule() const;
  ::proto::BattlePassSchedule* mutable_cur_schedule();
  ::proto::BattlePassSchedule* release_cur_schedule();
  void set_allocated_cur_schedule(::proto::BattlePassSchedule* cur_schedule);

  // bool have_cur_schedule = 11;
  void clear_have_cur_schedule();
  static const int kHaveCurScheduleFieldNumber = 11;
  bool have_cur_schedule() const;
  void set_have_cur_schedule(bool value);

  // @@protoc_insertion_point(class_scope:proto.BattlePassCurScheduleUpdateNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::BattlePassSchedule* cur_schedule_;
  bool have_cur_schedule_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BattlePassRewardTakeOption : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.BattlePassRewardTakeOption) */ {
 public:
  BattlePassRewardTakeOption();
  virtual ~BattlePassRewardTakeOption();

  BattlePassRewardTakeOption(const BattlePassRewardTakeOption& from);

  inline BattlePassRewardTakeOption& operator=(const BattlePassRewardTakeOption& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BattlePassRewardTakeOption(BattlePassRewardTakeOption&& from) noexcept
    : BattlePassRewardTakeOption() {
    *this = ::std::move(from);
  }

  inline BattlePassRewardTakeOption& operator=(BattlePassRewardTakeOption&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BattlePassRewardTakeOption& default_instance();

  static inline const BattlePassRewardTakeOption* internal_default_instance() {
    return reinterpret_cast<const BattlePassRewardTakeOption*>(
               &_BattlePassRewardTakeOption_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(BattlePassRewardTakeOption* other);
  friend void swap(BattlePassRewardTakeOption& a, BattlePassRewardTakeOption& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BattlePassRewardTakeOption* New() const PROTOBUF_FINAL { return New(NULL); }

  BattlePassRewardTakeOption* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BattlePassRewardTakeOption& from);
  void MergeFrom(const BattlePassRewardTakeOption& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BattlePassRewardTakeOption* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.BattlePassRewardTag tag = 10;
  bool has_tag() const;
  void clear_tag();
  static const int kTagFieldNumber = 10;
  const ::proto::BattlePassRewardTag& tag() const;
  ::proto::BattlePassRewardTag* mutable_tag();
  ::proto::BattlePassRewardTag* release_tag();
  void set_allocated_tag(::proto::BattlePassRewardTag* tag);

  // uint32 option_idx = 14;
  void clear_option_idx();
  static const int kOptionIdxFieldNumber = 14;
  ::google::protobuf::uint32 option_idx() const;
  void set_option_idx(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.BattlePassRewardTakeOption)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::BattlePassRewardTag* tag_;
  ::google::protobuf::uint32 option_idx_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TakeBattlePassRewardReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.TakeBattlePassRewardReq) */ {
 public:
  TakeBattlePassRewardReq();
  virtual ~TakeBattlePassRewardReq();

  TakeBattlePassRewardReq(const TakeBattlePassRewardReq& from);

  inline TakeBattlePassRewardReq& operator=(const TakeBattlePassRewardReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TakeBattlePassRewardReq(TakeBattlePassRewardReq&& from) noexcept
    : TakeBattlePassRewardReq() {
    *this = ::std::move(from);
  }

  inline TakeBattlePassRewardReq& operator=(TakeBattlePassRewardReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TakeBattlePassRewardReq& default_instance();

  static inline const TakeBattlePassRewardReq* internal_default_instance() {
    return reinterpret_cast<const TakeBattlePassRewardReq*>(
               &_TakeBattlePassRewardReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(TakeBattlePassRewardReq* other);
  friend void swap(TakeBattlePassRewardReq& a, TakeBattlePassRewardReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TakeBattlePassRewardReq* New() const PROTOBUF_FINAL { return New(NULL); }

  TakeBattlePassRewardReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TakeBattlePassRewardReq& from);
  void MergeFrom(const TakeBattlePassRewardReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TakeBattlePassRewardReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.BattlePassRewardTakeOption take_option_list = 12;
  int take_option_list_size() const;
  void clear_take_option_list();
  static const int kTakeOptionListFieldNumber = 12;
  const ::proto::BattlePassRewardTakeOption& take_option_list(int index) const;
  ::proto::BattlePassRewardTakeOption* mutable_take_option_list(int index);
  ::proto::BattlePassRewardTakeOption* add_take_option_list();
  ::google::protobuf::RepeatedPtrField< ::proto::BattlePassRewardTakeOption >*
      mutable_take_option_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::BattlePassRewardTakeOption >&
      take_option_list() const;

  // @@protoc_insertion_point(class_scope:proto.TakeBattlePassRewardReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::BattlePassRewardTakeOption > take_option_list_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TakeBattlePassRewardRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.TakeBattlePassRewardRsp) */ {
 public:
  TakeBattlePassRewardRsp();
  virtual ~TakeBattlePassRewardRsp();

  TakeBattlePassRewardRsp(const TakeBattlePassRewardRsp& from);

  inline TakeBattlePassRewardRsp& operator=(const TakeBattlePassRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TakeBattlePassRewardRsp(TakeBattlePassRewardRsp&& from) noexcept
    : TakeBattlePassRewardRsp() {
    *this = ::std::move(from);
  }

  inline TakeBattlePassRewardRsp& operator=(TakeBattlePassRewardRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TakeBattlePassRewardRsp& default_instance();

  static inline const TakeBattlePassRewardRsp* internal_default_instance() {
    return reinterpret_cast<const TakeBattlePassRewardRsp*>(
               &_TakeBattlePassRewardRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(TakeBattlePassRewardRsp* other);
  friend void swap(TakeBattlePassRewardRsp& a, TakeBattlePassRewardRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TakeBattlePassRewardRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  TakeBattlePassRewardRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TakeBattlePassRewardRsp& from);
  void MergeFrom(const TakeBattlePassRewardRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TakeBattlePassRewardRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.ItemParam item_list = 7;
  int item_list_size() const;
  void clear_item_list();
  static const int kItemListFieldNumber = 7;
  const ::proto::ItemParam& item_list(int index) const;
  ::proto::ItemParam* mutable_item_list(int index);
  ::proto::ItemParam* add_item_list();
  ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >*
      mutable_item_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >&
      item_list() const;

  // repeated .proto.BattlePassRewardTakeOption take_option_list = 9;
  int take_option_list_size() const;
  void clear_take_option_list();
  static const int kTakeOptionListFieldNumber = 9;
  const ::proto::BattlePassRewardTakeOption& take_option_list(int index) const;
  ::proto::BattlePassRewardTakeOption* mutable_take_option_list(int index);
  ::proto::BattlePassRewardTakeOption* add_take_option_list();
  ::google::protobuf::RepeatedPtrField< ::proto::BattlePassRewardTakeOption >*
      mutable_take_option_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::BattlePassRewardTakeOption >&
      take_option_list() const;

  // int32 retcode = 13;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 13;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.TakeBattlePassRewardRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::ItemParam > item_list_;
  ::google::protobuf::RepeatedPtrField< ::proto::BattlePassRewardTakeOption > take_option_list_;
  ::google::protobuf::int32 retcode_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TakeBattlePassMissionPointReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.TakeBattlePassMissionPointReq) */ {
 public:
  TakeBattlePassMissionPointReq();
  virtual ~TakeBattlePassMissionPointReq();

  TakeBattlePassMissionPointReq(const TakeBattlePassMissionPointReq& from);

  inline TakeBattlePassMissionPointReq& operator=(const TakeBattlePassMissionPointReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TakeBattlePassMissionPointReq(TakeBattlePassMissionPointReq&& from) noexcept
    : TakeBattlePassMissionPointReq() {
    *this = ::std::move(from);
  }

  inline TakeBattlePassMissionPointReq& operator=(TakeBattlePassMissionPointReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TakeBattlePassMissionPointReq& default_instance();

  static inline const TakeBattlePassMissionPointReq* internal_default_instance() {
    return reinterpret_cast<const TakeBattlePassMissionPointReq*>(
               &_TakeBattlePassMissionPointReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(TakeBattlePassMissionPointReq* other);
  friend void swap(TakeBattlePassMissionPointReq& a, TakeBattlePassMissionPointReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TakeBattlePassMissionPointReq* New() const PROTOBUF_FINAL { return New(NULL); }

  TakeBattlePassMissionPointReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TakeBattlePassMissionPointReq& from);
  void MergeFrom(const TakeBattlePassMissionPointReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TakeBattlePassMissionPointReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 mission_id_list = 5;
  int mission_id_list_size() const;
  void clear_mission_id_list();
  static const int kMissionIdListFieldNumber = 5;
  ::google::protobuf::uint32 mission_id_list(int index) const;
  void set_mission_id_list(int index, ::google::protobuf::uint32 value);
  void add_mission_id_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      mission_id_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_mission_id_list();

  // @@protoc_insertion_point(class_scope:proto.TakeBattlePassMissionPointReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > mission_id_list_;
  mutable int _mission_id_list_cached_byte_size_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TakeBattlePassMissionPointRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.TakeBattlePassMissionPointRsp) */ {
 public:
  TakeBattlePassMissionPointRsp();
  virtual ~TakeBattlePassMissionPointRsp();

  TakeBattlePassMissionPointRsp(const TakeBattlePassMissionPointRsp& from);

  inline TakeBattlePassMissionPointRsp& operator=(const TakeBattlePassMissionPointRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TakeBattlePassMissionPointRsp(TakeBattlePassMissionPointRsp&& from) noexcept
    : TakeBattlePassMissionPointRsp() {
    *this = ::std::move(from);
  }

  inline TakeBattlePassMissionPointRsp& operator=(TakeBattlePassMissionPointRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TakeBattlePassMissionPointRsp& default_instance();

  static inline const TakeBattlePassMissionPointRsp* internal_default_instance() {
    return reinterpret_cast<const TakeBattlePassMissionPointRsp*>(
               &_TakeBattlePassMissionPointRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(TakeBattlePassMissionPointRsp* other);
  friend void swap(TakeBattlePassMissionPointRsp& a, TakeBattlePassMissionPointRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TakeBattlePassMissionPointRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  TakeBattlePassMissionPointRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TakeBattlePassMissionPointRsp& from);
  void MergeFrom(const TakeBattlePassMissionPointRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TakeBattlePassMissionPointRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 mission_id_list = 11;
  int mission_id_list_size() const;
  void clear_mission_id_list();
  static const int kMissionIdListFieldNumber = 11;
  ::google::protobuf::uint32 mission_id_list(int index) const;
  void set_mission_id_list(int index, ::google::protobuf::uint32 value);
  void add_mission_id_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      mission_id_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_mission_id_list();

  // int32 retcode = 4;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 4;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.TakeBattlePassMissionPointRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > mission_id_list_;
  mutable int _mission_id_list_cached_byte_size_;
  ::google::protobuf::int32 retcode_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetBattlePassProductReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GetBattlePassProductReq) */ {
 public:
  GetBattlePassProductReq();
  virtual ~GetBattlePassProductReq();

  GetBattlePassProductReq(const GetBattlePassProductReq& from);

  inline GetBattlePassProductReq& operator=(const GetBattlePassProductReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetBattlePassProductReq(GetBattlePassProductReq&& from) noexcept
    : GetBattlePassProductReq() {
    *this = ::std::move(from);
  }

  inline GetBattlePassProductReq& operator=(GetBattlePassProductReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetBattlePassProductReq& default_instance();

  static inline const GetBattlePassProductReq* internal_default_instance() {
    return reinterpret_cast<const GetBattlePassProductReq*>(
               &_GetBattlePassProductReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(GetBattlePassProductReq* other);
  friend void swap(GetBattlePassProductReq& a, GetBattlePassProductReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetBattlePassProductReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GetBattlePassProductReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetBattlePassProductReq& from);
  void MergeFrom(const GetBattlePassProductReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetBattlePassProductReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 battle_pass_product_play_type = 10;
  void clear_battle_pass_product_play_type();
  static const int kBattlePassProductPlayTypeFieldNumber = 10;
  ::google::protobuf::uint32 battle_pass_product_play_type() const;
  void set_battle_pass_product_play_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GetBattlePassProductReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 battle_pass_product_play_type_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetBattlePassProductRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GetBattlePassProductRsp) */ {
 public:
  GetBattlePassProductRsp();
  virtual ~GetBattlePassProductRsp();

  GetBattlePassProductRsp(const GetBattlePassProductRsp& from);

  inline GetBattlePassProductRsp& operator=(const GetBattlePassProductRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetBattlePassProductRsp(GetBattlePassProductRsp&& from) noexcept
    : GetBattlePassProductRsp() {
    *this = ::std::move(from);
  }

  inline GetBattlePassProductRsp& operator=(GetBattlePassProductRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetBattlePassProductRsp& default_instance();

  static inline const GetBattlePassProductRsp* internal_default_instance() {
    return reinterpret_cast<const GetBattlePassProductRsp*>(
               &_GetBattlePassProductRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(GetBattlePassProductRsp* other);
  friend void swap(GetBattlePassProductRsp& a, GetBattlePassProductRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetBattlePassProductRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GetBattlePassProductRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetBattlePassProductRsp& from);
  void MergeFrom(const GetBattlePassProductRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetBattlePassProductRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string product_id = 1;
  void clear_product_id();
  static const int kProductIdFieldNumber = 1;
  const ::std::string& product_id() const;
  void set_product_id(const ::std::string& value);
  #if LANG_CXX11
  void set_product_id(::std::string&& value);
  #endif
  void set_product_id(const char* value);
  void set_product_id(const char* value, size_t size);
  ::std::string* mutable_product_id();
  ::std::string* release_product_id();
  void set_allocated_product_id(::std::string* product_id);

  // string price_tier = 6;
  void clear_price_tier();
  static const int kPriceTierFieldNumber = 6;
  const ::std::string& price_tier() const;
  void set_price_tier(const ::std::string& value);
  #if LANG_CXX11
  void set_price_tier(::std::string&& value);
  #endif
  void set_price_tier(const char* value);
  void set_price_tier(const char* value, size_t size);
  ::std::string* mutable_price_tier();
  ::std::string* release_price_tier();
  void set_allocated_price_tier(::std::string* price_tier);

  // int32 retcode = 14;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 14;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // uint32 battle_pass_product_play_type = 2;
  void clear_battle_pass_product_play_type();
  static const int kBattlePassProductPlayTypeFieldNumber = 2;
  ::google::protobuf::uint32 battle_pass_product_play_type() const;
  void set_battle_pass_product_play_type(::google::protobuf::uint32 value);

  // uint32 cur_schedule_id = 11;
  void clear_cur_schedule_id();
  static const int kCurScheduleIdFieldNumber = 11;
  ::google::protobuf::uint32 cur_schedule_id() const;
  void set_cur_schedule_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GetBattlePassProductRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr product_id_;
  ::google::protobuf::internal::ArenaStringPtr price_tier_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::uint32 battle_pass_product_play_type_;
  ::google::protobuf::uint32 cur_schedule_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetBattlePassViewedReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.SetBattlePassViewedReq) */ {
 public:
  SetBattlePassViewedReq();
  virtual ~SetBattlePassViewedReq();

  SetBattlePassViewedReq(const SetBattlePassViewedReq& from);

  inline SetBattlePassViewedReq& operator=(const SetBattlePassViewedReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetBattlePassViewedReq(SetBattlePassViewedReq&& from) noexcept
    : SetBattlePassViewedReq() {
    *this = ::std::move(from);
  }

  inline SetBattlePassViewedReq& operator=(SetBattlePassViewedReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetBattlePassViewedReq& default_instance();

  static inline const SetBattlePassViewedReq* internal_default_instance() {
    return reinterpret_cast<const SetBattlePassViewedReq*>(
               &_SetBattlePassViewedReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(SetBattlePassViewedReq* other);
  friend void swap(SetBattlePassViewedReq& a, SetBattlePassViewedReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetBattlePassViewedReq* New() const PROTOBUF_FINAL { return New(NULL); }

  SetBattlePassViewedReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetBattlePassViewedReq& from);
  void MergeFrom(const SetBattlePassViewedReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetBattlePassViewedReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 schedule_id = 6;
  void clear_schedule_id();
  static const int kScheduleIdFieldNumber = 6;
  ::google::protobuf::uint32 schedule_id() const;
  void set_schedule_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.SetBattlePassViewedReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 schedule_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetBattlePassViewedRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.SetBattlePassViewedRsp) */ {
 public:
  SetBattlePassViewedRsp();
  virtual ~SetBattlePassViewedRsp();

  SetBattlePassViewedRsp(const SetBattlePassViewedRsp& from);

  inline SetBattlePassViewedRsp& operator=(const SetBattlePassViewedRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetBattlePassViewedRsp(SetBattlePassViewedRsp&& from) noexcept
    : SetBattlePassViewedRsp() {
    *this = ::std::move(from);
  }

  inline SetBattlePassViewedRsp& operator=(SetBattlePassViewedRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetBattlePassViewedRsp& default_instance();

  static inline const SetBattlePassViewedRsp* internal_default_instance() {
    return reinterpret_cast<const SetBattlePassViewedRsp*>(
               &_SetBattlePassViewedRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(SetBattlePassViewedRsp* other);
  friend void swap(SetBattlePassViewedRsp& a, SetBattlePassViewedRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetBattlePassViewedRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  SetBattlePassViewedRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetBattlePassViewedRsp& from);
  void MergeFrom(const SetBattlePassViewedRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetBattlePassViewedRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 schedule_id = 2;
  void clear_schedule_id();
  static const int kScheduleIdFieldNumber = 2;
  ::google::protobuf::uint32 schedule_id() const;
  void set_schedule_id(::google::protobuf::uint32 value);

  // int32 retcode = 3;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 3;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.SetBattlePassViewedRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 schedule_id_;
  ::google::protobuf::int32 retcode_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BattlePassBuySuccNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.BattlePassBuySuccNotify) */ {
 public:
  BattlePassBuySuccNotify();
  virtual ~BattlePassBuySuccNotify();

  BattlePassBuySuccNotify(const BattlePassBuySuccNotify& from);

  inline BattlePassBuySuccNotify& operator=(const BattlePassBuySuccNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BattlePassBuySuccNotify(BattlePassBuySuccNotify&& from) noexcept
    : BattlePassBuySuccNotify() {
    *this = ::std::move(from);
  }

  inline BattlePassBuySuccNotify& operator=(BattlePassBuySuccNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BattlePassBuySuccNotify& default_instance();

  static inline const BattlePassBuySuccNotify* internal_default_instance() {
    return reinterpret_cast<const BattlePassBuySuccNotify*>(
               &_BattlePassBuySuccNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(BattlePassBuySuccNotify* other);
  friend void swap(BattlePassBuySuccNotify& a, BattlePassBuySuccNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BattlePassBuySuccNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  BattlePassBuySuccNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BattlePassBuySuccNotify& from);
  void MergeFrom(const BattlePassBuySuccNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BattlePassBuySuccNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.ItemParam item_list = 9;
  int item_list_size() const;
  void clear_item_list();
  static const int kItemListFieldNumber = 9;
  const ::proto::ItemParam& item_list(int index) const;
  ::proto::ItemParam* mutable_item_list(int index);
  ::proto::ItemParam* add_item_list();
  ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >*
      mutable_item_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >&
      item_list() const;

  // uint32 add_point = 12;
  void clear_add_point();
  static const int kAddPointFieldNumber = 12;
  ::google::protobuf::uint32 add_point() const;
  void set_add_point(::google::protobuf::uint32 value);

  // uint32 schedule_id = 4;
  void clear_schedule_id();
  static const int kScheduleIdFieldNumber = 4;
  ::google::protobuf::uint32 schedule_id() const;
  void set_schedule_id(::google::protobuf::uint32 value);

  // uint32 product_play_type = 11;
  void clear_product_play_type();
  static const int kProductPlayTypeFieldNumber = 11;
  ::google::protobuf::uint32 product_play_type() const;
  void set_product_play_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.BattlePassBuySuccNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::ItemParam > item_list_;
  ::google::protobuf::uint32 add_point_;
  ::google::protobuf::uint32 schedule_id_;
  ::google::protobuf::uint32 product_play_type_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BuyBattlePassLevelReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.BuyBattlePassLevelReq) */ {
 public:
  BuyBattlePassLevelReq();
  virtual ~BuyBattlePassLevelReq();

  BuyBattlePassLevelReq(const BuyBattlePassLevelReq& from);

  inline BuyBattlePassLevelReq& operator=(const BuyBattlePassLevelReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BuyBattlePassLevelReq(BuyBattlePassLevelReq&& from) noexcept
    : BuyBattlePassLevelReq() {
    *this = ::std::move(from);
  }

  inline BuyBattlePassLevelReq& operator=(BuyBattlePassLevelReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BuyBattlePassLevelReq& default_instance();

  static inline const BuyBattlePassLevelReq* internal_default_instance() {
    return reinterpret_cast<const BuyBattlePassLevelReq*>(
               &_BuyBattlePassLevelReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(BuyBattlePassLevelReq* other);
  friend void swap(BuyBattlePassLevelReq& a, BuyBattlePassLevelReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BuyBattlePassLevelReq* New() const PROTOBUF_FINAL { return New(NULL); }

  BuyBattlePassLevelReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BuyBattlePassLevelReq& from);
  void MergeFrom(const BuyBattlePassLevelReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BuyBattlePassLevelReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 buy_level = 8;
  void clear_buy_level();
  static const int kBuyLevelFieldNumber = 8;
  ::google::protobuf::uint32 buy_level() const;
  void set_buy_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.BuyBattlePassLevelReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 buy_level_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BuyBattlePassLevelRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.BuyBattlePassLevelRsp) */ {
 public:
  BuyBattlePassLevelRsp();
  virtual ~BuyBattlePassLevelRsp();

  BuyBattlePassLevelRsp(const BuyBattlePassLevelRsp& from);

  inline BuyBattlePassLevelRsp& operator=(const BuyBattlePassLevelRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BuyBattlePassLevelRsp(BuyBattlePassLevelRsp&& from) noexcept
    : BuyBattlePassLevelRsp() {
    *this = ::std::move(from);
  }

  inline BuyBattlePassLevelRsp& operator=(BuyBattlePassLevelRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BuyBattlePassLevelRsp& default_instance();

  static inline const BuyBattlePassLevelRsp* internal_default_instance() {
    return reinterpret_cast<const BuyBattlePassLevelRsp*>(
               &_BuyBattlePassLevelRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(BuyBattlePassLevelRsp* other);
  friend void swap(BuyBattlePassLevelRsp& a, BuyBattlePassLevelRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BuyBattlePassLevelRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  BuyBattlePassLevelRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BuyBattlePassLevelRsp& from);
  void MergeFrom(const BuyBattlePassLevelRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BuyBattlePassLevelRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 retcode = 5;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 5;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // uint32 buy_level = 13;
  void clear_buy_level();
  static const int kBuyLevelFieldNumber = 13;
  ::google::protobuf::uint32 buy_level() const;
  void set_buy_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.BuyBattlePassLevelRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::uint32 buy_level_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BattlePassCycle

// uint32 cycle_idx = 3;
inline void BattlePassCycle::clear_cycle_idx() {
  cycle_idx_ = 0u;
}
inline ::google::protobuf::uint32 BattlePassCycle::cycle_idx() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassCycle.cycle_idx)
  return cycle_idx_;
}
inline void BattlePassCycle::set_cycle_idx(::google::protobuf::uint32 value) {
  
  cycle_idx_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassCycle.cycle_idx)
}

// uint32 end_time = 10;
inline void BattlePassCycle::clear_end_time() {
  end_time_ = 0u;
}
inline ::google::protobuf::uint32 BattlePassCycle::end_time() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassCycle.end_time)
  return end_time_;
}
inline void BattlePassCycle::set_end_time(::google::protobuf::uint32 value) {
  
  end_time_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassCycle.end_time)
}

// uint32 begin_time = 13;
inline void BattlePassCycle::clear_begin_time() {
  begin_time_ = 0u;
}
inline ::google::protobuf::uint32 BattlePassCycle::begin_time() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassCycle.begin_time)
  return begin_time_;
}
inline void BattlePassCycle::set_begin_time(::google::protobuf::uint32 value) {
  
  begin_time_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassCycle.begin_time)
}

// -------------------------------------------------------------------

// BattlePassMission

// uint32 cur_progress = 13;
inline void BattlePassMission::clear_cur_progress() {
  cur_progress_ = 0u;
}
inline ::google::protobuf::uint32 BattlePassMission::cur_progress() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassMission.cur_progress)
  return cur_progress_;
}
inline void BattlePassMission::set_cur_progress(::google::protobuf::uint32 value) {
  
  cur_progress_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassMission.cur_progress)
}

// .proto.BattlePassMission.MissionStatus mission_status = 15;
inline void BattlePassMission::clear_mission_status() {
  mission_status_ = 0;
}
inline ::proto::BattlePassMission_MissionStatus BattlePassMission::mission_status() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassMission.mission_status)
  return static_cast< ::proto::BattlePassMission_MissionStatus >(mission_status_);
}
inline void BattlePassMission::set_mission_status(::proto::BattlePassMission_MissionStatus value) {
  
  mission_status_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassMission.mission_status)
}

// uint32 mission_id = 11;
inline void BattlePassMission::clear_mission_id() {
  mission_id_ = 0u;
}
inline ::google::protobuf::uint32 BattlePassMission::mission_id() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassMission.mission_id)
  return mission_id_;
}
inline void BattlePassMission::set_mission_id(::google::protobuf::uint32 value) {
  
  mission_id_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassMission.mission_id)
}

// uint32 reward_battle_pass_point = 3;
inline void BattlePassMission::clear_reward_battle_pass_point() {
  reward_battle_pass_point_ = 0u;
}
inline ::google::protobuf::uint32 BattlePassMission::reward_battle_pass_point() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassMission.reward_battle_pass_point)
  return reward_battle_pass_point_;
}
inline void BattlePassMission::set_reward_battle_pass_point(::google::protobuf::uint32 value) {
  
  reward_battle_pass_point_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassMission.reward_battle_pass_point)
}

// uint32 mission_type = 12;
inline void BattlePassMission::clear_mission_type() {
  mission_type_ = 0u;
}
inline ::google::protobuf::uint32 BattlePassMission::mission_type() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassMission.mission_type)
  return mission_type_;
}
inline void BattlePassMission::set_mission_type(::google::protobuf::uint32 value) {
  
  mission_type_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassMission.mission_type)
}

// uint32 total_progress = 6;
inline void BattlePassMission::clear_total_progress() {
  total_progress_ = 0u;
}
inline ::google::protobuf::uint32 BattlePassMission::total_progress() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassMission.total_progress)
  return total_progress_;
}
inline void BattlePassMission::set_total_progress(::google::protobuf::uint32 value) {
  
  total_progress_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassMission.total_progress)
}

// -------------------------------------------------------------------

// BattlePassRewardTag

// uint32 level = 4;
inline void BattlePassRewardTag::clear_level() {
  level_ = 0u;
}
inline ::google::protobuf::uint32 BattlePassRewardTag::level() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassRewardTag.level)
  return level_;
}
inline void BattlePassRewardTag::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassRewardTag.level)
}

// .proto.BattlePassUnlockStatus unlock_status = 2;
inline void BattlePassRewardTag::clear_unlock_status() {
  unlock_status_ = 0;
}
inline ::proto::BattlePassUnlockStatus BattlePassRewardTag::unlock_status() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassRewardTag.unlock_status)
  return static_cast< ::proto::BattlePassUnlockStatus >(unlock_status_);
}
inline void BattlePassRewardTag::set_unlock_status(::proto::BattlePassUnlockStatus value) {
  
  unlock_status_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassRewardTag.unlock_status)
}

// uint32 reward_id = 7;
inline void BattlePassRewardTag::clear_reward_id() {
  reward_id_ = 0u;
}
inline ::google::protobuf::uint32 BattlePassRewardTag::reward_id() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassRewardTag.reward_id)
  return reward_id_;
}
inline void BattlePassRewardTag::set_reward_id(::google::protobuf::uint32 value) {
  
  reward_id_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassRewardTag.reward_id)
}

// -------------------------------------------------------------------

// BattlePassProduct

// string normal_product_id = 13;
inline void BattlePassProduct::clear_normal_product_id() {
  normal_product_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BattlePassProduct::normal_product_id() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassProduct.normal_product_id)
  return normal_product_id_.GetNoArena();
}
inline void BattlePassProduct::set_normal_product_id(const ::std::string& value) {
  
  normal_product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.BattlePassProduct.normal_product_id)
}
#if LANG_CXX11
inline void BattlePassProduct::set_normal_product_id(::std::string&& value) {
  
  normal_product_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.BattlePassProduct.normal_product_id)
}
#endif
inline void BattlePassProduct::set_normal_product_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  normal_product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.BattlePassProduct.normal_product_id)
}
inline void BattlePassProduct::set_normal_product_id(const char* value, size_t size) {
  
  normal_product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.BattlePassProduct.normal_product_id)
}
inline ::std::string* BattlePassProduct::mutable_normal_product_id() {
  
  // @@protoc_insertion_point(field_mutable:proto.BattlePassProduct.normal_product_id)
  return normal_product_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BattlePassProduct::release_normal_product_id() {
  // @@protoc_insertion_point(field_release:proto.BattlePassProduct.normal_product_id)
  
  return normal_product_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BattlePassProduct::set_allocated_normal_product_id(::std::string* normal_product_id) {
  if (normal_product_id != NULL) {
    
  } else {
    
  }
  normal_product_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), normal_product_id);
  // @@protoc_insertion_point(field_set_allocated:proto.BattlePassProduct.normal_product_id)
}

// string extra_product_id = 10;
inline void BattlePassProduct::clear_extra_product_id() {
  extra_product_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BattlePassProduct::extra_product_id() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassProduct.extra_product_id)
  return extra_product_id_.GetNoArena();
}
inline void BattlePassProduct::set_extra_product_id(const ::std::string& value) {
  
  extra_product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.BattlePassProduct.extra_product_id)
}
#if LANG_CXX11
inline void BattlePassProduct::set_extra_product_id(::std::string&& value) {
  
  extra_product_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.BattlePassProduct.extra_product_id)
}
#endif
inline void BattlePassProduct::set_extra_product_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  extra_product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.BattlePassProduct.extra_product_id)
}
inline void BattlePassProduct::set_extra_product_id(const char* value, size_t size) {
  
  extra_product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.BattlePassProduct.extra_product_id)
}
inline ::std::string* BattlePassProduct::mutable_extra_product_id() {
  
  // @@protoc_insertion_point(field_mutable:proto.BattlePassProduct.extra_product_id)
  return extra_product_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BattlePassProduct::release_extra_product_id() {
  // @@protoc_insertion_point(field_release:proto.BattlePassProduct.extra_product_id)
  
  return extra_product_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BattlePassProduct::set_allocated_extra_product_id(::std::string* extra_product_id) {
  if (extra_product_id != NULL) {
    
  } else {
    
  }
  extra_product_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extra_product_id);
  // @@protoc_insertion_point(field_set_allocated:proto.BattlePassProduct.extra_product_id)
}

// string upgrade_product_id = 6;
inline void BattlePassProduct::clear_upgrade_product_id() {
  upgrade_product_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BattlePassProduct::upgrade_product_id() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassProduct.upgrade_product_id)
  return upgrade_product_id_.GetNoArena();
}
inline void BattlePassProduct::set_upgrade_product_id(const ::std::string& value) {
  
  upgrade_product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.BattlePassProduct.upgrade_product_id)
}
#if LANG_CXX11
inline void BattlePassProduct::set_upgrade_product_id(::std::string&& value) {
  
  upgrade_product_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.BattlePassProduct.upgrade_product_id)
}
#endif
inline void BattlePassProduct::set_upgrade_product_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  upgrade_product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.BattlePassProduct.upgrade_product_id)
}
inline void BattlePassProduct::set_upgrade_product_id(const char* value, size_t size) {
  
  upgrade_product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.BattlePassProduct.upgrade_product_id)
}
inline ::std::string* BattlePassProduct::mutable_upgrade_product_id() {
  
  // @@protoc_insertion_point(field_mutable:proto.BattlePassProduct.upgrade_product_id)
  return upgrade_product_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BattlePassProduct::release_upgrade_product_id() {
  // @@protoc_insertion_point(field_release:proto.BattlePassProduct.upgrade_product_id)
  
  return upgrade_product_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BattlePassProduct::set_allocated_upgrade_product_id(::std::string* upgrade_product_id) {
  if (upgrade_product_id != NULL) {
    
  } else {
    
  }
  upgrade_product_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), upgrade_product_id);
  // @@protoc_insertion_point(field_set_allocated:proto.BattlePassProduct.upgrade_product_id)
}

// -------------------------------------------------------------------

// BattlePassSchedule

// uint32 level = 14;
inline void BattlePassSchedule::clear_level() {
  level_ = 0u;
}
inline ::google::protobuf::uint32 BattlePassSchedule::level() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassSchedule.level)
  return level_;
}
inline void BattlePassSchedule::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassSchedule.level)
}

// uint32 begin_time = 2;
inline void BattlePassSchedule::clear_begin_time() {
  begin_time_ = 0u;
}
inline ::google::protobuf::uint32 BattlePassSchedule::begin_time() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassSchedule.begin_time)
  return begin_time_;
}
inline void BattlePassSchedule::set_begin_time(::google::protobuf::uint32 value) {
  
  begin_time_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassSchedule.begin_time)
}

// uint32 end_time = 15;
inline void BattlePassSchedule::clear_end_time() {
  end_time_ = 0u;
}
inline ::google::protobuf::uint32 BattlePassSchedule::end_time() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassSchedule.end_time)
  return end_time_;
}
inline void BattlePassSchedule::set_end_time(::google::protobuf::uint32 value) {
  
  end_time_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassSchedule.end_time)
}

// uint32 point = 1;
inline void BattlePassSchedule::clear_point() {
  point_ = 0u;
}
inline ::google::protobuf::uint32 BattlePassSchedule::point() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassSchedule.point)
  return point_;
}
inline void BattlePassSchedule::set_point(::google::protobuf::uint32 value) {
  
  point_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassSchedule.point)
}

// .proto.BattlePassCycle cur_cycle = 4;
inline bool BattlePassSchedule::has_cur_cycle() const {
  return this != internal_default_instance() && cur_cycle_ != NULL;
}
inline void BattlePassSchedule::clear_cur_cycle() {
  if (GetArenaNoVirtual() == NULL && cur_cycle_ != NULL) delete cur_cycle_;
  cur_cycle_ = NULL;
}
inline const ::proto::BattlePassCycle& BattlePassSchedule::cur_cycle() const {
  const ::proto::BattlePassCycle* p = cur_cycle_;
  // @@protoc_insertion_point(field_get:proto.BattlePassSchedule.cur_cycle)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::BattlePassCycle*>(
      &::proto::_BattlePassCycle_default_instance_);
}
inline ::proto::BattlePassCycle* BattlePassSchedule::mutable_cur_cycle() {
  
  if (cur_cycle_ == NULL) {
    cur_cycle_ = new ::proto::BattlePassCycle;
  }
  // @@protoc_insertion_point(field_mutable:proto.BattlePassSchedule.cur_cycle)
  return cur_cycle_;
}
inline ::proto::BattlePassCycle* BattlePassSchedule::release_cur_cycle() {
  // @@protoc_insertion_point(field_release:proto.BattlePassSchedule.cur_cycle)
  
  ::proto::BattlePassCycle* temp = cur_cycle_;
  cur_cycle_ = NULL;
  return temp;
}
inline void BattlePassSchedule::set_allocated_cur_cycle(::proto::BattlePassCycle* cur_cycle) {
  delete cur_cycle_;
  cur_cycle_ = cur_cycle;
  if (cur_cycle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.BattlePassSchedule.cur_cycle)
}

// .proto.BattlePassUnlockStatus unlock_status = 7;
inline void BattlePassSchedule::clear_unlock_status() {
  unlock_status_ = 0;
}
inline ::proto::BattlePassUnlockStatus BattlePassSchedule::unlock_status() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassSchedule.unlock_status)
  return static_cast< ::proto::BattlePassUnlockStatus >(unlock_status_);
}
inline void BattlePassSchedule::set_unlock_status(::proto::BattlePassUnlockStatus value) {
  
  unlock_status_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassSchedule.unlock_status)
}

// repeated .proto.BattlePassRewardTag reward_taken_list = 11;
inline int BattlePassSchedule::reward_taken_list_size() const {
  return reward_taken_list_.size();
}
inline void BattlePassSchedule::clear_reward_taken_list() {
  reward_taken_list_.Clear();
}
inline const ::proto::BattlePassRewardTag& BattlePassSchedule::reward_taken_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.BattlePassSchedule.reward_taken_list)
  return reward_taken_list_.Get(index);
}
inline ::proto::BattlePassRewardTag* BattlePassSchedule::mutable_reward_taken_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.BattlePassSchedule.reward_taken_list)
  return reward_taken_list_.Mutable(index);
}
inline ::proto::BattlePassRewardTag* BattlePassSchedule::add_reward_taken_list() {
  // @@protoc_insertion_point(field_add:proto.BattlePassSchedule.reward_taken_list)
  return reward_taken_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::BattlePassRewardTag >*
BattlePassSchedule::mutable_reward_taken_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.BattlePassSchedule.reward_taken_list)
  return &reward_taken_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::BattlePassRewardTag >&
BattlePassSchedule::reward_taken_list() const {
  // @@protoc_insertion_point(field_list:proto.BattlePassSchedule.reward_taken_list)
  return reward_taken_list_;
}

// uint32 cur_cycle_points = 10;
inline void BattlePassSchedule::clear_cur_cycle_points() {
  cur_cycle_points_ = 0u;
}
inline ::google::protobuf::uint32 BattlePassSchedule::cur_cycle_points() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassSchedule.cur_cycle_points)
  return cur_cycle_points_;
}
inline void BattlePassSchedule::set_cur_cycle_points(::google::protobuf::uint32 value) {
  
  cur_cycle_points_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassSchedule.cur_cycle_points)
}

// uint32 paid_platform_flags = 12;
inline void BattlePassSchedule::clear_paid_platform_flags() {
  paid_platform_flags_ = 0u;
}
inline ::google::protobuf::uint32 BattlePassSchedule::paid_platform_flags() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassSchedule.paid_platform_flags)
  return paid_platform_flags_;
}
inline void BattlePassSchedule::set_paid_platform_flags(::google::protobuf::uint32 value) {
  
  paid_platform_flags_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassSchedule.paid_platform_flags)
}

// .proto.BattlePassProduct product_info = 13;
inline bool BattlePassSchedule::has_product_info() const {
  return this != internal_default_instance() && product_info_ != NULL;
}
inline void BattlePassSchedule::clear_product_info() {
  if (GetArenaNoVirtual() == NULL && product_info_ != NULL) delete product_info_;
  product_info_ = NULL;
}
inline const ::proto::BattlePassProduct& BattlePassSchedule::product_info() const {
  const ::proto::BattlePassProduct* p = product_info_;
  // @@protoc_insertion_point(field_get:proto.BattlePassSchedule.product_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::BattlePassProduct*>(
      &::proto::_BattlePassProduct_default_instance_);
}
inline ::proto::BattlePassProduct* BattlePassSchedule::mutable_product_info() {
  
  if (product_info_ == NULL) {
    product_info_ = new ::proto::BattlePassProduct;
  }
  // @@protoc_insertion_point(field_mutable:proto.BattlePassSchedule.product_info)
  return product_info_;
}
inline ::proto::BattlePassProduct* BattlePassSchedule::release_product_info() {
  // @@protoc_insertion_point(field_release:proto.BattlePassSchedule.product_info)
  
  ::proto::BattlePassProduct* temp = product_info_;
  product_info_ = NULL;
  return temp;
}
inline void BattlePassSchedule::set_allocated_product_info(::proto::BattlePassProduct* product_info) {
  delete product_info_;
  product_info_ = product_info;
  if (product_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.BattlePassSchedule.product_info)
}

// bool is_extra_paid_reward_taken = 6;
inline void BattlePassSchedule::clear_is_extra_paid_reward_taken() {
  is_extra_paid_reward_taken_ = false;
}
inline bool BattlePassSchedule::is_extra_paid_reward_taken() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassSchedule.is_extra_paid_reward_taken)
  return is_extra_paid_reward_taken_;
}
inline void BattlePassSchedule::set_is_extra_paid_reward_taken(bool value) {
  
  is_extra_paid_reward_taken_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassSchedule.is_extra_paid_reward_taken)
}

// bool is_viewed = 3;
inline void BattlePassSchedule::clear_is_viewed() {
  is_viewed_ = false;
}
inline bool BattlePassSchedule::is_viewed() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassSchedule.is_viewed)
  return is_viewed_;
}
inline void BattlePassSchedule::set_is_viewed(bool value) {
  
  is_viewed_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassSchedule.is_viewed)
}

// uint32 schedule_id = 9;
inline void BattlePassSchedule::clear_schedule_id() {
  schedule_id_ = 0u;
}
inline ::google::protobuf::uint32 BattlePassSchedule::schedule_id() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassSchedule.schedule_id)
  return schedule_id_;
}
inline void BattlePassSchedule::set_schedule_id(::google::protobuf::uint32 value) {
  
  schedule_id_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassSchedule.schedule_id)
}

// -------------------------------------------------------------------

// BattlePassAllDataNotify

// bool have_cur_schedule = 2;
inline void BattlePassAllDataNotify::clear_have_cur_schedule() {
  have_cur_schedule_ = false;
}
inline bool BattlePassAllDataNotify::have_cur_schedule() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassAllDataNotify.have_cur_schedule)
  return have_cur_schedule_;
}
inline void BattlePassAllDataNotify::set_have_cur_schedule(bool value) {
  
  have_cur_schedule_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassAllDataNotify.have_cur_schedule)
}

// repeated .proto.BattlePassMission mission_list = 4;
inline int BattlePassAllDataNotify::mission_list_size() const {
  return mission_list_.size();
}
inline void BattlePassAllDataNotify::clear_mission_list() {
  mission_list_.Clear();
}
inline const ::proto::BattlePassMission& BattlePassAllDataNotify::mission_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.BattlePassAllDataNotify.mission_list)
  return mission_list_.Get(index);
}
inline ::proto::BattlePassMission* BattlePassAllDataNotify::mutable_mission_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.BattlePassAllDataNotify.mission_list)
  return mission_list_.Mutable(index);
}
inline ::proto::BattlePassMission* BattlePassAllDataNotify::add_mission_list() {
  // @@protoc_insertion_point(field_add:proto.BattlePassAllDataNotify.mission_list)
  return mission_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::BattlePassMission >*
BattlePassAllDataNotify::mutable_mission_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.BattlePassAllDataNotify.mission_list)
  return &mission_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::BattlePassMission >&
BattlePassAllDataNotify::mission_list() const {
  // @@protoc_insertion_point(field_list:proto.BattlePassAllDataNotify.mission_list)
  return mission_list_;
}

// .proto.BattlePassSchedule cur_schedule = 1;
inline bool BattlePassAllDataNotify::has_cur_schedule() const {
  return this != internal_default_instance() && cur_schedule_ != NULL;
}
inline void BattlePassAllDataNotify::clear_cur_schedule() {
  if (GetArenaNoVirtual() == NULL && cur_schedule_ != NULL) delete cur_schedule_;
  cur_schedule_ = NULL;
}
inline const ::proto::BattlePassSchedule& BattlePassAllDataNotify::cur_schedule() const {
  const ::proto::BattlePassSchedule* p = cur_schedule_;
  // @@protoc_insertion_point(field_get:proto.BattlePassAllDataNotify.cur_schedule)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::BattlePassSchedule*>(
      &::proto::_BattlePassSchedule_default_instance_);
}
inline ::proto::BattlePassSchedule* BattlePassAllDataNotify::mutable_cur_schedule() {
  
  if (cur_schedule_ == NULL) {
    cur_schedule_ = new ::proto::BattlePassSchedule;
  }
  // @@protoc_insertion_point(field_mutable:proto.BattlePassAllDataNotify.cur_schedule)
  return cur_schedule_;
}
inline ::proto::BattlePassSchedule* BattlePassAllDataNotify::release_cur_schedule() {
  // @@protoc_insertion_point(field_release:proto.BattlePassAllDataNotify.cur_schedule)
  
  ::proto::BattlePassSchedule* temp = cur_schedule_;
  cur_schedule_ = NULL;
  return temp;
}
inline void BattlePassAllDataNotify::set_allocated_cur_schedule(::proto::BattlePassSchedule* cur_schedule) {
  delete cur_schedule_;
  cur_schedule_ = cur_schedule;
  if (cur_schedule) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.BattlePassAllDataNotify.cur_schedule)
}

// -------------------------------------------------------------------

// BattlePassMissionUpdateNotify

// repeated .proto.BattlePassMission mission_list = 1;
inline int BattlePassMissionUpdateNotify::mission_list_size() const {
  return mission_list_.size();
}
inline void BattlePassMissionUpdateNotify::clear_mission_list() {
  mission_list_.Clear();
}
inline const ::proto::BattlePassMission& BattlePassMissionUpdateNotify::mission_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.BattlePassMissionUpdateNotify.mission_list)
  return mission_list_.Get(index);
}
inline ::proto::BattlePassMission* BattlePassMissionUpdateNotify::mutable_mission_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.BattlePassMissionUpdateNotify.mission_list)
  return mission_list_.Mutable(index);
}
inline ::proto::BattlePassMission* BattlePassMissionUpdateNotify::add_mission_list() {
  // @@protoc_insertion_point(field_add:proto.BattlePassMissionUpdateNotify.mission_list)
  return mission_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::BattlePassMission >*
BattlePassMissionUpdateNotify::mutable_mission_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.BattlePassMissionUpdateNotify.mission_list)
  return &mission_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::BattlePassMission >&
BattlePassMissionUpdateNotify::mission_list() const {
  // @@protoc_insertion_point(field_list:proto.BattlePassMissionUpdateNotify.mission_list)
  return mission_list_;
}

// -------------------------------------------------------------------

// BattlePassMissionDelNotify

// repeated uint32 del_mission_id_list = 10;
inline int BattlePassMissionDelNotify::del_mission_id_list_size() const {
  return del_mission_id_list_.size();
}
inline void BattlePassMissionDelNotify::clear_del_mission_id_list() {
  del_mission_id_list_.Clear();
}
inline ::google::protobuf::uint32 BattlePassMissionDelNotify::del_mission_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.BattlePassMissionDelNotify.del_mission_id_list)
  return del_mission_id_list_.Get(index);
}
inline void BattlePassMissionDelNotify::set_del_mission_id_list(int index, ::google::protobuf::uint32 value) {
  del_mission_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.BattlePassMissionDelNotify.del_mission_id_list)
}
inline void BattlePassMissionDelNotify::add_del_mission_id_list(::google::protobuf::uint32 value) {
  del_mission_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.BattlePassMissionDelNotify.del_mission_id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BattlePassMissionDelNotify::del_mission_id_list() const {
  // @@protoc_insertion_point(field_list:proto.BattlePassMissionDelNotify.del_mission_id_list)
  return del_mission_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BattlePassMissionDelNotify::mutable_del_mission_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.BattlePassMissionDelNotify.del_mission_id_list)
  return &del_mission_id_list_;
}

// -------------------------------------------------------------------

// BattlePassCurScheduleUpdateNotify

// bool have_cur_schedule = 11;
inline void BattlePassCurScheduleUpdateNotify::clear_have_cur_schedule() {
  have_cur_schedule_ = false;
}
inline bool BattlePassCurScheduleUpdateNotify::have_cur_schedule() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassCurScheduleUpdateNotify.have_cur_schedule)
  return have_cur_schedule_;
}
inline void BattlePassCurScheduleUpdateNotify::set_have_cur_schedule(bool value) {
  
  have_cur_schedule_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassCurScheduleUpdateNotify.have_cur_schedule)
}

// .proto.BattlePassSchedule cur_schedule = 1;
inline bool BattlePassCurScheduleUpdateNotify::has_cur_schedule() const {
  return this != internal_default_instance() && cur_schedule_ != NULL;
}
inline void BattlePassCurScheduleUpdateNotify::clear_cur_schedule() {
  if (GetArenaNoVirtual() == NULL && cur_schedule_ != NULL) delete cur_schedule_;
  cur_schedule_ = NULL;
}
inline const ::proto::BattlePassSchedule& BattlePassCurScheduleUpdateNotify::cur_schedule() const {
  const ::proto::BattlePassSchedule* p = cur_schedule_;
  // @@protoc_insertion_point(field_get:proto.BattlePassCurScheduleUpdateNotify.cur_schedule)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::BattlePassSchedule*>(
      &::proto::_BattlePassSchedule_default_instance_);
}
inline ::proto::BattlePassSchedule* BattlePassCurScheduleUpdateNotify::mutable_cur_schedule() {
  
  if (cur_schedule_ == NULL) {
    cur_schedule_ = new ::proto::BattlePassSchedule;
  }
  // @@protoc_insertion_point(field_mutable:proto.BattlePassCurScheduleUpdateNotify.cur_schedule)
  return cur_schedule_;
}
inline ::proto::BattlePassSchedule* BattlePassCurScheduleUpdateNotify::release_cur_schedule() {
  // @@protoc_insertion_point(field_release:proto.BattlePassCurScheduleUpdateNotify.cur_schedule)
  
  ::proto::BattlePassSchedule* temp = cur_schedule_;
  cur_schedule_ = NULL;
  return temp;
}
inline void BattlePassCurScheduleUpdateNotify::set_allocated_cur_schedule(::proto::BattlePassSchedule* cur_schedule) {
  delete cur_schedule_;
  cur_schedule_ = cur_schedule;
  if (cur_schedule) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.BattlePassCurScheduleUpdateNotify.cur_schedule)
}

// -------------------------------------------------------------------

// BattlePassRewardTakeOption

// .proto.BattlePassRewardTag tag = 10;
inline bool BattlePassRewardTakeOption::has_tag() const {
  return this != internal_default_instance() && tag_ != NULL;
}
inline void BattlePassRewardTakeOption::clear_tag() {
  if (GetArenaNoVirtual() == NULL && tag_ != NULL) delete tag_;
  tag_ = NULL;
}
inline const ::proto::BattlePassRewardTag& BattlePassRewardTakeOption::tag() const {
  const ::proto::BattlePassRewardTag* p = tag_;
  // @@protoc_insertion_point(field_get:proto.BattlePassRewardTakeOption.tag)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::BattlePassRewardTag*>(
      &::proto::_BattlePassRewardTag_default_instance_);
}
inline ::proto::BattlePassRewardTag* BattlePassRewardTakeOption::mutable_tag() {
  
  if (tag_ == NULL) {
    tag_ = new ::proto::BattlePassRewardTag;
  }
  // @@protoc_insertion_point(field_mutable:proto.BattlePassRewardTakeOption.tag)
  return tag_;
}
inline ::proto::BattlePassRewardTag* BattlePassRewardTakeOption::release_tag() {
  // @@protoc_insertion_point(field_release:proto.BattlePassRewardTakeOption.tag)
  
  ::proto::BattlePassRewardTag* temp = tag_;
  tag_ = NULL;
  return temp;
}
inline void BattlePassRewardTakeOption::set_allocated_tag(::proto::BattlePassRewardTag* tag) {
  delete tag_;
  tag_ = tag;
  if (tag) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.BattlePassRewardTakeOption.tag)
}

// uint32 option_idx = 14;
inline void BattlePassRewardTakeOption::clear_option_idx() {
  option_idx_ = 0u;
}
inline ::google::protobuf::uint32 BattlePassRewardTakeOption::option_idx() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassRewardTakeOption.option_idx)
  return option_idx_;
}
inline void BattlePassRewardTakeOption::set_option_idx(::google::protobuf::uint32 value) {
  
  option_idx_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassRewardTakeOption.option_idx)
}

// -------------------------------------------------------------------

// TakeBattlePassRewardReq

// repeated .proto.BattlePassRewardTakeOption take_option_list = 12;
inline int TakeBattlePassRewardReq::take_option_list_size() const {
  return take_option_list_.size();
}
inline void TakeBattlePassRewardReq::clear_take_option_list() {
  take_option_list_.Clear();
}
inline const ::proto::BattlePassRewardTakeOption& TakeBattlePassRewardReq::take_option_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.TakeBattlePassRewardReq.take_option_list)
  return take_option_list_.Get(index);
}
inline ::proto::BattlePassRewardTakeOption* TakeBattlePassRewardReq::mutable_take_option_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.TakeBattlePassRewardReq.take_option_list)
  return take_option_list_.Mutable(index);
}
inline ::proto::BattlePassRewardTakeOption* TakeBattlePassRewardReq::add_take_option_list() {
  // @@protoc_insertion_point(field_add:proto.TakeBattlePassRewardReq.take_option_list)
  return take_option_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::BattlePassRewardTakeOption >*
TakeBattlePassRewardReq::mutable_take_option_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.TakeBattlePassRewardReq.take_option_list)
  return &take_option_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::BattlePassRewardTakeOption >&
TakeBattlePassRewardReq::take_option_list() const {
  // @@protoc_insertion_point(field_list:proto.TakeBattlePassRewardReq.take_option_list)
  return take_option_list_;
}

// -------------------------------------------------------------------

// TakeBattlePassRewardRsp

// repeated .proto.ItemParam item_list = 7;
inline int TakeBattlePassRewardRsp::item_list_size() const {
  return item_list_.size();
}
inline void TakeBattlePassRewardRsp::clear_item_list() {
  item_list_.Clear();
}
inline const ::proto::ItemParam& TakeBattlePassRewardRsp::item_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.TakeBattlePassRewardRsp.item_list)
  return item_list_.Get(index);
}
inline ::proto::ItemParam* TakeBattlePassRewardRsp::mutable_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.TakeBattlePassRewardRsp.item_list)
  return item_list_.Mutable(index);
}
inline ::proto::ItemParam* TakeBattlePassRewardRsp::add_item_list() {
  // @@protoc_insertion_point(field_add:proto.TakeBattlePassRewardRsp.item_list)
  return item_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >*
TakeBattlePassRewardRsp::mutable_item_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.TakeBattlePassRewardRsp.item_list)
  return &item_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >&
TakeBattlePassRewardRsp::item_list() const {
  // @@protoc_insertion_point(field_list:proto.TakeBattlePassRewardRsp.item_list)
  return item_list_;
}

// int32 retcode = 13;
inline void TakeBattlePassRewardRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 TakeBattlePassRewardRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.TakeBattlePassRewardRsp.retcode)
  return retcode_;
}
inline void TakeBattlePassRewardRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.TakeBattlePassRewardRsp.retcode)
}

// repeated .proto.BattlePassRewardTakeOption take_option_list = 9;
inline int TakeBattlePassRewardRsp::take_option_list_size() const {
  return take_option_list_.size();
}
inline void TakeBattlePassRewardRsp::clear_take_option_list() {
  take_option_list_.Clear();
}
inline const ::proto::BattlePassRewardTakeOption& TakeBattlePassRewardRsp::take_option_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.TakeBattlePassRewardRsp.take_option_list)
  return take_option_list_.Get(index);
}
inline ::proto::BattlePassRewardTakeOption* TakeBattlePassRewardRsp::mutable_take_option_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.TakeBattlePassRewardRsp.take_option_list)
  return take_option_list_.Mutable(index);
}
inline ::proto::BattlePassRewardTakeOption* TakeBattlePassRewardRsp::add_take_option_list() {
  // @@protoc_insertion_point(field_add:proto.TakeBattlePassRewardRsp.take_option_list)
  return take_option_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::BattlePassRewardTakeOption >*
TakeBattlePassRewardRsp::mutable_take_option_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.TakeBattlePassRewardRsp.take_option_list)
  return &take_option_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::BattlePassRewardTakeOption >&
TakeBattlePassRewardRsp::take_option_list() const {
  // @@protoc_insertion_point(field_list:proto.TakeBattlePassRewardRsp.take_option_list)
  return take_option_list_;
}

// -------------------------------------------------------------------

// TakeBattlePassMissionPointReq

// repeated uint32 mission_id_list = 5;
inline int TakeBattlePassMissionPointReq::mission_id_list_size() const {
  return mission_id_list_.size();
}
inline void TakeBattlePassMissionPointReq::clear_mission_id_list() {
  mission_id_list_.Clear();
}
inline ::google::protobuf::uint32 TakeBattlePassMissionPointReq::mission_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.TakeBattlePassMissionPointReq.mission_id_list)
  return mission_id_list_.Get(index);
}
inline void TakeBattlePassMissionPointReq::set_mission_id_list(int index, ::google::protobuf::uint32 value) {
  mission_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.TakeBattlePassMissionPointReq.mission_id_list)
}
inline void TakeBattlePassMissionPointReq::add_mission_id_list(::google::protobuf::uint32 value) {
  mission_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.TakeBattlePassMissionPointReq.mission_id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TakeBattlePassMissionPointReq::mission_id_list() const {
  // @@protoc_insertion_point(field_list:proto.TakeBattlePassMissionPointReq.mission_id_list)
  return mission_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TakeBattlePassMissionPointReq::mutable_mission_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.TakeBattlePassMissionPointReq.mission_id_list)
  return &mission_id_list_;
}

// -------------------------------------------------------------------

// TakeBattlePassMissionPointRsp

// int32 retcode = 4;
inline void TakeBattlePassMissionPointRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 TakeBattlePassMissionPointRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.TakeBattlePassMissionPointRsp.retcode)
  return retcode_;
}
inline void TakeBattlePassMissionPointRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.TakeBattlePassMissionPointRsp.retcode)
}

// repeated uint32 mission_id_list = 11;
inline int TakeBattlePassMissionPointRsp::mission_id_list_size() const {
  return mission_id_list_.size();
}
inline void TakeBattlePassMissionPointRsp::clear_mission_id_list() {
  mission_id_list_.Clear();
}
inline ::google::protobuf::uint32 TakeBattlePassMissionPointRsp::mission_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.TakeBattlePassMissionPointRsp.mission_id_list)
  return mission_id_list_.Get(index);
}
inline void TakeBattlePassMissionPointRsp::set_mission_id_list(int index, ::google::protobuf::uint32 value) {
  mission_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.TakeBattlePassMissionPointRsp.mission_id_list)
}
inline void TakeBattlePassMissionPointRsp::add_mission_id_list(::google::protobuf::uint32 value) {
  mission_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.TakeBattlePassMissionPointRsp.mission_id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TakeBattlePassMissionPointRsp::mission_id_list() const {
  // @@protoc_insertion_point(field_list:proto.TakeBattlePassMissionPointRsp.mission_id_list)
  return mission_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TakeBattlePassMissionPointRsp::mutable_mission_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.TakeBattlePassMissionPointRsp.mission_id_list)
  return &mission_id_list_;
}

// -------------------------------------------------------------------

// GetBattlePassProductReq

// uint32 battle_pass_product_play_type = 10;
inline void GetBattlePassProductReq::clear_battle_pass_product_play_type() {
  battle_pass_product_play_type_ = 0u;
}
inline ::google::protobuf::uint32 GetBattlePassProductReq::battle_pass_product_play_type() const {
  // @@protoc_insertion_point(field_get:proto.GetBattlePassProductReq.battle_pass_product_play_type)
  return battle_pass_product_play_type_;
}
inline void GetBattlePassProductReq::set_battle_pass_product_play_type(::google::protobuf::uint32 value) {
  
  battle_pass_product_play_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GetBattlePassProductReq.battle_pass_product_play_type)
}

// -------------------------------------------------------------------

// GetBattlePassProductRsp

// int32 retcode = 14;
inline void GetBattlePassProductRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 GetBattlePassProductRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GetBattlePassProductRsp.retcode)
  return retcode_;
}
inline void GetBattlePassProductRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GetBattlePassProductRsp.retcode)
}

// string price_tier = 6;
inline void GetBattlePassProductRsp::clear_price_tier() {
  price_tier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetBattlePassProductRsp::price_tier() const {
  // @@protoc_insertion_point(field_get:proto.GetBattlePassProductRsp.price_tier)
  return price_tier_.GetNoArena();
}
inline void GetBattlePassProductRsp::set_price_tier(const ::std::string& value) {
  
  price_tier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.GetBattlePassProductRsp.price_tier)
}
#if LANG_CXX11
inline void GetBattlePassProductRsp::set_price_tier(::std::string&& value) {
  
  price_tier_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.GetBattlePassProductRsp.price_tier)
}
#endif
inline void GetBattlePassProductRsp::set_price_tier(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  price_tier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.GetBattlePassProductRsp.price_tier)
}
inline void GetBattlePassProductRsp::set_price_tier(const char* value, size_t size) {
  
  price_tier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.GetBattlePassProductRsp.price_tier)
}
inline ::std::string* GetBattlePassProductRsp::mutable_price_tier() {
  
  // @@protoc_insertion_point(field_mutable:proto.GetBattlePassProductRsp.price_tier)
  return price_tier_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetBattlePassProductRsp::release_price_tier() {
  // @@protoc_insertion_point(field_release:proto.GetBattlePassProductRsp.price_tier)
  
  return price_tier_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetBattlePassProductRsp::set_allocated_price_tier(::std::string* price_tier) {
  if (price_tier != NULL) {
    
  } else {
    
  }
  price_tier_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), price_tier);
  // @@protoc_insertion_point(field_set_allocated:proto.GetBattlePassProductRsp.price_tier)
}

// uint32 battle_pass_product_play_type = 2;
inline void GetBattlePassProductRsp::clear_battle_pass_product_play_type() {
  battle_pass_product_play_type_ = 0u;
}
inline ::google::protobuf::uint32 GetBattlePassProductRsp::battle_pass_product_play_type() const {
  // @@protoc_insertion_point(field_get:proto.GetBattlePassProductRsp.battle_pass_product_play_type)
  return battle_pass_product_play_type_;
}
inline void GetBattlePassProductRsp::set_battle_pass_product_play_type(::google::protobuf::uint32 value) {
  
  battle_pass_product_play_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GetBattlePassProductRsp.battle_pass_product_play_type)
}

// string product_id = 1;
inline void GetBattlePassProductRsp::clear_product_id() {
  product_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetBattlePassProductRsp::product_id() const {
  // @@protoc_insertion_point(field_get:proto.GetBattlePassProductRsp.product_id)
  return product_id_.GetNoArena();
}
inline void GetBattlePassProductRsp::set_product_id(const ::std::string& value) {
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.GetBattlePassProductRsp.product_id)
}
#if LANG_CXX11
inline void GetBattlePassProductRsp::set_product_id(::std::string&& value) {
  
  product_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.GetBattlePassProductRsp.product_id)
}
#endif
inline void GetBattlePassProductRsp::set_product_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.GetBattlePassProductRsp.product_id)
}
inline void GetBattlePassProductRsp::set_product_id(const char* value, size_t size) {
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.GetBattlePassProductRsp.product_id)
}
inline ::std::string* GetBattlePassProductRsp::mutable_product_id() {
  
  // @@protoc_insertion_point(field_mutable:proto.GetBattlePassProductRsp.product_id)
  return product_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetBattlePassProductRsp::release_product_id() {
  // @@protoc_insertion_point(field_release:proto.GetBattlePassProductRsp.product_id)
  
  return product_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetBattlePassProductRsp::set_allocated_product_id(::std::string* product_id) {
  if (product_id != NULL) {
    
  } else {
    
  }
  product_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_id);
  // @@protoc_insertion_point(field_set_allocated:proto.GetBattlePassProductRsp.product_id)
}

// uint32 cur_schedule_id = 11;
inline void GetBattlePassProductRsp::clear_cur_schedule_id() {
  cur_schedule_id_ = 0u;
}
inline ::google::protobuf::uint32 GetBattlePassProductRsp::cur_schedule_id() const {
  // @@protoc_insertion_point(field_get:proto.GetBattlePassProductRsp.cur_schedule_id)
  return cur_schedule_id_;
}
inline void GetBattlePassProductRsp::set_cur_schedule_id(::google::protobuf::uint32 value) {
  
  cur_schedule_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GetBattlePassProductRsp.cur_schedule_id)
}

// -------------------------------------------------------------------

// SetBattlePassViewedReq

// uint32 schedule_id = 6;
inline void SetBattlePassViewedReq::clear_schedule_id() {
  schedule_id_ = 0u;
}
inline ::google::protobuf::uint32 SetBattlePassViewedReq::schedule_id() const {
  // @@protoc_insertion_point(field_get:proto.SetBattlePassViewedReq.schedule_id)
  return schedule_id_;
}
inline void SetBattlePassViewedReq::set_schedule_id(::google::protobuf::uint32 value) {
  
  schedule_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SetBattlePassViewedReq.schedule_id)
}

// -------------------------------------------------------------------

// SetBattlePassViewedRsp

// uint32 schedule_id = 2;
inline void SetBattlePassViewedRsp::clear_schedule_id() {
  schedule_id_ = 0u;
}
inline ::google::protobuf::uint32 SetBattlePassViewedRsp::schedule_id() const {
  // @@protoc_insertion_point(field_get:proto.SetBattlePassViewedRsp.schedule_id)
  return schedule_id_;
}
inline void SetBattlePassViewedRsp::set_schedule_id(::google::protobuf::uint32 value) {
  
  schedule_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SetBattlePassViewedRsp.schedule_id)
}

// int32 retcode = 3;
inline void SetBattlePassViewedRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 SetBattlePassViewedRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.SetBattlePassViewedRsp.retcode)
  return retcode_;
}
inline void SetBattlePassViewedRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.SetBattlePassViewedRsp.retcode)
}

// -------------------------------------------------------------------

// BattlePassBuySuccNotify

// uint32 schedule_id = 4;
inline void BattlePassBuySuccNotify::clear_schedule_id() {
  schedule_id_ = 0u;
}
inline ::google::protobuf::uint32 BattlePassBuySuccNotify::schedule_id() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassBuySuccNotify.schedule_id)
  return schedule_id_;
}
inline void BattlePassBuySuccNotify::set_schedule_id(::google::protobuf::uint32 value) {
  
  schedule_id_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassBuySuccNotify.schedule_id)
}

// uint32 product_play_type = 11;
inline void BattlePassBuySuccNotify::clear_product_play_type() {
  product_play_type_ = 0u;
}
inline ::google::protobuf::uint32 BattlePassBuySuccNotify::product_play_type() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassBuySuccNotify.product_play_type)
  return product_play_type_;
}
inline void BattlePassBuySuccNotify::set_product_play_type(::google::protobuf::uint32 value) {
  
  product_play_type_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassBuySuccNotify.product_play_type)
}

// uint32 add_point = 12;
inline void BattlePassBuySuccNotify::clear_add_point() {
  add_point_ = 0u;
}
inline ::google::protobuf::uint32 BattlePassBuySuccNotify::add_point() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassBuySuccNotify.add_point)
  return add_point_;
}
inline void BattlePassBuySuccNotify::set_add_point(::google::protobuf::uint32 value) {
  
  add_point_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassBuySuccNotify.add_point)
}

// repeated .proto.ItemParam item_list = 9;
inline int BattlePassBuySuccNotify::item_list_size() const {
  return item_list_.size();
}
inline void BattlePassBuySuccNotify::clear_item_list() {
  item_list_.Clear();
}
inline const ::proto::ItemParam& BattlePassBuySuccNotify::item_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.BattlePassBuySuccNotify.item_list)
  return item_list_.Get(index);
}
inline ::proto::ItemParam* BattlePassBuySuccNotify::mutable_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.BattlePassBuySuccNotify.item_list)
  return item_list_.Mutable(index);
}
inline ::proto::ItemParam* BattlePassBuySuccNotify::add_item_list() {
  // @@protoc_insertion_point(field_add:proto.BattlePassBuySuccNotify.item_list)
  return item_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >*
BattlePassBuySuccNotify::mutable_item_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.BattlePassBuySuccNotify.item_list)
  return &item_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >&
BattlePassBuySuccNotify::item_list() const {
  // @@protoc_insertion_point(field_list:proto.BattlePassBuySuccNotify.item_list)
  return item_list_;
}

// -------------------------------------------------------------------

// BuyBattlePassLevelReq

// uint32 buy_level = 8;
inline void BuyBattlePassLevelReq::clear_buy_level() {
  buy_level_ = 0u;
}
inline ::google::protobuf::uint32 BuyBattlePassLevelReq::buy_level() const {
  // @@protoc_insertion_point(field_get:proto.BuyBattlePassLevelReq.buy_level)
  return buy_level_;
}
inline void BuyBattlePassLevelReq::set_buy_level(::google::protobuf::uint32 value) {
  
  buy_level_ = value;
  // @@protoc_insertion_point(field_set:proto.BuyBattlePassLevelReq.buy_level)
}

// -------------------------------------------------------------------

// BuyBattlePassLevelRsp

// int32 retcode = 5;
inline void BuyBattlePassLevelRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 BuyBattlePassLevelRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.BuyBattlePassLevelRsp.retcode)
  return retcode_;
}
inline void BuyBattlePassLevelRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.BuyBattlePassLevelRsp.retcode)
}

// uint32 buy_level = 13;
inline void BuyBattlePassLevelRsp::clear_buy_level() {
  buy_level_ = 0u;
}
inline ::google::protobuf::uint32 BuyBattlePassLevelRsp::buy_level() const {
  // @@protoc_insertion_point(field_get:proto.BuyBattlePassLevelRsp.buy_level)
  return buy_level_;
}
inline void BuyBattlePassLevelRsp::set_buy_level(::google::protobuf::uint32 value) {
  
  buy_level_ = value;
  // @@protoc_insertion_point(field_set:proto.BuyBattlePassLevelRsp.buy_level)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace proto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::proto::BattlePassMission_MissionStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::BattlePassMission_MissionStatus>() {
  return ::proto::BattlePassMission_MissionStatus_descriptor();
}
template <> struct is_proto_enum< ::proto::BattlePassUnlockStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::BattlePassUnlockStatus>() {
  return ::proto::BattlePassUnlockStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cmd_2fcmd_5fbattle_5fpass_2eproto__INCLUDED
